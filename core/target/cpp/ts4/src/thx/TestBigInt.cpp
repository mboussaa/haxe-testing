// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_Int64s
#include <thx/Int64s.h>
#endif
#ifndef INCLUDED_thx_TestBigInt
#include <thx/TestBigInt.h>
#endif
#ifndef INCLUDED_thx__BigInt_BigInt_Impl_
#include <thx/_BigInt/BigInt_Impl_.h>
#endif
#ifndef INCLUDED_thx_bigint_Big
#include <thx/bigint/Big.h>
#endif
#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Bigs
#include <thx/bigint/Bigs.h>
#endif
#ifndef INCLUDED_thx_bigint_Small
#include <thx/bigint/Small.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestBigInt_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestBigInt","new",0xdb519c3d,"thx.TestBigInt.new","thx/TestBigInt.hx",11,0x152acd32)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  11)		this->x = i;
            	}

Dynamic TestBigInt_obj::__CreateEmpty() { return new TestBigInt_obj; }

hx::ObjectPtr< TestBigInt_obj > TestBigInt_obj::__new(Int i)
{
	hx::ObjectPtr< TestBigInt_obj > _hx_result = new TestBigInt_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestBigInt_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestBigInt_obj > _hx_result = new TestBigInt_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestBigInt_obj::testIssue82(){
            	HX_STACK_FRAME("thx.TestBigInt","testIssue82",0x738113be,"thx.TestBigInt.testIssue82","thx/TestBigInt.hx",14,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE(  16)		::haxe::Timer_obj::stamp();
HXLINE(  17)		{
HXLINE(  17)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  17)			HX_VARI( Int,_g) = this->x;
HXDLIN(  17)			while((_g1 < _g)){
HXLINE(  17)				++_g1;
HXLINE(  18)				HX_VARI( ::Dynamic,s) = ::thx::bigint::Bigs_obj::fromInt((int)101);
HXLINE(  19)				HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("100",71,58,25,00),(int)10);
HXDLIN(  19)				Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::toInt(this1);
HXDLIN(  19)				::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp);
HXDLIN(  19)				HX_VARI( ::Dynamic,b) =  ::thx::bigint::Big_obj::__new(_hx_tmp1,false);
HXLINE(  20)				HX_VARI( ::Dynamic,r) = ::thx::bigint::BigIntImpl_obj::subtract(s,b);
HXLINE(  21)				::Dynamic _hx_tmp2 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN(  21)				Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::BigIntImpl_obj::subtract(s,b));
HXDLIN(  21)				::String _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::toString(s);
HXDLIN(  21)				::String _hx_tmp5 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp4) + HX_(" - ",73,6f,18,00));
HXDLIN(  21)				::String _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::toString(b);
HXDLIN(  21)				::String _hx_tmp7 = ((_hx_tmp5 + _hx_tmp6) + HX_(" to be equal 1 but it is ",b3,02,14,6b));
HXDLIN(  21)				::String _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::toString(r);
HXDLIN(  21)				::utest::Assert_obj::isTrue(_hx_tmp3,(_hx_tmp7 + _hx_tmp8),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),21,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIssue82",e1,a2,d8,4a)));
HXLINE(  23)				HX_VARI_NAME( ::Dynamic,s1,"s") = ::thx::bigint::Bigs_obj::fromInt((int)101);
HXLINE(  24)				HX_VARI_NAME( ::Dynamic,b1,"b") = ::thx::bigint::Bigs_obj::fromInt((int)10);
HXLINE(  25)				HX_VARI( ::Dynamic,exp) = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN(  25)				b1 = ::thx::bigint::BigIntImpl_obj::pow(b1,exp);
HXLINE(  26)				HX_VARI_NAME( ::Dynamic,r1,"r") = ::thx::bigint::BigIntImpl_obj::subtract(s1,b1);
HXLINE(  27)				::Dynamic _hx_tmp9 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN(  27)				Bool _hx_tmp10 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp9,::thx::bigint::BigIntImpl_obj::subtract(s1,b1));
HXDLIN(  27)				::String _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::toString(s1);
HXDLIN(  27)				::String _hx_tmp12 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp11) + HX_(" - ",73,6f,18,00));
HXDLIN(  27)				::String _hx_tmp13 = ::thx::bigint::BigIntImpl_obj::toString(b1);
HXDLIN(  27)				::String _hx_tmp14 = ((_hx_tmp12 + _hx_tmp13) + HX_(" to be equal 1 but it is ",b3,02,14,6b));
HXDLIN(  27)				::String _hx_tmp15 = ::thx::bigint::BigIntImpl_obj::toString(r1);
HXDLIN(  27)				::utest::Assert_obj::isTrue(_hx_tmp10,(_hx_tmp14 + _hx_tmp15),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),27,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIssue82",e1,a2,d8,4a)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testIssue82,(void))

void TestBigInt_obj::testFromInt64(){
            	HX_STACK_FRAME("thx.TestBigInt","testFromInt64",0x9e301f8e,"thx.TestBigInt.testFromInt64","thx/TestBigInt.hx",33,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE(  33)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  33)		HX_VARI( Int,_g) = this->x;
HXDLIN(  33)		while((_g1 < _g)){
HXLINE(  33)			++_g1;
HXLINE(  34)			 ::cpp::Int64Struct _hx_tmp = ::thx::Int64s_obj::minValue;
HXDLIN(  34)			 ::cpp::Int64Struct _hx_tmp1 = ( ::cpp::Int64Struct((int)-1));
HXDLIN(  34)			 ::cpp::Int64Struct _hx_tmp2 = ( ::cpp::Int64Struct((int)0));
HXDLIN(  34)			HX_VARI( ::Array< ::Dynamic>,values) = ::Array_obj< ::Dynamic>::__new(5)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,( ::cpp::Int64Struct((int)1)))->init(4,::thx::Int64s_obj::maxValue);
HXLINE(  35)			{
HXLINE(  35)				HX_VARI( Int,_g2) = (int)0;
HXDLIN(  35)				while((_g2 < values->length)){
HXLINE(  35)					HX_VARI(  ::cpp::Int64Struct,value) = values->__get(_g2).StaticCast<  ::cpp::Int64Struct >();
HXDLIN(  35)					++_g2;
HXLINE(  36)					HX_VARI( ::Dynamic,r) = ::thx::bigint::Bigs_obj::fromInt64(value);
HXDLIN(  36)					HX_VARI(  ::cpp::Int64Struct,i) = ::thx::bigint::Bigs_obj::toInt64(r);
HXLINE(  38)					Bool _hx_tmp3 = _hx_int64_eq(i,value);
HXDLIN(  38)					::String _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::toString(r);
HXDLIN(  38)					::String _hx_tmp5 = ((HX_("Int64 parsed as ",92,f7,e4,74) + _hx_tmp4) + HX_(" and converted to ",0e,11,e9,1b));
HXDLIN(  38)					::String _hx_tmp6 = _hx_int64_to_string(i);
HXDLIN(  38)					::String _hx_tmp7 = ((_hx_tmp5 + _hx_tmp6) + HX_(" but expected ",e9,a0,e7,6d));
HXDLIN(  38)					::String _hx_tmp8 = _hx_int64_to_string(value);
HXDLIN(  38)					::utest::Assert_obj::isTrue(_hx_tmp3,(_hx_tmp7 + _hx_tmp8),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),38,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testFromInt64",71,fd,e3,a5)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testFromInt64,(void))

void TestBigInt_obj::testLcmAndGcd(){
            	HX_STACK_FRAME("thx.TestBigInt","testLcmAndGcd",0x921a6e52,"thx.TestBigInt.testLcmAndGcd","thx/TestBigInt.hx",43,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE(  43)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  43)		HX_VARI( Int,_g) = this->x;
HXDLIN(  43)		while((_g1 < _g)){
HXLINE(  43)			++_g1;
HXLINE(  44)			::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::fromInt((int)21);
HXDLIN(  44)			::Dynamic _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::lcm(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)6));
HXDLIN(  44)			Bool _hx_tmp2 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp1,::thx::bigint::Bigs_obj::fromInt((int)42));
HXDLIN(  44)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),44,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testLcmAndGcd",35,4c,ce,99)));
HXLINE(  45)			::Dynamic _hx_tmp3 = ::thx::bigint::Bigs_obj::fromInt((int)42);
HXDLIN(  45)			::Dynamic _hx_tmp4 = ::thx::_BigInt::BigInt_Impl__obj::gcd(_hx_tmp3,::thx::bigint::Bigs_obj::fromInt((int)56));
HXDLIN(  45)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)14));
HXDLIN(  45)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),45,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testLcmAndGcd",35,4c,ce,99)));
HXLINE(  46)			::Dynamic _hx_tmp6 = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN(  46)			::Dynamic _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::gcd(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)56));
HXDLIN(  46)			Bool _hx_tmp8 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp7,::thx::bigint::Bigs_obj::fromInt((int)56));
HXDLIN(  46)			::utest::Assert_obj::isTrue(_hx_tmp8,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),46,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testLcmAndGcd",35,4c,ce,99)));
HXLINE(  47)			::Dynamic _hx_tmp9 = ::thx::bigint::Bigs_obj::fromInt((int)42);
HXDLIN(  47)			::Dynamic _hx_tmp10 = ::thx::_BigInt::BigInt_Impl__obj::gcd(_hx_tmp9,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN(  47)			Bool _hx_tmp11 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp10,::thx::bigint::Bigs_obj::fromInt((int)42));
HXDLIN(  47)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),47,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testLcmAndGcd",35,4c,ce,99)));
HXLINE(  48)			::Dynamic _hx_tmp12 = ::thx::bigint::Bigs_obj::fromInt((int)17);
HXDLIN(  48)			::Dynamic _hx_tmp13 = ::thx::_BigInt::BigInt_Impl__obj::gcd(_hx_tmp12,::thx::bigint::Bigs_obj::fromInt((int)103));
HXDLIN(  48)			Bool _hx_tmp14 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp13,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN(  48)			::utest::Assert_obj::isTrue(_hx_tmp14,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),48,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testLcmAndGcd",35,4c,ce,99)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testLcmAndGcd,(void))

void TestBigInt_obj::testIncrements(){
            	HX_STACK_FRAME("thx.TestBigInt","testIncrements",0x776b4199,"thx.TestBigInt.testIncrements","thx/TestBigInt.hx",52,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE(  52)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  52)		HX_VARI( Int,_g) = this->x;
HXDLIN(  52)		while((_g1 < _g)){
HXLINE(  52)			++_g1;
HXLINE(  53)			Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN(  53)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),53,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIncrements",56,8a,19,2d)));
HXLINE(  54)			HX_VARI( ::Dynamic,a) = ::thx::_BigInt::BigInt_Impl__obj::zero;
HXLINE(  55)			a = ::thx::bigint::BigIntImpl_obj::add(a,::thx::bigint::Small_obj::one);
HXLINE(  54)			HX_VARI( ::Dynamic,b) = a;
HXLINE(  56)			HX_VARI( ::Dynamic,v) = a;
HXDLIN(  56)			a = ::thx::bigint::BigIntImpl_obj::add(a,::thx::bigint::Small_obj::one);
HXLINE(  54)			HX_VARI( ::Dynamic,c) = v;
HXLINE(  57)			a = ::thx::bigint::BigIntImpl_obj::subtract(a,::thx::bigint::Small_obj::one);
HXLINE(  54)			HX_VARI( ::Dynamic,d) = a;
HXLINE(  58)			HX_VARI_NAME( ::Dynamic,v1,"v") = a;
HXDLIN(  58)			a = ::thx::bigint::BigIntImpl_obj::subtract(a,::thx::bigint::Small_obj::one);
HXLINE(  54)			HX_VARI( ::Dynamic,e) = v1;
HXLINE(  59)			Bool _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::isZero(::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN(  59)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),59,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIncrements",56,8a,19,2d)));
HXLINE(  60)			Bool _hx_tmp2 = ::thx::_BigInt::BigInt_Impl__obj::equals(b,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN(  60)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),60,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIncrements",56,8a,19,2d)));
HXLINE(  61)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(c,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN(  61)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),61,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIncrements",56,8a,19,2d)));
HXLINE(  62)			Bool _hx_tmp4 = ::thx::_BigInt::BigInt_Impl__obj::equals(d,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN(  62)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),62,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIncrements",56,8a,19,2d)));
HXLINE(  63)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(e,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN(  63)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),63,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIncrements",56,8a,19,2d)));
HXLINE(  64)			Bool _hx_tmp6 = ::thx::_BigInt::BigInt_Impl__obj::equals(a,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN(  64)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),64,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIncrements",56,8a,19,2d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testIncrements,(void))

void TestBigInt_obj::testCanHandleLargeNumbers(){
            	HX_STACK_FRAME("thx.TestBigInt","testCanHandleLargeNumbers",0x59db36f2,"thx.TestBigInt.testCanHandleLargeNumbers","thx/TestBigInt.hx",68,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE(  68)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  68)		HX_VARI( Int,_g) = this->x;
HXDLIN(  68)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,factorial) HXARGC(1)
            			::Dynamic _hx_run(::Dynamic n){
            				HX_STACK_FRAME("thx.TestBigInt","testCanHandleLargeNumbers",0x59db36f2,"thx.TestBigInt.testCanHandleLargeNumbers","thx/TestBigInt.hx",72,0x152acd32)
            				HX_STACK_ARG(n,"n")
HXLINE(  73)				Bool _hx_tmp;
HXDLIN(  73)				Bool _hx_tmp1 = !(::thx::_BigInt::BigInt_Impl__obj::equals(n,::thx::bigint::Bigs_obj::fromInt((int)0)));
HXDLIN(  73)				if (_hx_tmp1) {
HXLINE(  73)					_hx_tmp = ::thx::_BigInt::BigInt_Impl__obj::equals(n,::thx::bigint::Bigs_obj::fromInt((int)1));
            				}
            				else {
HXLINE(  73)					_hx_tmp = true;
            				}
HXDLIN(  73)				if (_hx_tmp) {
HXLINE(  74)					return ::thx::bigint::Bigs_obj::fromInt((int)1);
            				}
HXLINE(  76)				HX_VARI_NAME( ::Dynamic,this1,"this") = factorial->__get((int)0)(::thx::bigint::BigIntImpl_obj::prev(n));
HXDLIN(  76)				return ::thx::bigint::BigIntImpl_obj::multiply(this1,n);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  68)			++_g1;
HXLINE(  69)			HX_VARI( ::Dynamic,tenFactorial) = ::thx::bigint::Bigs_obj::parseBase(HX_("3628800",af,c0,43,cf),(int)10);
HXDLIN(  69)			HX_VARI( ::Dynamic,hundredFactorial) = ::thx::bigint::Bigs_obj::parseBase(HX_("93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000",ca,31,a8,74),(int)10);
HXDLIN(  69)			HX_VARI( ::Dynamic,threeToTenThousand) = ::thx::bigint::Bigs_obj::parseBase(HX_("16313501853426258743032567291811547168121324535825379939348203261918257308143190787480155630847848309673252045223235795433405582999177203852381479145368112501453192355166224391025423628843556686559659645012014177448275529990373274425446425751235537341867387607813619937225616872862016504805593174059909520461668500663118926911571773452255850626968526251879139867085080472539640933730243410152186914328917354576854457274195562218013337745628502470673059426999114202540773175988199842487276183685299388927825296786440252999444785694183675323521704432195785806270123388382931770198990841300861506996108944782065015163410344894945809337689156807686673462563038164792190665340124344133980763205594364754963451564072340502606377790585114123814919001637177034457385019939060232925194471114235892978565322415628344142184842892083466227875760501276009801530703037525839157893875741192497705300469691062454369926795975456340236777734354667139072601574969834312769653557184396147587071260443947944862235744459711204473062937764153770030210332183635531818173456618022745975055313212598514429587545547296534609597194836036546870491771927625214352957503454948403635822345728774885175809500158451837389413798095329711993092101417428406774326126450005467888736546254948658602484494535938888656542746977424368385335496083164921318601934977025095780370104307980276356857350349205866078371806065542393536101673402017980951598946980664330391505845803674248348878071010412918667335823849899623486215050304052577789848512410263834811719236949311423411823585316405085306164936671137456985394285677324771775046050970865520893596151687017153855755197348199659070192954771308347627111052471134476325986362838585959552209645382089055182871854866744633737533217524880118401787595094060855717010144087136495532418544241489437080074716158404895914136451802032446707961058757633345691696743293869623745410870051851590672859347061212573446572045088465460616826082579731686004585218284333452396157730036306379421822435818001505905203918209206969662326706952623512427380240468784114535101496733983401240219840048956733689309620321613793757156727562461651933397540266795963865921590913322060572673349849253303397874242381960775337182730037783698708748781738419747698880321601186310506332869704931303076839444790968339306301273371014087248060946851793697973114432706759288546077622831002526800554849696867710280945946603669593797354642136622231192695027321229511912952940320879763123151760555959496961163141455688278842949587288399100273691880018774147568892650186152065335219113072582417699616901995530249937735219099786758954892534365835235843156112799728164123461219817343904782402517111603206575330527850752564642995318064985900815557979945885931124351303252811255254295797082281946658798705979077492469849644183166585950844953164726896146168297808178398470451561320526180542310840744843107469368959707726836608471817060598771730170755446473440774031371227437651048421606224757527085958515947273151027400662948161111284777828103531499488913672800783167888051177155427285103861736658069404797695900758820465238673970882660162285107599221418743657006872537842677883708807515850397691812433880561772652364847297019508025848964833883225165668986935081274596293983121864046277268590401580209059988500511262470167150495261908136688693861324081559046336288963037090312033522400722360882494928182809075406914319957044927504420797278117837677431446979085756432990753582588102440240611039084516401089948868433353748444104639734074519165067632941419347985624435567342072815910754484123812917487312938280670403228188813003978384081332242484646571417574404852962675165616101527367425654869508712001788393846171780457455963045764943565964887518396481296159902471996735508854292964536796779404377230965723361625182030798297734785854606060323419091646711138678490928840107449923456834763763114226000770316931243666699425694828181155048843161380832067845480569758457751090640996007242018255400627276908188082601795520167054701327802366989747082835481105543878446889896230696091881643547476154998574015907396059478684978574180486798918438643164618541351689258379042326487669479733384712996754251703808037828636599654447727795924596382283226723503386540591321268603222892807562509801015765174359627788357881606366119032951829868274617539946921221330284257027058653162292482686679275266764009881985590648534544939224296689791195355783205968492422636277656735338488299104238060289209390654467316291591219712866052661347026855261289381236881063068219249064767086495184176816629077103667131505064964190910450196502178972477361881300608688593782509793781457170396897496908861893034634895715117114601514654381347139092345833472226493656930996045016355808162984965203661519182202145414866559662218796964329217241498105206552200001",7f,21,bc,44),(int)10);
HXLINE(  72)			HX_VARI( ::Array< ::Dynamic>,factorial) = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(  72)			factorial[(int)0] =  ::Dynamic(new _hx_Closure_0(factorial));
HXDLIN(  72)			HX_VARI_NAME(  ::Dynamic,factorial1,"factorial") = factorial->__get((int)0);
HXLINE(  79)			::Dynamic _hx_tmp2 = factorial1(::thx::bigint::Bigs_obj::fromInt((int)10));
HXDLIN(  79)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,tenFactorial);
HXDLIN(  79)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),79,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testCanHandleLargeNumbers",55,dd,15,a8)));
HXLINE(  80)			::Dynamic _hx_tmp4 = factorial1(::thx::bigint::Bigs_obj::fromInt((int)100));
HXDLIN(  80)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,hundredFactorial);
HXDLIN(  80)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),80,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testCanHandleLargeNumbers",55,dd,15,a8)));
HXLINE(  83)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)3);
HXDLIN(  83)			HX_VARI( ::Dynamic,exp) = ::thx::bigint::Bigs_obj::fromInt((int)10000);
HXDLIN(  83)			HX_VARI( ::Dynamic,pow) = ::thx::bigint::BigIntImpl_obj::pow(this2,exp);
HXLINE(  86)			Bool _hx_tmp6 = ::thx::_BigInt::BigInt_Impl__obj::equals(pow,threeToTenThousand);
HXLINE(  87)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)3);
HXDLIN(  87)			::String _hx_tmp7 = ::thx::bigint::BigIntImpl_obj::toString(this3);
HXDLIN(  87)			::String _hx_tmp8 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp7) + HX_(".pow(10000) == ",36,09,23,a5));
HXDLIN(  87)			::String _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::toString(threeToTenThousand);
HXDLIN(  87)			::String _hx_tmp10 = ((_hx_tmp8 + _hx_tmp9) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  87)			::String _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::toString(pow);
HXLINE(  85)			::utest::Assert_obj::isTrue(_hx_tmp6,(_hx_tmp10 + _hx_tmp11),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),85,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testCanHandleLargeNumbers",55,dd,15,a8)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testCanHandleLargeNumbers,(void))

void TestBigInt_obj::testIsImmutable(){
            	HX_STACK_FRAME("thx.TestBigInt","testIsImmutable",0x57456f23,"thx.TestBigInt.testIsImmutable","thx/TestBigInt.hx",93,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE(  93)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  93)		HX_VARI( Int,_g) = this->x;
HXDLIN(  93)		while((_g1 < _g)){
HXLINE(  93)			++_g1;
HXLINE(  94)			HX_VARI( ::Dynamic,n) = ::thx::bigint::Bigs_obj::fromInt((int)14930352);
HXLINE(  95)			{
HXLINE(  95)				HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)9227465);
HXDLIN(  95)				::thx::bigint::BigIntImpl_obj::add(n,that);
            			}
HXLINE(  96)			Bool _hx_tmp = ::thx::_BigInt::BigInt_Impl__obj::equals(n,::thx::bigint::Bigs_obj::fromInt((int)14930352));
HXDLIN(  96)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),96,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsImmutable",c6,cb,16,9a)));
HXLINE(  97)			{
HXLINE(  97)				HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::fromInt((int)123456);
HXDLIN(  97)				::thx::bigint::BigIntImpl_obj::subtract(n,that1);
            			}
HXLINE(  98)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(n,::thx::bigint::Bigs_obj::fromInt((int)14930352));
HXDLIN(  98)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),98,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsImmutable",c6,cb,16,9a)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testIsImmutable,(void))

void TestBigInt_obj::testInts(){
            	HX_STACK_FRAME("thx.TestBigInt","testInts",0x47eedd19,"thx.TestBigInt.testInts","thx/TestBigInt.hx",102,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 102)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 102)		HX_VARI( Int,_g) = this->x;
HXDLIN( 102)		while((_g1 < _g)){
HXLINE( 102)			++_g1;
HXLINE( 103)			HX_VARI( ::Array< Int >,tests) = ::Array_obj< Int >::__new(17)->init(0,(int)1)->init(1,(int)2)->init(2,(int)4)->init(3,(int)8)->init(4,(int)16)->init(5,(int)32)->init(6,(int)64)->init(7,(int)128)->init(8,(int)256)->init(9,(int)512)->init(10,(int)1024)->init(11,(int)2048)->init(12,(int)4096)->init(13,(int)10000)->init(14,(int)100000)->init(15,(int)1000000)->init(16,(int)10000000);
HXLINE( 108)			{
HXLINE( 108)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 108)				while((_g2 < tests->length)){
HXLINE( 108)					HX_VARI( Int,test) = tests->__get(_g2);
HXDLIN( 108)					++_g2;
HXLINE( 109)					HX_VARI( ::Dynamic,out) = ::thx::bigint::Bigs_obj::fromInt(test);
HXLINE( 110)					Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::toInt(out);
HXDLIN( 110)					::String _hx_tmp1 = ((HX_("expected ",a8,7a,f8,e9) + test) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 110)					Int _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::toInt(out);
HXDLIN( 110)					::utest::Assert_obj::equals(test,_hx_tmp,(_hx_tmp1 + _hx_tmp2),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),110,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testInts",16,ca,ed,48)));
HXLINE( 112)					HX_VARI_NAME( ::Dynamic,out1,"out") = ::thx::bigint::Bigs_obj::fromInt(-(test));
HXLINE( 113)					Int _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::toInt(out1);
HXDLIN( 113)					::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + -(test)) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 113)					Int _hx_tmp5 = ::thx::bigint::BigIntImpl_obj::toInt(out1);
HXDLIN( 113)					::utest::Assert_obj::equals(-(test),_hx_tmp3,(_hx_tmp4 + _hx_tmp5),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),113,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testInts",16,ca,ed,48)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testInts,(void))

void TestBigInt_obj::testFloats(){
            	HX_STACK_FRAME("thx.TestBigInt","testFloats",0xe9f8830c,"thx.TestBigInt.testFloats","thx/TestBigInt.hx",118,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 118)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 118)		HX_VARI( Int,_g) = this->x;
HXDLIN( 118)		while((_g1 < _g)){
HXLINE( 118)			++_g1;
HXLINE( 119)			HX_VARI( ::Array< Float >,tests) = ::Array_obj< Float >::__new(9)->init(0,((Float)0.0))->init(1,((Float)1.0))->init(2,((Float)5.0))->init(3,((Float)1.2e20))->init(4,((Float)1.2e40))->init(5,((Float)1.234e63))->init(6,((Float)5.432e80))->init(7,((Float)0.00001))->init(8,((Float)1.2345e-50));
HXLINE( 121)			{
HXLINE( 121)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 121)				while((_g2 < tests->length)){
HXLINE( 121)					HX_VARI( Float,test) = tests->__get(_g2);
HXDLIN( 121)					++_g2;
HXLINE( 122)					HX_VARI( ::Dynamic,out) = ::thx::bigint::Bigs_obj::fromFloat(test);
HXLINE( 123)					Float _hx_tmp = ::thx::Floats_obj::roundTo(test,(int)0);
HXDLIN( 123)					Float _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::toFloat(out);
HXDLIN( 123)					Float _hx_tmp2 = ::thx::Floats_obj::roundTo(test,(int)0);
HXDLIN( 123)					::String _hx_tmp3 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp2) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 123)					Float _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::toFloat(out);
HXDLIN( 123)					::utest::Assert_obj::floatEquals(_hx_tmp,_hx_tmp1,null(),(_hx_tmp3 + _hx_tmp4),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),123,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testFloats",49,69,4a,5a)));
HXLINE( 125)					HX_VARI_NAME( ::Dynamic,out1,"out") = ::thx::bigint::Bigs_obj::fromFloat(-(test));
HXLINE( 126)					Float _hx_tmp5 = ::thx::Floats_obj::roundTo(-(test),(int)0);
HXDLIN( 126)					Float _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::toFloat(out1);
HXDLIN( 126)					Float _hx_tmp7 = ::thx::Floats_obj::roundTo(-(test),(int)0);
HXDLIN( 126)					::String _hx_tmp8 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp7) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 126)					Float _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::toFloat(out1);
HXDLIN( 126)					::utest::Assert_obj::floatEquals(_hx_tmp5,_hx_tmp6,null(),(_hx_tmp8 + _hx_tmp9),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),126,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testFloats",49,69,4a,5a)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testFloats,(void))

void TestBigInt_obj::testStrings(){
            	HX_STACK_FRAME("thx.TestBigInt","testStrings",0xde64ed2d,"thx.TestBigInt.testStrings","thx/TestBigInt.hx",131,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 131)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 131)		HX_VARI( Int,_g) = this->x;
HXDLIN( 131)		while((_g1 < _g)){
HXLINE( 131)			++_g1;
HXLINE( 132)			HX_VARI( ::Array< ::String >,tests) = ::Array_obj< ::String >::__new(5)->init(0,HX_("0",30,00,00,00))->init(1,HX_("3",33,00,00,00))->init(2,HX_("20",be,2b,00,00))->init(3,HX_("12345678901234567890",76,fc,db,ab))->init(4,HX_("999999999999999999",e0,a0,c1,84));
HXLINE( 137)			{
HXLINE( 137)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 137)				while((_g2 < tests->length)){
HXLINE( 137)					HX_VARI( ::String,test) = tests->__get(_g2);
HXDLIN( 137)					++_g2;
HXLINE( 138)					HX_VARI( ::Dynamic,out) = ::thx::bigint::Bigs_obj::parseBase(test,(int)10);
HXLINE( 139)					::String _hx_tmp = ::thx::bigint::BigIntImpl_obj::toString(out);
HXDLIN( 139)					::String _hx_tmp1 = ((HX_("expected ",a8,7a,f8,e9) + test) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 139)					::String _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::toString(out);
HXDLIN( 139)					::utest::Assert_obj::equals(test,_hx_tmp,(_hx_tmp1 + _hx_tmp2),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),139,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testStrings",50,7c,bc,b5)));
HXLINE( 141)					if ((test == HX_("0",30,00,00,00))) {
HXLINE( 142)						continue;
            					}
HXLINE( 144)					HX_VARI_NAME( ::Dynamic,out1,"out") = ::thx::bigint::Bigs_obj::parseBase((HX_("-",2d,00,00,00) + test),(int)10);
HXLINE( 145)					::String _hx_tmp3 = (HX_("-",2d,00,00,00) + test);
HXDLIN( 145)					::String _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::toString(out1);
HXDLIN( 145)					::String _hx_tmp5 = ((HX_("expected -",85,d8,72,cf) + test) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 145)					::String _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::toString(out1);
HXDLIN( 145)					::utest::Assert_obj::equals(_hx_tmp3,_hx_tmp4,(_hx_tmp5 + _hx_tmp6),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),145,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testStrings",50,7c,bc,b5)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testStrings,(void))

void TestBigInt_obj::testEquals(){
            	HX_STACK_FRAME("thx.TestBigInt","testEquals",0x68954df4,"thx.TestBigInt.testEquals","thx/TestBigInt.hx",150,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 150)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 150)		HX_VARI( Int,_g) = this->x;
HXDLIN( 150)		while((_g1 < _g)){
HXLINE( 150)			++_g1;
HXLINE( 151)			::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 151)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 151)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),151,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 152)			::Dynamic _hx_tmp2 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 152)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 152)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),152,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 153)			::Dynamic _hx_tmp4 = ::thx::bigint::Bigs_obj::parseBase(HX_("12345678901234567890",76,fc,db,ab),(int)10);
HXDLIN( 153)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::parseBase(HX_("12345678901234567890",76,fc,db,ab),(int)10));
HXDLIN( 153)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),153,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 154)			::Dynamic _hx_tmp6 = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 154)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 154)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),154,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 155)			::Dynamic _hx_tmp8 = ::thx::bigint::Bigs_obj::parseBase(HX_("-12345678901234567890",23,01,fd,66),(int)10);
HXDLIN( 155)			Bool _hx_tmp9 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp8,::thx::bigint::Bigs_obj::parseBase(HX_("-12345678901234567890",23,01,fd,66),(int)10));
HXDLIN( 155)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),155,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 157)			::Dynamic _hx_tmp10 = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 157)			Bool _hx_tmp11 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp10,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 157)			::utest::Assert_obj::isFalse(_hx_tmp11,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),157,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 158)			::Dynamic _hx_tmp12 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 158)			Bool _hx_tmp13 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp12,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 158)			::utest::Assert_obj::isFalse(_hx_tmp13,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),158,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 159)			::Dynamic _hx_tmp14 = ::thx::bigint::Bigs_obj::parseBase(HX_("12345678901234567890",76,fc,db,ab),(int)10);
HXDLIN( 159)			Bool _hx_tmp15 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp14,::thx::bigint::Bigs_obj::parseBase(HX_("12345678901234567890",76,fc,db,ab),(int)10));
HXDLIN( 159)			::utest::Assert_obj::isFalse(_hx_tmp15,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),159,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 160)			::Dynamic _hx_tmp16 = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 160)			Bool _hx_tmp17 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp16,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 160)			::utest::Assert_obj::isFalse(_hx_tmp17,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),160,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 161)			::Dynamic _hx_tmp18 = ::thx::bigint::Bigs_obj::parseBase(HX_("-12345678901234567890",23,01,fd,66),(int)10);
HXDLIN( 161)			Bool _hx_tmp19 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp18,::thx::bigint::Bigs_obj::parseBase(HX_("-12345678901234567890",23,01,fd,66),(int)10));
HXDLIN( 161)			::utest::Assert_obj::isFalse(_hx_tmp19,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),161,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 162)			::Dynamic _hx_tmp20 = ::thx::bigint::Bigs_obj::parseBase(HX_("-12345678901234567890",23,01,fd,66),(int)10);
HXDLIN( 162)			Bool _hx_tmp21 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp20,::thx::bigint::Bigs_obj::parseBase(HX_("12345678901234567890",76,fc,db,ab),(int)10));
HXDLIN( 162)			::utest::Assert_obj::isTrue(_hx_tmp21,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),162,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 164)			::Dynamic _hx_tmp22 = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 164)			Bool _hx_tmp23 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp22,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 164)			::utest::Assert_obj::isTrue(_hx_tmp23,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),164,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 165)			::Dynamic _hx_tmp24 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 165)			Bool _hx_tmp25 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp24,::thx::bigint::Bigs_obj::fromInt((int)2));
HXDLIN( 165)			::utest::Assert_obj::isTrue(_hx_tmp25,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),165,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 166)			::Dynamic _hx_tmp26 = ::thx::bigint::Bigs_obj::parseBase(HX_("12345678901234567890",76,fc,db,ab),(int)10);
HXDLIN( 166)			Bool _hx_tmp27 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp26,::thx::bigint::Bigs_obj::parseBase(HX_("12345678901234567891",77,fc,db,ab),(int)10));
HXDLIN( 166)			::utest::Assert_obj::isTrue(_hx_tmp27,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),166,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 167)			::Dynamic _hx_tmp28 = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 167)			Bool _hx_tmp29 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp28,::thx::bigint::Bigs_obj::fromInt((int)-2));
HXDLIN( 167)			::utest::Assert_obj::isTrue(_hx_tmp29,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),167,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 168)			::Dynamic _hx_tmp30 = ::thx::bigint::Bigs_obj::parseBase(HX_("-12345678901234567890",23,01,fd,66),(int)10);
HXDLIN( 168)			Bool _hx_tmp31 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp30,::thx::bigint::Bigs_obj::parseBase(HX_("-12345678901234567891",24,01,fd,66),(int)10));
HXDLIN( 168)			::utest::Assert_obj::isTrue(_hx_tmp31,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),168,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 170)			::Dynamic _hx_tmp32 = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 170)			Bool _hx_tmp33 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp32,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 170)			::utest::Assert_obj::isFalse(_hx_tmp33,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),170,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 171)			::Dynamic _hx_tmp34 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 171)			Bool _hx_tmp35 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp34,::thx::bigint::Bigs_obj::fromInt((int)2));
HXDLIN( 171)			::utest::Assert_obj::isFalse(_hx_tmp35,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),171,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 172)			::Dynamic _hx_tmp36 = ::thx::bigint::Bigs_obj::parseBase(HX_("12345678901234567890",76,fc,db,ab),(int)10);
HXDLIN( 172)			Bool _hx_tmp37 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp36,::thx::bigint::Bigs_obj::parseBase(HX_("12345678901234567891",77,fc,db,ab),(int)10));
HXDLIN( 172)			::utest::Assert_obj::isFalse(_hx_tmp37,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),172,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 173)			::Dynamic _hx_tmp38 = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 173)			Bool _hx_tmp39 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp38,::thx::bigint::Bigs_obj::fromInt((int)-2));
HXDLIN( 173)			::utest::Assert_obj::isFalse(_hx_tmp39,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),173,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 174)			::Dynamic _hx_tmp40 = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 174)			Bool _hx_tmp41 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp40,::thx::bigint::Bigs_obj::fromInt((int)-2));
HXDLIN( 174)			::utest::Assert_obj::isTrue(_hx_tmp41,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),174,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 175)			::Dynamic _hx_tmp42 = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 175)			Bool _hx_tmp43 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp42,::thx::bigint::Bigs_obj::fromInt((int)-2));
HXDLIN( 175)			::utest::Assert_obj::isFalse(_hx_tmp43,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),175,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 176)			::Dynamic _hx_tmp44 = ::thx::bigint::Bigs_obj::parseBase(HX_("-12345678901234567890",23,01,fd,66),(int)10);
HXDLIN( 176)			Bool _hx_tmp45 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp44,::thx::bigint::Bigs_obj::parseBase(HX_("-12345678901234567891",24,01,fd,66),(int)10));
HXDLIN( 176)			::utest::Assert_obj::isFalse(_hx_tmp45,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),176,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
HXLINE( 178)			::Dynamic _hx_tmp46 = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 178)			Bool _hx_tmp47 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp46,::thx::bigint::Bigs_obj::parseBase(HX_("-0",63,27,00,00),(int)10));
HXDLIN( 178)			::utest::Assert_obj::isTrue(_hx_tmp47,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),178,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testEquals",31,34,e7,d8)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testEquals,(void))

void TestBigInt_obj::testIgnoreLeadingZeros(){
            	HX_STACK_FRAME("thx.TestBigInt","testIgnoreLeadingZeros",0xab3f970c,"thx.TestBigInt.testIgnoreLeadingZeros","thx/TestBigInt.hx",182,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 182)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 182)		HX_VARI( Int,_g) = this->x;
HXDLIN( 182)		while((_g1 < _g)){
HXLINE( 182)			++_g1;
HXLINE( 183)			::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::parseBase(HX_("0000000000",00,d2,f1,14),(int)10);
HXDLIN( 183)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::parseBase(HX_("0",30,00,00,00),(int)10));
HXDLIN( 183)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),183,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIgnoreLeadingZeros",c9,64,b0,60)));
HXLINE( 184)			::Dynamic _hx_tmp2 = ::thx::bigint::Bigs_obj::parseBase(HX_("000000000000023",f1,9b,4f,16),(int)10);
HXDLIN( 184)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)23));
HXDLIN( 184)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),184,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIgnoreLeadingZeros",c9,64,b0,60)));
HXLINE( 185)			::Dynamic _hx_tmp4 = ::thx::bigint::Bigs_obj::parseBase(HX_("-0000000000000000000000123",65,b4,a8,a0),(int)10);
HXDLIN( 185)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)-123));
HXDLIN( 185)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-0000000000000000000000123",65,b4,a8,a0),(int)10);
HXDLIN( 185)			::String _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::toString(this1);
HXDLIN( 185)			::String _hx_tmp7 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp6) + HX_(" == ",a0,52,55,15));
HXDLIN( 185)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-123);
HXDLIN( 185)			::String _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::toString(this2);
HXDLIN( 185)			::utest::Assert_obj::isTrue(_hx_tmp5,((_hx_tmp7 + _hx_tmp8) + HX_(" to be true",46,a3,9f,e1)),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),185,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIgnoreLeadingZeros",c9,64,b0,60)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testIgnoreLeadingZeros,(void))

void TestBigInt_obj::testNumbersShouldBeTheSameWhenConstructedDifferently(){
            	HX_STACK_FRAME("thx.TestBigInt","testNumbersShouldBeTheSameWhenConstructedDifferently",0x214a74b6,"thx.TestBigInt.testNumbersShouldBeTheSameWhenConstructedDifferently","thx/TestBigInt.hx",189,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 189)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 189)		HX_VARI( Int,_g) = this->x;
HXDLIN( 189)		while((_g1 < _g)){
HXLINE( 189)			++_g1;
HXLINE( 190)			::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::parseBase(HX_("12e5",51,bd,89,20),(int)10);
HXDLIN( 190)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromFloat(((Float)12e5)));
HXDLIN( 190)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("12e5",51,bd,89,20),(int)10);
HXDLIN( 190)			::String _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::toString(this1);
HXDLIN( 190)			::String _hx_tmp3 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp2) + HX_(" == ",a0,52,55,15));
HXDLIN( 190)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromFloat(((Float)12e5));
HXDLIN( 190)			::String _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::toString(this2);
HXDLIN( 190)			::utest::Assert_obj::isTrue(_hx_tmp1,((_hx_tmp3 + _hx_tmp4) + HX_(" to be true",46,a3,9f,e1)),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),190,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNumbersShouldBeTheSameWhenConstructedDifferently",33,7d,d6,cd)));
HXLINE( 191)			::Dynamic _hx_tmp5 = ::thx::bigint::Bigs_obj::fromFloat(((Float)12e5));
HXDLIN( 191)			Bool _hx_tmp6 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp5,::thx::bigint::Bigs_obj::parseBase(HX_("1200000",af,71,8e,b6),(int)10));
HXDLIN( 191)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromFloat(((Float)12e5));
HXDLIN( 191)			::String _hx_tmp7 = ::thx::bigint::BigIntImpl_obj::toString(this3);
HXDLIN( 191)			::String _hx_tmp8 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp7) + HX_(" == ",a0,52,55,15));
HXDLIN( 191)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1200000",af,71,8e,b6),(int)10);
HXDLIN( 191)			::String _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::toString(this4);
HXDLIN( 191)			::utest::Assert_obj::isTrue(_hx_tmp6,((_hx_tmp8 + _hx_tmp9) + HX_(" to be true",46,a3,9f,e1)),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),191,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNumbersShouldBeTheSameWhenConstructedDifferently",33,7d,d6,cd)));
HXLINE( 192)			::Dynamic _hx_tmp10 = ::thx::bigint::Bigs_obj::parseBase(HX_("1",31,00,00,00),(int)10);
HXDLIN( 192)			Bool _hx_tmp11 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp10,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 192)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1",31,00,00,00),(int)10);
HXDLIN( 192)			::String _hx_tmp12 = ::thx::bigint::BigIntImpl_obj::toString(this5);
HXDLIN( 192)			::String _hx_tmp13 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp12) + HX_(" == ",a0,52,55,15));
HXDLIN( 192)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 192)			::String _hx_tmp14 = ::thx::bigint::BigIntImpl_obj::toString(this6);
HXDLIN( 192)			::utest::Assert_obj::isTrue(_hx_tmp11,((_hx_tmp13 + _hx_tmp14) + HX_(" to be true",46,a3,9f,e1)),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),192,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNumbersShouldBeTheSameWhenConstructedDifferently",33,7d,d6,cd)));
HXLINE( 193)			::Dynamic _hx_tmp15 = ::thx::bigint::Bigs_obj::fromInt((int)12345);
HXDLIN( 193)			Bool _hx_tmp16 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp15,::thx::bigint::Bigs_obj::parseBase(HX_("12345",33,f8,d5,57),(int)10));
HXDLIN( 193)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::fromInt((int)12345);
HXDLIN( 193)			::String _hx_tmp17 = ::thx::bigint::BigIntImpl_obj::toString(this7);
HXDLIN( 193)			::String _hx_tmp18 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp17) + HX_(" == ",a0,52,55,15));
HXDLIN( 193)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("12345",33,f8,d5,57),(int)10);
HXDLIN( 193)			::String _hx_tmp19 = ::thx::bigint::BigIntImpl_obj::toString(this8);
HXDLIN( 193)			::utest::Assert_obj::isTrue(_hx_tmp16,((_hx_tmp18 + _hx_tmp19) + HX_(" to be true",46,a3,9f,e1)),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),193,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNumbersShouldBeTheSameWhenConstructedDifferently",33,7d,d6,cd)));
HXLINE( 194)			::Dynamic _hx_tmp20 = ::thx::bigint::Bigs_obj::parseBase(HX_("9876543210",5b,81,5d,48),(int)10);
HXDLIN( 194)			Bool _hx_tmp21 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp20,::thx::bigint::Bigs_obj::fromFloat(((Float)9876543210.0)));
HXDLIN( 194)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9876543210",5b,81,5d,48),(int)10);
HXDLIN( 194)			::String _hx_tmp22 = ::thx::bigint::BigIntImpl_obj::toString(this9);
HXDLIN( 194)			::String _hx_tmp23 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp22) + HX_(" == ",a0,52,55,15));
HXDLIN( 194)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::Bigs_obj::fromFloat(((Float)9876543210.0));
HXDLIN( 194)			::String _hx_tmp24 = ::thx::bigint::BigIntImpl_obj::toString(this10);
HXDLIN( 194)			::utest::Assert_obj::isTrue(_hx_tmp21,((_hx_tmp23 + _hx_tmp24) + HX_(" to be true",46,a3,9f,e1)),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),194,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNumbersShouldBeTheSameWhenConstructedDifferently",33,7d,d6,cd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testNumbersShouldBeTheSameWhenConstructedDifferently,(void))

void TestBigInt_obj::testFibonacci(){
            	HX_STACK_FRAME("thx.TestBigInt","testFibonacci",0x90b8bf11,"thx.TestBigInt.testFibonacci","thx/TestBigInt.hx",198,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 198)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 198)		HX_VARI( Int,_g) = this->x;
HXDLIN( 198)		while((_g1 < _g)){
HXLINE( 198)			++_g1;
HXLINE( 199)			::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::parseBase(HX_("1",31,00,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp1 = ::thx::bigint::Bigs_obj::parseBase(HX_("1",31,00,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp2 = ::thx::bigint::Bigs_obj::parseBase(HX_("2",32,00,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp3 = ::thx::bigint::Bigs_obj::parseBase(HX_("3",33,00,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp4 = ::thx::bigint::Bigs_obj::parseBase(HX_("5",35,00,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp5 = ::thx::bigint::Bigs_obj::parseBase(HX_("8",38,00,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp6 = ::thx::bigint::Bigs_obj::parseBase(HX_("13",e2,2a,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp7 = ::thx::bigint::Bigs_obj::parseBase(HX_("21",bf,2b,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp8 = ::thx::bigint::Bigs_obj::parseBase(HX_("34",a1,2c,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp9 = ::thx::bigint::Bigs_obj::parseBase(HX_("55",60,2e,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp10 = ::thx::bigint::Bigs_obj::parseBase(HX_("89",01,31,00,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp11 = ::thx::bigint::Bigs_obj::parseBase(HX_("144",f1,5b,25,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp12 = ::thx::bigint::Bigs_obj::parseBase(HX_("233",52,1d,26,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp13 = ::thx::bigint::Bigs_obj::parseBase(HX_("377",13,e3,26,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp14 = ::thx::bigint::Bigs_obj::parseBase(HX_("610",95,24,29,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp15 = ::thx::bigint::Bigs_obj::parseBase(HX_("987",78,71,2b,00),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp16 = ::thx::bigint::Bigs_obj::parseBase(HX_("1597",c2,dd,8b,20),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp17 = ::thx::bigint::Bigs_obj::parseBase(HX_("2584",7f,13,35,21),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp18 = ::thx::bigint::Bigs_obj::parseBase(HX_("4181",b6,77,84,22),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp19 = ::thx::bigint::Bigs_obj::parseBase(HX_("6765",c0,70,db,23),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp20 = ::thx::bigint::Bigs_obj::parseBase(HX_("10946",7c,18,88,56),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp21 = ::thx::bigint::Bigs_obj::parseBase(HX_("17711",b1,0f,27,5b),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp22 = ::thx::bigint::Bigs_obj::parseBase(HX_("28657",12,1c,36,ef),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp23 = ::thx::bigint::Bigs_obj::parseBase(HX_("46368",f3,91,ae,14),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp24 = ::thx::bigint::Bigs_obj::parseBase(HX_("75025",95,ce,36,ce),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp25 = ::thx::bigint::Bigs_obj::parseBase(HX_("121393",9d,08,10,82),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp26 = ::thx::bigint::Bigs_obj::parseBase(HX_("196418",8d,e4,2c,8d),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp27 = ::thx::bigint::Bigs_obj::parseBase(HX_("317811",df,38,5b,bf),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp28 = ::thx::bigint::Bigs_obj::parseBase(HX_("514229",21,c1,11,8a),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp29 = ::thx::bigint::Bigs_obj::parseBase(HX_("832040",35,0f,9d,e2),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp30 = ::thx::bigint::Bigs_obj::parseBase(HX_("1346269",91,f1,7c,6e),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp31 = ::thx::bigint::Bigs_obj::parseBase(HX_("2178309",5c,97,e2,86),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp32 = ::thx::bigint::Bigs_obj::parseBase(HX_("3524578",32,49,41,66),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp33 = ::thx::bigint::Bigs_obj::parseBase(HX_("5702887",d3,a0,05,5e),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp34 = ::thx::bigint::Bigs_obj::parseBase(HX_("9227465",55,dd,aa,2e),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp35 = ::thx::bigint::Bigs_obj::parseBase(HX_("14930352",1d,3d,ac,ac),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp36 = ::thx::bigint::Bigs_obj::parseBase(HX_("24157817",6d,3b,75,de),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp37 = ::thx::bigint::Bigs_obj::parseBase(HX_("39088169",aa,4b,0f,3c),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp38 = ::thx::bigint::Bigs_obj::parseBase(HX_("63245986",21,b0,4c,6b),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp39 = ::thx::bigint::Bigs_obj::parseBase(HX_("102334155",70,22,03,1d),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp40 = ::thx::bigint::Bigs_obj::parseBase(HX_("165580141",51,f7,04,9c),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp41 = ::thx::bigint::Bigs_obj::parseBase(HX_("267914296",e6,50,66,56),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp42 = ::thx::bigint::Bigs_obj::parseBase(HX_("433494437",fd,46,c9,45),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp43 = ::thx::bigint::Bigs_obj::parseBase(HX_("701408733",d3,26,e7,93),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp44 = ::thx::bigint::Bigs_obj::parseBase(HX_("1134903170",cf,8f,4d,95),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp45 = ::thx::bigint::Bigs_obj::parseBase(HX_("1836311903",53,65,08,d9),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp46 = ::thx::bigint::Bigs_obj::parseBase(HX_("2971215073",d7,6c,65,1d),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp47 = ::thx::bigint::Bigs_obj::parseBase(HX_("4807526976",ca,51,51,fb),(int)10);
HXDLIN( 199)			::Dynamic _hx_tmp48 = ::thx::bigint::Bigs_obj::parseBase(HX_("7778742049",61,16,0e,14),(int)10);
HXDLIN( 199)			HX_VARI( ::Array< ::Dynamic>,fibs) = ::Array_obj< ::Dynamic>::__new(50)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4,_hx_tmp4)->init(5,_hx_tmp5)->init(6,_hx_tmp6)->init(7,_hx_tmp7)->init(8,_hx_tmp8)->init(9,_hx_tmp9)->init(10,_hx_tmp10)->init(11,_hx_tmp11)->init(12,_hx_tmp12)->init(13,_hx_tmp13)->init(14,_hx_tmp14)->init(15,_hx_tmp15)->init(16,_hx_tmp16)->init(17,_hx_tmp17)->init(18,_hx_tmp18)->init(19,_hx_tmp19)->init(20,_hx_tmp20)->init(21,_hx_tmp21)->init(22,_hx_tmp22)->init(23,_hx_tmp23)->init(24,_hx_tmp24)->init(25,_hx_tmp25)->init(26,_hx_tmp26)->init(27,_hx_tmp27)->init(28,_hx_tmp28)->init(29,_hx_tmp29)->init(30,_hx_tmp30)->init(31,_hx_tmp31)->init(32,_hx_tmp32)->init(33,_hx_tmp33)->init(34,_hx_tmp34)->init(35,_hx_tmp35)->init(36,_hx_tmp36)->init(37,_hx_tmp37)->init(38,_hx_tmp38)->init(39,_hx_tmp39)->init(40,_hx_tmp40)->init(41,_hx_tmp41)->init(42,_hx_tmp42)->init(43,_hx_tmp43)->init(44,_hx_tmp44)->init(45,_hx_tmp45)->init(46,_hx_tmp46)->init(47,_hx_tmp47)->init(48,_hx_tmp48)->init(49,::thx::bigint::Bigs_obj::parseBase(HX_("12586269025",d0,d0,f5,68),(int)10));
HXLINE( 200)			HX_VARI( ::Dynamic,number) = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXLINE( 201)			HX_VARI( ::Dynamic,last) = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXLINE( 203)			{
HXLINE( 203)				HX_VARI( Int,_g2) = (int)2;
HXDLIN( 203)				while((_g2 < (int)50)){
HXLINE( 203)					HX_VARI( Int,i) = _g2++;
HXLINE( 204)					number = ::thx::bigint::BigIntImpl_obj::add(number,last);
HXLINE( 205)					last = ::thx::bigint::BigIntImpl_obj::subtract(number,last);
HXLINE( 206)					Bool _hx_tmp49 = ::thx::_BigInt::BigInt_Impl__obj::equals(number,fibs->__get(i));
HXDLIN( 206)					::utest::Assert_obj::isTrue(_hx_tmp49,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),206,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testFibonacci",f4,9c,6c,98)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testFibonacci,(void))

void TestBigInt_obj::testCarriesOverCorrectly(){
            	HX_STACK_FRAME("thx.TestBigInt","testCarriesOverCorrectly",0x3a442e3f,"thx.TestBigInt.testCarriesOverCorrectly","thx/TestBigInt.hx",211,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 211)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 211)		HX_VARI( Int,_g) = this->x;
HXDLIN( 211)		while((_g1 < _g)){
HXLINE( 211)			++_g1;
HXLINE( 212)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740991",bc,36,d1,68),(int)10);
HXDLIN( 212)			HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 212)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::add(this1,that);
HXDLIN( 212)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740992",bd,36,d1,68),(int)10));
HXDLIN( 212)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),212,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testCarriesOverCorrectly",3c,a5,d1,c7)));
HXLINE( 213)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("999999999999999999999000000000000000000000",17,c6,81,6a),(int)10);
HXDLIN( 213)			HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("1000000000000000000000",5f,98,3d,f8),(int)10);
HXDLIN( 213)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::add(this2,that1);
HXDLIN( 213)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::parseBase(HX_("1e42",92,45,b0,20),(int)10));
HXLINE( 215)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("999999999999999999999000000000000000000000",17,c6,81,6a),(int)10);
HXDLIN( 215)			::String _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::toString(this3);
HXDLIN( 215)			::String _hx_tmp5 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp4) + HX_(" + ",b5,6d,18,00));
HXDLIN( 215)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1000000000000000000000",5f,98,3d,f8),(int)10);
HXDLIN( 215)			::String _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::toString(this4);
HXDLIN( 215)			::String _hx_tmp7 = ((_hx_tmp5 + _hx_tmp6) + HX_(" == ",a0,52,55,15));
HXDLIN( 215)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1e42",92,45,b0,20),(int)10);
HXDLIN( 215)			::String _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::toString(this5);
HXDLIN( 215)			::String _hx_tmp9 = ((_hx_tmp7 + _hx_tmp8) + HX_(" but is ",77,20,39,b9));
HXDLIN( 215)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("999999999999999999999000000000000000000000",17,c6,81,6a),(int)10);
HXDLIN( 215)			HX_VARI_NAME( ::Dynamic,that2,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("1000000000000000000000",5f,98,3d,f8),(int)10);
HXDLIN( 215)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::BigIntImpl_obj::add(this6,that2);
HXDLIN( 215)			::String _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::toString(this7);
HXLINE( 213)			::utest::Assert_obj::isTrue(_hx_tmp3,(_hx_tmp9 + _hx_tmp10),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),213,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testCarriesOverCorrectly",3c,a5,d1,c7)));
HXLINE( 216)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1e20",d2,43,b0,20),(int)10);
HXDLIN( 216)			HX_VARI_NAME( ::Dynamic,that3,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740972",ff,34,d1,68),(int)10);
HXDLIN( 216)			::Dynamic _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::add(this8,that3);
HXDLIN( 216)			Bool _hx_tmp12 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp11,::thx::bigint::Bigs_obj::parseBase(HX_("100009007199254740972",b0,a7,66,10),(int)10));
HXDLIN( 216)			::utest::Assert_obj::isTrue(_hx_tmp12,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),216,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testCarriesOverCorrectly",3c,a5,d1,c7)));
HXLINE( 217)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-9007199254740983",0c,20,ad,6d),(int)10);
HXDLIN( 217)			HX_VARI_NAME( ::Dynamic,that4,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-9999999999999998",2c,99,13,49),(int)10);
HXDLIN( 217)			::Dynamic _hx_tmp13 = ::thx::bigint::BigIntImpl_obj::add(this9,that4);
HXDLIN( 217)			Bool _hx_tmp14 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp13,::thx::bigint::Bigs_obj::parseBase(HX_("-19007199254740981",41,65,0d,b5),(int)10));
HXDLIN( 217)			::utest::Assert_obj::isTrue(_hx_tmp14,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),217,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testCarriesOverCorrectly",3c,a5,d1,c7)));
HXLINE( 218)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("100000000000000000000000000000000000",9f,86,59,e0),(int)10);
HXDLIN( 218)			HX_VARI_NAME( ::Dynamic,that5,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("999999999999999999",e0,a0,c1,84),(int)10);
HXDLIN( 218)			::Dynamic _hx_tmp15 = ::thx::bigint::BigIntImpl_obj::subtract(this10,that5);
HXDLIN( 218)			Bool _hx_tmp16 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp15,::thx::bigint::Bigs_obj::parseBase(HX_("99999999999999999000000000000000001",7a,ad,66,f6),(int)10));
HXDLIN( 218)			::utest::Assert_obj::isTrue(_hx_tmp16,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),218,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testCarriesOverCorrectly",3c,a5,d1,c7)));
HXLINE( 220)			HX_VARI_NAME( ::Dynamic,this11,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("50000005000000",a0,98,6f,c4),(int)10);
HXDLIN( 220)			HX_VARI_NAME( ::Dynamic,that6,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("10000001",20,1a,ea,b2),(int)10);
HXDLIN( 220)			::Dynamic _hx_tmp17 = ::thx::bigint::BigIntImpl_obj::multiply(this11,that6);
HXDLIN( 220)			Bool _hx_tmp18 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp17,::thx::bigint::Bigs_obj::parseBase(HX_("500000100000005000000",3b,4e,81,42),(int)10));
HXDLIN( 220)			::utest::Assert_obj::isTrue(_hx_tmp18,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),220,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testCarriesOverCorrectly",3c,a5,d1,c7)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testCarriesOverCorrectly,(void))

void TestBigInt_obj::testMisc(){
            	HX_STACK_FRAME("thx.TestBigInt","testMisc",0x4a8feb61,"thx.TestBigInt.testMisc","thx/TestBigInt.hx",224,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 224)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 224)		HX_VARI( Int,_g) = this->x;
HXDLIN( 224)		while((_g1 < _g)){
HXLINE( 224)			++_g1;
HXLINE( 225)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("10",df,2a,00,00),(int)10);
HXDLIN( 225)			HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)10);
HXDLIN( 225)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::add(this1,that);
HXDLIN( 225)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::parseBase(HX_("20",be,2b,00,00),(int)10));
HXDLIN( 225)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),225,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
HXLINE( 226)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-10000000000000000",64,7f,93,bb),(int)10);
HXDLIN( 226)			HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("0",30,00,00,00),(int)10);
HXDLIN( 226)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::add(this2,that1);
HXDLIN( 226)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::parseBase(HX_("-10000000000000000",64,7f,93,bb),(int)10));
HXDLIN( 226)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),226,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
HXLINE( 227)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("0",30,00,00,00),(int)10);
HXDLIN( 227)			HX_VARI_NAME( ::Dynamic,that2,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("10000000000000000",31,82,02,80),(int)10);
HXDLIN( 227)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::add(this3,that2);
HXDLIN( 227)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::parseBase(HX_("10000000000000000",31,82,02,80),(int)10));
HXDLIN( 227)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),227,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
HXLINE( 228)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)9999999);
HXDLIN( 228)			HX_VARI_NAME( ::Dynamic,that3,"that") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 228)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::add(this4,that3);
HXDLIN( 228)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)10000000));
HXDLIN( 228)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::fromInt((int)9999999);
HXDLIN( 228)			::String _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::toString(this5);
HXDLIN( 228)			::String _hx_tmp9 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp8) + HX_(" + ",b5,6d,18,00));
HXDLIN( 228)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 228)			::String _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::toString(this6);
HXDLIN( 228)			::String _hx_tmp11 = ((_hx_tmp9 + _hx_tmp10) + HX_(" == ",a0,52,55,15));
HXDLIN( 228)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::fromInt((int)10000000);
HXDLIN( 228)			::String _hx_tmp12 = ::thx::bigint::BigIntImpl_obj::toString(this7);
HXDLIN( 228)			::String _hx_tmp13 = ((_hx_tmp11 + _hx_tmp12) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 228)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::fromInt((int)9999999);
HXDLIN( 228)			HX_VARI_NAME( ::Dynamic,that4,"that") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 228)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::BigIntImpl_obj::add(this8,that4);
HXDLIN( 228)			::String _hx_tmp14 = ::thx::bigint::BigIntImpl_obj::toString(this9);
HXDLIN( 228)			::utest::Assert_obj::isTrue(_hx_tmp7,(_hx_tmp13 + _hx_tmp14),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),228,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
HXLINE( 229)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::Bigs_obj::fromInt((int)10000000);
HXDLIN( 229)			HX_VARI_NAME( ::Dynamic,that5,"that") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 229)			::Dynamic _hx_tmp15 = ::thx::bigint::BigIntImpl_obj::subtract(this10,that5);
HXDLIN( 229)			Bool _hx_tmp16 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp15,::thx::bigint::Bigs_obj::fromInt((int)9999999));
HXDLIN( 229)			::utest::Assert_obj::isTrue(_hx_tmp16,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),229,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
HXLINE( 230)			HX_VARI_NAME( ::Dynamic,this11,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1000000000000000000000000000000000001",65,2d,ff,1a),(int)10);
HXDLIN( 230)			HX_VARI_NAME( ::Dynamic,that6,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("1000000000000000000000000000000000000",b1,44,fc,6d),(int)10);
HXDLIN( 230)			::Dynamic _hx_tmp17 = ::thx::bigint::BigIntImpl_obj::add(this11,that6);
HXDLIN( 230)			Bool _hx_tmp18 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp17,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 230)			::utest::Assert_obj::isTrue(_hx_tmp18,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),230,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
HXLINE( 231)			HX_VARI_NAME( ::Dynamic,this12,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("100000000000000000002222222222222222222",33,b5,33,7d),(int)10);
HXDLIN( 231)			HX_VARI_NAME( ::Dynamic,that7,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("100000000000000000001111111111111111111",12,b9,27,cb),(int)10);
HXDLIN( 231)			::Dynamic _hx_tmp19 = ::thx::bigint::BigIntImpl_obj::subtract(this12,that7);
HXDLIN( 231)			Bool _hx_tmp20 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp19,::thx::bigint::Bigs_obj::parseBase(HX_("1111111111111111111",51,42,4b,14),(int)10));
HXDLIN( 231)			::utest::Assert_obj::isTrue(_hx_tmp20,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),231,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
HXLINE( 232)			HX_VARI_NAME( ::Dynamic,this13,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1",31,00,00,00),(int)10);
HXDLIN( 232)			HX_VARI_NAME( ::Dynamic,that8,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("0",30,00,00,00),(int)10);
HXDLIN( 232)			::Dynamic _hx_tmp21 = ::thx::bigint::BigIntImpl_obj::add(this13,that8);
HXDLIN( 232)			Bool _hx_tmp22 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp21,::thx::bigint::Bigs_obj::parseBase(HX_("1",31,00,00,00),(int)10));
HXDLIN( 232)			::utest::Assert_obj::isTrue(_hx_tmp22,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),232,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
HXLINE( 233)			HX_VARI_NAME( ::Dynamic,this14,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("10",df,2a,00,00),(int)10);
HXDLIN( 233)			HX_VARI_NAME( ::Dynamic,that9,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("10000000000000000",31,82,02,80),(int)10);
HXDLIN( 233)			::Dynamic _hx_tmp23 = ::thx::bigint::BigIntImpl_obj::add(this14,that9);
HXDLIN( 233)			Bool _hx_tmp24 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp23,::thx::bigint::Bigs_obj::parseBase(HX_("10000000000000010",10,83,02,80),(int)10));
HXDLIN( 233)			::utest::Assert_obj::isTrue(_hx_tmp24,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),233,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
HXLINE( 234)			HX_VARI_NAME( ::Dynamic,this15,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("10000000000000000",31,82,02,80),(int)10);
HXDLIN( 234)			HX_VARI_NAME( ::Dynamic,that10,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("10",df,2a,00,00),(int)10);
HXDLIN( 234)			::Dynamic _hx_tmp25 = ::thx::bigint::BigIntImpl_obj::add(this15,that10);
HXDLIN( 234)			Bool _hx_tmp26 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp25,::thx::bigint::Bigs_obj::parseBase(HX_("10000000000000010",10,83,02,80),(int)10));
HXDLIN( 234)			::utest::Assert_obj::isTrue(_hx_tmp26,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),234,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
HXLINE( 235)			HX_VARI_NAME( ::Dynamic,this16,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("10000000000000000",31,82,02,80),(int)10);
HXDLIN( 235)			HX_VARI_NAME( ::Dynamic,that11,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("10000000000000000",31,82,02,80),(int)10);
HXDLIN( 235)			::Dynamic _hx_tmp27 = ::thx::bigint::BigIntImpl_obj::add(this16,that11);
HXDLIN( 235)			Bool _hx_tmp28 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp27,::thx::bigint::Bigs_obj::parseBase(HX_("20000000000000000",32,54,f6,02),(int)10));
HXDLIN( 235)			::utest::Assert_obj::isTrue(_hx_tmp28,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),235,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMisc",5e,d8,8e,4b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testMisc,(void))

void TestBigInt_obj::testMultiplyHandlesSignsCorectly(){
            	HX_STACK_FRAME("thx.TestBigInt","testMultiplyHandlesSignsCorectly",0xfa616901,"thx.TestBigInt.testMultiplyHandlesSignsCorectly","thx/TestBigInt.hx",239,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 239)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 239)		HX_VARI( Int,_g) = this->x;
HXDLIN( 239)		while((_g1 < _g)){
HXLINE( 239)			++_g1;
HXLINE( 240)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)100);
HXDLIN( 240)			HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)100);
HXDLIN( 240)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::multiply(this1,that);
HXDLIN( 240)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)10000));
HXDLIN( 240)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),240,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 241)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)100);
HXDLIN( 241)			HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-100);
HXDLIN( 241)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::multiply(this2,that1);
HXDLIN( 241)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)-10000));
HXDLIN( 241)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),241,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 242)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-100);
HXDLIN( 242)			HX_VARI_NAME( ::Dynamic,that2,"that") = ::thx::bigint::Bigs_obj::fromInt((int)100);
HXDLIN( 242)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::multiply(this3,that2);
HXDLIN( 242)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)-10000));
HXDLIN( 242)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),242,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 243)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-100);
HXDLIN( 243)			HX_VARI_NAME( ::Dynamic,that3,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-100);
HXDLIN( 243)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::multiply(this4,that3);
HXDLIN( 243)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)10000));
HXDLIN( 243)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),243,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 246)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::fromInt((int)13579);
HXDLIN( 246)			HX_VARI_NAME( ::Dynamic,that4,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10);
HXDLIN( 246)			::Dynamic _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::multiply(this5,that4);
HXDLIN( 246)			Bool _hx_tmp9 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp8,::thx::bigint::Bigs_obj::parseBase(HX_("2220174289812686626814279831230549482",62,30,f5,1c),(int)10));
HXLINE( 247)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::fromInt((int)13579);
HXDLIN( 247)			::String _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::toString(this6);
HXDLIN( 247)			::String _hx_tmp11 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp10) + HX_(" * ",d6,6c,18,00));
HXDLIN( 247)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10);
HXDLIN( 247)			::String _hx_tmp12 = ::thx::bigint::BigIntImpl_obj::toString(this7);
HXDLIN( 247)			::String _hx_tmp13 = ((_hx_tmp11 + _hx_tmp12) + HX_(" == ",a0,52,55,15));
HXDLIN( 247)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("2220174289812686626814279831230549482",62,30,f5,1c),(int)10);
HXDLIN( 247)			::String _hx_tmp14 = ::thx::bigint::BigIntImpl_obj::toString(this8);
HXDLIN( 247)			::String _hx_tmp15 = ((_hx_tmp13 + _hx_tmp14) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 247)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::Bigs_obj::fromInt((int)13579);
HXDLIN( 247)			HX_VARI_NAME( ::Dynamic,that5,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10);
HXDLIN( 247)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::BigIntImpl_obj::multiply(this9,that5);
HXDLIN( 247)			::String _hx_tmp16 = ::thx::bigint::BigIntImpl_obj::toString(this10);
HXLINE( 245)			::utest::Assert_obj::isTrue(_hx_tmp9,(_hx_tmp15 + _hx_tmp16),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),245,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 250)			HX_VARI_NAME( ::Dynamic,this11,"this") = ::thx::bigint::Bigs_obj::fromInt((int)13579);
HXDLIN( 250)			HX_VARI_NAME( ::Dynamic,that6,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-163500573666152634716420931676158",de,cd,c2,eb),(int)10);
HXDLIN( 250)			::Dynamic _hx_tmp17 = ::thx::bigint::BigIntImpl_obj::multiply(this11,that6);
HXDLIN( 250)			Bool _hx_tmp18 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp17,::thx::bigint::Bigs_obj::parseBase(HX_("-2220174289812686626814279831230549482",15,19,f8,c9),(int)10));
HXDLIN( 250)			::utest::Assert_obj::isTrue(_hx_tmp18,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),250,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 251)			HX_VARI_NAME( ::Dynamic,this12,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-13579);
HXDLIN( 251)			HX_VARI_NAME( ::Dynamic,that7,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10);
HXDLIN( 251)			::Dynamic _hx_tmp19 = ::thx::bigint::BigIntImpl_obj::multiply(this12,that7);
HXDLIN( 251)			Bool _hx_tmp20 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp19,::thx::bigint::Bigs_obj::parseBase(HX_("-2220174289812686626814279831230549482",15,19,f8,c9),(int)10));
HXDLIN( 251)			::utest::Assert_obj::isTrue(_hx_tmp20,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),251,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 252)			HX_VARI_NAME( ::Dynamic,this13,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-13579);
HXDLIN( 252)			HX_VARI_NAME( ::Dynamic,that8,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-163500573666152634716420931676158",de,cd,c2,eb),(int)10);
HXDLIN( 252)			::Dynamic _hx_tmp21 = ::thx::bigint::BigIntImpl_obj::multiply(this13,that8);
HXDLIN( 252)			Bool _hx_tmp22 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp21,::thx::bigint::Bigs_obj::parseBase(HX_("2220174289812686626814279831230549482",62,30,f5,1c),(int)10));
HXDLIN( 252)			::utest::Assert_obj::isTrue(_hx_tmp22,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),252,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 254)			HX_VARI_NAME( ::Dynamic,this14,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10);
HXDLIN( 254)			HX_VARI_NAME( ::Dynamic,that9,"that") = ::thx::bigint::Bigs_obj::fromInt((int)13579);
HXDLIN( 254)			::Dynamic _hx_tmp23 = ::thx::bigint::BigIntImpl_obj::multiply(this14,that9);
HXDLIN( 254)			Bool _hx_tmp24 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp23,::thx::bigint::Bigs_obj::parseBase(HX_("2220174289812686626814279831230549482",62,30,f5,1c),(int)10));
HXLINE( 255)			HX_VARI_NAME( ::Dynamic,this15,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10);
HXDLIN( 255)			::String _hx_tmp25 = ::thx::bigint::BigIntImpl_obj::toString(this15);
HXDLIN( 255)			::String _hx_tmp26 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp25) + HX_(" * 13579 == ",7f,ef,ba,ab));
HXDLIN( 255)			HX_VARI_NAME( ::Dynamic,this16,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("2220174289812686626814279831230549482",62,30,f5,1c),(int)10);
HXDLIN( 255)			::String _hx_tmp27 = ::thx::bigint::BigIntImpl_obj::toString(this16);
HXDLIN( 255)			::String _hx_tmp28 = ((_hx_tmp26 + _hx_tmp27) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 255)			HX_VARI_NAME( ::Dynamic,this17,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10);
HXDLIN( 255)			HX_VARI_NAME( ::Dynamic,that10,"that") = ::thx::bigint::Bigs_obj::fromInt((int)13579);
HXDLIN( 255)			HX_VARI_NAME( ::Dynamic,this18,"this") = ::thx::bigint::BigIntImpl_obj::multiply(this17,that10);
HXDLIN( 255)			::String _hx_tmp29 = ::thx::bigint::BigIntImpl_obj::toString(this18);
HXLINE( 253)			::utest::Assert_obj::isTrue(_hx_tmp24,(_hx_tmp28 + _hx_tmp29),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),253,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 257)			HX_VARI_NAME( ::Dynamic,this19,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10);
HXDLIN( 257)			HX_VARI_NAME( ::Dynamic,that11,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-13579);
HXDLIN( 257)			::Dynamic _hx_tmp30 = ::thx::bigint::BigIntImpl_obj::multiply(this19,that11);
HXDLIN( 257)			Bool _hx_tmp31 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp30,::thx::bigint::Bigs_obj::parseBase(HX_("-2220174289812686626814279831230549482",15,19,f8,c9),(int)10));
HXDLIN( 257)			::utest::Assert_obj::isTrue(_hx_tmp31,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),257,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 258)			HX_VARI_NAME( ::Dynamic,this20,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-163500573666152634716420931676158",de,cd,c2,eb),(int)10);
HXDLIN( 258)			HX_VARI_NAME( ::Dynamic,that12,"that") = ::thx::bigint::Bigs_obj::fromInt((int)13579);
HXDLIN( 258)			::Dynamic _hx_tmp32 = ::thx::bigint::BigIntImpl_obj::multiply(this20,that12);
HXDLIN( 258)			Bool _hx_tmp33 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp32,::thx::bigint::Bigs_obj::parseBase(HX_("-2220174289812686626814279831230549482",15,19,f8,c9),(int)10));
HXDLIN( 258)			::utest::Assert_obj::isTrue(_hx_tmp33,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),258,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 259)			HX_VARI_NAME( ::Dynamic,this21,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-163500573666152634716420931676158",de,cd,c2,eb),(int)10);
HXDLIN( 259)			HX_VARI_NAME( ::Dynamic,that13,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-13579);
HXDLIN( 259)			::Dynamic _hx_tmp34 = ::thx::bigint::BigIntImpl_obj::multiply(this21,that13);
HXDLIN( 259)			Bool _hx_tmp35 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp34,::thx::bigint::Bigs_obj::parseBase(HX_("2220174289812686626814279831230549482",62,30,f5,1c),(int)10));
HXDLIN( 259)			::utest::Assert_obj::isTrue(_hx_tmp35,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),259,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 260)			HX_VARI_NAME( ::Dynamic,this22,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10);
HXDLIN( 260)			HX_VARI_NAME( ::Dynamic,that14,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 260)			::Dynamic _hx_tmp36 = ::thx::bigint::BigIntImpl_obj::multiply(this22,that14);
HXDLIN( 260)			Bool _hx_tmp37 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp36,::thx::bigint::Bigs_obj::parseBase(HX_("-163500573666152634716420931676158",de,cd,c2,eb),(int)10));
HXDLIN( 260)			::utest::Assert_obj::isTrue(_hx_tmp37,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),260,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 261)			HX_VARI_NAME( ::Dynamic,this23,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1234567890987654321",7a,bb,ad,c9),(int)10);
HXDLIN( 261)			HX_VARI_NAME( ::Dynamic,that15,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("132435465768798",6a,2f,f7,82),(int)10);
HXDLIN( 261)			::Dynamic _hx_tmp38 = ::thx::bigint::BigIntImpl_obj::multiply(this23,that15);
HXDLIN( 261)			Bool _hx_tmp39 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp38,::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10));
HXDLIN( 261)			::utest::Assert_obj::isTrue(_hx_tmp39,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),261,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 262)			HX_VARI_NAME( ::Dynamic,this24,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1234567890987654321",7a,bb,ad,c9),(int)10);
HXDLIN( 262)			HX_VARI_NAME( ::Dynamic,that16,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-132435465768798",dd,69,6e,86),(int)10);
HXDLIN( 262)			::Dynamic _hx_tmp40 = ::thx::bigint::BigIntImpl_obj::multiply(this24,that16);
HXDLIN( 262)			Bool _hx_tmp41 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp40,::thx::bigint::Bigs_obj::parseBase(HX_("-163500573666152634716420931676158",de,cd,c2,eb),(int)10));
HXDLIN( 262)			HX_VARI_NAME( ::Dynamic,this25,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1234567890987654321",7a,bb,ad,c9),(int)10);
HXDLIN( 262)			::String _hx_tmp42 = ::thx::bigint::BigIntImpl_obj::toString(this25);
HXDLIN( 262)			::String _hx_tmp43 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp42) + HX_(" * ",d6,6c,18,00));
HXDLIN( 262)			HX_VARI_NAME( ::Dynamic,this26,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-132435465768798",dd,69,6e,86),(int)10);
HXDLIN( 262)			::String _hx_tmp44 = ::thx::bigint::BigIntImpl_obj::toString(this26);
HXDLIN( 262)			::String _hx_tmp45 = ((_hx_tmp43 + _hx_tmp44) + HX_(" == ",a0,52,55,15));
HXDLIN( 262)			HX_VARI_NAME( ::Dynamic,this27,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-163500573666152634716420931676158",de,cd,c2,eb),(int)10);
HXDLIN( 262)			::String _hx_tmp46 = ::thx::bigint::BigIntImpl_obj::toString(this27);
HXDLIN( 262)			::String _hx_tmp47 = ((_hx_tmp45 + _hx_tmp46) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 262)			HX_VARI_NAME( ::Dynamic,this28,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1234567890987654321",7a,bb,ad,c9),(int)10);
HXDLIN( 262)			HX_VARI_NAME( ::Dynamic,that17,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-132435465768798",dd,69,6e,86),(int)10);
HXDLIN( 262)			HX_VARI_NAME( ::Dynamic,this29,"this") = ::thx::bigint::BigIntImpl_obj::multiply(this28,that17);
HXDLIN( 262)			::String _hx_tmp48 = ::thx::bigint::BigIntImpl_obj::toString(this29);
HXDLIN( 262)			::utest::Assert_obj::isTrue(_hx_tmp41,(_hx_tmp47 + _hx_tmp48),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),262,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 263)			HX_VARI_NAME( ::Dynamic,this30,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1234567890987654321",6d,ab,5e,c9),(int)10);
HXDLIN( 263)			HX_VARI_NAME( ::Dynamic,that18,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("132435465768798",6a,2f,f7,82),(int)10);
HXDLIN( 263)			::Dynamic _hx_tmp49 = ::thx::bigint::BigIntImpl_obj::multiply(this30,that18);
HXDLIN( 263)			Bool _hx_tmp50 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp49,::thx::bigint::Bigs_obj::parseBase(HX_("-163500573666152634716420931676158",de,cd,c2,eb),(int)10));
HXDLIN( 263)			HX_VARI_NAME( ::Dynamic,this31,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1234567890987654321",6d,ab,5e,c9),(int)10);
HXDLIN( 263)			::String _hx_tmp51 = ::thx::bigint::BigIntImpl_obj::toString(this31);
HXDLIN( 263)			::String _hx_tmp52 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp51) + HX_(" * ",d6,6c,18,00));
HXDLIN( 263)			HX_VARI_NAME( ::Dynamic,this32,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("132435465768798",6a,2f,f7,82),(int)10);
HXDLIN( 263)			::String _hx_tmp53 = ::thx::bigint::BigIntImpl_obj::toString(this32);
HXDLIN( 263)			::String _hx_tmp54 = ((_hx_tmp52 + _hx_tmp53) + HX_(" == ",a0,52,55,15));
HXDLIN( 263)			HX_VARI_NAME( ::Dynamic,this33,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-163500573666152634716420931676158",de,cd,c2,eb),(int)10);
HXDLIN( 263)			::String _hx_tmp55 = ::thx::bigint::BigIntImpl_obj::toString(this33);
HXDLIN( 263)			::String _hx_tmp56 = ((_hx_tmp54 + _hx_tmp55) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 263)			HX_VARI_NAME( ::Dynamic,this34,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1234567890987654321",6d,ab,5e,c9),(int)10);
HXDLIN( 263)			HX_VARI_NAME( ::Dynamic,that19,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("132435465768798",6a,2f,f7,82),(int)10);
HXDLIN( 263)			HX_VARI_NAME( ::Dynamic,this35,"this") = ::thx::bigint::BigIntImpl_obj::multiply(this34,that19);
HXDLIN( 263)			::String _hx_tmp57 = ::thx::bigint::BigIntImpl_obj::toString(this35);
HXDLIN( 263)			::utest::Assert_obj::isTrue(_hx_tmp50,(_hx_tmp56 + _hx_tmp57),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),263,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
HXLINE( 264)			HX_VARI_NAME( ::Dynamic,this36,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1234567890987654321",6d,ab,5e,c9),(int)10);
HXDLIN( 264)			HX_VARI_NAME( ::Dynamic,that20,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-132435465768798",dd,69,6e,86),(int)10);
HXDLIN( 264)			::Dynamic _hx_tmp58 = ::thx::bigint::BigIntImpl_obj::multiply(this36,that20);
HXDLIN( 264)			Bool _hx_tmp59 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp58,::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10));
HXDLIN( 264)			HX_VARI_NAME( ::Dynamic,this37,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1234567890987654321",6d,ab,5e,c9),(int)10);
HXDLIN( 264)			::String _hx_tmp60 = ::thx::bigint::BigIntImpl_obj::toString(this37);
HXDLIN( 264)			::String _hx_tmp61 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp60) + HX_(" * ",d6,6c,18,00));
HXDLIN( 264)			HX_VARI_NAME( ::Dynamic,this38,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-132435465768798",dd,69,6e,86),(int)10);
HXDLIN( 264)			::String _hx_tmp62 = ::thx::bigint::BigIntImpl_obj::toString(this38);
HXDLIN( 264)			::String _hx_tmp63 = ((_hx_tmp61 + _hx_tmp62) + HX_(" == ",a0,52,55,15));
HXDLIN( 264)			HX_VARI_NAME( ::Dynamic,this39,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("163500573666152634716420931676158",ab,fa,14,83),(int)10);
HXDLIN( 264)			::String _hx_tmp64 = ::thx::bigint::BigIntImpl_obj::toString(this39);
HXDLIN( 264)			::String _hx_tmp65 = ((_hx_tmp63 + _hx_tmp64) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 264)			HX_VARI_NAME( ::Dynamic,this40,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1234567890987654321",6d,ab,5e,c9),(int)10);
HXDLIN( 264)			HX_VARI_NAME( ::Dynamic,that21,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-132435465768798",dd,69,6e,86),(int)10);
HXDLIN( 264)			HX_VARI_NAME( ::Dynamic,this41,"this") = ::thx::bigint::BigIntImpl_obj::multiply(this40,that21);
HXDLIN( 264)			::String _hx_tmp66 = ::thx::bigint::BigIntImpl_obj::toString(this41);
HXDLIN( 264)			::utest::Assert_obj::isTrue(_hx_tmp59,(_hx_tmp65 + _hx_tmp66),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),264,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplyHandlesSignsCorectly",fe,a4,e9,1b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testMultiplyHandlesSignsCorectly,(void))

void TestBigInt_obj::testDivisionBy1IsTheIdentity(){
            	HX_STACK_FRAME("thx.TestBigInt","testDivisionBy1IsTheIdentity",0x9654246d,"thx.TestBigInt.testDivisionBy1IsTheIdentity","thx/TestBigInt.hx",268,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 268)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 268)		HX_VARI( Int,_g) = this->x;
HXDLIN( 268)		while((_g1 < _g)){
HXLINE( 268)			++_g1;
HXLINE( 269)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 269)			HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 269)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::divide(this1,that);
HXDLIN( 269)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 269)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),269,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBy1IsTheIdentity",ea,5d,35,63)));
HXLINE( 270)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 270)			HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 270)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::divide(this2,that1);
HXDLIN( 270)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 270)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),270,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBy1IsTheIdentity",ea,5d,35,63)));
HXLINE( 271)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 271)			HX_VARI_NAME( ::Dynamic,that2,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 271)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::divide(this3,that2);
HXDLIN( 271)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 271)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),271,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBy1IsTheIdentity",ea,5d,35,63)));
HXLINE( 272)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)153);
HXDLIN( 272)			HX_VARI_NAME( ::Dynamic,that3,"that") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 272)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::divide(this4,that3);
HXDLIN( 272)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)153));
HXDLIN( 272)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),272,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBy1IsTheIdentity",ea,5d,35,63)));
HXLINE( 273)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-153);
HXDLIN( 273)			HX_VARI_NAME( ::Dynamic,that4,"that") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 273)			::Dynamic _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::divide(this5,that4);
HXDLIN( 273)			Bool _hx_tmp9 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp8,::thx::bigint::Bigs_obj::fromInt((int)-153));
HXDLIN( 273)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),273,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBy1IsTheIdentity",ea,5d,35,63)));
HXLINE( 274)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9844190321790980841789",4f,20,18,96),(int)10);
HXDLIN( 274)			HX_VARI_NAME( ::Dynamic,that5,"that") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 274)			::Dynamic _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::divide(this6,that5);
HXDLIN( 274)			Bool _hx_tmp11 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp10,::thx::bigint::Bigs_obj::parseBase(HX_("9844190321790980841789",4f,20,18,96),(int)10));
HXDLIN( 274)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),274,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBy1IsTheIdentity",ea,5d,35,63)));
HXLINE( 275)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-9844190321790980841789",3c,6a,05,1f),(int)10);
HXDLIN( 275)			HX_VARI_NAME( ::Dynamic,that6,"that") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 275)			::Dynamic _hx_tmp12 = ::thx::bigint::BigIntImpl_obj::divide(this7,that6);
HXDLIN( 275)			Bool _hx_tmp13 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp12,::thx::bigint::Bigs_obj::parseBase(HX_("-9844190321790980841789",3c,6a,05,1f),(int)10));
HXDLIN( 275)			::utest::Assert_obj::isTrue(_hx_tmp13,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),275,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBy1IsTheIdentity",ea,5d,35,63)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testDivisionBy1IsTheIdentity,(void))

void TestBigInt_obj::testDivisionBySelfIs1(){
            	HX_STACK_FRAME("thx.TestBigInt","testDivisionBySelfIs1",0x24a2bf42,"thx.TestBigInt.testDivisionBySelfIs1","thx/TestBigInt.hx",279,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 279)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 279)		HX_VARI( Int,_g) = this->x;
HXDLIN( 279)		while((_g1 < _g)){
HXLINE( 279)			++_g1;
HXLINE( 280)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)5);
HXDLIN( 280)			HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)5);
HXDLIN( 280)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::divide(this1,that);
HXDLIN( 280)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 280)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),280,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBySelfIs1",25,b8,0b,0b)));
HXLINE( 281)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-5);
HXDLIN( 281)			HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-5);
HXDLIN( 281)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::divide(this2,that1);
HXDLIN( 281)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 281)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),281,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBySelfIs1",25,b8,0b,0b)));
HXLINE( 282)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("20194965098495006574",67,fe,e0,01),(int)10);
HXDLIN( 282)			HX_VARI_NAME( ::Dynamic,that2,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("20194965098495006574",67,fe,e0,01),(int)10);
HXDLIN( 282)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::divide(this3,that2);
HXDLIN( 282)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 282)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),282,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBySelfIs1",25,b8,0b,0b)));
HXLINE( 283)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-20194965098495006574",14,03,02,bd),(int)10);
HXDLIN( 283)			HX_VARI_NAME( ::Dynamic,that3,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-20194965098495006574",14,03,02,bd),(int)10);
HXDLIN( 283)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::divide(this4,that3);
HXDLIN( 283)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 283)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),283,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionBySelfIs1",25,b8,0b,0b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testDivisionBySelfIs1,(void))

void TestBigInt_obj::testDivisionOf0Equals0(){
            	HX_STACK_FRAME("thx.TestBigInt","testDivisionOf0Equals0",0xb3b0fd9a,"thx.TestBigInt.testDivisionOf0Equals0","thx/TestBigInt.hx",287,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 287)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 287)		HX_VARI( Int,_g) = this->x;
HXDLIN( 287)		while((_g1 < _g)){
HXLINE( 287)			++_g1;
HXLINE( 288)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 288)			HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 288)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::divide(this1,that);
HXDLIN( 288)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 288)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),288,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionOf0Equals0",57,cb,21,69)));
HXLINE( 289)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 289)			HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 289)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::divide(this2,that1);
HXDLIN( 289)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 289)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),289,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionOf0Equals0",57,cb,21,69)));
HXLINE( 290)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 290)			HX_VARI_NAME( ::Dynamic,that2,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("1234567890987654321",7a,bb,ad,c9),(int)10);
HXDLIN( 290)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::divide(this3,that2);
HXDLIN( 290)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 290)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),290,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionOf0Equals0",57,cb,21,69)));
HXLINE( 291)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 291)			HX_VARI_NAME( ::Dynamic,that3,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1234567890987654321",6d,ab,5e,c9),(int)10);
HXDLIN( 291)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::divide(this4,that3);
HXDLIN( 291)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 291)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),291,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivisionOf0Equals0",57,cb,21,69)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testDivisionOf0Equals0,(void))

void TestBigInt_obj::testModulo0ThrowsError(){
            	HX_STACK_FRAME("thx.TestBigInt","testModulo0ThrowsError",0x8254a696,"thx.TestBigInt.testModulo0ThrowsError","thx/TestBigInt.hx",295,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 295)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 295)		HX_VARI( Int,_g) = this->x;
HXDLIN( 295)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBigInt","testModulo0ThrowsError",0x8254a696,"thx.TestBigInt.testModulo0ThrowsError","thx/TestBigInt.hx",296,0x152acd32)
HXLINE( 296)				HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 296)				HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 296)				::thx::bigint::BigIntImpl_obj::modulo(this1,that);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBigInt","testModulo0ThrowsError",0x8254a696,"thx.TestBigInt.testModulo0ThrowsError","thx/TestBigInt.hx",297,0x152acd32)
HXLINE( 297)				HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 297)				HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 297)				::thx::bigint::BigIntImpl_obj::modulo(this2,that1);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBigInt","testModulo0ThrowsError",0x8254a696,"thx.TestBigInt.testModulo0ThrowsError","thx/TestBigInt.hx",298,0x152acd32)
HXLINE( 298)				HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)5);
HXDLIN( 298)				HX_VARI_NAME( ::Dynamic,that2,"that") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 298)				::thx::bigint::BigIntImpl_obj::modulo(this3,that2);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBigInt","testModulo0ThrowsError",0x8254a696,"thx.TestBigInt.testModulo0ThrowsError","thx/TestBigInt.hx",299,0x152acd32)
HXLINE( 299)				HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-5);
HXDLIN( 299)				HX_VARI_NAME( ::Dynamic,that3,"that") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 299)				::thx::bigint::BigIntImpl_obj::modulo(this4,that3);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBigInt","testModulo0ThrowsError",0x8254a696,"thx.TestBigInt.testModulo0ThrowsError","thx/TestBigInt.hx",300,0x152acd32)
HXLINE( 300)				HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9549841598749874951041",f1,9a,ac,0a),(int)10);
HXDLIN( 300)				HX_VARI_NAME( ::Dynamic,that4,"that") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 300)				::thx::bigint::BigIntImpl_obj::modulo(this5,that4);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBigInt","testModulo0ThrowsError",0x8254a696,"thx.TestBigInt.testModulo0ThrowsError","thx/TestBigInt.hx",301,0x152acd32)
HXLINE( 301)				HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-20964918940987496110974948",dd,4e,80,c7),(int)10);
HXDLIN( 301)				HX_VARI_NAME( ::Dynamic,that5,"that") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 301)				::thx::bigint::BigIntImpl_obj::modulo(this6,that5);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 295)			++_g1;
HXLINE( 296)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0()),hx::ClassOf< ::thx::Error >(),null(),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),296,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModulo0ThrowsError",53,74,c5,37)));
HXLINE( 297)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1()),hx::ClassOf< ::thx::Error >(),null(),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),297,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModulo0ThrowsError",53,74,c5,37)));
HXLINE( 298)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_2()),hx::ClassOf< ::thx::Error >(),null(),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),298,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModulo0ThrowsError",53,74,c5,37)));
HXLINE( 299)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_3()),hx::ClassOf< ::thx::Error >(),null(),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),299,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModulo0ThrowsError",53,74,c5,37)));
HXLINE( 300)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_4()),hx::ClassOf< ::thx::Error >(),null(),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),300,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModulo0ThrowsError",53,74,c5,37)));
HXLINE( 301)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_5()),hx::ClassOf< ::thx::Error >(),null(),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),301,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModulo0ThrowsError",53,74,c5,37)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testModulo0ThrowsError,(void))

void TestBigInt_obj::testModuloHandlesSignsCorrectly(){
            	HX_STACK_FRAME("thx.TestBigInt","testModuloHandlesSignsCorrectly",0x18c56fc1,"thx.TestBigInt.testModuloHandlesSignsCorrectly","thx/TestBigInt.hx",305,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 305)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 305)		HX_VARI( Int,_g) = this->x;
HXDLIN( 305)		while((_g1 < _g)){
HXLINE( 305)			++_g1;
HXLINE( 306)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)124234233);
HXDLIN( 306)			HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 306)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::modulo(this1,that);
HXDLIN( 306)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 306)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),306,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModuloHandlesSignsCorrectly",64,82,4d,ce)));
HXLINE( 307)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)124234233);
HXDLIN( 307)			HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-2);
HXDLIN( 307)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::modulo(this2,that1);
HXDLIN( 307)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 307)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),307,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModuloHandlesSignsCorrectly",64,82,4d,ce)));
HXLINE( 308)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-124234233);
HXDLIN( 308)			HX_VARI_NAME( ::Dynamic,that2,"that") = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 308)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::modulo(this3,that2);
HXDLIN( 308)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 308)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),308,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModuloHandlesSignsCorrectly",64,82,4d,ce)));
HXLINE( 309)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-124234233);
HXDLIN( 309)			HX_VARI_NAME( ::Dynamic,that3,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-2);
HXDLIN( 309)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::modulo(this4,that3);
HXDLIN( 309)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 309)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),309,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModuloHandlesSignsCorrectly",64,82,4d,ce)));
HXLINE( 310)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 310)			HX_VARI_NAME( ::Dynamic,that4,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-1243233);
HXDLIN( 310)			::Dynamic _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::modulo(this5,that4);
HXDLIN( 310)			Bool _hx_tmp9 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp8,::thx::bigint::Bigs_obj::fromInt((int)2));
HXDLIN( 310)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 310)			::String _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::toString(this6);
HXDLIN( 310)			::String _hx_tmp11 = ((HX_("excpected ",2b,34,21,be) + _hx_tmp10) + HX_(" % ",7b,68,18,00));
HXDLIN( 310)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1243233);
HXDLIN( 310)			::String _hx_tmp12 = ::thx::bigint::BigIntImpl_obj::toString(this7);
HXDLIN( 310)			::String _hx_tmp13 = ((_hx_tmp11 + _hx_tmp12) + HX_(" == 2 but got ",e1,5e,ec,a0));
HXDLIN( 310)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 310)			HX_VARI_NAME( ::Dynamic,that5,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-1243233);
HXDLIN( 310)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::BigIntImpl_obj::modulo(this8,that5);
HXDLIN( 310)			::String _hx_tmp14 = ::thx::bigint::BigIntImpl_obj::toString(this9);
HXDLIN( 310)			::utest::Assert_obj::isTrue(_hx_tmp9,(_hx_tmp13 + _hx_tmp14),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),310,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModuloHandlesSignsCorrectly",64,82,4d,ce)));
HXLINE( 311)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-2);
HXDLIN( 311)			HX_VARI_NAME( ::Dynamic,that6,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-1243233);
HXDLIN( 311)			::Dynamic _hx_tmp15 = ::thx::bigint::BigIntImpl_obj::modulo(this10,that6);
HXDLIN( 311)			Bool _hx_tmp16 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp15,::thx::bigint::Bigs_obj::fromInt((int)-2));
HXDLIN( 311)			HX_VARI_NAME( ::Dynamic,this11,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-2);
HXDLIN( 311)			::String _hx_tmp17 = ::thx::bigint::BigIntImpl_obj::toString(this11);
HXDLIN( 311)			::String _hx_tmp18 = ((HX_("excpected ",2b,34,21,be) + _hx_tmp17) + HX_(" % ",7b,68,18,00));
HXDLIN( 311)			HX_VARI_NAME( ::Dynamic,this12,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1243233);
HXDLIN( 311)			::String _hx_tmp19 = ::thx::bigint::BigIntImpl_obj::toString(this12);
HXDLIN( 311)			::String _hx_tmp20 = ((_hx_tmp18 + _hx_tmp19) + HX_(" == -2 but got ",0e,d0,9e,66));
HXDLIN( 311)			HX_VARI_NAME( ::Dynamic,this13,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-2);
HXDLIN( 311)			HX_VARI_NAME( ::Dynamic,that7,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-1243233);
HXDLIN( 311)			HX_VARI_NAME( ::Dynamic,this14,"this") = ::thx::bigint::BigIntImpl_obj::modulo(this13,that7);
HXDLIN( 311)			::String _hx_tmp21 = ::thx::bigint::BigIntImpl_obj::toString(this14);
HXDLIN( 311)			::utest::Assert_obj::isTrue(_hx_tmp16,(_hx_tmp20 + _hx_tmp21),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),311,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModuloHandlesSignsCorrectly",64,82,4d,ce)));
HXLINE( 312)			HX_VARI_NAME( ::Dynamic,this15,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("786456456335437356436",fb,0f,7b,15),(int)10);
HXDLIN( 312)			HX_VARI_NAME( ::Dynamic,that8,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-5423424653",2b,f7,4d,7b),(int)10);
HXDLIN( 312)			::Dynamic _hx_tmp22 = ::thx::bigint::BigIntImpl_obj::modulo(this15,that8);
HXDLIN( 312)			Bool _hx_tmp23 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp22,::thx::bigint::Bigs_obj::parseBase(HX_("2663036842",84,63,4f,19),(int)10));
HXDLIN( 312)			HX_VARI_NAME( ::Dynamic,this16,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("786456456335437356436",fb,0f,7b,15),(int)10);
HXDLIN( 312)			::String _hx_tmp24 = ::thx::bigint::BigIntImpl_obj::toString(this16);
HXDLIN( 312)			::String _hx_tmp25 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp24) + HX_(" % ",7b,68,18,00));
HXDLIN( 312)			HX_VARI_NAME( ::Dynamic,this17,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-5423424653",2b,f7,4d,7b),(int)10);
HXDLIN( 312)			::String _hx_tmp26 = ::thx::bigint::BigIntImpl_obj::toString(this17);
HXDLIN( 312)			::String _hx_tmp27 = ((_hx_tmp25 + _hx_tmp26) + HX_(" == ",a0,52,55,15));
HXDLIN( 312)			HX_VARI_NAME( ::Dynamic,this18,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("2663036842",84,63,4f,19),(int)10);
HXDLIN( 312)			::String _hx_tmp28 = ::thx::bigint::BigIntImpl_obj::toString(this18);
HXDLIN( 312)			::String _hx_tmp29 = ((_hx_tmp27 + _hx_tmp28) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 312)			HX_VARI_NAME( ::Dynamic,this19,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("786456456335437356436",fb,0f,7b,15),(int)10);
HXDLIN( 312)			HX_VARI_NAME( ::Dynamic,that9,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-5423424653",2b,f7,4d,7b),(int)10);
HXDLIN( 312)			HX_VARI_NAME( ::Dynamic,this20,"this") = ::thx::bigint::BigIntImpl_obj::modulo(this19,that9);
HXDLIN( 312)			::String _hx_tmp30 = ::thx::bigint::BigIntImpl_obj::toString(this20);
HXDLIN( 312)			::utest::Assert_obj::isTrue(_hx_tmp23,(_hx_tmp29 + _hx_tmp30),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),312,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModuloHandlesSignsCorrectly",64,82,4d,ce)));
HXLINE( 313)			HX_VARI_NAME( ::Dynamic,this21,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("93453764643534523",f8,5d,38,c2),(int)10);
HXDLIN( 313)			HX_VARI_NAME( ::Dynamic,that10,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-2342);
HXDLIN( 313)			::Dynamic _hx_tmp31 = ::thx::bigint::BigIntImpl_obj::modulo(this21,that10);
HXDLIN( 313)			Bool _hx_tmp32 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp31,::thx::bigint::Bigs_obj::fromInt((int)1119));
HXDLIN( 313)			::utest::Assert_obj::isTrue(_hx_tmp32,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),313,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModuloHandlesSignsCorrectly",64,82,4d,ce)));
HXLINE( 314)			HX_VARI_NAME( ::Dynamic,this22,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-32542543);
HXDLIN( 314)			HX_VARI_NAME( ::Dynamic,that11,"that") = ::thx::bigint::Bigs_obj::fromInt((int)100000000);
HXDLIN( 314)			::Dynamic _hx_tmp33 = ::thx::bigint::BigIntImpl_obj::modulo(this22,that11);
HXDLIN( 314)			Bool _hx_tmp34 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp33,::thx::bigint::Bigs_obj::fromInt((int)-32542543));
HXDLIN( 314)			::utest::Assert_obj::isTrue(_hx_tmp34,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),314,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testModuloHandlesSignsCorrectly",64,82,4d,ce)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testModuloHandlesSignsCorrectly,(void))

void TestBigInt_obj::testPrevNext(){
            	HX_STACK_FRAME("thx.TestBigInt","testPrevNext",0xef91dc7b,"thx.TestBigInt.testPrevNext","thx/TestBigInt.hx",318,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 318)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 318)		HX_VARI( Int,_g) = this->x;
HXDLIN( 318)		while((_g1 < _g)){
HXLINE( 318)			++_g1;
HXLINE( 319)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)546);
HXDLIN( 319)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::prev(this1);
HXDLIN( 319)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)545));
HXDLIN( 319)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)546);
HXDLIN( 319)			::String _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::toString(this2);
HXDLIN( 319)			::String _hx_tmp3 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp2) + HX_(".prev() == 545 but got ",ff,a8,19,0e));
HXDLIN( 319)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)546);
HXDLIN( 319)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::BigIntImpl_obj::prev(this3);
HXDLIN( 319)			::String _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::toString(this4);
HXDLIN( 319)			::utest::Assert_obj::isTrue(_hx_tmp1,(_hx_tmp3 + _hx_tmp4),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),319,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 320)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 320)			::Dynamic _hx_tmp5 = ::thx::bigint::BigIntImpl_obj::prev(this5);
HXDLIN( 320)			Bool _hx_tmp6 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp5,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 320)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),320,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 321)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 321)			::Dynamic _hx_tmp7 = ::thx::bigint::BigIntImpl_obj::prev(this6);
HXDLIN( 321)			Bool _hx_tmp8 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp7,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 321)			::utest::Assert_obj::isTrue(_hx_tmp8,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),321,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 322)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 322)			::Dynamic _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::prev(this7);
HXDLIN( 322)			Bool _hx_tmp10 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp9,::thx::bigint::Bigs_obj::fromInt((int)-2));
HXDLIN( 322)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 322)			::String _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::toString(this8);
HXDLIN( 322)			::String _hx_tmp12 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp11) + HX_(".prev() == -2 but got ",ec,d2,86,d5));
HXDLIN( 322)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 322)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::BigIntImpl_obj::prev(this9);
HXDLIN( 322)			::String _hx_tmp13 = ::thx::bigint::BigIntImpl_obj::toString(this10);
HXDLIN( 322)			::utest::Assert_obj::isTrue(_hx_tmp10,(_hx_tmp12 + _hx_tmp13),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),322,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 323)			HX_VARI_NAME( ::Dynamic,this11,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1987);
HXDLIN( 323)			::Dynamic _hx_tmp14 = ::thx::bigint::BigIntImpl_obj::prev(this11);
HXDLIN( 323)			Bool _hx_tmp15 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp14,::thx::bigint::Bigs_obj::fromInt((int)-1988));
HXDLIN( 323)			::utest::Assert_obj::isTrue(_hx_tmp15,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),323,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 325)			HX_VARI_NAME( ::Dynamic,this12,"this") = ::thx::bigint::Bigs_obj::fromInt((int)546);
HXDLIN( 325)			::Dynamic _hx_tmp16 = ::thx::bigint::BigIntImpl_obj::next(this12);
HXDLIN( 325)			Bool _hx_tmp17 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp16,::thx::bigint::Bigs_obj::fromInt((int)547));
HXDLIN( 325)			::utest::Assert_obj::isTrue(_hx_tmp17,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),325,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 326)			HX_VARI_NAME( ::Dynamic,this13,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 326)			::Dynamic _hx_tmp18 = ::thx::bigint::BigIntImpl_obj::next(this13);
HXDLIN( 326)			Bool _hx_tmp19 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp18,::thx::bigint::Bigs_obj::fromInt((int)2));
HXDLIN( 326)			::utest::Assert_obj::isTrue(_hx_tmp19,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),326,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 327)			HX_VARI_NAME( ::Dynamic,this14,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 327)			::Dynamic _hx_tmp20 = ::thx::bigint::BigIntImpl_obj::next(this14);
HXDLIN( 327)			Bool _hx_tmp21 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp20,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 327)			::utest::Assert_obj::isTrue(_hx_tmp21,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),327,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 328)			HX_VARI_NAME( ::Dynamic,this15,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 328)			::Dynamic _hx_tmp22 = ::thx::bigint::BigIntImpl_obj::next(this15);
HXDLIN( 328)			Bool _hx_tmp23 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp22,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 328)			::utest::Assert_obj::isTrue(_hx_tmp23,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),328,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 329)			HX_VARI_NAME( ::Dynamic,this16,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1987);
HXDLIN( 329)			::Dynamic _hx_tmp24 = ::thx::bigint::BigIntImpl_obj::next(this16);
HXDLIN( 329)			Bool _hx_tmp25 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp24,::thx::bigint::Bigs_obj::fromInt((int)-1986));
HXDLIN( 329)			::utest::Assert_obj::isTrue(_hx_tmp25,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),329,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 331)			HX_VARI_NAME( ::Dynamic,this17,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 331)			::Dynamic _hx_tmp26 = ::thx::bigint::BigIntImpl_obj::next(this17);
HXDLIN( 331)			Bool _hx_tmp27 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp26,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 331)			::utest::Assert_obj::isTrue(_hx_tmp27,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),331,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 332)			HX_VARI_NAME( ::Dynamic,this18,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 332)			::Dynamic _hx_tmp28 = ::thx::bigint::BigIntImpl_obj::next(this18);
HXDLIN( 332)			Bool _hx_tmp29 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp28,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 332)			::utest::Assert_obj::isTrue(_hx_tmp29,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),332,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 333)			HX_VARI_NAME( ::Dynamic,this19,"this") = ::thx::bigint::Bigs_obj::fromInt((int)34);
HXDLIN( 333)			::Dynamic _hx_tmp30 = ::thx::bigint::BigIntImpl_obj::next(this19);
HXDLIN( 333)			Bool _hx_tmp31 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp30,::thx::bigint::Bigs_obj::fromInt((int)35));
HXDLIN( 333)			::utest::Assert_obj::isTrue(_hx_tmp31,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),333,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 334)			HX_VARI_NAME( ::Dynamic,this20,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740992",bd,36,d1,68),(int)10);
HXDLIN( 334)			::Dynamic _hx_tmp32 = ::thx::bigint::BigIntImpl_obj::next(this20);
HXDLIN( 334)			Bool _hx_tmp33 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp32,::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740993",be,36,d1,68),(int)10));
HXDLIN( 334)			::utest::Assert_obj::isTrue(_hx_tmp33,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),334,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 335)			HX_VARI_NAME( ::Dynamic,this21,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-9007199254740992",ea,20,ad,6d),(int)10);
HXDLIN( 335)			::Dynamic _hx_tmp34 = ::thx::bigint::BigIntImpl_obj::next(this21);
HXDLIN( 335)			Bool _hx_tmp35 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp34,::thx::bigint::Bigs_obj::parseBase(HX_("-9007199254740991",e9,20,ad,6d),(int)10));
HXDLIN( 335)			::utest::Assert_obj::isTrue(_hx_tmp35,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),335,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 336)			HX_VARI_NAME( ::Dynamic,this22,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740992999",bc,4f,6d,5e),(int)10);
HXDLIN( 336)			::Dynamic _hx_tmp36 = ::thx::bigint::BigIntImpl_obj::next(this22);
HXDLIN( 336)			Bool _hx_tmp37 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp36,::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740993000",32,aa,0f,5f),(int)10));
HXDLIN( 336)			::utest::Assert_obj::isTrue(_hx_tmp37,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),336,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 337)			HX_VARI_NAME( ::Dynamic,this23,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740991",bc,36,d1,68),(int)10);
HXDLIN( 337)			::Dynamic _hx_tmp38 = ::thx::bigint::BigIntImpl_obj::next(this23);
HXDLIN( 337)			Bool _hx_tmp39 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp38,::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740992",bd,36,d1,68),(int)10));
HXDLIN( 337)			::utest::Assert_obj::isTrue(_hx_tmp39,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),337,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 339)			HX_VARI_NAME( ::Dynamic,this24,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 339)			::Dynamic _hx_tmp40 = ::thx::bigint::BigIntImpl_obj::prev(this24);
HXDLIN( 339)			Bool _hx_tmp41 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp40,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 339)			::utest::Assert_obj::isTrue(_hx_tmp41,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),339,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 340)			HX_VARI_NAME( ::Dynamic,this25,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 340)			::Dynamic _hx_tmp42 = ::thx::bigint::BigIntImpl_obj::prev(this25);
HXDLIN( 340)			Bool _hx_tmp43 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp42,::thx::bigint::Bigs_obj::fromInt((int)-2));
HXDLIN( 340)			::utest::Assert_obj::isTrue(_hx_tmp43,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),340,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 341)			HX_VARI_NAME( ::Dynamic,this26,"this") = ::thx::bigint::Bigs_obj::fromInt((int)34);
HXDLIN( 341)			::Dynamic _hx_tmp44 = ::thx::bigint::BigIntImpl_obj::prev(this26);
HXDLIN( 341)			Bool _hx_tmp45 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp44,::thx::bigint::Bigs_obj::fromInt((int)33));
HXDLIN( 341)			::utest::Assert_obj::isTrue(_hx_tmp45,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),341,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 342)			HX_VARI_NAME( ::Dynamic,this27,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740992",bd,36,d1,68),(int)10);
HXDLIN( 342)			::Dynamic _hx_tmp46 = ::thx::bigint::BigIntImpl_obj::prev(this27);
HXDLIN( 342)			Bool _hx_tmp47 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp46,::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740991",bc,36,d1,68),(int)10));
HXDLIN( 342)			::utest::Assert_obj::isTrue(_hx_tmp47,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),342,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 343)			HX_VARI_NAME( ::Dynamic,this28,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-9007199254740992",ea,20,ad,6d),(int)10);
HXDLIN( 343)			::Dynamic _hx_tmp48 = ::thx::bigint::BigIntImpl_obj::prev(this28);
HXDLIN( 343)			Bool _hx_tmp49 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp48,::thx::bigint::Bigs_obj::parseBase(HX_("-9007199254740993",eb,20,ad,6d),(int)10));
HXDLIN( 343)			::utest::Assert_obj::isTrue(_hx_tmp49,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),343,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 344)			HX_VARI_NAME( ::Dynamic,this29,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740992999",bc,4f,6d,5e),(int)10);
HXDLIN( 344)			::Dynamic _hx_tmp50 = ::thx::bigint::BigIntImpl_obj::prev(this29);
HXDLIN( 344)			Bool _hx_tmp51 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp50,::thx::bigint::Bigs_obj::parseBase(HX_("9007199254740992998",bb,4f,6d,5e),(int)10));
HXDLIN( 344)			::utest::Assert_obj::isTrue(_hx_tmp51,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),344,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 345)			HX_VARI_NAME( ::Dynamic,this30,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-9007199254740991",e9,20,ad,6d),(int)10);
HXDLIN( 345)			::Dynamic _hx_tmp52 = ::thx::bigint::BigIntImpl_obj::prev(this30);
HXDLIN( 345)			Bool _hx_tmp53 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp52,::thx::bigint::Bigs_obj::parseBase(HX_("-9007199254740992",ea,20,ad,6d),(int)10));
HXDLIN( 345)			::utest::Assert_obj::isTrue(_hx_tmp53,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),345,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 347)			HX_VARI_NAME( ::Dynamic,this31,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("109874981950949849811049",d9,85,0d,e8),(int)10);
HXDLIN( 347)			::Dynamic _hx_tmp54 = ::thx::bigint::BigIntImpl_obj::prev(this31);
HXDLIN( 347)			Bool _hx_tmp55 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp54,::thx::bigint::Bigs_obj::parseBase(HX_("109874981950949849811048",d8,85,0d,e8),(int)10));
HXDLIN( 347)			HX_VARI_NAME( ::Dynamic,this32,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("109874981950949849811049",d9,85,0d,e8),(int)10);
HXDLIN( 347)			HX_VARI_NAME( ::Dynamic,this33,"this") = ::thx::bigint::BigIntImpl_obj::prev(this32);
HXDLIN( 347)			::String _hx_tmp56 = ::thx::bigint::BigIntImpl_obj::toString(this33);
HXDLIN( 347)			::String _hx_tmp57 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp56) + HX_(" == ",a0,52,55,15));
HXDLIN( 347)			HX_VARI_NAME( ::Dynamic,this34,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("109874981950949849811048",d8,85,0d,e8),(int)10);
HXDLIN( 347)			::String _hx_tmp58 = ::thx::bigint::BigIntImpl_obj::toString(this34);
HXDLIN( 347)			::utest::Assert_obj::isTrue(_hx_tmp55,(_hx_tmp57 + _hx_tmp58),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),347,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 348)			HX_VARI_NAME( ::Dynamic,this35,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("109874981950949849811049",d9,85,0d,e8),(int)10);
HXDLIN( 348)			::Dynamic _hx_tmp59 = ::thx::bigint::BigIntImpl_obj::next(this35);
HXDLIN( 348)			Bool _hx_tmp60 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp59,::thx::bigint::Bigs_obj::parseBase(HX_("109874981950949849811050",af,86,0d,e8),(int)10));
HXDLIN( 348)			HX_VARI_NAME( ::Dynamic,this36,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("109874981950949849811049",d9,85,0d,e8),(int)10);
HXDLIN( 348)			HX_VARI_NAME( ::Dynamic,this37,"this") = ::thx::bigint::BigIntImpl_obj::next(this36);
HXDLIN( 348)			::String _hx_tmp61 = ::thx::bigint::BigIntImpl_obj::toString(this37);
HXDLIN( 348)			::String _hx_tmp62 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp61) + HX_(" == ",a0,52,55,15));
HXDLIN( 348)			HX_VARI_NAME( ::Dynamic,this38,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("109874981950949849811050",af,86,0d,e8),(int)10);
HXDLIN( 348)			::String _hx_tmp63 = ::thx::bigint::BigIntImpl_obj::toString(this38);
HXDLIN( 348)			::utest::Assert_obj::isTrue(_hx_tmp60,(_hx_tmp62 + _hx_tmp63),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),348,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 349)			HX_VARI_NAME( ::Dynamic,this39,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-109874981950949849811049",06,e5,52,7e),(int)10);
HXDLIN( 349)			::Dynamic _hx_tmp64 = ::thx::bigint::BigIntImpl_obj::prev(this39);
HXDLIN( 349)			Bool _hx_tmp65 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp64,::thx::bigint::Bigs_obj::parseBase(HX_("-109874981950949849811050",dc,e5,52,7e),(int)10));
HXDLIN( 349)			HX_VARI_NAME( ::Dynamic,this40,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-109874981950949849811049",06,e5,52,7e),(int)10);
HXDLIN( 349)			HX_VARI_NAME( ::Dynamic,this41,"this") = ::thx::bigint::BigIntImpl_obj::prev(this40);
HXDLIN( 349)			::String _hx_tmp66 = ::thx::bigint::BigIntImpl_obj::toString(this41);
HXDLIN( 349)			::String _hx_tmp67 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp66) + HX_(" == ",a0,52,55,15));
HXDLIN( 349)			HX_VARI_NAME( ::Dynamic,this42,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-109874981950949849811050",dc,e5,52,7e),(int)10);
HXDLIN( 349)			::String _hx_tmp68 = ::thx::bigint::BigIntImpl_obj::toString(this42);
HXDLIN( 349)			::utest::Assert_obj::isTrue(_hx_tmp65,(_hx_tmp67 + _hx_tmp68),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),349,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
HXLINE( 350)			HX_VARI_NAME( ::Dynamic,this43,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-109874981950949849811049",06,e5,52,7e),(int)10);
HXDLIN( 350)			::Dynamic _hx_tmp69 = ::thx::bigint::BigIntImpl_obj::next(this43);
HXDLIN( 350)			Bool _hx_tmp70 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp69,::thx::bigint::Bigs_obj::parseBase(HX_("-109874981950949849811048",05,e5,52,7e),(int)10));
HXDLIN( 350)			HX_VARI_NAME( ::Dynamic,this44,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-109874981950949849811049",06,e5,52,7e),(int)10);
HXDLIN( 350)			HX_VARI_NAME( ::Dynamic,this45,"this") = ::thx::bigint::BigIntImpl_obj::next(this44);
HXDLIN( 350)			::String _hx_tmp71 = ::thx::bigint::BigIntImpl_obj::toString(this45);
HXDLIN( 350)			::String _hx_tmp72 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp71) + HX_(" == ",a0,52,55,15));
HXDLIN( 350)			HX_VARI_NAME( ::Dynamic,this46,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-109874981950949849811048",05,e5,52,7e),(int)10);
HXDLIN( 350)			::String _hx_tmp73 = ::thx::bigint::BigIntImpl_obj::toString(this46);
HXDLIN( 350)			::utest::Assert_obj::isTrue(_hx_tmp70,(_hx_tmp72 + _hx_tmp73),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),350,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNext",f8,8b,d7,84)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testPrevNext,(void))

void TestBigInt_obj::testPrevNextCarriesOverCorrectly(){
            	HX_STACK_FRAME("thx.TestBigInt","testPrevNextCarriesOverCorrectly",0x9edf23e5,"thx.TestBigInt.testPrevNextCarriesOverCorrectly","thx/TestBigInt.hx",354,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 354)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 354)		HX_VARI( Int,_g) = this->x;
HXDLIN( 354)		while((_g1 < _g)){
HXLINE( 354)			++_g1;
HXLINE( 355)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)9999999);
HXDLIN( 355)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::next(this1);
HXDLIN( 355)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)10000000));
HXDLIN( 355)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),355,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNextCarriesOverCorrectly",e2,5f,67,c0)));
HXLINE( 356)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)10000000);
HXDLIN( 356)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::prev(this2);
HXDLIN( 356)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)9999999));
HXDLIN( 356)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),356,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPrevNextCarriesOverCorrectly",e2,5f,67,c0)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testPrevNextCarriesOverCorrectly,(void))

void TestBigInt_obj::testAbs(){
            	HX_STACK_FRAME("thx.TestBigInt","testAbs",0xf285dd9d,"thx.TestBigInt.testAbs","thx/TestBigInt.hx",360,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 360)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 360)		HX_VARI( Int,_g) = this->x;
HXDLIN( 360)		while((_g1 < _g)){
HXLINE( 360)			++_g1;
HXLINE( 361)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 361)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::abs(this1);
HXDLIN( 361)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 361)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),361,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAbs",40,5f,b8,bd)));
HXLINE( 362)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-0",63,27,00,00),(int)10);
HXDLIN( 362)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::abs(this2);
HXDLIN( 362)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 362)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),362,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAbs",40,5f,b8,bd)));
HXLINE( 363)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)54);
HXDLIN( 363)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::abs(this3);
HXDLIN( 363)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)54));
HXDLIN( 363)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),363,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAbs",40,5f,b8,bd)));
HXLINE( 364)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-54);
HXDLIN( 364)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::abs(this4);
HXDLIN( 364)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)54));
HXDLIN( 364)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),364,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAbs",40,5f,b8,bd)));
HXLINE( 365)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("13412564654613034984065434",4d,fc,2e,5f),(int)10);
HXDLIN( 365)			::Dynamic _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::abs(this5);
HXDLIN( 365)			Bool _hx_tmp9 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp8,::thx::bigint::Bigs_obj::parseBase(HX_("13412564654613034984065434",4d,fc,2e,5f),(int)10));
HXDLIN( 365)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),365,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAbs",40,5f,b8,bd)));
HXLINE( 366)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-13412564654613034984065434",ba,40,ec,18),(int)10);
HXDLIN( 366)			::Dynamic _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::abs(this6);
HXDLIN( 366)			Bool _hx_tmp11 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp10,::thx::bigint::Bigs_obj::parseBase(HX_("13412564654613034984065434",4d,fc,2e,5f),(int)10));
HXDLIN( 366)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),366,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAbs",40,5f,b8,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testAbs,(void))

void TestBigInt_obj::testIsPositiveAndIsNegative(){
            	HX_STACK_FRAME("thx.TestBigInt","testIsPositiveAndIsNegative",0x29b9881e,"thx.TestBigInt.testIsPositiveAndIsNegative","thx/TestBigInt.hx",370,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 370)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 370)		HX_VARI( Int,_g) = this->x;
HXDLIN( 370)		while((_g1 < _g)){
HXLINE( 370)			++_g1;
HXLINE( 371)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 371)			Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(this1,::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN( 371)			::utest::Assert_obj::isFalse((_hx_tmp > (int)0),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),371,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegative",41,cd,b4,78)));
HXLINE( 372)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 372)			Bool _hx_tmp1 = ( (Bool)(this2->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 372)			::utest::Assert_obj::isFalse(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),372,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegative",41,cd,b4,78)));
HXLINE( 373)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 373)			Int _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::compareTo(this3,::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN( 373)			::utest::Assert_obj::isFalse((_hx_tmp2 > (int)0),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),373,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegative",41,cd,b4,78)));
HXLINE( 374)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 374)			Bool _hx_tmp3 = ( (Bool)(this4->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 374)			::utest::Assert_obj::isFalse(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),374,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegative",41,cd,b4,78)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testIsPositiveAndIsNegative,(void))

void TestBigInt_obj::testIsPositiveAndIsNegativeWorkForSmallNumbers(){
            	HX_STACK_FRAME("thx.TestBigInt","testIsPositiveAndIsNegativeWorkForSmallNumbers",0xff7747dd,"thx.TestBigInt.testIsPositiveAndIsNegativeWorkForSmallNumbers","thx/TestBigInt.hx",378,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 378)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 378)		HX_VARI( Int,_g) = this->x;
HXDLIN( 378)		while((_g1 < _g)){
HXLINE( 378)			++_g1;
HXLINE( 379)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 379)			Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(this1,::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN( 379)			::utest::Assert_obj::isTrue((_hx_tmp > (int)0),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),379,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegativeWorkForSmallNumbers",9a,a4,7d,f9)));
HXLINE( 380)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)543);
HXDLIN( 380)			Bool _hx_tmp1 = ( (Bool)(this2->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 380)			::utest::Assert_obj::isFalse(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),380,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegativeWorkForSmallNumbers",9a,a4,7d,f9)));
HXLINE( 381)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 381)			Int _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::compareTo(this3,::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN( 381)			::utest::Assert_obj::isFalse((_hx_tmp2 > (int)0),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),381,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegativeWorkForSmallNumbers",9a,a4,7d,f9)));
HXLINE( 382)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-765);
HXDLIN( 382)			Bool _hx_tmp3 = ( (Bool)(this4->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 382)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),382,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegativeWorkForSmallNumbers",9a,a4,7d,f9)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testIsPositiveAndIsNegativeWorkForSmallNumbers,(void))

void TestBigInt_obj::testIsPositiveAndIsNegativeWorkForBigNumbers(){
            	HX_STACK_FRAME("thx.TestBigInt","testIsPositiveAndIsNegativeWorkForBigNumbers",0xb43eb684,"thx.TestBigInt.testIsPositiveAndIsNegativeWorkForBigNumbers","thx/TestBigInt.hx",386,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 386)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 386)		HX_VARI( Int,_g) = this->x;
HXDLIN( 386)		while((_g1 < _g)){
HXLINE( 386)			++_g1;
HXLINE( 387)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("651987498619879841",ec,40,7e,e1),(int)10);
HXDLIN( 387)			Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(this1,::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN( 387)			::utest::Assert_obj::isTrue((_hx_tmp > (int)0),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),387,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegativeWorkForBigNumbers",01,7a,ef,4d)));
HXLINE( 388)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("0054984980098460",ba,38,8c,13),(int)10);
HXDLIN( 388)			Bool _hx_tmp1 = ( (Bool)(this2->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 388)			::utest::Assert_obj::isFalse(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),388,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegativeWorkForBigNumbers",01,7a,ef,4d)));
HXLINE( 389)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1961987984109078496",ed,eb,13,ce),(int)10);
HXDLIN( 389)			Int _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::compareTo(this3,::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN( 389)			::utest::Assert_obj::isFalse((_hx_tmp2 > (int)0),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),389,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegativeWorkForBigNumbers",01,7a,ef,4d)));
HXLINE( 390)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-98800984196109540984",19,cd,82,f0),(int)10);
HXDLIN( 390)			Bool _hx_tmp3 = ( (Bool)(this4->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 390)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),390,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsPositiveAndIsNegativeWorkForBigNumbers",01,7a,ef,4d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testIsPositiveAndIsNegativeWorkForBigNumbers,(void))

void TestBigInt_obj::testIsUnit(){
            	HX_STACK_FRAME("thx.TestBigInt","testIsUnit",0x13b2ef43,"thx.TestBigInt.testIsUnit","thx/TestBigInt.hx",394,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 394)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 394)		HX_VARI( Int,_g) = this->x;
HXDLIN( 394)		while((_g1 < _g)){
HXLINE( 394)			++_g1;
HXLINE( 395)			Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isUnit(::thx::_BigInt::BigInt_Impl__obj::one);
HXDLIN( 395)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),395,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsUnit",80,d5,04,84)));
HXLINE( 396)			Bool _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::isUnit(::thx::_BigInt::BigInt_Impl__obj::negativeOne);
HXDLIN( 396)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),396,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsUnit",80,d5,04,84)));
HXLINE( 397)			Bool _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::isUnit(::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN( 397)			::utest::Assert_obj::isFalse(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),397,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsUnit",80,d5,04,84)));
HXLINE( 398)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)5);
HXDLIN( 398)			Bool _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::isUnit(this1);
HXDLIN( 398)			::utest::Assert_obj::isFalse(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),398,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsUnit",80,d5,04,84)));
HXLINE( 399)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-5);
HXDLIN( 399)			Bool _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::isUnit(this2);
HXDLIN( 399)			::utest::Assert_obj::isFalse(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),399,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsUnit",80,d5,04,84)));
HXLINE( 400)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("654609649089416160",52,42,86,3c),(int)10);
HXDLIN( 400)			Bool _hx_tmp5 = ::thx::bigint::BigIntImpl_obj::isUnit(this3);
HXDLIN( 400)			::utest::Assert_obj::isFalse(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),400,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsUnit",80,d5,04,84)));
HXLINE( 401)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-98410980984981094",44,9e,77,89),(int)10);
HXDLIN( 401)			Bool _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::isUnit(this4);
HXDLIN( 401)			::utest::Assert_obj::isFalse(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),401,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsUnit",80,d5,04,84)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testIsUnit,(void))

void TestBigInt_obj::testIsZero(){
            	HX_STACK_FRAME("thx.TestBigInt","testIsZero",0x16fa33e7,"thx.TestBigInt.testIsZero","thx/TestBigInt.hx",405,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 405)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 405)		HX_VARI( Int,_g) = this->x;
HXDLIN( 405)		while((_g1 < _g)){
HXLINE( 405)			++_g1;
HXLINE( 406)			Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN( 406)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),406,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsZero",24,1a,4c,87)));
HXLINE( 407)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 407)			Bool _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::isZero(this1);
HXDLIN( 407)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),407,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsZero",24,1a,4c,87)));
HXLINE( 408)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-0",63,27,00,00),(int)10);
HXDLIN( 408)			Bool _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::isZero(this2);
HXDLIN( 408)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),408,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsZero",24,1a,4c,87)));
HXLINE( 409)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)15);
HXDLIN( 409)			Bool _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::isZero(this3);
HXDLIN( 409)			::utest::Assert_obj::isFalse(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),409,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsZero",24,1a,4c,87)));
HXLINE( 410)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-15);
HXDLIN( 410)			Bool _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::isZero(this4);
HXDLIN( 410)			::utest::Assert_obj::isFalse(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),410,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsZero",24,1a,4c,87)));
HXLINE( 411)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("63213098189462109840",30,dc,cd,7b),(int)10);
HXDLIN( 411)			Bool _hx_tmp5 = ::thx::bigint::BigIntImpl_obj::isZero(this5);
HXDLIN( 411)			::utest::Assert_obj::isFalse(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),411,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsZero",24,1a,4c,87)));
HXLINE( 412)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-64343745644564564563",8d,ab,e8,ff),(int)10);
HXDLIN( 412)			Bool _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::isZero(this6);
HXDLIN( 412)			::utest::Assert_obj::isFalse(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),412,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsZero",24,1a,4c,87)));
HXLINE( 413)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 413)			Bool _hx_tmp7 = ::thx::bigint::BigIntImpl_obj::isZero(this7);
HXDLIN( 413)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),413,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsZero",24,1a,4c,87)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testIsZero,(void))

void TestBigInt_obj::testSquare(){
            	HX_STACK_FRAME("thx.TestBigInt","testSquare",0x01946052,"thx.TestBigInt.testSquare","thx/TestBigInt.hx",417,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 417)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 417)		HX_VARI( Int,_g) = this->x;
HXDLIN( 417)		while((_g1 < _g)){
HXLINE( 417)			++_g1;
HXLINE( 418)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 418)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::square(this1);
HXDLIN( 418)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 418)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),418,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testSquare",8f,46,e6,71)));
HXLINE( 419)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)16);
HXDLIN( 419)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::square(this2);
HXDLIN( 419)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)256));
HXDLIN( 419)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),419,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testSquare",8f,46,e6,71)));
HXLINE( 420)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-16);
HXDLIN( 420)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::square(this3);
HXDLIN( 420)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)256));
HXDLIN( 420)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),420,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testSquare",8f,46,e6,71)));
HXLINE( 421)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("65536",39,06,d4,3a),(int)10);
HXDLIN( 421)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::square(this4);
HXDLIN( 421)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::parseBase(HX_("4294967296",ae,26,5a,77),(int)10));
HXDLIN( 421)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("65536",39,06,d4,3a),(int)10);
HXDLIN( 421)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::BigIntImpl_obj::square(this5);
HXDLIN( 421)			::String _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::toString(this6);
HXDLIN( 421)			::utest::Assert_obj::isTrue(_hx_tmp7,((HX_("expected ",a8,7a,f8,e9) + _hx_tmp8) + HX_(" == 4294967296",4e,01,4d,32)),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),421,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testSquare",8f,46,e6,71)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testSquare,(void))

void TestBigInt_obj::testPowerToNegativeNumbersIs0(){
            	HX_STACK_FRAME("thx.TestBigInt","testPowerToNegativeNumbersIs0",0xc273c2dc,"thx.TestBigInt.testPowerToNegativeNumbersIs0","thx/TestBigInt.hx",425,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 425)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 425)		HX_VARI( Int,_g) = this->x;
HXDLIN( 425)		while((_g1 < _g)){
HXLINE( 425)			++_g1;
HXLINE( 426)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 426)			HX_VARI( ::Dynamic,exp) = ::thx::bigint::Bigs_obj::fromInt((int)-298);
HXDLIN( 426)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::pow(this1,exp);
HXDLIN( 426)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 426)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),426,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerToNegativeNumbersIs0",bf,d6,a4,3a)));
HXLINE( 427)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)543);
HXDLIN( 427)			HX_VARI_NAME( ::Dynamic,exp1,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)-2);
HXDLIN( 427)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::pow(this2,exp1);
HXDLIN( 427)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 427)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),427,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerToNegativeNumbersIs0",bf,d6,a4,3a)));
HXLINE( 428)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("323434643534523",14,46,79,c6),(int)10);
HXDLIN( 428)			HX_VARI_NAME( ::Dynamic,exp2,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 428)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::pow(this3,exp2);
HXDLIN( 428)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 428)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),428,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerToNegativeNumbersIs0",bf,d6,a4,3a)));
HXLINE( 429)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-54302);
HXDLIN( 429)			HX_VARI_NAME( ::Dynamic,exp3,"exp") = ::thx::bigint::Bigs_obj::parseBase(HX_("-543624724341214223562",6b,fe,45,cc),(int)10);
HXDLIN( 429)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::pow(this4,exp3);
HXDLIN( 429)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 429)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),429,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerToNegativeNumbersIs0",bf,d6,a4,3a)));
HXLINE( 430)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-20199605604968",76,71,4a,93),(int)10);
HXDLIN( 430)			HX_VARI_NAME( ::Dynamic,exp4,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)-99);
HXDLIN( 430)			::Dynamic _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::pow(this5,exp4);
HXDLIN( 430)			Bool _hx_tmp9 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp8,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 430)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),430,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerToNegativeNumbersIs0",bf,d6,a4,3a)));
HXLINE( 432)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 432)			HX_VARI_NAME( ::Dynamic,exp5,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 432)			::Dynamic _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::pow(this6,exp5);
HXDLIN( 432)			Bool _hx_tmp11 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp10,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 432)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),432,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerToNegativeNumbersIs0",bf,d6,a4,3a)));
HXLINE( 433)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 433)			HX_VARI_NAME( ::Dynamic,exp6,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 433)			::Dynamic _hx_tmp12 = ::thx::bigint::BigIntImpl_obj::pow(this7,exp6);
HXDLIN( 433)			Bool _hx_tmp13 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp12,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 433)			::utest::Assert_obj::isTrue(_hx_tmp13,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),433,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerToNegativeNumbersIs0",bf,d6,a4,3a)));
HXLINE( 434)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 434)			HX_VARI_NAME( ::Dynamic,exp7,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)-2);
HXDLIN( 434)			::Dynamic _hx_tmp14 = ::thx::bigint::BigIntImpl_obj::pow(this8,exp7);
HXDLIN( 434)			Bool _hx_tmp15 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp14,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 434)			::utest::Assert_obj::isTrue(_hx_tmp15,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),434,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerToNegativeNumbersIs0",bf,d6,a4,3a)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testPowerToNegativeNumbersIs0,(void))

void TestBigInt_obj::testPowerHandlesSignsCorrectly(){
            	HX_STACK_FRAME("thx.TestBigInt","testPowerHandlesSignsCorrectly",0x5e3f6e1c,"thx.TestBigInt.testPowerHandlesSignsCorrectly","thx/TestBigInt.hx",438,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 438)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 438)		HX_VARI( Int,_g) = this->x;
HXDLIN( 438)		while((_g1 < _g)){
HXLINE( 438)			++_g1;
HXLINE( 439)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 439)			HX_VARI( ::Dynamic,exp) = ::thx::bigint::Bigs_obj::fromInt((int)3);
HXDLIN( 439)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::pow(this1,exp);
HXDLIN( 439)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)8));
HXDLIN( 439)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),439,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
HXLINE( 440)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-2);
HXDLIN( 440)			HX_VARI_NAME( ::Dynamic,exp1,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)3);
HXDLIN( 440)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::pow(this2,exp1);
HXDLIN( 440)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)-8));
HXDLIN( 440)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-2);
HXDLIN( 440)			HX_VARI_NAME( ::Dynamic,exp2,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)3);
HXDLIN( 440)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::BigIntImpl_obj::pow(this3,exp2);
HXDLIN( 440)			::String _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::toString(this4);
HXDLIN( 440)			::utest::Assert_obj::isTrue(_hx_tmp3,((HX_("expected ",a8,7a,f8,e9) + _hx_tmp4) + HX_(" == -8",0b,62,47,13)),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),440,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
HXLINE( 441)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1036350201654",8e,89,f1,54),(int)10);
HXDLIN( 441)			HX_VARI_NAME( ::Dynamic,exp3,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)4);
HXDLIN( 441)			::Dynamic _hx_tmp5 = ::thx::bigint::BigIntImpl_obj::pow(this5,exp3);
HXDLIN( 441)			Bool _hx_tmp6 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp5,::thx::bigint::Bigs_obj::parseBase(HX_("1153522698998527286707879497611725813209153232656",ea,cd,00,40),(int)10));
HXDLIN( 441)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1036350201654",8e,89,f1,54),(int)10);
HXDLIN( 441)			HX_VARI_NAME( ::Dynamic,exp4,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)4);
HXDLIN( 441)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::BigIntImpl_obj::pow(this6,exp4);
HXDLIN( 441)			::String _hx_tmp7 = ::thx::bigint::BigIntImpl_obj::toString(this7);
HXDLIN( 441)			::String _hx_tmp8 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp7) + HX_(" == ",a0,52,55,15));
HXDLIN( 441)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1153522698998527286707879497611725813209153232656",ea,cd,00,40),(int)10);
HXDLIN( 441)			::String _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::toString(this8);
HXDLIN( 441)			::utest::Assert_obj::isTrue(_hx_tmp6,(_hx_tmp8 + _hx_tmp9),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),441,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
HXLINE( 442)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1036350201654",41,31,69,8d),(int)10);
HXDLIN( 442)			HX_VARI_NAME( ::Dynamic,exp5,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)4);
HXDLIN( 442)			::Dynamic _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::pow(this9,exp5);
HXDLIN( 442)			Bool _hx_tmp11 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp10,::thx::bigint::Bigs_obj::parseBase(HX_("1153522698998527286707879497611725813209153232656",ea,cd,00,40),(int)10));
HXDLIN( 442)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1036350201654",41,31,69,8d),(int)10);
HXDLIN( 442)			HX_VARI_NAME( ::Dynamic,exp6,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)4);
HXDLIN( 442)			HX_VARI_NAME( ::Dynamic,this11,"this") = ::thx::bigint::BigIntImpl_obj::pow(this10,exp6);
HXDLIN( 442)			::String _hx_tmp12 = ::thx::bigint::BigIntImpl_obj::toString(this11);
HXDLIN( 442)			::String _hx_tmp13 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp12) + HX_(" == ",a0,52,55,15));
HXDLIN( 442)			HX_VARI_NAME( ::Dynamic,this12,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1153522698998527286707879497611725813209153232656",ea,cd,00,40),(int)10);
HXDLIN( 442)			::String _hx_tmp14 = ::thx::bigint::BigIntImpl_obj::toString(this12);
HXDLIN( 442)			::utest::Assert_obj::isTrue(_hx_tmp11,(_hx_tmp13 + _hx_tmp14),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),442,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
HXLINE( 443)			HX_VARI_NAME( ::Dynamic,this13,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-154654987",86,af,26,b5),(int)10);
HXDLIN( 443)			HX_VARI_NAME( ::Dynamic,exp7,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)3);
HXDLIN( 443)			::Dynamic _hx_tmp15 = ::thx::bigint::BigIntImpl_obj::pow(this13,exp7);
HXDLIN( 443)			Bool _hx_tmp16 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp15,::thx::bigint::Bigs_obj::parseBase(HX_("-3699063497752861435082803",13,b6,c1,1c),(int)10));
HXDLIN( 443)			HX_VARI_NAME( ::Dynamic,this14,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-154654987",86,af,26,b5),(int)10);
HXDLIN( 443)			HX_VARI_NAME( ::Dynamic,exp8,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)3);
HXDLIN( 443)			HX_VARI_NAME( ::Dynamic,this15,"this") = ::thx::bigint::BigIntImpl_obj::pow(this14,exp8);
HXDLIN( 443)			::String _hx_tmp17 = ::thx::bigint::BigIntImpl_obj::toString(this15);
HXDLIN( 443)			::String _hx_tmp18 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp17) + HX_(" == ",a0,52,55,15));
HXDLIN( 443)			HX_VARI_NAME( ::Dynamic,this16,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-3699063497752861435082803",13,b6,c1,1c),(int)10);
HXDLIN( 443)			::String _hx_tmp19 = ::thx::bigint::BigIntImpl_obj::toString(this16);
HXDLIN( 443)			::utest::Assert_obj::isTrue(_hx_tmp16,(_hx_tmp18 + _hx_tmp19),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),443,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
HXLINE( 445)			HX_VARI_NAME( ::Dynamic,this17,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 445)			HX_VARI_NAME( ::Dynamic,exp9,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 445)			::Dynamic _hx_tmp20 = ::thx::bigint::BigIntImpl_obj::pow(this17,exp9);
HXDLIN( 445)			Bool _hx_tmp21 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp20,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 445)			::utest::Assert_obj::isTrue(_hx_tmp21,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),445,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
HXLINE( 446)			HX_VARI_NAME( ::Dynamic,this18,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 446)			HX_VARI_NAME( ::Dynamic,exp10,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 446)			::Dynamic _hx_tmp22 = ::thx::bigint::BigIntImpl_obj::pow(this18,exp10);
HXDLIN( 446)			Bool _hx_tmp23 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp22,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 446)			::utest::Assert_obj::isTrue(_hx_tmp23,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),446,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
HXLINE( 447)			HX_VARI_NAME( ::Dynamic,this19,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 447)			HX_VARI_NAME( ::Dynamic,exp11,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 447)			::Dynamic _hx_tmp24 = ::thx::bigint::BigIntImpl_obj::pow(this19,exp11);
HXDLIN( 447)			Bool _hx_tmp25 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp24,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 447)			::utest::Assert_obj::isTrue(_hx_tmp25,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),447,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
HXLINE( 449)			HX_VARI_NAME( ::Dynamic,this20,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 449)			HX_VARI_NAME( ::Dynamic,exp12,"exp") = ::thx::bigint::Bigs_obj::parseBase(HX_("1e100",dd,51,8a,79),(int)10);
HXDLIN( 449)			::Dynamic _hx_tmp26 = ::thx::bigint::BigIntImpl_obj::pow(this20,exp12);
HXDLIN( 449)			Bool _hx_tmp27 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp26,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 449)			::utest::Assert_obj::isTrue(_hx_tmp27,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),449,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
HXLINE( 450)			HX_VARI_NAME( ::Dynamic,this21,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-1);
HXDLIN( 450)			HX_VARI_NAME( ::Dynamic,exp13,"exp") = ::thx::bigint::Bigs_obj::parseBase(HX_("1e100",dd,51,8a,79),(int)10);
HXDLIN( 450)			::Dynamic _hx_tmp28 = ::thx::bigint::BigIntImpl_obj::pow(this21,exp13);
HXDLIN( 450)			Bool _hx_tmp29 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp28,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 450)			::utest::Assert_obj::isTrue(_hx_tmp29,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),450,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
HXLINE( 451)			HX_VARI_NAME( ::Dynamic,this22,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 451)			HX_VARI_NAME( ::Dynamic,exp14,"exp") = ::thx::bigint::Bigs_obj::parseBase(HX_("1e100",dd,51,8a,79),(int)10);
HXDLIN( 451)			::Dynamic _hx_tmp30 = ::thx::bigint::BigIntImpl_obj::pow(this22,exp14);
HXDLIN( 451)			Bool _hx_tmp31 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp30,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 451)			::utest::Assert_obj::isTrue(_hx_tmp31,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),451,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerHandlesSignsCorrectly",d9,c0,ff,10)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testPowerHandlesSignsCorrectly,(void))

void TestBigInt_obj::testPower(){
            	HX_STACK_FRAME("thx.TestBigInt","testPower",0xb18c19f0,"thx.TestBigInt.testPower","thx/TestBigInt.hx",455,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 455)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 455)		HX_VARI( Int,_g) = this->x;
HXDLIN( 455)		while((_g1 < _g)){
HXLINE( 455)			++_g1;
HXLINE( 456)			::thx::bigint::Bigs_obj::parseBase(HX_("102340001040000",99,f3,b3,76),(int)10);
HXLINE( 457)			::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::parseBase(HX_("10000000000",71,59,84,bf),(int)10);
HXDLIN( 457)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)10);
HXDLIN( 457)			HX_VARI( ::Dynamic,exp) = ::thx::bigint::Bigs_obj::fromInt((int)10);
HXDLIN( 457)			::Dynamic _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::pow(this1,exp);
HXDLIN( 457)			Bool _hx_tmp2 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,_hx_tmp1);
HXDLIN( 457)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),457,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPower",53,8a,9c,8f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testPower,(void))

void TestBigInt_obj::testPowerOf0to0is1(){
            	HX_STACK_FRAME("thx.TestBigInt","testPowerOf0to0is1",0x6202d9bb,"thx.TestBigInt.testPowerOf0to0is1","thx/TestBigInt.hx",461,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 461)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 461)		HX_VARI( Int,_g) = this->x;
HXDLIN( 461)		while((_g1 < _g)){
HXLINE( 461)			++_g1;
HXLINE( 462)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 462)			HX_VARI( ::Dynamic,exp) = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 462)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::pow(this1,exp);
HXDLIN( 462)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 462)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),462,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerOf0to0is1",f8,c4,30,33)));
HXLINE( 463)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 463)			HX_VARI_NAME( ::Dynamic,exp1,"exp") = ::thx::bigint::Bigs_obj::parseBase(HX_("-0",63,27,00,00),(int)10);
HXDLIN( 463)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::pow(this2,exp1);
HXDLIN( 463)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 463)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),463,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerOf0to0is1",f8,c4,30,33)));
HXLINE( 464)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-0",63,27,00,00),(int)10);
HXDLIN( 464)			HX_VARI_NAME( ::Dynamic,exp2,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 464)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::pow(this3,exp2);
HXDLIN( 464)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 464)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),464,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerOf0to0is1",f8,c4,30,33)));
HXLINE( 465)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-0",63,27,00,00),(int)10);
HXDLIN( 465)			HX_VARI_NAME( ::Dynamic,exp3,"exp") = ::thx::bigint::Bigs_obj::parseBase(HX_("-0",63,27,00,00),(int)10);
HXDLIN( 465)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::pow(this4,exp3);
HXDLIN( 465)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 465)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),465,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerOf0to0is1",f8,c4,30,33)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testPowerOf0to0is1,(void))

void TestBigInt_obj::testPowerCarriesOverCorrectly(){
            	HX_STACK_FRAME("thx.TestBigInt","testPowerCarriesOverCorrectly",0x849bb9da,"thx.TestBigInt.testPowerCarriesOverCorrectly","thx/TestBigInt.hx",469,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 469)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 469)		HX_VARI( Int,_g) = this->x;
HXDLIN( 469)		while((_g1 < _g)){
HXLINE( 469)			++_g1;
HXLINE( 470)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("16",e5,2a,00,00),(int)10);
HXDLIN( 470)			HX_VARI( ::Dynamic,exp) = ::thx::bigint::Bigs_obj::parseBase(HX_("13",e2,2a,00,00),(int)10);
HXDLIN( 470)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::pow(this1,exp);
HXDLIN( 470)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::parseBase(HX_("4503599627370496",0f,7b,77,9b),(int)10));
HXDLIN( 470)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),470,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerCarriesOverCorrectly",bd,cd,cc,fc)));
HXLINE( 471)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("123456789123456789",60,d1,ca,77),(int)10);
HXDLIN( 471)			HX_VARI_NAME( ::Dynamic,exp1,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)10);
HXDLIN( 471)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::pow(this2,exp1);
HXDLIN( 471)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::parseBase(HX_("822526267372365207989468699031914332476569003445489153619518989325083908083922133639704420166045905346960117046949453426283086050487204639652635846010822673782217799736601",6f,ac,24,5a),(int)10));
HXDLIN( 471)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),471,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerCarriesOverCorrectly",bd,cd,cc,fc)));
HXLINE( 472)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("2",32,00,00,00),(int)10);
HXDLIN( 472)			HX_VARI_NAME( ::Dynamic,exp2,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)63);
HXDLIN( 472)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::pow(this3,exp2);
HXDLIN( 472)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::parseBase(HX_("9223372036854775808",63,43,ff,e4),(int)10));
HXDLIN( 472)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9223372036854775808",63,43,ff,e4),(int)10);
HXDLIN( 472)			::String _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::toString(this4);
HXDLIN( 472)			::String _hx_tmp7 = ((HX_("expected 2.pow(63) == ",78,4b,b0,a0) + _hx_tmp6) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 472)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("2",32,00,00,00),(int)10);
HXDLIN( 472)			HX_VARI_NAME( ::Dynamic,exp3,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)63);
HXDLIN( 472)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::BigIntImpl_obj::pow(this5,exp3);
HXDLIN( 472)			::String _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::toString(this6);
HXDLIN( 472)			::utest::Assert_obj::isTrue(_hx_tmp5,(_hx_tmp7 + _hx_tmp8),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),472,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerCarriesOverCorrectly",bd,cd,cc,fc)));
HXLINE( 473)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::fromInt((int)100);
HXDLIN( 473)			HX_VARI_NAME( ::Dynamic,exp4,"exp") = ::thx::bigint::Bigs_obj::fromInt((int)56);
HXDLIN( 473)			::Dynamic _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::pow(this7,exp4);
HXDLIN( 473)			Bool _hx_tmp10 = ::thx::_BigInt::BigInt_Impl__obj::notEquals(_hx_tmp9,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 473)			::utest::Assert_obj::isTrue(_hx_tmp10,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),473,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testPowerCarriesOverCorrectly",bd,cd,cc,fc)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testPowerCarriesOverCorrectly,(void))

void TestBigInt_obj::testDivision(){
            	HX_STACK_FRAME("thx.TestBigInt","testDivision",0x3346d422,"thx.TestBigInt.testDivision","thx/TestBigInt.hx",477,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 477)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 477)		HX_VARI( Int,_g) = this->x;
HXDLIN( 477)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBigInt","testDivision",0x3346d422,"thx.TestBigInt.testDivision","thx/TestBigInt.hx",479,0x152acd32)
HXLINE( 479)				HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 479)				HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 479)				::thx::bigint::BigIntImpl_obj::divide(this1,that);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestBigInt","testDivision",0x3346d422,"thx.TestBigInt.testDivision","thx/TestBigInt.hx",482,0x152acd32)
HXLINE( 482)				HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 482)				HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 482)				::thx::bigint::BigIntImpl_obj::divide(this2,that1);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 477)			++_g1;
HXLINE( 478)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0()),hx::ClassOf< ::thx::Error >(),null(),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),478,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivision",9f,83,8c,c8)));
HXLINE( 481)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1()),hx::ClassOf< ::thx::Error >(),null(),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),481,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivision",9f,83,8c,c8)));
HXLINE( 486)			::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::fromInt((int)10);
HXDLIN( 486)			::Dynamic _hx_tmp1 = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 486)			 ::Dynamic _hx_tmp2 =  ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("div",51,3d,4c,00),_hx_tmp1)
            				->setFixed(1,HX_("num",46,de,53,00),_hx_tmp)
            				->setFixed(2,HX_("res",60,d9,56,00),::thx::bigint::Bigs_obj::fromInt((int)5)));
HXLINE( 487)			::Dynamic _hx_tmp3 = ::thx::bigint::Bigs_obj::parseBase(HX_("102340001040000",99,f3,b3,76),(int)10);
HXDLIN( 487)			::Dynamic _hx_tmp4 = ::thx::bigint::Bigs_obj::parseBase(HX_("10000000000",71,59,84,bf),(int)10);
HXDLIN( 487)			 ::Dynamic _hx_tmp5 =  ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("div",51,3d,4c,00),_hx_tmp4)
            				->setFixed(1,HX_("num",46,de,53,00),_hx_tmp3)
            				->setFixed(2,HX_("res",60,d9,56,00),::thx::bigint::Bigs_obj::fromInt((int)10234)));
HXLINE( 488)			::Dynamic _hx_tmp6 = ::thx::bigint::Bigs_obj::parseBase(HX_("1000000000000000000",71,5a,4c,67),(int)10);
HXDLIN( 488)			::Dynamic _hx_tmp7 = ::thx::bigint::Bigs_obj::fromInt((int)50);
HXLINE( 485)			HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp2)->init(1,_hx_tmp5)->init(2, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("div",51,3d,4c,00),_hx_tmp7)
            				->setFixed(1,HX_("num",46,de,53,00),_hx_tmp6)
            				->setFixed(2,HX_("res",60,d9,56,00),::thx::bigint::Bigs_obj::parseBase(HX_("20000000000000000",32,54,f6,02),(int)10))));
HXLINE( 490)			{
HXLINE( 490)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 490)				while((_g2 < tests->length)){
HXLINE( 490)					HX_VARI(  ::Dynamic,test) = tests->__get(_g2);
HXDLIN( 490)					++_g2;
HXLINE( 491)					Bool _hx_tmp8 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::divide( ::Dynamic(test->__Field(HX_("num",46,de,53,00),hx::paccDynamic)), ::Dynamic(test->__Field(HX_("div",51,3d,4c,00),hx::paccDynamic))), ::Dynamic(test->__Field(HX_("res",60,d9,56,00),hx::paccDynamic)));
HXDLIN( 491)					::String _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::toString( ::Dynamic(test->__Field(HX_("num",46,de,53,00),hx::paccDynamic)));
HXDLIN( 491)					::String _hx_tmp10 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp9) + HX_(" / ",31,71,18,00));
HXDLIN( 491)					::String _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::toString( ::Dynamic(test->__Field(HX_("div",51,3d,4c,00),hx::paccDynamic)));
HXDLIN( 491)					::String _hx_tmp12 = ((_hx_tmp10 + _hx_tmp11) + HX_(" == ",a0,52,55,15));
HXDLIN( 491)					::String _hx_tmp13 = ::thx::bigint::BigIntImpl_obj::toString( ::Dynamic(test->__Field(HX_("res",60,d9,56,00),hx::paccDynamic)));
HXDLIN( 491)					::String _hx_tmp14 = ((_hx_tmp12 + _hx_tmp13) + HX_(" and it was ",c3,a4,47,64));
HXDLIN( 491)					HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::BigIntImpl_obj::divide( ::Dynamic(test->__Field(HX_("num",46,de,53,00),hx::paccDynamic)), ::Dynamic(test->__Field(HX_("div",51,3d,4c,00),hx::paccDynamic)));
HXDLIN( 491)					::String _hx_tmp15 = ::thx::bigint::BigIntImpl_obj::toString(this3);
HXDLIN( 491)					::utest::Assert_obj::isTrue(_hx_tmp8,(_hx_tmp14 + _hx_tmp15),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),491,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testDivision",9f,83,8c,c8)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testDivision,(void))

void TestBigInt_obj::testAddition(){
            	HX_STACK_FRAME("thx.TestBigInt","testAddition",0x8600e3f1,"thx.TestBigInt.testAddition","thx/TestBigInt.hx",496,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 496)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 496)		HX_VARI( Int,_g) = this->x;
HXDLIN( 496)		while((_g1 < _g)){
HXLINE( 496)			++_g1;
HXLINE( 497)			HX_VAR( ::Dynamic,m);
HXLINE( 498)			HX_VAR( ::Dynamic,n);
HXLINE( 499)			HX_VAR( ::Dynamic,o);
HXLINE( 500)			HX_VAR( ::Dynamic,s);
HXLINE( 503)			m = ::thx::bigint::Bigs_obj::fromInt((int)123);
HXDLIN( 503)			n = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXLINE( 504)			Bool _hx_tmp = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::add(m,n),m);
HXDLIN( 504)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),504,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 505)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::add(n,m),m);
HXDLIN( 505)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),505,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 507)			Bool _hx_tmp2 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::subtract(m,n),m);
HXDLIN( 507)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),507,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 508)			::Dynamic _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::subtract(n,m);
HXDLIN( 508)			Bool _hx_tmp4 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp3,::thx::bigint::BigIntImpl_obj::negate(m));
HXDLIN( 508)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),508,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 511)			m = ::thx::bigint::Bigs_obj::fromInt((int)123);
HXDLIN( 511)			n = ::thx::bigint::Bigs_obj::fromInt((int)343);
HXDLIN( 511)			s = ::thx::bigint::Bigs_obj::fromInt((int)466);
HXLINE( 512)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::add(m,n),s);
HXDLIN( 512)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),512,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 513)			Bool _hx_tmp6 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::add(n,m),s);
HXDLIN( 513)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),513,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 515)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::subtract(s,n),m);
HXDLIN( 515)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),515,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 516)			::Dynamic _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::subtract(n,s);
HXDLIN( 516)			Bool _hx_tmp9 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp8,::thx::bigint::BigIntImpl_obj::negate(m));
HXDLIN( 516)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),516,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 519)			m = ::thx::bigint::Bigs_obj::fromInt((int)-234356);
HXDLIN( 519)			n = ::thx::bigint::Bigs_obj::fromInt((int)355321);
HXDLIN( 519)			o = ::thx::bigint::Bigs_obj::fromInt((int)234);
HXLINE( 520)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::BigIntImpl_obj::add(m,n);
HXDLIN( 520)			::Dynamic _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::add(this1,o);
HXDLIN( 520)			HX_VARI( ::Dynamic,that) = ::thx::bigint::BigIntImpl_obj::add(n,o);
HXDLIN( 520)			::Dynamic _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::add(m,that);
HXDLIN( 520)			Bool _hx_tmp12 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp10,_hx_tmp11);
HXDLIN( 520)			::utest::Assert_obj::isTrue(_hx_tmp12,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),520,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 522)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::BigIntImpl_obj::subtract(m,n);
HXDLIN( 522)			::Dynamic _hx_tmp13 = ::thx::bigint::BigIntImpl_obj::add(this2,o);
HXDLIN( 522)			HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::BigIntImpl_obj::subtract(n,o);
HXDLIN( 522)			::Dynamic _hx_tmp14 = ::thx::bigint::BigIntImpl_obj::subtract(m,that1);
HXDLIN( 522)			Bool _hx_tmp15 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp13,_hx_tmp14);
HXDLIN( 522)			::utest::Assert_obj::isTrue(_hx_tmp15,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),522,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 524)			m = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 524)			n = ::thx::bigint::Bigs_obj::fromInt((int)-9999);
HXDLIN( 524)			s = ::thx::bigint::Bigs_obj::fromInt((int)-9998);
HXLINE( 525)			Bool _hx_tmp16 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::add(m,n),s);
HXDLIN( 525)			::utest::Assert_obj::isTrue(_hx_tmp16,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),525,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 527)			Bool _hx_tmp17 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::subtract(s,n),m);
HXDLIN( 527)			::utest::Assert_obj::isTrue(_hx_tmp17,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),527,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 529)			m = ::thx::bigint::Bigs_obj::parseBase(HX_("11111111111111111111110111111111111111111111111111",41,f4,1f,1f),(int)10);
HXLINE( 530)			n = m;
HXLINE( 531)			s = ::thx::bigint::Bigs_obj::parseBase(HX_("22222222222222222222220222222222222222222222222222",82,ce,fd,87),(int)10);
HXLINE( 532)			Bool _hx_tmp18 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::add(m,n),s);
HXDLIN( 532)			::String _hx_tmp19 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 532)			::String _hx_tmp20 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp19) + HX_(" + ",b5,6d,18,00));
HXDLIN( 532)			::String _hx_tmp21 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 532)			::String _hx_tmp22 = ((_hx_tmp20 + _hx_tmp21) + HX_(" == ",a0,52,55,15));
HXDLIN( 532)			::String _hx_tmp23 = ::thx::bigint::BigIntImpl_obj::toString(s);
HXDLIN( 532)			::String _hx_tmp24 = ((_hx_tmp22 + _hx_tmp23) + HX_(" but is ",77,20,39,b9));
HXDLIN( 532)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::BigIntImpl_obj::add(m,n);
HXDLIN( 532)			::String _hx_tmp25 = ::thx::bigint::BigIntImpl_obj::toString(this3);
HXDLIN( 532)			::utest::Assert_obj::isTrue(_hx_tmp18,(_hx_tmp24 + _hx_tmp25),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),532,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 534)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::BigIntImpl_obj::subtract(m,n);
HXDLIN( 534)			Bool _hx_tmp26 = ::thx::bigint::BigIntImpl_obj::isZero(this4);
HXDLIN( 534)			::String _hx_tmp27 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 534)			::String _hx_tmp28 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp27) + HX_("-",2d,00,00,00));
HXDLIN( 534)			::String _hx_tmp29 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 534)			::String _hx_tmp30 = ((_hx_tmp28 + _hx_tmp29) + HX_("==0 but is ",47,ef,3a,cd));
HXDLIN( 534)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::BigIntImpl_obj::subtract(m,n);
HXDLIN( 534)			::String _hx_tmp31 = ::thx::bigint::BigIntImpl_obj::toString(this5);
HXDLIN( 534)			::utest::Assert_obj::isTrue(_hx_tmp26,(_hx_tmp30 + _hx_tmp31),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),534,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 535)			::Dynamic _hx_tmp32 = ::thx::bigint::BigIntImpl_obj::subtract(m,n);
HXDLIN( 535)			Bool _hx_tmp33 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp32,::thx::bigint::Bigs_obj::fromInt((int)0));
HXDLIN( 535)			::String _hx_tmp34 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 535)			::String _hx_tmp35 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp34) + HX_(" - ",73,6f,18,00));
HXDLIN( 535)			::String _hx_tmp36 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 535)			::String _hx_tmp37 = ((_hx_tmp35 + _hx_tmp36) + HX_("==0 but is ",47,ef,3a,cd));
HXDLIN( 535)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::BigIntImpl_obj::subtract(m,n);
HXDLIN( 535)			::String _hx_tmp38 = ::thx::bigint::BigIntImpl_obj::toString(this6);
HXDLIN( 535)			::utest::Assert_obj::isTrue(_hx_tmp33,(_hx_tmp37 + _hx_tmp38),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),535,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 536)			Bool _hx_tmp39 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::subtract(s,n),m);
HXDLIN( 536)			::String _hx_tmp40 = ::thx::bigint::BigIntImpl_obj::toString(s);
HXDLIN( 536)			::String _hx_tmp41 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp40) + HX_(" - ",73,6f,18,00));
HXDLIN( 536)			::String _hx_tmp42 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 536)			::String _hx_tmp43 = ((_hx_tmp41 + _hx_tmp42) + HX_(" == ",a0,52,55,15));
HXDLIN( 536)			::String _hx_tmp44 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 536)			::String _hx_tmp45 = ((_hx_tmp43 + _hx_tmp44) + HX_(" but is ",77,20,39,b9));
HXDLIN( 536)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::BigIntImpl_obj::subtract(s,n);
HXDLIN( 536)			::String _hx_tmp46 = ::thx::bigint::BigIntImpl_obj::toString(this7);
HXDLIN( 536)			::utest::Assert_obj::isTrue(_hx_tmp39,(_hx_tmp45 + _hx_tmp46),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),536,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 538)			m = ::thx::bigint::Bigs_obj::parseBase(HX_("99499494949383948405",e7,d4,11,45),(int)10);
HXLINE( 539)			n = ::thx::bigint::Bigs_obj::parseBase(HX_("-472435789789045237084578078029457809342597808204538970",a4,f8,35,8b),(int)10);
HXLINE( 540)			s = ::thx::bigint::Bigs_obj::parseBase(HX_("-472435789789045237084578078029457709843102858820590565",72,d8,0f,a5),(int)10);
HXLINE( 542)			Bool _hx_tmp47 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::add(m,n),s);
HXDLIN( 542)			::String _hx_tmp48 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 542)			::String _hx_tmp49 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp48) + HX_(" + ",b5,6d,18,00));
HXDLIN( 542)			::String _hx_tmp50 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 542)			::String _hx_tmp51 = ((_hx_tmp49 + _hx_tmp50) + HX_(" == ",a0,52,55,15));
HXDLIN( 542)			::String _hx_tmp52 = ::thx::bigint::BigIntImpl_obj::toString(s);
HXDLIN( 542)			::String _hx_tmp53 = ((_hx_tmp51 + _hx_tmp52) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 542)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::BigIntImpl_obj::add(m,n);
HXDLIN( 542)			::String _hx_tmp54 = ::thx::bigint::BigIntImpl_obj::toString(this8);
HXDLIN( 542)			::utest::Assert_obj::isTrue(_hx_tmp47,(_hx_tmp53 + _hx_tmp54),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),542,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 544)			Bool _hx_tmp55 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::subtract(s,n),m);
HXDLIN( 544)			::String _hx_tmp56 = ::thx::bigint::BigIntImpl_obj::toString(s);
HXDLIN( 544)			::String _hx_tmp57 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp56) + HX_(" - ",73,6f,18,00));
HXDLIN( 544)			::String _hx_tmp58 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 544)			::String _hx_tmp59 = ((_hx_tmp57 + _hx_tmp58) + HX_(" == ",a0,52,55,15));
HXDLIN( 544)			::String _hx_tmp60 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 544)			::String _hx_tmp61 = ((_hx_tmp59 + _hx_tmp60) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 544)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::BigIntImpl_obj::subtract(s,n);
HXDLIN( 544)			::String _hx_tmp62 = ::thx::bigint::BigIntImpl_obj::toString(this9);
HXDLIN( 544)			::utest::Assert_obj::isTrue(_hx_tmp55,(_hx_tmp61 + _hx_tmp62),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),544,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 546)			m = ::thx::bigint::Bigs_obj::parseBase(HX_("-1",64,27,00,00),(int)10);
HXLINE( 547)			n = ::thx::bigint::Bigs_obj::parseBase(HX_("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",31,96,57,37),(int)10);
HXLINE( 548)			s = ::thx::bigint::Bigs_obj::parseBase(HX_("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",00,85,e6,5e),(int)10);
HXLINE( 549)			Bool _hx_tmp63 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::add(m,n),s);
HXDLIN( 549)			::String _hx_tmp64 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 549)			::String _hx_tmp65 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp64) + HX_(" + ",b5,6d,18,00));
HXDLIN( 549)			::String _hx_tmp66 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 549)			::String _hx_tmp67 = ((_hx_tmp65 + _hx_tmp66) + HX_(" == ",a0,52,55,15));
HXDLIN( 549)			::String _hx_tmp68 = ::thx::bigint::BigIntImpl_obj::toString(s);
HXDLIN( 549)			::String _hx_tmp69 = ((_hx_tmp67 + _hx_tmp68) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 549)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::BigIntImpl_obj::add(m,n);
HXDLIN( 549)			::String _hx_tmp70 = ::thx::bigint::BigIntImpl_obj::toString(this10);
HXDLIN( 549)			::utest::Assert_obj::isTrue(_hx_tmp63,(_hx_tmp69 + _hx_tmp70),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),549,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 550)			Bool _hx_tmp71 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::subtract(s,n),m);
HXDLIN( 550)			::String _hx_tmp72 = ::thx::bigint::BigIntImpl_obj::toString(s);
HXDLIN( 550)			::String _hx_tmp73 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp72) + HX_(" - ",73,6f,18,00));
HXDLIN( 550)			::String _hx_tmp74 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 550)			::String _hx_tmp75 = ((_hx_tmp73 + _hx_tmp74) + HX_(" == ",a0,52,55,15));
HXDLIN( 550)			::String _hx_tmp76 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 550)			::String _hx_tmp77 = ((_hx_tmp75 + _hx_tmp76) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 550)			HX_VARI_NAME( ::Dynamic,this11,"this") = ::thx::bigint::BigIntImpl_obj::subtract(s,n);
HXDLIN( 550)			::String _hx_tmp78 = ::thx::bigint::BigIntImpl_obj::toString(this11);
HXDLIN( 550)			::utest::Assert_obj::isTrue(_hx_tmp71,(_hx_tmp77 + _hx_tmp78),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),550,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 552)			m = ::thx::bigint::Bigs_obj::parseBase(HX_("1",31,00,00,00),(int)10);
HXLINE( 553)			Bool _hx_tmp79 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::add(m,s),n);
HXDLIN( 553)			::String _hx_tmp80 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 553)			::String _hx_tmp81 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp80) + HX_(" + ",b5,6d,18,00));
HXDLIN( 553)			::String _hx_tmp82 = ::thx::bigint::BigIntImpl_obj::toString(s);
HXDLIN( 553)			::String _hx_tmp83 = ((_hx_tmp81 + _hx_tmp82) + HX_(" == ",a0,52,55,15));
HXDLIN( 553)			::String _hx_tmp84 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 553)			::String _hx_tmp85 = ((_hx_tmp83 + _hx_tmp84) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 553)			HX_VARI_NAME( ::Dynamic,this12,"this") = ::thx::bigint::BigIntImpl_obj::add(m,s);
HXDLIN( 553)			::String _hx_tmp86 = ::thx::bigint::BigIntImpl_obj::toString(this12);
HXDLIN( 553)			::utest::Assert_obj::isTrue(_hx_tmp79,(_hx_tmp85 + _hx_tmp86),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),553,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 554)			Bool _hx_tmp87 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::subtract(n,s),m);
HXDLIN( 554)			::String _hx_tmp88 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 554)			::String _hx_tmp89 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp88) + HX_(" - ",73,6f,18,00));
HXDLIN( 554)			::String _hx_tmp90 = ::thx::bigint::BigIntImpl_obj::toString(s);
HXDLIN( 554)			::String _hx_tmp91 = ((_hx_tmp89 + _hx_tmp90) + HX_(" == ",a0,52,55,15));
HXDLIN( 554)			::String _hx_tmp92 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 554)			::String _hx_tmp93 = ((_hx_tmp91 + _hx_tmp92) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 554)			HX_VARI_NAME( ::Dynamic,this13,"this") = ::thx::bigint::BigIntImpl_obj::subtract(n,s);
HXDLIN( 554)			::String _hx_tmp94 = ::thx::bigint::BigIntImpl_obj::toString(this13);
HXDLIN( 554)			::utest::Assert_obj::isTrue(_hx_tmp87,(_hx_tmp93 + _hx_tmp94),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),554,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
HXLINE( 555)			Bool _hx_tmp95 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::subtract(n,m),s);
HXDLIN( 555)			::String _hx_tmp96 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 555)			::String _hx_tmp97 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp96) + HX_(" - ",73,6f,18,00));
HXDLIN( 555)			::String _hx_tmp98 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 555)			::String _hx_tmp99 = ((_hx_tmp97 + _hx_tmp98) + HX_(" == ",a0,52,55,15));
HXDLIN( 555)			::String _hx_tmp100 = ::thx::bigint::BigIntImpl_obj::toString(s);
HXDLIN( 555)			::String _hx_tmp101 = ((_hx_tmp99 + _hx_tmp100) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 555)			HX_VARI_NAME( ::Dynamic,this14,"this") = ::thx::bigint::BigIntImpl_obj::subtract(n,m);
HXDLIN( 555)			::String _hx_tmp102 = ::thx::bigint::BigIntImpl_obj::toString(this14);
HXDLIN( 555)			::utest::Assert_obj::isTrue(_hx_tmp95,(_hx_tmp101 + _hx_tmp102),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),555,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testAddition",6e,93,46,1b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testAddition,(void))

void TestBigInt_obj::testMultiplication(){
            	HX_STACK_FRAME("thx.TestBigInt","testMultiplication",0xcf88113b,"thx.TestBigInt.testMultiplication","thx/TestBigInt.hx",559,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 559)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 559)		HX_VARI( Int,_g) = this->x;
HXDLIN( 559)		while((_g1 < _g)){
HXLINE( 559)			++_g1;
HXLINE( 560)			HX_VAR( ::Dynamic,a);
HXLINE( 561)			HX_VAR( ::Dynamic,b);
HXLINE( 562)			HX_VAR( ::Dynamic,m);
HXLINE( 564)			a = ::thx::bigint::Bigs_obj::fromInt((int)12347);
HXDLIN( 564)			b = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXLINE( 565)			Bool _hx_tmp = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::multiply(a,b),b);
HXDLIN( 565)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),565,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplication",78,fc,b5,a0)));
HXLINE( 566)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::multiply(b,a),b);
HXDLIN( 566)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),566,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplication",78,fc,b5,a0)));
HXLINE( 568)			a = ::thx::bigint::Bigs_obj::fromInt((int)-99999);
HXDLIN( 568)			b = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXLINE( 569)			Bool _hx_tmp2 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::multiply(a,b),a);
HXDLIN( 569)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),569,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplication",78,fc,b5,a0)));
HXLINE( 570)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::multiply(b,a),a);
HXDLIN( 570)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),570,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplication",78,fc,b5,a0)));
HXLINE( 572)			a = ::thx::bigint::Bigs_obj::fromInt((int)1235);
HXDLIN( 572)			b = ::thx::bigint::Bigs_obj::fromInt((int)44);
HXDLIN( 572)			m = ::thx::bigint::Bigs_obj::fromInt((int)54340);
HXLINE( 573)			Bool _hx_tmp4 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::multiply(a,b),m);
HXDLIN( 573)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),573,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplication",78,fc,b5,a0)));
HXLINE( 574)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::multiply(b,a),m);
HXDLIN( 574)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),574,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplication",78,fc,b5,a0)));
HXLINE( 576)			a = ::thx::bigint::Bigs_obj::fromInt((int)-11);
HXDLIN( 576)			b = ::thx::bigint::Bigs_obj::fromInt((int)-9);
HXDLIN( 576)			m = ::thx::bigint::Bigs_obj::fromInt((int)99);
HXLINE( 577)			Bool _hx_tmp6 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::multiply(a,b),m);
HXDLIN( 577)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),577,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplication",78,fc,b5,a0)));
HXLINE( 579)			a = ::thx::bigint::Bigs_obj::fromInt((int)55);
HXDLIN( 579)			b = ::thx::bigint::Bigs_obj::fromInt((int)200395);
HXDLIN( 579)			m = ::thx::bigint::Bigs_obj::fromInt((int)11021725);
HXLINE( 580)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::multiply(a,b),m);
HXDLIN( 580)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),580,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplication",78,fc,b5,a0)));
HXLINE( 582)			a = ::thx::bigint::Bigs_obj::parseBase(HX_("111111111111111111111111111111111111111",91,75,02,b1),(int)10);
HXLINE( 583)			b = ::thx::bigint::Bigs_obj::parseBase(HX_("-333333333333333333333",a6,84,58,c5),(int)10);
HXLINE( 584)			m = ::thx::bigint::Bigs_obj::parseBase(HX_("-37037037037037037036999999999999999999962962962962962962963",a6,93,8b,ce),(int)10);
HXLINE( 586)			Bool _hx_tmp8 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::multiply(a,b),m);
HXDLIN( 586)			::String _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::toString(a);
HXDLIN( 586)			::String _hx_tmp10 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp9) + HX_(" * ",d6,6c,18,00));
HXDLIN( 586)			::String _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::toString(b);
HXDLIN( 586)			::String _hx_tmp12 = ((_hx_tmp10 + _hx_tmp11) + HX_(" == ",a0,52,55,15));
HXDLIN( 586)			::String _hx_tmp13 = ::thx::bigint::BigIntImpl_obj::toString(m);
HXDLIN( 586)			::String _hx_tmp14 = ((_hx_tmp12 + _hx_tmp13) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 586)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::BigIntImpl_obj::multiply(a,b);
HXDLIN( 586)			::String _hx_tmp15 = ::thx::bigint::BigIntImpl_obj::toString(this1);
HXDLIN( 586)			::utest::Assert_obj::isTrue(_hx_tmp8,(_hx_tmp14 + _hx_tmp15),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),586,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testMultiplication",78,fc,b5,a0)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testMultiplication,(void))

void TestBigInt_obj::testComparison(){
            	HX_STACK_FRAME("thx.TestBigInt","testComparison",0xfba7797e,"thx.TestBigInt.testComparison","thx/TestBigInt.hx",590,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 590)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 590)		HX_VARI( Int,_g) = this->x;
HXDLIN( 590)		while((_g1 < _g)){
HXLINE( 590)			++_g1;
HXLINE( 591)			HX_VARI( ::Dynamic,a) = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN( 591)			HX_VARI( ::Dynamic,b) = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXLINE( 593)			Bool _hx_tmp = ::thx::_BigInt::BigInt_Impl__obj::less(a,b);
HXDLIN( 593)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),593,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 594)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::lessEquals(a,b);
HXDLIN( 594)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),594,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 595)			Bool _hx_tmp2 = ::thx::_BigInt::BigInt_Impl__obj::lessEquals(a,a);
HXDLIN( 595)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),595,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 597)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::greater(b,a);
HXDLIN( 597)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),597,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 598)			Bool _hx_tmp4 = ::thx::_BigInt::BigInt_Impl__obj::greaterEquals(b,a);
HXDLIN( 598)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),598,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 599)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::greaterEquals(b,b);
HXDLIN( 599)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),599,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 600)			Bool _hx_tmp6 = ::thx::_BigInt::BigInt_Impl__obj::lessEquals(b,b);
HXDLIN( 600)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),600,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 602)			Int _hx_tmp7 = ::thx::bigint::BigIntImpl_obj::compareTo(a,b);
HXDLIN( 602)			::utest::Assert_obj::equals((int)-1,_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),602,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 603)			Int _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::compareTo(b,a);
HXDLIN( 603)			::utest::Assert_obj::equals((int)1,_hx_tmp8,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),603,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 604)			Int _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::compareTo(b,b);
HXDLIN( 604)			::utest::Assert_obj::equals((int)0,_hx_tmp9,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),604,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 606)			a = ::thx::bigint::Bigs_obj::parseBase(HX_("-333333333333333333333",a6,84,58,c5),(int)10);
HXLINE( 607)			b = ::thx::bigint::Bigs_obj::parseBase(HX_("111111111111111111111111111111111111111",91,75,02,b1),(int)10);
HXLINE( 609)			Bool _hx_tmp10 = ::thx::_BigInt::BigInt_Impl__obj::less(a,b);
HXDLIN( 609)			::String _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::toString(a);
HXDLIN( 609)			::String _hx_tmp12 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp11) + HX_(" < ",84,7c,18,00));
HXDLIN( 609)			::String _hx_tmp13 = ::thx::bigint::BigIntImpl_obj::toString(b);
HXDLIN( 609)			::String _hx_tmp14 = ((_hx_tmp12 + _hx_tmp13) + HX_(" == true but it is ",32,aa,dd,3b));
HXDLIN( 609)			Bool _hx_tmp15 = ::thx::_BigInt::BigInt_Impl__obj::less(a,b);
HXDLIN( 609)			::String _hx_tmp16 = ::Std_obj::string(_hx_tmp15);
HXDLIN( 609)			::utest::Assert_obj::isTrue(_hx_tmp10,(_hx_tmp14 + _hx_tmp16),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),609,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 610)			Bool _hx_tmp17 = ::thx::_BigInt::BigInt_Impl__obj::lessEquals(a,b);
HXDLIN( 610)			::String _hx_tmp18 = ::thx::bigint::BigIntImpl_obj::toString(a);
HXDLIN( 610)			::String _hx_tmp19 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp18) + HX_(" <= ",5f,90,54,15));
HXDLIN( 610)			::String _hx_tmp20 = ::thx::bigint::BigIntImpl_obj::toString(b);
HXDLIN( 610)			::String _hx_tmp21 = ((_hx_tmp19 + _hx_tmp20) + HX_(" == true but it is ",32,aa,dd,3b));
HXDLIN( 610)			Bool _hx_tmp22 = ::thx::_BigInt::BigInt_Impl__obj::lessEquals(a,b);
HXDLIN( 610)			::String _hx_tmp23 = ::Std_obj::string(_hx_tmp22);
HXDLIN( 610)			::utest::Assert_obj::isTrue(_hx_tmp17,(_hx_tmp21 + _hx_tmp23),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),610,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 611)			Bool _hx_tmp24 = ::thx::_BigInt::BigInt_Impl__obj::lessEquals(a,a);
HXDLIN( 611)			::utest::Assert_obj::isTrue(_hx_tmp24,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),611,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 613)			Bool _hx_tmp25 = ::thx::_BigInt::BigInt_Impl__obj::greater(b,a);
HXDLIN( 613)			::utest::Assert_obj::isTrue(_hx_tmp25,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),613,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 614)			Bool _hx_tmp26 = ::thx::_BigInt::BigInt_Impl__obj::greaterEquals(b,a);
HXDLIN( 614)			::utest::Assert_obj::isTrue(_hx_tmp26,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),614,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 615)			Bool _hx_tmp27 = ::thx::_BigInt::BigInt_Impl__obj::greaterEquals(b,b);
HXDLIN( 615)			::utest::Assert_obj::isTrue(_hx_tmp27,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),615,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 616)			Bool _hx_tmp28 = ::thx::_BigInt::BigInt_Impl__obj::lessEquals(b,b);
HXDLIN( 616)			::utest::Assert_obj::isTrue(_hx_tmp28,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),616,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 618)			Int _hx_tmp29 = ::thx::bigint::BigIntImpl_obj::compareTo(a,b);
HXDLIN( 618)			::String _hx_tmp30 = ::thx::bigint::BigIntImpl_obj::toString(a);
HXDLIN( 618)			::String _hx_tmp31 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp30) + HX_(".compareTo(",56,80,9d,36));
HXDLIN( 618)			::String _hx_tmp32 = ::thx::bigint::BigIntImpl_obj::toString(b);
HXDLIN( 618)			::String _hx_tmp33 = ((_hx_tmp31 + _hx_tmp32) + HX_(") t0 be -1 but it is ",4c,5b,a0,2b));
HXDLIN( 618)			Int _hx_tmp34 = ::thx::bigint::BigIntImpl_obj::compareTo(a,b);
HXDLIN( 618)			::utest::Assert_obj::equals((int)-1,_hx_tmp29,(_hx_tmp33 + _hx_tmp34),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),618,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 619)			Int _hx_tmp35 = ::thx::bigint::BigIntImpl_obj::compareTo(b,a);
HXDLIN( 619)			::utest::Assert_obj::equals((int)1,_hx_tmp35,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),619,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 620)			Int _hx_tmp36 = ::thx::bigint::BigIntImpl_obj::compareTo(b,b);
HXDLIN( 620)			::utest::Assert_obj::equals((int)0,_hx_tmp36,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),620,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 622)			a = ::thx::bigint::Bigs_obj::parseBase(HX_("-37037037037037037036999999999999999999962962962962962962963",a6,93,8b,ce),(int)10);
HXLINE( 623)			b = ::thx::bigint::Bigs_obj::parseBase(HX_("-333333333333333333333",a6,84,58,c5),(int)10);
HXLINE( 625)			Bool _hx_tmp37 = ::thx::_BigInt::BigInt_Impl__obj::less(a,b);
HXDLIN( 625)			::utest::Assert_obj::isTrue(_hx_tmp37,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),625,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 626)			Bool _hx_tmp38 = ::thx::_BigInt::BigInt_Impl__obj::lessEquals(a,b);
HXDLIN( 626)			::utest::Assert_obj::isTrue(_hx_tmp38,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),626,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 627)			Bool _hx_tmp39 = ::thx::_BigInt::BigInt_Impl__obj::lessEquals(a,a);
HXDLIN( 627)			::utest::Assert_obj::isTrue(_hx_tmp39,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),627,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 629)			Bool _hx_tmp40 = ::thx::_BigInt::BigInt_Impl__obj::greater(b,a);
HXDLIN( 629)			::utest::Assert_obj::isTrue(_hx_tmp40,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),629,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 630)			Bool _hx_tmp41 = ::thx::_BigInt::BigInt_Impl__obj::greaterEquals(b,a);
HXDLIN( 630)			::utest::Assert_obj::isTrue(_hx_tmp41,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),630,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 631)			Bool _hx_tmp42 = ::thx::_BigInt::BigInt_Impl__obj::greaterEquals(b,b);
HXDLIN( 631)			::utest::Assert_obj::isTrue(_hx_tmp42,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),631,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 632)			Bool _hx_tmp43 = ::thx::_BigInt::BigInt_Impl__obj::lessEquals(b,b);
HXDLIN( 632)			::utest::Assert_obj::isTrue(_hx_tmp43,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),632,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 634)			Int _hx_tmp44 = ::thx::bigint::BigIntImpl_obj::compareTo(a,b);
HXDLIN( 634)			::utest::Assert_obj::equals((int)-1,_hx_tmp44,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),634,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 635)			Int _hx_tmp45 = ::thx::bigint::BigIntImpl_obj::compareTo(b,a);
HXDLIN( 635)			::utest::Assert_obj::equals((int)1,_hx_tmp45,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),635,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 636)			Int _hx_tmp46 = ::thx::bigint::BigIntImpl_obj::compareTo(a,a);
HXDLIN( 636)			::utest::Assert_obj::equals((int)0,_hx_tmp46,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),636,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 637)			Int _hx_tmp47 = ::thx::bigint::BigIntImpl_obj::compareTo(b,b);
HXDLIN( 637)			::utest::Assert_obj::equals((int)0,_hx_tmp47,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),637,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testComparison",3b,c2,55,b1)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testComparison,(void))

void TestBigInt_obj::testNegation(){
            	HX_STACK_FRAME("thx.TestBigInt","testNegation",0x2f03975a,"thx.TestBigInt.testNegation","thx/TestBigInt.hx",641,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 641)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 641)		HX_VARI( Int,_g) = this->x;
HXDLIN( 641)		while((_g1 < _g)){
HXLINE( 641)			++_g1;
HXLINE( 642)			HX_VAR( ::Dynamic,m);
HXLINE( 643)			HX_VARI( ::Dynamic,n) = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXLINE( 647)			Bool _hx_tmp = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::negate(n),n);
HXDLIN( 647)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::BigIntImpl_obj::negate(n);
HXDLIN( 647)			::String _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::toString(this1);
HXDLIN( 647)			::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" == ",a0,52,55,15));
HXDLIN( 647)			::String _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::toString(n);
HXDLIN( 647)			::utest::Assert_obj::isTrue(_hx_tmp,(_hx_tmp2 + _hx_tmp3),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),647,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNegation",d7,46,49,c4)));
HXLINE( 649)			n = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXLINE( 650)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::negate(n);
HXDLIN( 650)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 650)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),650,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNegation",d7,46,49,c4)));
HXLINE( 651)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::BigIntImpl_obj::negate(n);
HXDLIN( 651)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::negate(this2);
HXDLIN( 651)			Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp6,n);
HXDLIN( 651)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),651,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNegation",d7,46,49,c4)));
HXLINE( 653)			n = ::thx::bigint::Bigs_obj::fromInt((int)-1234);
HXLINE( 654)			::Dynamic _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::negate(n);
HXDLIN( 654)			Bool _hx_tmp9 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp8,::thx::bigint::Bigs_obj::fromInt((int)1234));
HXDLIN( 654)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),654,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNegation",d7,46,49,c4)));
HXLINE( 655)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::BigIntImpl_obj::negate(n);
HXDLIN( 655)			::Dynamic _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::negate(this3);
HXDLIN( 655)			Bool _hx_tmp11 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp10,n);
HXDLIN( 655)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),655,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNegation",d7,46,49,c4)));
HXLINE( 657)			m = ::thx::bigint::Bigs_obj::parseBase(HX_("192395858359234934684359234",06,6b,b8,12),(int)10);
HXLINE( 658)			n = ::thx::bigint::Bigs_obj::parseBase(HX_("-192395858359234934684359234",f9,05,97,de),(int)10);
HXLINE( 659)			Bool _hx_tmp12 = ::thx::_BigInt::BigInt_Impl__obj::equals(::thx::bigint::BigIntImpl_obj::negate(m),n);
HXDLIN( 659)			::utest::Assert_obj::isTrue(_hx_tmp12,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),659,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNegation",d7,46,49,c4)));
HXLINE( 660)			Bool _hx_tmp13 = ::thx::_BigInt::BigInt_Impl__obj::equals(m,::thx::bigint::BigIntImpl_obj::negate(n));
HXDLIN( 660)			::utest::Assert_obj::isTrue(_hx_tmp13,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),660,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testNegation",d7,46,49,c4)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testNegation,(void))

void TestBigInt_obj::testBigIntParsesNumbersCorrectly(){
            	HX_STACK_FRAME("thx.TestBigInt","testBigIntParsesNumbersCorrectly",0xe58a6e71,"thx.TestBigInt.testBigIntParsesNumbersCorrectly","thx/TestBigInt.hx",664,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 664)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 664)		HX_VARI( Int,_g) = this->x;
HXDLIN( 664)		while((_g1 < _g)){
HXLINE( 664)			++_g1;
HXLINE( 665)			::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::parseBase(HX_("10",df,2a,00,00),(int)2);
HXDLIN( 665)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)2));
HXDLIN( 665)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),665,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntParsesNumbersCorrectly",6e,aa,12,07)));
HXLINE( 666)			::Dynamic _hx_tmp2 = ::thx::bigint::Bigs_obj::parseBase(HX_("FF",40,3d,00,00),(int)16);
HXDLIN( 666)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)255));
HXDLIN( 666)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),666,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntParsesNumbersCorrectly",6e,aa,12,07)));
HXLINE( 667)			::Dynamic _hx_tmp4 = ::thx::bigint::Bigs_obj::parseBase(HX_("111100001111",80,2f,0e,e9),(int)2);
HXDLIN( 667)			Bool _hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)3855));
HXDLIN( 667)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("111100001111",80,2f,0e,e9),(int)2);
HXDLIN( 667)			::String _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::toString(this1);
HXDLIN( 667)			::String _hx_tmp7 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp6) + HX_(" == ",a0,52,55,15));
HXDLIN( 667)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)3855);
HXDLIN( 667)			::String _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::toString(this2);
HXDLIN( 667)			::utest::Assert_obj::isTrue(_hx_tmp5,(_hx_tmp7 + _hx_tmp8),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),667,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntParsesNumbersCorrectly",6e,aa,12,07)));
HXLINE( 669)			::Dynamic _hx_tmp9 = ::thx::bigint::Bigs_obj::parseBase(HX_("-1",64,27,00,00),(int)16);
HXDLIN( 669)			Bool _hx_tmp10 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp9,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 669)			::utest::Assert_obj::isTrue(_hx_tmp10,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),669,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntParsesNumbersCorrectly",6e,aa,12,07)));
HXLINE( 670)			::Dynamic _hx_tmp11 = ::thx::bigint::Bigs_obj::parseBase(HX_("306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000",1a,a7,3f,0d),(int)10);
HXDLIN( 670)			Bool _hx_tmp12 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp11,::thx::bigint::Bigs_obj::parseBase(HX_("9822997e35bb99bcf103a64299aa92b8446ab93879fba53349f1626f3c8f78a4ee1d8d9e7562538f8e374fdf64c8eff7481c63cde5ca9821abfb3df6fb3e2489d2f85d34cf347f3e89191a19cc6b6b8072a976a8f1bcf68d20f18a1c0efb023252ba2d0961428a5c282d2645f3f7fa160f7f84aca88e40a74066c4a787bed7d0082f7e45b1ffee532715f56bd5f8168eaf7eaae112ed1316371f047692631e70e6b85b290ef063845b364dad7e10b9deb9fcfb708f83b7c3c6b82ce16eb0034c030b332a58d637a7b547fd0527051d7de9e5004db2ea2bd75f5c5a280a1a9b93c3c83373b6dcf1b65c01197096e97d13076b6613bc2ebf47c91fbe1aefeea966134bfbbf5f850320f0f0c2d88888bd82d118a6aaf8df2b092cf5456eff7e209feb476bf3c01d6d2e7ca0b9f40d83b107b4def92f2927cf0a1bb6190c67a4da91478709262ed1f1ecb77fbaf1197ac238c246a63a697f51e8d539f850e790137e7fce5f764896fdfb4fc3787520608f0400e72aeea5737c36304c6887ec1a174564ecec63a57b1e0946dc311dd3aea7bfae197ff9c7fcbf17c97d9db303d231702ef502dde1b53896196dc2e5d30b2b6ec58fc3744f4de08109eb99aa9f22ffe2f12f3953f516f91d35a8852aff4a19e250410fbd8dbcdae99f92f88e2f94341fc1ecdff32733d194c0541f708a72c5b4c03e5515e1086d0903addca0e172968ff1dee87bbd4fee679e2ee5a52975807ae7212cc2a33e0821e2d9b44eaa7dc29536a94c6597eda41bdd1e5e618e7b388b53d38ef9542523bce888738db46c6706c3ee82cbc3655408071e9e422a44d309e3cfd31ec2135ee0cba32b0c6721c8bee4d076543b71c35a06087a007c14e51d1f0c4d0aa9aa0751dfd3776d2357a010e6b147aca40c7b669291e6defbf5ca77505c960f14b330e6c90dc2539431329ef78a1e9f26b2ead7d28a622e6b586bcee22bd0a495442c6a1235588988252cbd4d36975560fb8e7e5c8cf06f29aeb68659c5cb4cf8d011375b00000000000000000000000000000000000000000000000000000000000000000000000000",1e,35,70,48),(int)16));
HXDLIN( 670)			::utest::Assert_obj::isTrue(_hx_tmp12,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),670,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntParsesNumbersCorrectly",6e,aa,12,07)));
HXLINE( 671)			::Dynamic _hx_tmp13 = ::thx::bigint::Bigs_obj::parseBase(HX_("9223372036854775808",63,43,ff,e4),(int)10);
HXDLIN( 671)			Bool _hx_tmp14 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp13,::thx::bigint::Bigs_obj::parseBase(HX_("1000000000000000000000000000000000000000000000000000000000000000",1f,b3,7a,af),(int)2));
HXDLIN( 671)			::utest::Assert_obj::isTrue(_hx_tmp14,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),671,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntParsesNumbersCorrectly",6e,aa,12,07)));
HXLINE( 672)			::Dynamic _hx_tmp15 = ::thx::bigint::Bigs_obj::parseBase(HX_("324AFCCC342342333CCD239998881232324AFCCC342342333CCD239998881232",b4,4d,c0,26),(int)16);
HXDLIN( 672)			Bool _hx_tmp16 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp15,::thx::bigint::Bigs_obj::parseBase(HX_("22748133857356174891035811692236022265357659892433333914058690475216129757746",29,81,b7,50),(int)10));
HXDLIN( 672)			::utest::Assert_obj::isTrue(_hx_tmp16,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),672,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntParsesNumbersCorrectly",6e,aa,12,07)));
HXLINE( 673)			::Dynamic _hx_tmp17 = ::thx::bigint::Bigs_obj::parseBase(HX_("234345345345",41,90,54,4b),(int)10);
HXDLIN( 673)			Bool _hx_tmp18 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp17,::thx::bigint::Bigs_obj::parseBase(HX_("3690123141",b6,a1,64,d9),(int)16));
HXDLIN( 673)			::utest::Assert_obj::isTrue(_hx_tmp18,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),673,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntParsesNumbersCorrectly",6e,aa,12,07)));
HXLINE( 674)			::Dynamic _hx_tmp19 = ::thx::bigint::Bigs_obj::parseBase(HX_("-10",4c,50,22,00),(int)16);
HXDLIN( 674)			Bool _hx_tmp20 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp19,::thx::bigint::Bigs_obj::parseBase(HX_("-16",52,50,22,00),(int)10));
HXDLIN( 674)			::utest::Assert_obj::isTrue(_hx_tmp20,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),674,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntParsesNumbersCorrectly",6e,aa,12,07)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testBigIntParsesNumbersCorrectly,(void))

void TestBigInt_obj::testBigIntOutputsNumbersCorrectly(){
            	HX_STACK_FRAME("thx.TestBigInt","testBigIntOutputsNumbersCorrectly",0xbd58d99b,"thx.TestBigInt.testBigIntOutputsNumbersCorrectly","thx/TestBigInt.hx",678,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 678)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 678)		HX_VARI( Int,_g) = this->x;
HXDLIN( 678)		while((_g1 < _g)){
HXLINE( 678)			++_g1;
HXLINE( 679)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("366900685503779409298642816707647664013657589336",94,b5,0e,75),(int)10);
HXDLIN( 679)			::String _hx_tmp = ::thx::bigint::BigIntImpl_obj::toStringWithBase(this1,(int)16);
HXDLIN( 679)			::utest::Assert_obj::isTrue((_hx_tmp == HX_("4044654fce69424a651af2825b37124c25094658",84,6c,13,60)),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),679,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntOutputsNumbersCorrectly",fe,1a,05,f3)));
HXLINE( 680)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("111111111111111111111111111111111111111111111111111111",a0,0d,17,fd),(int)2);
HXDLIN( 680)			::String _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::toStringWithBase(this2,(int)2);
HXDLIN( 680)			::utest::Assert_obj::isTrue((_hx_tmp1 == HX_("111111111111111111111111111111111111111111111111111111",a0,0d,17,fd)),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),680,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntOutputsNumbersCorrectly",fe,1a,05,f3)));
HXLINE( 681)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("secretmessage000",39,71,82,c2),(int)36);
HXDLIN( 681)			::String _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::toStringWithBase(this3,(int)36);
HXDLIN( 681)			::utest::Assert_obj::isTrue((_hx_tmp2 == HX_("secretmessage000",39,71,82,c2)),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),681,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntOutputsNumbersCorrectly",fe,1a,05,f3)));
HXLINE( 682)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-256);
HXDLIN( 682)			::String _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::toStringWithBase(this4,(int)16);
HXDLIN( 682)			::utest::Assert_obj::isTrue((_hx_tmp3 == HX_("-100",64,f2,e3,1d)),null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),682,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBigIntOutputsNumbersCorrectly",fe,1a,05,f3)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testBigIntOutputsNumbersCorrectly,(void))

void TestBigInt_obj::testShiftingLeftAndRight(){
            	HX_STACK_FRAME("thx.TestBigInt","testShiftingLeftAndRight",0xbadca4e1,"thx.TestBigInt.testShiftingLeftAndRight","thx/TestBigInt.hx",686,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 686)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 686)		HX_VARI( Int,_g) = this->x;
HXDLIN( 686)		while((_g1 < _g)){
HXLINE( 686)			++_g1;
HXLINE( 687)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-5);
HXDLIN( 687)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::shiftRight(this1,(int)2);
HXDLIN( 687)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)-2));
HXDLIN( 687)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),687,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testShiftingLeftAndRight",de,1b,6a,48)));
HXLINE( 688)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)5);
HXDLIN( 688)			::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::shiftRight(this2,(int)-2);
HXDLIN( 688)			Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp2,::thx::bigint::Bigs_obj::fromInt((int)20));
HXDLIN( 688)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)5);
HXDLIN( 688)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::BigIntImpl_obj::shiftRight(this3,(int)-2);
HXDLIN( 688)			::String _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::toString(this4);
HXDLIN( 688)			::utest::Assert_obj::isTrue(_hx_tmp3,((HX_("expected ",a8,7a,f8,e9) + _hx_tmp4) + HX_(" == 20",5e,66,47,13)),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),688,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testShiftingLeftAndRight",de,1b,6a,48)));
HXLINE( 689)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::fromInt((int)5);
HXDLIN( 689)			::Dynamic _hx_tmp5 = ::thx::bigint::BigIntImpl_obj::shiftLeft(this5,(int)-2);
HXDLIN( 689)			Bool _hx_tmp6 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp5,::thx::bigint::Bigs_obj::fromInt((int)1));
HXDLIN( 689)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),689,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testShiftingLeftAndRight",de,1b,6a,48)));
HXLINE( 690)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1024);
HXDLIN( 690)			::Dynamic _hx_tmp7 = ::thx::bigint::BigIntImpl_obj::shiftLeft(this6,(int)100);
HXDLIN( 690)			Bool _hx_tmp8 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp7,::thx::bigint::Bigs_obj::parseBase(HX_("1298074214633706907132624082305024",4b,fe,49,cd),(int)10));
HXDLIN( 690)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1024);
HXDLIN( 690)			::String _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::toString(this7);
HXDLIN( 690)			::String _hx_tmp10 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp9) + HX_(".shiftLeft(100) == ",45,0e,2b,5a));
HXDLIN( 690)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1298074214633706907132624082305024",4b,fe,49,cd),(int)10);
HXDLIN( 690)			::String _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::toString(this8);
HXDLIN( 690)			::String _hx_tmp12 = ((_hx_tmp10 + _hx_tmp11) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 690)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::Bigs_obj::fromInt((int)1024);
HXDLIN( 690)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::BigIntImpl_obj::shiftLeft(this9,(int)100);
HXDLIN( 690)			::String _hx_tmp13 = ::thx::bigint::BigIntImpl_obj::toString(this10);
HXDLIN( 690)			::utest::Assert_obj::isTrue(_hx_tmp8,(_hx_tmp12 + _hx_tmp13),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),690,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testShiftingLeftAndRight",de,1b,6a,48)));
HXLINE( 691)			HX_VARI_NAME( ::Dynamic,this11,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("2596148429267413814265248164610049",38,6a,39,54),(int)10);
HXDLIN( 691)			::Dynamic _hx_tmp14 = ::thx::bigint::BigIntImpl_obj::shiftRight(this11,(int)100);
HXDLIN( 691)			Bool _hx_tmp15 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp14,::thx::bigint::Bigs_obj::fromInt((int)2048));
HXDLIN( 691)			::utest::Assert_obj::isTrue(_hx_tmp15,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),691,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testShiftingLeftAndRight",de,1b,6a,48)));
HXLINE( 692)			HX_VARI_NAME( ::Dynamic,this12,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("8589934592",32,06,e4,cb),(int)10);
HXDLIN( 692)			::Dynamic _hx_tmp16 = ::thx::bigint::BigIntImpl_obj::shiftRight(this12,(int)-50);
HXDLIN( 692)			Bool _hx_tmp17 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp16,::thx::bigint::Bigs_obj::parseBase(HX_("9671406556917033397649408",8e,e9,16,59),(int)10));
HXDLIN( 692)			::utest::Assert_obj::isTrue(_hx_tmp17,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),692,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testShiftingLeftAndRight",de,1b,6a,48)));
HXLINE( 693)			HX_VARI_NAME( ::Dynamic,this13,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("38685626227668133590597632",6a,cc,0d,c1),(int)10);
HXDLIN( 693)			::Dynamic _hx_tmp18 = ::thx::bigint::BigIntImpl_obj::shiftLeft(this13,(int)-50);
HXDLIN( 693)			Bool _hx_tmp19 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp18,::thx::bigint::Bigs_obj::parseBase(HX_("34359738368",ef,f6,7b,5b),(int)10));
HXDLIN( 693)			::utest::Assert_obj::isTrue(_hx_tmp19,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),693,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testShiftingLeftAndRight",de,1b,6a,48)));
HXLINE( 694)			HX_VARI_NAME( ::Dynamic,this14,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1",64,27,00,00),(int)10);
HXDLIN( 694)			::Dynamic _hx_tmp20 = ::thx::bigint::BigIntImpl_obj::shiftRight(this14,(int)25);
HXDLIN( 694)			Bool _hx_tmp21 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp20,::thx::bigint::Bigs_obj::fromInt((int)-1));
HXDLIN( 694)			::utest::Assert_obj::isTrue(_hx_tmp21,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),694,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testShiftingLeftAndRight",de,1b,6a,48)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testShiftingLeftAndRight,(void))

void TestBigInt_obj::testBitwiseOperations(){
            	HX_STACK_FRAME("thx.TestBigInt","testBitwiseOperations",0x9ce814a8,"thx.TestBigInt.testBitwiseOperations","thx/TestBigInt.hx",698,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 698)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 698)		HX_VARI( Int,_g) = this->x;
HXDLIN( 698)		while((_g1 < _g)){
HXLINE( 698)			++_g1;
HXLINE( 699)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("435783453",36,80,f6,37),(int)10);
HXDLIN( 699)			HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::parseBase(HX_("902345074",14,75,9d,48),(int)10);
HXDLIN( 699)			::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::_hx_and(this1,that);
HXDLIN( 699)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::parseBase(HX_("298352912",5b,21,bc,11),(int)10));
HXDLIN( 699)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("435783453",36,80,f6,37),(int)10);
HXDLIN( 699)			HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("902345074",14,75,9d,48),(int)10);
HXDLIN( 699)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::BigIntImpl_obj::_hx_and(this2,that1);
HXDLIN( 699)			::String _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::toString(this3);
HXDLIN( 699)			::utest::Assert_obj::isTrue(_hx_tmp1,((HX_("expected ",a8,7a,f8,e9) + _hx_tmp2) + HX_(" to be 298352912",63,c2,53,a7)),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),699,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
HXLINE( 700)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("435783453",36,80,f6,37),(int)10);
HXDLIN( 700)			HX_VARI_NAME( ::Dynamic,that2,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("902345074",14,75,9d,48),(int)10);
HXDLIN( 700)			::Dynamic _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::_hx_or(this4,that2);
HXDLIN( 700)			Bool _hx_tmp4 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp3,::thx::bigint::Bigs_obj::parseBase(HX_("1039775615",aa,02,b5,ce),(int)10));
HXDLIN( 700)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),700,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
HXLINE( 701)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("435783453",36,80,f6,37),(int)10);
HXDLIN( 701)			HX_VARI_NAME( ::Dynamic,that3,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("902345074",14,75,9d,48),(int)10);
HXDLIN( 701)			::Dynamic _hx_tmp5 = ::thx::bigint::BigIntImpl_obj::_hx_xor(this5,that3);
HXDLIN( 701)			Bool _hx_tmp6 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp5,::thx::bigint::Bigs_obj::parseBase(HX_("741422703",fa,cd,86,9b),(int)10));
HXDLIN( 701)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),701,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
HXLINE( 702)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("94981987261387596",cc,e8,ae,de),(int)10);
HXDLIN( 702)			::Dynamic _hx_tmp7 = ::thx::bigint::BigIntImpl_obj::_hx_not(this6);
HXDLIN( 702)			Bool _hx_tmp8 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp7,::thx::bigint::Bigs_obj::parseBase(HX_("-94981987261387597",00,e6,3f,1a),(int)10));
HXDLIN( 702)			::utest::Assert_obj::isTrue(_hx_tmp8,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),702,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
HXLINE( 703)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-6931047708307681506",6c,79,46,d5),(int)10);
HXDLIN( 703)			HX_VARI_NAME( ::Dynamic,that4,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("25214903917",95,f3,7a,22),(int)10);
HXDLIN( 703)			::Dynamic _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::_hx_xor(this7,that4);
HXDLIN( 703)			Bool _hx_tmp10 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp9,::thx::bigint::Bigs_obj::parseBase(HX_("-6931047723896018573",9c,dc,24,a4),(int)10));
HXDLIN( 703)			::utest::Assert_obj::isTrue(_hx_tmp10,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),703,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
HXLINE( 704)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-6931047723896018573",9c,dc,24,a4),(int)10);
HXDLIN( 704)			HX_VARI_NAME( ::Dynamic,that5,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("281474976710655",52,bc,f7,7d),(int)10);
HXDLIN( 704)			::Dynamic _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::_hx_and(this8,that5);
HXDLIN( 704)			Bool _hx_tmp12 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp11,::thx::bigint::Bigs_obj::parseBase(HX_("273577603885427",f6,70,ea,b4),(int)10));
HXDLIN( 704)			::utest::Assert_obj::isTrue(_hx_tmp12,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),704,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
HXLINE( 705)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-65",ac,54,22,00),(int)10);
HXDLIN( 705)			HX_VARI_NAME( ::Dynamic,that6,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-42",eb,52,22,00),(int)10);
HXDLIN( 705)			::Dynamic _hx_tmp13 = ::thx::bigint::BigIntImpl_obj::_hx_xor(this9,that6);
HXDLIN( 705)			Bool _hx_tmp14 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp13,::thx::bigint::Bigs_obj::parseBase(HX_("105",76,58,25,00),(int)10));
HXDLIN( 705)			::utest::Assert_obj::isTrue(_hx_tmp14,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),705,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
HXLINE( 706)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("6",36,00,00,00),(int)10);
HXDLIN( 706)			HX_VARI_NAME( ::Dynamic,that7,"that") = ::thx::bigint::Bigs_obj::parseBase(HX_("-3",66,27,00,00),(int)10);
HXDLIN( 706)			::Dynamic _hx_tmp15 = ::thx::bigint::BigIntImpl_obj::_hx_and(this10,that7);
HXDLIN( 706)			Bool _hx_tmp16 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp15,::thx::bigint::Bigs_obj::parseBase(HX_("4",34,00,00,00),(int)10));
HXDLIN( 706)			::utest::Assert_obj::isTrue(_hx_tmp16,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),706,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
HXLINE( 707)			HX_VARI_NAME( ::Dynamic,this11,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("0",30,00,00,00),(int)10);
HXDLIN( 707)			::Dynamic _hx_tmp17 = ::thx::bigint::BigIntImpl_obj::_hx_not(this11);
HXDLIN( 707)			Bool _hx_tmp18 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp17,::thx::bigint::Bigs_obj::parseBase(HX_("-1",64,27,00,00),(int)10));
HXDLIN( 707)			::utest::Assert_obj::isTrue(_hx_tmp18,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),707,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
HXLINE( 708)			HX_VARI_NAME( ::Dynamic,this12,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("13",e2,2a,00,00),(int)10);
HXDLIN( 708)			HX_VARI_NAME( ::Dynamic,that8,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-8);
HXDLIN( 708)			::Dynamic _hx_tmp19 = ::thx::bigint::BigIntImpl_obj::_hx_or(this12,that8);
HXDLIN( 708)			Bool _hx_tmp20 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp19,::thx::bigint::Bigs_obj::parseBase(HX_("-3",66,27,00,00),(int)10));
HXDLIN( 708)			::utest::Assert_obj::isTrue(_hx_tmp20,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),708,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
HXLINE( 709)			HX_VARI_NAME( ::Dynamic,this13,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("12",e1,2a,00,00),(int)10);
HXDLIN( 709)			HX_VARI_NAME( ::Dynamic,that9,"that") = ::thx::bigint::Bigs_obj::fromInt((int)-5);
HXDLIN( 709)			::Dynamic _hx_tmp21 = ::thx::bigint::BigIntImpl_obj::_hx_xor(this13,that9);
HXDLIN( 709)			Bool _hx_tmp22 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp21,::thx::bigint::Bigs_obj::parseBase(HX_("-9",6c,27,00,00),(int)10));
HXDLIN( 709)			::utest::Assert_obj::isTrue(_hx_tmp22,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),709,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testBitwiseOperations",8b,0d,51,83)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testBitwiseOperations,(void))

void TestBigInt_obj::testIsEvenAndIsOdd(){
            	HX_STACK_FRAME("thx.TestBigInt","testIsEvenAndIsOdd",0x584ad687,"thx.TestBigInt.testIsEvenAndIsOdd","thx/TestBigInt.hx",713,0x152acd32)
            	HX_STACK_THIS(this)
HXLINE( 713)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 713)		HX_VARI( Int,_g) = this->x;
HXDLIN( 713)		while((_g1 < _g)){
HXLINE( 713)			++_g1;
HXLINE( 714)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 714)			Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isEven(this1);
HXDLIN( 714)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),714,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 715)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::Bigs_obj::fromInt((int)0);
HXDLIN( 715)			Bool _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::isOdd(this2);
HXDLIN( 715)			::utest::Assert_obj::isFalse(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),715,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 717)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::Bigs_obj::fromInt((int)654);
HXDLIN( 717)			Bool _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::isEven(this3);
HXDLIN( 717)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),717,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 718)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::Bigs_obj::fromInt((int)654);
HXDLIN( 718)			Bool _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::isOdd(this4);
HXDLIN( 718)			::utest::Assert_obj::isFalse(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),718,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 720)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::bigint::Bigs_obj::fromInt((int)653);
HXDLIN( 720)			Bool _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::isOdd(this5);
HXDLIN( 720)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),720,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 721)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::bigint::Bigs_obj::fromInt((int)653);
HXDLIN( 721)			Bool _hx_tmp5 = ::thx::bigint::BigIntImpl_obj::isEven(this6);
HXDLIN( 721)			::utest::Assert_obj::isFalse(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),721,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 723)			HX_VARI_NAME( ::Dynamic,this7,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-984);
HXDLIN( 723)			Bool _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::isEven(this7);
HXDLIN( 723)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),723,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 724)			HX_VARI_NAME( ::Dynamic,this8,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-984);
HXDLIN( 724)			Bool _hx_tmp7 = ::thx::bigint::BigIntImpl_obj::isOdd(this8);
HXDLIN( 724)			::utest::Assert_obj::isFalse(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),724,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 726)			HX_VARI_NAME( ::Dynamic,this9,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-987);
HXDLIN( 726)			Bool _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::isOdd(this9);
HXDLIN( 726)			::utest::Assert_obj::isTrue(_hx_tmp8,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),726,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 727)			HX_VARI_NAME( ::Dynamic,this10,"this") = ::thx::bigint::Bigs_obj::fromInt((int)-987);
HXDLIN( 727)			Bool _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::isEven(this10);
HXDLIN( 727)			::utest::Assert_obj::isFalse(_hx_tmp9,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),727,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 729)			HX_VARI_NAME( ::Dynamic,this11,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9888651888888888",05,4d,9d,ab),(int)10);
HXDLIN( 729)			Bool _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::isEven(this11);
HXDLIN( 729)			::utest::Assert_obj::isTrue(_hx_tmp10,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),729,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 730)			HX_VARI_NAME( ::Dynamic,this12,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("9888651888888888",05,4d,9d,ab),(int)10);
HXDLIN( 730)			Bool _hx_tmp11 = ::thx::bigint::BigIntImpl_obj::isOdd(this12);
HXDLIN( 730)			::utest::Assert_obj::isFalse(_hx_tmp11,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),730,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 732)			HX_VARI_NAME( ::Dynamic,this13,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1026377777777777",27,37,c6,3c),(int)10);
HXDLIN( 732)			Bool _hx_tmp12 = ::thx::bigint::BigIntImpl_obj::isOdd(this13);
HXDLIN( 732)			::utest::Assert_obj::isTrue(_hx_tmp12,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),732,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 733)			HX_VARI_NAME( ::Dynamic,this14,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("1026377777777777",27,37,c6,3c),(int)10);
HXDLIN( 733)			Bool _hx_tmp13 = ::thx::bigint::BigIntImpl_obj::isEven(this14);
HXDLIN( 733)			::utest::Assert_obj::isFalse(_hx_tmp13,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),733,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 735)			HX_VARI_NAME( ::Dynamic,this15,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-9888651888888888",32,37,79,b0),(int)10);
HXDLIN( 735)			Bool _hx_tmp14 = ::thx::bigint::BigIntImpl_obj::isEven(this15);
HXDLIN( 735)			::utest::Assert_obj::isTrue(_hx_tmp14,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),735,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 736)			HX_VARI_NAME( ::Dynamic,this16,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-9888651888888888",32,37,79,b0),(int)10);
HXDLIN( 736)			Bool _hx_tmp15 = ::thx::bigint::BigIntImpl_obj::isOdd(this16);
HXDLIN( 736)			::utest::Assert_obj::isFalse(_hx_tmp15,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),736,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 738)			HX_VARI_NAME( ::Dynamic,this17,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1026377777777777",54,21,a2,41),(int)10);
HXDLIN( 738)			Bool _hx_tmp16 = ::thx::bigint::BigIntImpl_obj::isOdd(this17);
HXDLIN( 738)			::utest::Assert_obj::isTrue(_hx_tmp16,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),738,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
HXLINE( 739)			HX_VARI_NAME( ::Dynamic,this18,"this") = ::thx::bigint::Bigs_obj::parseBase(HX_("-1026377777777777",54,21,a2,41),(int)10);
HXDLIN( 739)			Bool _hx_tmp17 = ::thx::bigint::BigIntImpl_obj::isEven(this18);
HXDLIN( 739)			::utest::Assert_obj::isFalse(_hx_tmp17,null(),hx::SourceInfo(HX_("TestBigInt.hx",3d,bf,59,3f),739,HX_("thx.TestBigInt",cb,b9,6d,7e),HX_("testIsEvenAndIsOdd",c4,c1,78,29)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigInt_obj,testIsEvenAndIsOdd,(void))


TestBigInt_obj::TestBigInt_obj()
{
}

hx::Val TestBigInt_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testAbs") ) { return hx::Val( testAbs_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testInts") ) { return hx::Val( testInts_dyn()); }
		if (HX_FIELD_EQ(inName,"testMisc") ) { return hx::Val( testMisc_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testPower") ) { return hx::Val( testPower_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testFloats") ) { return hx::Val( testFloats_dyn()); }
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"testIsUnit") ) { return hx::Val( testIsUnit_dyn()); }
		if (HX_FIELD_EQ(inName,"testIsZero") ) { return hx::Val( testIsZero_dyn()); }
		if (HX_FIELD_EQ(inName,"testSquare") ) { return hx::Val( testSquare_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testIssue82") ) { return hx::Val( testIssue82_dyn()); }
		if (HX_FIELD_EQ(inName,"testStrings") ) { return hx::Val( testStrings_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testPrevNext") ) { return hx::Val( testPrevNext_dyn()); }
		if (HX_FIELD_EQ(inName,"testDivision") ) { return hx::Val( testDivision_dyn()); }
		if (HX_FIELD_EQ(inName,"testAddition") ) { return hx::Val( testAddition_dyn()); }
		if (HX_FIELD_EQ(inName,"testNegation") ) { return hx::Val( testNegation_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testFromInt64") ) { return hx::Val( testFromInt64_dyn()); }
		if (HX_FIELD_EQ(inName,"testLcmAndGcd") ) { return hx::Val( testLcmAndGcd_dyn()); }
		if (HX_FIELD_EQ(inName,"testFibonacci") ) { return hx::Val( testFibonacci_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testIncrements") ) { return hx::Val( testIncrements_dyn()); }
		if (HX_FIELD_EQ(inName,"testComparison") ) { return hx::Val( testComparison_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testIsImmutable") ) { return hx::Val( testIsImmutable_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"testPowerOf0to0is1") ) { return hx::Val( testPowerOf0to0is1_dyn()); }
		if (HX_FIELD_EQ(inName,"testMultiplication") ) { return hx::Val( testMultiplication_dyn()); }
		if (HX_FIELD_EQ(inName,"testIsEvenAndIsOdd") ) { return hx::Val( testIsEvenAndIsOdd_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"testDivisionBySelfIs1") ) { return hx::Val( testDivisionBySelfIs1_dyn()); }
		if (HX_FIELD_EQ(inName,"testBitwiseOperations") ) { return hx::Val( testBitwiseOperations_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"testIgnoreLeadingZeros") ) { return hx::Val( testIgnoreLeadingZeros_dyn()); }
		if (HX_FIELD_EQ(inName,"testDivisionOf0Equals0") ) { return hx::Val( testDivisionOf0Equals0_dyn()); }
		if (HX_FIELD_EQ(inName,"testModulo0ThrowsError") ) { return hx::Val( testModulo0ThrowsError_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"testCarriesOverCorrectly") ) { return hx::Val( testCarriesOverCorrectly_dyn()); }
		if (HX_FIELD_EQ(inName,"testShiftingLeftAndRight") ) { return hx::Val( testShiftingLeftAndRight_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"testCanHandleLargeNumbers") ) { return hx::Val( testCanHandleLargeNumbers_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"testIsPositiveAndIsNegative") ) { return hx::Val( testIsPositiveAndIsNegative_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"testDivisionBy1IsTheIdentity") ) { return hx::Val( testDivisionBy1IsTheIdentity_dyn()); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"testPowerToNegativeNumbersIs0") ) { return hx::Val( testPowerToNegativeNumbersIs0_dyn()); }
		if (HX_FIELD_EQ(inName,"testPowerCarriesOverCorrectly") ) { return hx::Val( testPowerCarriesOverCorrectly_dyn()); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"testPowerHandlesSignsCorrectly") ) { return hx::Val( testPowerHandlesSignsCorrectly_dyn()); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"testModuloHandlesSignsCorrectly") ) { return hx::Val( testModuloHandlesSignsCorrectly_dyn()); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"testMultiplyHandlesSignsCorectly") ) { return hx::Val( testMultiplyHandlesSignsCorectly_dyn()); }
		if (HX_FIELD_EQ(inName,"testPrevNextCarriesOverCorrectly") ) { return hx::Val( testPrevNextCarriesOverCorrectly_dyn()); }
		if (HX_FIELD_EQ(inName,"testBigIntParsesNumbersCorrectly") ) { return hx::Val( testBigIntParsesNumbersCorrectly_dyn()); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"testBigIntOutputsNumbersCorrectly") ) { return hx::Val( testBigIntOutputsNumbersCorrectly_dyn()); }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"testIsPositiveAndIsNegativeWorkForBigNumbers") ) { return hx::Val( testIsPositiveAndIsNegativeWorkForBigNumbers_dyn()); }
		break;
	case 46:
		if (HX_FIELD_EQ(inName,"testIsPositiveAndIsNegativeWorkForSmallNumbers") ) { return hx::Val( testIsPositiveAndIsNegativeWorkForSmallNumbers_dyn()); }
		break;
	case 52:
		if (HX_FIELD_EQ(inName,"testNumbersShouldBeTheSameWhenConstructedDifferently") ) { return hx::Val( testNumbersShouldBeTheSameWhenConstructedDifferently_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestBigInt_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestBigInt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestBigInt_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestBigInt_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestBigInt_obj_sStaticStorageInfo = 0;
#endif

static ::String TestBigInt_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testIssue82","\xe1","\xa2","\xd8","\x4a"),
	HX_HCSTRING("testFromInt64","\x71","\xfd","\xe3","\xa5"),
	HX_HCSTRING("testLcmAndGcd","\x35","\x4c","\xce","\x99"),
	HX_HCSTRING("testIncrements","\x56","\x8a","\x19","\x2d"),
	HX_HCSTRING("testCanHandleLargeNumbers","\x55","\xdd","\x15","\xa8"),
	HX_HCSTRING("testIsImmutable","\xc6","\xcb","\x16","\x9a"),
	HX_HCSTRING("testInts","\x16","\xca","\xed","\x48"),
	HX_HCSTRING("testFloats","\x49","\x69","\x4a","\x5a"),
	HX_HCSTRING("testStrings","\x50","\x7c","\xbc","\xb5"),
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testIgnoreLeadingZeros","\xc9","\x64","\xb0","\x60"),
	HX_HCSTRING("testNumbersShouldBeTheSameWhenConstructedDifferently","\x33","\x7d","\xd6","\xcd"),
	HX_HCSTRING("testFibonacci","\xf4","\x9c","\x6c","\x98"),
	HX_HCSTRING("testCarriesOverCorrectly","\x3c","\xa5","\xd1","\xc7"),
	HX_HCSTRING("testMisc","\x5e","\xd8","\x8e","\x4b"),
	HX_HCSTRING("testMultiplyHandlesSignsCorectly","\xfe","\xa4","\xe9","\x1b"),
	HX_HCSTRING("testDivisionBy1IsTheIdentity","\xea","\x5d","\x35","\x63"),
	HX_HCSTRING("testDivisionBySelfIs1","\x25","\xb8","\x0b","\x0b"),
	HX_HCSTRING("testDivisionOf0Equals0","\x57","\xcb","\x21","\x69"),
	HX_HCSTRING("testModulo0ThrowsError","\x53","\x74","\xc5","\x37"),
	HX_HCSTRING("testModuloHandlesSignsCorrectly","\x64","\x82","\x4d","\xce"),
	HX_HCSTRING("testPrevNext","\xf8","\x8b","\xd7","\x84"),
	HX_HCSTRING("testPrevNextCarriesOverCorrectly","\xe2","\x5f","\x67","\xc0"),
	HX_HCSTRING("testAbs","\x40","\x5f","\xb8","\xbd"),
	HX_HCSTRING("testIsPositiveAndIsNegative","\x41","\xcd","\xb4","\x78"),
	HX_HCSTRING("testIsPositiveAndIsNegativeWorkForSmallNumbers","\x9a","\xa4","\x7d","\xf9"),
	HX_HCSTRING("testIsPositiveAndIsNegativeWorkForBigNumbers","\x01","\x7a","\xef","\x4d"),
	HX_HCSTRING("testIsUnit","\x80","\xd5","\x04","\x84"),
	HX_HCSTRING("testIsZero","\x24","\x1a","\x4c","\x87"),
	HX_HCSTRING("testSquare","\x8f","\x46","\xe6","\x71"),
	HX_HCSTRING("testPowerToNegativeNumbersIs0","\xbf","\xd6","\xa4","\x3a"),
	HX_HCSTRING("testPowerHandlesSignsCorrectly","\xd9","\xc0","\xff","\x10"),
	HX_HCSTRING("testPower","\x53","\x8a","\x9c","\x8f"),
	HX_HCSTRING("testPowerOf0to0is1","\xf8","\xc4","\x30","\x33"),
	HX_HCSTRING("testPowerCarriesOverCorrectly","\xbd","\xcd","\xcc","\xfc"),
	HX_HCSTRING("testDivision","\x9f","\x83","\x8c","\xc8"),
	HX_HCSTRING("testAddition","\x6e","\x93","\x46","\x1b"),
	HX_HCSTRING("testMultiplication","\x78","\xfc","\xb5","\xa0"),
	HX_HCSTRING("testComparison","\x3b","\xc2","\x55","\xb1"),
	HX_HCSTRING("testNegation","\xd7","\x46","\x49","\xc4"),
	HX_HCSTRING("testBigIntParsesNumbersCorrectly","\x6e","\xaa","\x12","\x07"),
	HX_HCSTRING("testBigIntOutputsNumbersCorrectly","\xfe","\x1a","\x05","\xf3"),
	HX_HCSTRING("testShiftingLeftAndRight","\xde","\x1b","\x6a","\x48"),
	HX_HCSTRING("testBitwiseOperations","\x8b","\x0d","\x51","\x83"),
	HX_HCSTRING("testIsEvenAndIsOdd","\xc4","\xc1","\x78","\x29"),
	::String(null()) };

static void TestBigInt_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestBigInt_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestBigInt_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestBigInt_obj::__mClass,"__mClass");
};

#endif

hx::Class TestBigInt_obj::__mClass;

void TestBigInt_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestBigInt","\xcb","\xb9","\x6d","\x7e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestBigInt_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestBigInt_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestBigInt_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestBigInt_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestBigInt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestBigInt_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
