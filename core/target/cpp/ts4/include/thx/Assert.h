// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_Assert
#define INCLUDED_thx_Assert

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS1(thx,Assert)
HX_DECLARE_CLASS1(thx,IAssertBehavior)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES Assert_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Assert_obj OBJ_;
		Assert_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.Assert")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.Assert"); }
		static hx::ObjectPtr< Assert_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Assert_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Assert","\xe6","\xba","\x97","\x80"); }

		static void __boot();
		static ::Dynamic behavior;
		static void contains(::cpp::VirtualArray possibilities, ::Dynamic value,::String msg, ::Dynamic pos);
		static ::Dynamic contains_dyn();

		static void equals( ::Dynamic expected, ::Dynamic value,::String msg, ::Dynamic pos);
		static ::Dynamic equals_dyn();

		static void excludes( ::Dynamic match,::cpp::VirtualArray values,::String msg, ::Dynamic pos);
		static ::Dynamic excludes_dyn();

		static void fail(::String msg, ::Dynamic pos);
		static ::Dynamic fail_dyn();

		static void isContainedIn( ::Dynamic match,::cpp::VirtualArray values,::String msg, ::Dynamic pos);
		static ::Dynamic isContainedIn_dyn();

		static void isFalse(Bool value,::String msg, ::Dynamic pos);
		static ::Dynamic isFalse_dyn();

		static void is( ::Dynamic value, ::Dynamic type,::String msg, ::Dynamic pos);
		static ::Dynamic is_dyn();

		static void isNull( ::Dynamic value,::String msg, ::Dynamic pos);
		static ::Dynamic isNull_dyn();

		static void isTrue(Bool cond,::String msg, ::Dynamic pos);
		static ::Dynamic isTrue_dyn();

		static void matches( ::EReg pattern, ::Dynamic value,::String msg, ::Dynamic pos);
		static ::Dynamic matches_dyn();

		static void nearEquals(Float expected,Float value, ::Dynamic approx,::String msg, ::Dynamic pos);
		static ::Dynamic nearEquals_dyn();

		static void notEquals( ::Dynamic expected, ::Dynamic value,::String msg, ::Dynamic pos);
		static ::Dynamic notEquals_dyn();

		static void notNull( ::Dynamic value,::String msg, ::Dynamic pos);
		static ::Dynamic notNull_dyn();

		static void pass(::String msg, ::Dynamic pos);
		static ::Dynamic pass_dyn();

		static void raises( ::Dynamic method, ::Dynamic type,::String msgNotThrown,::String msgWrongType, ::Dynamic pos);
		static ::Dynamic raises_dyn();

		static void same( ::Dynamic expected, ::Dynamic value, ::Dynamic recursive,::String msg, ::Dynamic pos);
		static ::Dynamic same_dyn();

		static void stringContains(::String match,::String value,::String msg, ::Dynamic pos);
		static ::Dynamic stringContains_dyn();

		static void stringSequence(::Array< ::String > sequence,::String value,::String msg, ::Dynamic pos);
		static ::Dynamic stringSequence_dyn();

		static void warn(::String msg, ::Dynamic pos);
		static ::Dynamic warn_dyn();

		static Bool sameAs( ::Dynamic expected, ::Dynamic value, ::Dynamic status);
		static ::Dynamic sameAs_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_Assert */ 
