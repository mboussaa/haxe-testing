// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__BigInt_BigInt_Impl_
#define INCLUDED_thx__BigInt_BigInt_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS2(thx,_BigInt,BigInt_Impl_)
HX_DECLARE_CLASS2(thx,bigint,BigIntImpl)

namespace thx{
namespace _BigInt{


class HXCPP_CLASS_ATTRIBUTES BigInt_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BigInt_Impl__obj OBJ_;
		BigInt_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._BigInt.BigInt_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._BigInt.BigInt_Impl_"); }
		static hx::ObjectPtr< BigInt_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BigInt_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("BigInt_Impl_","\x0f","\x82","\x51","\x0b"); }

		static void __boot();
		static ::Dynamic zero;
		static ::Dynamic one;
		static ::Dynamic two;
		static ::Dynamic negativeOne;
		static ::Dynamic fromInt(Int value);
		static ::Dynamic fromInt_dyn();

		static ::Dynamic fromFloat(Float value);
		static ::Dynamic fromFloat_dyn();

		static ::Dynamic fromInt64( ::cpp::Int64Struct value);
		static ::Dynamic fromInt64_dyn();

		static ::Dynamic fromString(::String value);
		static ::Dynamic fromString_dyn();

		static ::Dynamic fromStringWithBase(::String value,Int base);
		static ::Dynamic fromStringWithBase_dyn();

		static ::Dynamic randomBetween(::Dynamic a,::Dynamic b);
		static ::Dynamic randomBetween_dyn();

		static Int compare(::Dynamic a,::Dynamic b);
		static ::Dynamic compare_dyn();

		static Bool isZero(::Dynamic this1);
		static ::Dynamic isZero_dyn();

		static ::Dynamic abs(::Dynamic this1);
		static ::Dynamic abs_dyn();

		static Int compareTo(::Dynamic this1,::Dynamic that);
		static ::Dynamic compareTo_dyn();

		static Int compareToAbs(::Dynamic this1,::Dynamic that);
		static ::Dynamic compareToAbs_dyn();

		static ::Dynamic next(::Dynamic this1);
		static ::Dynamic next_dyn();

		static ::Dynamic prev(::Dynamic this1);
		static ::Dynamic prev_dyn();

		static ::Dynamic square(::Dynamic this1);
		static ::Dynamic square_dyn();

		static ::Dynamic pow(::Dynamic this1,::Dynamic exp);
		static ::Dynamic pow_dyn();

		static Bool isEven(::Dynamic this1);
		static ::Dynamic isEven_dyn();

		static Bool isOdd(::Dynamic this1);
		static ::Dynamic isOdd_dyn();

		static Bool isNegative(::Dynamic this1);
		static ::Dynamic isNegative_dyn();

		static Bool isPositive(::Dynamic this1);
		static ::Dynamic isPositive_dyn();

		static Bool isUnit(::Dynamic this1);
		static ::Dynamic isUnit_dyn();

		static Bool isDivisibleBy(::Dynamic this1,::Dynamic that);
		static ::Dynamic isDivisibleBy_dyn();

		static Bool isPrime(::Dynamic this1);
		static ::Dynamic isPrime_dyn();

		static ::Dynamic modPow(::Dynamic this1,::Dynamic exp,::Dynamic mod);
		static ::Dynamic modPow_dyn();

		static ::Dynamic euclideanModPow(::Dynamic this1,::Dynamic exp,::Dynamic mod);
		static ::Dynamic euclideanModPow_dyn();

		static ::Dynamic max(::Dynamic this1,::Dynamic that);
		static ::Dynamic max_dyn();

		static ::Dynamic min(::Dynamic this1,::Dynamic that);
		static ::Dynamic min_dyn();

		static ::Dynamic gcd(::Dynamic this1,::Dynamic that);
		static ::Dynamic gcd_dyn();

		static ::Dynamic lcm(::Dynamic this1,::Dynamic that);
		static ::Dynamic lcm_dyn();

		static Bool greaterThan(::Dynamic this1,::Dynamic that);
		static ::Dynamic greaterThan_dyn();

		static Bool greater(::Dynamic self,::Dynamic that);
		static ::Dynamic greater_dyn();

		static Bool greaterEqualsTo(::Dynamic this1,::Dynamic that);
		static ::Dynamic greaterEqualsTo_dyn();

		static Bool greaterEquals(::Dynamic self,::Dynamic that);
		static ::Dynamic greaterEquals_dyn();

		static Bool lessThan(::Dynamic this1,::Dynamic that);
		static ::Dynamic lessThan_dyn();

		static Bool less(::Dynamic self,::Dynamic that);
		static ::Dynamic less_dyn();

		static Bool lessEqualsTo(::Dynamic this1,::Dynamic that);
		static ::Dynamic lessEqualsTo_dyn();

		static Bool lessEquals(::Dynamic self,::Dynamic that);
		static ::Dynamic lessEquals_dyn();

		static Bool equalsTo(::Dynamic this1,::Dynamic that);
		static ::Dynamic equalsTo_dyn();

		static Bool equals(::Dynamic self,::Dynamic that);
		static ::Dynamic equals_dyn();

		static Bool notEqualsTo(::Dynamic this1,::Dynamic that);
		static ::Dynamic notEqualsTo_dyn();

		static Bool notEquals(::Dynamic self,::Dynamic that);
		static ::Dynamic notEquals_dyn();

		static ::Dynamic add(::Dynamic this1,::Dynamic that);
		static ::Dynamic add_dyn();

		static ::Dynamic subtract(::Dynamic this1,::Dynamic that);
		static ::Dynamic subtract_dyn();

		static ::Dynamic preIncrement(::Dynamic this1);
		static ::Dynamic preIncrement_dyn();

		static ::Dynamic postIncrement(::Dynamic this1);
		static ::Dynamic postIncrement_dyn();

		static ::Dynamic preDecrement(::Dynamic this1);
		static ::Dynamic preDecrement_dyn();

		static ::Dynamic postDecrement(::Dynamic this1);
		static ::Dynamic postDecrement_dyn();

		static ::Dynamic negate(::Dynamic this1);
		static ::Dynamic negate_dyn();

		static ::Dynamic multiply(::Dynamic this1,::Dynamic that);
		static ::Dynamic multiply_dyn();

		static ::Dynamic divide(::Dynamic this1,::Dynamic that);
		static ::Dynamic divide_dyn();

		static ::Dynamic modulo(::Dynamic this1,::Dynamic that);
		static ::Dynamic modulo_dyn();

		static ::Dynamic shiftLeft(::Dynamic this1,Int that);
		static ::Dynamic shiftLeft_dyn();

		static ::Dynamic shiftRight(::Dynamic this1,Int that);
		static ::Dynamic shiftRight_dyn();

		static ::Dynamic _hx_not(::Dynamic this1);
		static ::Dynamic _hx_not_dyn();

		static ::Dynamic _hx_and(::Dynamic this1,::Dynamic that);
		static ::Dynamic _hx_and_dyn();

		static ::Dynamic _hx_or(::Dynamic this1,::Dynamic that);
		static ::Dynamic _hx_or_dyn();

		static ::Dynamic _hx_xor(::Dynamic this1,::Dynamic that);
		static ::Dynamic _hx_xor_dyn();

		static  ::Dynamic divMod(::Dynamic this1,::Dynamic that);
		static ::Dynamic divMod_dyn();

		static Int toInt(::Dynamic this1);
		static ::Dynamic toInt_dyn();

		static Float toFloat(::Dynamic this1);
		static ::Dynamic toFloat_dyn();

		static  ::cpp::Int64Struct toInt64(::Dynamic this1);
		static ::Dynamic toInt64_dyn();

		static ::String toString(::Dynamic this1);
		static ::Dynamic toString_dyn();

		static ::String toStringWithBase(::Dynamic this1,Int base);
		static ::Dynamic toStringWithBase_dyn();

};

} // end namespace thx
} // end namespace _BigInt

#endif /* INCLUDED_thx__BigInt_BigInt_Impl_ */ 
