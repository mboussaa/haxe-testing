// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_TestLocalDate
#include <thx/TestLocalDate.h>
#endif
#ifndef INCLUDED_thx_TimePeriod
#include <thx/TimePeriod.h>
#endif
#ifndef INCLUDED_thx__LocalDate_LocalDate_Impl_
#include <thx/_LocalDate/LocalDate_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestLocalDate_obj::__construct(){
            	HX_STACK_FRAME("thx.TestLocalDate","new",0xfa12c86f,"thx.TestLocalDate.new","thx/TestLocalDate.hx",7,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE(  10)		this->tomorrow = ::thx::_LocalDate::LocalDate_Impl__obj::create((int)2015,(int)7,(int)27);
HXLINE(   9)		this->date = ::thx::_LocalDate::LocalDate_Impl__obj::create((int)2015,(int)7,(int)26);
            	}

Dynamic TestLocalDate_obj::__CreateEmpty() { return new TestLocalDate_obj; }

hx::ObjectPtr< TestLocalDate_obj > TestLocalDate_obj::__new()
{
	hx::ObjectPtr< TestLocalDate_obj > _hx_result = new TestLocalDate_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestLocalDate_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestLocalDate_obj > _hx_result = new TestLocalDate_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestLocalDate_obj::testCreate(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::Dynamic o){
            			HX_STACK_FRAME("thx.TestLocalDate","testCreate",0xa78864bf,"thx.TestLocalDate.testCreate","thx/TestLocalDate.hx",33,0x01342be2)
            			HX_STACK_ARG(o,"o")
HXLINE(  33)			Bool _hx_tmp21 = (( (Int)(o->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)) ) == ( (Int)(o->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)) ));
HXDLIN(  33)			::String _hx_tmp22 = ::thx::_LocalDate::LocalDate_Impl__obj::toString( ::Dynamic(o->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)));
HXDLIN(  33)			::String _hx_tmp23 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp22) + HX_(" but was  ",2a,cb,10,56));
HXDLIN(  33)			::String _hx_tmp24 = ::thx::_LocalDate::LocalDate_Impl__obj::toString( ::Dynamic(o->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)));
HXDLIN(  33)			::utest::Assert_obj::isTrue(_hx_tmp21,(_hx_tmp23 + _hx_tmp24),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),33,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCreate",ee,ac,03,95)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.TestLocalDate","testCreate",0xa78864bf,"thx.TestLocalDate.testCreate","thx/TestLocalDate.hx",13,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE(  14)		HX_VARI_NAME( Int,this1,"this") = this->date;
HXDLIN(  14)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN(  14)		HX_VARI_NAME( Int,this2,"this") = this->date;
HXDLIN(  14)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this2,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN(  14)		::utest::Assert_obj::equals((int)2015,_hx_tmp,((HX_("expected 2015 but got ",a9,80,6a,5b) + _hx_tmp1) + HX_(" for year",54,92,de,81)),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),14,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCreate",ee,ac,03,95)));
HXLINE(  15)		HX_VARI_NAME( Int,this3,"this") = this->date;
HXDLIN(  15)		Int _hx_tmp2 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this3,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN(  15)		HX_VARI_NAME( Int,this4,"this") = this->date;
HXDLIN(  15)		Int _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this4,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN(  15)		::utest::Assert_obj::equals((int)7,_hx_tmp2,((HX_("expected 7 but got ",44,38,79,48) + _hx_tmp3) + HX_(" for month",c9,82,b8,3e)),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),15,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCreate",ee,ac,03,95)));
HXLINE(  16)		HX_VARI_NAME( Int,this5,"this") = this->date;
HXDLIN(  16)		Int _hx_tmp4 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this5,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN(  16)		HX_VARI_NAME( Int,this6,"this") = this->date;
HXDLIN(  16)		Int _hx_tmp5 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this6,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN(  16)		::utest::Assert_obj::equals((int)26,_hx_tmp4,((HX_("expected 26 but got ",c7,0c,7a,5b) + _hx_tmp5) + HX_(" for day",a5,cd,99,d2)),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),16,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCreate",ee,ac,03,95)));
HXLINE(  18)		Int _hx_tmp6 = ::thx::_LocalDate::LocalDate_Impl__obj::get_dayOfWeek(this->date);
HXDLIN(  18)		::utest::Assert_obj::equals((int)0,_hx_tmp6,null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),18,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCreate",ee,ac,03,95)));
HXLINE(  22)		Int _hx_tmp7 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2014-12-01",c1,b4,b3,d6));
HXDLIN(  22)		Int _hx_tmp8 = ::thx::_LocalDate::LocalDate_Impl__obj::create((int)2014,(int)12,(int)1);
HXDLIN(  22)		 ::Dynamic _hx_tmp9 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp7)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp8));
HXLINE(  24)		Int _hx_tmp10 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2015-03-01",a0,cd,8b,6d));
HXDLIN(  24)		Int _hx_tmp11 = ::thx::_LocalDate::LocalDate_Impl__obj::create((int)2014,(int)15,(int)1);
HXDLIN(  24)		 ::Dynamic _hx_tmp12 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp10)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp11));
HXLINE(  25)		Int _hx_tmp13 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2013-11-01",61,07,75,ac));
HXDLIN(  25)		Int _hx_tmp14 = ::thx::_LocalDate::LocalDate_Impl__obj::create((int)2014,(int)-1,(int)1);
HXDLIN(  25)		 ::Dynamic _hx_tmp15 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp13)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp14));
HXLINE(  28)		Int _hx_tmp16 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2014-03-04",e2,56,f6,43));
HXDLIN(  28)		Int _hx_tmp17 = ::thx::_LocalDate::LocalDate_Impl__obj::create((int)2014,(int)2,(int)32);
HXDLIN(  28)		 ::Dynamic _hx_tmp18 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp16)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp17));
HXLINE(  29)		Int _hx_tmp19 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2013-12-31",9d,40,1e,ad));
HXDLIN(  29)		Int _hx_tmp20 = ::thx::_LocalDate::LocalDate_Impl__obj::create((int)2014,(int)1,(int)0);
HXLINE(  32)		::Array_obj< ::Dynamic>::__new(5)->init(0,_hx_tmp9)->init(1,_hx_tmp12)->init(2,_hx_tmp15)->init(3,_hx_tmp18)->init(4, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp19)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp20)))->map( ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testCreate,(void))

void TestLocalDate_obj::testToString(){
            	HX_STACK_FRAME("thx.TestLocalDate","testToString",0xf275052f,"thx.TestLocalDate.testToString","thx/TestLocalDate.hx",37,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE(  38)		::String _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::toString(this->date);
HXDLIN(  38)		::utest::Assert_obj::equals(HX_("2015-07-26",df,a9,30,70),_hx_tmp,null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),38,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testToString",1e,f7,75,ab)));
HXLINE(  39)		::String _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::toString((int)0);
HXDLIN(  39)		::utest::Assert_obj::equals(HX_("1-01-01",b1,93,6c,b7),_hx_tmp1,null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),39,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testToString",1e,f7,75,ab)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testToString,(void))

void TestLocalDate_obj::testEquals(){
            	HX_STACK_FRAME("thx.TestLocalDate","testEquals",0xeb6bec02,"thx.TestLocalDate.testEquals","thx/TestLocalDate.hx",42,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE(  43)		Bool _hx_tmp = (this->date == this->date);
HXDLIN(  43)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),43,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testEquals",31,34,e7,d8)));
HXLINE(  44)		Bool _hx_tmp1 = (this->date != this->tomorrow);
HXDLIN(  44)		::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),44,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testEquals",31,34,e7,d8)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testEquals,(void))

void TestLocalDate_obj::testCompare(){
            	HX_STACK_FRAME("thx.TestLocalDate","testCompare",0x61ce2582,"thx.TestLocalDate.testCompare","thx/TestLocalDate.hx",47,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE(  48)		Int _hx_tmp = (this->date - this->date);
HXDLIN(  48)		::utest::Assert_obj::isFalse((_hx_tmp > (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),48,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  49)		Int _hx_tmp1 = (this->date - this->date);
HXDLIN(  49)		::utest::Assert_obj::isTrue((_hx_tmp1 >= (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),49,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  50)		Int _hx_tmp2 = (this->date - this->date);
HXDLIN(  50)		::utest::Assert_obj::isFalse((_hx_tmp2 < (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),50,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  51)		Int _hx_tmp3 = (this->date - this->date);
HXDLIN(  51)		::utest::Assert_obj::isTrue((_hx_tmp3 <= (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),51,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  53)		Int _hx_tmp4 = (this->date - this->tomorrow);
HXDLIN(  53)		::utest::Assert_obj::isFalse((_hx_tmp4 > (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),53,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  54)		Int _hx_tmp5 = (this->date - this->tomorrow);
HXDLIN(  54)		::utest::Assert_obj::isFalse((_hx_tmp5 >= (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),54,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  55)		Int _hx_tmp6 = (this->date - this->tomorrow);
HXDLIN(  55)		::utest::Assert_obj::isTrue((_hx_tmp6 < (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),55,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  56)		Int _hx_tmp7 = (this->date - this->tomorrow);
HXDLIN(  56)		::utest::Assert_obj::isTrue((_hx_tmp7 <= (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),56,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  58)		Int _hx_tmp8 = (this->tomorrow - this->date);
HXDLIN(  58)		::utest::Assert_obj::isTrue((_hx_tmp8 > (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),58,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  59)		Int _hx_tmp9 = (this->tomorrow - this->date);
HXDLIN(  59)		::utest::Assert_obj::isTrue((_hx_tmp9 >= (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),59,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  60)		Int _hx_tmp10 = (this->tomorrow - this->date);
HXDLIN(  60)		::utest::Assert_obj::isFalse((_hx_tmp10 < (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),60,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
HXLINE(  61)		Int _hx_tmp11 = (this->tomorrow - this->date);
HXDLIN(  61)		::utest::Assert_obj::isFalse((_hx_tmp11 <= (int)0),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),61,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testCompare",73,06,32,40)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testCompare,(void))

void TestLocalDate_obj::testFromToDate(){
            	HX_STACK_FRAME("thx.TestLocalDate","testFromToDate",0xaabf6196,"thx.TestLocalDate.testFromToDate","thx/TestLocalDate.hx",66,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE(  67)		HX_VARI_NAME( Int,this1,"this") = this->date;
HXDLIN(  67)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN(  67)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN(  67)		Int _hx_tmp2 = (_hx_tmp1 - (int)1);
HXDLIN(  67)		Int _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN(  67)		 ::Date _hx_tmp4 =  ::Date_obj::__new(_hx_tmp,_hx_tmp2,_hx_tmp3,(int)0,(int)0,(int)0);
HXDLIN(  67)		HX_VARI( Int,d) = ::thx::_LocalDate::LocalDate_Impl__obj::fromDate(_hx_tmp4);
HXLINE(  68)		Bool _hx_tmp5 = (this->date == d);
HXDLIN(  68)		::String _hx_tmp6 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(this->date);
HXDLIN(  68)		::String _hx_tmp7 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp6) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  68)		::String _hx_tmp8 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(d);
HXDLIN(  68)		::utest::Assert_obj::isTrue(_hx_tmp5,(_hx_tmp7 + _hx_tmp8),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),68,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testFromToDate",45,ed,53,5b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testFromToDate,(void))

void TestLocalDate_obj::testFromToTime(){
            	HX_STACK_FRAME("thx.TestLocalDate","testFromToTime",0xb558d775,"thx.TestLocalDate.testFromToTime","thx/TestLocalDate.hx",71,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE(  72)		HX_VARI_NAME( Int,this1,"this") = this->date;
HXDLIN(  72)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN(  72)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN(  72)		Int _hx_tmp2 = (_hx_tmp1 - (int)1);
HXDLIN(  72)		Int _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN(  72)		 ::Date _hx_tmp4 =  ::Date_obj::__new(_hx_tmp,_hx_tmp2,_hx_tmp3,(int)0,(int)0,(int)0);
HXDLIN(  72)		Float _hx_tmp5 = _hx_tmp4->getTime();
HXDLIN(  72)		HX_VARI( Int,date2) = ::thx::_LocalDate::LocalDate_Impl__obj::fromTime(_hx_tmp5);
HXLINE(  73)		Bool _hx_tmp6 = (this->date == date2);
HXDLIN(  73)		::String _hx_tmp7 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(this->date);
HXDLIN(  73)		::String _hx_tmp8 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp7) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  73)		::String _hx_tmp9 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(date2);
HXDLIN(  73)		::utest::Assert_obj::isTrue(_hx_tmp6,(_hx_tmp8 + _hx_tmp9),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),73,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testFromToTime",24,63,ed,65)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testFromToTime,(void))

void TestLocalDate_obj::testFromToString(){
            	HX_STACK_FRAME("thx.TestLocalDate","testFromToString",0x5133de39,"thx.TestLocalDate.testFromToString","thx/TestLocalDate.hx",77,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE(  78)		HX_VARI( Int,self) = this->date;
HXDLIN(  78)		::String _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::toString(this->date);
HXDLIN(  78)		HX_VARI( Int,that) = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(_hx_tmp);
HXDLIN(  78)		::utest::Assert_obj::isTrue((self == that),null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),78,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testFromToString",a8,f3,c5,b8)));
HXLINE(  80)		::String _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("0-06-07",11,2e,25,91)));
HXDLIN(  80)		::utest::Assert_obj::equals(HX_("-1-07-27",a2,ec,41,c9),_hx_tmp1,null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),80,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testFromToString",a8,f3,c5,b8)));
HXLINE(  81)		::String _hx_tmp2 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("-1-06-07",45,b4,98,c8)));
HXDLIN(  81)		::utest::Assert_obj::equals(HX_("-1-06-07",45,b4,98,c8),_hx_tmp2,null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),81,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testFromToString",a8,f3,c5,b8)));
HXLINE(  82)		::String _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("1-06-07",d2,a4,ba,ba)));
HXDLIN(  82)		::utest::Assert_obj::equals(HX_("1-06-07",d2,a4,ba,ba),_hx_tmp3,null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),82,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testFromToString",a8,f3,c5,b8)));
HXLINE(  83)		::String _hx_tmp4 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("-2014-01-01",0e,c4,bc,e9)));
HXDLIN(  83)		::utest::Assert_obj::equals(HX_("-2014-01-01",0e,c4,bc,e9),_hx_tmp4,null(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),83,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testFromToString",a8,f3,c5,b8)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testFromToString,(void))

void TestLocalDate_obj::testAdd(){
            	HX_STACK_FRAME("thx.TestLocalDate","testAdd",0x71560c7e,"thx.TestLocalDate.testAdd","thx/TestLocalDate.hx",86,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE(  87)		HX_VARI_NAME( Int,this1,"this") = this->date;
HXDLIN(  87)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::addMonths(this1,(int)24);
HXDLIN(  87)		HX_VARI_NAME( Int,this2,"this") = ::thx::_LocalDate::LocalDate_Impl__obj::addMonths(_hx_tmp,(int)9);
HXDLIN(  87)		HX_VARI( Int,d) = (this2 + (int)10);
HXLINE(  92)		HX_VARI( Int,that) = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2018-05-06",26,9f,9e,eb));
HXDLIN(  92)		Bool _hx_tmp1 = (d == that);
HXDLIN(  92)		::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + HX_("2018-05-06",26,9f,9e,eb)) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  92)		::String _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(d);
HXDLIN(  92)		::utest::Assert_obj::isTrue(_hx_tmp1,(_hx_tmp2 + _hx_tmp3),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),92,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testAdd",ef,60,b8,bd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testAdd,(void))

void TestLocalDate_obj::testAddMonth(){
            	HX_STACK_FRAME("thx.TestLocalDate","testAddMonth",0x3fc321e2,"thx.TestLocalDate.testAddMonth","thx/TestLocalDate.hx",95,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE(  97)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::addMonths(this->date,(int)1);
HXDLIN(  97)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2015-08-26",7e,e0,d9,70));
HXDLIN(  97)		 ::Dynamic _hx_tmp2 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("e",65,00,00,00),_hx_tmp1)
            			->setFixed(1,HX_("t",74,00,00,00),_hx_tmp));
HXLINE(  98)		Int _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::addMonths(this->date,(int)0);
HXDLIN(  98)		Int _hx_tmp4 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2015-07-26",df,a9,30,70));
HXDLIN(  98)		 ::Dynamic _hx_tmp5 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("e",65,00,00,00),_hx_tmp4)
            			->setFixed(1,HX_("t",74,00,00,00),_hx_tmp3));
HXLINE(  99)		Int _hx_tmp6 = ::thx::_LocalDate::LocalDate_Impl__obj::addMonths(this->date,(int)-1);
HXDLIN(  99)		Int _hx_tmp7 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2015-06-26",40,73,87,6f));
HXDLIN(  99)		 ::Dynamic _hx_tmp8 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("e",65,00,00,00),_hx_tmp7)
            			->setFixed(1,HX_("t",74,00,00,00),_hx_tmp6));
HXLINE( 101)		Int _hx_tmp9 = ::thx::_LocalDate::LocalDate_Impl__obj::addMonths(this->date,(int)7);
HXDLIN( 101)		Int _hx_tmp10 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2016-02-26",85,0f,78,96));
HXDLIN( 101)		 ::Dynamic _hx_tmp11 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("e",65,00,00,00),_hx_tmp10)
            			->setFixed(1,HX_("t",74,00,00,00),_hx_tmp9));
HXLINE( 102)		Int _hx_tmp12 = ::thx::_LocalDate::LocalDate_Impl__obj::addMonths(this->date,(int)-7);
HXDLIN( 102)		Int _hx_tmp13 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2014-12-26",84,b6,b3,d6));
HXDLIN( 102)		 ::Dynamic _hx_tmp14 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("e",65,00,00,00),_hx_tmp13)
            			->setFixed(1,HX_("t",74,00,00,00),_hx_tmp12));
HXLINE( 104)		Int _hx_tmp15 = ::thx::_LocalDate::LocalDate_Impl__obj::addMonths(this->date,(int)14);
HXDLIN( 104)		Int _hx_tmp16 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2016-09-26",de,8d,18,9b));
HXDLIN( 104)		 ::Dynamic _hx_tmp17 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("e",65,00,00,00),_hx_tmp16)
            			->setFixed(1,HX_("t",74,00,00,00),_hx_tmp15));
HXLINE( 105)		Int _hx_tmp18 = ::thx::_LocalDate::LocalDate_Impl__obj::addMonths(this->date,(int)-14);
HXDLIN( 105)		Int _hx_tmp19 = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(HX_("2014-05-26",e0,c5,48,45));
HXLINE(  96)		HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(7)->init(0,_hx_tmp2)->init(1,_hx_tmp5)->init(2,_hx_tmp8)->init(3,_hx_tmp11)->init(4,_hx_tmp14)->init(5,_hx_tmp17)->init(6, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("e",65,00,00,00),_hx_tmp19)
            			->setFixed(1,HX_("t",74,00,00,00),_hx_tmp18)));
HXLINE( 107)		{
HXLINE( 107)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 107)			while((_g < tests->length)){
HXLINE( 107)				HX_VARI(  ::Dynamic,test) = tests->__get(_g);
HXDLIN( 107)				++_g;
HXLINE( 108)				Bool _hx_tmp20 = (( (Int)(test->__Field(HX_("t",74,00,00,00),hx::paccDynamic)) ) == ( (Int)(test->__Field(HX_("e",65,00,00,00),hx::paccDynamic)) ));
HXDLIN( 108)				::String _hx_tmp21 = ::thx::_LocalDate::LocalDate_Impl__obj::toString( ::Dynamic(test->__Field(HX_("e",65,00,00,00),hx::paccDynamic)));
HXDLIN( 108)				::String _hx_tmp22 = ((HX_("expexted ",3d,a9,62,01) + _hx_tmp21) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 108)				::String _hx_tmp23 = ::thx::_LocalDate::LocalDate_Impl__obj::toString( ::Dynamic(test->__Field(HX_("t",74,00,00,00),hx::paccDynamic)));
HXDLIN( 108)				::utest::Assert_obj::isTrue(_hx_tmp20,(_hx_tmp22 + _hx_tmp23),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),108,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testAddMonth",d1,13,c4,f8)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testAddMonth,(void))

void TestLocalDate_obj::testSnapNext(){
            	HX_STACK_FRAME("thx.TestLocalDate","testSnapNext",0xc34328e0,"thx.TestLocalDate.testSnapNext","thx/TestLocalDate.hx",112,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE( 113)		this->assertSnapNext(HX_("2014-01-01",a1,e9,a3,42),HX_("2014-01-01",a1,e9,a3,42),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),113,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 114)		this->assertSnapNext(HX_("2014-01-01",a1,e9,a3,42),HX_("2014-01-01",a1,e9,a3,42),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),114,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 115)		this->assertSnapNext(HX_("2014-01-02",a2,e9,a3,42),HX_("2014-01-01",a1,e9,a3,42),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),115,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 116)		this->assertSnapNext(HX_("2014-01-01",a1,e9,a3,42),HX_("2013-12-31",9d,40,1e,ad),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),116,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 117)		this->assertSnapNext(HX_("2014-12-21",7f,b6,b3,d6),HX_("2014-12-17",a6,b5,b3,d6),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),117,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 118)		this->assertSnapNext(HX_("2014-12-21",7f,b6,b3,d6),HX_("2014-12-18",a7,b5,b3,d6),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),118,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 119)		this->assertSnapNext(HX_("2015-01-01",62,60,39,6c),HX_("2014-12-12",a1,b5,b3,d6),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),119,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 120)		this->assertSnapNext(HX_("2015-01-01",62,60,39,6c),HX_("2014-12-18",a7,b5,b3,d6),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),120,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 121)		this->assertSnapNext(HX_("2015-01-01",62,60,39,6c),HX_("2014-05-12",fd,c4,48,45),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),121,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 122)		this->assertSnapNext(HX_("2015-01-01",62,60,39,6c),HX_("2014-12-18",a7,b5,b3,d6),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),122,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapNext",cf,1a,44,7c)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testSnapNext,(void))

void TestLocalDate_obj::testSnapPrev(){
            	HX_STACK_FRAME("thx.TestLocalDate","testSnapPrev",0xc49f62e0,"thx.TestLocalDate.testSnapPrev","thx/TestLocalDate.hx",125,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE( 126)		this->assertSnapPrev(HX_("2013-12-31",9d,40,1e,ad),HX_("2014-01-01",a1,e9,a3,42),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),126,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 127)		this->assertSnapPrev(HX_("2013-12-31",9d,40,1e,ad),HX_("2014-01-01",a1,e9,a3,42),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),127,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 128)		this->assertSnapPrev(HX_("2013-12-31",9d,40,1e,ad),HX_("2014-01-01",a1,e9,a3,42),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),128,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 129)		this->assertSnapPrev(HX_("2013-12-30",9c,40,1e,ad),HX_("2013-12-31",9d,40,1e,ad),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),129,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 130)		this->assertSnapPrev(HX_("2014-12-14",a3,b5,b3,d6),HX_("2014-12-17",a6,b5,b3,d6),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),130,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 131)		this->assertSnapPrev(HX_("2014-12-14",a3,b5,b3,d6),HX_("2014-12-18",a7,b5,b3,d6),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),131,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 132)		this->assertSnapPrev(HX_("2014-12-01",c1,b4,b3,d6),HX_("2014-12-12",a1,b5,b3,d6),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),132,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 133)		this->assertSnapPrev(HX_("2014-12-01",c1,b4,b3,d6),HX_("2014-12-01",c1,b4,b3,d6),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),133,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 134)		this->assertSnapPrev(HX_("2014-12-01",c1,b4,b3,d6),HX_("2014-12-18",a7,b5,b3,d6),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),134,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 135)		this->assertSnapPrev(HX_("2014-01-01",a1,e9,a3,42),HX_("2014-05-12",fd,c4,48,45),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),135,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 136)		this->assertSnapPrev(HX_("2014-01-01",a1,e9,a3,42),HX_("2014-12-18",a7,b5,b3,d6),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),136,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapPrev",cf,54,a0,7d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testSnapPrev,(void))

void TestLocalDate_obj::testSnapTo(){
            	HX_STACK_FRAME("thx.TestLocalDate","testSnapTo",0xbd0a4428,"thx.TestLocalDate.testSnapTo","thx/TestLocalDate.hx",139,0x01342be2)
            	HX_STACK_THIS(this)
HXLINE( 140)		this->assertSnapTo(HX_("2014-01-01",a1,e9,a3,42),HX_("2014-01-01",a1,e9,a3,42),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),140,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 141)		this->assertSnapTo(HX_("2014-01-01",a1,e9,a3,42),HX_("2014-01-01",a1,e9,a3,42),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),141,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 142)		this->assertSnapTo(HX_("2014-01-01",a1,e9,a3,42),HX_("2014-01-01",a1,e9,a3,42),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),142,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 143)		this->assertSnapTo(HX_("2013-12-31",9d,40,1e,ad),HX_("2013-12-31",9d,40,1e,ad),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),143,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 144)		this->assertSnapTo(HX_("2014-12-14",a3,b5,b3,d6),HX_("2014-12-17",a6,b5,b3,d6),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),144,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 145)		this->assertSnapTo(HX_("2014-12-21",7f,b6,b3,d6),HX_("2014-12-18",a7,b5,b3,d6),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),145,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 146)		this->assertSnapTo(HX_("2014-12-01",c1,b4,b3,d6),HX_("2014-12-12",a1,b5,b3,d6),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),146,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 147)		this->assertSnapTo(HX_("2015-01-01",62,60,39,6c),HX_("2014-12-18",a7,b5,b3,d6),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),147,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 148)		this->assertSnapTo(HX_("2014-01-01",a1,e9,a3,42),HX_("2014-05-12",fd,c4,48,45),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),148,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 149)		this->assertSnapTo(HX_("2015-01-01",62,60,39,6c),HX_("2014-12-18",a7,b5,b3,d6),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestLocalDate.hx",b7,d2,ad,e4),149,HX_("thx.TestLocalDate",fd,64,f4,92),HX_("testSnapTo",57,8c,85,aa)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLocalDate_obj,testSnapTo,(void))

void TestLocalDate_obj::assertSnapTo(::String expected,::String date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestLocalDate","assertSnapTo",0xc57a67dc,"thx.TestLocalDate.assertSnapTo","thx/TestLocalDate.hx",152,0x01342be2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 153)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(date);
HXDLIN( 153)		HX_VARI( Int,t) = ::thx::_LocalDate::LocalDate_Impl__obj::snapTo(_hx_tmp,period);
HXLINE( 155)		HX_VARI( Int,self) = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(expected);
HXDLIN( 155)		Bool _hx_tmp1 = (self == t);
HXLINE( 156)		::String _hx_tmp2 = ((((HX_("expected ",a8,7a,f8,e9) + date) + HX_(" to snap to ",94,e4,0d,46)) + expected) + HX_(" for ",17,f1,92,b0));
HXDLIN( 156)		::String _hx_tmp3 = ::Std_obj::string(period);
HXDLIN( 156)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 156)		::String _hx_tmp5 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(t);
HXLINE( 154)		::utest::Assert_obj::isTrue(_hx_tmp1,(_hx_tmp4 + _hx_tmp5),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestLocalDate_obj,assertSnapTo,(void))

void TestLocalDate_obj::assertSnapPrev(::String expected,::String date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestLocalDate","assertSnapPrev",0xe426db94,"thx.TestLocalDate.assertSnapPrev","thx/TestLocalDate.hx",161,0x01342be2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 162)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(date);
HXDLIN( 162)		HX_VARI( Int,t) = ::thx::_LocalDate::LocalDate_Impl__obj::snapPrev(_hx_tmp,period);
HXLINE( 164)		HX_VARI( Int,self) = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(expected);
HXDLIN( 164)		Bool _hx_tmp1 = (self == t);
HXLINE( 165)		::String _hx_tmp2 = ((((HX_("expected ",a8,7a,f8,e9) + date) + HX_(" to snap before ",90,ec,cb,0f)) + expected) + HX_(" for ",17,f1,92,b0));
HXDLIN( 165)		::String _hx_tmp3 = ::Std_obj::string(period);
HXDLIN( 165)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 165)		::String _hx_tmp5 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(t);
HXLINE( 163)		::utest::Assert_obj::isTrue(_hx_tmp1,(_hx_tmp4 + _hx_tmp5),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestLocalDate_obj,assertSnapPrev,(void))

void TestLocalDate_obj::assertSnapNext(::String expected,::String date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestLocalDate","assertSnapNext",0xe2caa194,"thx.TestLocalDate.assertSnapNext","thx/TestLocalDate.hx",170,0x01342be2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 171)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(date);
HXDLIN( 171)		HX_VARI( Int,t) = ::thx::_LocalDate::LocalDate_Impl__obj::snapNext(_hx_tmp,period);
HXLINE( 173)		HX_VARI( Int,self) = ::thx::_LocalDate::LocalDate_Impl__obj::fromString(expected);
HXDLIN( 173)		Bool _hx_tmp1 = (self == t);
HXLINE( 174)		::String _hx_tmp2 = ((((HX_("expected ",a8,7a,f8,e9) + date) + HX_(" to snap after ",95,0f,fc,c6)) + expected) + HX_(" for ",17,f1,92,b0));
HXDLIN( 174)		::String _hx_tmp3 = ::Std_obj::string(period);
HXDLIN( 174)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 174)		::String _hx_tmp5 = ::thx::_LocalDate::LocalDate_Impl__obj::toString(t);
HXLINE( 172)		::utest::Assert_obj::isTrue(_hx_tmp1,(_hx_tmp4 + _hx_tmp5),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestLocalDate_obj,assertSnapNext,(void))


TestLocalDate_obj::TestLocalDate_obj()
{
}

hx::Val TestLocalDate_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"date") ) { return hx::Val( date); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testAdd") ) { return hx::Val( testAdd_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tomorrow") ) { return hx::Val( tomorrow); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testCreate") ) { return hx::Val( testCreate_dyn()); }
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapTo") ) { return hx::Val( testSnapTo_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testCompare") ) { return hx::Val( testCompare_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testToString") ) { return hx::Val( testToString_dyn()); }
		if (HX_FIELD_EQ(inName,"testAddMonth") ) { return hx::Val( testAddMonth_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapNext") ) { return hx::Val( testSnapNext_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapPrev") ) { return hx::Val( testSnapPrev_dyn()); }
		if (HX_FIELD_EQ(inName,"assertSnapTo") ) { return hx::Val( assertSnapTo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromToDate") ) { return hx::Val( testFromToDate_dyn()); }
		if (HX_FIELD_EQ(inName,"testFromToTime") ) { return hx::Val( testFromToTime_dyn()); }
		if (HX_FIELD_EQ(inName,"assertSnapPrev") ) { return hx::Val( assertSnapPrev_dyn()); }
		if (HX_FIELD_EQ(inName,"assertSnapNext") ) { return hx::Val( assertSnapNext_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testFromToString") ) { return hx::Val( testFromToString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestLocalDate_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"date") ) { date=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tomorrow") ) { tomorrow=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestLocalDate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("date","\x2e","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("tomorrow","\x05","\x21","\xbc","\xbc"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestLocalDate_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestLocalDate_obj,date),HX_HCSTRING("date","\x2e","\x56","\x63","\x42")},
	{hx::fsInt,(int)offsetof(TestLocalDate_obj,tomorrow),HX_HCSTRING("tomorrow","\x05","\x21","\xbc","\xbc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestLocalDate_obj_sStaticStorageInfo = 0;
#endif

static ::String TestLocalDate_obj_sMemberFields[] = {
	HX_HCSTRING("date","\x2e","\x56","\x63","\x42"),
	HX_HCSTRING("tomorrow","\x05","\x21","\xbc","\xbc"),
	HX_HCSTRING("testCreate","\xee","\xac","\x03","\x95"),
	HX_HCSTRING("testToString","\x1e","\xf7","\x75","\xab"),
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testCompare","\x73","\x06","\x32","\x40"),
	HX_HCSTRING("testFromToDate","\x45","\xed","\x53","\x5b"),
	HX_HCSTRING("testFromToTime","\x24","\x63","\xed","\x65"),
	HX_HCSTRING("testFromToString","\xa8","\xf3","\xc5","\xb8"),
	HX_HCSTRING("testAdd","\xef","\x60","\xb8","\xbd"),
	HX_HCSTRING("testAddMonth","\xd1","\x13","\xc4","\xf8"),
	HX_HCSTRING("testSnapNext","\xcf","\x1a","\x44","\x7c"),
	HX_HCSTRING("testSnapPrev","\xcf","\x54","\xa0","\x7d"),
	HX_HCSTRING("testSnapTo","\x57","\x8c","\x85","\xaa"),
	HX_HCSTRING("assertSnapTo","\xcb","\x59","\x7b","\x7e"),
	HX_HCSTRING("assertSnapPrev","\x43","\x67","\xbb","\x94"),
	HX_HCSTRING("assertSnapNext","\x43","\x2d","\x5f","\x93"),
	::String(null()) };

static void TestLocalDate_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestLocalDate_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestLocalDate_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestLocalDate_obj::__mClass,"__mClass");
};

#endif

hx::Class TestLocalDate_obj::__mClass;

void TestLocalDate_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestLocalDate","\xfd","\x64","\xf4","\x92");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestLocalDate_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestLocalDate_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestLocalDate_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestLocalDate_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestLocalDate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestLocalDate_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
