// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_TestBitSet
#include <thx/TestBitSet.h>
#endif
#ifndef INCLUDED_thx__BitSet_BitSet_Impl_
#include <thx/_BitSet/BitSet_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestBitSet_obj::__construct(){
            	HX_STACK_FRAME("thx.TestBitSet","new",0xc981cc03,"thx.TestBitSet.new","thx/TestBitSet.hx",7,0x02b8382c)
            	HX_STACK_THIS(this)
            	}

Dynamic TestBitSet_obj::__CreateEmpty() { return new TestBitSet_obj; }

hx::ObjectPtr< TestBitSet_obj > TestBitSet_obj::__new()
{
	hx::ObjectPtr< TestBitSet_obj > _hx_result = new TestBitSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestBitSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestBitSet_obj > _hx_result = new TestBitSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestBitSet_obj::testBitSet(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,bits) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",14,0x02b8382c)
HXLINE(  14)			::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)0);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Array< Int >,bits) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",15,0x02b8382c)
HXLINE(  15)			::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)-1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2,::Array< Int >,bits) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",16,0x02b8382c)
HXLINE(  16)			::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3,::Array< Int >,bits) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",17,0x02b8382c)
HXLINE(  17)			::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)4);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_4,::Array< Int >,bits) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",48,0x02b8382c)
HXLINE(  48)			::thx::_BitSet::BitSet_Impl__obj::at(bits,(::thx::_BitSet::BitSet_Impl__obj::get_length(bits) + (int)1));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestBitSet","testBitSet",0x5162ad84,"thx.TestBitSet.testBitSet","thx/TestBitSet.hx",9,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  10)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  10)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN(  10)		HX_VARI( ::Array< Int >,bits) = this1;
HXLINE(  11)		::utest::Assert_obj::same((int)0,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),11,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  12)		::String _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  12)		::utest::Assert_obj::same(HX_("",00,00,00,00),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),12,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  14)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(bits)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),14,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  15)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1(bits)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),15,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  16)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_2(bits)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),16,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  17)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_3(bits)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),17,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  19)		::thx::_BitSet::BitSet_Impl__obj::setAt(bits,(int)0,true);
HXLINE(  20)		::utest::Assert_obj::same((int)1,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),20,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  21)		::String _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  21)		::utest::Assert_obj::same(HX_("1",31,00,00,00),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),21,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  23)		::thx::_BitSet::BitSet_Impl__obj::setAt(bits,(int)1,true);
HXLINE(  24)		::utest::Assert_obj::same((int)2,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),24,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  25)		::String _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  25)		::utest::Assert_obj::same(HX_("11",e0,2a,00,00),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),25,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  27)		::thx::_BitSet::BitSet_Impl__obj::setAt(bits,(int)2,true);
HXLINE(  28)		::utest::Assert_obj::same((int)3,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),28,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  29)		::String _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  29)		::utest::Assert_obj::same(HX_("111",51,59,25,00),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),29,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  31)		::thx::_BitSet::BitSet_Impl__obj::setAt(bits,(int)1,false);
HXLINE(  32)		::utest::Assert_obj::same((int)3,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),32,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  33)		::String _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  33)		::utest::Assert_obj::same(HX_("101",72,58,25,00),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),33,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  36)		::thx::_BitSet::BitSet_Impl__obj::setAt(bits,(int)32,true);
HXLINE(  37)		::utest::Assert_obj::same((int)33,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),37,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  38)		::String _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  38)		::utest::Assert_obj::same(HX_("101000000000000000000000000000001",f3,f5,e3,18),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),38,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  40)		{
HXLINE(  40)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  40)			HX_VARI( Int,_g) = ::thx::_BitSet::BitSet_Impl__obj::get_length(bits);
HXDLIN(  40)			while((_g1 < _g)){
HXLINE(  40)				HX_VARI( Int,i) = _g1++;
HXLINE(  41)				Bool _hx_tmp6 = ::thx::Arrays_obj::contains(::Array_obj< Int >::__new(3)->init(0,(int)0)->init(1,(int)2)->init(2,(int)32),i,null());
HXDLIN(  41)				if (_hx_tmp6) {
HXLINE(  42)					Bool _hx_tmp7 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,i);
HXDLIN(  42)					::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),42,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
            				}
            				else {
HXLINE(  44)					Bool _hx_tmp8 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,i);
HXDLIN(  44)					::utest::Assert_obj::isFalse(_hx_tmp8,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),44,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
            				}
            			}
            		}
HXLINE(  48)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_4(bits)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),48,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  50)		{
HXLINE(  50)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(  50)			HX_VARI_NAME( Int,_g2,"_g") = ::thx::_BitSet::BitSet_Impl__obj::get_length(bits);
HXDLIN(  50)			while((_g11 < _g2)){
HXLINE(  50)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXDLIN(  50)				::thx::_BitSet::BitSet_Impl__obj::setAt(bits,i1,true);
            			}
            		}
HXLINE(  51)		::utest::Assert_obj::same((int)33,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),51,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  52)		::String _hx_tmp9 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  52)		::utest::Assert_obj::same(HX_("111111111111111111111111111111111",31,52,f5,c6),_hx_tmp9,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),52,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  54)		{
HXLINE(  54)			HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN(  54)			HX_VARI_NAME( Int,_g3,"_g") = ::thx::_BitSet::BitSet_Impl__obj::get_length(bits);
HXDLIN(  54)			while((_g12 < _g3)){
HXLINE(  54)				HX_VARI_NAME( Int,i2,"i") = _g12++;
HXDLIN(  54)				::thx::_BitSet::BitSet_Impl__obj::setAt(bits,i2,false);
            			}
            		}
HXLINE(  55)		::utest::Assert_obj::same((int)33,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),55,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
HXLINE(  56)		::String _hx_tmp10 = ::thx::_BitSet::BitSet_Impl__obj::toString(bits);
HXDLIN(  56)		::utest::Assert_obj::same(HX_("000000000000000000000000000000000",30,60,7d,16),_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),56,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testBitSet",c7,9e,ec,09)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testBitSet,(void))

void TestBitSet_obj::testFromBools(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,Bool value,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testFromBools",0xa2ef8df0,"thx.TestBitSet.testFromBools","thx/TestBitSet.hx",60,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(value,"value")
            			HX_STACK_ARG(i,"i")
HXLINE(  60)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,value);
HXDLIN(  60)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACK_FRAME("thx.TestBitSet","testFromBools",0xa2ef8df0,"thx.TestBitSet.testFromBools","thx/TestBitSet.hx",59,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  60)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  60)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN(  60)		HX_VARI( ::Array< Int >,bits) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(::Array_obj< Bool >::__new(4)->init(0,true)->init(1,false)->init(2,true)->init(3,true), ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE(  61)		::utest::Assert_obj::same((int)4,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),61,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromBools",8d,88,bb,9e)));
HXLINE(  62)		Bool _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)0);
HXDLIN(  62)		::utest::Assert_obj::same(true,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),62,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromBools",8d,88,bb,9e)));
HXLINE(  63)		Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)1);
HXDLIN(  63)		::utest::Assert_obj::same(false,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),63,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromBools",8d,88,bb,9e)));
HXLINE(  64)		Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)2);
HXDLIN(  64)		::utest::Assert_obj::same(true,_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),64,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromBools",8d,88,bb,9e)));
HXLINE(  65)		Bool _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)3);
HXDLIN(  65)		::utest::Assert_obj::same(true,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),65,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromBools",8d,88,bb,9e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testFromBools,(void))

void TestBitSet_obj::testToBools(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testToBools",0x801c31ff,"thx.TestBitSet.testToBools","thx/TestBitSet.hx",69,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE(  69)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN(  69)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Array< Int >,this2) HXARGC(1)
            		Bool _hx_run(Int index){
            			HX_STACK_FRAME("thx.TestBitSet","testToBools",0x801c31ff,"thx.TestBitSet.testToBools","thx/TestBitSet.hx",70,0x02b8382c)
            			HX_STACK_ARG(index,"index")
HXLINE(  70)			return ::thx::_BitSet::BitSet_Impl__obj::at(this2,index);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestBitSet","testToBools",0x801c31ff,"thx.TestBitSet.testToBools","thx/TestBitSet.hx",68,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  69)		HX_VARI( ::Array< ::String >,chars) = HX_("10101",f3,02,82,56).split(HX_("",00,00,00,00));
HXDLIN(  69)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  69)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN(  69)		HX_VARI( ::Array< Int >,bits) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE(  70)		HX_VARI_NAME( ::Array< Int >,this2,"this") = bits;
HXDLIN(  70)		::Array< Bool > _hx_tmp = ::thx::Ints_obj::range(::thx::_BitSet::BitSet_Impl__obj::get_length(this2),null(),null())->map( ::Dynamic(new _hx_Closure_1(this2)));
HXDLIN(  70)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(5)->init(0,true)->init(1,false)->init(2,true)->init(3,false)->init(4,true),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),70,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testToBools",5c,5b,45,40)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testToBools,(void))

void TestBitSet_obj::testToInt32s(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testToInt32s",0xd4cb17af,"thx.TestBitSet.testToInt32s","thx/TestBitSet.hx",74,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE(  74)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN(  74)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACK_FRAME("thx.TestBitSet","testToInt32s",0xd4cb17af,"thx.TestBitSet.testToInt32s","thx/TestBitSet.hx",73,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  74)		HX_VARI( ::Array< ::String >,chars) = HX_("10101",f3,02,82,56).split(HX_("",00,00,00,00));
HXDLIN(  74)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  74)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN(  74)		HX_VARI( ::Array< Int >,bits) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE(  75)		HX_VARI( ::Array< Int >,parts) = bits->slice((int)1,null());
HXLINE(  76)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)21),parts,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),76,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testToInt32s",b2,1f,a6,38)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testToInt32s,(void))

void TestBitSet_obj::testFromString(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testFromString",0x9db8060a,"thx.TestBitSet.testFromString","thx/TestBitSet.hx",80,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE(  80)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN(  80)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACK_FRAME("thx.TestBitSet","testFromString",0x9db8060a,"thx.TestBitSet.testFromString","thx/TestBitSet.hx",79,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  80)		HX_VARI( ::Array< ::String >,chars) = HX_("1011",7f,0b,88,20).split(HX_("",00,00,00,00));
HXDLIN(  80)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  80)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN(  80)		HX_VARI( ::Array< Int >,bits) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE(  81)		::utest::Assert_obj::same((int)4,::thx::_BitSet::BitSet_Impl__obj::get_length(bits),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),81,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromString",cd,54,67,f4)));
HXLINE(  82)		Bool _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)0);
HXDLIN(  82)		::utest::Assert_obj::same(true,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),82,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromString",cd,54,67,f4)));
HXLINE(  83)		Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)1);
HXDLIN(  83)		::utest::Assert_obj::same(false,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),83,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromString",cd,54,67,f4)));
HXLINE(  84)		Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)2);
HXDLIN(  84)		::utest::Assert_obj::same(true,_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),84,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromString",cd,54,67,f4)));
HXLINE(  85)		Bool _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::at(bits,(int)3);
HXDLIN(  85)		::utest::Assert_obj::same(true,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),85,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testFromString",cd,54,67,f4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testFromString,(void))

void TestBitSet_obj::testPresetLength(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,bits1) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testPresetLength",0x06e98f94,"thx.TestBitSet.testPresetLength","thx/TestBitSet.hx",94,0x02b8382c)
HXLINE(  94)			::thx::_BitSet::BitSet_Impl__obj::at(bits1,(int)35);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Array< Int >,bits2) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testPresetLength",0x06e98f94,"thx.TestBitSet.testPresetLength","thx/TestBitSet.hx",101,0x02b8382c)
HXLINE( 101)			::thx::_BitSet::BitSet_Impl__obj::at(bits2,(int)35);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestBitSet","testPresetLength",0x06e98f94,"thx.TestBitSet.testPresetLength","thx/TestBitSet.hx",88,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE(  89)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)35);
HXDLIN(  89)		::thx::Arrays_obj::resize(this1,(int)3,(int)0);
HXDLIN(  89)		HX_VARI( ::Array< Int >,bits1) = this1;
HXLINE(  90)		::utest::Assert_obj::same((int)35,::thx::_BitSet::BitSet_Impl__obj::get_length(bits1),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),90,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
HXLINE(  91)		{
HXLINE(  91)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  91)			while((_g < (int)35)){
HXLINE(  91)				HX_VARI( Int,i) = _g++;
HXLINE(  92)				Bool _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::at(bits1,i);
HXDLIN(  92)				::utest::Assert_obj::isFalse(_hx_tmp,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),92,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
            			}
            		}
HXLINE(  94)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(bits1)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),94,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
HXLINE(  96)		HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)35);
HXDLIN(  96)		::thx::Arrays_obj::resize(this2,(int)3,(int)0);
HXDLIN(  96)		{
HXLINE(  96)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  96)			HX_VARI_NAME( Int,_g2,"_g") = ::thx::_BitSet::BitSet_Impl__obj::get_length(this2);
HXDLIN(  96)			while((_g1 < _g2)){
HXLINE(  96)				HX_VARI_NAME( Int,i1,"i") = _g1++;
HXDLIN(  96)				::thx::_BitSet::BitSet_Impl__obj::setAt(this2,i1,true);
            			}
            		}
HXDLIN(  96)		HX_VARI( ::Array< Int >,bits2) = this2;
HXLINE(  97)		::utest::Assert_obj::same((int)35,::thx::_BitSet::BitSet_Impl__obj::get_length(bits2),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),97,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
HXLINE(  98)		{
HXLINE(  98)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN(  98)			while((_g3 < (int)35)){
HXLINE(  98)				HX_VARI_NAME( Int,i2,"i") = _g3++;
HXLINE(  99)				Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::at(bits2,i2);
HXDLIN(  99)				::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),99,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
            			}
            		}
HXLINE( 101)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1(bits2)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),101,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testPresetLength",17,55,1c,e3)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testPresetLength,(void))

void TestBitSet_obj::testConcat(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testConcat",0x283a5dc3,"thx.TestBitSet.testConcat","thx/TestBitSet.hx",105,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE( 105)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 105)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            			HX_STACK_FRAME("thx.TestBitSet","testConcat",0x283a5dc3,"thx.TestBitSet.testConcat","thx/TestBitSet.hx",106,0x02b8382c)
            			HX_STACK_ARG(acc1,"acc1")
            			HX_STACK_ARG(char1,"char1")
            			HX_STACK_ARG(i1,"i1")
HXLINE( 106)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 106)			return acc1;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACK_FRAME("thx.TestBitSet","testConcat",0x283a5dc3,"thx.TestBitSet.testConcat","thx/TestBitSet.hx",104,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 105)		HX_VARI( ::Array< ::String >,chars) = HX_("10101",f3,02,82,56).split(HX_("",00,00,00,00));
HXDLIN( 105)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 105)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 105)		HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 106)		HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("111",51,59,25,00).split(HX_("",00,00,00,00));
HXDLIN( 106)		HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 106)		::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 106)		HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 107)		HX_VARI( Int,length) = (::thx::_BitSet::BitSet_Impl__obj::get_length(b1) + ::thx::_BitSet::BitSet_Impl__obj::get_length(b2));
HXDLIN( 107)		HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,length);
HXDLIN( 107)		Int _hx_tmp = ::Std_obj::_hx_int(((Float)length / (Float)(int)32));
HXDLIN( 107)		::thx::Arrays_obj::resize(this3,((_hx_tmp + (int)1) + (int)1),(int)0);
HXDLIN( 107)		HX_VARI( ::Array< Int >,result) = this3;
HXDLIN( 107)		HX_VARI( Int,index) = (int)0;
HXDLIN( 107)		{
HXLINE( 107)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 107)			HX_VARI( Int,_g) = ::thx::_BitSet::BitSet_Impl__obj::get_length(b1);
HXDLIN( 107)			while((_g1 < _g)){
HXLINE( 107)				HX_VARI( Int,leftIndex) = _g1++;
HXDLIN( 107)				Int _hx_tmp1 = index++;
HXDLIN( 107)				Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::at(b1,leftIndex);
HXDLIN( 107)				::thx::_BitSet::BitSet_Impl__obj::setAt(result,_hx_tmp1,_hx_tmp2);
            			}
            		}
HXDLIN( 107)		{
HXLINE( 107)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 107)			HX_VARI_NAME( Int,_g2,"_g") = ::thx::_BitSet::BitSet_Impl__obj::get_length(b2);
HXDLIN( 107)			while((_g11 < _g2)){
HXLINE( 107)				HX_VARI( Int,rightIndex) = _g11++;
HXDLIN( 107)				Int _hx_tmp3 = index++;
HXDLIN( 107)				Bool _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::at(b2,rightIndex);
HXDLIN( 107)				::thx::_BitSet::BitSet_Impl__obj::setAt(result,_hx_tmp3,_hx_tmp4);
            			}
            		}
HXLINE( 108)		::String _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::toString(b1);
HXDLIN( 108)		::utest::Assert_obj::same(HX_("10101",f3,02,82,56),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),108,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
HXLINE( 109)		::String _hx_tmp6 = ::thx::_BitSet::BitSet_Impl__obj::toString(b2);
HXDLIN( 109)		::utest::Assert_obj::same(HX_("111",51,59,25,00),_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),109,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
HXLINE( 110)		::String _hx_tmp7 = ::thx::_BitSet::BitSet_Impl__obj::toString(result);
HXDLIN( 110)		::utest::Assert_obj::same(HX_("10101111",3e,70,ef,19),_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),110,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
HXLINE( 111)		::utest::Assert_obj::same((int)5,::thx::_BitSet::BitSet_Impl__obj::get_length(b1),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),111,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
HXLINE( 112)		::utest::Assert_obj::same((int)3,::thx::_BitSet::BitSet_Impl__obj::get_length(b2),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),112,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
HXLINE( 113)		::utest::Assert_obj::same((int)8,::thx::_BitSet::BitSet_Impl__obj::get_length(result),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),113,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testConcat",06,4f,c4,e0)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testConcat,(void))

void TestBitSet_obj::testExpand(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testExpand",0x24dd4309,"thx.TestBitSet.testExpand","thx/TestBitSet.hx",117,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE( 117)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 117)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACK_FRAME("thx.TestBitSet","testExpand",0x24dd4309,"thx.TestBitSet.testExpand","thx/TestBitSet.hx",116,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 117)		HX_VARI( ::Array< ::String >,chars) = HX_("1011",7f,0b,88,20).split(HX_("",00,00,00,00));
HXDLIN( 117)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 117)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 117)		HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 118)		HX_VARI( ::Array< Int >,b2) = ::thx::_BitSet::BitSet_Impl__obj::expand(b1,(int)1);
HXLINE( 119)		HX_VARI( ::Array< Int >,b3) = ::thx::_BitSet::BitSet_Impl__obj::expand(b1,(int)3);
HXLINE( 120)		::String _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::toString(b1);
HXDLIN( 120)		::utest::Assert_obj::same(HX_("1011",7f,0b,88,20),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),120,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testExpand",4c,34,67,dd)));
HXLINE( 121)		::String _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::toString(b2);
HXDLIN( 121)		::utest::Assert_obj::same(HX_("11001111",a0,8a,29,dd),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),121,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testExpand",4c,34,67,dd)));
HXLINE( 122)		::String _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::toString(b3);
HXDLIN( 122)		::utest::Assert_obj::same(HX_("1111000011111111",40,bd,24,31),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),122,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testExpand",4c,34,67,dd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testExpand,(void))

void TestBitSet_obj::testEquals(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",126,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE( 126)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 126)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            			HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",127,0x02b8382c)
            			HX_STACK_ARG(acc1,"acc1")
            			HX_STACK_ARG(char1,"char1")
            			HX_STACK_ARG(i1,"i1")
HXLINE( 127)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 127)			return acc1;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            			HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",128,0x02b8382c)
            			HX_STACK_ARG(acc2,"acc2")
            			HX_STACK_ARG(char2,"char2")
            			HX_STACK_ARG(i2,"i2")
HXLINE( 128)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 128)			return acc2;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            			HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",129,0x02b8382c)
            			HX_STACK_ARG(acc3,"acc3")
            			HX_STACK_ARG(char3,"char3")
            			HX_STACK_ARG(i3,"i3")
HXLINE( 129)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 129)			return acc3;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            			HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",130,0x02b8382c)
            			HX_STACK_ARG(acc4,"acc4")
            			HX_STACK_ARG(char4,"char4")
            			HX_STACK_ARG(i4,"i4")
HXLINE( 130)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 130)			return acc4;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACK_FRAME("thx.TestBitSet","testEquals",0x205d42ee,"thx.TestBitSet.testEquals","thx/TestBitSet.hx",125,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 126)		HX_VARI( ::Array< ::String >,chars) = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 126)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 126)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 126)		HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 127)		HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 127)		HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 127)		::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 127)		HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 128)		HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("101011001",13,03,92,97).split(HX_("",00,00,00,00));
HXDLIN( 128)		HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 128)		::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 128)		HX_VARI( ::Array< Int >,b3) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXLINE( 129)		HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("10101101",5f,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 129)		HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 129)		::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 129)		HX_VARI( ::Array< Int >,b4) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXLINE( 130)		HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("1010110",92,10,3f,7d).split(HX_("",00,00,00,00));
HXDLIN( 130)		HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 130)		::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 130)		HX_VARI( ::Array< Int >,b5) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXLINE( 131)		Bool _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b2);
HXDLIN( 131)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),131,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 132)		Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b3);
HXDLIN( 132)		::utest::Assert_obj::isFalse(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),132,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 133)		Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b4);
HXDLIN( 133)		::utest::Assert_obj::isFalse(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),133,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 134)		Bool _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b5);
HXDLIN( 134)		::utest::Assert_obj::isFalse(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),134,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 135)		Bool _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b2);
HXDLIN( 135)		::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),135,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 136)		Bool _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b3);
HXDLIN( 136)		::utest::Assert_obj::isFalse(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),136,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 137)		Bool _hx_tmp6 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b4);
HXDLIN( 137)		::utest::Assert_obj::isFalse(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),137,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
HXLINE( 138)		Bool _hx_tmp7 = ::thx::_BitSet::BitSet_Impl__obj::equals(b1,b5);
HXDLIN( 138)		::utest::Assert_obj::isFalse(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),138,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testEquals",31,34,e7,d8)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testEquals,(void))

void TestBitSet_obj::testNotEquals(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",142,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE( 142)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 142)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            			HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",143,0x02b8382c)
            			HX_STACK_ARG(acc1,"acc1")
            			HX_STACK_ARG(char1,"char1")
            			HX_STACK_ARG(i1,"i1")
HXLINE( 143)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 143)			return acc1;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            			HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",144,0x02b8382c)
            			HX_STACK_ARG(acc2,"acc2")
            			HX_STACK_ARG(char2,"char2")
            			HX_STACK_ARG(i2,"i2")
HXLINE( 144)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 144)			return acc2;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            			HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",145,0x02b8382c)
            			HX_STACK_ARG(acc3,"acc3")
            			HX_STACK_ARG(char3,"char3")
            			HX_STACK_ARG(i3,"i3")
HXLINE( 145)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 145)			return acc3;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            			HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",146,0x02b8382c)
            			HX_STACK_ARG(acc4,"acc4")
            			HX_STACK_ARG(char4,"char4")
            			HX_STACK_ARG(i4,"i4")
HXLINE( 146)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 146)			return acc4;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACK_FRAME("thx.TestBitSet","testNotEquals",0x744a4e63,"thx.TestBitSet.testNotEquals","thx/TestBitSet.hx",141,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 142)		HX_VARI( ::Array< ::String >,chars) = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 142)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 142)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 142)		HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 143)		HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 143)		HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 143)		::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 143)		HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 144)		HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("101011001",13,03,92,97).split(HX_("",00,00,00,00));
HXDLIN( 144)		HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 144)		::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 144)		HX_VARI( ::Array< Int >,b3) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXLINE( 145)		HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("10101101",5f,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 145)		HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 145)		::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 145)		HX_VARI( ::Array< Int >,b4) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXLINE( 146)		HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("1010110",92,10,3f,7d).split(HX_("",00,00,00,00));
HXDLIN( 146)		HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 146)		::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 146)		HX_VARI( ::Array< Int >,b5) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXLINE( 147)		Bool _hx_tmp = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b2);
HXDLIN( 147)		::utest::Assert_obj::isFalse(_hx_tmp,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),147,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 148)		Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b3);
HXDLIN( 148)		::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),148,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 149)		Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b4);
HXDLIN( 149)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),149,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 150)		Bool _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b5);
HXDLIN( 150)		::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),150,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 151)		Bool _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b2);
HXDLIN( 151)		::utest::Assert_obj::isFalse(_hx_tmp4,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),151,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 152)		Bool _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b3);
HXDLIN( 152)		::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),152,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 153)		Bool _hx_tmp6 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b4);
HXDLIN( 153)		::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),153,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
HXLINE( 154)		Bool _hx_tmp7 = ::thx::_BitSet::BitSet_Impl__obj::notEquals(b1,b5);
HXDLIN( 154)		::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),154,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNotEquals",00,49,16,70)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testNotEquals,(void))

void TestBitSet_obj::testAnd(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",158,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE( 158)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 158)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            			HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",159,0x02b8382c)
            			HX_STACK_ARG(acc1,"acc1")
            			HX_STACK_ARG(char1,"char1")
            			HX_STACK_ARG(i1,"i1")
HXLINE( 159)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 159)			return acc1;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            			HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",160,0x02b8382c)
            			HX_STACK_ARG(acc2,"acc2")
            			HX_STACK_ARG(char2,"char2")
            			HX_STACK_ARG(i2,"i2")
HXLINE( 160)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 160)			return acc2;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            			HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",161,0x02b8382c)
            			HX_STACK_ARG(acc3,"acc3")
            			HX_STACK_ARG(char3,"char3")
            			HX_STACK_ARG(i3,"i3")
HXLINE( 161)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 161)			return acc3;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            			HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",162,0x02b8382c)
            			HX_STACK_ARG(acc4,"acc4")
            			HX_STACK_ARG(char4,"char4")
            			HX_STACK_ARG(i4,"i4")
HXLINE( 162)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 162)			return acc4;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc5,::String char5,Int i5){
            			HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",163,0x02b8382c)
            			HX_STACK_ARG(acc5,"acc5")
            			HX_STACK_ARG(char5,"char5")
            			HX_STACK_ARG(i5,"i5")
HXLINE( 163)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc5,i5,(char5 == HX_("1",31,00,00,00)));
HXDLIN( 163)			return acc5;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_6) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc6,::String char6,Int i6){
            			HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",164,0x02b8382c)
            			HX_STACK_ARG(acc6,"acc6")
            			HX_STACK_ARG(char6,"char6")
            			HX_STACK_ARG(i6,"i6")
HXLINE( 164)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc6,i6,(char6 == HX_("1",31,00,00,00)));
HXDLIN( 164)			return acc6;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7,::Array< Int >,b1,::Array< Int >,b4) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",165,0x02b8382c)
HXLINE( 165)			::thx::_BitSet::BitSet_Impl__obj::_hx_and(b1,b4);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8,::Array< Int >,b1,::Array< Int >,b5) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",166,0x02b8382c)
HXLINE( 166)			::thx::_BitSet::BitSet_Impl__obj::_hx_and(b1,b5);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestBitSet","testAnd",0x8f5072c8,"thx.TestBitSet.testAnd","thx/TestBitSet.hx",157,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 158)		HX_VARI( ::Array< ::String >,chars) = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 158)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 158)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 158)		HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 159)		HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 159)		HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 159)		::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 159)		HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 160)		HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 160)		HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 160)		::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 160)		HX_VARI( ::Array< Int >,b3) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXLINE( 161)		HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("111",51,59,25,00).split(HX_("",00,00,00,00));
HXDLIN( 161)		HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 161)		::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 161)		HX_VARI( ::Array< Int >,b4) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXLINE( 162)		HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("000",30,96,24,00).split(HX_("",00,00,00,00));
HXDLIN( 162)		HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 162)		::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 162)		HX_VARI( ::Array< Int >,b5) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXLINE( 163)		HX_VARI_NAME( ::Array< ::String >,chars5,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 163)		HX_VARI_NAME( ::Array< Int >,this6,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 163)		::thx::Arrays_obj::resize(this6,(int)2,(int)0);
HXDLIN( 163)		::Array< Int > _hx_tmp = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars5, ::Dynamic(new _hx_Closure_5()),this6)) );
HXDLIN( 163)		::Array< Int > _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::_hx_and(b1,b2);
HXDLIN( 163)		Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp,_hx_tmp1);
HXDLIN( 163)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),163,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testAnd",a5,69,b8,bd)));
HXLINE( 164)		HX_VARI_NAME( ::Array< ::String >,chars6,"chars") = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 164)		HX_VARI_NAME( ::Array< Int >,this7,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 164)		::thx::Arrays_obj::resize(this7,(int)2,(int)0);
HXDLIN( 164)		::Array< Int > _hx_tmp3 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars6, ::Dynamic(new _hx_Closure_6()),this7)) );
HXDLIN( 164)		::Array< Int > _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::_hx_and(b1,b3);
HXDLIN( 164)		Bool _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp3,_hx_tmp4);
HXDLIN( 164)		::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),164,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testAnd",a5,69,b8,bd)));
HXLINE( 165)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_7(b1,b4)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),165,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testAnd",a5,69,b8,bd)));
HXLINE( 166)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_8(b1,b5)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),166,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testAnd",a5,69,b8,bd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testAnd,(void))

void TestBitSet_obj::testOr(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",170,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE( 170)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 170)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            			HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",171,0x02b8382c)
            			HX_STACK_ARG(acc1,"acc1")
            			HX_STACK_ARG(char1,"char1")
            			HX_STACK_ARG(i1,"i1")
HXLINE( 171)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 171)			return acc1;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            			HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",172,0x02b8382c)
            			HX_STACK_ARG(acc2,"acc2")
            			HX_STACK_ARG(char2,"char2")
            			HX_STACK_ARG(i2,"i2")
HXLINE( 172)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 172)			return acc2;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            			HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",173,0x02b8382c)
            			HX_STACK_ARG(acc3,"acc3")
            			HX_STACK_ARG(char3,"char3")
            			HX_STACK_ARG(i3,"i3")
HXLINE( 173)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 173)			return acc3;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            			HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",174,0x02b8382c)
            			HX_STACK_ARG(acc4,"acc4")
            			HX_STACK_ARG(char4,"char4")
            			HX_STACK_ARG(i4,"i4")
HXLINE( 174)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 174)			return acc4;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc5,::String char5,Int i5){
            			HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",175,0x02b8382c)
            			HX_STACK_ARG(acc5,"acc5")
            			HX_STACK_ARG(char5,"char5")
            			HX_STACK_ARG(i5,"i5")
HXLINE( 175)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc5,i5,(char5 == HX_("1",31,00,00,00)));
HXDLIN( 175)			return acc5;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_6) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc6,::String char6,Int i6){
            			HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",176,0x02b8382c)
            			HX_STACK_ARG(acc6,"acc6")
            			HX_STACK_ARG(char6,"char6")
            			HX_STACK_ARG(i6,"i6")
HXLINE( 176)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc6,i6,(char6 == HX_("1",31,00,00,00)));
HXDLIN( 176)			return acc6;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7,::Array< Int >,b1,::Array< Int >,b4) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",177,0x02b8382c)
HXLINE( 177)			::thx::_BitSet::BitSet_Impl__obj::_hx_or(b1,b4);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8,::Array< Int >,b1,::Array< Int >,b5) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",178,0x02b8382c)
HXLINE( 178)			::thx::_BitSet::BitSet_Impl__obj::_hx_or(b1,b5);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestBitSet","testOr",0x9a78f252,"thx.TestBitSet.testOr","thx/TestBitSet.hx",169,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 170)		HX_VARI( ::Array< ::String >,chars) = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 170)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 170)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 170)		HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 171)		HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 171)		HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 171)		::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 171)		HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 172)		HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 172)		HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 172)		::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 172)		HX_VARI( ::Array< Int >,b3) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXLINE( 173)		HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("111",51,59,25,00).split(HX_("",00,00,00,00));
HXDLIN( 173)		HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 173)		::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 173)		HX_VARI( ::Array< Int >,b4) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXLINE( 174)		HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("000",30,96,24,00).split(HX_("",00,00,00,00));
HXDLIN( 174)		HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 174)		::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 174)		HX_VARI( ::Array< Int >,b5) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXLINE( 175)		HX_VARI_NAME( ::Array< ::String >,chars5,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 175)		HX_VARI_NAME( ::Array< Int >,this6,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 175)		::thx::Arrays_obj::resize(this6,(int)2,(int)0);
HXDLIN( 175)		::Array< Int > _hx_tmp = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars5, ::Dynamic(new _hx_Closure_5()),this6)) );
HXDLIN( 175)		::Array< Int > _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::_hx_or(b1,b2);
HXDLIN( 175)		Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp,_hx_tmp1);
HXDLIN( 175)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),175,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testOr",15,46,3a,d5)));
HXLINE( 176)		HX_VARI_NAME( ::Array< ::String >,chars6,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 176)		HX_VARI_NAME( ::Array< Int >,this7,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 176)		::thx::Arrays_obj::resize(this7,(int)2,(int)0);
HXDLIN( 176)		::Array< Int > _hx_tmp3 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars6, ::Dynamic(new _hx_Closure_6()),this7)) );
HXDLIN( 176)		::Array< Int > _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::_hx_or(b1,b3);
HXDLIN( 176)		Bool _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp3,_hx_tmp4);
HXDLIN( 176)		::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),176,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testOr",15,46,3a,d5)));
HXLINE( 177)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_7(b1,b4)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),177,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testOr",15,46,3a,d5)));
HXLINE( 178)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_8(b1,b5)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),178,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testOr",15,46,3a,d5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testOr,(void))

void TestBitSet_obj::testXor(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",182,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE( 182)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 182)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            			HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",183,0x02b8382c)
            			HX_STACK_ARG(acc1,"acc1")
            			HX_STACK_ARG(char1,"char1")
            			HX_STACK_ARG(i1,"i1")
HXLINE( 183)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 183)			return acc1;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            			HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",184,0x02b8382c)
            			HX_STACK_ARG(acc2,"acc2")
            			HX_STACK_ARG(char2,"char2")
            			HX_STACK_ARG(i2,"i2")
HXLINE( 184)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 184)			return acc2;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            			HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",185,0x02b8382c)
            			HX_STACK_ARG(acc3,"acc3")
            			HX_STACK_ARG(char3,"char3")
            			HX_STACK_ARG(i3,"i3")
HXLINE( 185)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 185)			return acc3;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            			HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",186,0x02b8382c)
            			HX_STACK_ARG(acc4,"acc4")
            			HX_STACK_ARG(char4,"char4")
            			HX_STACK_ARG(i4,"i4")
HXLINE( 186)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 186)			return acc4;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc5,::String char5,Int i5){
            			HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",187,0x02b8382c)
            			HX_STACK_ARG(acc5,"acc5")
            			HX_STACK_ARG(char5,"char5")
            			HX_STACK_ARG(i5,"i5")
HXLINE( 187)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc5,i5,(char5 == HX_("1",31,00,00,00)));
HXDLIN( 187)			return acc5;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_6) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc6,::String char6,Int i6){
            			HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",188,0x02b8382c)
            			HX_STACK_ARG(acc6,"acc6")
            			HX_STACK_ARG(char6,"char6")
            			HX_STACK_ARG(i6,"i6")
HXLINE( 188)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc6,i6,(char6 == HX_("1",31,00,00,00)));
HXDLIN( 188)			return acc6;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7,::Array< Int >,b1,::Array< Int >,b4) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",189,0x02b8382c)
HXLINE( 189)			::thx::_BitSet::BitSet_Impl__obj::_hx_xor(b1,b4);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8,::Array< Int >,b1,::Array< Int >,b5) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",190,0x02b8382c)
HXLINE( 190)			::thx::_BitSet::BitSet_Impl__obj::_hx_xor(b1,b5);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestBitSet","testXor",0x8f61e78c,"thx.TestBitSet.testXor","thx/TestBitSet.hx",181,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 182)		HX_VARI( ::Array< ::String >,chars) = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 182)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 182)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 182)		HX_VARI( ::Array< Int >,b1) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 183)		HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 183)		HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 183)		::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 183)		HX_VARI( ::Array< Int >,b2) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXLINE( 184)		HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 184)		HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 184)		::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 184)		HX_VARI( ::Array< Int >,b3) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXLINE( 185)		HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("111",51,59,25,00).split(HX_("",00,00,00,00));
HXDLIN( 185)		HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 185)		::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 185)		HX_VARI( ::Array< Int >,b4) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXLINE( 186)		HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("000",30,96,24,00).split(HX_("",00,00,00,00));
HXDLIN( 186)		HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 186)		::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 186)		HX_VARI( ::Array< Int >,b5) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXLINE( 187)		HX_VARI_NAME( ::Array< ::String >,chars5,"chars") = HX_("01010011",22,b4,b3,36).split(HX_("",00,00,00,00));
HXDLIN( 187)		HX_VARI_NAME( ::Array< Int >,this6,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 187)		::thx::Arrays_obj::resize(this6,(int)2,(int)0);
HXDLIN( 187)		::Array< Int > _hx_tmp = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars5, ::Dynamic(new _hx_Closure_5()),this6)) );
HXDLIN( 187)		::Array< Int > _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::_hx_xor(b1,b2);
HXDLIN( 187)		Bool _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp,_hx_tmp1);
HXDLIN( 187)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),187,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testXor",69,de,c9,bd)));
HXLINE( 188)		HX_VARI_NAME( ::Array< ::String >,chars6,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 188)		HX_VARI_NAME( ::Array< Int >,this7,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 188)		::thx::Arrays_obj::resize(this7,(int)2,(int)0);
HXDLIN( 188)		::Array< Int > _hx_tmp3 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars6, ::Dynamic(new _hx_Closure_6()),this7)) );
HXDLIN( 188)		::Array< Int > _hx_tmp4 = ::thx::_BitSet::BitSet_Impl__obj::_hx_xor(b1,b3);
HXDLIN( 188)		Bool _hx_tmp5 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp3,_hx_tmp4);
HXDLIN( 188)		::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),188,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testXor",69,de,c9,bd)));
HXLINE( 189)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_7(b1,b4)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),189,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testXor",69,de,c9,bd)));
HXLINE( 190)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_8(b1,b5)),null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),190,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testXor",69,de,c9,bd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testXor,(void))

void TestBitSet_obj::testNegate(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",194,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE( 194)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 194)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc1,::String char1,Int i1){
            			HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",194,0x02b8382c)
            			HX_STACK_ARG(acc1,"acc1")
            			HX_STACK_ARG(char1,"char1")
            			HX_STACK_ARG(i1,"i1")
HXLINE( 194)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,(char1 == HX_("1",31,00,00,00)));
HXDLIN( 194)			return acc1;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc2,::String char2,Int i2){
            			HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",195,0x02b8382c)
            			HX_STACK_ARG(acc2,"acc2")
            			HX_STACK_ARG(char2,"char2")
            			HX_STACK_ARG(i2,"i2")
HXLINE( 195)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc2,i2,(char2 == HX_("1",31,00,00,00)));
HXDLIN( 195)			return acc2;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc3,::String char3,Int i3){
            			HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",195,0x02b8382c)
            			HX_STACK_ARG(acc3,"acc3")
            			HX_STACK_ARG(char3,"char3")
            			HX_STACK_ARG(i3,"i3")
HXLINE( 195)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc3,i3,(char3 == HX_("1",31,00,00,00)));
HXDLIN( 195)			return acc3;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc4,::String char4,Int i4){
            			HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",196,0x02b8382c)
            			HX_STACK_ARG(acc4,"acc4")
            			HX_STACK_ARG(char4,"char4")
            			HX_STACK_ARG(i4,"i4")
HXLINE( 196)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc4,i4,(char4 == HX_("1",31,00,00,00)));
HXDLIN( 196)			return acc4;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc5,::String char5,Int i5){
            			HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",196,0x02b8382c)
            			HX_STACK_ARG(acc5,"acc5")
            			HX_STACK_ARG(char5,"char5")
            			HX_STACK_ARG(i5,"i5")
HXLINE( 196)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc5,i5,(char5 == HX_("1",31,00,00,00)));
HXDLIN( 196)			return acc5;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACK_FRAME("thx.TestBitSet","testNegate",0xc7839671,"thx.TestBitSet.testNegate","thx/TestBitSet.hx",193,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 194)		HX_VARI( ::Array< ::String >,chars) = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 194)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 194)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 194)		::Array< Int > _hx_tmp = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXDLIN( 194)		HX_VARI_NAME( ::Array< ::String >,chars1,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 194)		HX_VARI_NAME( ::Array< Int >,this2,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 194)		::thx::Arrays_obj::resize(this2,(int)2,(int)0);
HXDLIN( 194)		::Array< Int > _hx_tmp1 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars1, ::Dynamic(new _hx_Closure_1()),this2)) );
HXDLIN( 194)		::Array< Int > _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::negate(_hx_tmp1);
HXDLIN( 194)		Bool _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp,_hx_tmp2);
HXDLIN( 194)		::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),194,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNegate",b4,87,0d,80)));
HXLINE( 195)		HX_VARI_NAME( ::Array< ::String >,chars2,"chars") = HX_("11111111",80,7b,eb,d6).split(HX_("",00,00,00,00));
HXDLIN( 195)		HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 195)		::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 195)		::Array< Int > _hx_tmp4 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars2, ::Dynamic(new _hx_Closure_2()),this3)) );
HXDLIN( 195)		HX_VARI_NAME( ::Array< ::String >,chars3,"chars") = HX_("00000000",00,a8,b7,79).split(HX_("",00,00,00,00));
HXDLIN( 195)		HX_VARI_NAME( ::Array< Int >,this4,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 195)		::thx::Arrays_obj::resize(this4,(int)2,(int)0);
HXDLIN( 195)		::Array< Int > _hx_tmp5 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars3, ::Dynamic(new _hx_Closure_3()),this4)) );
HXDLIN( 195)		::Array< Int > _hx_tmp6 = ::thx::_BitSet::BitSet_Impl__obj::negate(_hx_tmp5);
HXDLIN( 195)		Bool _hx_tmp7 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp4,_hx_tmp6);
HXDLIN( 195)		::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),195,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNegate",b4,87,0d,80)));
HXLINE( 196)		HX_VARI_NAME( ::Array< ::String >,chars4,"chars") = HX_("01010011",22,b4,b3,36).split(HX_("",00,00,00,00));
HXDLIN( 196)		HX_VARI_NAME( ::Array< Int >,this5,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 196)		::thx::Arrays_obj::resize(this5,(int)2,(int)0);
HXDLIN( 196)		::Array< Int > _hx_tmp8 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars4, ::Dynamic(new _hx_Closure_4()),this5)) );
HXDLIN( 196)		HX_VARI_NAME( ::Array< ::String >,chars5,"chars") = HX_("10101100",5e,6f,ef,19).split(HX_("",00,00,00,00));
HXDLIN( 196)		HX_VARI_NAME( ::Array< Int >,this6,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 196)		::thx::Arrays_obj::resize(this6,(int)2,(int)0);
HXDLIN( 196)		::Array< Int > _hx_tmp9 = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars5, ::Dynamic(new _hx_Closure_5()),this6)) );
HXDLIN( 196)		::Array< Int > _hx_tmp10 = ::thx::_BitSet::BitSet_Impl__obj::negate(_hx_tmp9);
HXDLIN( 196)		Bool _hx_tmp11 = ::thx::_BitSet::BitSet_Impl__obj::equals(_hx_tmp8,_hx_tmp10);
HXDLIN( 196)		::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),196,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testNegate",b4,87,0d,80)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testNegate,(void))

void TestBitSet_obj::testClone(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		::Array< Int > _hx_run(::Array< Int > acc,::String _hx_char,Int i){
            			HX_STACK_FRAME("thx.TestBitSet","testClone",0x7fec298e,"thx.TestBitSet.testClone","thx/TestBitSet.hx",200,0x02b8382c)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(_hx_char,"_hx_char")
            			HX_STACK_ARG(i,"i")
HXLINE( 200)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc,i,(_hx_char == HX_("1",31,00,00,00)));
HXDLIN( 200)			return acc;
            		}
            		HX_END_LOCAL_FUNC3(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Array< Int >,this2) HXARGC(2)
            		::Array< Int > _hx_run(::Array< Int > acc1,Int i1){
            			HX_STACK_FRAME("thx.TestBitSet","testClone",0x7fec298e,"thx.TestBitSet.testClone","thx/TestBitSet.hx",201,0x02b8382c)
            			HX_STACK_ARG(acc1,"acc1")
            			HX_STACK_ARG(i1,"i1")
HXLINE( 201)			Bool _hx_tmp1 = ::thx::_BitSet::BitSet_Impl__obj::at(this2,i1);
HXDLIN( 201)			::thx::_BitSet::BitSet_Impl__obj::setAt(acc1,i1,_hx_tmp1);
HXDLIN( 201)			return acc1;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestBitSet","testClone",0x7fec298e,"thx.TestBitSet.testClone","thx/TestBitSet.hx",199,0x02b8382c)
            	HX_STACK_THIS(this)
HXLINE( 200)		HX_VARI( ::Array< ::String >,chars) = HX_("0101",42,96,df,1f).split(HX_("",00,00,00,00));
HXDLIN( 200)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 200)		::thx::Arrays_obj::resize(this1,(int)2,(int)0);
HXDLIN( 200)		HX_VARI( ::Array< Int >,a) = ( (::Array< Int >)(::thx::Arrays_obj::reducei(chars, ::Dynamic(new _hx_Closure_0()),this1)) );
HXLINE( 201)		HX_VARI_NAME( ::Array< Int >,this2,"this") = a;
HXDLIN( 201)		::Array< Int > _hx_tmp = ::thx::Ints_obj::range(::thx::_BitSet::BitSet_Impl__obj::get_length(this2),null(),null());
HXDLIN( 201)		HX_VARI_NAME( ::Array< Int >,this3,"this") = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 201)		::thx::Arrays_obj::resize(this3,(int)2,(int)0);
HXDLIN( 201)		HX_VARI( ::Array< Int >,b) = ( (::Array< Int >)(::thx::Arrays_obj::reduce(_hx_tmp, ::Dynamic(new _hx_Closure_1(this2)),this3)) );
HXLINE( 202)		::thx::_BitSet::BitSet_Impl__obj::setAt(b,(int)0,true);
HXLINE( 203)		::String _hx_tmp2 = ::thx::_BitSet::BitSet_Impl__obj::toString(a);
HXDLIN( 203)		::utest::Assert_obj::same(HX_("0101",42,96,df,1f),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),203,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testClone",ab,51,65,11)));
HXLINE( 204)		::String _hx_tmp3 = ::thx::_BitSet::BitSet_Impl__obj::toString(b);
HXDLIN( 204)		::utest::Assert_obj::same(HX_("1101",e1,cc,88,20),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestBitSet.hx",37,2a,e7,2c),204,HX_("thx.TestBitSet",91,0e,0d,87),HX_("testClone",ab,51,65,11)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBitSet_obj,testClone,(void))


TestBitSet_obj::TestBitSet_obj()
{
}

hx::Val TestBitSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"testOr") ) { return hx::Val( testOr_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testAnd") ) { return hx::Val( testAnd_dyn()); }
		if (HX_FIELD_EQ(inName,"testXor") ) { return hx::Val( testXor_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testClone") ) { return hx::Val( testClone_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testBitSet") ) { return hx::Val( testBitSet_dyn()); }
		if (HX_FIELD_EQ(inName,"testConcat") ) { return hx::Val( testConcat_dyn()); }
		if (HX_FIELD_EQ(inName,"testExpand") ) { return hx::Val( testExpand_dyn()); }
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"testNegate") ) { return hx::Val( testNegate_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testToBools") ) { return hx::Val( testToBools_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testToInt32s") ) { return hx::Val( testToInt32s_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testFromBools") ) { return hx::Val( testFromBools_dyn()); }
		if (HX_FIELD_EQ(inName,"testNotEquals") ) { return hx::Val( testNotEquals_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromString") ) { return hx::Val( testFromString_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testPresetLength") ) { return hx::Val( testPresetLength_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestBitSet_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestBitSet_obj_sStaticStorageInfo = 0;
#endif

static ::String TestBitSet_obj_sMemberFields[] = {
	HX_HCSTRING("testBitSet","\xc7","\x9e","\xec","\x09"),
	HX_HCSTRING("testFromBools","\x8d","\x88","\xbb","\x9e"),
	HX_HCSTRING("testToBools","\x5c","\x5b","\x45","\x40"),
	HX_HCSTRING("testToInt32s","\xb2","\x1f","\xa6","\x38"),
	HX_HCSTRING("testFromString","\xcd","\x54","\x67","\xf4"),
	HX_HCSTRING("testPresetLength","\x17","\x55","\x1c","\xe3"),
	HX_HCSTRING("testConcat","\x06","\x4f","\xc4","\xe0"),
	HX_HCSTRING("testExpand","\x4c","\x34","\x67","\xdd"),
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testNotEquals","\x00","\x49","\x16","\x70"),
	HX_HCSTRING("testAnd","\xa5","\x69","\xb8","\xbd"),
	HX_HCSTRING("testOr","\x15","\x46","\x3a","\xd5"),
	HX_HCSTRING("testXor","\x69","\xde","\xc9","\xbd"),
	HX_HCSTRING("testNegate","\xb4","\x87","\x0d","\x80"),
	HX_HCSTRING("testClone","\xab","\x51","\x65","\x11"),
	::String(null()) };

static void TestBitSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestBitSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestBitSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestBitSet_obj::__mClass,"__mClass");
};

#endif

hx::Class TestBitSet_obj::__mClass;

void TestBitSet_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestBitSet","\x91","\x0e","\x0d","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestBitSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestBitSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestBitSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestBitSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestBitSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestBitSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
