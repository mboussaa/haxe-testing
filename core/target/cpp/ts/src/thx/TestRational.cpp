// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_TestRational
#include <thx/TestRational.h>
#endif
#ifndef INCLUDED_thx__Rational_Rational_Impl_
#include <thx/_Rational/Rational_Impl_.h>
#endif
#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Bigs
#include <thx/bigint/Bigs.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestRational_obj::__construct(){
            	HX_STACK_FRAME("thx.TestRational","new",0x17ce4b5c,"thx.TestRational.new","thx/TestRational.hx",7,0xdacf7cb3)
            	HX_STACK_THIS(this)
            	}

Dynamic TestRational_obj::__CreateEmpty() { return new TestRational_obj; }

hx::ObjectPtr< TestRational_obj > TestRational_obj::__new()
{
	hx::ObjectPtr< TestRational_obj > _hx_result = new TestRational_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestRational_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestRational_obj > _hx_result = new TestRational_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestRational_obj::testOperations(){
            	HX_STACK_FRAME("thx.TestRational","testOperations",0xb199f3e2,"thx.TestRational.testOperations","thx/TestRational.hx",9,0xdacf7cb3)
            	HX_STACK_THIS(this)
HXLINE(  10)		HX_VAR(  ::Dynamic,x);
HXDLIN(  10)		HX_VAR(  ::Dynamic,y);
HXLINE(  14)		::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN(  14)		x = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp,::thx::bigint::Bigs_obj::fromInt((int)2));
HXLINE(  15)		::Dynamic _hx_tmp1 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN(  15)		y = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp1,::thx::bigint::Bigs_obj::fromInt((int)3));
HXLINE(  16)		 ::Dynamic _hx_tmp2 = ::thx::_Rational::Rational_Impl__obj::add(x,y);
HXDLIN(  16)		::String _hx_tmp3 = ::thx::_Rational::Rational_Impl__obj::toString(_hx_tmp2);
HXDLIN(  16)		::utest::Assert_obj::equals(HX_("5/6",9c,60,28,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestRational.hx",7e,47,27,24),16,HX_("thx.TestRational",6a,ad,3e,27),HX_("testOperations",5e,45,26,38)));
HXLINE(  19)		::Dynamic _hx_tmp4 = ::thx::bigint::Bigs_obj::fromInt((int)8);
HXDLIN(  19)		x = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp4,::thx::bigint::Bigs_obj::fromInt((int)9));
HXLINE(  20)		::Dynamic _hx_tmp5 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN(  20)		y = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp5,::thx::bigint::Bigs_obj::fromInt((int)9));
HXLINE(  21)		 ::Dynamic _hx_tmp6 = ::thx::_Rational::Rational_Impl__obj::add(x,y);
HXDLIN(  21)		::String _hx_tmp7 = ::thx::_Rational::Rational_Impl__obj::toString(_hx_tmp6);
HXDLIN(  21)		::utest::Assert_obj::equals(HX_("1",31,00,00,00),_hx_tmp7,null(),hx::SourceInfo(HX_("TestRational.hx",7e,47,27,24),21,HX_("thx.TestRational",6a,ad,3e,27),HX_("testOperations",5e,45,26,38)));
HXLINE(  24)		::Dynamic _hx_tmp8 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN(  24)		x = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp8,::thx::bigint::Bigs_obj::fromInt((int)200000000));
HXLINE(  25)		::Dynamic _hx_tmp9 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN(  25)		y = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp9,::thx::bigint::Bigs_obj::fromInt((int)300000000));
HXLINE(  26)		 ::Dynamic _hx_tmp10 = ::thx::_Rational::Rational_Impl__obj::add(x,y);
HXDLIN(  26)		::String _hx_tmp11 = ::thx::_Rational::Rational_Impl__obj::toString(_hx_tmp10);
HXDLIN(  26)		::utest::Assert_obj::equals(HX_("1/120000000",d1,2e,90,44),_hx_tmp11,null(),hx::SourceInfo(HX_("TestRational.hx",7e,47,27,24),26,HX_("thx.TestRational",6a,ad,3e,27),HX_("testOperations",5e,45,26,38)));
HXLINE(  29)		::Dynamic _hx_tmp12 = ::thx::bigint::Bigs_obj::fromInt((int)1073741789);
HXDLIN(  29)		x = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp12,::thx::bigint::Bigs_obj::fromInt((int)20));
HXLINE(  30)		::Dynamic _hx_tmp13 = ::thx::bigint::Bigs_obj::fromInt((int)1073741789);
HXDLIN(  30)		y = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp13,::thx::bigint::Bigs_obj::fromInt((int)30));
HXLINE(  31)		 ::Dynamic _hx_tmp14 = ::thx::_Rational::Rational_Impl__obj::add(x,y);
HXDLIN(  31)		::String _hx_tmp15 = ::thx::_Rational::Rational_Impl__obj::toString(_hx_tmp14);
HXDLIN(  31)		::utest::Assert_obj::equals(HX_("1073741789/12",31,4b,f6,f3),_hx_tmp15,null(),hx::SourceInfo(HX_("TestRational.hx",7e,47,27,24),31,HX_("thx.TestRational",6a,ad,3e,27),HX_("testOperations",5e,45,26,38)));
HXLINE(  34)		::Dynamic _hx_tmp16 = ::thx::bigint::Bigs_obj::fromInt((int)4);
HXDLIN(  34)		x = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp16,::thx::bigint::Bigs_obj::fromInt((int)17));
HXLINE(  35)		::Dynamic _hx_tmp17 = ::thx::bigint::Bigs_obj::fromInt((int)17);
HXDLIN(  35)		y = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp17,::thx::bigint::Bigs_obj::fromInt((int)4));
HXLINE(  36)		 ::Dynamic _hx_tmp18 = ::thx::_Rational::Rational_Impl__obj::multiply(x,y);
HXDLIN(  36)		::String _hx_tmp19 = ::thx::_Rational::Rational_Impl__obj::toString(_hx_tmp18);
HXDLIN(  36)		::utest::Assert_obj::equals(HX_("1",31,00,00,00),_hx_tmp19,null(),hx::SourceInfo(HX_("TestRational.hx",7e,47,27,24),36,HX_("thx.TestRational",6a,ad,3e,27),HX_("testOperations",5e,45,26,38)));
HXLINE(  39)		::Dynamic _hx_tmp20 = ::thx::bigint::Bigs_obj::fromInt((int)3037141);
HXDLIN(  39)		x = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp20,::thx::bigint::Bigs_obj::fromInt((int)3247033));
HXLINE(  40)		::Dynamic _hx_tmp21 = ::thx::bigint::Bigs_obj::fromInt((int)3037547);
HXDLIN(  40)		y = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp21,::thx::bigint::Bigs_obj::fromInt((int)3246599));
HXLINE(  41)		 ::Dynamic _hx_tmp22 = ::thx::_Rational::Rational_Impl__obj::multiply(x,y);
HXDLIN(  41)		::String _hx_tmp23 = ::thx::_Rational::Rational_Impl__obj::toString(_hx_tmp22);
HXDLIN(  41)		::utest::Assert_obj::equals(HX_("841/961",1a,a1,1f,39),_hx_tmp23,null(),hx::SourceInfo(HX_("TestRational.hx",7e,47,27,24),41,HX_("thx.TestRational",6a,ad,3e,27),HX_("testOperations",5e,45,26,38)));
HXLINE(  42)		 ::Dynamic _hx_tmp24 = ::thx::_Rational::Rational_Impl__obj::multiply(x,y);
HXDLIN(  42)		Float _hx_tmp25 = ::thx::_Rational::Rational_Impl__obj::toFloat(_hx_tmp24);
HXDLIN(  42)		::utest::Assert_obj::floatEquals(((Float)0.87513007284079),_hx_tmp25,null(),null(),hx::SourceInfo(HX_("TestRational.hx",7e,47,27,24),42,HX_("thx.TestRational",6a,ad,3e,27),HX_("testOperations",5e,45,26,38)));
HXLINE(  45)		::Dynamic _hx_tmp26 = ::thx::bigint::Bigs_obj::fromInt((int)1);
HXDLIN(  45)		x = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp26,::thx::bigint::Bigs_obj::fromInt((int)6));
HXLINE(  46)		::Dynamic _hx_tmp27 = ::thx::bigint::Bigs_obj::fromInt((int)-4);
HXDLIN(  46)		y = ::thx::_Rational::Rational_Impl__obj::create(_hx_tmp27,::thx::bigint::Bigs_obj::fromInt((int)-8));
HXLINE(  47)		 ::Dynamic _hx_tmp28 = ::thx::_Rational::Rational_Impl__obj::subtract(x,y);
HXDLIN(  47)		::String _hx_tmp29 = ::thx::_Rational::Rational_Impl__obj::toString(_hx_tmp28);
HXDLIN(  47)		::utest::Assert_obj::equals(HX_("-1/3",88,f1,e3,1d),_hx_tmp29,null(),hx::SourceInfo(HX_("TestRational.hx",7e,47,27,24),47,HX_("thx.TestRational",6a,ad,3e,27),HX_("testOperations",5e,45,26,38)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRational_obj,testOperations,(void))

void TestRational_obj::testFromInt(){
            	HX_STACK_FRAME("thx.TestRational","testFromInt",0xe7eba26f,"thx.TestRational.testFromInt","thx/TestRational.hx",50,0xdacf7cb3)
            	HX_STACK_THIS(this)
HXLINE(  51)		HX_VARI(  ::Dynamic,r) = ::thx::_Rational::Rational_Impl__obj::fromInt((int)3);
HXLINE(  52)		::String _hx_tmp = ::thx::_Rational::Rational_Impl__obj::toString(r);
HXDLIN(  52)		::utest::Assert_obj::equals(HX_("3",33,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestRational.hx",7e,47,27,24),52,HX_("thx.TestRational",6a,ad,3e,27),HX_("testFromInt",73,cb,c3,14)));
HXLINE(  53)		r = ::thx::_Rational::Rational_Impl__obj::divide(r,::thx::_Rational::Rational_Impl__obj::fromInt((int)2));
HXLINE(  54)		::String _hx_tmp1 = ::thx::_Rational::Rational_Impl__obj::toString(r);
HXDLIN(  54)		::utest::Assert_obj::equals(HX_("3/2",16,dc,26,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestRational.hx",7e,47,27,24),54,HX_("thx.TestRational",6a,ad,3e,27),HX_("testFromInt",73,cb,c3,14)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRational_obj,testFromInt,(void))


TestRational_obj::TestRational_obj()
{
}

hx::Val TestRational_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"testFromInt") ) { return hx::Val( testFromInt_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testOperations") ) { return hx::Val( testOperations_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestRational_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestRational_obj_sStaticStorageInfo = 0;
#endif

static ::String TestRational_obj_sMemberFields[] = {
	HX_HCSTRING("testOperations","\x5e","\x45","\x26","\x38"),
	HX_HCSTRING("testFromInt","\x73","\xcb","\xc3","\x14"),
	::String(null()) };

static void TestRational_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestRational_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestRational_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestRational_obj::__mClass,"__mClass");
};

#endif

hx::Class TestRational_obj::__mClass;

void TestRational_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestRational","\x6a","\xad","\x3e","\x27");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestRational_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestRational_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestRational_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestRational_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestRational_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestRational_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
