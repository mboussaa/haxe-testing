// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_thx_fp_CO2
#include <thx/fp/CO2.h>
#endif

namespace thx{
namespace fp{

void CO2_obj::__construct(::String v){
            	HX_STACK_FRAME("thx.fp.CO2","new",0x15ddd87e,"thx.fp.CO2.new","thx/fp/TestMap.hx",112,0xd5adc18e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 112)		this->v = v;
            	}

Dynamic CO2_obj::__CreateEmpty() { return new CO2_obj; }

hx::ObjectPtr< CO2_obj > CO2_obj::__new(::String v)
{
	hx::ObjectPtr< CO2_obj > _hx_result = new CO2_obj();
	_hx_result->__construct(v);
	return _hx_result;
}

Dynamic CO2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CO2_obj > _hx_result = new CO2_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

Int CO2_obj::compareTo( ::thx::fp::CO2 that){
            	HX_STACK_FRAME("thx.fp.CO2","compareTo",0x66a0881e,"thx.fp.CO2.compareTo","thx/fp/TestMap.hx",114,0xd5adc18e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 114)		return ::haxe::Utf8_obj::compare(this->v,that->v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CO2_obj,compareTo,return )


CO2_obj::CO2_obj()
{
}

void CO2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CO2);
	HX_MARK_MEMBER_NAME(v,"v");
	HX_MARK_END_CLASS();
}

void CO2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(v,"v");
}

hx::Val CO2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { return hx::Val( v); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"compareTo") ) { return hx::Val( compareTo_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CO2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { v=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CO2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("v","\x76","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CO2_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(CO2_obj,v),HX_HCSTRING("v","\x76","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CO2_obj_sStaticStorageInfo = 0;
#endif

static ::String CO2_obj_sMemberFields[] = {
	HX_HCSTRING("v","\x76","\x00","\x00","\x00"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	::String(null()) };

static void CO2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CO2_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CO2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CO2_obj::__mClass,"__mClass");
};

#endif

hx::Class CO2_obj::__mClass;

void CO2_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.fp.CO2","\x8c","\x81","\x34","\x80");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CO2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CO2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CO2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CO2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CO2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CO2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace fp
