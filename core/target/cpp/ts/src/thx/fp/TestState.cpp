// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx__Tuple_Tuple2_Impl_
#include <thx/_Tuple/Tuple2_Impl_.h>
#endif
#ifndef INCLUDED_thx_fp_TestState
#include <thx/fp/TestState.h>
#endif
#ifndef INCLUDED_thx_fp__State_State_Impl_
#include <thx/fp/_State/State_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace fp{

void TestState_obj::__construct(){
            	HX_STACK_FRAME("thx.fp.TestState","new",0xb1b289b7,"thx.fp.TestState.new","thx/fp/TestState.hx",9,0xa7910039)
            	HX_STACK_THIS(this)
            	}

Dynamic TestState_obj::__CreateEmpty() { return new TestState_obj; }

hx::ObjectPtr< TestState_obj > TestState_obj::__new()
{
	hx::ObjectPtr< TestState_obj > _hx_result = new TestState_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestState_obj > _hx_result = new TestState_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestState_obj::testMap(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run(Int v){
            			HX_STACK_FRAME("thx.fp.TestState","testMap",0xaf4d2a41,"thx.fp.TestState.testMap","thx/fp/TestState.hx",12,0xa7910039)
            			HX_STACK_ARG(v,"v")
HXLINE(  12)			return (v + (int)1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::Dynamic,this1, ::Dynamic,f) HXARGC(1)
            		 ::Dynamic _hx_run(::String s1){
            			HX_STACK_FRAME("thx.fp.TestState","testMap",0xaf4d2a41,"thx.fp.TestState.testMap","thx/fp/TestState.hx",12,0xa7910039)
            			HX_STACK_ARG(s1,"s1")
HXLINE(  12)			 ::Dynamic _hx_tmp = this1(s1);
HXDLIN(  12)			return ::thx::_Tuple::Tuple2_Impl__obj::map(_hx_tmp,f);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.fp.TestState","testMap",0xaf4d2a41,"thx.fp.TestState.testMap","thx/fp/TestState.hx",11,0xa7910039)
            	HX_STACK_THIS(this)
HXLINE(  12)		HX_VARI_NAME(  ::Dynamic,this1,"this") = ::thx::fp::_State::State_Impl__obj::pure((int)1);
HXDLIN(  12)		HX_VARI(  ::Dynamic,f) =  ::Dynamic(new _hx_Closure_0());
HXDLIN(  12)		HX_VARI(  ::Dynamic,s) =  ::Dynamic(new _hx_Closure_1(this1,f));
HXLINE(  13)		 ::Dynamic _hx_tmp1 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),HX_("a",61,00,00,00))
            			->setFixed(1,HX_("_1",f2,52,00,00),(int)2));
HXDLIN(  13)		 ::Dynamic _hx_tmp2 = s(HX_("a",61,00,00,00));
HXDLIN(  13)		::utest::Assert_obj::same(_hx_tmp1,_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestState.hx",df,9f,7b,9a),13,HX_("thx.fp.TestState",45,e2,b7,a1),HX_("testMap",6a,79,c1,bd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestState_obj,testMap,(void))

void TestState_obj::testFlatMap(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::Dynamic,s) HXARGC(1)
            		 ::Dynamic _hx_run(Int i){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			::String _hx_run(::String v){
            				HX_STACK_FRAME("thx.fp.TestState","testFlatMap",0x07f16688,"thx.fp.TestState.testFlatMap","thx/fp/TestState.hx",20,0xa7910039)
            				HX_STACK_ARG(v,"v")
HXLINE(  20)				return (v + HX_("b",62,00,00,00));
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,Int,i) HXARGC(1)
            			Int _hx_run(Int v1){
            				HX_STACK_FRAME("thx.fp.TestState","testFlatMap",0x07f16688,"thx.fp.TestState.testFlatMap","thx/fp/TestState.hx",20,0xa7910039)
            				HX_STACK_ARG(v1,"v1")
HXLINE(  20)				return (v1 + i);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::Dynamic,this1, ::Dynamic,f1) HXARGC(1)
            			 ::Dynamic _hx_run(::String s1){
            				HX_STACK_FRAME("thx.fp.TestState","testFlatMap",0x07f16688,"thx.fp.TestState.testFlatMap","thx/fp/TestState.hx",20,0xa7910039)
            				HX_STACK_ARG(s1,"s1")
HXLINE(  20)				 ::Dynamic _hx_tmp = this1(s1);
HXDLIN(  20)				return ::thx::_Tuple::Tuple2_Impl__obj::map(_hx_tmp,f1);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_STACK_FRAME("thx.fp.TestState","testFlatMap",0x07f16688,"thx.fp.TestState.testFlatMap","thx/fp/TestState.hx",20,0xa7910039)
            			HX_STACK_ARG(i,"i")
HXLINE(  20)			HX_VARI_NAME(  ::Dynamic,this1,"this") = ::thx::fp::_State::State_Impl__obj::modify(s, ::Dynamic(new _hx_Closure_0()));
HXDLIN(  20)			HX_VARI_NAME(  ::Dynamic,f1,"f") =  ::Dynamic(new _hx_Closure_1(i));
HXDLIN(  20)			return  ::Dynamic(new _hx_Closure_2(this1,f1));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.fp.TestState","testFlatMap",0x07f16688,"thx.fp.TestState.testFlatMap","thx/fp/TestState.hx",16,0xa7910039)
            	HX_STACK_THIS(this)
HXLINE(  17)		HX_VARI(  ::Dynamic,s) = ::thx::fp::_State::State_Impl__obj::pure((int)1);
HXLINE(  19)		HX_VARI(  ::Dynamic,f) =  ::Dynamic(new _hx_Closure_3(s));
HXLINE(  23)		 ::Dynamic _hx_tmp1 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),HX_("ab",e1,54,00,00))
            			->setFixed(1,HX_("_1",f2,52,00,00),(int)2));
HXDLIN(  23)		 ::Dynamic _hx_tmp2 = ::thx::fp::_State::State_Impl__obj::flatMap(s,f);
HXDLIN(  23)		 ::Dynamic _hx_tmp3 = _hx_tmp2(HX_("a",61,00,00,00));
HXDLIN(  23)		::utest::Assert_obj::same(_hx_tmp1,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestState.hx",df,9f,7b,9a),23,HX_("thx.fp.TestState",45,e2,b7,a1),HX_("testFlatMap",31,fe,a6,a3)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestState_obj,testFlatMap,(void))


TestState_obj::TestState_obj()
{
}

hx::Val TestState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"testMap") ) { return hx::Val( testMap_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testFlatMap") ) { return hx::Val( testFlatMap_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestState_obj_sStaticStorageInfo = 0;
#endif

static ::String TestState_obj_sMemberFields[] = {
	HX_HCSTRING("testMap","\x6a","\x79","\xc1","\xbd"),
	HX_HCSTRING("testFlatMap","\x31","\xfe","\xa6","\xa3"),
	::String(null()) };

static void TestState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestState_obj::__mClass,"__mClass");
};

#endif

hx::Class TestState_obj::__mClass;

void TestState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.fp.TestState","\x45","\xe2","\xb7","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace fp
