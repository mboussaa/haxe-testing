// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_IntIterator
#include <IntIterator.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_TestError
#include <thx/TestError.h>
#endif
#ifndef INCLUDED_thx_error_AbstractMethod
#include <thx/error/AbstractMethod.h>
#endif
#ifndef INCLUDED_thx_error_NotImplemented
#include <thx/error/NotImplemented.h>
#endif
#ifndef INCLUDED_thx_error_NullArgument
#include <thx/error/NullArgument.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestError_obj::__construct(){
            	HX_STACK_FRAME("thx.TestError","new",0xe899787e,"thx.TestError.new","thx/TestError.hx",9,0xf1d81e33)
            	HX_STACK_THIS(this)
            	}

Dynamic TestError_obj::__CreateEmpty() { return new TestError_obj; }

hx::ObjectPtr< TestError_obj > TestError_obj::__new()
{
	hx::ObjectPtr< TestError_obj > _hx_result = new TestError_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestError_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestError_obj > _hx_result = new TestError_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestError_obj::testAbstract(){
            	HX_STACK_FRAME("thx.TestError","testAbstract",0xea054b76,"thx.TestError.testAbstract","thx/TestError.hx",11,0xf1d81e33)
            	HX_STACK_THIS(this)
HXLINE(  12)		HX_VARI(  ::thx::error::AbstractMethod,error) =  ::thx::error::AbstractMethod_obj::__new(hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),12,HX_("thx.TestError",8c,21,a0,24),HX_("testAbstract",54,e7,85,1b)));
HXLINE(  14)		::utest::Assert_obj::notNull(error,null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),14,HX_("thx.TestError",8c,21,a0,24),HX_("testAbstract",54,e7,85,1b)));
HXLINE(  15)		::utest::Assert_obj::stringContains(HX_("TestError",f6,e9,fe,dd),error->message,null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),15,HX_("thx.TestError",8c,21,a0,24),HX_("testAbstract",54,e7,85,1b)));
HXLINE(  16)		::utest::Assert_obj::stringContains(HX_("testAbstract",54,e7,85,1b),error->message,null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),16,HX_("thx.TestError",8c,21,a0,24),HX_("testAbstract",54,e7,85,1b)));
HXLINE(  17)		::utest::Assert_obj::stringContains(HX_("is abstract",d8,b7,59,43),error->message,null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),17,HX_("thx.TestError",8c,21,a0,24),HX_("testAbstract",54,e7,85,1b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestError_obj,testAbstract,(void))

void TestError_obj::testNotImplemented(){
            	HX_STACK_FRAME("thx.TestError","testNotImplemented",0xed8cec03,"thx.TestError.testNotImplemented","thx/TestError.hx",20,0xf1d81e33)
            	HX_STACK_THIS(this)
HXLINE(  21)		HX_VARI(  ::thx::error::NotImplemented,error) =  ::thx::error::NotImplemented_obj::__new(hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),21,HX_("thx.TestError",8c,21,a0,24),HX_("testNotImplemented",61,c2,90,cd)));
HXLINE(  23)		::utest::Assert_obj::notNull(error,null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),23,HX_("thx.TestError",8c,21,a0,24),HX_("testNotImplemented",61,c2,90,cd)));
HXLINE(  24)		::utest::Assert_obj::stringContains(HX_("TestError",f6,e9,fe,dd),error->message,null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),24,HX_("thx.TestError",8c,21,a0,24),HX_("testNotImplemented",61,c2,90,cd)));
HXLINE(  25)		::utest::Assert_obj::stringContains(HX_("testNotImplemented",61,c2,90,cd),error->message,null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),25,HX_("thx.TestError",8c,21,a0,24),HX_("testNotImplemented",61,c2,90,cd)));
HXLINE(  26)		::utest::Assert_obj::stringContains(HX_("needs to be implemented",67,1e,47,5c),error->message,null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),26,HX_("thx.TestError",8c,21,a0,24),HX_("testNotImplemented",61,c2,90,cd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestError_obj,testNotImplemented,(void))

void TestError_obj::testNullArgument(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::thx::TestError,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testNullArgument",0x22678cb8,"thx.TestError.testNullArgument","thx/TestError.hx",30,0xf1d81e33)
HXLINE(  30)			_gthis->nullInt(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestError","testNullArgument",0x22678cb8,"thx.TestError.testNullArgument","thx/TestError.hx",29,0xf1d81e33)
            	HX_STACK_THIS(this)
HXLINE(  29)		HX_VARI(  ::thx::TestError,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  30)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(_gthis)),hx::ClassOf< ::thx::error::NullArgument >(),null(),null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),30,HX_("thx.TestError",8c,21,a0,24),HX_("testNullArgument",96,6f,c6,02)));
HXLINE(  31)		this->nullInt((int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestError_obj,testNullArgument,(void))

void TestError_obj::testNullArgumentUsing(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::thx::TestError,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testNullArgumentUsing",0x8dca3d6c,"thx.TestError.testNullArgumentUsing","thx/TestError.hx",35,0xf1d81e33)
HXLINE(  35)			_gthis->nullUsingInt(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestError","testNullArgumentUsing",0x8dca3d6c,"thx.TestError.testNullArgumentUsing","thx/TestError.hx",34,0xf1d81e33)
            	HX_STACK_THIS(this)
HXLINE(  34)		HX_VARI(  ::thx::TestError,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  35)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(_gthis)),hx::ClassOf< ::thx::error::NullArgument >(),null(),null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),35,HX_("thx.TestError",8c,21,a0,24),HX_("testNullArgumentUsing",ce,35,72,03)));
HXLINE(  36)		this->nullUsingInt((int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestError_obj,testNullArgumentUsing,(void))

void TestError_obj::testEmptyArray(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::thx::TestError,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testEmptyArray",0x3e0f9b60,"thx.TestError.testEmptyArray","thx/TestError.hx",40,0xf1d81e33)
HXLINE(  40)			_gthis->emptyArray(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::thx::TestError,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testEmptyArray",0x3e0f9b60,"thx.TestError.testEmptyArray","thx/TestError.hx",41,0xf1d81e33)
HXLINE(  41)			_gthis->emptyArray(::Array_obj< Int >::__new(0));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestError","testEmptyArray",0x3e0f9b60,"thx.TestError.testEmptyArray","thx/TestError.hx",39,0xf1d81e33)
            	HX_STACK_THIS(this)
HXLINE(  39)		HX_VARI(  ::thx::TestError,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  40)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(_gthis)),hx::ClassOf< ::thx::error::NullArgument >(),null(),null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),40,HX_("thx.TestError",8c,21,a0,24),HX_("testEmptyArray",be,6a,d5,45)));
HXLINE(  41)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1(_gthis)),hx::ClassOf< ::thx::error::NullArgument >(),null(),null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),41,HX_("thx.TestError",8c,21,a0,24),HX_("testEmptyArray",be,6a,d5,45)));
HXLINE(  42)		this->emptyArray(::Array_obj< Int >::__new(1)->init(0,(int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestError_obj,testEmptyArray,(void))

void TestError_obj::testEmptyString(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::thx::TestError,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testEmptyString",0x68d8092a,"thx.TestError.testEmptyString","thx/TestError.hx",46,0xf1d81e33)
HXLINE(  46)			_gthis->emptyString(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::thx::TestError,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testEmptyString",0x68d8092a,"thx.TestError.testEmptyString","thx/TestError.hx",47,0xf1d81e33)
HXLINE(  47)			_gthis->emptyString(HX_("",00,00,00,00));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestError","testEmptyString",0x68d8092a,"thx.TestError.testEmptyString","thx/TestError.hx",45,0xf1d81e33)
            	HX_STACK_THIS(this)
HXLINE(  45)		HX_VARI(  ::thx::TestError,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  46)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(_gthis)),hx::ClassOf< ::thx::error::NullArgument >(),null(),null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),46,HX_("thx.TestError",8c,21,a0,24),HX_("testEmptyString",0c,ac,27,2e)));
HXLINE(  47)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1(_gthis)),hx::ClassOf< ::thx::error::NullArgument >(),null(),null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),47,HX_("thx.TestError",8c,21,a0,24),HX_("testEmptyString",0c,ac,27,2e)));
HXLINE(  48)		this->emptyString(HX_("a",61,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestError_obj,testEmptyString,(void))

void TestError_obj::testEmptyIterator(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::thx::TestError,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testEmptyIterator",0x0d3db287,"thx.TestError.testEmptyIterator","thx/TestError.hx",53,0xf1d81e33)
HXLINE(  53)			_gthis->emptyIterator(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::thx::TestError,_gthis, ::IntIterator,it) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testEmptyIterator",0x0d3db287,"thx.TestError.testEmptyIterator","thx/TestError.hx",54,0xf1d81e33)
HXLINE(  54)			_gthis->emptyIterator(it);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestError","testEmptyIterator",0x0d3db287,"thx.TestError.testEmptyIterator","thx/TestError.hx",51,0xf1d81e33)
            	HX_STACK_THIS(this)
HXLINE(  51)		HX_VARI(  ::thx::TestError,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  52)		HX_VARI(  ::IntIterator,it) =  ::IntIterator_obj::__new((int)0,(int)0);
HXLINE(  53)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(_gthis)),hx::ClassOf< ::thx::error::NullArgument >(),null(),null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),53,HX_("thx.TestError",8c,21,a0,24),HX_("testEmptyIterator",e9,51,e5,7f)));
HXLINE(  54)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1(_gthis,it)),hx::ClassOf< ::thx::error::NullArgument >(),null(),null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),54,HX_("thx.TestError",8c,21,a0,24),HX_("testEmptyIterator",e9,51,e5,7f)));
HXLINE(  56)		this->emptyIterator( ::IntIterator_obj::__new((int)0,(int)4));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestError_obj,testEmptyIterator,(void))

void TestError_obj::testEmptyIterable(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::IntIterator _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testEmptyIterable",0x0d30074b,"thx.TestError.testEmptyIterable","thx/TestError.hx",60,0xf1d81e33)
HXLINE(  60)			return  ::IntIterator_obj::__new((int)0,(int)0);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::thx::TestError,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testEmptyIterable",0x0d30074b,"thx.TestError.testEmptyIterable","thx/TestError.hx",61,0xf1d81e33)
HXLINE(  61)			_gthis->emptyIterable(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::thx::TestError,_gthis, ::Dynamic,it) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testEmptyIterable",0x0d30074b,"thx.TestError.testEmptyIterable","thx/TestError.hx",62,0xf1d81e33)
HXLINE(  62)			_gthis->emptyIterable(it);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(0)
            		 ::IntIterator _hx_run(){
            			HX_STACK_FRAME("thx.TestError","testEmptyIterable",0x0d30074b,"thx.TestError.testEmptyIterable","thx/TestError.hx",63,0xf1d81e33)
HXLINE(  63)			return  ::IntIterator_obj::__new((int)0,(int)4);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACK_FRAME("thx.TestError","testEmptyIterable",0x0d30074b,"thx.TestError.testEmptyIterable","thx/TestError.hx",59,0xf1d81e33)
            	HX_STACK_THIS(this)
HXLINE(  59)		HX_VARI(  ::thx::TestError,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  60)		HX_VARI(  ::Dynamic,it) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("iterator",ee,49,9a,93), ::Dynamic(new _hx_Closure_0())));
HXLINE(  61)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1(_gthis)),hx::ClassOf< ::thx::error::NullArgument >(),null(),null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),61,HX_("thx.TestError",8c,21,a0,24),HX_("testEmptyIterable",ad,a6,d7,7f)));
HXLINE(  62)		::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_2(_gthis,it)),hx::ClassOf< ::thx::error::NullArgument >(),null(),null(),hx::SourceInfo(HX_("TestError.hx",88,76,36,1a),62,HX_("thx.TestError",8c,21,a0,24),HX_("testEmptyIterable",ad,a6,d7,7f)));
HXLINE(  64)		this->emptyIterable( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("iterator",ee,49,9a,93), ::Dynamic(new _hx_Closure_3()))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestError_obj,testEmptyIterable,(void))

void TestError_obj::nullInt( ::Dynamic i){
            	HX_STACK_FRAME("thx.TestError","nullInt",0xa31ac3c6,"thx.TestError.nullInt","thx/error/NullArgument.hx",32,0x9d70c468)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  32)		if (hx::IsNull( i )) {
HXLINE(  32)			HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("argument \"i\" cannot be null",ef,69,84,58),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),32,HX_("thx.TestError",8c,21,a0,24),HX_("nullInt",a8,b4,db,1c))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestError_obj,nullInt,(void))

void TestError_obj::nullUsingInt( ::Dynamic i){
            	HX_STACK_FRAME("thx.TestError","nullUsingInt",0x53680fd4,"thx.TestError.nullUsingInt","thx/error/NullArgument.hx",32,0x9d70c468)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  32)		if (hx::IsNull( i )) {
HXLINE(  32)			HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("argument \"this\" cannot be null",c2,51,37,35),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),32,HX_("thx.TestError",8c,21,a0,24),HX_("nullUsingInt",b2,ab,e8,84))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestError_obj,nullUsingInt,(void))

void TestError_obj::emptyArray(::Array< Int > arr){
            	HX_STACK_FRAME("thx.TestError","emptyArray",0x4f0afb6e,"thx.TestError.emptyArray","thx/error/NullArgument.hx",51,0x9d70c468)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  51)		if (hx::IsNull( arr )) {
HXLINE(  52)			HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("Array argument \"this\" cannot be null",89,ba,ae,ba),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),52,HX_("thx.TestError",8c,21,a0,24),HX_("emptyArray",cc,43,e2,a5))));
            		}
            		else {
HXLINE(  53)			Bool _hx_tmp = (arr->length == (int)0);
HXDLIN(  53)			if (_hx_tmp) {
HXLINE(  54)				HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("Array argument \"this\" cannot be empty",4b,a0,52,6a),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),54,HX_("thx.TestError",8c,21,a0,24),HX_("emptyArray",cc,43,e2,a5))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestError_obj,emptyArray,(void))

void TestError_obj::emptyString(::String s){
            	HX_STACK_FRAME("thx.TestError","emptyString",0x33d0b55c,"thx.TestError.emptyString","thx/error/NullArgument.hx",57,0x9d70c468)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE(  57)		if (hx::IsNull( s )) {
HXLINE(  58)			HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("String argument \"this\" cannot be null",11,b2,ce,39),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),58,HX_("thx.TestError",8c,21,a0,24),HX_("emptyString",3e,bf,58,d9))));
            		}
            		else {
HXLINE(  59)			if ((s == HX_("",00,00,00,00))) {
HXLINE(  60)				HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("String argument \"this\" cannot be empty",c3,3f,2b,27),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),60,HX_("thx.TestError",8c,21,a0,24),HX_("emptyString",3e,bf,58,d9))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestError_obj,emptyString,(void))

void TestError_obj::emptyIterator( ::Dynamic it){
            	HX_STACK_FRAME("thx.TestError","emptyIterator",0x08df4f39,"thx.TestError.emptyIterator","thx/error/NullArgument.hx",64,0x9d70c468)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(it,"it")
HXLINE(  64)		if (hx::IsNull( it )) {
HXLINE(  65)			HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("Iterator argument \"this\" cannot be null",94,87,2c,b7),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),65,HX_("thx.TestError",8c,21,a0,24),HX_("emptyIterator",9b,15,e7,27))));
            		}
            		else {
HXLINE(  66)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  66)			if (_hx_tmp) {
HXLINE(  67)				HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("Iterator argument \"this\" cannot be empty",e0,3c,e8,5b),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),67,HX_("thx.TestError",8c,21,a0,24),HX_("emptyIterator",9b,15,e7,27))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestError_obj,emptyIterator,(void))

void TestError_obj::emptyIterable( ::Dynamic it){
            	HX_STACK_FRAME("thx.TestError","emptyIterable",0x08d1a3fd,"thx.TestError.emptyIterable","thx/error/NullArgument.hx",72,0x9d70c468)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(it,"it")
HXLINE(  72)		if (hx::IsNull( it )) {
HXLINE(  73)			HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("Iterable argument \"this\" cannot be null",50,67,e4,44),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),73,HX_("thx.TestError",8c,21,a0,24),HX_("emptyIterable",5f,6a,d9,27))));
            		}
            		else {
HXLINE(  74)			Bool _hx_tmp = !(( (Bool)( ::Dynamic( ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))()->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  74)			if (_hx_tmp) {
HXLINE(  75)				HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("Iterable argument \"this\" cannot be empty",a4,21,14,cf),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),75,HX_("thx.TestError",8c,21,a0,24),HX_("emptyIterable",5f,6a,d9,27))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestError_obj,emptyIterable,(void))


TestError_obj::TestError_obj()
{
}

hx::Val TestError_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"nullInt") ) { return hx::Val( nullInt_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"emptyArray") ) { return hx::Val( emptyArray_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"emptyString") ) { return hx::Val( emptyString_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testAbstract") ) { return hx::Val( testAbstract_dyn()); }
		if (HX_FIELD_EQ(inName,"nullUsingInt") ) { return hx::Val( nullUsingInt_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"emptyIterator") ) { return hx::Val( emptyIterator_dyn()); }
		if (HX_FIELD_EQ(inName,"emptyIterable") ) { return hx::Val( emptyIterable_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testEmptyArray") ) { return hx::Val( testEmptyArray_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testEmptyString") ) { return hx::Val( testEmptyString_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testNullArgument") ) { return hx::Val( testNullArgument_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testEmptyIterator") ) { return hx::Val( testEmptyIterator_dyn()); }
		if (HX_FIELD_EQ(inName,"testEmptyIterable") ) { return hx::Val( testEmptyIterable_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"testNotImplemented") ) { return hx::Val( testNotImplemented_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"testNullArgumentUsing") ) { return hx::Val( testNullArgumentUsing_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestError_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestError_obj_sStaticStorageInfo = 0;
#endif

static ::String TestError_obj_sMemberFields[] = {
	HX_HCSTRING("testAbstract","\x54","\xe7","\x85","\x1b"),
	HX_HCSTRING("testNotImplemented","\x61","\xc2","\x90","\xcd"),
	HX_HCSTRING("testNullArgument","\x96","\x6f","\xc6","\x02"),
	HX_HCSTRING("testNullArgumentUsing","\xce","\x35","\x72","\x03"),
	HX_HCSTRING("testEmptyArray","\xbe","\x6a","\xd5","\x45"),
	HX_HCSTRING("testEmptyString","\x0c","\xac","\x27","\x2e"),
	HX_HCSTRING("testEmptyIterator","\xe9","\x51","\xe5","\x7f"),
	HX_HCSTRING("testEmptyIterable","\xad","\xa6","\xd7","\x7f"),
	HX_HCSTRING("nullInt","\xa8","\xb4","\xdb","\x1c"),
	HX_HCSTRING("nullUsingInt","\xb2","\xab","\xe8","\x84"),
	HX_HCSTRING("emptyArray","\xcc","\x43","\xe2","\xa5"),
	HX_HCSTRING("emptyString","\x3e","\xbf","\x58","\xd9"),
	HX_HCSTRING("emptyIterator","\x9b","\x15","\xe7","\x27"),
	HX_HCSTRING("emptyIterable","\x5f","\x6a","\xd9","\x27"),
	::String(null()) };

static void TestError_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestError_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestError_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestError_obj::__mClass,"__mClass");
};

#endif

hx::Class TestError_obj::__mClass;

void TestError_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestError","\x8c","\x21","\xa0","\x24");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestError_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestError_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestError_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestError_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestError_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestError_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
