// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_TestQueryString
#include <thx/TestQueryString.h>
#endif
#ifndef INCLUDED_thx__QueryString_QueryString_Impl_
#include <thx/_QueryString/QueryString_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestQueryString_obj::__construct(){
            	HX_STACK_FRAME("thx.TestQueryString","new",0x3306622f,"thx.TestQueryString.new","thx/TestQueryString.hx",7,0xd75c4c62)
            	HX_STACK_THIS(this)
            	}

Dynamic TestQueryString_obj::__CreateEmpty() { return new TestQueryString_obj; }

hx::ObjectPtr< TestQueryString_obj > TestQueryString_obj::__new()
{
	hx::ObjectPtr< TestQueryString_obj > _hx_result = new TestQueryString_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestQueryString_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestQueryString_obj > _hx_result = new TestQueryString_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestQueryString_obj::testBasics(){
            	HX_STACK_FRAME("thx.TestQueryString","testBasics",0xa81b4a08,"thx.TestQueryString.testBasics","thx/TestQueryString.hx",9,0xd75c4c62)
            	HX_STACK_THIS(this)
HXLINE(  12)		 ::haxe::ds::StringMap _hx_tmp = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("?foo=bar",5d,8d,ab,18),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  12)		 ::Dynamic _hx_tmp1 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp);
HXLINE(  10)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00),HX_("bar",d3,b1,4a,00))),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),10,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  17)		 ::haxe::ds::StringMap _hx_tmp2 = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("#foo=bar",f9,11,27,d7),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  17)		 ::Dynamic _hx_tmp3 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp2);
HXLINE(  15)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00),HX_("bar",d3,b1,4a,00))),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),15,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  22)		 ::haxe::ds::StringMap _hx_tmp4 = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("foo=bar",bc,77,41,05),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  22)		 ::Dynamic _hx_tmp5 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp4);
HXLINE(  20)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00),HX_("bar",d3,b1,4a,00))),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),20,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  27)		 ::haxe::ds::StringMap _hx_tmp6 = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("foo",06,c7,4d,00),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  27)		 ::Dynamic _hx_tmp7 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp6);
HXLINE(  25)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00),null())),_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),25,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  32)		HX_VARI_NAME(  ::haxe::ds::StringMap,this1,"this") = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("foo",06,c7,4d,00),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  32)		::String _hx_tmp8 = ::thx::_QueryString::QueryString_Impl__obj::toStringWithSymbols(this1,::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::encodeURIComponent);
HXLINE(  30)		::utest::Assert_obj::equals(HX_("foo",06,c7,4d,00),_hx_tmp8,null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),30,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  37)		 ::haxe::ds::StringMap _hx_tmp9 = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("foo&key",3f,67,14,f6),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  37)		 ::Dynamic _hx_tmp10 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp9);
HXLINE(  35)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("foo",06,c7,4d,00),null())
            			->setFixed(1,HX_("key",9f,89,51,00),null())),_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),35,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  42)		 ::haxe::ds::StringMap _hx_tmp11 = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("foo=bar&key",f5,aa,8d,41),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  42)		 ::Dynamic _hx_tmp12 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp11);
HXLINE(  40)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("foo",06,c7,4d,00),HX_("bar",d3,b1,4a,00))
            			->setFixed(1,HX_("key",9f,89,51,00),null())),_hx_tmp12,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),40,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  47)		 ::haxe::ds::StringMap _hx_tmp13 = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("?",3f,00,00,00),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  47)		 ::Dynamic _hx_tmp14 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp13);
HXLINE(  45)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),_hx_tmp14,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),45,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  52)		 ::haxe::ds::StringMap _hx_tmp15 = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("#",23,00,00,00),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  52)		 ::Dynamic _hx_tmp16 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp15);
HXLINE(  50)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),_hx_tmp16,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),50,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  57)		 ::haxe::ds::StringMap _hx_tmp17 = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_(" ",20,00,00,00),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  57)		 ::Dynamic _hx_tmp18 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp17);
HXLINE(  55)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),_hx_tmp18,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),55,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  62)		 ::haxe::ds::StringMap _hx_tmp19 = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("foo=bar&foo=baz",1a,fc,17,52),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  62)		 ::Dynamic _hx_tmp20 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp19);
HXLINE(  60)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00),::Array_obj< ::String >::__new(2)->init(0,HX_("bar",d3,b1,4a,00))->init(1,HX_("baz",db,b1,4a,00)))),_hx_tmp20,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),60,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  67)		 ::haxe::ds::StringMap _hx_tmp21 = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("foo+faz=bar+baz++",80,18,65,97),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  67)		 ::Dynamic _hx_tmp22 = ::thx::_QueryString::QueryString_Impl__obj::toObject(_hx_tmp21);
HXLINE(  65)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo faz",c5,50,19,f2),HX_("bar baz  ",8e,18,41,6a))),_hx_tmp22,null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),65,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  72)		HX_VARI_NAME(  ::haxe::ds::StringMap,this2,"this") = ::thx::_QueryString::QueryString_Impl__obj::fromObject( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00),HX_("bar",d3,b1,4a,00))));
HXDLIN(  72)		::String _hx_tmp23 = ::thx::_QueryString::QueryString_Impl__obj::toStringWithSymbols(this2,::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::encodeURIComponent);
HXLINE(  70)		::utest::Assert_obj::equals(HX_("foo=bar",bc,77,41,05),_hx_tmp23,null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),70,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  75)		HX_VARI(  ::haxe::ds::StringMap,qs) = ::thx::_QueryString::QueryString_Impl__obj::fromObject( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("bar",d3,b1,4a,00),HX_("baz",db,b1,4a,00))
            			->setFixed(1,HX_("foo",06,c7,4d,00),HX_("bar",d3,b1,4a,00))));
HXLINE(  76)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,HX_("bar",d3,b1,4a,00)),( (::Array< ::String >)(qs->get(HX_("foo",06,c7,4d,00))) ),null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),76,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  77)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,HX_("baz",db,b1,4a,00)),( (::Array< ::String >)(qs->get(HX_("bar",d3,b1,4a,00))) ),null(),null(),null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),77,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  79)		HX_VARI_NAME(  ::haxe::ds::StringMap,this3,"this") = ::thx::_QueryString::QueryString_Impl__obj::fromObject( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo bar",b9,47,16,f2),HX_("baz faz",1a,ca,2c,08))));
HXDLIN(  79)		HX_VARI_NAME( ::String,qs1,"qs") = ::thx::_QueryString::QueryString_Impl__obj::toStringWithSymbols(this3,::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::encodeURIComponent);
HXLINE(  81)		Bool _hx_tmp24;
HXDLIN(  81)		if ((HX_("foo%20bar=baz%20faz",70,bd,e7,ec) != qs1)) {
HXLINE(  81)			_hx_tmp24 = (HX_("foo+bar=baz+faz",e0,32,5b,e0) == qs1);
            		}
            		else {
HXLINE(  81)			_hx_tmp24 = true;
            		}
HXLINE(  80)		::utest::Assert_obj::isTrue(_hx_tmp24,null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),80,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  85)		HX_VARI_NAME(  ::haxe::ds::StringMap,this4,"this") = ::thx::_QueryString::QueryString_Impl__obj::fromObject( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("abc",62,f0,49,00),HX_("abc",62,f0,49,00))
            			->setFixed(1,HX_("foo",06,c7,4d,00),::Array_obj< ::String >::__new(2)->init(0,HX_("bar",d3,b1,4a,00))->init(1,HX_("baz",db,b1,4a,00)))));
HXDLIN(  85)		HX_VARI_NAME( ::String,qs2,"qs") = ::thx::_QueryString::QueryString_Impl__obj::toStringWithSymbols(this4,::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::encodeURIComponent);
HXLINE(  87)		Bool _hx_tmp25;
HXDLIN(  87)		Bool _hx_tmp26;
HXDLIN(  87)		Bool _hx_tmp27;
HXDLIN(  87)		Bool _hx_tmp28;
HXDLIN(  87)		Bool _hx_tmp29;
HXDLIN(  87)		if ((HX_("abc=abc&foo=bar&foo=baz",5b,d2,38,d0) != qs2)) {
HXLINE(  87)			_hx_tmp29 = (HX_("foo=bar&abc=abc&foo=baz",5b,6f,b5,8e) == qs2);
            		}
            		else {
HXLINE(  87)			_hx_tmp29 = true;
            		}
HXDLIN(  87)		if (!(_hx_tmp29)) {
HXLINE(  87)			_hx_tmp28 = (HX_("foo=bar&foo=baz&abc=abc",5b,54,58,68) == qs2);
            		}
            		else {
HXLINE(  87)			_hx_tmp28 = true;
            		}
HXDLIN(  87)		if (!(_hx_tmp28)) {
HXLINE(  87)			_hx_tmp27 = (HX_("abc=abc&foo=baz&foo=bar",5b,1a,c4,67) == qs2);
            		}
            		else {
HXLINE(  87)			_hx_tmp27 = true;
            		}
HXDLIN(  87)		if (!(_hx_tmp27)) {
HXLINE(  87)			_hx_tmp26 = (HX_("foo=bar&abc=abc&foo=baz",5b,6f,b5,8e) == qs2);
            		}
            		else {
HXLINE(  87)			_hx_tmp26 = true;
            		}
HXDLIN(  87)		if (!(_hx_tmp26)) {
HXLINE(  87)			_hx_tmp25 = (HX_("foo=bar&foo=baz&abc=abc",5b,54,58,68) == qs2);
            		}
            		else {
HXLINE(  87)			_hx_tmp25 = true;
            		}
HXLINE(  86)		::utest::Assert_obj::isTrue(_hx_tmp25,null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),86,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  95)		HX_VARI_NAME(  ::haxe::ds::StringMap,this5,"this") = ::thx::_QueryString::QueryString_Impl__obj::parseWithSymbols(HX_("a=b&c=d",6a,4b,15,ac),::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::decodeURIComponent);
HXDLIN(  95)		HX_VARI_NAME( ::String,qs3,"qs") = ::thx::_QueryString::QueryString_Impl__obj::toStringWithSymbols(this5,::thx::_QueryString::QueryString_Impl__obj::separator,::thx::_QueryString::QueryString_Impl__obj::assignment,::thx::_QueryString::QueryString_Impl__obj::encodeURIComponent);
HXLINE(  97)		Bool _hx_tmp30;
HXDLIN(  97)		if ((HX_("a=b&c=d",6a,4b,15,ac) != qs3)) {
HXLINE(  97)			_hx_tmp30 = (HX_("c=d&a=b",6a,dd,0b,26) == qs3);
            		}
            		else {
HXLINE(  97)			_hx_tmp30 = true;
            		}
HXLINE(  96)		::utest::Assert_obj::isTrue(_hx_tmp30,null(),hx::SourceInfo(HX_("TestQueryString.hx",77,12,ad,c9),96,HX_("thx.TestQueryString",bd,1e,28,08),HX_("testBasics",f7,73,1f,6e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestQueryString_obj,testBasics,(void))


TestQueryString_obj::TestQueryString_obj()
{
}

hx::Val TestQueryString_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestQueryString_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestQueryString_obj_sStaticStorageInfo = 0;
#endif

static ::String TestQueryString_obj_sMemberFields[] = {
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	::String(null()) };

static void TestQueryString_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestQueryString_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestQueryString_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestQueryString_obj::__mClass,"__mClass");
};

#endif

hx::Class TestQueryString_obj::__mClass;

void TestQueryString_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestQueryString","\xbd","\x1e","\x28","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestQueryString_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestQueryString_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestQueryString_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestQueryString_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestQueryString_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestQueryString_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
