// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_Dates
#include <thx/Dates.h>
#endif
#ifndef INCLUDED_thx_TestDates
#include <thx/TestDates.h>
#endif
#ifndef INCLUDED_thx_TimePeriod
#include <thx/TimePeriod.h>
#endif
#ifndef INCLUDED_thx__Timestamp_Timestamp_Impl_
#include <thx/_Timestamp/Timestamp_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestDates_obj::__construct(){
            	HX_STACK_FRAME("thx.TestDates","new",0x304e61bb,"thx.TestDates.new","thx/TestDates.hx",8,0x0116eb96)
            	HX_STACK_THIS(this)
            	}

Dynamic TestDates_obj::__CreateEmpty() { return new TestDates_obj; }

hx::ObjectPtr< TestDates_obj > TestDates_obj::__new()
{
	hx::ObjectPtr< TestDates_obj > _hx_result = new TestDates_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestDates_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestDates_obj > _hx_result = new TestDates_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestDates_obj::testCreate(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::Dynamic o){
            			HX_STACK_FRAME("thx.TestDates","testCreate",0x9fdbccf3,"thx.TestDates.testCreate","thx/TestDates.hx",36,0x0116eb96)
            			HX_STACK_ARG(o,"o")
HXLINE(  36)			Float _hx_tmp32 = ( ( ::Date)(o->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)) )->getTime();
HXDLIN(  36)			Float _hx_tmp33 = ( ( ::Date)(o->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)) )->getTime();
HXDLIN(  36)			::String _hx_tmp34 = ( ( ::Date)(o->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)) )->toString();
HXDLIN(  36)			::String _hx_tmp35 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp34) + HX_(" but was  ",2a,cb,10,56));
HXDLIN(  36)			::String _hx_tmp36 = ( ( ::Date)(o->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)) )->toString();
HXDLIN(  36)			::utest::Assert_obj::floatEquals(_hx_tmp32,_hx_tmp33,null(),(_hx_tmp35 + _hx_tmp36),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),36,HX_("thx.TestDates",49,68,fe,85),HX_("testCreate",ee,ac,03,95)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.TestDates","testCreate",0x9fdbccf3,"thx.TestDates.testCreate","thx/TestDates.hx",10,0x0116eb96)
            	HX_STACK_THIS(this)
HXLINE(  13)		 ::Date _hx_tmp =  ::Date_obj::__new((int)2014,(int)11,(int)1,(int)0,(int)0,(int)0);
HXDLIN(  13)		 ::Date _hx_tmp1 = ::thx::Dates_obj::create((int)2014,(int)11,(int)1,null(),null(),null());
HXDLIN(  13)		 ::Dynamic _hx_tmp2 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp1));
HXLINE(  15)		 ::Date _hx_tmp3 =  ::Date_obj::__new((int)2015,(int)3,(int)1,(int)0,(int)0,(int)0);
HXDLIN(  15)		 ::Date _hx_tmp4 = ::thx::Dates_obj::create((int)2014,(int)15,(int)1,null(),null(),null());
HXDLIN(  15)		 ::Dynamic _hx_tmp5 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp3)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp4));
HXLINE(  16)		 ::Date _hx_tmp6 =  ::Date_obj::__new((int)2013,(int)11,(int)1,(int)0,(int)0,(int)0);
HXDLIN(  16)		 ::Date _hx_tmp7 = ::thx::Dates_obj::create((int)2014,(int)-1,(int)1,null(),null(),null());
HXDLIN(  16)		 ::Dynamic _hx_tmp8 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp6)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp7));
HXLINE(  19)		 ::Date _hx_tmp9 =  ::Date_obj::__new((int)2014,(int)2,(int)4,(int)0,(int)0,(int)0);
HXDLIN(  19)		 ::Date _hx_tmp10 = ::thx::Dates_obj::create((int)2014,(int)1,(int)32,null(),null(),null());
HXDLIN(  19)		 ::Dynamic _hx_tmp11 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp9)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp10));
HXLINE(  20)		 ::Date _hx_tmp12 =  ::Date_obj::__new((int)2013,(int)11,(int)31,(int)0,(int)0,(int)0);
HXDLIN(  20)		 ::Date _hx_tmp13 = ::thx::Dates_obj::create((int)2014,(int)0,(int)0,null(),null(),null());
HXDLIN(  20)		 ::Dynamic _hx_tmp14 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp12)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp13));
HXLINE(  23)		 ::Date _hx_tmp15 =  ::Date_obj::__new((int)2014,(int)1,(int)2,(int)2,(int)0,(int)0);
HXDLIN(  23)		 ::Date _hx_tmp16 = ::thx::Dates_obj::create((int)2014,(int)1,(int)1,(int)26,null(),null());
HXDLIN(  23)		 ::Dynamic _hx_tmp17 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp15)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp16));
HXLINE(  24)		 ::Date _hx_tmp18 =  ::Date_obj::__new((int)2013,(int)11,(int)31,(int)23,(int)0,(int)0);
HXDLIN(  24)		 ::Date _hx_tmp19 = ::thx::Dates_obj::create((int)2014,(int)0,(int)1,(int)-1,null(),null());
HXDLIN(  24)		 ::Dynamic _hx_tmp20 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp18)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp19));
HXLINE(  27)		 ::Date _hx_tmp21 =  ::Date_obj::__new((int)2014,(int)1,(int)1,(int)1,(int)5,(int)0);
HXDLIN(  27)		 ::Date _hx_tmp22 = ::thx::Dates_obj::create((int)2014,(int)1,(int)1,(int)0,(int)65,null());
HXDLIN(  27)		 ::Dynamic _hx_tmp23 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp21)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp22));
HXLINE(  28)		 ::Date _hx_tmp24 =  ::Date_obj::__new((int)2013,(int)11,(int)31,(int)23,(int)59,(int)0);
HXDLIN(  28)		 ::Date _hx_tmp25 = ::thx::Dates_obj::create((int)2014,(int)0,(int)1,(int)0,(int)-1,null());
HXDLIN(  28)		 ::Dynamic _hx_tmp26 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp24)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp25));
HXLINE(  31)		 ::Date _hx_tmp27 =  ::Date_obj::__new((int)2014,(int)1,(int)1,(int)0,(int)1,(int)5);
HXDLIN(  31)		 ::Date _hx_tmp28 = ::thx::Dates_obj::create((int)2014,(int)1,(int)1,(int)0,(int)0,(int)65);
HXDLIN(  31)		 ::Dynamic _hx_tmp29 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp27)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp28));
HXLINE(  32)		 ::Date _hx_tmp30 =  ::Date_obj::__new((int)2013,(int)11,(int)31,(int)23,(int)59,(int)59);
HXDLIN(  32)		 ::Date _hx_tmp31 = ::thx::Dates_obj::create((int)2014,(int)0,(int)1,(int)0,(int)0,(int)-1);
HXLINE(  35)		::Array_obj< ::Dynamic>::__new(11)->init(0,_hx_tmp2)->init(1,_hx_tmp5)->init(2,_hx_tmp8)->init(3,_hx_tmp11)->init(4,_hx_tmp14)->init(5,_hx_tmp17)->init(6,_hx_tmp20)->init(7,_hx_tmp23)->init(8,_hx_tmp26)->init(9,_hx_tmp29)->init(10, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),_hx_tmp30)
            			->setFixed(1,HX_("test",52,c8,f9,4c),_hx_tmp31)))->map( ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDates_obj,testCreate,(void))

void TestDates_obj::testSnapNext(){
            	HX_STACK_FRAME("thx.TestDates","testSnapNext",0x05680614,"thx.TestDates.testSnapNext","thx/TestDates.hx",40,0x0116eb96)
            	HX_STACK_THIS(this)
HXLINE(  41)		this->assertSnapNext(HX_("2014-01-01 10:07:00",17,45,3d,9c),HX_("2014-01-01 10:06:10",57,0f,94,9b),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),41,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  42)		this->assertSnapNext(HX_("2014-01-01 10:06:00",78,0e,94,9b),HX_("2014-01-01 10:05:50",34,dc,ea,9a),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),42,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  43)		this->assertSnapNext(HX_("2014-01-01 11:00:00",7f,3d,32,c1),HX_("2014-01-01 10:10:10",1e,5c,03,2b),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),43,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  44)		this->assertSnapNext(HX_("2014-01-01 10:00:00",be,c6,9c,97),HX_("2014-01-01 09:50:10",cc,68,ac,b5),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),44,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  45)		this->assertSnapNext(HX_("2014-01-02 00:00:00",7e,cc,b4,1e),HX_("2014-01-01 10:00:00",be,c6,9c,97),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),45,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  46)		this->assertSnapNext(HX_("2014-01-01 00:00:00",9f,54,6a,5e),HX_("2013-12-31 20:00:00",61,22,a8,94),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),46,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  47)		this->assertSnapNext(HX_("2014-12-21 00:00:00",01,fc,94,68),HX_("2014-12-17 11:00:00",da,48,3d,cc),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),47,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  48)		this->assertSnapNext(HX_("2014-12-21 00:00:00",01,fc,94,68),HX_("2014-12-18 00:00:00",d9,d7,bf,29),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),48,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  49)		this->assertSnapNext(HX_("2015-01-01 00:00:00",be,7d,9a,25),HX_("2014-12-12 00:00:00",9f,08,01,a8),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),49,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  50)		this->assertSnapNext(HX_("2015-01-01 00:00:00",be,7d,9a,25),HX_("2014-12-18 00:00:00",d9,d7,bf,29),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),50,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  51)		this->assertSnapNext(HX_("2015-01-01 00:00:00",be,7d,9a,25),HX_("2014-05-12 00:00:00",c3,2d,95,b6),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),51,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  52)		this->assertSnapNext(HX_("2015-01-01 00:00:00",be,7d,9a,25),HX_("2014-12-18 00:00:00",d9,d7,bf,29),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),52,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapNext",cf,1a,44,7c)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDates_obj,testSnapNext,(void))

void TestDates_obj::testSnapPrev(){
            	HX_STACK_FRAME("thx.TestDates","testSnapPrev",0x06c44014,"thx.TestDates.testSnapPrev","thx/TestDates.hx",55,0x0116eb96)
            	HX_STACK_THIS(this)
HXLINE(  56)		this->assertSnapPrev(HX_("2014-01-01 10:06:00",78,0e,94,9b),HX_("2014-01-01 10:06:10",57,0f,94,9b),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),56,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  57)		this->assertSnapPrev(HX_("2014-01-01 10:05:00",d9,d7,ea,9a),HX_("2014-01-01 10:05:50",34,dc,ea,9a),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),57,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  58)		this->assertSnapPrev(HX_("2014-01-01 10:00:00",be,c6,9c,97),HX_("2014-01-01 10:10:10",1e,5c,03,2b),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),58,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  59)		this->assertSnapPrev(HX_("2014-01-01 09:00:00",68,81,ab,d4),HX_("2014-01-01 09:50:10",cc,68,ac,b5),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),59,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  60)		this->assertSnapPrev(HX_("2014-01-01 00:00:00",9f,54,6a,5e),HX_("2014-01-01 10:00:00",be,c6,9c,97),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),60,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  61)		this->assertSnapPrev(HX_("2013-12-31 00:00:00",23,3e,43,22),HX_("2013-12-31 20:00:00",61,22,a8,94),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),61,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  62)		this->assertSnapPrev(HX_("2014-12-14 00:00:00",5d,f8,95,28),HX_("2014-12-17 11:00:00",da,48,3d,cc),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),62,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  63)		this->assertSnapPrev(HX_("2014-12-14 00:00:00",5d,f8,95,28),HX_("2014-12-18 00:00:00",d9,d7,bf,29),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),63,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  64)		this->assertSnapPrev(HX_("2014-12-01 00:00:00",7f,25,d8,66),HX_("2014-12-12 00:00:00",9f,08,01,a8),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),64,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  65)		this->assertSnapPrev(HX_("2014-12-01 00:00:00",7f,25,d8,66),HX_("2014-12-18 00:00:00",d9,d7,bf,29),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),65,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  66)		this->assertSnapPrev(HX_("2014-01-01 00:00:00",9f,54,6a,5e),HX_("2014-05-12 00:00:00",c3,2d,95,b6),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),66,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE(  67)		this->assertSnapPrev(HX_("2014-01-01 00:00:00",9f,54,6a,5e),HX_("2014-12-18 00:00:00",d9,d7,bf,29),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),67,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapPrev",cf,54,a0,7d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDates_obj,testSnapPrev,(void))

void TestDates_obj::testSnapTo(){
            	HX_STACK_FRAME("thx.TestDates","testSnapTo",0xb55dac5c,"thx.TestDates.testSnapTo","thx/TestDates.hx",70,0x0116eb96)
            	HX_STACK_THIS(this)
HXLINE(  71)		this->assertSnapTo(HX_("2014-01-01 10:06:00",78,0e,94,9b),HX_("2014-01-01 10:06:10",57,0f,94,9b),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),71,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  72)		this->assertSnapTo(HX_("2014-01-01 10:06:00",78,0e,94,9b),HX_("2014-01-01 10:05:50",34,dc,ea,9a),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),72,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  73)		this->assertSnapTo(HX_("2014-01-01 10:00:00",be,c6,9c,97),HX_("2014-01-01 10:10:10",1e,5c,03,2b),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),73,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  74)		this->assertSnapTo(HX_("2014-01-01 10:00:00",be,c6,9c,97),HX_("2014-01-01 09:50:10",cc,68,ac,b5),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),74,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  75)		this->assertSnapTo(HX_("2014-01-01 00:00:00",9f,54,6a,5e),HX_("2014-01-01 10:00:00",be,c6,9c,97),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),75,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  76)		this->assertSnapTo(HX_("2014-01-01 00:00:00",9f,54,6a,5e),HX_("2013-12-31 20:00:00",61,22,a8,94),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),76,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  77)		this->assertSnapTo(HX_("2014-12-14 00:00:00",5d,f8,95,28),HX_("2014-12-17 11:00:00",da,48,3d,cc),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),77,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  78)		this->assertSnapTo(HX_("2014-12-21 00:00:00",01,fc,94,68),HX_("2014-12-18 00:00:00",d9,d7,bf,29),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),78,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  79)		this->assertSnapTo(HX_("2014-12-01 00:00:00",7f,25,d8,66),HX_("2014-12-12 00:00:00",9f,08,01,a8),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),79,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  80)		this->assertSnapTo(HX_("2015-01-01 00:00:00",be,7d,9a,25),HX_("2014-12-18 00:00:00",d9,d7,bf,29),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),80,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  81)		this->assertSnapTo(HX_("2014-01-01 00:00:00",9f,54,6a,5e),HX_("2014-05-12 00:00:00",c3,2d,95,b6),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),81,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
HXLINE(  82)		this->assertSnapTo(HX_("2015-01-01 00:00:00",be,7d,9a,25),HX_("2014-12-18 00:00:00",d9,d7,bf,29),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDates.hx",eb,43,75,29),82,HX_("thx.TestDates",49,68,fe,85),HX_("testSnapTo",57,8c,85,aa)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDates_obj,testSnapTo,(void))

void TestDates_obj::assertSnapTo(::String expected,::String date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestDates","assertSnapTo",0x079f4510,"thx.TestDates.assertSnapTo","thx/TestDates.hx",85,0x0116eb96)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  86)		HX_VARI_NAME(  ::Date,date1,"date") = ::Date_obj::fromString(date);
HXDLIN(  86)		HX_VARI_NAME( Float,this1,"this") = ::thx::_Timestamp::Timestamp_Impl__obj::snapTo(date1->getTime(),period);
HXDLIN(  86)		HX_VARI(  ::Date,t) = ::Date_obj::fromTime(this1);
HXLINE(  88)		Float _hx_tmp = ::Date_obj::fromString(expected)->getTime();
HXLINE(  89)		Float _hx_tmp1 = t->getTime();
HXLINE(  90)		::String _hx_tmp2 = ((((HX_("expected ",a8,7a,f8,e9) + date) + HX_(" to snap to ",94,e4,0d,46)) + expected) + HX_(" for ",17,f1,92,b0));
HXDLIN(  90)		::String _hx_tmp3 = ::Std_obj::string(period);
HXDLIN(  90)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" but it is ",60,e9,99,19));
HXDLIN(  90)		::String _hx_tmp5 = t->toString();
HXLINE(  87)		::utest::Assert_obj::floatEquals(_hx_tmp,_hx_tmp1,null(),(_hx_tmp4 + _hx_tmp5),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestDates_obj,assertSnapTo,(void))

void TestDates_obj::assertSnapPrev(::String expected,::String date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestDates","assertSnapPrev",0x9f246dc8,"thx.TestDates.assertSnapPrev","thx/TestDates.hx",95,0x0116eb96)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  96)		HX_VARI_NAME(  ::Date,date1,"date") = ::Date_obj::fromString(date);
HXDLIN(  96)		HX_VARI_NAME( Float,this1,"this") = ::thx::_Timestamp::Timestamp_Impl__obj::snapPrev(date1->getTime(),period);
HXDLIN(  96)		HX_VARI(  ::Date,t) = ::Date_obj::fromTime(this1);
HXLINE(  98)		Float _hx_tmp = ::Date_obj::fromString(expected)->getTime();
HXLINE(  99)		Float _hx_tmp1 = t->getTime();
HXLINE( 100)		::String _hx_tmp2 = ((((HX_("expected ",a8,7a,f8,e9) + date) + HX_(" to snap before ",90,ec,cb,0f)) + expected) + HX_(" for ",17,f1,92,b0));
HXDLIN( 100)		::String _hx_tmp3 = ::Std_obj::string(period);
HXDLIN( 100)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 100)		::String _hx_tmp5 = t->toString();
HXLINE(  97)		::utest::Assert_obj::floatEquals(_hx_tmp,_hx_tmp1,null(),(_hx_tmp4 + _hx_tmp5),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestDates_obj,assertSnapPrev,(void))

void TestDates_obj::assertSnapNext(::String expected,::String date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestDates","assertSnapNext",0x9dc833c8,"thx.TestDates.assertSnapNext","thx/TestDates.hx",105,0x0116eb96)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 106)		HX_VARI_NAME(  ::Date,date1,"date") = ::Date_obj::fromString(date);
HXDLIN( 106)		HX_VARI_NAME( Float,this1,"this") = ::thx::_Timestamp::Timestamp_Impl__obj::snapNext(date1->getTime(),period);
HXDLIN( 106)		HX_VARI(  ::Date,t) = ::Date_obj::fromTime(this1);
HXLINE( 108)		Float _hx_tmp = ::Date_obj::fromString(expected)->getTime();
HXLINE( 109)		Float _hx_tmp1 = t->getTime();
HXLINE( 110)		::String _hx_tmp2 = ((((HX_("expected ",a8,7a,f8,e9) + date) + HX_(" to snap after ",95,0f,fc,c6)) + expected) + HX_(" for ",17,f1,92,b0));
HXDLIN( 110)		::String _hx_tmp3 = ::Std_obj::string(period);
HXDLIN( 110)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 110)		::String _hx_tmp5 = t->toString();
HXLINE( 107)		::utest::Assert_obj::floatEquals(_hx_tmp,_hx_tmp1,null(),(_hx_tmp4 + _hx_tmp5),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestDates_obj,assertSnapNext,(void))


TestDates_obj::TestDates_obj()
{
}

hx::Val TestDates_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"testCreate") ) { return hx::Val( testCreate_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapTo") ) { return hx::Val( testSnapTo_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testSnapNext") ) { return hx::Val( testSnapNext_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapPrev") ) { return hx::Val( testSnapPrev_dyn()); }
		if (HX_FIELD_EQ(inName,"assertSnapTo") ) { return hx::Val( assertSnapTo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"assertSnapPrev") ) { return hx::Val( assertSnapPrev_dyn()); }
		if (HX_FIELD_EQ(inName,"assertSnapNext") ) { return hx::Val( assertSnapNext_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestDates_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestDates_obj_sStaticStorageInfo = 0;
#endif

static ::String TestDates_obj_sMemberFields[] = {
	HX_HCSTRING("testCreate","\xee","\xac","\x03","\x95"),
	HX_HCSTRING("testSnapNext","\xcf","\x1a","\x44","\x7c"),
	HX_HCSTRING("testSnapPrev","\xcf","\x54","\xa0","\x7d"),
	HX_HCSTRING("testSnapTo","\x57","\x8c","\x85","\xaa"),
	HX_HCSTRING("assertSnapTo","\xcb","\x59","\x7b","\x7e"),
	HX_HCSTRING("assertSnapPrev","\x43","\x67","\xbb","\x94"),
	HX_HCSTRING("assertSnapNext","\x43","\x2d","\x5f","\x93"),
	::String(null()) };

static void TestDates_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestDates_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestDates_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestDates_obj::__mClass,"__mClass");
};

#endif

hx::Class TestDates_obj::__mClass;

void TestDates_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestDates","\x49","\x68","\xfe","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestDates_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestDates_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestDates_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestDates_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDates_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDates_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
