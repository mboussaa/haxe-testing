// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_thx_TestTime
#include <thx/TestTime.h>
#endif
#ifndef INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_
#include <thx/_DateTimeUtc/DateTimeUtc_Impl_.h>
#endif
#ifndef INCLUDED_thx__Time_Time_Impl_
#include <thx/_Time/Time_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestTime_obj::__construct(){
            	HX_STACK_FRAME("thx.TestTime","new",0xa13e943b,"thx.TestTime.new","thx/TestTime.hx",8,0xd68f7934)
            	HX_STACK_THIS(this)
            	}

Dynamic TestTime_obj::__CreateEmpty() { return new TestTime_obj; }

hx::ObjectPtr< TestTime_obj > TestTime_obj::__new()
{
	hx::ObjectPtr< TestTime_obj > _hx_result = new TestTime_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestTime_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestTime_obj > _hx_result = new TestTime_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestTime_obj::testBasics(){
            	HX_STACK_FRAME("thx.TestTime","testBasics",0x798ab17c,"thx.TestTime.testBasics","thx/TestTime.hx",10,0xd68f7934)
            	HX_STACK_THIS(this)
HXLINE(  11)		HX_VARI(  ::cpp::Int64Struct,time) = ::thx::_Time::Time_Impl__obj::create((int)249,(int)8,(int)7,(int)6);
HXLINE(  12)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN(  12)		Bool _hx_tmp = _hx_int64_is_zero(time);
HXDLIN(  12)		if (_hx_tmp) {
HXLINE(  12)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  12)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_div(time,b);
HXDLIN(  12)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN(  12)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN(  12)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE(  12)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  12)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN(  12)		::utest::Assert_obj::equals((int)10,_hx_tmp3,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),12,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  13)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN(  13)		Bool _hx_tmp4 = _hx_int64_is_zero(time);
HXDLIN(  13)		if (_hx_tmp4) {
HXLINE(  13)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  13)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(time,b1);
HXDLIN(  13)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN(  13)		Bool _hx_tmp5 = _hx_int64_is_zero(a);
HXDLIN(  13)		if (_hx_tmp5) {
HXLINE(  13)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  13)		HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(a,b2);
HXDLIN(  13)		Int _hx_tmp6 = _hx_int64_high(x1);
HXDLIN(  13)		Int _hx_tmp7 = _hx_int64_low(x1);
HXDLIN(  13)		if ((_hx_tmp6 != ((int)_hx_tmp7 >> (int)(int)31))) {
HXLINE(  13)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  13)		Int _hx_tmp8 = _hx_int64_low(x1);
HXDLIN(  13)		::utest::Assert_obj::equals((int)9,_hx_tmp8,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),13,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  14)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN(  14)		Bool _hx_tmp9 = _hx_int64_is_zero(time);
HXDLIN(  14)		if (_hx_tmp9) {
HXLINE(  14)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  14)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_div(time,b3);
HXDLIN(  14)		HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN(  14)		Bool _hx_tmp10 = _hx_int64_is_zero(a1);
HXDLIN(  14)		if (_hx_tmp10) {
HXLINE(  14)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  14)		HX_VARI_NAME(  ::cpp::Int64Struct,x2,"x") = _hx_int64_mod(a1,b4);
HXDLIN(  14)		Int _hx_tmp11 = _hx_int64_high(x2);
HXDLIN(  14)		Int _hx_tmp12 = _hx_int64_low(x2);
HXDLIN(  14)		if ((_hx_tmp11 != ((int)_hx_tmp12 >> (int)(int)31))) {
HXLINE(  14)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  14)		Int _hx_tmp13 = _hx_int64_low(x2);
HXDLIN(  14)		::utest::Assert_obj::equals((int)8,_hx_tmp13,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),14,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  15)		HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN(  15)		Bool _hx_tmp14 = _hx_int64_is_zero(time);
HXDLIN(  15)		if (_hx_tmp14) {
HXLINE(  15)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  15)		HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = _hx_int64_div(time,b5);
HXDLIN(  15)		HX_VARI_NAME(  ::cpp::Int64Struct,b6,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN(  15)		Bool _hx_tmp15 = _hx_int64_is_zero(a2);
HXDLIN(  15)		if (_hx_tmp15) {
HXLINE(  15)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  15)		HX_VARI_NAME(  ::cpp::Int64Struct,x3,"x") = _hx_int64_mod(a2,b6);
HXDLIN(  15)		Int _hx_tmp16 = _hx_int64_high(x3);
HXDLIN(  15)		Int _hx_tmp17 = _hx_int64_low(x3);
HXDLIN(  15)		if ((_hx_tmp16 != ((int)_hx_tmp17 >> (int)(int)31))) {
HXLINE(  15)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  15)		Int _hx_tmp18 = _hx_int64_low(x3);
HXDLIN(  15)		::utest::Assert_obj::equals((int)7,_hx_tmp18,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),15,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  16)		HX_VARI_NAME(  ::cpp::Int64Struct,b7,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  16)		Bool _hx_tmp19 = _hx_int64_is_zero(time);
HXDLIN(  16)		if (_hx_tmp19) {
HXLINE(  16)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  16)		HX_VARI_NAME(  ::cpp::Int64Struct,a3,"a") = _hx_int64_div(time,b7);
HXDLIN(  16)		HX_VARI_NAME(  ::cpp::Int64Struct,b8,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::thousandI64;
HXDLIN(  16)		Bool _hx_tmp20 = _hx_int64_is_zero(a3);
HXDLIN(  16)		if (_hx_tmp20) {
HXLINE(  16)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  16)		HX_VARI_NAME(  ::cpp::Int64Struct,x4,"x") = _hx_int64_mod(a3,b8);
HXDLIN(  16)		Int _hx_tmp21 = _hx_int64_high(x4);
HXDLIN(  16)		Int _hx_tmp22 = _hx_int64_low(x4);
HXDLIN(  16)		if ((_hx_tmp21 != ((int)_hx_tmp22 >> (int)(int)31))) {
HXLINE(  16)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  16)		Int _hx_tmp23 = _hx_int64_low(x4);
HXDLIN(  16)		::utest::Assert_obj::equals((int)6,_hx_tmp23,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),16,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  17)		HX_VARI_NAME(  ::cpp::Int64Struct,b9,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMicrosecondI64;
HXDLIN(  17)		Bool _hx_tmp24 = _hx_int64_is_zero(time);
HXDLIN(  17)		if (_hx_tmp24) {
HXLINE(  17)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  17)		HX_VARI_NAME(  ::cpp::Int64Struct,a4,"a") = _hx_int64_div(time,b9);
HXDLIN(  17)		HX_VARI_NAME(  ::cpp::Int64Struct,b10,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::tenThousandI64;
HXDLIN(  17)		Bool _hx_tmp25 = _hx_int64_is_zero(a4);
HXDLIN(  17)		if (_hx_tmp25) {
HXLINE(  17)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  17)		HX_VARI_NAME(  ::cpp::Int64Struct,x5,"x") = _hx_int64_mod(a4,b10);
HXDLIN(  17)		Int _hx_tmp26 = _hx_int64_high(x5);
HXDLIN(  17)		Int _hx_tmp27 = _hx_int64_low(x5);
HXDLIN(  17)		if ((_hx_tmp26 != ((int)_hx_tmp27 >> (int)(int)31))) {
HXLINE(  17)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  17)		Int _hx_tmp28 = _hx_int64_low(x5);
HXDLIN(  17)		::utest::Assert_obj::equals((int)6000,_hx_tmp28,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),17,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  18)		HX_VARI_NAME(  ::cpp::Int64Struct,b11,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN(  18)		Bool _hx_tmp29 = _hx_int64_is_zero(time);
HXDLIN(  18)		if (_hx_tmp29) {
HXLINE(  18)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  18)		HX_VARI_NAME(  ::cpp::Int64Struct,x6,"x") = _hx_int64_mod(time,b11);
HXDLIN(  18)		Int _hx_tmp30 = _hx_int64_high(x6);
HXDLIN(  18)		Int _hx_tmp31 = _hx_int64_low(x6);
HXDLIN(  18)		if ((_hx_tmp30 != ((int)_hx_tmp31 >> (int)(int)31))) {
HXLINE(  18)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  18)		Int _hx_tmp32 = _hx_int64_low(x6);
HXDLIN(  18)		::utest::Assert_obj::equals((int)60000,_hx_tmp32,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),18,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  20)		HX_VARI_NAME(  ::cpp::Int64Struct,b12,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN(  20)		Bool _hx_tmp33 = _hx_int64_is_zero(time);
HXDLIN(  20)		if (_hx_tmp33) {
HXLINE(  20)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  20)		 ::cpp::Int64Struct _hx_tmp34 = _hx_int64_div(time,b12);
HXDLIN(  20)		HX_VARI_NAME(  ::cpp::Int64Struct,x7,"x") = _hx_tmp34;
HXDLIN(  20)		Int _hx_tmp35 = _hx_int64_high(x7);
HXDLIN(  20)		Int _hx_tmp36 = _hx_int64_low(x7);
HXDLIN(  20)		if ((_hx_tmp35 != ((int)_hx_tmp36 >> (int)(int)31))) {
HXLINE(  20)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  20)		Int _hx_tmp37 = _hx_int64_low(x7);
HXDLIN(  20)		::utest::Assert_obj::equals((int)10,_hx_tmp37,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),20,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  21)		HX_VARI_NAME(  ::cpp::Int64Struct,b13,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN(  21)		Bool _hx_tmp38 = _hx_int64_is_zero(time);
HXDLIN(  21)		if (_hx_tmp38) {
HXLINE(  21)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  21)		 ::cpp::Int64Struct _hx_tmp39 = _hx_int64_div(time,b13);
HXDLIN(  21)		HX_VARI_NAME(  ::cpp::Int64Struct,x8,"x") = _hx_tmp39;
HXDLIN(  21)		Int _hx_tmp40 = _hx_int64_high(x8);
HXDLIN(  21)		Int _hx_tmp41 = _hx_int64_low(x8);
HXDLIN(  21)		if ((_hx_tmp40 != ((int)_hx_tmp41 >> (int)(int)31))) {
HXLINE(  21)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  21)		Int _hx_tmp42 = _hx_int64_low(x8);
HXDLIN(  21)		::utest::Assert_obj::equals((int)249,_hx_tmp42,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),21,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  22)		HX_VARI_NAME(  ::cpp::Int64Struct,b14,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN(  22)		Bool _hx_tmp43 = _hx_int64_is_zero(time);
HXDLIN(  22)		if (_hx_tmp43) {
HXLINE(  22)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  22)		 ::cpp::Int64Struct _hx_tmp44 = _hx_int64_div(time,b14);
HXDLIN(  22)		HX_VARI_NAME(  ::cpp::Int64Struct,x9,"x") = _hx_tmp44;
HXDLIN(  22)		Int _hx_tmp45 = _hx_int64_high(x9);
HXDLIN(  22)		Int _hx_tmp46 = _hx_int64_low(x9);
HXDLIN(  22)		if ((_hx_tmp45 != ((int)_hx_tmp46 >> (int)(int)31))) {
HXLINE(  22)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  22)		Int _hx_tmp47 = _hx_int64_low(x9);
HXDLIN(  22)		::utest::Assert_obj::equals((int)14948,_hx_tmp47,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),22,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  23)		HX_VARI_NAME(  ::cpp::Int64Struct,b15,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN(  23)		Bool _hx_tmp48 = _hx_int64_is_zero(time);
HXDLIN(  23)		if (_hx_tmp48) {
HXLINE(  23)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  23)		 ::cpp::Int64Struct _hx_tmp49 = _hx_int64_div(time,b15);
HXDLIN(  23)		HX_VARI_NAME(  ::cpp::Int64Struct,x10,"x") = _hx_tmp49;
HXDLIN(  23)		Int _hx_tmp50 = _hx_int64_high(x10);
HXDLIN(  23)		Int _hx_tmp51 = _hx_int64_low(x10);
HXDLIN(  23)		if ((_hx_tmp50 != ((int)_hx_tmp51 >> (int)(int)31))) {
HXLINE(  23)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  23)		Int _hx_tmp52 = _hx_int64_low(x10);
HXDLIN(  23)		::utest::Assert_obj::equals((int)896887,_hx_tmp52,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),23,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  24)		HX_VARI_NAME(  ::cpp::Int64Struct,b16,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  24)		Bool _hx_tmp53 = _hx_int64_is_zero(time);
HXDLIN(  24)		if (_hx_tmp53) {
HXLINE(  24)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  24)		 ::cpp::Int64Struct _hx_tmp54 = _hx_int64_div(time,b16);
HXDLIN(  24)		HX_VARI_NAME(  ::cpp::Int64Struct,x11,"x") = _hx_tmp54;
HXDLIN(  24)		Int _hx_tmp55 = _hx_int64_high(x11);
HXDLIN(  24)		Int _hx_tmp56 = _hx_int64_low(x11);
HXDLIN(  24)		if ((_hx_tmp55 != ((int)_hx_tmp56 >> (int)(int)31))) {
HXLINE(  24)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  24)		Int _hx_tmp57 = _hx_int64_low(x11);
HXDLIN(  24)		::utest::Assert_obj::equals((int)896887006,_hx_tmp57,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),24,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  25)		HX_VARI_NAME(  ::cpp::Int64Struct,b17,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMicrosecondI64;
HXDLIN(  25)		Bool _hx_tmp58 = _hx_int64_is_zero(time);
HXDLIN(  25)		if (_hx_tmp58) {
HXLINE(  25)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  25)		 ::cpp::Int64Struct _hx_tmp59 = _hx_int64_div(time,b17);
HXDLIN(  25)		::String _hx_tmp60 = _hx_int64_to_string(_hx_tmp59);
HXDLIN(  25)		::utest::Assert_obj::equals(HX_("896887006000",7c,dd,42,32),_hx_tmp60,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),25,HX_("thx.TestTime",c9,5a,43,59),HX_("testBasics",f7,73,1f,6e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTime_obj,testBasics,(void))

void TestTime_obj::testFromString(){
            	HX_STACK_FRAME("thx.TestTime","testFromString",0x970038d2,"thx.TestTime.testFromString","thx/TestTime.hx",28,0xd68f7934)
            	HX_STACK_THIS(this)
HXLINE(  29)		HX_VARI(  ::cpp::Int64Struct,time) = ::thx::_Time::Time_Impl__obj::fromString(HX_("125:55:45.123",d9,bd,c8,cc));
HXLINE(  30)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN(  30)		Bool _hx_tmp = _hx_int64_is_zero(time);
HXDLIN(  30)		if (_hx_tmp) {
HXLINE(  30)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  30)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_div(time,b);
HXDLIN(  30)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN(  30)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN(  30)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE(  30)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  30)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN(  30)		::utest::Assert_obj::equals((int)5,_hx_tmp3,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),30,HX_("thx.TestTime",c9,5a,43,59),HX_("testFromString",cd,54,67,f4)));
HXLINE(  31)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN(  31)		Bool _hx_tmp4 = _hx_int64_is_zero(time);
HXDLIN(  31)		if (_hx_tmp4) {
HXLINE(  31)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  31)		 ::cpp::Int64Struct _hx_tmp5 = _hx_int64_div(time,b1);
HXDLIN(  31)		::String _hx_tmp6 = _hx_int64_to_string(_hx_tmp5);
HXDLIN(  31)		::utest::Assert_obj::equals(HX_("125",34,5a,25,00),_hx_tmp6,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),31,HX_("thx.TestTime",c9,5a,43,59),HX_("testFromString",cd,54,67,f4)));
HXLINE(  32)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN(  32)		Bool _hx_tmp7 = _hx_int64_is_zero(time);
HXDLIN(  32)		if (_hx_tmp7) {
HXLINE(  32)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  32)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(time,b2);
HXDLIN(  32)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN(  32)		Bool _hx_tmp8 = _hx_int64_is_zero(a);
HXDLIN(  32)		if (_hx_tmp8) {
HXLINE(  32)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  32)		HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(a,b3);
HXDLIN(  32)		Int _hx_tmp9 = _hx_int64_high(x1);
HXDLIN(  32)		Int _hx_tmp10 = _hx_int64_low(x1);
HXDLIN(  32)		if ((_hx_tmp9 != ((int)_hx_tmp10 >> (int)(int)31))) {
HXLINE(  32)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  32)		Int _hx_tmp11 = _hx_int64_low(x1);
HXDLIN(  32)		::utest::Assert_obj::equals((int)5,_hx_tmp11,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),32,HX_("thx.TestTime",c9,5a,43,59),HX_("testFromString",cd,54,67,f4)));
HXLINE(  33)		HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN(  33)		Bool _hx_tmp12 = _hx_int64_is_zero(time);
HXDLIN(  33)		if (_hx_tmp12) {
HXLINE(  33)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  33)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_div(time,b4);
HXDLIN(  33)		HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN(  33)		Bool _hx_tmp13 = _hx_int64_is_zero(a1);
HXDLIN(  33)		if (_hx_tmp13) {
HXLINE(  33)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  33)		HX_VARI_NAME(  ::cpp::Int64Struct,x2,"x") = _hx_int64_mod(a1,b5);
HXDLIN(  33)		Int _hx_tmp14 = _hx_int64_high(x2);
HXDLIN(  33)		Int _hx_tmp15 = _hx_int64_low(x2);
HXDLIN(  33)		if ((_hx_tmp14 != ((int)_hx_tmp15 >> (int)(int)31))) {
HXLINE(  33)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  33)		Int _hx_tmp16 = _hx_int64_low(x2);
HXDLIN(  33)		::utest::Assert_obj::equals((int)55,_hx_tmp16,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),33,HX_("thx.TestTime",c9,5a,43,59),HX_("testFromString",cd,54,67,f4)));
HXLINE(  34)		HX_VARI_NAME(  ::cpp::Int64Struct,b6,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN(  34)		Bool _hx_tmp17 = _hx_int64_is_zero(time);
HXDLIN(  34)		if (_hx_tmp17) {
HXLINE(  34)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  34)		HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = _hx_int64_div(time,b6);
HXDLIN(  34)		HX_VARI_NAME(  ::cpp::Int64Struct,b7,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN(  34)		Bool _hx_tmp18 = _hx_int64_is_zero(a2);
HXDLIN(  34)		if (_hx_tmp18) {
HXLINE(  34)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  34)		HX_VARI_NAME(  ::cpp::Int64Struct,x3,"x") = _hx_int64_mod(a2,b7);
HXDLIN(  34)		Int _hx_tmp19 = _hx_int64_high(x3);
HXDLIN(  34)		Int _hx_tmp20 = _hx_int64_low(x3);
HXDLIN(  34)		if ((_hx_tmp19 != ((int)_hx_tmp20 >> (int)(int)31))) {
HXLINE(  34)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  34)		Int _hx_tmp21 = _hx_int64_low(x3);
HXDLIN(  34)		::utest::Assert_obj::equals((int)45,_hx_tmp21,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),34,HX_("thx.TestTime",c9,5a,43,59),HX_("testFromString",cd,54,67,f4)));
HXLINE(  35)		HX_VARI_NAME(  ::cpp::Int64Struct,b8,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  35)		Bool _hx_tmp22 = _hx_int64_is_zero(time);
HXDLIN(  35)		if (_hx_tmp22) {
HXLINE(  35)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  35)		HX_VARI_NAME(  ::cpp::Int64Struct,a3,"a") = _hx_int64_div(time,b8);
HXDLIN(  35)		HX_VARI_NAME(  ::cpp::Int64Struct,b9,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::thousandI64;
HXDLIN(  35)		Bool _hx_tmp23 = _hx_int64_is_zero(a3);
HXDLIN(  35)		if (_hx_tmp23) {
HXLINE(  35)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  35)		HX_VARI_NAME(  ::cpp::Int64Struct,x4,"x") = _hx_int64_mod(a3,b9);
HXDLIN(  35)		Int _hx_tmp24 = _hx_int64_high(x4);
HXDLIN(  35)		Int _hx_tmp25 = _hx_int64_low(x4);
HXDLIN(  35)		if ((_hx_tmp24 != ((int)_hx_tmp25 >> (int)(int)31))) {
HXLINE(  35)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  35)		Int _hx_tmp26 = _hx_int64_low(x4);
HXDLIN(  35)		::utest::Assert_obj::equals((int)123,_hx_tmp26,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),35,HX_("thx.TestTime",c9,5a,43,59),HX_("testFromString",cd,54,67,f4)));
HXLINE(  37)		::String _hx_tmp27 = ::thx::_Time::Time_Impl__obj::toString(time);
HXDLIN(  37)		::utest::Assert_obj::equals(HX_("125:55:45.123",d9,bd,c8,cc),_hx_tmp27,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),37,HX_("thx.TestTime",c9,5a,43,59),HX_("testFromString",cd,54,67,f4)));
HXLINE(  38)		::String _hx_tmp28 = ::thx::_Time::Time_Impl__obj::toString(::thx::_Time::Time_Impl__obj::fromString(HX_("3.17:25:30.005",42,08,db,c3)));
HXDLIN(  38)		::utest::Assert_obj::equals(HX_("89:25:30.005",02,b5,b5,40),_hx_tmp28,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),38,HX_("thx.TestTime",c9,5a,43,59),HX_("testFromString",cd,54,67,f4)));
HXLINE(  39)		::String _hx_tmp29 = ::thx::_Time::Time_Impl__obj::toString(::thx::_Time::Time_Impl__obj::fromString(HX_("-3.17:25:30.05",4b,20,46,29)));
HXDLIN(  39)		::utest::Assert_obj::equals(HX_("-89:25:30.05",cb,e8,5f,d0),_hx_tmp29,null(),hx::SourceInfo(HX_("TestTime.hx",7f,42,c1,79),39,HX_("thx.TestTime",c9,5a,43,59),HX_("testFromString",cd,54,67,f4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTime_obj,testFromString,(void))


TestTime_obj::TestTime_obj()
{
}

hx::Val TestTime_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromString") ) { return hx::Val( testFromString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestTime_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestTime_obj_sStaticStorageInfo = 0;
#endif

static ::String TestTime_obj_sMemberFields[] = {
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testFromString","\xcd","\x54","\x67","\xf4"),
	::String(null()) };

static void TestTime_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestTime_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestTime_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestTime_obj::__mClass,"__mClass");
};

#endif

hx::Class TestTime_obj::__mClass;

void TestTime_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestTime","\xc9","\x5a","\x43","\x59");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestTime_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestTime_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestTime_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestTime_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestTime_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestTime_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
