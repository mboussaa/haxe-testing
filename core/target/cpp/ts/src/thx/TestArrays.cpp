// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_ArrayInts
#include <thx/ArrayInts.h>
#endif
#ifndef INCLUDED_thx_ArrayStrings
#include <thx/ArrayStrings.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Either
#include <thx/Either.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_NonEmptyList
#include <thx/NonEmptyList.h>
#endif
#ifndef INCLUDED_thx_TestArrays
#include <thx/TestArrays.h>
#endif
#ifndef INCLUDED_thx__Nel_Nel_Impl_
#include <thx/_Nel/Nel_Impl_.h>
#endif
#ifndef INCLUDED_thx__TestArrays_Sample
#include <thx/_TestArrays/Sample.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestArrays_obj::__construct(){
            	HX_STACK_FRAME("thx.TestArrays","new",0xb3384268,"thx.TestArrays.new","thx/TestArrays.hx",15,0xfbbb5567)
            	HX_STACK_THIS(this)
            	}

Dynamic TestArrays_obj::__CreateEmpty() { return new TestArrays_obj; }

hx::ObjectPtr< TestArrays_obj > TestArrays_obj::__new()
{
	hx::ObjectPtr< TestArrays_obj > _hx_result = new TestArrays_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestArrays_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestArrays_obj > _hx_result = new TestArrays_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestArrays_obj::testApplyIndexes(){
            	HX_STACK_FRAME("thx.TestArrays","testApplyIndexes",0x9393d89c,"thx.TestArrays.testApplyIndexes","thx/TestArrays.hx",17,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE(  18)		::Array< ::String > _hx_tmp = ::thx::Arrays_obj::applyIndexes(::Array_obj< ::String >::__new(3)->init(0,HX_("B",42,00,00,00))->init(1,HX_("C",43,00,00,00))->init(2,HX_("A",41,00,00,00)),::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)0),null());
HXDLIN(  18)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,HX_("A",41,00,00,00))->init(1,HX_("B",42,00,00,00))->init(2,HX_("C",43,00,00,00)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),18,HX_("thx.TestArrays",76,2e,05,4e),HX_("testApplyIndexes",a4,ef,6c,00)));
HXLINE(  19)		::Array< Int > _hx_tmp1 = ::thx::Arrays_obj::applyIndexes(::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)3)->init(2,(int)2)->init(3,(int)1)->init(4,(int)2),::Array_obj< Int >::__new(5)->init(0,(int)0)->init(1,(int)4)->init(2,(int)2)->init(3,(int)0)->init(4,(int)2),true);
HXDLIN(  19)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(5)->init(0,(int)1)->init(1,(int)1)->init(2,(int)2)->init(3,(int)2)->init(4,(int)3),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),19,HX_("thx.TestArrays",76,2e,05,4e),HX_("testApplyIndexes",a4,ef,6c,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testApplyIndexes,(void))

void TestArrays_obj::testRank(){
            	HX_STACK_FRAME("thx.TestArrays","testRank",0x83700416,"thx.TestArrays.testRank","thx/TestArrays.hx",22,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE(  23)		HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(8)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3))
            			->setFixed(1,HX_("test",52,c8,f9,4c),::Array_obj< Int >::__new(3)->init(0,(int)3)->init(1,(int)1)->init(2,(int)2))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3))
            			->setFixed(1,HX_("test",52,c8,f9,4c),::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3))))->init(2, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3))
            			->setFixed(1,HX_("test",52,c8,f9,4c),::Array_obj< Int >::__new(3)->init(0,(int)3)->init(1,(int)2)->init(2,(int)1))))->init(3, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2))
            			->setFixed(1,HX_("test",52,c8,f9,4c),::Array_obj< Int >::__new(2)->init(0,(int)2)->init(1,(int)1))))->init(4, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2))
            			->setFixed(1,HX_("test",52,c8,f9,4c),::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2))))->init(5, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),::Array_obj< Int >::__new(1)->init(0,(int)2))
            			->setFixed(1,HX_("test",52,c8,f9,4c),::Array_obj< Int >::__new(1)->init(0,(int)2))))->init(6, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),::Array_obj< Int >::__new(0))
            			->setFixed(1,HX_("test",52,c8,f9,4c),::Array_obj< Int >::__new(0))))->init(7, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("expected",78,2e,30,40),::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)1)->init(2,(int)2)->init(3,(int)2)->init(4,(int)3))
            			->setFixed(1,HX_("test",52,c8,f9,4c),::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)3)->init(2,(int)2)->init(3,(int)1)->init(4,(int)2))));
HXLINE(  34)		{
HXLINE(  34)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  34)			while((_g < tests->length)){
HXLINE(  34)				HX_VARI(  ::Dynamic,item) = tests->__get(_g);
HXDLIN(  34)				++_g;
HXLINE(  35)				HX_VARI( ::Array< Int >,ranks) = ::thx::Arrays_obj::rank( ::Dynamic(item->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)),::thx::Ints_obj::compare_dyn(),null());
HXLINE(  36)				HX_VARI( ::Array< Int >,applied) = ::thx::Arrays_obj::applyIndexes( ::Dynamic(item->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)),ranks,null());
HXLINE(  37)				::String _hx_tmp = ::Std_obj::string( ::Dynamic(item->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)));
HXDLIN(  37)				::String _hx_tmp1 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp) + HX_(" but it is ",60,e9,99,19));
HXDLIN(  37)				::String _hx_tmp2 = ::Std_obj::string(ranks);
HXDLIN(  37)				::utest::Assert_obj::same( ::Dynamic(item->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)),applied,null(),(_hx_tmp1 + _hx_tmp2),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),37,HX_("thx.TestArrays",76,2e,05,4e),HX_("testRank",1e,d3,d6,4e)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testRank,(void))

void TestArrays_obj::testWith(){
            	HX_STACK_FRAME("thx.TestArrays","testWith",0x86c42c70,"thx.TestArrays.testWith","thx/TestArrays.hx",41,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE(  42)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(1)->init(0,(int)1);
HXLINE(  43)		Bool _hx_tmp = hx::IsEq( arr,arr->concat(::Array_obj< Int >::__new(1)->init(0,(int)2)) );
HXDLIN(  43)		::utest::Assert_obj::isFalse(_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),43,HX_("thx.TestArrays",76,2e,05,4e),HX_("testWith",78,fb,2a,52)));
HXLINE(  45)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2)->concat(::Array_obj< Int >::__new(1)->init(0,(int)3)),null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),45,HX_("thx.TestArrays",76,2e,05,4e),HX_("testWith",78,fb,2a,52)));
HXLINE(  46)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::Array_obj< Int >::__new(1)->init(0,(int)1)->concat(::Array_obj< Int >::__new(2)->init(0,(int)2)->init(1,(int)3)),null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),46,HX_("thx.TestArrays",76,2e,05,4e),HX_("testWith",78,fb,2a,52)));
HXLINE(  47)		::Array< Int > _hx_tmp1 = ::thx::Arrays_obj::withInsert(::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)3),(int)2,(int)1);
HXDLIN(  47)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),47,HX_("thx.TestArrays",76,2e,05,4e),HX_("testWith",78,fb,2a,52)));
HXLINE(  48)		::Array< Int > _hx_tmp2 = ::thx::Arrays_obj::withSlice(::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)4),(int)2,(int)2);
HXDLIN(  48)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(5)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),48,HX_("thx.TestArrays",76,2e,05,4e),HX_("testWith",78,fb,2a,52)));
HXLINE(  49)		::Array< Int > _hx_tmp3 = ::thx::Arrays_obj::withSlice(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)5),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)4),(int)2,null());
HXDLIN(  49)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(5)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),49,HX_("thx.TestArrays",76,2e,05,4e),HX_("testWith",78,fb,2a,52)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testWith,(void))

void TestArrays_obj::testCreate(){
            	HX_STACK_FRAME("thx.TestArrays","testCreate",0x07050be6,"thx.TestArrays.testCreate","thx/TestArrays.hx",52,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE(  53)		HX_VARI( ::Array< Int >,arr) = ::thx::Arrays_obj::create((int)3,(int)2);
HXLINE(  54)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)2)->init(1,(int)2)->init(2,(int)2),arr,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),54,HX_("thx.TestArrays",76,2e,05,4e),HX_("testCreate",ee,ac,03,95)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testCreate,(void))

void TestArrays_obj::testEach(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,sum) HXARGC(1)
            		void _hx_run(Int item){
            			HX_STACK_FRAME("thx.TestArrays","testEach",0x7ad8346b,"thx.TestArrays.testEach","thx/TestArrays.hx",61,0xfbbb5567)
            			HX_STACK_ARG(item,"item")
HXLINE(  61)			hx::AddEq(sum[(int)0],item);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.TestArrays","testEach",0x7ad8346b,"thx.TestArrays.testEach","thx/TestArrays.hx",57,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE(  58)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(3)->init(0,(int)4)->init(1,(int)5)->init(2,(int)6);
HXLINE(  59)		HX_VARI( ::Array< Int >,sum) = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXLINE(  60)		::thx::Arrays_obj::each(arr, ::Dynamic(new _hx_Closure_0(sum)));
HXLINE(  63)		::utest::Assert_obj::same((int)15,sum->__get((int)0),null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),63,HX_("thx.TestArrays",76,2e,05,4e),HX_("testEach",73,03,3f,46)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testEach,(void))

void TestArrays_obj::testEachi(){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< Int >,sum,::Array< Int >,indices) HXARGC(2)
            		void _hx_run(Int item,Int i){
            			HX_STACK_FRAME("thx.TestArrays","testEachi",0x0255a99e,"thx.TestArrays.testEachi","thx/TestArrays.hx",70,0xfbbb5567)
            			HX_STACK_ARG(item,"item")
            			HX_STACK_ARG(i,"i")
HXLINE(  71)			hx::AddEq(sum[(int)0],item);
HXLINE(  72)			indices->push(i);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACK_FRAME("thx.TestArrays","testEachi",0x0255a99e,"thx.TestArrays.testEachi","thx/TestArrays.hx",66,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE(  67)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(3)->init(0,(int)4)->init(1,(int)5)->init(2,(int)6);
HXLINE(  68)		HX_VARI( ::Array< Int >,sum) = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXLINE(  69)		HX_VARI( ::Array< Int >,indices) = ::Array_obj< Int >::__new(0);
HXLINE(  70)		::thx::Arrays_obj::eachi(arr, ::Dynamic(new _hx_Closure_0(sum,indices)));
HXLINE(  74)		::utest::Assert_obj::same((int)15,sum->__get((int)0),null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),74,HX_("thx.TestArrays",76,2e,05,4e),HX_("testEachi",96,01,e4,30)));
HXLINE(  75)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)0)->init(1,(int)1)->init(2,(int)2),indices,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),75,HX_("thx.TestArrays",76,2e,05,4e),HX_("testEachi",96,01,e4,30)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testEachi,(void))

void TestArrays_obj::testMap(){
            	HX_STACK_FRAME("thx.TestArrays","testMap",0xfbfb8f72,"thx.TestArrays.testMap","thx/TestArrays.hx",78,0xfbbb5567)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMap,(void))

void TestArrays_obj::testMapi(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,is) HXARGC(2)
            		Int _hx_run(Int v,Int i){
            			HX_STACK_FRAME("thx.TestArrays","testMapi",0x8021f4b7,"thx.TestArrays.testMapi","thx/TestArrays.hx",89,0xfbbb5567)
            			HX_STACK_ARG(v,"v")
            			HX_STACK_ARG(i,"i")
HXLINE(  90)			is->push(i);
HXLINE(  91)			return (v * (int)2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestArrays","testMapi",0x8021f4b7,"thx.TestArrays.testMapi","thx/TestArrays.hx",86,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE(  87)		HX_VARI( ::Array< Int >,input) = ::Array_obj< Int >::__new(3)->init(0,(int)4)->init(1,(int)5)->init(2,(int)6);
HXLINE(  88)		HX_VARI( ::Array< Int >,is) = ::Array_obj< Int >::__new(0);
HXLINE(  89)		HX_VARI( ::Array< Int >,actual) = ::thx::Arrays_obj::mapi(input, ::Dynamic(new _hx_Closure_0(is)));
HXLINE(  93)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)8)->init(1,(int)10)->init(2,(int)12),actual,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),93,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMapi",bf,c3,88,4b)));
HXLINE(  94)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)0)->init(1,(int)1)->init(2,(int)2),is,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),94,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMapi",bf,c3,88,4b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMapi,(void))

void TestArrays_obj::testCrossMulti(){
            	HX_STACK_FRAME("thx.TestArrays","testCrossMulti",0x8239ccc3,"thx.TestArrays.testCrossMulti","thx/TestArrays.hx",97,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE(  98)		HX_VARI( ::Array< ::Dynamic>,r) = ::thx::Arrays_obj::crossMulti(::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2))->init(1,::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)4))->init(2,::Array_obj< Int >::__new(2)->init(0,(int)5)->init(1,(int)6)));
HXLINE(  99)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(8)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)3)->init(2,(int)5))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,(int)2)->init(1,(int)3)->init(2,(int)5))->init(2,::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)4)->init(2,(int)5))->init(3,::cpp::VirtualArray_obj::__new(3)->init(0,(int)2)->init(1,(int)4)->init(2,(int)5))->init(4,::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)3)->init(2,(int)6))->init(5,::cpp::VirtualArray_obj::__new(3)->init(0,(int)2)->init(1,(int)3)->init(2,(int)6))->init(6,::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)4)->init(2,(int)6))->init(7,::cpp::VirtualArray_obj::__new(3)->init(0,(int)2)->init(1,(int)4)->init(2,(int)6)),r,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),99,HX_("thx.TestArrays",76,2e,05,4e),HX_("testCrossMulti",cb,91,d1,05)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testCrossMulti,(void))

void TestArrays_obj::testMapField(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.TestArrays","testMapField",0xe72e37e8,"thx.TestArrays.testMapField","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE(  86)			return ( (Int)(_->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testMapField",0xe72e37e8,"thx.TestArrays.testMapField","thx/TestArrays.hx",102,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 103)		HX_VARI( ::Array< Int >,test) = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)2)))->init(2, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)3)))->map( ::Dynamic(new _hx_Closure_0()));
HXLINE( 105)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),test,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),105,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMapField",f0,2a,dd,ea)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMapField,(void))

void TestArrays_obj::testMapFieldOnFunction(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run( ::thx::_TestArrays::Sample _){
            			HX_STACK_FRAME("thx.TestArrays","testMapFieldOnFunction",0x6804ad5f,"thx.TestArrays.testMapFieldOnFunction","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE(  86)			return _->multiply((int)2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testMapFieldOnFunction",0x6804ad5f,"thx.TestArrays.testMapFieldOnFunction","thx/TestArrays.hx",108,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 109)		HX_VARI( ::Array< Int >,test) = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::_TestArrays::Sample_obj::__new((int)2))->init(1, ::thx::_TestArrays::Sample_obj::__new((int)3))->init(2, ::thx::_TestArrays::Sample_obj::__new((int)4))->map( ::Dynamic(new _hx_Closure_0()));
HXLINE( 114)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)4)->init(1,(int)6)->init(2,(int)8),test,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),114,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMapFieldOnFunction",67,ba,f4,37)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMapFieldOnFunction,(void))

void TestArrays_obj::testUsingMapField(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.TestArrays","testUsingMapField",0x9cbd4638,"thx.TestArrays.testUsingMapField","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE(  86)			return ( (Int)(_->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testUsingMapField",0x9cbd4638,"thx.TestArrays.testUsingMapField","thx/TestArrays.hx",117,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 118)		HX_VARI( ::Array< Int >,test) = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)2)))->init(2, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)3)))->map( ::Dynamic(new _hx_Closure_0()));
HXLINE( 120)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),test,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),120,HX_("thx.TestArrays",76,2e,05,4e),HX_("testUsingMapField",30,56,d8,6d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testUsingMapField,(void))

void TestArrays_obj::testUsingMapFieldiOnFunction(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,_e) HXARGC(1)
            		::Array< Int > _hx_run( ::Dynamic callback){
            			HX_STACK_FRAME("thx.TestArrays","testUsingMapFieldiOnFunction",0x5030f5e8,"thx.TestArrays.testUsingMapFieldiOnFunction","thx/TestArrays.hx",126,0xfbbb5567)
            			HX_STACK_ARG(callback,"callback")
HXLINE( 126)			return ::thx::Arrays_obj::mapi(_e,callback);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		Int _hx_run( ::thx::_TestArrays::Sample _, ::Dynamic _1){
            			HX_STACK_FRAME("thx.TestArrays","testUsingMapFieldiOnFunction",0x5030f5e8,"thx.TestArrays.testUsingMapFieldiOnFunction","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
            			HX_STACK_ARG(_1,"_1")
HXLINE(  86)			return _->multiply(_1);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestArrays","testUsingMapFieldiOnFunction",0x5030f5e8,"thx.TestArrays.testUsingMapFieldiOnFunction","thx/TestArrays.hx",124,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 126)		HX_VARI( ::Array< ::Dynamic>,_e) = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::_TestArrays::Sample_obj::__new((int)2))->init(1, ::thx::_TestArrays::Sample_obj::__new((int)3))->init(2, ::thx::_TestArrays::Sample_obj::__new((int)4));
HXDLIN( 126)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_e));
HXDLIN( 126)		::Array< Int > _hx_tmp1 = ( (::Array< Int >)(_hx_tmp( ::Dynamic(new _hx_Closure_1()))) );
HXLINE( 124)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)0)->init(1,(int)3)->init(2,(int)8),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),124,HX_("thx.TestArrays",76,2e,05,4e),HX_("testUsingMapFieldiOnFunction",f0,78,d4,97)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testUsingMapFieldiOnFunction,(void))

void TestArrays_obj::testFilterFn(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Bool _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.TestArrays","testFilterFn",0x83deee8a,"thx.TestArrays.testFilterFn","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE(  86)			return (hx::Mod(_,(int)2) != (int)0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testFilterFn",0x83deee8a,"thx.TestArrays.testFilterFn","thx/TestArrays.hx",135,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 135)		::Array< Int > _hx_tmp = ::Array_obj< Int >::__new(6)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5)->init(5,(int)6)->filter( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 135)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)3)->init(2,(int)5),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),135,HX_("thx.TestArrays",76,2e,05,4e),HX_("testFilterFn",92,e1,8d,87)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testFilterFn,(void))

void TestArrays_obj::testFind(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Bool _hx_run(Int item){
            			HX_STACK_FRAME("thx.TestArrays","testFind",0x7b8786a3,"thx.TestArrays.testFind","thx/TestArrays.hx",139,0xfbbb5567)
            			HX_STACK_ARG(item,"item")
HXLINE( 139)			return (hx::Mod(item,(int)3) == (int)0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testFind",0x7b8786a3,"thx.TestArrays.testFind","thx/TestArrays.hx",139,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 139)		 ::Dynamic _hx_tmp = ::thx::Arrays_obj::find(::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)3)->init(2,(int)5)->init(3,(int)7)->init(4,(int)9), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 139)		::utest::Assert_obj::equals((int)3,_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),139,HX_("thx.TestArrays",76,2e,05,4e),HX_("testFind",ab,55,ee,46)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testFind,(void))

void TestArrays_obj::testFindOption(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Bool _hx_run(Int item,Int i){
            			HX_STACK_FRAME("thx.TestArrays","testFindOption",0x7129ea78,"thx.TestArrays.testFindOption","thx/TestArrays.hx",143,0xfbbb5567)
            			HX_STACK_ARG(item,"item")
            			HX_STACK_ARG(i,"i")
HXLINE( 143)			return (i == (int)1);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestArrays","testFindOption",0x7129ea78,"thx.TestArrays.testFindOption","thx/TestArrays.hx",143,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 143)		 ::Dynamic _hx_tmp = ::thx::Arrays_obj::findi(::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)3)->init(2,(int)5)->init(3,(int)7)->init(4,(int)9), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 143)		::utest::Assert_obj::equals((int)3,_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),143,HX_("thx.TestArrays",76,2e,05,4e),HX_("testFindOption",80,af,c1,f4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testFindOption,(void))

void TestArrays_obj::testFindLast(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Bool _hx_run(Int item){
            			HX_STACK_FRAME("thx.TestArrays","testFindLast",0x09994a99,"thx.TestArrays.testFindLast","thx/TestArrays.hx",147,0xfbbb5567)
            			HX_STACK_ARG(item,"item")
HXLINE( 147)			return (hx::Mod(item,(int)3) == (int)0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testFindLast",0x09994a99,"thx.TestArrays.testFindLast","thx/TestArrays.hx",147,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 147)		 ::Dynamic _hx_tmp = ::thx::Arrays_obj::findLast(::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)3)->init(2,(int)5)->init(3,(int)7)->init(4,(int)9), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 147)		::utest::Assert_obj::equals((int)9,_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),147,HX_("thx.TestArrays",76,2e,05,4e),HX_("testFindLast",a1,3d,48,0d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testFindLast,(void))

void TestArrays_obj::testFindFn(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Bool _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.TestArrays","testFindFn",0x1170f2cb,"thx.TestArrays.testFindFn","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE(  86)			return (hx::Mod(_,(int)3) == (int)0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testFindFn",0x1170f2cb,"thx.TestArrays.testFindFn","thx/TestArrays.hx",151,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 151)		 ::Dynamic _hx_tmp = ::thx::Arrays_obj::find(::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)3)->init(2,(int)5)->init(3,(int)7)->init(4,(int)9), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 151)		::utest::Assert_obj::equals((int)3,_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),151,HX_("thx.TestArrays",76,2e,05,4e),HX_("testFindFn",d3,93,6f,9f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testFindFn,(void))

void TestArrays_obj::testFindFnLast(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Bool _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.TestArrays","testFindFnLast",0x96afeac1,"thx.TestArrays.testFindFnLast","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE(  86)			return (hx::Mod(_,(int)3) == (int)0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testFindFnLast",0x96afeac1,"thx.TestArrays.testFindFnLast","thx/TestArrays.hx",155,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 155)		 ::Dynamic _hx_tmp = ::thx::Arrays_obj::findLast(::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)3)->init(2,(int)5)->init(3,(int)7)->init(4,(int)9), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 155)		::utest::Assert_obj::equals((int)9,_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),155,HX_("thx.TestArrays",76,2e,05,4e),HX_("testFindFnLast",c9,af,47,1a)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testFindFnLast,(void))

void TestArrays_obj::testIntersperse(){
            	HX_STACK_FRAME("thx.TestArrays","testIntersperse",0x94b2304e,"thx.TestArrays.testIntersperse","thx/TestArrays.hx",158,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 159)		::Array< Int > _hx_tmp = ::thx::Arrays_obj::intersperse(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)3)->init(2,(int)5),(int)2);
HXDLIN( 159)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(5)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)2)->init(4,(int)5),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),159,HX_("thx.TestArrays",76,2e,05,4e),HX_("testIntersperse",46,d2,e6,35)));
HXLINE( 160)		::Array< Int > _hx_tmp1 = ::thx::Arrays_obj::intersperse(::Array_obj< Int >::__new(1)->init(0,(int)1),(int)2);
HXDLIN( 160)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)1),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),160,HX_("thx.TestArrays",76,2e,05,4e),HX_("testIntersperse",46,d2,e6,35)));
HXLINE( 161)		::Array< Int > _hx_tmp2 = ::thx::Arrays_obj::intersperse(::Array_obj< Int >::__new(0),(int)2);
HXDLIN( 161)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(0),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),161,HX_("thx.TestArrays",76,2e,05,4e),HX_("testIntersperse",46,d2,e6,35)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testIntersperse,(void))

void TestArrays_obj::testFn(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.TestArrays","testFn",0x6872c132,"thx.TestArrays.testFn","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE(  86)			return (_ * (int)2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testFn",0x6872c132,"thx.TestArrays.testFn","thx/TestArrays.hx",165,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 165)		::Array< Int > _hx_tmp = ::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)4)->map( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 165)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)2)->init(1,(int)4)->init(2,(int)8),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),165,HX_("thx.TestArrays",76,2e,05,4e),HX_("testFn",3a,3e,3a,d5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testFn,(void))

void TestArrays_obj::testMinFloats(){
            	HX_STACK_FRAME("thx.TestArrays","testMinFloats",0x9872ebdf,"thx.TestArrays.testMinFloats","thx/TestArrays.hx",169,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 169)		 ::Dynamic _hx_tmp = ::thx::ArrayFloats_obj::min(::Array_obj< Float >::__new(3)->init(0,((Float)1.5))->init(1,((Float)0.5))->init(2,((Float)1.0)));
HXDLIN( 169)		::utest::Assert_obj::floatEquals(((Float)0.5),_hx_tmp,null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),169,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMinFloats",d7,9f,d8,cd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMinFloats,(void))

void TestArrays_obj::testMinInts(){
            	HX_STACK_FRAME("thx.TestArrays","testMinInts",0x42bf5b2c,"thx.TestArrays.testMinInts","thx/TestArrays.hx",173,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 173)		 ::Dynamic _hx_tmp = ::thx::ArrayInts_obj::min(::Array_obj< Int >::__new(3)->init(0,(int)2)->init(1,(int)5)->init(2,(int)1));
HXDLIN( 173)		::utest::Assert_obj::equals((int)1,_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),173,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMinInts",24,a1,8d,f3)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMinInts,(void))

void TestArrays_obj::testMaxFloats(){
            	HX_STACK_FRAME("thx.TestArrays","testMaxFloats",0x6eb5fe71,"thx.TestArrays.testMaxFloats","thx/TestArrays.hx",177,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 177)		 ::Dynamic _hx_tmp = ::thx::ArrayFloats_obj::max(::Array_obj< Float >::__new(3)->init(0,((Float)1.5))->init(1,((Float)0.5))->init(2,((Float)1.0)));
HXDLIN( 177)		::utest::Assert_obj::floatEquals(((Float)1.5),_hx_tmp,null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),177,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMaxFloats",69,b2,1b,a4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMaxFloats,(void))

void TestArrays_obj::testMaxInts(){
            	HX_STACK_FRAME("thx.TestArrays","testMaxInts",0xd1e6453e,"thx.TestArrays.testMaxInts","thx/TestArrays.hx",181,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 181)		 ::Dynamic _hx_tmp = ::thx::ArrayInts_obj::max(::Array_obj< Int >::__new(3)->init(0,(int)2)->init(1,(int)5)->init(2,(int)1));
HXDLIN( 181)		::utest::Assert_obj::equals((int)5,_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),181,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMaxInts",36,8b,b4,82)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMaxInts,(void))

void TestArrays_obj::testAverageFloats(){
            	HX_STACK_FRAME("thx.TestArrays","testAverageFloats",0x8aa018ea,"thx.TestArrays.testAverageFloats","thx/TestArrays.hx",185,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 185)		Float _hx_tmp = ::thx::ArrayFloats_obj::average(::Array_obj< Float >::__new(3)->init(0,((Float)2.5))->init(1,((Float)0.5))->init(2,((Float)0.0)));
HXDLIN( 185)		::utest::Assert_obj::floatEquals(((Float)1.0),_hx_tmp,null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),185,HX_("thx.TestArrays",76,2e,05,4e),HX_("testAverageFloats",e2,28,bb,5b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testAverageFloats,(void))

void TestArrays_obj::testAverageInts(){
            	HX_STACK_FRAME("thx.TestArrays","testAverageInts",0x245a9f77,"thx.TestArrays.testAverageInts","thx/TestArrays.hx",189,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 189)		 ::Dynamic _hx_tmp = ::thx::ArrayInts_obj::average(::Array_obj< Int >::__new(3)->init(0,(int)2)->init(1,(int)6)->init(2,(int)1));
HXDLIN( 189)		::utest::Assert_obj::equals(((Float)3.0),_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),189,HX_("thx.TestArrays",76,2e,05,4e),HX_("testAverageInts",6f,41,8f,c5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testAverageInts,(void))

void TestArrays_obj::testMinString(){
            	HX_STACK_FRAME("thx.TestArrays","testMinString",0x684cf159,"thx.TestArrays.testMinString","thx/TestArrays.hx",193,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 193)		::String _hx_tmp = ::thx::ArrayStrings_obj::min(::Array_obj< ::String >::__new(3)->init(0,HX_("B",42,00,00,00))->init(1,HX_("C",43,00,00,00))->init(2,HX_("A",41,00,00,00)));
HXDLIN( 193)		::utest::Assert_obj::equals(HX_("A",41,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),193,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMinString",51,a5,b2,9d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMinString,(void))

void TestArrays_obj::testMaxStrings(){
            	HX_STACK_FRAME("thx.TestArrays","testMaxStrings",0x7f736a28,"thx.TestArrays.testMaxStrings","thx/TestArrays.hx",197,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 197)		::String _hx_tmp = ::thx::ArrayStrings_obj::max(::Array_obj< ::String >::__new(3)->init(0,HX_("B",42,00,00,00))->init(1,HX_("C",43,00,00,00))->init(2,HX_("A",41,00,00,00)));
HXDLIN( 197)		::utest::Assert_obj::equals(HX_("C",43,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),197,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMaxStrings",30,2f,0b,03)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMaxStrings,(void))

void TestArrays_obj::testCompactFloats(){
            	HX_STACK_FRAME("thx.TestArrays","testCompactFloats",0x5b3babb0,"thx.TestArrays.testCompactFloats","thx/TestArrays.hx",201,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 201)		::Array< Float > _hx_tmp = ::thx::ArrayFloats_obj::compact(::Array_obj< ::Dynamic>::__new(5)->init(0,::Math_obj::NaN)->init(1,((Float)1.5))->init(2,null())->init(3,((Float)0.5))->init(4,((Float)1.0)));
HXDLIN( 201)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,((Float)1.5))->init(1,((Float)0.5))->init(2,((Float)1.0)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),201,HX_("thx.TestArrays",76,2e,05,4e),HX_("testCompactFloats",a8,bb,56,2c)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testCompactFloats,(void))

void TestArrays_obj::testCompactStrings(){
            	HX_STACK_FRAME("thx.TestArrays","testCompactStrings",0x87e55409,"thx.TestArrays.testCompactStrings","thx/TestArrays.hx",205,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 205)		::Array< ::String > _hx_tmp = ::thx::ArrayStrings_obj::compact(::Array_obj< ::String >::__new(6)->init(0,HX_("B",42,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("C",43,00,00,00))->init(3,null())->init(4,HX_("A",41,00,00,00))->init(5,HX_("",00,00,00,00)));
HXDLIN( 205)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,HX_("B",42,00,00,00))->init(1,HX_("C",43,00,00,00))->init(2,HX_("A",41,00,00,00)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),205,HX_("thx.TestArrays",76,2e,05,4e),HX_("testCompactStrings",11,3d,78,ae)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testCompactStrings,(void))

void TestArrays_obj::testFilterNullInt(){
            	HX_STACK_FRAME("thx.TestArrays","testFilterNullInt",0x648ed026,"thx.TestArrays.testFilterNullInt","thx/TestArrays.hx",209,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 209)		::Array< Int > _hx_tmp = ::thx::Arrays_obj::filterNull(::Array_obj< ::Dynamic>::__new(5)->init(0,null())->init(1,(int)1)->init(2,null())->init(3,(int)0)->init(4,(int)2));
HXDLIN( 209)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)0)->init(2,(int)2),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),209,HX_("thx.TestArrays",76,2e,05,4e),HX_("testFilterNullInt",1e,e0,a9,35)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testFilterNullInt,(void))

void TestArrays_obj::testOrder(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int _0,Int _1){
            			HX_STACK_FRAME("thx.TestArrays","testOrder",0xcf94d6e4,"thx.TestArrays.testOrder","thx/TestArrays.hx",214,0xfbbb5567)
            			HX_STACK_ARG(_0,"_0")
            			HX_STACK_ARG(_1,"_1")
HXLINE( 214)			return (_0 - _1);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestArrays","testOrder",0xcf94d6e4,"thx.TestArrays.testOrder","thx/TestArrays.hx",212,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 213)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(3)->init(0,(int)2)->init(1,(int)3)->init(2,(int)1);
HXLINE( 214)		::Array< Int > _hx_tmp = ::thx::Arrays_obj::order(arr, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 214)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),214,HX_("thx.TestArrays",76,2e,05,4e),HX_("testOrder",dc,2e,23,fe)));
HXLINE( 215)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)2)->init(1,(int)3)->init(2,(int)1),arr,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),215,HX_("thx.TestArrays",76,2e,05,4e),HX_("testOrder",dc,2e,23,fe)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testOrder,(void))

void TestArrays_obj::testOrderFn(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,_e) HXARGC(1)
            		::Array< Int > _hx_run( ::Dynamic sort){
            			HX_STACK_FRAME("thx.TestArrays","testOrderFn",0x7fa3954c,"thx.TestArrays.testOrderFn","thx/TestArrays.hx",220,0xfbbb5567)
            			HX_STACK_ARG(sort,"sort")
HXLINE( 220)			return ::thx::Arrays_obj::order(_e,sort);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		Int _hx_run( ::Dynamic _0, ::Dynamic _1){
            			HX_STACK_FRAME("thx.TestArrays","testOrderFn",0x7fa3954c,"thx.TestArrays.testOrderFn","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_0,"_0")
            			HX_STACK_ARG(_1,"_1")
HXLINE(  86)			return (_0 - _1);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestArrays","testOrderFn",0x7fa3954c,"thx.TestArrays.testOrderFn","thx/TestArrays.hx",218,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 219)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(3)->init(0,(int)2)->init(1,(int)3)->init(2,(int)1);
HXLINE( 220)		HX_VARI( ::Array< Int >,_e) = arr;
HXDLIN( 220)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_e));
HXDLIN( 220)		::Array< Int > _hx_tmp1 = ( (::Array< Int >)(_hx_tmp( ::Dynamic(new _hx_Closure_1()))) );
HXDLIN( 220)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),220,HX_("thx.TestArrays",76,2e,05,4e),HX_("testOrderFn",44,db,71,30)));
HXLINE( 221)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)2)->init(1,(int)3)->init(2,(int)1),arr,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),221,HX_("thx.TestArrays",76,2e,05,4e),HX_("testOrderFn",44,db,71,30)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testOrderFn,(void))

void TestArrays_obj::testOrderFnObjectOfInt(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,_e) HXARGC(1)
            		::Array< ::Dynamic> _hx_run( ::Dynamic sort){
            			HX_STACK_FRAME("thx.TestArrays","testOrderFnObjectOfInt",0x1d5eb6ed,"thx.TestArrays.testOrderFnObjectOfInt","thx/TestArrays.hx",229,0xfbbb5567)
            			HX_STACK_ARG(sort,"sort")
HXLINE( 229)			return ::thx::Arrays_obj::order(_e,sort);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		Int _hx_run( ::Dynamic _0, ::Dynamic _1){
            			HX_STACK_FRAME("thx.TestArrays","testOrderFnObjectOfInt",0x1d5eb6ed,"thx.TestArrays.testOrderFnObjectOfInt","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_0,"_0")
            			HX_STACK_ARG(_1,"_1")
HXLINE(  86)			return (( (Int)(_0->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) ) - ( (Int)(_1->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestArrays","testOrderFnObjectOfInt",0x1d5eb6ed,"thx.TestArrays.testOrderFnObjectOfInt","thx/TestArrays.hx",224,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 225)		HX_VARI(  ::Dynamic,obj1) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),(int)1));
HXLINE( 226)		HX_VARI(  ::Dynamic,obj2) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),(int)2));
HXLINE( 227)		HX_VARI(  ::Dynamic,obj3) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),(int)3));
HXLINE( 228)		HX_VARI( ::Array< ::Dynamic>,arr) = ::Array_obj< ::Dynamic>::__new(3)->init(0,obj2)->init(1,obj3)->init(2,obj1);
HXLINE( 229)		HX_VARI( ::Array< ::Dynamic>,_e) = arr;
HXDLIN( 229)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_e));
HXDLIN( 229)		::Array< ::Dynamic> _hx_tmp1 = ( (::Array< ::Dynamic>)(_hx_tmp( ::Dynamic(new _hx_Closure_1()))) );
HXDLIN( 229)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,obj1)->init(1,obj2)->init(2,obj3),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),229,HX_("thx.TestArrays",76,2e,05,4e),HX_("testOrderFnObjectOfInt",f5,c3,4e,ed)));
HXLINE( 230)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,obj2)->init(1,obj3)->init(2,obj1),arr,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),230,HX_("thx.TestArrays",76,2e,05,4e),HX_("testOrderFnObjectOfInt",f5,c3,4e,ed)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testOrderFnObjectOfInt,(void))

void TestArrays_obj::testOrderFnObjectOfFloat(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,_e) HXARGC(1)
            		::Array< ::Dynamic> _hx_run( ::Dynamic sort){
            			HX_STACK_FRAME("thx.TestArrays","testOrderFnObjectOfFloat",0x80226b1a,"thx.TestArrays.testOrderFnObjectOfFloat","thx/TestArrays.hx",238,0xfbbb5567)
            			HX_STACK_ARG(sort,"sort")
HXLINE( 238)			return ::thx::Arrays_obj::order(_e,sort);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		Int _hx_run( ::Dynamic _0, ::Dynamic _1){
            			HX_STACK_FRAME("thx.TestArrays","testOrderFnObjectOfFloat",0x80226b1a,"thx.TestArrays.testOrderFnObjectOfFloat","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_0,"_0")
            			HX_STACK_ARG(_1,"_1")
HXLINE( 238)			HX_VARI( Float,a) = ( (Float)(_0->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 238)			HX_VARI( Float,b) = ( (Float)(_1->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 238)			if ((a < b)) {
HXLINE(  86)				return (int)-1;
            			}
            			else {
HXLINE( 238)				if ((a > b)) {
HXLINE(  86)					return (int)1;
            				}
            				else {
HXLINE(  86)					return (int)0;
            				}
            			}
HXLINE( 238)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestArrays","testOrderFnObjectOfFloat",0x80226b1a,"thx.TestArrays.testOrderFnObjectOfFloat","thx/TestArrays.hx",233,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 234)		HX_VARI(  ::Dynamic,obj1) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),((Float)1.0)));
HXLINE( 235)		HX_VARI(  ::Dynamic,obj2) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),((Float)2.0)));
HXLINE( 236)		HX_VARI(  ::Dynamic,obj3) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),((Float)3.0)));
HXLINE( 237)		HX_VARI( ::Array< ::Dynamic>,arr) = ::Array_obj< ::Dynamic>::__new(3)->init(0,obj2)->init(1,obj3)->init(2,obj1);
HXLINE( 238)		HX_VARI( ::Array< ::Dynamic>,_e) = arr;
HXDLIN( 238)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_e));
HXDLIN( 238)		::Array< ::Dynamic> _hx_tmp1 = ( (::Array< ::Dynamic>)(_hx_tmp( ::Dynamic(new _hx_Closure_1()))) );
HXDLIN( 238)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,obj1)->init(1,obj2)->init(2,obj3),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),238,HX_("thx.TestArrays",76,2e,05,4e),HX_("testOrderFnObjectOfFloat",22,ca,f5,35)));
HXLINE( 239)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,obj2)->init(1,obj3)->init(2,obj1),arr,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),239,HX_("thx.TestArrays",76,2e,05,4e),HX_("testOrderFnObjectOfFloat",22,ca,f5,35)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testOrderFnObjectOfFloat,(void))

void TestArrays_obj::testSortFn(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run( ::Dynamic _0, ::Dynamic _1){
            			HX_STACK_FRAME("thx.TestArrays","testSortFn",0xbb2d1d30,"thx.TestArrays.testSortFn","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_0,"_0")
            			HX_STACK_ARG(_1,"_1")
HXLINE(  86)			return (_0 - _1);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestArrays","testSortFn",0xbb2d1d30,"thx.TestArrays.testSortFn","thx/TestArrays.hx",243,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 244)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(3)->init(0,(int)2)->init(1,(int)3)->init(2,(int)1);
HXLINE( 245)		arr->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 246)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),arr,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),246,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSortFn",38,be,2b,49)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testSortFn,(void))

void TestArrays_obj::testContains(){
            	HX_STACK_FRAME("thx.TestArrays","testContains",0x9bd38d89,"thx.TestArrays.testContains","thx/TestArrays.hx",250,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 251)		Bool _hx_tmp = ::thx::Arrays_obj::contains(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),(int)2,null());
HXDLIN( 251)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),251,HX_("thx.TestArrays",76,2e,05,4e),HX_("testContains",91,80,82,9f)));
HXLINE( 252)		Bool _hx_tmp1 = ::thx::Arrays_obj::contains(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),(int)4,null());
HXDLIN( 252)		::utest::Assert_obj::isFalse(_hx_tmp1,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),252,HX_("thx.TestArrays",76,2e,05,4e),HX_("testContains",91,80,82,9f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testContains,(void))

void TestArrays_obj::testContainsAll(){
            	HX_STACK_FRAME("thx.TestArrays","testContainsAll",0xd7e27f18,"thx.TestArrays.testContainsAll","thx/TestArrays.hx",255,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 256)		Bool _hx_tmp = ::thx::Arrays_obj::containsAll(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::Array_obj< Int >::__new(3)->init(0,(int)3)->init(1,(int)1)->init(2,(int)2),null());
HXDLIN( 256)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),256,HX_("thx.TestArrays",76,2e,05,4e),HX_("testContainsAll",10,21,17,79)));
HXLINE( 257)		Bool _hx_tmp1 = ::thx::Arrays_obj::containsAll(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::Array_obj< Int >::__new(4)->init(0,(int)3)->init(1,(int)1)->init(2,(int)2)->init(3,(int)4),null());
HXDLIN( 257)		::utest::Assert_obj::isFalse(_hx_tmp1,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),257,HX_("thx.TestArrays",76,2e,05,4e),HX_("testContainsAll",10,21,17,79)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testContainsAll,(void))

void TestArrays_obj::testContainsAny(){
            	HX_STACK_FRAME("thx.TestArrays","testContainsAny",0xd7e280e3,"thx.TestArrays.testContainsAny","thx/TestArrays.hx",260,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 261)		Bool _hx_tmp = ::thx::Arrays_obj::containsAny(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::Array_obj< Int >::__new(3)->init(0,(int)2)->init(1,(int)3)->init(2,(int)4),null());
HXDLIN( 261)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),261,HX_("thx.TestArrays",76,2e,05,4e),HX_("testContainsAny",db,22,17,79)));
HXLINE( 262)		Bool _hx_tmp1 = ::thx::Arrays_obj::containsAny(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::Array_obj< Int >::__new(3)->init(0,(int)4)->init(1,(int)5)->init(2,(int)6),null());
HXDLIN( 262)		::utest::Assert_obj::isFalse(_hx_tmp1,null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),262,HX_("thx.TestArrays",76,2e,05,4e),HX_("testContainsAny",db,22,17,79)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testContainsAny,(void))

void TestArrays_obj::testCount(){
            	HX_STACK_FRAME("thx.TestArrays","testCount",0xe4d72b25,"thx.TestArrays.testCount","thx/TestArrays.hx",265,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 266)		HX_VARI(  ::haxe::ds::IntMap,map) = ::thx::Arrays_obj::count_Int(::Array_obj< Int >::__new(7)->init(0,(int)2)->init(1,(int)3)->init(2,(int)2)->init(3,(int)1)->init(4,(int)4)->init(5,(int)2)->init(6,(int)3));
HXLINE( 268)		::utest::Assert_obj::equals((int)3,map->get((int)2),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),268,HX_("thx.TestArrays",76,2e,05,4e),HX_("testCount",1d,83,65,13)));
HXLINE( 269)		::utest::Assert_obj::equals((int)2,map->get((int)3),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),269,HX_("thx.TestArrays",76,2e,05,4e),HX_("testCount",1d,83,65,13)));
HXLINE( 270)		::utest::Assert_obj::equals((int)1,map->get((int)1),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),270,HX_("thx.TestArrays",76,2e,05,4e),HX_("testCount",1d,83,65,13)));
HXLINE( 271)		::utest::Assert_obj::equals((int)1,map->get((int)4),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),271,HX_("thx.TestArrays",76,2e,05,4e),HX_("testCount",1d,83,65,13)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testCount,(void))

void TestArrays_obj::testGroupBy(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run(Float f){
            			HX_STACK_FRAME("thx.TestArrays","testGroupBy",0x92f222cc,"thx.TestArrays.testGroupBy","thx/TestArrays.hx",276,0xfbbb5567)
            			HX_STACK_ARG(f,"f")
HXLINE( 276)			return ::Math_obj::floor(f);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testGroupBy",0x92f222cc,"thx.TestArrays.testGroupBy","thx/TestArrays.hx",274,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 275)		HX_VARI(  ::haxe::ds::IntMap,map) = ::thx::Arrays_obj::groupBy_Int_Float(::Array_obj< Float >::__new(6)->init(0,((Float)2.1))->init(1,((Float)3.5))->init(2,((Float)2.0))->init(3,((Float)1.4))->init(4,((Float)2.7))->init(5,((Float)3.0)), ::Dynamic(new _hx_Closure_0()));
HXLINE( 277)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,((Float)2.1))->init(1,((Float)2.0))->init(2,((Float)2.7)),( (::Array< Float >)(map->get((int)2)) ),null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),277,HX_("thx.TestArrays",76,2e,05,4e),HX_("testGroupBy",c4,68,c0,43)));
HXLINE( 278)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,((Float)3.5))->init(1,((Float)3.0)),( (::Array< Float >)(map->get((int)3)) ),null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),278,HX_("thx.TestArrays",76,2e,05,4e),HX_("testGroupBy",c4,68,c0,43)));
HXLINE( 279)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,((Float)1.4)),( (::Array< Float >)(map->get((int)1)) ),null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),279,HX_("thx.TestArrays",76,2e,05,4e),HX_("testGroupBy",c4,68,c0,43)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testGroupBy,(void))

void TestArrays_obj::testGroupByArray(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run(::Array< Int > f){
            			HX_STACK_FRAME("thx.TestArrays","testGroupByArray",0xeb9d172d,"thx.TestArrays.testGroupByArray","thx/TestArrays.hx",284,0xfbbb5567)
            			HX_STACK_ARG(f,"f")
HXLINE( 284)			return f->__get((int)0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testGroupByArray",0xeb9d172d,"thx.TestArrays.testGroupByArray","thx/TestArrays.hx",282,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 283)		HX_VARI(  ::haxe::ds::IntMap,map) = ::thx::Arrays_obj::groupBy_Int_Array_Int(::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< Int >::__new(2)->init(0,(int)0)->init(1,(int)1))->init(1,::Array_obj< Int >::__new(2)->init(0,(int)0)->init(1,(int)2))->init(2,::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)1)), ::Dynamic(new _hx_Closure_0()));
HXLINE( 285)		HX_VARI(  ::haxe::ds::IntMap,_g) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 285)		_g->set((int)0,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Int >::__new(2)->init(0,(int)0)->init(1,(int)1))->init(1,::Array_obj< Int >::__new(2)->init(0,(int)0)->init(1,(int)2)));
HXDLIN( 285)		_g->set((int)1,::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)1)));
HXDLIN( 285)		::utest::Assert_obj::same(_g,map,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),285,HX_("thx.TestArrays",76,2e,05,4e),HX_("testGroupByArray",35,2e,76,58)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testGroupByArray,(void))

void TestArrays_obj::testGroupByInstance(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run( ::thx::_TestArrays::Sample f){
            			HX_STACK_FRAME("thx.TestArrays","testGroupByInstance",0x30d6aa81,"thx.TestArrays.testGroupByInstance","thx/TestArrays.hx",293,0xfbbb5567)
            			HX_STACK_ARG(f,"f")
HXLINE( 293)			return f->v;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testGroupByInstance",0x30d6aa81,"thx.TestArrays.testGroupByInstance","thx/TestArrays.hx",291,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 292)		HX_VARI(  ::haxe::ds::IntMap,map) = ::thx::Arrays_obj::groupBy_Int_thx__TestArrays_Sample(::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::_TestArrays::Sample_obj::__new((int)1))->init(1, ::thx::_TestArrays::Sample_obj::__new((int)1))->init(2, ::thx::_TestArrays::Sample_obj::__new((int)2)), ::Dynamic(new _hx_Closure_0()));
HXLINE( 294)		HX_VARI(  ::haxe::ds::IntMap,_g) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 294)		_g->set((int)1,::Array_obj< ::Dynamic>::__new(2)->init(0, ::thx::_TestArrays::Sample_obj::__new((int)1))->init(1, ::thx::_TestArrays::Sample_obj::__new((int)1)));
HXDLIN( 294)		_g->set((int)2,::Array_obj< ::Dynamic>::__new(1)->init(0, ::thx::_TestArrays::Sample_obj::__new((int)2)));
HXDLIN( 294)		::utest::Assert_obj::same(_g,map,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),294,HX_("thx.TestArrays",76,2e,05,4e),HX_("testGroupByInstance",79,a8,cf,ca)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testGroupByInstance,(void))

void TestArrays_obj::testGroupByAnonymous(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run( ::Dynamic el){
            			HX_STACK_FRAME("thx.TestArrays","testGroupByAnonymous",0xb7f71801,"thx.TestArrays.testGroupByAnonymous","thx/TestArrays.hx",304,0xfbbb5567)
            			HX_STACK_ARG(el,"el")
HXLINE( 304)			return ( (Int)(el->__Field(HX_("level",84,15,63,72),hx::paccDynamic)) );
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testGroupByAnonymous",0xb7f71801,"thx.TestArrays.testGroupByAnonymous","thx/TestArrays.hx",301,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 302)		HX_VARI( ::Array< ::Dynamic>,panels) = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("level",84,15,63,72),(int)1)))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("level",84,15,63,72),(int)1)))->init(2, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("level",84,15,63,72),(int)2)));
HXLINE( 303)		HX_VARI(  ::haxe::ds::IntMap,map) =  ::haxe::ds::IntMap_obj::__new();
HXLINE( 304)		HX_VARI(  ::haxe::ds::IntMap,results) = ::thx::Arrays_obj::groupByAppend(panels, ::Dynamic(new _hx_Closure_0()),map);
HXLINE( 305)		HX_VARI(  ::haxe::ds::IntMap,_g) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 305)		_g->set((int)1,::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("level",84,15,63,72),(int)1)))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("level",84,15,63,72),(int)1))));
HXDLIN( 305)		_g->set((int)2,::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("level",84,15,63,72),(int)2))));
HXDLIN( 305)		::utest::Assert_obj::same(_g,results,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),305,HX_("thx.TestArrays",76,2e,05,4e),HX_("testGroupByAnonymous",09,53,dc,d7)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testGroupByAnonymous,(void))

void TestArrays_obj::testMapRight(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run(Int v){
            			HX_STACK_FRAME("thx.TestArrays","testMapRight",0xcffeaf0a,"thx.TestArrays.testMapRight","thx/TestArrays.hx",313,0xfbbb5567)
            			HX_STACK_ARG(v,"v")
HXLINE( 313)			return (v * (int)2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testMapRight",0xcffeaf0a,"thx.TestArrays.testMapRight","thx/TestArrays.hx",313,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 313)		::Array< Int > _hx_tmp = ::thx::Arrays_obj::mapRight(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 313)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)6)->init(1,(int)4)->init(2,(int)2),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),313,HX_("thx.TestArrays",76,2e,05,4e),HX_("testMapRight",12,a2,ad,d3)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testMapRight,(void))

void TestArrays_obj::testFnRight(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.TestArrays","testFnRight",0x155b254a,"thx.TestArrays.testFnRight","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE(  86)			return (_ * (int)2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testFnRight",0x155b254a,"thx.TestArrays.testFnRight","thx/TestArrays.hx",317,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 317)		::Array< Int > _hx_tmp = ::thx::Arrays_obj::mapRight(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3), ::Dynamic(new _hx_Closure_0()));
HXDLIN( 317)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)6)->init(1,(int)4)->init(2,(int)2),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),317,HX_("thx.TestArrays",76,2e,05,4e),HX_("testFnRight",42,6b,29,c6)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testFnRight,(void))

void TestArrays_obj::testReduceRight(){
            	HX_STACK_FRAME("thx.TestArrays","testReduceRight",0x71cc5f2c,"thx.TestArrays.testReduceRight","thx/TestArrays.hx",321,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 321)		HX_VARI( ::Array< ::String >,array) = ::Array_obj< ::String >::__new(3)->init(0,HX_("a",61,00,00,00))->init(1,HX_("b",62,00,00,00))->init(2,HX_("c",63,00,00,00));
HXDLIN( 321)		HX_VARI( ::String,initial) = HX_("",00,00,00,00);
HXDLIN( 321)		HX_VARI( Int,i) = array->length;
HXDLIN( 321)		while(true){
HXLINE( 787)			Int _hx_tmp = --i;
HXLINE( 321)			if (!((_hx_tmp >= (int)0))) {
HXLINE( 321)				goto _hx_goto_1;
            			}
HXDLIN( 321)			::String _hx_tmp1 = array->__get(i).toUpperCase();
HXDLIN( 321)			hx::AddEq(initial,_hx_tmp1);
            		}
            		_hx_goto_1:;
HXDLIN( 321)		::utest::Assert_obj::same(HX_("CBA",c2,10,33,00),initial,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),321,HX_("thx.TestArrays",76,2e,05,4e),HX_("testReduceRight",24,01,01,13)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testReduceRight,(void))

void TestArrays_obj::testRotate(){
            	HX_STACK_FRAME("thx.TestArrays","testRotate",0x5615eb45,"thx.TestArrays.testRotate","thx/TestArrays.hx",325,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 327)		::Array< ::Dynamic> _hx_tmp = ::thx::Arrays_obj::rotate(::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< ::String >::__new(2)->init(0,HX_("a0",af,54,00,00))->init(1,HX_("b0",8e,55,00,00)))->init(1,::Array_obj< ::String >::__new(2)->init(0,HX_("a1",b0,54,00,00))->init(1,HX_("b1",8f,55,00,00)))->init(2,::Array_obj< ::String >::__new(2)->init(0,HX_("a2",b1,54,00,00))->init(1,HX_("b2",90,55,00,00))));
HXLINE( 325)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("a0",af,54,00,00))->init(1,HX_("a1",b0,54,00,00))->init(2,HX_("a2",b1,54,00,00)))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("b0",8e,55,00,00))->init(1,HX_("b1",8f,55,00,00))->init(2,HX_("b2",90,55,00,00))),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),325,HX_("thx.TestArrays",76,2e,05,4e),HX_("testRotate",4d,8c,14,e4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testRotate,(void))

void TestArrays_obj::testDistinct(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Bool _hx_run( ::Dynamic a, ::Dynamic b){
            			HX_STACK_FRAME("thx.TestArrays","testDistinct",0xe09b7ba6,"thx.TestArrays.testDistinct","thx/TestArrays.hx",346,0xfbbb5567)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 346)			return (( (::String)(a->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) ) == ( (::String)(b->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestArrays","testDistinct",0xe09b7ba6,"thx.TestArrays.testDistinct","thx/TestArrays.hx",332,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 333)		::cpp::VirtualArray _hx_tmp = ::thx::Arrays_obj::distinct(::cpp::VirtualArray_obj::__new(0),null());
HXDLIN( 333)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(0),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),333,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
HXLINE( 334)		::Array< Int > _hx_tmp1 = ::thx::Arrays_obj::distinct(::Array_obj< Int >::__new(1)->init(0,(int)1),null());
HXDLIN( 334)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)1),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),334,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
HXLINE( 335)		::Array< ::String > _hx_tmp2 = ::thx::Arrays_obj::distinct(::Array_obj< ::String >::__new(1)->init(0,HX_("one",66,9a,54,00)),null());
HXDLIN( 335)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,HX_("one",66,9a,54,00)),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),335,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
HXLINE( 336)		::Array< Int > _hx_tmp3 = ::thx::Arrays_obj::distinct(::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)1),null());
HXDLIN( 336)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)1),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),336,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
HXLINE( 337)		::Array< Int > _hx_tmp4 = ::thx::Arrays_obj::distinct(::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2),null());
HXDLIN( 337)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),337,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
HXLINE( 338)		::Array< ::String > _hx_tmp5 = ::thx::Arrays_obj::distinct(::Array_obj< ::String >::__new(2)->init(0,HX_("one",66,9a,54,00))->init(1,HX_("two",8c,6d,58,00)),null());
HXDLIN( 338)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,HX_("one",66,9a,54,00))->init(1,HX_("two",8c,6d,58,00)),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),338,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
HXLINE( 339)		::Array< Int > _hx_tmp6 = ::thx::Arrays_obj::distinct(::Array_obj< Int >::__new(11)->init(0,(int)1)->init(1,(int)2)->init(2,(int)2)->init(3,(int)3)->init(4,(int)4)->init(5,(int)5)->init(6,(int)5)->init(7,(int)6)->init(8,(int)7)->init(9,(int)8)->init(10,(int)8),null());
HXDLIN( 339)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(8)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5)->init(5,(int)6)->init(6,(int)7)->init(7,(int)8),_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),339,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
HXLINE( 340)		::Array< Int > _hx_tmp7 = ::thx::Arrays_obj::distinct(::Array_obj< Int >::__new(16)->init(0,(int)8)->init(1,(int)8)->init(2,(int)1)->init(3,(int)2)->init(4,(int)7)->init(5,(int)2)->init(6,(int)3)->init(7,(int)4)->init(8,(int)5)->init(9,(int)1)->init(10,(int)5)->init(11,(int)6)->init(12,(int)7)->init(13,(int)8)->init(14,(int)2)->init(15,(int)8),null());
HXDLIN( 340)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(8)->init(0,(int)8)->init(1,(int)1)->init(2,(int)2)->init(3,(int)7)->init(4,(int)3)->init(5,(int)4)->init(6,(int)5)->init(7,(int)6),_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),340,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
HXLINE( 341)		::Array< ::String > _hx_tmp8 = ::thx::Arrays_obj::distinct(::Array_obj< ::String >::__new(7)->init(0,HX_("one",66,9a,54,00))->init(1,HX_("two",8c,6d,58,00))->init(2,HX_("one",66,9a,54,00))->init(3,HX_("two",8c,6d,58,00))->init(4,HX_("three",5e,54,90,0f))->init(5,HX_("one",66,9a,54,00))->init(6,HX_("two",8c,6d,58,00)),null());
HXDLIN( 341)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,HX_("one",66,9a,54,00))->init(1,HX_("two",8c,6d,58,00))->init(2,HX_("three",5e,54,90,0f)),_hx_tmp8,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),341,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
HXLINE( 342)		::Array< Bool > _hx_tmp9 = ::thx::Arrays_obj::distinct(::Array_obj< Bool >::__new(6)->init(0,false)->init(1,false)->init(2,true)->init(3,false)->init(4,true)->init(5,true),null());
HXDLIN( 342)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,false)->init(1,true),_hx_tmp9,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),342,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
HXLINE( 345)		HX_VARI( ::Array< ::Dynamic>,result) = ::thx::Arrays_obj::distinct(::Array_obj< ::Dynamic>::__new(5)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("one",66,9a,54,00))))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("two",8c,6d,58,00))))->init(2, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("one",66,9a,54,00))))->init(3, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("three",5e,54,90,0f))))->init(4, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("two",8c,6d,58,00)))), ::Dynamic(new _hx_Closure_0()));
HXLINE( 348)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("one",66,9a,54,00))))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("two",8c,6d,58,00))))->init(2, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("three",5e,54,90,0f)))),result,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),348,HX_("thx.TestArrays",76,2e,05,4e),HX_("testDistinct",ae,6e,4a,e4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testDistinct,(void))

void TestArrays_obj::testSplit(){
            	HX_STACK_FRAME("thx.TestArrays","testSplit",0x1be2d130,"thx.TestArrays.testSplit","thx/TestArrays.hx",351,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 352)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(10)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5)->init(5,(int)6)->init(6,(int)7)->init(7,(int)8)->init(8,(int)9)->init(9,(int)0);
HXLINE( 353)		::Array< ::Dynamic> _hx_tmp = ::thx::Arrays_obj::split(arr,(int)1);
HXDLIN( 353)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(10)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5)->init(5,(int)6)->init(6,(int)7)->init(7,(int)8)->init(8,(int)9)->init(9,(int)0)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),353,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplit",28,29,71,4a)));
HXLINE( 354)		::Array< ::Dynamic> _hx_tmp1 = ::thx::Arrays_obj::split(arr,(int)2);
HXDLIN( 354)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,::cpp::VirtualArray_obj::__new(5)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5))->init(1,::cpp::VirtualArray_obj::__new(5)->init(0,(int)6)->init(1,(int)7)->init(2,(int)8)->init(3,(int)9)->init(4,(int)0)),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),354,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplit",28,29,71,4a)));
HXLINE( 355)		::Array< ::Dynamic> _hx_tmp2 = ::thx::Arrays_obj::split(arr,(int)3);
HXDLIN( 355)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4))->init(1,::cpp::VirtualArray_obj::__new(4)->init(0,(int)5)->init(1,(int)6)->init(2,(int)7)->init(3,(int)8))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,(int)9)->init(1,(int)0)),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),355,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplit",28,29,71,4a)));
HXLINE( 356)		::Array< ::Dynamic> _hx_tmp3 = ::thx::Arrays_obj::split(arr,(int)4);
HXDLIN( 356)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,(int)4)->init(1,(int)5)->init(2,(int)6))->init(2,::cpp::VirtualArray_obj::__new(3)->init(0,(int)7)->init(1,(int)8)->init(2,(int)9))->init(3,::cpp::VirtualArray_obj::__new(1)->init(0,(int)0)),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),356,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplit",28,29,71,4a)));
HXLINE( 357)		::Array< ::Dynamic> _hx_tmp4 = ::thx::Arrays_obj::split(arr,(int)10);
HXDLIN( 357)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(10)->init(0,::cpp::VirtualArray_obj::__new(1)->init(0,(int)1))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,(int)2))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,(int)3))->init(3,::cpp::VirtualArray_obj::__new(1)->init(0,(int)4))->init(4,::cpp::VirtualArray_obj::__new(1)->init(0,(int)5))->init(5,::cpp::VirtualArray_obj::__new(1)->init(0,(int)6))->init(6,::cpp::VirtualArray_obj::__new(1)->init(0,(int)7))->init(7,::cpp::VirtualArray_obj::__new(1)->init(0,(int)8))->init(8,::cpp::VirtualArray_obj::__new(1)->init(0,(int)9))->init(9,::cpp::VirtualArray_obj::__new(1)->init(0,(int)0)),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),357,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplit",28,29,71,4a)));
HXLINE( 358)		::Array< ::Dynamic> _hx_tmp5 = ::thx::Arrays_obj::split(arr,(int)20);
HXDLIN( 358)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(10)->init(0,::cpp::VirtualArray_obj::__new(1)->init(0,(int)1))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,(int)2))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,(int)3))->init(3,::cpp::VirtualArray_obj::__new(1)->init(0,(int)4))->init(4,::cpp::VirtualArray_obj::__new(1)->init(0,(int)5))->init(5,::cpp::VirtualArray_obj::__new(1)->init(0,(int)6))->init(6,::cpp::VirtualArray_obj::__new(1)->init(0,(int)7))->init(7,::cpp::VirtualArray_obj::__new(1)->init(0,(int)8))->init(8,::cpp::VirtualArray_obj::__new(1)->init(0,(int)9))->init(9,::cpp::VirtualArray_obj::__new(1)->init(0,(int)0)),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),358,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplit",28,29,71,4a)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testSplit,(void))

void TestArrays_obj::testSplitBy(){
            	HX_STACK_FRAME("thx.TestArrays","testSplitBy",0xf71db727,"thx.TestArrays.testSplitBy","thx/TestArrays.hx",361,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 362)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(10)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5)->init(5,(int)6)->init(6,(int)7)->init(7,(int)8)->init(8,(int)9)->init(9,(int)0);
HXLINE( 363)		::Array< ::Dynamic> _hx_tmp = ::thx::Arrays_obj::splitBy(arr,(int)1);
HXDLIN( 363)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(10)->init(0,::cpp::VirtualArray_obj::__new(1)->init(0,(int)1))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,(int)2))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,(int)3))->init(3,::cpp::VirtualArray_obj::__new(1)->init(0,(int)4))->init(4,::cpp::VirtualArray_obj::__new(1)->init(0,(int)5))->init(5,::cpp::VirtualArray_obj::__new(1)->init(0,(int)6))->init(6,::cpp::VirtualArray_obj::__new(1)->init(0,(int)7))->init(7,::cpp::VirtualArray_obj::__new(1)->init(0,(int)8))->init(8,::cpp::VirtualArray_obj::__new(1)->init(0,(int)9))->init(9,::cpp::VirtualArray_obj::__new(1)->init(0,(int)0)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),363,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitBy",1f,fd,eb,a7)));
HXLINE( 364)		::Array< ::Dynamic> _hx_tmp1 = ::thx::Arrays_obj::splitBy(arr,(int)2);
HXDLIN( 364)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(5)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)3)->init(1,(int)4))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,(int)5)->init(1,(int)6))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,(int)7)->init(1,(int)8))->init(4,::cpp::VirtualArray_obj::__new(2)->init(0,(int)9)->init(1,(int)0)),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),364,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitBy",1f,fd,eb,a7)));
HXLINE( 365)		::Array< ::Dynamic> _hx_tmp2 = ::thx::Arrays_obj::splitBy(arr,(int)3);
HXDLIN( 365)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,(int)4)->init(1,(int)5)->init(2,(int)6))->init(2,::cpp::VirtualArray_obj::__new(3)->init(0,(int)7)->init(1,(int)8)->init(2,(int)9))->init(3,::cpp::VirtualArray_obj::__new(1)->init(0,(int)0)),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),365,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitBy",1f,fd,eb,a7)));
HXLINE( 366)		::Array< ::Dynamic> _hx_tmp3 = ::thx::Arrays_obj::splitBy(arr,(int)4);
HXDLIN( 366)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4))->init(1,::cpp::VirtualArray_obj::__new(4)->init(0,(int)5)->init(1,(int)6)->init(2,(int)7)->init(3,(int)8))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,(int)9)->init(1,(int)0)),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),366,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitBy",1f,fd,eb,a7)));
HXLINE( 367)		::Array< ::Dynamic> _hx_tmp4 = ::thx::Arrays_obj::splitBy(arr,(int)10);
HXDLIN( 367)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(10)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5)->init(5,(int)6)->init(6,(int)7)->init(7,(int)8)->init(8,(int)9)->init(9,(int)0)),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),367,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitBy",1f,fd,eb,a7)));
HXLINE( 368)		::Array< ::Dynamic> _hx_tmp5 = ::thx::Arrays_obj::splitBy(arr,(int)20);
HXDLIN( 368)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(10)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5)->init(5,(int)6)->init(6,(int)7)->init(7,(int)8)->init(8,(int)9)->init(9,(int)0)),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),368,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitBy",1f,fd,eb,a7)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testSplitBy,(void))

void TestArrays_obj::testSplitByPad(){
            	HX_STACK_FRAME("thx.TestArrays","testSplitByPad",0xa913046c,"thx.TestArrays.testSplitByPad","thx/TestArrays.hx",371,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 372)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(10)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5)->init(5,(int)6)->init(6,(int)7)->init(7,(int)8)->init(8,(int)9)->init(9,(int)0);
HXLINE( 373)		::Array< ::Dynamic> _hx_tmp = ::thx::Arrays_obj::splitByPad(arr,(int)1,(int)0);
HXDLIN( 373)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(10)->init(0,::cpp::VirtualArray_obj::__new(1)->init(0,(int)1))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,(int)2))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,(int)3))->init(3,::cpp::VirtualArray_obj::__new(1)->init(0,(int)4))->init(4,::cpp::VirtualArray_obj::__new(1)->init(0,(int)5))->init(5,::cpp::VirtualArray_obj::__new(1)->init(0,(int)6))->init(6,::cpp::VirtualArray_obj::__new(1)->init(0,(int)7))->init(7,::cpp::VirtualArray_obj::__new(1)->init(0,(int)8))->init(8,::cpp::VirtualArray_obj::__new(1)->init(0,(int)9))->init(9,::cpp::VirtualArray_obj::__new(1)->init(0,(int)0)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),373,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitByPad",74,c9,aa,2c)));
HXLINE( 374)		::Array< ::Dynamic> _hx_tmp1 = ::thx::Arrays_obj::splitByPad(arr,(int)2,(int)0);
HXDLIN( 374)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(5)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)3)->init(1,(int)4))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,(int)5)->init(1,(int)6))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,(int)7)->init(1,(int)8))->init(4,::cpp::VirtualArray_obj::__new(2)->init(0,(int)9)->init(1,(int)0)),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),374,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitByPad",74,c9,aa,2c)));
HXLINE( 375)		::Array< ::Dynamic> _hx_tmp2 = ::thx::Arrays_obj::splitByPad(arr,(int)3,(int)0);
HXDLIN( 375)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,(int)4)->init(1,(int)5)->init(2,(int)6))->init(2,::cpp::VirtualArray_obj::__new(3)->init(0,(int)7)->init(1,(int)8)->init(2,(int)9))->init(3,::cpp::VirtualArray_obj::__new(3)->init(0,(int)0)->init(1,(int)0)->init(2,(int)0)),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),375,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitByPad",74,c9,aa,2c)));
HXLINE( 376)		::Array< ::Dynamic> _hx_tmp3 = ::thx::Arrays_obj::splitByPad(arr,(int)4,(int)0);
HXDLIN( 376)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4))->init(1,::cpp::VirtualArray_obj::__new(4)->init(0,(int)5)->init(1,(int)6)->init(2,(int)7)->init(3,(int)8))->init(2,::cpp::VirtualArray_obj::__new(4)->init(0,(int)9)->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),376,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitByPad",74,c9,aa,2c)));
HXLINE( 377)		::Array< ::Dynamic> _hx_tmp4 = ::thx::Arrays_obj::splitByPad(arr,(int)10,(int)0);
HXDLIN( 377)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(10)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5)->init(5,(int)6)->init(6,(int)7)->init(7,(int)8)->init(8,(int)9)->init(9,(int)0)),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),377,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitByPad",74,c9,aa,2c)));
HXLINE( 378)		::Array< ::Dynamic> _hx_tmp5 = ::thx::Arrays_obj::splitByPad(arr,(int)20,(int)0);
HXDLIN( 378)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(20)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5)->init(5,(int)6)->init(6,(int)7)->init(7,(int)8)->init(8,(int)9)->init(9,(int)0)->init(10,(int)0)->init(11,(int)0)->init(12,(int)0)->init(13,(int)0)->init(14,(int)0)->init(15,(int)0)->init(16,(int)0)->init(17,(int)0)->init(18,(int)0)->init(19,(int)0)),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),378,HX_("thx.TestArrays",76,2e,05,4e),HX_("testSplitByPad",74,c9,aa,2c)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testSplitByPad,(void))

void TestArrays_obj::testTraverseOption(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::hx::EnumBase _hx_run(Int i){
            			HX_STACK_FRAME("thx.TestArrays","testTraverseOption",0x5cc5b5b1,"thx.TestArrays.testTraverseOption","thx/TestArrays.hx",383,0xfbbb5567)
            			HX_STACK_ARG(i,"i")
HXLINE( 383)			if ((hx::Mod(i,(int)2) == (int)0)) {
HXLINE( 383)				return ::haxe::ds::Option_obj::Some(i);
            			}
            			else {
HXLINE( 383)				return ::haxe::ds::Option_obj::None_dyn();
            			}
HXDLIN( 383)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		::hx::EnumBase _hx_run(Int v){
            			HX_STACK_FRAME("thx.TestArrays","testTraverseOption",0x5cc5b5b1,"thx.TestArrays.testTraverseOption","thx/TestArrays.hx",386,0xfbbb5567)
            			HX_STACK_ARG(v,"v")
HXLINE( 386)			return ::haxe::ds::Option_obj::Some(v);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testTraverseOption",0x5cc5b5b1,"thx.TestArrays.testTraverseOption","thx/TestArrays.hx",381,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 382)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5);
HXLINE( 383)		HX_VARI(  ::Dynamic,f) =  ::Dynamic(new _hx_Closure_0());
HXLINE( 385)		::hx::EnumBase _hx_tmp = ::thx::Arrays_obj::traverseOption(arr,f);
HXDLIN( 385)		::utest::Assert_obj::same(::haxe::ds::Option_obj::None_dyn(),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),385,HX_("thx.TestArrays",76,2e,05,4e),HX_("testTraverseOption",b9,9e,58,83)));
HXLINE( 386)		::hx::EnumBase _hx_tmp1 = ::haxe::ds::Option_obj::Some(arr);
HXDLIN( 386)		::hx::EnumBase _hx_tmp2 = ::thx::Arrays_obj::traverseOption(arr, ::Dynamic(new _hx_Closure_1()));
HXDLIN( 386)		::utest::Assert_obj::same(_hx_tmp1,_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),386,HX_("thx.TestArrays",76,2e,05,4e),HX_("testTraverseOption",b9,9e,58,83)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testTraverseOption,(void))

void TestArrays_obj::testTraverseValidation(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::hx::EnumBase _hx_run(Int i){
            			HX_STACK_FRAME("thx.TestArrays","testTraverseValidation",0x9b5bbc75,"thx.TestArrays.testTraverseValidation","thx/TestArrays.hx",391,0xfbbb5567)
            			HX_STACK_ARG(i,"i")
HXLINE( 391)			if ((hx::Mod(i,(int)2) == (int)0)) {
HXLINE( 391)				return ::thx::Either_obj::Right(i);
            			}
            			else {
HXLINE( 391)				::hx::EnumBase _hx_tmp = ::thx::_Nel::Nel_Impl__obj::pure((HX_("oops: ",89,cc,76,95) + i));
HXDLIN( 391)				return ::thx::Either_obj::Left(_hx_tmp);
            			}
HXDLIN( 391)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		::hx::EnumBase _hx_run(Int i1){
            			HX_STACK_FRAME("thx.TestArrays","testTraverseValidation",0x9b5bbc75,"thx.TestArrays.testTraverseValidation","thx/TestArrays.hx",392,0xfbbb5567)
            			HX_STACK_ARG(i1,"i1")
HXLINE( 392)			return ::thx::Either_obj::Right(i1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestArrays","testTraverseValidation",0x9b5bbc75,"thx.TestArrays.testTraverseValidation","thx/TestArrays.hx",389,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 390)		HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4)->init(4,(int)5);
HXLINE( 391)		HX_VARI(  ::Dynamic,ff) =  ::Dynamic(new _hx_Closure_0());
HXLINE( 392)		HX_VARI(  ::Dynamic,fs) =  ::Dynamic(new _hx_Closure_1());
HXLINE( 394)		HX_VARI( ::hx::EnumBase,e) = ::thx::_Nel::Nel_Impl__obj::nel(HX_("oops: 5",8c,2b,7c,32),::Array_obj< ::String >::__new(2)->init(0,HX_("oops: 3",8a,2b,7c,32))->init(1,HX_("oops: 1",88,2b,7c,32)));
HXDLIN( 394)		::hx::EnumBase _hx_tmp1 = ::thx::Either_obj::Left(e);
HXDLIN( 394)		 ::Dynamic _hx_tmp2 = ::thx::_Nel::Nel_Impl__obj::semigroup();
HXDLIN( 394)		::hx::EnumBase _hx_tmp3 = ::thx::Arrays_obj::traverseValidation(arr,ff,_hx_tmp2);
HXDLIN( 394)		::utest::Assert_obj::same(_hx_tmp1,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),394,HX_("thx.TestArrays",76,2e,05,4e),HX_("testTraverseValidation",7d,c9,4b,6b)));
HXLINE( 395)		::hx::EnumBase _hx_tmp4 = ::thx::Either_obj::Right(arr);
HXDLIN( 395)		 ::Dynamic _hx_tmp5 = ::thx::_Nel::Nel_Impl__obj::semigroup();
HXDLIN( 395)		::hx::EnumBase _hx_tmp6 = ::thx::Arrays_obj::traverseValidation(arr,fs,_hx_tmp5);
HXDLIN( 395)		::utest::Assert_obj::same(_hx_tmp4,_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),395,HX_("thx.TestArrays",76,2e,05,4e),HX_("testTraverseValidation",7d,c9,4b,6b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testTraverseValidation,(void))

void TestArrays_obj::testZip5Ap(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(5)
            		::String _hx_run(::String s,Int i,::String t,Int j,Bool b){
            			HX_STACK_FRAME("thx.TestArrays","testZip5Ap",0x11c2e92d,"thx.TestArrays.testZip5Ap","thx/TestArrays.hx",406,0xfbbb5567)
            			HX_STACK_ARG(s,"s")
            			HX_STACK_ARG(i,"i")
            			HX_STACK_ARG(t,"t")
            			HX_STACK_ARG(j,"j")
            			HX_STACK_ARG(b,"b")
HXLINE( 406)			::String _hx_tmp1 = ((((HX_("",00,00,00,00) + s) + i) + t) + j);
HXDLIN( 406)			::String _hx_tmp2 = ::Std_obj::string(b);
HXDLIN( 406)			return (_hx_tmp1 + _hx_tmp2);
            		}
            		HX_END_LOCAL_FUNC5(return)

            	HX_STACK_FRAME("thx.TestArrays","testZip5Ap",0x11c2e92d,"thx.TestArrays.testZip5Ap","thx/TestArrays.hx",399,0xfbbb5567)
            	HX_STACK_THIS(this)
HXLINE( 406)		::Array< ::String > _hx_tmp = ::thx::Arrays_obj::zip5Ap( ::Dynamic(new _hx_Closure_0()),::Array_obj< ::String >::__new(3)->init(0,HX_("a",61,00,00,00))->init(1,HX_("b",62,00,00,00))->init(2,HX_("c",63,00,00,00)),::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2),::Array_obj< ::String >::__new(3)->init(0,HX_("x",78,00,00,00))->init(1,HX_("y",79,00,00,00))->init(2,HX_("z",7a,00,00,00)),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)4),::Array_obj< Bool >::__new(3)->init(0,true)->init(1,false)->init(2,true));
HXDLIN( 406)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,HX_("a1x3true",39,82,ff,46))->init(1,HX_("b2y4false",98,96,c7,59)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestArrays.hx",72,47,ea,25),406,HX_("thx.TestArrays",76,2e,05,4e),HX_("testZip5Ap",35,8a,c1,9f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestArrays_obj,testZip5Ap,(void))


TestArrays_obj::TestArrays_obj()
{
}

hx::Val TestArrays_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"testFn") ) { return hx::Val( testFn_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testMap") ) { return hx::Val( testMap_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testRank") ) { return hx::Val( testRank_dyn()); }
		if (HX_FIELD_EQ(inName,"testWith") ) { return hx::Val( testWith_dyn()); }
		if (HX_FIELD_EQ(inName,"testEach") ) { return hx::Val( testEach_dyn()); }
		if (HX_FIELD_EQ(inName,"testMapi") ) { return hx::Val( testMapi_dyn()); }
		if (HX_FIELD_EQ(inName,"testFind") ) { return hx::Val( testFind_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testEachi") ) { return hx::Val( testEachi_dyn()); }
		if (HX_FIELD_EQ(inName,"testOrder") ) { return hx::Val( testOrder_dyn()); }
		if (HX_FIELD_EQ(inName,"testCount") ) { return hx::Val( testCount_dyn()); }
		if (HX_FIELD_EQ(inName,"testSplit") ) { return hx::Val( testSplit_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testCreate") ) { return hx::Val( testCreate_dyn()); }
		if (HX_FIELD_EQ(inName,"testFindFn") ) { return hx::Val( testFindFn_dyn()); }
		if (HX_FIELD_EQ(inName,"testSortFn") ) { return hx::Val( testSortFn_dyn()); }
		if (HX_FIELD_EQ(inName,"testRotate") ) { return hx::Val( testRotate_dyn()); }
		if (HX_FIELD_EQ(inName,"testZip5Ap") ) { return hx::Val( testZip5Ap_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testMinInts") ) { return hx::Val( testMinInts_dyn()); }
		if (HX_FIELD_EQ(inName,"testMaxInts") ) { return hx::Val( testMaxInts_dyn()); }
		if (HX_FIELD_EQ(inName,"testOrderFn") ) { return hx::Val( testOrderFn_dyn()); }
		if (HX_FIELD_EQ(inName,"testGroupBy") ) { return hx::Val( testGroupBy_dyn()); }
		if (HX_FIELD_EQ(inName,"testFnRight") ) { return hx::Val( testFnRight_dyn()); }
		if (HX_FIELD_EQ(inName,"testSplitBy") ) { return hx::Val( testSplitBy_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testMapField") ) { return hx::Val( testMapField_dyn()); }
		if (HX_FIELD_EQ(inName,"testFilterFn") ) { return hx::Val( testFilterFn_dyn()); }
		if (HX_FIELD_EQ(inName,"testFindLast") ) { return hx::Val( testFindLast_dyn()); }
		if (HX_FIELD_EQ(inName,"testContains") ) { return hx::Val( testContains_dyn()); }
		if (HX_FIELD_EQ(inName,"testMapRight") ) { return hx::Val( testMapRight_dyn()); }
		if (HX_FIELD_EQ(inName,"testDistinct") ) { return hx::Val( testDistinct_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testMinFloats") ) { return hx::Val( testMinFloats_dyn()); }
		if (HX_FIELD_EQ(inName,"testMaxFloats") ) { return hx::Val( testMaxFloats_dyn()); }
		if (HX_FIELD_EQ(inName,"testMinString") ) { return hx::Val( testMinString_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testCrossMulti") ) { return hx::Val( testCrossMulti_dyn()); }
		if (HX_FIELD_EQ(inName,"testFindOption") ) { return hx::Val( testFindOption_dyn()); }
		if (HX_FIELD_EQ(inName,"testFindFnLast") ) { return hx::Val( testFindFnLast_dyn()); }
		if (HX_FIELD_EQ(inName,"testMaxStrings") ) { return hx::Val( testMaxStrings_dyn()); }
		if (HX_FIELD_EQ(inName,"testSplitByPad") ) { return hx::Val( testSplitByPad_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testIntersperse") ) { return hx::Val( testIntersperse_dyn()); }
		if (HX_FIELD_EQ(inName,"testAverageInts") ) { return hx::Val( testAverageInts_dyn()); }
		if (HX_FIELD_EQ(inName,"testContainsAll") ) { return hx::Val( testContainsAll_dyn()); }
		if (HX_FIELD_EQ(inName,"testContainsAny") ) { return hx::Val( testContainsAny_dyn()); }
		if (HX_FIELD_EQ(inName,"testReduceRight") ) { return hx::Val( testReduceRight_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testApplyIndexes") ) { return hx::Val( testApplyIndexes_dyn()); }
		if (HX_FIELD_EQ(inName,"testGroupByArray") ) { return hx::Val( testGroupByArray_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testUsingMapField") ) { return hx::Val( testUsingMapField_dyn()); }
		if (HX_FIELD_EQ(inName,"testAverageFloats") ) { return hx::Val( testAverageFloats_dyn()); }
		if (HX_FIELD_EQ(inName,"testCompactFloats") ) { return hx::Val( testCompactFloats_dyn()); }
		if (HX_FIELD_EQ(inName,"testFilterNullInt") ) { return hx::Val( testFilterNullInt_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"testCompactStrings") ) { return hx::Val( testCompactStrings_dyn()); }
		if (HX_FIELD_EQ(inName,"testTraverseOption") ) { return hx::Val( testTraverseOption_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testGroupByInstance") ) { return hx::Val( testGroupByInstance_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"testGroupByAnonymous") ) { return hx::Val( testGroupByAnonymous_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"testMapFieldOnFunction") ) { return hx::Val( testMapFieldOnFunction_dyn()); }
		if (HX_FIELD_EQ(inName,"testOrderFnObjectOfInt") ) { return hx::Val( testOrderFnObjectOfInt_dyn()); }
		if (HX_FIELD_EQ(inName,"testTraverseValidation") ) { return hx::Val( testTraverseValidation_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"testOrderFnObjectOfFloat") ) { return hx::Val( testOrderFnObjectOfFloat_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"testUsingMapFieldiOnFunction") ) { return hx::Val( testUsingMapFieldiOnFunction_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestArrays_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestArrays_obj_sStaticStorageInfo = 0;
#endif

static ::String TestArrays_obj_sMemberFields[] = {
	HX_HCSTRING("testApplyIndexes","\xa4","\xef","\x6c","\x00"),
	HX_HCSTRING("testRank","\x1e","\xd3","\xd6","\x4e"),
	HX_HCSTRING("testWith","\x78","\xfb","\x2a","\x52"),
	HX_HCSTRING("testCreate","\xee","\xac","\x03","\x95"),
	HX_HCSTRING("testEach","\x73","\x03","\x3f","\x46"),
	HX_HCSTRING("testEachi","\x96","\x01","\xe4","\x30"),
	HX_HCSTRING("testMap","\x6a","\x79","\xc1","\xbd"),
	HX_HCSTRING("testMapi","\xbf","\xc3","\x88","\x4b"),
	HX_HCSTRING("testCrossMulti","\xcb","\x91","\xd1","\x05"),
	HX_HCSTRING("testMapField","\xf0","\x2a","\xdd","\xea"),
	HX_HCSTRING("testMapFieldOnFunction","\x67","\xba","\xf4","\x37"),
	HX_HCSTRING("testUsingMapField","\x30","\x56","\xd8","\x6d"),
	HX_HCSTRING("testUsingMapFieldiOnFunction","\xf0","\x78","\xd4","\x97"),
	HX_HCSTRING("testFilterFn","\x92","\xe1","\x8d","\x87"),
	HX_HCSTRING("testFind","\xab","\x55","\xee","\x46"),
	HX_HCSTRING("testFindOption","\x80","\xaf","\xc1","\xf4"),
	HX_HCSTRING("testFindLast","\xa1","\x3d","\x48","\x0d"),
	HX_HCSTRING("testFindFn","\xd3","\x93","\x6f","\x9f"),
	HX_HCSTRING("testFindFnLast","\xc9","\xaf","\x47","\x1a"),
	HX_HCSTRING("testIntersperse","\x46","\xd2","\xe6","\x35"),
	HX_HCSTRING("testFn","\x3a","\x3e","\x3a","\xd5"),
	HX_HCSTRING("testMinFloats","\xd7","\x9f","\xd8","\xcd"),
	HX_HCSTRING("testMinInts","\x24","\xa1","\x8d","\xf3"),
	HX_HCSTRING("testMaxFloats","\x69","\xb2","\x1b","\xa4"),
	HX_HCSTRING("testMaxInts","\x36","\x8b","\xb4","\x82"),
	HX_HCSTRING("testAverageFloats","\xe2","\x28","\xbb","\x5b"),
	HX_HCSTRING("testAverageInts","\x6f","\x41","\x8f","\xc5"),
	HX_HCSTRING("testMinString","\x51","\xa5","\xb2","\x9d"),
	HX_HCSTRING("testMaxStrings","\x30","\x2f","\x0b","\x03"),
	HX_HCSTRING("testCompactFloats","\xa8","\xbb","\x56","\x2c"),
	HX_HCSTRING("testCompactStrings","\x11","\x3d","\x78","\xae"),
	HX_HCSTRING("testFilterNullInt","\x1e","\xe0","\xa9","\x35"),
	HX_HCSTRING("testOrder","\xdc","\x2e","\x23","\xfe"),
	HX_HCSTRING("testOrderFn","\x44","\xdb","\x71","\x30"),
	HX_HCSTRING("testOrderFnObjectOfInt","\xf5","\xc3","\x4e","\xed"),
	HX_HCSTRING("testOrderFnObjectOfFloat","\x22","\xca","\xf5","\x35"),
	HX_HCSTRING("testSortFn","\x38","\xbe","\x2b","\x49"),
	HX_HCSTRING("testContains","\x91","\x80","\x82","\x9f"),
	HX_HCSTRING("testContainsAll","\x10","\x21","\x17","\x79"),
	HX_HCSTRING("testContainsAny","\xdb","\x22","\x17","\x79"),
	HX_HCSTRING("testCount","\x1d","\x83","\x65","\x13"),
	HX_HCSTRING("testGroupBy","\xc4","\x68","\xc0","\x43"),
	HX_HCSTRING("testGroupByArray","\x35","\x2e","\x76","\x58"),
	HX_HCSTRING("testGroupByInstance","\x79","\xa8","\xcf","\xca"),
	HX_HCSTRING("testGroupByAnonymous","\x09","\x53","\xdc","\xd7"),
	HX_HCSTRING("testMapRight","\x12","\xa2","\xad","\xd3"),
	HX_HCSTRING("testFnRight","\x42","\x6b","\x29","\xc6"),
	HX_HCSTRING("testReduceRight","\x24","\x01","\x01","\x13"),
	HX_HCSTRING("testRotate","\x4d","\x8c","\x14","\xe4"),
	HX_HCSTRING("testDistinct","\xae","\x6e","\x4a","\xe4"),
	HX_HCSTRING("testSplit","\x28","\x29","\x71","\x4a"),
	HX_HCSTRING("testSplitBy","\x1f","\xfd","\xeb","\xa7"),
	HX_HCSTRING("testSplitByPad","\x74","\xc9","\xaa","\x2c"),
	HX_HCSTRING("testTraverseOption","\xb9","\x9e","\x58","\x83"),
	HX_HCSTRING("testTraverseValidation","\x7d","\xc9","\x4b","\x6b"),
	HX_HCSTRING("testZip5Ap","\x35","\x8a","\xc1","\x9f"),
	::String(null()) };

static void TestArrays_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestArrays_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestArrays_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestArrays_obj::__mClass,"__mClass");
};

#endif

hx::Class TestArrays_obj::__mClass;

void TestArrays_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestArrays","\x76","\x2e","\x05","\x4e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestArrays_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestArrays_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestArrays_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestArrays_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestArrays_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestArrays_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
