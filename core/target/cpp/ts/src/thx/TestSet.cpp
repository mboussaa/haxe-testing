// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_TestSet
#include <thx/TestSet.h>
#endif
#ifndef INCLUDED_thx__Set_Set_Impl_
#include <thx/_Set/Set_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestSet_obj::__construct(){
            	HX_STACK_FRAME("thx.TestSet","new",0xb5710458,"thx.TestSet.new","thx/TestSet.hx",7,0x86463959)
            	HX_STACK_THIS(this)
            	}

Dynamic TestSet_obj::__CreateEmpty() { return new TestSet_obj; }

hx::ObjectPtr< TestSet_obj > TestSet_obj::__new()
{
	hx::ObjectPtr< TestSet_obj > _hx_result = new TestSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestSet_obj > _hx_result = new TestSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestSet_obj::testCreate(){
            	HX_STACK_FRAME("thx.TestSet","testCreate",0xe32167f6,"thx.TestSet.testCreate","thx/TestSet.hx",9,0x86463959)
            	HX_STACK_THIS(this)
HXLINE(  10)		HX_VARI(  ::haxe::ds::IntMap,set) = ::thx::_Set::Set_Impl__obj::createInt(null());
HXLINE(  11)		Int _hx_tmp = ::thx::_Set::Set_Impl__obj::get_length(set);
HXDLIN(  11)		::utest::Assert_obj::equals((int)0,_hx_tmp,null(),hx::SourceInfo(HX_("TestSet.hx",6e,62,f8,7e),11,HX_("thx.TestSet",66,38,5a,36),HX_("testCreate",ee,ac,03,95)));
HXLINE(  12)		::thx::_Set::Set_Impl__obj::add(set,(int)1);
HXLINE(  13)		::thx::_Set::Set_Impl__obj::add(set,(int)1);
HXLINE(  14)		Int _hx_tmp1 = ::thx::_Set::Set_Impl__obj::get_length(set);
HXDLIN(  14)		::utest::Assert_obj::equals((int)1,_hx_tmp1,null(),hx::SourceInfo(HX_("TestSet.hx",6e,62,f8,7e),14,HX_("thx.TestSet",66,38,5a,36),HX_("testCreate",ee,ac,03,95)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestSet_obj,testCreate,(void))

void TestSet_obj::testSet(){
            	HX_STACK_FRAME("thx.TestSet","testSet",0x00589a68,"thx.TestSet.testSet","thx/TestSet.hx",17,0x86463959)
            	HX_STACK_THIS(this)
HXLINE(  18)		HX_VARI(  ::haxe::ds::IntMap,set) = ::thx::_Set::Set_Impl__obj::createInt(::Array_obj< Int >::__new(5)->init(0,(int)1)->init(1,(int)2)->init(2,(int)2)->init(3,(int)2)->init(4,(int)3));
HXLINE(  19)		::Array< Int > _hx_tmp = ::thx::Arrays_obj::order(::thx::_Set::Set_Impl__obj::toArray(set),::thx::Ints_obj::compare_dyn());
HXDLIN(  19)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestSet.hx",6e,62,f8,7e),19,HX_("thx.TestSet",66,38,5a,36),HX_("testSet",70,0a,c6,bd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestSet_obj,testSet,(void))

void TestSet_obj::testUnion(){
            	HX_STACK_FRAME("thx.TestSet","testUnion",0x683a2155,"thx.TestSet.testUnion","thx/TestSet.hx",22,0x86463959)
            	HX_STACK_THIS(this)
HXLINE(  23)		HX_VARI(  ::haxe::ds::IntMap,s1) = ::thx::_Set::Set_Impl__obj::createInt(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3));
HXDLIN(  23)		HX_VARI(  ::haxe::ds::IntMap,s2) = ::thx::_Set::Set_Impl__obj::createInt(::Array_obj< Int >::__new(3)->init(0,(int)2)->init(1,(int)2)->init(2,(int)4));
HXLINE(  25)		HX_VARI(  ::haxe::ds::IntMap,newset) = ::thx::_Set::Set_Impl__obj::copy(s1);
HXDLIN(  25)		::thx::_Set::Set_Impl__obj::pushMany(newset,::thx::_Set::Set_Impl__obj::toArray(s2));
HXDLIN(  25)		::Array< Int > _hx_tmp = ::thx::Arrays_obj::order(::thx::_Set::Set_Impl__obj::toArray(newset),::thx::Ints_obj::compare_dyn());
HXDLIN(  25)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestSet.hx",6e,62,f8,7e),25,HX_("thx.TestSet",66,38,5a,36),HX_("testUnion",5d,a3,e9,6f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestSet_obj,testUnion,(void))

void TestSet_obj::testDifference(){
            	HX_STACK_FRAME("thx.TestSet","testDifference",0x90d0a1f7,"thx.TestSet.testDifference","thx/TestSet.hx",28,0x86463959)
            	HX_STACK_THIS(this)
HXLINE(  29)		HX_VARI(  ::haxe::ds::IntMap,s1) = ::thx::_Set::Set_Impl__obj::createInt(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3));
HXDLIN(  29)		HX_VARI(  ::haxe::ds::IntMap,s2) = ::thx::_Set::Set_Impl__obj::createInt(::Array_obj< Int >::__new(3)->init(0,(int)2)->init(1,(int)2)->init(2,(int)4));
HXLINE(  31)		HX_VARI(  ::haxe::ds::IntMap,result) = ::thx::_Set::Set_Impl__obj::copy(s1);
HXDLIN(  31)		{
HXLINE(  31)			HX_VARI(  ::Dynamic,tmp) = ::thx::_Set::Set_Impl__obj::iterator(s2);
HXDLIN(  31)			while(true){
HXLINE(  31)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  31)				if (_hx_tmp) {
HXLINE(  31)					goto _hx_goto_0;
            				}
HXDLIN(  31)				HX_VARI( Int,item) = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN(  31)				result->remove(item);
            			}
            			_hx_goto_0:;
            		}
HXDLIN(  31)		::Array< Int > _hx_tmp1 = ::thx::Arrays_obj::order(::thx::_Set::Set_Impl__obj::toArray(result),::thx::Ints_obj::compare_dyn());
HXDLIN(  31)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)3),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestSet.hx",6e,62,f8,7e),31,HX_("thx.TestSet",66,38,5a,36),HX_("testDifference",ef,c2,84,e6)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestSet_obj,testDifference,(void))

void TestSet_obj::testBooleans(){
            	HX_STACK_FRAME("thx.TestSet","testBooleans",0x915e1c45,"thx.TestSet.testBooleans","thx/TestSet.hx",34,0x86463959)
            	HX_STACK_THIS(this)
HXLINE(  35)		HX_VARI_NAME(  ::haxe::ds::IntMap,this1,"this") = ::thx::_Set::Set_Impl__obj::createInt(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3));
HXDLIN(  35)		HX_VARI(  ::haxe::ds::IntMap,set) = ::thx::_Set::Set_Impl__obj::createInt(::Array_obj< Int >::__new(3)->init(0,(int)2)->init(1,(int)3)->init(2,(int)4));
HXDLIN(  35)		HX_VARI(  ::haxe::ds::IntMap,newset) = ::thx::_Set::Set_Impl__obj::copy(this1);
HXDLIN(  35)		::thx::_Set::Set_Impl__obj::pushMany(newset,::thx::_Set::Set_Impl__obj::toArray(set));
HXDLIN(  35)		HX_VARI_NAME(  ::haxe::ds::IntMap,this2,"this") = newset;
HXDLIN(  35)		HX_VARI_NAME(  ::haxe::ds::IntMap,set1,"set") = ::thx::_Set::Set_Impl__obj::createInt(::Array_obj< Int >::__new(2)->init(0,(int)2)->init(1,(int)3));
HXDLIN(  35)		HX_VARI(  ::haxe::ds::IntMap,result) = ::thx::_Set::Set_Impl__obj::copy(this2);
HXDLIN(  35)		{
HXLINE(  35)			HX_VARI(  ::Dynamic,tmp) = ::thx::_Set::Set_Impl__obj::iterator(set1);
HXDLIN(  35)			while(true){
HXLINE(  35)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  35)				if (_hx_tmp) {
HXLINE(  35)					goto _hx_goto_1;
            				}
HXDLIN(  35)				HX_VARI( Int,item) = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN(  35)				result->remove(item);
            			}
            			_hx_goto_1:;
            		}
HXLINE(  38)		::Array< Int > _hx_tmp1 = ::thx::Arrays_obj::order(::thx::_Set::Set_Impl__obj::toArray(result),::thx::Ints_obj::compare_dyn());
HXDLIN(  38)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)4),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestSet.hx",6e,62,f8,7e),38,HX_("thx.TestSet",66,38,5a,36),HX_("testBooleans",3d,8f,15,34)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestSet_obj,testBooleans,(void))


TestSet_obj::TestSet_obj()
{
}

hx::Val TestSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"testSet") ) { return hx::Val( testSet_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testUnion") ) { return hx::Val( testUnion_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testCreate") ) { return hx::Val( testCreate_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testBooleans") ) { return hx::Val( testBooleans_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testDifference") ) { return hx::Val( testDifference_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestSet_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestSet_obj_sStaticStorageInfo = 0;
#endif

static ::String TestSet_obj_sMemberFields[] = {
	HX_HCSTRING("testCreate","\xee","\xac","\x03","\x95"),
	HX_HCSTRING("testSet","\x70","\x0a","\xc6","\xbd"),
	HX_HCSTRING("testUnion","\x5d","\xa3","\xe9","\x6f"),
	HX_HCSTRING("testDifference","\xef","\xc2","\x84","\xe6"),
	HX_HCSTRING("testBooleans","\x3d","\x8f","\x15","\x34"),
	::String(null()) };

static void TestSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestSet_obj::__mClass,"__mClass");
};

#endif

hx::Class TestSet_obj::__mClass;

void TestSet_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestSet","\x66","\x38","\x5a","\x36");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
