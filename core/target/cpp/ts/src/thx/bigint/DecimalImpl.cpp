// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx__BigInt_BigInt_Impl_
#include <thx/_BigInt/BigInt_Impl_.h>
#endif
#ifndef INCLUDED_thx__Decimal_Decimal_Impl_
#include <thx/_Decimal/Decimal_Impl_.h>
#endif
#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Bigs
#include <thx/bigint/Bigs.h>
#endif
#ifndef INCLUDED_thx_bigint_DecimalImpl
#include <thx/bigint/DecimalImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Decimals
#include <thx/bigint/Decimals.h>
#endif
#ifndef INCLUDED_thx_bigint_Small
#include <thx/bigint/Small.h>
#endif

namespace thx{
namespace bigint{

void DecimalImpl_obj::__construct(::Dynamic value,Int scale){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","new",0xae5c81ce,"thx.bigint.DecimalImpl.new","thx/bigint/DecimalImpl.hx",20,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(scale,"scale")
HXLINE(  21)		this->value = value;
HXLINE(  22)		this->scale = scale;
            	}

Dynamic DecimalImpl_obj::__CreateEmpty() { return new DecimalImpl_obj; }

hx::ObjectPtr< DecimalImpl_obj > DecimalImpl_obj::__new(::Dynamic value,Int scale)
{
	hx::ObjectPtr< DecimalImpl_obj > _hx_result = new DecimalImpl_obj();
	_hx_result->__construct(value,scale);
	return _hx_result;
}

Dynamic DecimalImpl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DecimalImpl_obj > _hx_result = new DecimalImpl_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

 ::thx::bigint::DecimalImpl DecimalImpl_obj::add( ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","add",0xae52a38f,"thx.bigint.DecimalImpl.add","thx/bigint/DecimalImpl.hx",25,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  26)		HX_VARI(  ::thx::bigint::DecimalImpl,lhs) = this->matchScale(that);
HXDLIN(  26)		HX_VARI(  ::thx::bigint::DecimalImpl,rhs) = that->matchScale(hx::ObjectPtr<OBJ_>(this));
HXLINE(  28)		::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::add(lhs->value,rhs->value);
HXDLIN(  28)		return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp,lhs->scale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,add,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::subtract( ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","subtract",0x9328d4e6,"thx.bigint.DecimalImpl.subtract","thx/bigint/DecimalImpl.hx",31,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  32)		HX_VARI(  ::thx::bigint::DecimalImpl,lhs) = this->matchScale(that);
HXDLIN(  32)		HX_VARI(  ::thx::bigint::DecimalImpl,rhs) = that->matchScale(hx::ObjectPtr<OBJ_>(this));
HXLINE(  34)		::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::subtract(lhs->value,rhs->value);
HXDLIN(  34)		return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp,lhs->scale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,subtract,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::divide( ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","divide",0xcd8396cb,"thx.bigint.DecimalImpl.divide","thx/bigint/DecimalImpl.hx",38,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  38)		return this->divideWithScale(that,::thx::bigint::Decimals_obj::divisionExtraScale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,divide,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::divideWithScale( ::thx::bigint::DecimalImpl that,Int scale){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","divideWithScale",0xa5f5ca59,"thx.bigint.DecimalImpl.divideWithScale","thx/bigint/DecimalImpl.hx",40,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
            	HX_STACK_ARG(scale,"scale")
HXLINE(  41)		Bool _hx_tmp = that->isZero();
HXDLIN(  41)		if (_hx_tmp) {
HXLINE(  42)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("division by zero",1e,d4,91,da),null(),hx::SourceInfo(HX_("DecimalImpl.hx",6d,7b,9f,a6),42,HX_("thx.bigint.DecimalImpl",dc,42,30,19),HX_("divideWithScale",eb,ab,71,fc))));
            		}
HXLINE(  43)		HX_VARI(  ::thx::bigint::DecimalImpl,lhs) = this->matchScale(that);
HXDLIN(  43)		HX_VARI(  ::thx::bigint::DecimalImpl,rhs) = that->matchScale(hx::ObjectPtr<OBJ_>(this));
HXLINE(  45)		Int _hx_tmp1 = (rhs->scale + scale);
HXDLIN(  45)		::Dynamic _hx_tmp2 = ::thx::bigint::Bigs_obj::fromInt(_hx_tmp1);
HXLINE(  43)		HX_VARI( ::Dynamic,pow) = ::thx::bigint::Small_obj::ten->pow(_hx_tmp2);
HXDLIN(  43)		HX_VARI(  ::Dynamic,qr) = ::thx::bigint::BigIntImpl_obj::divMod(::thx::bigint::BigIntImpl_obj::multiply(lhs->value,pow),rhs->value);
HXDLIN(  43)		HX_VARI( Int,nscale) = (rhs->scale + scale);
HXLINE(  48)		return  ::thx::bigint::DecimalImpl_obj::__new( ::Dynamic(qr->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic)),nscale)->trim(nscale);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DecimalImpl_obj,divideWithScale,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::moduloWithScale( ::thx::bigint::DecimalImpl that,Int scale){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","moduloWithScale",0x2a2ab57c,"thx.bigint.DecimalImpl.moduloWithScale","thx/bigint/DecimalImpl.hx",51,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
            	HX_STACK_ARG(scale,"scale")
HXLINE(  52)		Bool _hx_tmp = that->isZero();
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  53)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("modulo by zero",a7,dc,3f,7d),null(),hx::SourceInfo(HX_("DecimalImpl.hx",6d,7b,9f,a6),53,HX_("thx.bigint.DecimalImpl",dc,42,30,19),HX_("moduloWithScale",0e,97,a6,80))));
            		}
HXLINE(  54)		HX_VARI(  ::thx::bigint::DecimalImpl,lhs) = this->matchScale(that);
HXDLIN(  54)		HX_VARI(  ::thx::bigint::DecimalImpl,rhs) = that->matchScale(hx::ObjectPtr<OBJ_>(this));
HXLINE(  56)		::Dynamic _hx_tmp1 = ::thx::bigint::Bigs_obj::fromInt(scale);
HXLINE(  54)		HX_VARI( ::Dynamic,pow) = ::thx::bigint::Small_obj::ten->pow(_hx_tmp1);
HXLINE(  57)		::Dynamic _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::multiply(lhs->value,pow);
HXDLIN(  57)		::Dynamic _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::multiply(rhs->value,pow);
HXLINE(  54)		HX_VARI(  ::Dynamic,qr) = ::thx::bigint::BigIntImpl_obj::divMod(_hx_tmp2,_hx_tmp3);
HXDLIN(  54)		HX_VARI( Int,nscale) = (lhs->scale + scale);
HXLINE(  59)		return  ::thx::bigint::DecimalImpl_obj::__new( ::Dynamic(qr->__Field(HX_("remainder",e5,f3,bd,bb),hx::paccDynamic)),nscale)->trim(nscale);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DecimalImpl_obj,moduloWithScale,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::multiply( ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","multiply",0x35a441f6,"thx.bigint.DecimalImpl.multiply","thx/bigint/DecimalImpl.hx",64,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  64)		::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::multiply(this->value,that->value);
HXDLIN(  64)		return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp,(this->scale + that->scale));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,multiply,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::modulo( ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","modulo",0xcf449c08,"thx.bigint.DecimalImpl.modulo","thx/bigint/DecimalImpl.hx",68,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  68)		return this->moduloWithScale(that,::thx::bigint::Decimals_obj::divisionExtraScale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,modulo,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::abs(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","abs",0xae52a1e0,"thx.bigint.DecimalImpl.abs","thx/bigint/DecimalImpl.hx",72,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE(  72)		::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::abs(this->value);
HXDLIN(  72)		return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp,this->scale);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,abs,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::negate(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","negate",0x758aa914,"thx.bigint.DecimalImpl.negate","thx/bigint/DecimalImpl.hx",75,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE(  75)		::Dynamic _hx_tmp = ::thx::bigint::BigIntImpl_obj::negate(this->value);
HXDLIN(  75)		return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp,this->scale);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,negate,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::next(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","next",0xe29513c5,"thx.bigint.DecimalImpl.next","thx/bigint/DecimalImpl.hx",78,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE(  78)		return this->add(::thx::bigint::DecimalImpl_obj::one);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,next,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::prev(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","prev",0xe3f14dc5,"thx.bigint.DecimalImpl.prev","thx/bigint/DecimalImpl.hx",81,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE(  81)		return this->subtract(::thx::bigint::DecimalImpl_obj::one);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,prev,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::pow(Int exp){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","pow",0xae5e0f06,"thx.bigint.DecimalImpl.pow","thx/bigint/DecimalImpl.hx",84,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(exp,"exp")
HXLINE(  84)		if ((exp < (int)0)) {
HXLINE(  85)			::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::fromInt(-(exp));
HXDLIN(  85)			HX_VARI( ::Dynamic,i) = ::thx::bigint::BigIntImpl_obj::pow(this->value,_hx_tmp);
HXLINE(  86)			 ::thx::bigint::DecimalImpl _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::fromBigInt(i);
HXDLIN(  86)			Int _hx_tmp2 = ((this->scale + (int)1) * -(exp));
HXDLIN(  86)			return ::thx::_Decimal::Decimal_Impl__obj::one->divideWithScale(_hx_tmp1,_hx_tmp2);
            		}
            		else {
HXLINE(  88)			::Dynamic _hx_tmp3 = ::thx::bigint::Bigs_obj::fromInt(exp);
HXDLIN(  88)			HX_VARI_NAME( ::Dynamic,i1,"i") = ::thx::bigint::BigIntImpl_obj::pow(this->value,_hx_tmp3);
HXLINE(  89)			return  ::thx::bigint::DecimalImpl_obj::__new(i1,(this->scale * exp));
            		}
HXLINE(  84)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,pow,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::ceilTo(Int newscale){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","ceilTo",0x10f85b32,"thx.bigint.DecimalImpl.ceilTo","thx/bigint/DecimalImpl.hx",93,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newscale,"newscale")
HXLINE(  94)		Bool _hx_tmp = this->isZero();
HXDLIN(  94)		if (_hx_tmp) {
HXLINE(  95)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  96)		HX_VARI(  ::thx::bigint::DecimalImpl,scaled) = this->scaleTo(newscale);
HXLINE(  97)		 ::thx::bigint::DecimalImpl _hx_tmp1;
HXDLIN(  97)		Bool _hx_tmp2 = scaled->isZero();
HXDLIN(  97)		if (_hx_tmp2) {
HXLINE(  97)			_hx_tmp1 = ::thx::bigint::DecimalImpl_obj::one;
            		}
            		else {
HXLINE(  97)			_hx_tmp1 = this->modulo(scaled);
            		}
HXDLIN(  97)		 ::thx::bigint::DecimalImpl _hx_tmp3 = ::thx::bigint::DecimalImpl_obj::ten->pow(newscale);
HXLINE(  96)		HX_VARI( Float,f) = _hx_tmp1->multiply(_hx_tmp3)->toFloat();
HXLINE(  98)		if ((f <= (int)0)) {
HXLINE(  99)			return scaled;
            		}
            		else {
HXLINE( 101)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::add(scaled->value,::thx::bigint::Small_obj::one);
HXDLIN( 101)			return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp4,scaled->scale);
            		}
HXLINE(  98)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,ceilTo,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::floorTo(Int newscale){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","floorTo",0x881126d5,"thx.bigint.DecimalImpl.floorTo","thx/bigint/DecimalImpl.hx",106,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newscale,"newscale")
HXLINE( 106)		return this->scaleTo(newscale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,floorTo,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::roundTo(Int newscale){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","roundTo",0x21d871d7,"thx.bigint.DecimalImpl.roundTo","thx/bigint/DecimalImpl.hx",108,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newscale,"newscale")
HXLINE( 109)		Bool _hx_tmp = this->isZero();
HXDLIN( 109)		if (_hx_tmp) {
HXLINE( 110)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 111)		HX_VARI(  ::thx::bigint::DecimalImpl,scaled) = this->scaleTo(newscale);
HXLINE( 112)		 ::thx::bigint::DecimalImpl _hx_tmp1;
HXDLIN( 112)		Bool _hx_tmp2 = scaled->isZero();
HXDLIN( 112)		if (_hx_tmp2) {
HXLINE( 112)			_hx_tmp1 = ::thx::bigint::DecimalImpl_obj::one;
            		}
            		else {
HXLINE( 112)			_hx_tmp1 = this->modulo(scaled);
            		}
HXDLIN( 112)		 ::thx::bigint::DecimalImpl _hx_tmp3 = ::thx::bigint::DecimalImpl_obj::ten->pow(newscale);
HXLINE( 111)		HX_VARI( Float,f) = _hx_tmp1->multiply(_hx_tmp3)->toFloat();
HXLINE( 113)		if ((f < ((Float)0.5))) {
HXLINE( 114)			return scaled;
            		}
            		else {
HXLINE( 116)			::Dynamic _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::add(scaled->value,::thx::bigint::Small_obj::one);
HXDLIN( 116)			return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp4,scaled->scale);
            		}
HXLINE( 113)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,roundTo,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::scaleTo(Int newscale){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","scaleTo",0xf9d04f13,"thx.bigint.DecimalImpl.scaleTo","thx/bigint/DecimalImpl.hx",120,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newscale,"newscale")
HXLINE( 121)		if ((newscale == this->scale)) {
HXLINE( 122)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 123)		Bool _hx_tmp = (newscale > this->scale);
HXDLIN( 123)		if (_hx_tmp) {
HXLINE( 124)			Int _hx_tmp1 = (newscale - this->scale);
HXDLIN( 124)			::Dynamic _hx_tmp2 = ::thx::bigint::Bigs_obj::fromInt(_hx_tmp1);
HXDLIN( 124)			HX_VARI( ::Dynamic,mul) = ::thx::bigint::Small_obj::ten->pow(_hx_tmp2);
HXLINE( 125)			::Dynamic _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::multiply(this->value,mul);
HXDLIN( 125)			return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp3,newscale);
            		}
            		else {
HXLINE( 127)			Int _hx_tmp4 = (this->scale - newscale);
HXDLIN( 127)			::Dynamic _hx_tmp5 = ::thx::bigint::Bigs_obj::fromInt(_hx_tmp4);
HXDLIN( 127)			HX_VARI( ::Dynamic,div) = ::thx::bigint::Small_obj::ten->pow(_hx_tmp5);
HXLINE( 128)			::Dynamic _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::divide(this->value,div);
HXDLIN( 128)			return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp6,newscale);
            		}
HXLINE( 123)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,scaleTo,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::square(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","square",0x676367ef,"thx.bigint.DecimalImpl.square","thx/bigint/DecimalImpl.hx",133,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE( 133)		return this->multiply(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,square,return )

Bool DecimalImpl_obj::isNegative(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","isNegative",0xe37db0d1,"thx.bigint.DecimalImpl.isNegative","thx/bigint/DecimalImpl.hx",137,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE( 137)		return ( (Bool)(this->value->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,isNegative,return )

Bool DecimalImpl_obj::isEven(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","isEven",0x6ef49b76,"thx.bigint.DecimalImpl.isEven","thx/bigint/DecimalImpl.hx",140,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE( 140)		return ::thx::bigint::BigIntImpl_obj::isEven(this->value);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,isEven,return )

Bool DecimalImpl_obj::isOdd(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","isOdd",0x87fd24d3,"thx.bigint.DecimalImpl.isOdd","thx/bigint/DecimalImpl.hx",143,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE( 143)		return ::thx::bigint::BigIntImpl_obj::isOdd(this->value);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,isOdd,return )

Bool DecimalImpl_obj::isZero(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","isZero",0x7cc93b84,"thx.bigint.DecimalImpl.isZero","thx/bigint/DecimalImpl.hx",146,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE( 146)		return ::thx::bigint::BigIntImpl_obj::isZero(this->value);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,isZero,return )

Int DecimalImpl_obj::compareTo( ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","compareTo",0x1bb90d6e,"thx.bigint.DecimalImpl.compareTo","thx/bigint/DecimalImpl.hx",148,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 149)		HX_VARI(  ::thx::bigint::DecimalImpl,lhs) = this->matchScale(that);
HXDLIN( 149)		HX_VARI(  ::thx::bigint::DecimalImpl,rhs) = that->matchScale(hx::ObjectPtr<OBJ_>(this));
HXLINE( 151)		return ::thx::bigint::BigIntImpl_obj::compareTo(lhs->value,rhs->value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,compareTo,return )

Int DecimalImpl_obj::compareToAbs( ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","compareToAbs",0x1e9433a4,"thx.bigint.DecimalImpl.compareToAbs","thx/bigint/DecimalImpl.hx",154,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 155)		HX_VARI(  ::thx::bigint::DecimalImpl,lhs) = this->matchScale(that);
HXDLIN( 155)		HX_VARI(  ::thx::bigint::DecimalImpl,rhs) = that->matchScale(hx::ObjectPtr<OBJ_>(this));
HXLINE( 157)		return ::thx::bigint::BigIntImpl_obj::compareToAbs(lhs->value,rhs->value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,compareToAbs,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::trim( ::Dynamic __o_min){
 ::Dynamic min = __o_min.Default(0);
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","trim",0xe6962bb4,"thx.bigint.DecimalImpl.trim","thx/bigint/DecimalImpl.hx",161,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(min,"min")
HXLINE( 162)		if ((this->scale == (int)0)) {
HXLINE( 163)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 164)		HX_VARI( ::String,s) = this->toString();
HXDLIN( 164)		HX_VARI( ::Array< ::String >,parts) = s.split(HX_(".",2e,00,00,00));
HXLINE( 166)		::String _hx_tmp = ::thx::Strings_obj::trimCharsRight(parts->__get((int)1),HX_("0",30,00,00,00));
HXLINE( 164)		HX_VARI( ::String,dec) = ::thx::Strings_obj::rpad(_hx_tmp,HX_("0",30,00,00,00),min);
HXLINE( 167)		if ((dec.length > (int)0)) {
HXLINE( 168)			s = ((parts->__get((int)0) + HX_(".",2e,00,00,00)) + dec);
            		}
            		else {
HXLINE( 170)			s = parts->__get((int)0);
            		}
HXLINE( 171)		return ::thx::bigint::Decimals_obj::parse(s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,trim,return )

Float DecimalImpl_obj::toFloat(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","toFloat",0x63e4128f,"thx.bigint.DecimalImpl.toFloat","thx/bigint/DecimalImpl.hx",176,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE( 176)		::String _hx_tmp = this->toString();
HXDLIN( 176)		return ::Std_obj::parseFloat(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,toFloat,return )

Int DecimalImpl_obj::toInt(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","toInt",0xdabc2722,"thx.bigint.DecimalImpl.toInt","thx/bigint/DecimalImpl.hx",179,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE( 180)		::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::fromInt(this->scale);
HXDLIN( 180)		::Dynamic _hx_tmp1 = ::thx::bigint::Small_obj::ten->pow(_hx_tmp);
HXDLIN( 180)		HX_VARI( ::Dynamic,i) = ::thx::bigint::BigIntImpl_obj::divide(this->value,_hx_tmp1);
HXLINE( 181)		return ::thx::bigint::BigIntImpl_obj::toInt(i);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,toInt,return )

::String DecimalImpl_obj::toString(){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","toString",0xd386307e,"thx.bigint.DecimalImpl.toString","thx/bigint/DecimalImpl.hx",184,0xcfbd1b82)
            	HX_STACK_THIS(this)
HXLINE( 185)		HX_VARI( Bool,sign) = ( (Bool)(this->value->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXLINE( 186)		::Dynamic _hx_tmp;
HXDLIN( 186)		if (sign) {
HXLINE( 186)			_hx_tmp = ::thx::bigint::BigIntImpl_obj::negate(this->value);
            		}
            		else {
HXLINE( 186)			_hx_tmp = this->value;
            		}
HXLINE( 185)		HX_VARI( ::String,i) = ::thx::bigint::BigIntImpl_obj::toString(_hx_tmp);
HXDLIN( 185)		HX_VARI( Int,l) = i.length;
HXLINE( 189)		Bool _hx_tmp1 = (this->scale == (int)0);
HXDLIN( 189)		if (_hx_tmp1) {
HXLINE( 190)			::String _hx_tmp2;
HXDLIN( 190)			if (sign) {
HXLINE( 190)				_hx_tmp2 = HX_("-",2d,00,00,00);
            			}
            			else {
HXLINE( 190)				_hx_tmp2 = HX_("",00,00,00,00);
            			}
HXDLIN( 190)			return (_hx_tmp2 + i);
            		}
            		else {
HXLINE( 191)			Bool _hx_tmp3 = (i.length <= this->scale);
HXDLIN( 191)			if (_hx_tmp3) {
HXLINE( 192)				::String _hx_tmp4;
HXDLIN( 192)				if (sign) {
HXLINE( 192)					_hx_tmp4 = HX_("-",2d,00,00,00);
            				}
            				else {
HXLINE( 192)					_hx_tmp4 = HX_("",00,00,00,00);
            				}
HXDLIN( 192)				::String _hx_tmp5 = (_hx_tmp4 + HX_("0.",fe,29,00,00));
HXDLIN( 192)				::String _hx_tmp6 = ::thx::Strings_obj::lpad(i,HX_("0",30,00,00,00),this->scale);
HXDLIN( 192)				return (_hx_tmp5 + _hx_tmp6);
            			}
            			else {
HXLINE( 194)				::String _hx_tmp7;
HXDLIN( 194)				if (sign) {
HXLINE( 194)					_hx_tmp7 = HX_("-",2d,00,00,00);
            				}
            				else {
HXLINE( 194)					_hx_tmp7 = HX_("",00,00,00,00);
            				}
HXDLIN( 194)				Int _hx_tmp8 = (l - this->scale);
HXDLIN( 194)				::String _hx_tmp9 = i.substring((int)0,_hx_tmp8);
HXDLIN( 194)				::String _hx_tmp10 = ((_hx_tmp7 + _hx_tmp9) + HX_(".",2e,00,00,00));
HXDLIN( 194)				Int _hx_tmp11 = (l - this->scale);
HXDLIN( 194)				::String _hx_tmp12 = i.substring(_hx_tmp11,null());
HXDLIN( 194)				return (_hx_tmp10 + _hx_tmp12);
            			}
            		}
HXLINE( 189)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DecimalImpl_obj,toString,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::matchScale( ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","matchScale",0x857cb357,"thx.bigint.DecimalImpl.matchScale","thx/bigint/DecimalImpl.hx",200,0xcfbd1b82)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 201)		if ((this->scale >= that->scale)) {
HXLINE( 202)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 203)		return this->scaleTo(that->scale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DecimalImpl_obj,matchScale,return )

 ::thx::bigint::DecimalImpl DecimalImpl_obj::zero;

 ::thx::bigint::DecimalImpl DecimalImpl_obj::one;

 ::thx::bigint::DecimalImpl DecimalImpl_obj::ten;

 ::thx::bigint::DecimalImpl DecimalImpl_obj::randomBetween( ::thx::bigint::DecimalImpl a, ::thx::bigint::DecimalImpl b){
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","randomBetween",0x2ad734f3,"thx.bigint.DecimalImpl.randomBetween","thx/bigint/DecimalImpl.hx",11,0xcfbd1b82)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  12)		HX_VARI(  ::thx::bigint::DecimalImpl,lhs) = a->matchScale(b);
HXDLIN(  12)		HX_VARI(  ::thx::bigint::DecimalImpl,rhs) = b->matchScale(a);
HXLINE(  14)		::Dynamic _hx_tmp = ::thx::_BigInt::BigInt_Impl__obj::randomBetween(lhs->value,rhs->value);
HXDLIN(  14)		return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp,lhs->scale);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DecimalImpl_obj,randomBetween,return )


DecimalImpl_obj::DecimalImpl_obj()
{
}

void DecimalImpl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DecimalImpl);
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_END_CLASS();
}

void DecimalImpl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(scale,"scale");
}

hx::Val DecimalImpl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"abs") ) { return hx::Val( abs_dyn()); }
		if (HX_FIELD_EQ(inName,"pow") ) { return hx::Val( pow_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev_dyn()); }
		if (HX_FIELD_EQ(inName,"trim") ) { return hx::Val( trim_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale); }
		if (HX_FIELD_EQ(inName,"isOdd") ) { return hx::Val( isOdd_dyn()); }
		if (HX_FIELD_EQ(inName,"toInt") ) { return hx::Val( toInt_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"divide") ) { return hx::Val( divide_dyn()); }
		if (HX_FIELD_EQ(inName,"modulo") ) { return hx::Val( modulo_dyn()); }
		if (HX_FIELD_EQ(inName,"negate") ) { return hx::Val( negate_dyn()); }
		if (HX_FIELD_EQ(inName,"ceilTo") ) { return hx::Val( ceilTo_dyn()); }
		if (HX_FIELD_EQ(inName,"square") ) { return hx::Val( square_dyn()); }
		if (HX_FIELD_EQ(inName,"isEven") ) { return hx::Val( isEven_dyn()); }
		if (HX_FIELD_EQ(inName,"isZero") ) { return hx::Val( isZero_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"floorTo") ) { return hx::Val( floorTo_dyn()); }
		if (HX_FIELD_EQ(inName,"roundTo") ) { return hx::Val( roundTo_dyn()); }
		if (HX_FIELD_EQ(inName,"scaleTo") ) { return hx::Val( scaleTo_dyn()); }
		if (HX_FIELD_EQ(inName,"toFloat") ) { return hx::Val( toFloat_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn()); }
		if (HX_FIELD_EQ(inName,"multiply") ) { return hx::Val( multiply_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"compareTo") ) { return hx::Val( compareTo_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isNegative") ) { return hx::Val( isNegative_dyn()); }
		if (HX_FIELD_EQ(inName,"matchScale") ) { return hx::Val( matchScale_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"compareToAbs") ) { return hx::Val( compareToAbs_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"divideWithScale") ) { return hx::Val( divideWithScale_dyn()); }
		if (HX_FIELD_EQ(inName,"moduloWithScale") ) { return hx::Val( moduloWithScale_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool DecimalImpl_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"one") ) { outValue = one; return true; }
		if (HX_FIELD_EQ(inName,"ten") ) { outValue = ten; return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zero") ) { outValue = zero; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"randomBetween") ) { outValue = randomBetween_dyn(); return true; }
	}
	return false;
}

hx::Val DecimalImpl_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DecimalImpl_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"one") ) { one=ioValue.Cast<  ::thx::bigint::DecimalImpl >(); return true; }
		if (HX_FIELD_EQ(inName,"ten") ) { ten=ioValue.Cast<  ::thx::bigint::DecimalImpl >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zero") ) { zero=ioValue.Cast<  ::thx::bigint::DecimalImpl >(); return true; }
	}
	return false;
}

void DecimalImpl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DecimalImpl_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::thx::bigint::BigIntImpl*/ ,(int)offsetof(DecimalImpl_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsInt,(int)offsetof(DecimalImpl_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DecimalImpl_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::bigint::DecimalImpl*/ ,(void *) &DecimalImpl_obj::zero,HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50")},
	{hx::fsObject /*::thx::bigint::DecimalImpl*/ ,(void *) &DecimalImpl_obj::one,HX_HCSTRING("one","\x66","\x9a","\x54","\x00")},
	{hx::fsObject /*::thx::bigint::DecimalImpl*/ ,(void *) &DecimalImpl_obj::ten,HX_HCSTRING("ten","\xdd","\x5d","\x58","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DecimalImpl_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("divide","\x79","\x2f","\x12","\xbf"),
	HX_HCSTRING("divideWithScale","\xeb","\xab","\x71","\xfc"),
	HX_HCSTRING("moduloWithScale","\x0e","\x97","\xa6","\x80"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("modulo","\xb6","\x34","\xd3","\xc0"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("pow","\x98","\x5d","\x55","\x00"),
	HX_HCSTRING("ceilTo","\xe0","\xf3","\x86","\x02"),
	HX_HCSTRING("floorTo","\x67","\x26","\x48","\xf3"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("scaleTo","\xa5","\x4e","\x07","\x65"),
	HX_HCSTRING("square","\x9d","\x00","\xf2","\x58"),
	HX_HCSTRING("isNegative","\x7f","\x38","\xf1","\xcb"),
	HX_HCSTRING("isEven","\x24","\x34","\x83","\x60"),
	HX_HCSTRING("isOdd","\xe5","\xbb","\x52","\xc1"),
	HX_HCSTRING("isZero","\x32","\xd4","\x57","\x6e"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	HX_HCSTRING("compareToAbs","\xd2","\x82","\xbb","\xb0"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	HX_HCSTRING("toFloat","\x21","\x12","\x1b","\xcf"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("matchScale","\x05","\x3b","\xf0","\x6d"),
	::String(null()) };

static void DecimalImpl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DecimalImpl_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DecimalImpl_obj::zero,"zero");
	HX_MARK_MEMBER_NAME(DecimalImpl_obj::one,"one");
	HX_MARK_MEMBER_NAME(DecimalImpl_obj::ten,"ten");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DecimalImpl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DecimalImpl_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DecimalImpl_obj::zero,"zero");
	HX_VISIT_MEMBER_NAME(DecimalImpl_obj::one,"one");
	HX_VISIT_MEMBER_NAME(DecimalImpl_obj::ten,"ten");
};

#endif

hx::Class DecimalImpl_obj::__mClass;

static ::String DecimalImpl_obj_sStaticFields[] = {
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("one","\x66","\x9a","\x54","\x00"),
	HX_HCSTRING("ten","\xdd","\x5d","\x58","\x00"),
	HX_HCSTRING("randomBetween","\x05","\x2e","\x15","\x7b"),
	::String(null())
};

void DecimalImpl_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.bigint.DecimalImpl","\xdc","\x42","\x30","\x19");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DecimalImpl_obj::__GetStatic;
	__mClass->mSetStaticField = &DecimalImpl_obj::__SetStatic;
	__mClass->mMarkFunc = DecimalImpl_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DecimalImpl_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DecimalImpl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DecimalImpl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DecimalImpl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DecimalImpl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DecimalImpl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DecimalImpl_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","boot",0xdaae1304,"thx.bigint.DecimalImpl.boot","thx/bigint/DecimalImpl.hx",7,0xcfbd1b82)
HXLINE(   7)		zero = ::thx::bigint::Decimals_obj::fromInt((int)0);
            	}
{
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","boot",0xdaae1304,"thx.bigint.DecimalImpl.boot","thx/bigint/DecimalImpl.hx",8,0xcfbd1b82)
HXLINE(   8)		one = ::thx::bigint::Decimals_obj::fromInt((int)1);
            	}
{
            	HX_STACK_FRAME("thx.bigint.DecimalImpl","boot",0xdaae1304,"thx.bigint.DecimalImpl.boot","thx/bigint/DecimalImpl.hx",9,0xcfbd1b82)
HXLINE(   9)		ten = ::thx::bigint::Decimals_obj::fromInt((int)10);
            	}
}

} // end namespace thx
} // end namespace bigint
