// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_EnumValueOrderedMap
#include <thx/EnumValueOrderedMap.h>
#endif
#ifndef INCLUDED_thx_IntOrderedMap
#include <thx/IntOrderedMap.h>
#endif
#ifndef INCLUDED_thx_Iterators
#include <thx/Iterators.h>
#endif
#ifndef INCLUDED_thx_ObjectOrderedMap
#include <thx/ObjectOrderedMap.h>
#endif
#ifndef INCLUDED_thx_Options
#include <thx/Options.h>
#endif
#ifndef INCLUDED_thx_OrderedMapImpl
#include <thx/OrderedMapImpl.h>
#endif
#ifndef INCLUDED_thx_StringOrderedMap
#include <thx/StringOrderedMap.h>
#endif
#ifndef INCLUDED_thx_TestOrderedMap
#include <thx/TestOrderedMap.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestOrderedMap_obj::__construct(){
            	HX_STACK_FRAME("thx.TestOrderedMap","new",0x7a4cb25d,"thx.TestOrderedMap.new","thx/TestOrderedMap.hx",9,0x38d27692)
            	HX_STACK_THIS(this)
            	}

Dynamic TestOrderedMap_obj::__CreateEmpty() { return new TestOrderedMap_obj; }

hx::ObjectPtr< TestOrderedMap_obj > TestOrderedMap_obj::__new()
{
	hx::ObjectPtr< TestOrderedMap_obj > _hx_result = new TestOrderedMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestOrderedMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestOrderedMap_obj > _hx_result = new TestOrderedMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestOrderedMap_obj::testBasics(){
            	HX_STACK_FRAME("thx.TestOrderedMap","testBasics",0x804f7b9a,"thx.TestOrderedMap.testBasics","thx/TestOrderedMap.hx",12,0x38d27692)
            	HX_STACK_THIS(this)
HXLINE(  13)		HX_VARI(  ::thx::OrderedMapImpl,inst) =  ::thx::StringOrderedMap_obj::__new();
HXDLIN(  13)		HX_VARI(  ::thx::OrderedMapImpl,ml) = inst;
HXLINE(  15)		::utest::Assert_obj::equals((int)0,ml->length,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),15,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  16)		::String _hx_tmp = ml->toString();
HXDLIN(  16)		::utest::Assert_obj::equals(HX_("[]",a2,4f,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),16,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  18)		ml->set(HX_("z",7a,00,00,00),HX_("Z",5a,00,00,00));
HXLINE(  19)		ml->set(HX_("y",79,00,00,00),HX_("Y",59,00,00,00));
HXLINE(  20)		ml->set(HX_("y",79,00,00,00),HX_("Y",59,00,00,00));
HXLINE(  21)		ml->set(HX_("x",78,00,00,00),HX_("X",58,00,00,00));
HXLINE(  23)		::utest::Assert_obj::equals((int)3,ml->length,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),23,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  24)		::String _hx_tmp1 = ml->toString();
HXDLIN(  24)		::utest::Assert_obj::equals(HX_("[z => Z, y => Y, x => X]",77,dc,da,39),_hx_tmp1,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),24,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  26)		Bool _hx_tmp2 = ml->remove(HX_("y",79,00,00,00));
HXDLIN(  26)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),26,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  27)		Bool _hx_tmp3 = ml->remove(HX_("y",79,00,00,00));
HXDLIN(  27)		::utest::Assert_obj::isFalse(_hx_tmp3,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),27,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  29)		::utest::Assert_obj::equals((int)2,ml->length,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),29,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  30)		::String _hx_tmp4 = ml->toString();
HXDLIN(  30)		::utest::Assert_obj::equals(HX_("[z => Z, x => X]",6c,e5,b5,5e),_hx_tmp4,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),30,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  32)		ml->insert((int)1,HX_("y",79,00,00,00),HX_("Y",59,00,00,00));
HXLINE(  34)		::utest::Assert_obj::equals((int)3,ml->length,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),34,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  35)		::String _hx_tmp5 = ml->toString();
HXDLIN(  35)		::utest::Assert_obj::equals(HX_("[z => Z, y => Y, x => X]",77,dc,da,39),_hx_tmp5,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),35,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  37)		::String _hx_tmp6 = ( (::String)(ml->keyAt((int)1)) );
HXDLIN(  37)		::utest::Assert_obj::equals(HX_("y",79,00,00,00),_hx_tmp6,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),37,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  38)		::utest::Assert_obj::equals(HX_("Y",59,00,00,00),( (::String)(ml->at((int)1)) ),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),38,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  40)		Int _hx_tmp7 = ml->keyIndex(HX_("y",79,00,00,00));
HXDLIN(  40)		::utest::Assert_obj::equals((int)1,_hx_tmp7,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),40,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  41)		Int _hx_tmp8 = ml->valueIndex(HX_("Y",59,00,00,00));
HXDLIN(  41)		::utest::Assert_obj::equals((int)1,_hx_tmp8,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),41,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  43)		ml->removeAt((int)1);
HXLINE(  45)		::utest::Assert_obj::equals((int)2,ml->length,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),45,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  46)		::String _hx_tmp9 = ml->toString();
HXDLIN(  46)		::utest::Assert_obj::equals(HX_("[z => Z, x => X]",6c,e5,b5,5e),_hx_tmp9,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),46,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  48)		::Array< ::String > _hx_tmp10 = ml->toArray();
HXDLIN(  48)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Z",5a,00,00,00))->init(1,HX_("X",58,00,00,00)),_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),48,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  49)		 ::Dynamic _hx_tmp11 = ml->keys();
HXDLIN(  49)		::Array< ::String > _hx_tmp12 = ::thx::Iterators_obj::toArray(_hx_tmp11);
HXDLIN(  49)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,HX_("z",7a,00,00,00))->init(1,HX_("x",78,00,00,00)),_hx_tmp12,null(),null(),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),49,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testBasics",f7,73,1f,6e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestOrderedMap_obj,testBasics,(void))

void TestOrderedMap_obj::testGetOption(){
            	HX_STACK_FRAME("thx.TestOrderedMap","testGetOption",0x5317fa36,"thx.TestOrderedMap.testGetOption","thx/TestOrderedMap.hx",52,0x38d27692)
            	HX_STACK_THIS(this)
HXLINE(  53)		HX_VARI(  ::thx::OrderedMapImpl,inst) =  ::thx::StringOrderedMap_obj::__new();
HXDLIN(  53)		HX_VARI(  ::thx::OrderedMapImpl,m) = inst;
HXLINE(  54)		m->set(HX_("key1",b2,e1,06,47),(int)1);
HXLINE(  56)		HX_VARI(  ::Dynamic,value) = m->get(HX_("key1",b2,e1,06,47));
HXDLIN(  56)		::hx::EnumBase _hx_tmp;
HXDLIN(  56)		if (hx::IsNull( value )) {
HXLINE(  56)			_hx_tmp = ::haxe::ds::Option_obj::None_dyn();
            		}
            		else {
HXLINE(  56)			_hx_tmp = ::haxe::ds::Option_obj::Some(value);
            		}
HXDLIN(  56)		 ::Dynamic _hx_tmp1 = ::thx::Options_obj::get(_hx_tmp);
HXDLIN(  56)		::utest::Assert_obj::same(_hx_tmp1,(int)1,null(),null(),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),56,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testGetOption",f9,d9,0b,db)));
HXLINE(  57)		HX_VARI_NAME(  ::Dynamic,value1,"value") = m->get(HX_("key2",b3,e1,06,47));
HXDLIN(  57)		::hx::EnumBase _hx_tmp2;
HXDLIN(  57)		if (hx::IsNull( value1 )) {
HXLINE(  57)			_hx_tmp2 = ::haxe::ds::Option_obj::None_dyn();
            		}
            		else {
HXLINE(  57)			_hx_tmp2 = ::haxe::ds::Option_obj::Some(value1);
            		}
HXDLIN(  57)		Bool _hx_tmp3 = ::thx::Options_obj::toBool(_hx_tmp2);
HXDLIN(  57)		::utest::Assert_obj::same(_hx_tmp3,false,null(),null(),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),57,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testGetOption",f9,d9,0b,db)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestOrderedMap_obj,testGetOption,(void))

void TestOrderedMap_obj::testToTuples(){
            	HX_STACK_FRAME("thx.TestOrderedMap","testToTuples",0xa7e3301b,"thx.TestOrderedMap.testToTuples","thx/TestOrderedMap.hx",60,0x38d27692)
            	HX_STACK_THIS(this)
HXLINE(  61)		HX_VARI(  ::thx::OrderedMapImpl,inst) =  ::thx::StringOrderedMap_obj::__new();
HXDLIN(  61)		HX_VARI(  ::thx::OrderedMapImpl,m) = inst;
HXLINE(  62)		m->set(HX_("foo",06,c7,4d,00),(int)10);
HXLINE(  63)		m->set(HX_("bar",d3,b1,4a,00),(int)20);
HXLINE(  64)		m->insert((int)2,HX_("baz",db,b1,4a,00),(int)30);
HXLINE(  66)		HX_VARI( ::Array< ::Dynamic>,tuples) = m->tuples();
HXLINE(  68)		::utest::Assert_obj::same(HX_("foo",06,c7,4d,00),( (::String)(tuples->__get((int)0)->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)) ),null(),null(),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),68,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testToTuples",b8,b9,e7,a3)));
HXLINE(  69)		::utest::Assert_obj::same((int)20,( (Int)(tuples->__get((int)1)->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)) ),null(),null(),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),69,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testToTuples",b8,b9,e7,a3)));
HXLINE(  70)		::utest::Assert_obj::same(HX_("baz",db,b1,4a,00),( (::String)(tuples->__get((int)2)->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)) ),null(),null(),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),70,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testToTuples",b8,b9,e7,a3)));
HXLINE(  71)		::utest::Assert_obj::same((int)30,( (Int)(tuples->__get((int)2)->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)) ),null(),null(),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),71,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testToTuples",b8,b9,e7,a3)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestOrderedMap_obj,testToTuples,(void))

void TestOrderedMap_obj::testAbstract(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::Dynamic m){
            			HX_STACK_FRAME("thx.TestOrderedMap","testAbstract",0x1f815db7,"thx.TestOrderedMap.testAbstract","thx/TestOrderedMap.hx",82,0x38d27692)
            			HX_STACK_ARG(m,"m")
HXLINE(  82)			::String _hx_tmp = ( (::String)(::haxe::IMap_obj::get(m,HX_("k",6b,00,00,00))) );
HXDLIN(  82)			::utest::Assert_obj::equals(HX_("value",71,7f,b8,31),_hx_tmp,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),82,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testAbstract",54,e7,85,1b)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.TestOrderedMap","testAbstract",0x1f815db7,"thx.TestOrderedMap.testAbstract","thx/TestOrderedMap.hx",74,0x38d27692)
            	HX_STACK_THIS(this)
HXLINE(  75)		HX_VARI(  ::thx::OrderedMapImpl,inst) =  ::thx::StringOrderedMap_obj::__new();
HXDLIN(  75)		HX_VARI(  ::thx::OrderedMapImpl,ml) = inst;
HXLINE(  76)		ml->setValue(HX_("k",6b,00,00,00),HX_("value",71,7f,b8,31));
HXLINE(  77)		::utest::Assert_obj::equals(HX_("value",71,7f,b8,31),( (::String)(ml->get(HX_("k",6b,00,00,00))) ),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),77,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testAbstract",54,e7,85,1b)));
HXLINE(  78)		::utest::Assert_obj::equals(HX_("value",71,7f,b8,31),( (::String)(ml->at((int)0)) ),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),78,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testAbstract",54,e7,85,1b)));
HXLINE(  79)		::utest::Assert_obj::equals(HX_("value",71,7f,b8,31),( (::String)(ml->at((int)0)) ),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),79,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testAbstract",54,e7,85,1b)));
HXLINE(  81)		HX_VARI(  ::Dynamic,acceptMap) =  ::Dynamic(new _hx_Closure_0());
HXLINE(  84)		acceptMap(ml);
HXLINE(  86)		HX_VARI_NAME(  ::thx::OrderedMapImpl,inst1,"inst") =  ::thx::IntOrderedMap_obj::__new();
HXDLIN(  86)		::utest::Assert_obj::notNull(inst1,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),86,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testAbstract",54,e7,85,1b)));
HXLINE(  87)		HX_VARI_NAME(  ::thx::OrderedMapImpl,inst2,"inst") =  ::thx::EnumValueOrderedMap_obj::__new();
HXDLIN(  87)		::utest::Assert_obj::notNull(inst2,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),87,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testAbstract",54,e7,85,1b)));
HXLINE(  88)		HX_VARI_NAME(  ::thx::OrderedMapImpl,inst3,"inst") =  ::thx::ObjectOrderedMap_obj::__new();
HXDLIN(  88)		::utest::Assert_obj::notNull(inst3,null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),88,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testAbstract",54,e7,85,1b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestOrderedMap_obj,testAbstract,(void))

void TestOrderedMap_obj::testEmpty(){
            	HX_STACK_FRAME("thx.TestOrderedMap","testEmpty",0xf2ea7698,"thx.TestOrderedMap.testEmpty","thx/TestOrderedMap.hx",91,0x38d27692)
            	HX_STACK_THIS(this)
HXLINE(  92)		HX_VARI(  ::thx::OrderedMapImpl,inst) =  ::thx::StringOrderedMap_obj::__new();
HXDLIN(  92)		HX_VARI(  ::thx::OrderedMapImpl,ml) = inst;
HXLINE(  93)		ml->setValue(HX_("k",6b,00,00,00),HX_("value",71,7f,b8,31));
HXLINE(  94)		HX_VARI_NAME(  ::thx::OrderedMapImpl,inst1,"inst") = ml->empty();
HXLINE(  95)		::utest::Assert_obj::isNull(( (::String)(inst1->get(HX_("k",6b,00,00,00))) ),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),95,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testEmpty",db,78,dc,38)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestOrderedMap_obj,testEmpty,(void))

void TestOrderedMap_obj::testCopyTo(){
            	HX_STACK_FRAME("thx.TestOrderedMap","testCopyTo",0xf4576a25,"thx.TestOrderedMap.testCopyTo","thx/TestOrderedMap.hx",98,0x38d27692)
            	HX_STACK_THIS(this)
HXLINE(  99)		HX_VARI(  ::thx::OrderedMapImpl,inst) =  ::thx::StringOrderedMap_obj::__new();
HXDLIN(  99)		HX_VARI(  ::thx::OrderedMapImpl,ml) = inst;
HXLINE( 100)		ml->setValue(HX_("k",6b,00,00,00),HX_("value",71,7f,b8,31));
HXLINE( 101)		HX_VARI_NAME(  ::thx::OrderedMapImpl,inst1,"inst") = ml->empty();
HXDLIN( 101)		HX_VARI(  ::thx::OrderedMapImpl,e) = inst1;
HXLINE( 102)		{
HXLINE( 102)			HX_VARI(  ::Dynamic,tmp) = ml->keys();
HXDLIN( 102)			while(true){
HXLINE( 102)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 102)				if (_hx_tmp) {
HXLINE( 102)					goto _hx_goto_0;
            				}
HXDLIN( 102)				HX_VARI( ::String,key) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 102)				::String _hx_tmp1 = ( (::String)(ml->get(key)) );
HXDLIN( 102)				e->set(key,_hx_tmp1);
            			}
            			_hx_goto_0:;
            		}
HXLINE( 103)		::utest::Assert_obj::equals(HX_("value",71,7f,b8,31),( (::String)(e->get(HX_("k",6b,00,00,00))) ),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),103,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testCopyTo",82,62,27,e2)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestOrderedMap_obj,testCopyTo,(void))

void TestOrderedMap_obj::testClone(){
            	HX_STACK_FRAME("thx.TestOrderedMap","testClone",0xcb734f68,"thx.TestOrderedMap.testClone","thx/TestOrderedMap.hx",106,0x38d27692)
            	HX_STACK_THIS(this)
HXLINE( 107)		HX_VARI(  ::thx::OrderedMapImpl,inst) =  ::thx::StringOrderedMap_obj::__new();
HXDLIN( 107)		HX_VARI(  ::thx::OrderedMapImpl,ml) = inst;
HXLINE( 108)		ml->setValue(HX_("k",6b,00,00,00),HX_("value",71,7f,b8,31));
HXLINE( 109)		HX_VARI_NAME(  ::thx::OrderedMapImpl,inst1,"inst") = ml->empty();
HXDLIN( 109)		HX_VARI(  ::thx::OrderedMapImpl,that) = inst1;
HXDLIN( 109)		{
HXLINE( 109)			HX_VARI(  ::Dynamic,tmp) = ml->keys();
HXDLIN( 109)			while(true){
HXLINE( 109)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 109)				if (_hx_tmp) {
HXLINE( 109)					goto _hx_goto_1;
            				}
HXDLIN( 109)				HX_VARI( ::String,key) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 109)				::String _hx_tmp1 = ( (::String)(ml->get(key)) );
HXDLIN( 109)				that->set(key,_hx_tmp1);
            			}
            			_hx_goto_1:;
            		}
HXLINE( 110)		::utest::Assert_obj::equals(HX_("value",71,7f,b8,31),( (::String)(that->get(HX_("k",6b,00,00,00))) ),null(),hx::SourceInfo(HX_("TestOrderedMap.hx",1d,ca,ca,5f),110,HX_("thx.TestOrderedMap",eb,3f,5b,04),HX_("testClone",ab,51,65,11)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestOrderedMap_obj,testClone,(void))


TestOrderedMap_obj::TestOrderedMap_obj()
{
}

hx::Val TestOrderedMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"testEmpty") ) { return hx::Val( testEmpty_dyn()); }
		if (HX_FIELD_EQ(inName,"testClone") ) { return hx::Val( testClone_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		if (HX_FIELD_EQ(inName,"testCopyTo") ) { return hx::Val( testCopyTo_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testToTuples") ) { return hx::Val( testToTuples_dyn()); }
		if (HX_FIELD_EQ(inName,"testAbstract") ) { return hx::Val( testAbstract_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testGetOption") ) { return hx::Val( testGetOption_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestOrderedMap_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestOrderedMap_obj_sStaticStorageInfo = 0;
#endif

static ::String TestOrderedMap_obj_sMemberFields[] = {
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testGetOption","\xf9","\xd9","\x0b","\xdb"),
	HX_HCSTRING("testToTuples","\xb8","\xb9","\xe7","\xa3"),
	HX_HCSTRING("testAbstract","\x54","\xe7","\x85","\x1b"),
	HX_HCSTRING("testEmpty","\xdb","\x78","\xdc","\x38"),
	HX_HCSTRING("testCopyTo","\x82","\x62","\x27","\xe2"),
	HX_HCSTRING("testClone","\xab","\x51","\x65","\x11"),
	::String(null()) };

static void TestOrderedMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestOrderedMap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestOrderedMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestOrderedMap_obj::__mClass,"__mClass");
};

#endif

hx::Class TestOrderedMap_obj::__mClass;

void TestOrderedMap_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestOrderedMap","\xeb","\x3f","\x5b","\x04");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestOrderedMap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestOrderedMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestOrderedMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestOrderedMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestOrderedMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestOrderedMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
