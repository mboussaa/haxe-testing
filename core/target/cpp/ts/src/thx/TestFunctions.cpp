// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Functions
#include <thx/Functions.h>
#endif
#ifndef INCLUDED_thx_Functions1
#include <thx/Functions1.h>
#endif
#ifndef INCLUDED_thx_TestFunctions
#include <thx/TestFunctions.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestFunctions_obj::__construct(){
            	HX_STACK_FRAME("thx.TestFunctions","new",0xb7aa2e91,"thx.TestFunctions.new","thx/TestFunctions.hx",7,0x5f0a6000)
            	HX_STACK_THIS(this)
            	}

Dynamic TestFunctions_obj::__CreateEmpty() { return new TestFunctions_obj; }

hx::ObjectPtr< TestFunctions_obj > TestFunctions_obj::__new()
{
	hx::ObjectPtr< TestFunctions_obj > _hx_result = new TestFunctions_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestFunctions_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestFunctions_obj > _hx_result = new TestFunctions_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestFunctions_obj::testAfter(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,counter) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestFunctions","testAfter",0x99b13d5b,"thx.TestFunctions.testAfter","thx/TestFunctions.hx",11,0x5f0a6000)
HXLINE(  11)			::utest::Assert_obj::equals((int)1,++counter[(int)0],null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),11,HX_("thx.TestFunctions",1f,92,51,42),HX_("testAfter",6a,a4,a4,e6)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::Array< Int >,n, ::Dynamic,callback) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestFunctions","testAfter",0x99b13d5b,"thx.TestFunctions.testAfter","thx/TestFunctions.hx",12,0x5f0a6000)
HXLINE(  12)			Bool _hx_tmp = (--n[(int)0] == (int)0);
HXDLIN(  12)			if (_hx_tmp) {
HXLINE(  12)				callback();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestFunctions","testAfter",0x99b13d5b,"thx.TestFunctions.testAfter","thx/TestFunctions.hx",9,0x5f0a6000)
            	HX_STACK_THIS(this)
HXLINE(  10)		HX_VARI( ::Array< Int >,counter) = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  10)		HX_VARI(  ::Dynamic,test) =  ::Dynamic(new _hx_Closure_0(counter));
HXLINE(  12)		HX_VARI(  ::Dynamic,callback) = test;
HXDLIN(  12)		HX_VARI( ::Array< Int >,n) = ::Array_obj< Int >::__new(1)->init(0,(int)3);
HXLINE(  10)		HX_VARI(  ::Dynamic,manage) =  ::Dynamic(new _hx_Closure_1(n,callback));
HXLINE(  14)		::utest::Assert_obj::equals((int)0,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),14,HX_("thx.TestFunctions",1f,92,51,42),HX_("testAfter",6a,a4,a4,e6)));
HXLINE(  15)		manage();
HXLINE(  16)		::utest::Assert_obj::equals((int)0,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),16,HX_("thx.TestFunctions",1f,92,51,42),HX_("testAfter",6a,a4,a4,e6)));
HXLINE(  17)		manage();
HXLINE(  18)		::utest::Assert_obj::equals((int)0,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),18,HX_("thx.TestFunctions",1f,92,51,42),HX_("testAfter",6a,a4,a4,e6)));
HXLINE(  19)		manage();
HXLINE(  20)		::utest::Assert_obj::equals((int)1,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),20,HX_("thx.TestFunctions",1f,92,51,42),HX_("testAfter",6a,a4,a4,e6)));
HXLINE(  21)		manage();
HXLINE(  22)		::utest::Assert_obj::equals((int)1,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),22,HX_("thx.TestFunctions",1f,92,51,42),HX_("testAfter",6a,a4,a4,e6)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFunctions_obj,testAfter,(void))

void TestFunctions_obj::testOnce(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,counter) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestFunctions","testOnce",0x61369322,"thx.TestFunctions.testOnce","thx/TestFunctions.hx",27,0x5f0a6000)
HXLINE(  27)			::utest::Assert_obj::equals((int)1,++counter[(int)0],null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),27,HX_("thx.TestFunctions",1f,92,51,42),HX_("testOnce",f3,02,e5,4c)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,f) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx.TestFunctions","testOnce",0x61369322,"thx.TestFunctions.testOnce","thx/TestFunctions.hx",28,0x5f0a6000)
HXLINE(  28)			HX_VARI(  ::Dynamic,t) = f->__get((int)0);
HXDLIN(  28)			f[(int)0] = ::thx::Functions_obj::noop_dyn();
HXDLIN(  28)			t();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx.TestFunctions","testOnce",0x61369322,"thx.TestFunctions.testOnce","thx/TestFunctions.hx",25,0x5f0a6000)
            	HX_STACK_THIS(this)
HXLINE(  26)		HX_VARI( ::Array< Int >,counter) = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  26)		HX_VARI(  ::Dynamic,test) =  ::Dynamic(new _hx_Closure_0(counter));
HXLINE(  28)		HX_VARI( ::Array< ::Dynamic>,f) = ::Array_obj< ::Dynamic>::__new(1)->init(0,test);
HXLINE(  26)		HX_VARI(  ::Dynamic,manage) =  ::Dynamic(new _hx_Closure_1(f));
HXLINE(  30)		::utest::Assert_obj::equals((int)0,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),30,HX_("thx.TestFunctions",1f,92,51,42),HX_("testOnce",f3,02,e5,4c)));
HXLINE(  31)		manage();
HXLINE(  32)		::utest::Assert_obj::equals((int)1,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),32,HX_("thx.TestFunctions",1f,92,51,42),HX_("testOnce",f3,02,e5,4c)));
HXLINE(  33)		manage();
HXLINE(  34)		::utest::Assert_obj::equals((int)1,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),34,HX_("thx.TestFunctions",1f,92,51,42),HX_("testOnce",f3,02,e5,4c)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFunctions_obj,testOnce,(void))

void TestFunctions_obj::testMemoize(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,counter) HXARGC(1)
            		Int _hx_run(Int x){
            			HX_STACK_FRAME("thx.TestFunctions","testMemoize",0xe1ed67d9,"thx.TestFunctions.testMemoize","thx/TestFunctions.hx",39,0x5f0a6000)
            			HX_STACK_ARG(x,"x")
HXLINE(  40)			++counter[(int)0];
HXLINE(  41)			return (x * (int)10);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestFunctions","testMemoize",0xe1ed67d9,"thx.TestFunctions.testMemoize","thx/TestFunctions.hx",37,0x5f0a6000)
            	HX_STACK_THIS(this)
HXLINE(  38)		HX_VARI( ::Array< Int >,counter) = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN(  38)		HX_VARI(  ::Dynamic,test) =  ::Dynamic(new _hx_Closure_0(counter));
HXDLIN(  38)		HX_VARI(  ::Dynamic,manage) = ::thx::Functions1_obj::memoize(test,null());
HXLINE(  45)		::utest::Assert_obj::equals((int)0,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),45,HX_("thx.TestFunctions",1f,92,51,42),HX_("testMemoize",a8,f0,d3,df)));
HXLINE(  46)		Int _hx_tmp = ( (Int)(manage((int)1)) );
HXDLIN(  46)		::utest::Assert_obj::equals((int)10,_hx_tmp,null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),46,HX_("thx.TestFunctions",1f,92,51,42),HX_("testMemoize",a8,f0,d3,df)));
HXLINE(  47)		::utest::Assert_obj::equals((int)1,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),47,HX_("thx.TestFunctions",1f,92,51,42),HX_("testMemoize",a8,f0,d3,df)));
HXLINE(  48)		Int _hx_tmp1 = ( (Int)(manage((int)1)) );
HXDLIN(  48)		::utest::Assert_obj::equals((int)10,_hx_tmp1,null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),48,HX_("thx.TestFunctions",1f,92,51,42),HX_("testMemoize",a8,f0,d3,df)));
HXLINE(  49)		::utest::Assert_obj::equals((int)1,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),49,HX_("thx.TestFunctions",1f,92,51,42),HX_("testMemoize",a8,f0,d3,df)));
HXLINE(  50)		Int _hx_tmp2 = ( (Int)(manage((int)2)) );
HXDLIN(  50)		::utest::Assert_obj::equals((int)20,_hx_tmp2,null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),50,HX_("thx.TestFunctions",1f,92,51,42),HX_("testMemoize",a8,f0,d3,df)));
HXLINE(  51)		::utest::Assert_obj::equals((int)2,counter->__get((int)0),null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),51,HX_("thx.TestFunctions",1f,92,51,42),HX_("testMemoize",a8,f0,d3,df)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFunctions_obj,testMemoize,(void))

void TestFunctions_obj::testNegate(){
            	HX_STACK_FRAME("thx.TestFunctions","testNegate",0x7806c1a3,"thx.TestFunctions.testNegate","thx/TestFunctions.hx",55,0x5f0a6000)
            	HX_STACK_THIS(this)
HXLINE(  55)		::utest::Assert_obj::isFalse(false,null(),hx::SourceInfo(HX_("TestFunctions.hx",d5,06,84,42),55,HX_("thx.TestFunctions",1f,92,51,42),HX_("testNegate",b4,87,0d,80)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFunctions_obj,testNegate,(void))


TestFunctions_obj::TestFunctions_obj()
{
}

hx::Val TestFunctions_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"testOnce") ) { return hx::Val( testOnce_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testAfter") ) { return hx::Val( testAfter_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testNegate") ) { return hx::Val( testNegate_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testMemoize") ) { return hx::Val( testMemoize_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestFunctions_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestFunctions_obj_sStaticStorageInfo = 0;
#endif

static ::String TestFunctions_obj_sMemberFields[] = {
	HX_HCSTRING("testAfter","\x6a","\xa4","\xa4","\xe6"),
	HX_HCSTRING("testOnce","\xf3","\x02","\xe5","\x4c"),
	HX_HCSTRING("testMemoize","\xa8","\xf0","\xd3","\xdf"),
	HX_HCSTRING("testNegate","\xb4","\x87","\x0d","\x80"),
	::String(null()) };

static void TestFunctions_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestFunctions_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestFunctions_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestFunctions_obj::__mClass,"__mClass");
};

#endif

hx::Class TestFunctions_obj::__mClass;

void TestFunctions_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestFunctions","\x1f","\x92","\x51","\x42");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestFunctions_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestFunctions_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestFunctions_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestFunctions_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestFunctions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestFunctions_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
