// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Enum20151201
#include <thx/Enum20151201.h>
#endif
#ifndef INCLUDED_thx_Enums
#include <thx/Enums.h>
#endif
#ifndef INCLUDED_thx_TestEnums
#include <thx/TestEnums.h>
#endif
#ifndef INCLUDED_thx__TestEnums_Sample
#include <thx/_TestEnums/Sample.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestEnums_obj::__construct(){
            	HX_STACK_FRAME("thx.TestEnums","new",0x473ff008,"thx.TestEnums.new","thx/TestEnums.hx",10,0x587065e9)
            	HX_STACK_THIS(this)
            	}

Dynamic TestEnums_obj::__CreateEmpty() { return new TestEnums_obj; }

hx::ObjectPtr< TestEnums_obj > TestEnums_obj::__new()
{
	hx::ObjectPtr< TestEnums_obj > _hx_result = new TestEnums_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestEnums_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestEnums_obj > _hx_result = new TestEnums_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestEnums_obj::testIssue20151201(){
            	HX_STACK_FRAME("thx.TestEnums","testIssue20151201",0xf9aa1913,"thx.TestEnums.testIssue20151201","thx/TestEnums.hx",12,0x587065e9)
            	HX_STACK_THIS(this)
HXLINE(  13)		HX_VARI( ::hx::EnumBase,e) = ::thx::Enum20151201_obj::Test( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("newId",5b,e8,30,99),HX_("2",32,00,00,00))
            			->setFixed(1,HX_("oldId",62,90,29,31),HX_("1",31,00,00,00))));
HXDLIN(  13)		HX_VARI( ::String,s) = ::thx::Enums_obj::string(e);
HXLINE(  16)		::utest::Assert_obj::stringContains(HX_("oldId : \"1\"",4f,02,d7,39),s,null(),hx::SourceInfo(HX_("TestEnums.hx",3e,be,ce,80),16,HX_("thx.TestEnums",16,8c,fd,21),HX_("testIssue20151201",6b,e3,44,b0)));
HXLINE(  17)		::utest::Assert_obj::stringContains(HX_("newId : \"2\"",e7,1b,da,1e),s,null(),hx::SourceInfo(HX_("TestEnums.hx",3e,be,ce,80),17,HX_("thx.TestEnums",16,8c,fd,21),HX_("testIssue20151201",6b,e3,44,b0)));
HXLINE(  18)		::utest::Assert_obj::stringContains(HX_(", ",74,26,00,00),s,null(),hx::SourceInfo(HX_("TestEnums.hx",3e,be,ce,80),18,HX_("thx.TestEnums",16,8c,fd,21),HX_("testIssue20151201",6b,e3,44,b0)));
HXLINE(  19)		Bool _hx_tmp = ::StringTools_obj::startsWith(s,HX_("Test({",45,98,ce,09));
HXDLIN(  19)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestEnums.hx",3e,be,ce,80),19,HX_("thx.TestEnums",16,8c,fd,21),HX_("testIssue20151201",6b,e3,44,b0)));
HXLINE(  20)		Bool _hx_tmp1 = ::StringTools_obj::endsWith(s,HX_("})",0c,6d,00,00));
HXDLIN(  20)		::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestEnums.hx",3e,be,ce,80),20,HX_("thx.TestEnums",16,8c,fd,21),HX_("testIssue20151201",6b,e3,44,b0)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestEnums_obj,testIssue20151201,(void))

void TestEnums_obj::testCompare(){
            	HX_STACK_FRAME("thx.TestEnums","testCompare",0xfd420e1b,"thx.TestEnums.testCompare","thx/TestEnums.hx",24,0x587065e9)
            	HX_STACK_THIS(this)
HXLINE(  25)		::hx::EnumBase _hx_tmp = ::thx::_TestEnums::Sample_obj::B((int)1);
HXDLIN(  25)		::hx::EnumBase _hx_tmp1 = ::thx::_TestEnums::Sample_obj::B((int)2);
HXDLIN(  25)		::cpp::VirtualArray _hx_tmp2 = ::cpp::VirtualArray_obj::__new(3)->init(0,::thx::_TestEnums::Sample_obj::A_dyn())->init(1,_hx_tmp)->init(2,_hx_tmp1);
HXLINE(  27)		::hx::EnumBase _hx_tmp3 = ::thx::_TestEnums::Sample_obj::B((int)2);
HXDLIN(  27)		::hx::EnumBase _hx_tmp4 = ::thx::_TestEnums::Sample_obj::B((int)1);
HXLINE(  26)		::Array< ::Dynamic> _hx_tmp5 = ::thx::Arrays_obj::order(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp3)->init(1,::thx::_TestEnums::Sample_obj::A_dyn())->init(2,_hx_tmp4),::thx::Enums_obj::compare_dyn());
HXLINE(  24)		::utest::Assert_obj::same(_hx_tmp2,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestEnums.hx",3e,be,ce,80),24,HX_("thx.TestEnums",16,8c,fd,21),HX_("testCompare",73,06,32,40)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestEnums_obj,testCompare,(void))

void TestEnums_obj::testString(){
            	HX_STACK_FRAME("thx.TestEnums","testString",0x7da5141b,"thx.TestEnums.testString","thx/TestEnums.hx",32,0x587065e9)
            	HX_STACK_THIS(this)
HXLINE(  33)		::String _hx_tmp = ::thx::Enums_obj::string(::thx::_TestEnums::Sample_obj::A_dyn());
HXDLIN(  33)		::utest::Assert_obj::equals(HX_("A",41,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestEnums.hx",3e,be,ce,80),33,HX_("thx.TestEnums",16,8c,fd,21),HX_("testString",c3,6e,24,2a)));
HXLINE(  34)		::hx::EnumBase _hx_tmp1 = ::thx::_TestEnums::Sample_obj::B((int)1);
HXDLIN(  34)		::String _hx_tmp2 = ::thx::Enums_obj::string(_hx_tmp1);
HXDLIN(  34)		::utest::Assert_obj::equals(HX_("B(1)",fe,99,be,2b),_hx_tmp2,null(),hx::SourceInfo(HX_("TestEnums.hx",3e,be,ce,80),34,HX_("thx.TestEnums",16,8c,fd,21),HX_("testString",c3,6e,24,2a)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestEnums_obj,testString,(void))


TestEnums_obj::TestEnums_obj()
{
}

hx::Val TestEnums_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"testString") ) { return hx::Val( testString_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testCompare") ) { return hx::Val( testCompare_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testIssue20151201") ) { return hx::Val( testIssue20151201_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestEnums_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestEnums_obj_sStaticStorageInfo = 0;
#endif

static ::String TestEnums_obj_sMemberFields[] = {
	HX_HCSTRING("testIssue20151201","\x6b","\xe3","\x44","\xb0"),
	HX_HCSTRING("testCompare","\x73","\x06","\x32","\x40"),
	HX_HCSTRING("testString","\xc3","\x6e","\x24","\x2a"),
	::String(null()) };

static void TestEnums_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestEnums_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestEnums_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestEnums_obj::__mClass,"__mClass");
};

#endif

hx::Class TestEnums_obj::__mClass;

void TestEnums_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestEnums","\x16","\x8c","\xfd","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestEnums_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestEnums_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestEnums_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestEnums_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestEnums_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestEnums_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
