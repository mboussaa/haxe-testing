// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds__HashMap_HashMapData
#include <haxe/ds/_HashMap/HashMapData.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_TestHashSet
#include <thx/TestHashSet.h>
#endif
#ifndef INCLUDED_thx_TestItem
#include <thx/TestItem.h>
#endif
#ifndef INCLUDED_thx__HashSet_HashSet_Impl_
#include <thx/_HashSet/HashSet_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestHashSet_obj::__construct(){
            	HX_STACK_FRAME("thx.TestHashSet","new",0xa10e642a,"thx.TestHashSet.new","thx/TestHashSet.hx",8,0xd1666e47)
            	HX_STACK_THIS(this)
            	}

Dynamic TestHashSet_obj::__CreateEmpty() { return new TestHashSet_obj; }

hx::ObjectPtr< TestHashSet_obj > TestHashSet_obj::__new()
{
	hx::ObjectPtr< TestHashSet_obj > _hx_result = new TestHashSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestHashSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestHashSet_obj > _hx_result = new TestHashSet_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestHashSet_obj::testCreate(){
            	HX_STACK_FRAME("thx.TestHashSet","testCreate",0xf8df8664,"thx.TestHashSet.testCreate","thx/TestHashSet.hx",10,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  11)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(5)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)3))->init(2, ::thx::TestItem_obj::__new((int)2))->init(3, ::thx::TestItem_obj::__new((int)3))->init(4, ::thx::TestItem_obj::__new((int)1)));
HXLINE(  12)		Int _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  12)		::utest::Assert_obj::same((int)3,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),12,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCreate",ee,ac,03,95)));
HXLINE(  13)		Int _hx_tmp1 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN(  13)		Bool _hx_tmp2 = s->values->exists(_hx_tmp1);
HXDLIN(  13)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),13,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCreate",ee,ac,03,95)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testCreate,(void))

void TestHashSet_obj::testEmpty(){
            	HX_STACK_FRAME("thx.TestHashSet","testEmpty",0xc4370025,"thx.TestHashSet.testEmpty","thx/TestHashSet.hx",16,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  17)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(1)->init(0, ::thx::TestItem_obj::__new((int)1)));
HXLINE(  18)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::empty(s1);
HXLINE(  19)		Int _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN(  19)		::utest::Assert_obj::same((int)1,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),19,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testEmpty",db,78,dc,38)));
HXLINE(  20)		Int _hx_tmp1 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN(  20)		::utest::Assert_obj::same((int)0,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),20,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testEmpty",db,78,dc,38)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testEmpty,(void))

void TestHashSet_obj::testExists(){
            	HX_STACK_FRAME("thx.TestHashSet","testExists",0x3cb03d44,"thx.TestHashSet.testExists","thx/TestHashSet.hx",23,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  24)		HX_VARI(  ::thx::TestItem,i1) =  ::thx::TestItem_obj::__new((int)1);
HXLINE(  25)		HX_VARI(  ::thx::TestItem,i2a) =  ::thx::TestItem_obj::__new((int)2);
HXLINE(  26)		HX_VARI(  ::thx::TestItem,i2b) =  ::thx::TestItem_obj::__new((int)2);
HXLINE(  27)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(3)->init(0,i1)->init(1,i2a)->init(2,i2b));
HXLINE(  28)		Int _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  28)		::utest::Assert_obj::same((int)2,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),28,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
HXLINE(  29)		Int _hx_tmp1 = i1->hashCode();
HXDLIN(  29)		Bool _hx_tmp2 = s->values->exists(_hx_tmp1);
HXDLIN(  29)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),29,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
HXLINE(  30)		Int _hx_tmp3 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN(  30)		Bool _hx_tmp4 = s->values->exists(_hx_tmp3);
HXDLIN(  30)		::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),30,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
HXLINE(  31)		Int _hx_tmp5 = i2a->hashCode();
HXDLIN(  31)		Bool _hx_tmp6 = s->values->exists(_hx_tmp5);
HXDLIN(  31)		::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),31,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
HXLINE(  32)		Int _hx_tmp7 = i2b->hashCode();
HXDLIN(  32)		Bool _hx_tmp8 = s->values->exists(_hx_tmp7);
HXDLIN(  32)		::utest::Assert_obj::isTrue(_hx_tmp8,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),32,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
HXLINE(  33)		Int _hx_tmp9 =  ::thx::TestItem_obj::__new((int)2)->hashCode();
HXDLIN(  33)		Bool _hx_tmp10 = s->values->exists(_hx_tmp9);
HXDLIN(  33)		::utest::Assert_obj::isTrue(_hx_tmp10,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),33,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testExists,(void))

void TestHashSet_obj::testAdd(){
            	HX_STACK_FRAME("thx.TestHashSet","testAdd",0x79a9a1b9,"thx.TestHashSet.testAdd","thx/TestHashSet.hx",36,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  37)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(null());
HXLINE(  38)		Bool _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)1));
HXDLIN(  38)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),38,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
HXLINE(  39)		Bool _hx_tmp1 = ::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)2));
HXDLIN(  39)		::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),39,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
HXLINE(  40)		Bool _hx_tmp2 = ::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)2));
HXDLIN(  40)		::utest::Assert_obj::isFalse(_hx_tmp2,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),40,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
HXLINE(  41)		Bool _hx_tmp3 = ::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)3));
HXDLIN(  41)		::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),41,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
HXLINE(  42)		Bool _hx_tmp4 = ::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)3));
HXDLIN(  42)		::utest::Assert_obj::isFalse(_hx_tmp4,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),42,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
HXLINE(  43)		Int _hx_tmp5 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  43)		::utest::Assert_obj::same((int)3,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),43,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testAdd,(void))

void TestHashSet_obj::testPush(){
            	HX_STACK_FRAME("thx.TestHashSet","testPush",0x04bb0742,"thx.TestHashSet.testPush","thx/TestHashSet.hx",46,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  47)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(null());
HXLINE(  48)		::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)1));
HXLINE(  49)		::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)2));
HXLINE(  50)		::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)2));
HXLINE(  51)		::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)3));
HXLINE(  52)		::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)3));
HXLINE(  53)		Int _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  53)		::utest::Assert_obj::same((int)3,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),53,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testPush",4c,97,93,4d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testPush,(void))

void TestHashSet_obj::testRemove(){
            	HX_STACK_FRAME("thx.TestHashSet","testRemove",0x8158bbac,"thx.TestHashSet.testRemove","thx/TestHashSet.hx",56,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  57)		HX_VARI(  ::thx::TestItem,i1) =  ::thx::TestItem_obj::__new((int)1);
HXLINE(  59)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(2)->init(0,i1)->init(1, ::thx::TestItem_obj::__new((int)2)));
HXLINE(  60)		{
HXLINE(  60)			Int _hx_tmp = i1->hashCode();
HXDLIN(  60)			s->values->remove(_hx_tmp);
HXDLIN(  60)			Int _hx_tmp1 = i1->hashCode();
HXDLIN(  60)			s->keys->remove(_hx_tmp1);
            		}
HXLINE(  61)		Int _hx_tmp2 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  61)		::utest::Assert_obj::same((int)1,_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),61,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testRemove",36,e2,7c,1d)));
HXLINE(  62)		{
HXLINE(  62)			HX_VARI(  ::thx::TestItem,v) =  ::thx::TestItem_obj::__new((int)2);
HXDLIN(  62)			Int _hx_tmp3 = v->hashCode();
HXDLIN(  62)			s->values->remove(_hx_tmp3);
HXDLIN(  62)			Int _hx_tmp4 = v->hashCode();
HXDLIN(  62)			s->keys->remove(_hx_tmp4);
            		}
HXLINE(  63)		Int _hx_tmp5 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  63)		::utest::Assert_obj::same((int)0,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),63,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testRemove",36,e2,7c,1d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testRemove,(void))

void TestHashSet_obj::testCopy(){
            	HX_STACK_FRAME("thx.TestHashSet","testCopy",0xfc1eb11d,"thx.TestHashSet.testCopy","thx/TestHashSet.hx",66,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  67)		HX_VARI(  ::thx::TestItem,i1) =  ::thx::TestItem_obj::__new((int)1);
HXLINE(  69)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(2)->init(0,i1)->init(1, ::thx::TestItem_obj::__new((int)2)));
HXLINE(  70)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::copy(s1);
HXLINE(  71)		Int _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN(  71)		::utest::Assert_obj::same((int)2,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),71,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  72)		Int _hx_tmp1 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN(  72)		::utest::Assert_obj::same((int)2,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),72,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  73)		Int _hx_tmp2 = i1->hashCode();
HXDLIN(  73)		Bool _hx_tmp3 = s1->values->exists(_hx_tmp2);
HXDLIN(  73)		::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),73,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  74)		Int _hx_tmp4 =  ::thx::TestItem_obj::__new((int)2)->hashCode();
HXDLIN(  74)		Bool _hx_tmp5 = s1->values->exists(_hx_tmp4);
HXDLIN(  74)		::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),74,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  75)		Int _hx_tmp6 = i1->hashCode();
HXDLIN(  75)		Bool _hx_tmp7 = s2->values->exists(_hx_tmp6);
HXDLIN(  75)		::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),75,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  76)		Int _hx_tmp8 =  ::thx::TestItem_obj::__new((int)2)->hashCode();
HXDLIN(  76)		Bool _hx_tmp9 = s2->values->exists(_hx_tmp8);
HXDLIN(  76)		::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),76,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  77)		::thx::_HashSet::HashSet_Impl__obj::add(s1, ::thx::TestItem_obj::__new((int)3));
HXLINE(  78)		Int _hx_tmp10 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN(  78)		::utest::Assert_obj::same((int)3,_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),78,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  79)		Int _hx_tmp11 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN(  79)		::utest::Assert_obj::same((int)2,_hx_tmp11,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),79,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testCopy,(void))

void TestHashSet_obj::testUnion(){
            	HX_STACK_FRAME("thx.TestHashSet","testUnion",0xfb442aa7,"thx.TestHashSet.testUnion","thx/TestHashSet.hx",82,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  83)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2))->init(2, ::thx::TestItem_obj::__new((int)3)));
HXLINE(  84)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(4)->init(0, ::thx::TestItem_obj::__new((int)2))->init(1, ::thx::TestItem_obj::__new((int)3))->init(2, ::thx::TestItem_obj::__new((int)4))->init(3, ::thx::TestItem_obj::__new((int)5)));
HXLINE(  85)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,newset) = ::thx::_HashSet::HashSet_Impl__obj::copy(s1);
HXDLIN(  85)		{
HXLINE(  85)			HX_VARI(  ::Dynamic,tmp) = ::thx::_HashSet::HashSet_Impl__obj::iterator(s2);
HXDLIN(  85)			while(true){
HXLINE(  85)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  85)				if (_hx_tmp) {
HXLINE(  85)					goto _hx_goto_0;
            				}
HXDLIN(  85)				HX_VARI(  ::thx::TestItem,k) = ( ( ::thx::TestItem)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN(  85)				Int _hx_tmp1 = k->hashCode();
HXDLIN(  85)				newset->keys->set(_hx_tmp1,k);
HXDLIN(  85)				Int _hx_tmp2 = k->hashCode();
HXDLIN(  85)				newset->values->set(_hx_tmp2,true);
            			}
            			_hx_goto_0:;
            		}
HXLINE(  86)		Int _hx_tmp3 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN(  86)		::utest::Assert_obj::same((int)3,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),86,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE(  87)		Int _hx_tmp4 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN(  87)		::utest::Assert_obj::same((int)4,_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),87,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE(  88)		Int _hx_tmp5 = ::thx::_HashSet::HashSet_Impl__obj::get_length(newset);
HXDLIN(  88)		::utest::Assert_obj::same((int)5,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),88,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE(  89)		Int _hx_tmp6 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN(  89)		Bool _hx_tmp7 = newset->values->exists(_hx_tmp6);
HXDLIN(  89)		::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),89,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE(  90)		Int _hx_tmp8 =  ::thx::TestItem_obj::__new((int)2)->hashCode();
HXDLIN(  90)		Bool _hx_tmp9 = newset->values->exists(_hx_tmp8);
HXDLIN(  90)		::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),90,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE(  91)		Int _hx_tmp10 =  ::thx::TestItem_obj::__new((int)3)->hashCode();
HXDLIN(  91)		Bool _hx_tmp11 = newset->values->exists(_hx_tmp10);
HXDLIN(  91)		::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),91,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE(  92)		Int _hx_tmp12 =  ::thx::TestItem_obj::__new((int)4)->hashCode();
HXDLIN(  92)		Bool _hx_tmp13 = newset->values->exists(_hx_tmp12);
HXDLIN(  92)		::utest::Assert_obj::isTrue(_hx_tmp13,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),92,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE(  93)		Int _hx_tmp14 =  ::thx::TestItem_obj::__new((int)5)->hashCode();
HXDLIN(  93)		Bool _hx_tmp15 = newset->values->exists(_hx_tmp14);
HXDLIN(  93)		::utest::Assert_obj::isTrue(_hx_tmp15,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),93,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testUnion,(void))

void TestHashSet_obj::testIntersection(){
            	HX_STACK_FRAME("thx.TestHashSet","testIntersection",0x7f4b3fb1,"thx.TestHashSet.testIntersection","thx/TestHashSet.hx",96,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  97)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2))->init(2, ::thx::TestItem_obj::__new((int)3)));
HXLINE(  98)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(4)->init(0, ::thx::TestItem_obj::__new((int)2))->init(1, ::thx::TestItem_obj::__new((int)3))->init(2, ::thx::TestItem_obj::__new((int)4))->init(3, ::thx::TestItem_obj::__new((int)5)));
HXLINE(  99)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,result) = ::thx::_HashSet::HashSet_Impl__obj::empty(s1);
HXDLIN(  99)		{
HXLINE(  99)			HX_VARI(  ::Dynamic,tmp) = ::thx::_HashSet::HashSet_Impl__obj::iterator(s1);
HXDLIN(  99)			while(true){
HXLINE(  99)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  99)				if (_hx_tmp) {
HXLINE(  99)					goto _hx_goto_1;
            				}
HXDLIN(  99)				HX_VARI(  ::thx::TestItem,item) = ( ( ::thx::TestItem)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN(  99)				Int _hx_tmp1 = item->hashCode();
HXDLIN(  99)				Bool _hx_tmp2 = s2->values->exists(_hx_tmp1);
HXDLIN(  99)				if (_hx_tmp2) {
HXLINE(  99)					Int _hx_tmp3 = item->hashCode();
HXDLIN(  99)					result->keys->set(_hx_tmp3,item);
HXDLIN(  99)					Int _hx_tmp4 = item->hashCode();
HXDLIN(  99)					result->values->set(_hx_tmp4,true);
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE( 100)		Int _hx_tmp5 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN( 100)		::utest::Assert_obj::same((int)3,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),100,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testIntersection",bb,e9,a1,68)));
HXLINE( 101)		Int _hx_tmp6 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN( 101)		::utest::Assert_obj::same((int)4,_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),101,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testIntersection",bb,e9,a1,68)));
HXLINE( 102)		Int _hx_tmp7 = ::thx::_HashSet::HashSet_Impl__obj::get_length(result);
HXDLIN( 102)		::utest::Assert_obj::same((int)2,_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),102,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testIntersection",bb,e9,a1,68)));
HXLINE( 103)		Int _hx_tmp8 =  ::thx::TestItem_obj::__new((int)2)->hashCode();
HXDLIN( 103)		Bool _hx_tmp9 = result->values->exists(_hx_tmp8);
HXDLIN( 103)		::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),103,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testIntersection",bb,e9,a1,68)));
HXLINE( 104)		Int _hx_tmp10 =  ::thx::TestItem_obj::__new((int)3)->hashCode();
HXDLIN( 104)		Bool _hx_tmp11 = result->values->exists(_hx_tmp10);
HXDLIN( 104)		::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),104,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testIntersection",bb,e9,a1,68)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testIntersection,(void))

void TestHashSet_obj::testDifference(){
            	HX_STACK_FRAME("thx.TestHashSet","testDifference",0xb9098f65,"thx.TestHashSet.testDifference","thx/TestHashSet.hx",107,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 108)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2))->init(2, ::thx::TestItem_obj::__new((int)3)));
HXLINE( 109)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(4)->init(0, ::thx::TestItem_obj::__new((int)2))->init(1, ::thx::TestItem_obj::__new((int)3))->init(2, ::thx::TestItem_obj::__new((int)4))->init(3, ::thx::TestItem_obj::__new((int)5)));
HXLINE( 110)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,result) = ::thx::_HashSet::HashSet_Impl__obj::copy(s1);
HXDLIN( 110)		{
HXLINE( 110)			HX_VARI(  ::Dynamic,tmp) = ::thx::_HashSet::HashSet_Impl__obj::iterator(s2);
HXDLIN( 110)			while(true){
HXLINE( 110)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 110)				if (_hx_tmp) {
HXLINE( 110)					goto _hx_goto_2;
            				}
HXDLIN( 110)				HX_VARI(  ::thx::TestItem,item) = ( ( ::thx::TestItem)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 110)				Int _hx_tmp1 = item->hashCode();
HXDLIN( 110)				result->values->remove(_hx_tmp1);
HXDLIN( 110)				Int _hx_tmp2 = item->hashCode();
HXDLIN( 110)				result->keys->remove(_hx_tmp2);
            			}
            			_hx_goto_2:;
            		}
HXLINE( 111)		HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,result1,"result") = ::thx::_HashSet::HashSet_Impl__obj::copy(s2);
HXDLIN( 111)		{
HXLINE( 111)			HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(s1);
HXDLIN( 111)			while(true){
HXLINE( 111)				Bool _hx_tmp3 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 111)				if (_hx_tmp3) {
HXLINE( 111)					goto _hx_goto_3;
            				}
HXDLIN( 111)				HX_VARI_NAME(  ::thx::TestItem,item1,"item") = ( ( ::thx::TestItem)( ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 111)				Int _hx_tmp4 = item1->hashCode();
HXDLIN( 111)				result1->values->remove(_hx_tmp4);
HXDLIN( 111)				Int _hx_tmp5 = item1->hashCode();
HXDLIN( 111)				result1->keys->remove(_hx_tmp5);
            			}
            			_hx_goto_3:;
            		}
HXLINE( 112)		Int _hx_tmp6 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN( 112)		::utest::Assert_obj::same((int)3,_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),112,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 113)		Int _hx_tmp7 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN( 113)		::utest::Assert_obj::same((int)4,_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),113,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 114)		Int _hx_tmp8 = ::thx::_HashSet::HashSet_Impl__obj::get_length(result);
HXDLIN( 114)		::utest::Assert_obj::same((int)1,_hx_tmp8,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),114,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 115)		Int _hx_tmp9 = ::thx::_HashSet::HashSet_Impl__obj::get_length(result1);
HXDLIN( 115)		::utest::Assert_obj::same((int)2,_hx_tmp9,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),115,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 116)		Int _hx_tmp10 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN( 116)		Bool _hx_tmp11 = result->values->exists(_hx_tmp10);
HXDLIN( 116)		::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),116,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 117)		Int _hx_tmp12 =  ::thx::TestItem_obj::__new((int)4)->hashCode();
HXDLIN( 117)		Bool _hx_tmp13 = result1->values->exists(_hx_tmp12);
HXDLIN( 117)		::utest::Assert_obj::isTrue(_hx_tmp13,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),117,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 118)		Int _hx_tmp14 =  ::thx::TestItem_obj::__new((int)5)->hashCode();
HXDLIN( 118)		Bool _hx_tmp15 = result1->values->exists(_hx_tmp14);
HXDLIN( 118)		::utest::Assert_obj::isTrue(_hx_tmp15,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),118,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testDifference,(void))

void TestHashSet_obj::testSymmetricDifference(){
            	HX_STACK_FRAME("thx.TestHashSet","testSymmetricDifference",0x74720eec,"thx.TestHashSet.testSymmetricDifference","thx/TestHashSet.hx",121,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 122)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2))->init(2, ::thx::TestItem_obj::__new((int)3)));
HXLINE( 123)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(4)->init(0, ::thx::TestItem_obj::__new((int)2))->init(1, ::thx::TestItem_obj::__new((int)3))->init(2, ::thx::TestItem_obj::__new((int)4))->init(3, ::thx::TestItem_obj::__new((int)5)));
HXLINE( 124)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,self) = ::thx::_HashSet::HashSet_Impl__obj::copy(s1);
HXDLIN( 124)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,newset) = ::thx::_HashSet::HashSet_Impl__obj::copy(self);
HXDLIN( 124)		{
HXLINE( 124)			HX_VARI(  ::Dynamic,tmp) = ::thx::_HashSet::HashSet_Impl__obj::iterator(s2);
HXDLIN( 124)			while(true){
HXLINE( 124)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 124)				if (_hx_tmp) {
HXLINE( 124)					goto _hx_goto_4;
            				}
HXDLIN( 124)				HX_VARI(  ::thx::TestItem,k) = ( ( ::thx::TestItem)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 124)				Int _hx_tmp1 = k->hashCode();
HXDLIN( 124)				newset->keys->set(_hx_tmp1,k);
HXDLIN( 124)				Int _hx_tmp2 = k->hashCode();
HXDLIN( 124)				newset->values->set(_hx_tmp2,true);
            			}
            			_hx_goto_4:;
            		}
HXDLIN( 124)		HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,this1,"this") = newset;
HXDLIN( 124)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,result) = ::thx::_HashSet::HashSet_Impl__obj::empty(self);
HXDLIN( 124)		{
HXLINE( 124)			HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(self);
HXDLIN( 124)			while(true){
HXLINE( 124)				Bool _hx_tmp3 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 124)				if (_hx_tmp3) {
HXLINE( 124)					goto _hx_goto_5;
            				}
HXDLIN( 124)				HX_VARI(  ::thx::TestItem,item) = ( ( ::thx::TestItem)( ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 124)				Int _hx_tmp4 = item->hashCode();
HXDLIN( 124)				Bool _hx_tmp5 = s2->values->exists(_hx_tmp4);
HXDLIN( 124)				if (_hx_tmp5) {
HXLINE( 124)					Int _hx_tmp6 = item->hashCode();
HXDLIN( 124)					result->keys->set(_hx_tmp6,item);
HXDLIN( 124)					Int _hx_tmp7 = item->hashCode();
HXDLIN( 124)					result->values->set(_hx_tmp7,true);
            				}
            			}
            			_hx_goto_5:;
            		}
HXDLIN( 124)		HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,result1,"result") = ::thx::_HashSet::HashSet_Impl__obj::copy(this1);
HXDLIN( 124)		{
HXLINE( 124)			HX_VARI_NAME(  ::Dynamic,tmp2,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(result);
HXDLIN( 124)			while(true){
HXLINE( 124)				Bool _hx_tmp8 = !(( (Bool)( ::Dynamic(tmp2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 124)				if (_hx_tmp8) {
HXLINE( 124)					goto _hx_goto_6;
            				}
HXDLIN( 124)				HX_VARI_NAME(  ::thx::TestItem,item1,"item") = ( ( ::thx::TestItem)( ::Dynamic(tmp2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 124)				Int _hx_tmp9 = item1->hashCode();
HXDLIN( 124)				result1->values->remove(_hx_tmp9);
HXDLIN( 124)				Int _hx_tmp10 = item1->hashCode();
HXDLIN( 124)				result1->keys->remove(_hx_tmp10);
            			}
            			_hx_goto_6:;
            		}
HXLINE( 125)		HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,self1,"self") = ::thx::_HashSet::HashSet_Impl__obj::copy(s2);
HXDLIN( 125)		HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,newset1,"newset") = ::thx::_HashSet::HashSet_Impl__obj::copy(self1);
HXDLIN( 125)		{
HXLINE( 125)			HX_VARI_NAME(  ::Dynamic,tmp3,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(s1);
HXDLIN( 125)			while(true){
HXLINE( 125)				Bool _hx_tmp11 = !(( (Bool)( ::Dynamic(tmp3->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 125)				if (_hx_tmp11) {
HXLINE( 125)					goto _hx_goto_7;
            				}
HXDLIN( 125)				HX_VARI_NAME(  ::thx::TestItem,k1,"k") = ( ( ::thx::TestItem)( ::Dynamic(tmp3->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 125)				Int _hx_tmp12 = k1->hashCode();
HXDLIN( 125)				newset1->keys->set(_hx_tmp12,k1);
HXDLIN( 125)				Int _hx_tmp13 = k1->hashCode();
HXDLIN( 125)				newset1->values->set(_hx_tmp13,true);
            			}
            			_hx_goto_7:;
            		}
HXDLIN( 125)		HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,this2,"this") = newset1;
HXDLIN( 125)		HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,result2,"result") = ::thx::_HashSet::HashSet_Impl__obj::empty(self1);
HXDLIN( 125)		{
HXLINE( 125)			HX_VARI_NAME(  ::Dynamic,tmp4,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(self1);
HXDLIN( 125)			while(true){
HXLINE( 125)				Bool _hx_tmp14 = !(( (Bool)( ::Dynamic(tmp4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 125)				if (_hx_tmp14) {
HXLINE( 125)					goto _hx_goto_8;
            				}
HXDLIN( 125)				HX_VARI_NAME(  ::thx::TestItem,item2,"item") = ( ( ::thx::TestItem)( ::Dynamic(tmp4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 125)				Int _hx_tmp15 = item2->hashCode();
HXDLIN( 125)				Bool _hx_tmp16 = s1->values->exists(_hx_tmp15);
HXDLIN( 125)				if (_hx_tmp16) {
HXLINE( 125)					Int _hx_tmp17 = item2->hashCode();
HXDLIN( 125)					result2->keys->set(_hx_tmp17,item2);
HXDLIN( 125)					Int _hx_tmp18 = item2->hashCode();
HXDLIN( 125)					result2->values->set(_hx_tmp18,true);
            				}
            			}
            			_hx_goto_8:;
            		}
HXDLIN( 125)		HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,result3,"result") = ::thx::_HashSet::HashSet_Impl__obj::copy(this2);
HXDLIN( 125)		{
HXLINE( 125)			HX_VARI_NAME(  ::Dynamic,tmp5,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(result2);
HXDLIN( 125)			while(true){
HXLINE( 125)				Bool _hx_tmp19 = !(( (Bool)( ::Dynamic(tmp5->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 125)				if (_hx_tmp19) {
HXLINE( 125)					goto _hx_goto_9;
            				}
HXDLIN( 125)				HX_VARI_NAME(  ::thx::TestItem,item3,"item") = ( ( ::thx::TestItem)( ::Dynamic(tmp5->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 125)				Int _hx_tmp20 = item3->hashCode();
HXDLIN( 125)				result3->values->remove(_hx_tmp20);
HXDLIN( 125)				Int _hx_tmp21 = item3->hashCode();
HXDLIN( 125)				result3->keys->remove(_hx_tmp21);
            			}
            			_hx_goto_9:;
            		}
HXLINE( 126)		Int _hx_tmp22 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN( 126)		::utest::Assert_obj::same((int)3,_hx_tmp22,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),126,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 127)		Int _hx_tmp23 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN( 127)		::utest::Assert_obj::same((int)4,_hx_tmp23,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),127,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 128)		Int _hx_tmp24 = ::thx::_HashSet::HashSet_Impl__obj::get_length(result1);
HXDLIN( 128)		::utest::Assert_obj::same((int)3,_hx_tmp24,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),128,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 129)		Int _hx_tmp25 = ::thx::_HashSet::HashSet_Impl__obj::get_length(result3);
HXDLIN( 129)		::utest::Assert_obj::same((int)3,_hx_tmp25,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),129,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 130)		Int _hx_tmp26 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN( 130)		Bool _hx_tmp27 = result1->values->exists(_hx_tmp26);
HXDLIN( 130)		::utest::Assert_obj::isTrue(_hx_tmp27,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),130,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 131)		Int _hx_tmp28 =  ::thx::TestItem_obj::__new((int)4)->hashCode();
HXDLIN( 131)		Bool _hx_tmp29 = result1->values->exists(_hx_tmp28);
HXDLIN( 131)		::utest::Assert_obj::isTrue(_hx_tmp29,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),131,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 132)		Int _hx_tmp30 =  ::thx::TestItem_obj::__new((int)5)->hashCode();
HXDLIN( 132)		Bool _hx_tmp31 = result1->values->exists(_hx_tmp30);
HXDLIN( 132)		::utest::Assert_obj::isTrue(_hx_tmp31,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),132,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 133)		Int _hx_tmp32 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN( 133)		Bool _hx_tmp33 = result3->values->exists(_hx_tmp32);
HXDLIN( 133)		::utest::Assert_obj::isTrue(_hx_tmp33,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),133,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 134)		Int _hx_tmp34 =  ::thx::TestItem_obj::__new((int)4)->hashCode();
HXDLIN( 134)		Bool _hx_tmp35 = result3->values->exists(_hx_tmp34);
HXDLIN( 134)		::utest::Assert_obj::isTrue(_hx_tmp35,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),134,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 135)		Int _hx_tmp36 =  ::thx::TestItem_obj::__new((int)5)->hashCode();
HXDLIN( 135)		Bool _hx_tmp37 = result3->values->exists(_hx_tmp36);
HXDLIN( 135)		::utest::Assert_obj::isTrue(_hx_tmp37,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),135,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testSymmetricDifference,(void))

void TestHashSet_obj::testToArray(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,_e) HXARGC(1)
            		 ::thx::TestItem _hx_run( ::Dynamic predicate){
            			HX_STACK_FRAME("thx.TestHashSet","testToArray",0xab5f15b6,"thx.TestHashSet.testToArray","thx/TestHashSet.hx",142,0xd1666e47)
            			HX_STACK_ARG(predicate,"predicate")
HXLINE( 142)			return ( ( ::thx::TestItem)(::thx::Arrays_obj::find(_e,predicate)) );
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		Bool _hx_run( ::thx::TestItem _){
            			HX_STACK_FRAME("thx.TestHashSet","testToArray",0xab5f15b6,"thx.TestHashSet.testToArray","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE(  86)			return (_->code == (int)1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2,::Array< ::Dynamic>,_e1) HXARGC(1)
            		 ::thx::TestItem _hx_run( ::Dynamic predicate1){
            			HX_STACK_FRAME("thx.TestHashSet","testToArray",0xab5f15b6,"thx.TestHashSet.testToArray","thx/TestHashSet.hx",143,0xd1666e47)
            			HX_STACK_ARG(predicate1,"predicate1")
HXLINE( 143)			return ( ( ::thx::TestItem)(::thx::Arrays_obj::find(_e1,predicate1)) );
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            		Bool _hx_run( ::thx::TestItem _1){
            			HX_STACK_FRAME("thx.TestHashSet","testToArray",0xab5f15b6,"thx.TestHashSet.testToArray","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_1,"_1")
HXLINE(  86)			return (_1->code == (int)2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestHashSet","testToArray",0xab5f15b6,"thx.TestHashSet.testToArray","thx/TestHashSet.hx",138,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 139)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(2)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2)));
HXLINE( 140)		HX_VARI( ::Array< ::Dynamic>,a) = ::thx::_HashSet::HashSet_Impl__obj::toArray(s);
HXLINE( 141)		::utest::Assert_obj::same((int)2,a->length,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),141,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testToArray",ec,a7,dc,ae)));
HXLINE( 142)		HX_VARI( ::Array< ::Dynamic>,_e) = a;
HXDLIN( 142)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_e));
HXDLIN( 142)		::utest::Assert_obj::same((int)1,( ( ::thx::TestItem)(_hx_tmp( ::Dynamic(new _hx_Closure_1()))) )->code,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),142,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testToArray",ec,a7,dc,ae)));
HXLINE( 143)		HX_VARI_NAME( ::Array< ::Dynamic>,_e1,"_e") = a;
HXDLIN( 143)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_2(_e1));
HXDLIN( 143)		::utest::Assert_obj::same((int)2,( ( ::thx::TestItem)(_hx_tmp1( ::Dynamic(new _hx_Closure_3()))) )->code,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),143,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testToArray",ec,a7,dc,ae)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testToArray,(void))

void TestHashSet_obj::testToString(){
            	HX_STACK_FRAME("thx.TestHashSet","testToString",0xa1139a14,"thx.TestHashSet.testToString","thx/TestHashSet.hx",146,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 147)		HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(2)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2)));
HXLINE( 148)		 ::EReg _hx_tmp =  ::EReg_obj::__new(HX_("TestItem \\d, TestItem \\d}",d1,5a,75,ed),HX_("",00,00,00,00));
HXDLIN( 148)		::String _hx_tmp1 = ::thx::_HashSet::HashSet_Impl__obj::toString(s);
HXDLIN( 148)		Bool _hx_tmp2 = _hx_tmp->match(_hx_tmp1);
HXDLIN( 148)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),148,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testToString",1e,f7,75,ab)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testToString,(void))


TestHashSet_obj::TestHashSet_obj()
{
}

hx::Val TestHashSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"testAdd") ) { return hx::Val( testAdd_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testPush") ) { return hx::Val( testPush_dyn()); }
		if (HX_FIELD_EQ(inName,"testCopy") ) { return hx::Val( testCopy_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testEmpty") ) { return hx::Val( testEmpty_dyn()); }
		if (HX_FIELD_EQ(inName,"testUnion") ) { return hx::Val( testUnion_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testCreate") ) { return hx::Val( testCreate_dyn()); }
		if (HX_FIELD_EQ(inName,"testExists") ) { return hx::Val( testExists_dyn()); }
		if (HX_FIELD_EQ(inName,"testRemove") ) { return hx::Val( testRemove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testToArray") ) { return hx::Val( testToArray_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testToString") ) { return hx::Val( testToString_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testDifference") ) { return hx::Val( testDifference_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testIntersection") ) { return hx::Val( testIntersection_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"testSymmetricDifference") ) { return hx::Val( testSymmetricDifference_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestHashSet_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestHashSet_obj_sStaticStorageInfo = 0;
#endif

static ::String TestHashSet_obj_sMemberFields[] = {
	HX_HCSTRING("testCreate","\xee","\xac","\x03","\x95"),
	HX_HCSTRING("testEmpty","\xdb","\x78","\xdc","\x38"),
	HX_HCSTRING("testExists","\xce","\x63","\xd4","\xd8"),
	HX_HCSTRING("testAdd","\xef","\x60","\xb8","\xbd"),
	HX_HCSTRING("testPush","\x4c","\x97","\x93","\x4d"),
	HX_HCSTRING("testRemove","\x36","\xe2","\x7c","\x1d"),
	HX_HCSTRING("testCopy","\x27","\x41","\xf7","\x44"),
	HX_HCSTRING("testUnion","\x5d","\xa3","\xe9","\x6f"),
	HX_HCSTRING("testIntersection","\xbb","\xe9","\xa1","\x68"),
	HX_HCSTRING("testDifference","\xef","\xc2","\x84","\xe6"),
	HX_HCSTRING("testSymmetricDifference","\x22","\x1a","\x9d","\xbd"),
	HX_HCSTRING("testToArray","\xec","\xa7","\xdc","\xae"),
	HX_HCSTRING("testToString","\x1e","\xf7","\x75","\xab"),
	::String(null()) };

static void TestHashSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestHashSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestHashSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestHashSet_obj::__mClass,"__mClass");
};

#endif

hx::Class TestHashSet_obj::__mClass;

void TestHashSet_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestHashSet","\x38","\xc7","\x72","\xe5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestHashSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestHashSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestHashSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestHashSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestHashSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestHashSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
