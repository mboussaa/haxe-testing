// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_IntIterator
#include <IntIterator.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_Assert
#include <thx/Assert.h>
#endif
#ifndef INCLUDED_thx_CollectBehavior
#include <thx/CollectBehavior.h>
#endif
#ifndef INCLUDED_thx_IAssertBehavior
#include <thx/IAssertBehavior.h>
#endif
#ifndef INCLUDED_thx_TestAssert
#include <thx/TestAssert.h>
#endif
#ifndef INCLUDED_thx__TestAssert_Sample
#include <thx/_TestAssert/Sample.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestAssert_obj::__construct(){
            	HX_STACK_FRAME("thx.TestAssert","new",0x2c990674,"thx.TestAssert.new","thx/TestAssert.hx",8,0xf0cbd6db)
            	HX_STACK_THIS(this)
            	}

Dynamic TestAssert_obj::__CreateEmpty() { return new TestAssert_obj; }

hx::ObjectPtr< TestAssert_obj > TestAssert_obj::__new()
{
	hx::ObjectPtr< TestAssert_obj > _hx_result = new TestAssert_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestAssert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestAssert_obj > _hx_result = new TestAssert_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestAssert_obj::setup(){
            	HX_STACK_FRAME("thx.TestAssert","setup",0x2abd9191,"thx.TestAssert.setup","thx/TestAssert.hx",12,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE(  13)		this->orig = ::thx::Assert_obj::behavior;
HXLINE(  14)		::thx::Assert_obj::behavior = (this->behavior =  ::thx::CollectBehavior_obj::__new());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,setup,(void))

void TestAssert_obj::teardown(){
            	HX_STACK_FRAME("thx.TestAssert","teardown",0x7fc7eb70,"thx.TestAssert.teardown","thx/TestAssert.hx",18,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE(  18)		::thx::Assert_obj::behavior = this->orig;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,teardown,(void))

void TestAssert_obj::testIsBool(){
            	HX_STACK_FRAME("thx.TestAssert","testIsBool",0xa9d50392,"thx.TestAssert.testIsBool","thx/TestAssert.hx",21,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE(  22)		::thx::Assert_obj::isTrue(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),22,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsBool",26,8f,76,77)));
HXLINE(  23)		::thx::Assert_obj::isTrue(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),23,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsBool",26,8f,76,77)));
HXLINE(  24)		::thx::Assert_obj::isFalse(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),24,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsBool",26,8f,76,77)));
HXLINE(  25)		::thx::Assert_obj::isFalse(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),25,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsBool",26,8f,76,77)));
HXLINE(  27)		this->expect((int)2,(int)2,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),27,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsBool",26,8f,76,77)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testIsBool,(void))

void TestAssert_obj::testIsNull(){
            	HX_STACK_FRAME("thx.TestAssert","testIsNull",0xb1c81def,"thx.TestAssert.testIsNull","thx/TestAssert.hx",30,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE(  31)		::thx::Assert_obj::isNull(null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),31,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  32)		::thx::Assert_obj::isNull((int)0,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),32,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  33)		::thx::Assert_obj::isNull(((Float)0.0),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),33,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  34)		::thx::Assert_obj::isNull(((Float)0.1),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),34,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  35)		::thx::Assert_obj::isNull((int)1,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),35,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  36)		::thx::Assert_obj::isNull(HX_("",00,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),36,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  37)		::thx::Assert_obj::isNull(HX_("a",61,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),37,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  38)		::thx::Assert_obj::isNull(::Math_obj::NaN,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),38,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  39)		::thx::Assert_obj::isNull(::Math_obj::POSITIVE_INFINITY,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),39,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  40)		::thx::Assert_obj::isNull(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),40,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  41)		::thx::Assert_obj::isNull(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),41,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
HXLINE(  42)		this->expect((int)1,(int)10,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),42,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIsNull",83,a9,69,7f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testIsNull,(void))

void TestAssert_obj::testNotNull(){
            	HX_STACK_FRAME("thx.TestAssert","testNotNull",0xdb49811c,"thx.TestAssert.testNotNull","thx/TestAssert.hx",45,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE(  46)		::thx::Assert_obj::notNull(null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),46,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  47)		::thx::Assert_obj::notNull((int)0,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),47,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  48)		::thx::Assert_obj::notNull(((Float)0.0),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),48,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  49)		::thx::Assert_obj::notNull(((Float)0.1),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),49,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  50)		::thx::Assert_obj::notNull((int)1,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),50,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  51)		::thx::Assert_obj::notNull(HX_("",00,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),51,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  52)		::thx::Assert_obj::notNull(HX_("a",61,00,00,00),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),52,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  53)		::thx::Assert_obj::notNull(::Math_obj::NaN,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),53,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  54)		::thx::Assert_obj::notNull(::Math_obj::POSITIVE_INFINITY,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),54,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  55)		::thx::Assert_obj::notNull(true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),55,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  56)		::thx::Assert_obj::notNull(false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),56,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
HXLINE(  57)		this->expect((int)10,(int)1,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),57,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNotNull",08,17,02,fb)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testNotNull,(void))

void TestAssert_obj::testRaisesSuccess(){
            	HX_STACK_FRAME("thx.TestAssert","testRaisesSuccess",0xf0d3afde,"thx.TestAssert.testRaisesSuccess","thx/TestAssert.hx",60,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE(  61)		HX_VARI( Int,counter) = (int)0;
HXDLIN(  61)		HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(5)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("catches",69,99,a5,e9),::cpp::VirtualArray_obj::__new(3)->init(0,hx::ClassOf< ::String >())->init(1,hx::ClassOf< ::Dynamic >())->init(2,null()))
            			->setFixed(1,HX_("exception",4f,10,9a,49),HX_("e",65,00,00,00))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("catches",69,99,a5,e9),::cpp::VirtualArray_obj::__new(3)->init(0,hx::ClassOf< ::Int >())->init(1,hx::ClassOf< ::Dynamic >())->init(2,null()))
            			->setFixed(1,HX_("exception",4f,10,9a,49),(int)1)))->init(2, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("catches",69,99,a5,e9),::cpp::VirtualArray_obj::__new(3)->init(0,hx::ClassOf< ::Float >())->init(1,hx::ClassOf< ::Dynamic >())->init(2,null()))
            			->setFixed(1,HX_("exception",4f,10,9a,49),((Float)0.1))))->init(3, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("catches",69,99,a5,e9),::cpp::VirtualArray_obj::__new(3)->init(0,hx::ClassOf< ::thx::TestAssert >())->init(1,hx::ClassOf< ::Dynamic >())->init(2,null()))
            			->setFixed(1,HX_("exception",4f,10,9a,49), ::thx::TestAssert_obj::__new())))->init(4, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("catches",69,99,a5,e9),::cpp::VirtualArray_obj::__new(3)->init(0,hx::ArrayBase::__mClass)->init(1,hx::ClassOf< ::Dynamic >())->init(2,null()))
            			->setFixed(1,HX_("exception",4f,10,9a,49),::cpp::VirtualArray_obj::__new(1)->init(0,(int)1))));
HXLINE(  69)		{
HXLINE(  69)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  69)			while((_g < tests->length)){
HXLINE(  69)				HX_VARI(  ::Dynamic,test) = tests->__get(_g);
HXDLIN(  69)				++_g;
HXLINE(  70)				{
HXLINE(  70)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(  70)					HX_VARI( ::cpp::VirtualArray,_g2) = ( (::cpp::VirtualArray)(test->__Field(HX_("catches",69,99,a5,e9),hx::paccDynamic)) );
HXDLIN(  70)					while((_g1 < _g2->get_length())){
            						HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,test) HXARGC(0)
            						void _hx_run(){
            							HX_STACK_FRAME("thx.TestAssert","testRaisesSuccess",0xf0d3afde,"thx.TestAssert.testRaisesSuccess","thx/TestAssert.hx",72,0xf0cbd6db)
HXLINE(  72)							HX_STACK_DO_THROW( ::Dynamic(test->__Field(HX_("exception",4f,10,9a,49),hx::paccDynamic)));
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  70)						HX_VARI(  ::Dynamic,catcher) = _g2->__get(_g1);
HXDLIN(  70)						++_g1;
HXLINE(  71)						++counter;
HXLINE(  72)						::thx::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(test)),catcher,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),72,HX_("thx.TestAssert",82,fc,17,e2),HX_("testRaisesSuccess",ca,7e,73,fe)));
            					}
            				}
            			}
            		}
HXLINE(  75)		this->expect(counter,(int)0,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),75,HX_("thx.TestAssert",82,fc,17,e2),HX_("testRaisesSuccess",ca,7e,73,fe)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testRaisesSuccess,(void))

void TestAssert_obj::testRaisesFailure(){
            	HX_STACK_FRAME("thx.TestAssert","testRaisesFailure",0x4f7ffa65,"thx.TestAssert.testRaisesFailure","thx/TestAssert.hx",78,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE(  79)		HX_VARI( Int,counter) = (int)0;
HXDLIN(  79)		HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(5)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("catches",69,99,a5,e9),::cpp::VirtualArray_obj::__new(3)->init(0,hx::ClassOf< ::Int >())->init(1,hx::ClassOf< ::Float >())->init(2,hx::ClassOf< ::thx::TestAssert >()))
            			->setFixed(1,HX_("exception",4f,10,9a,49),HX_("e",65,00,00,00))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("catches",69,99,a5,e9),::cpp::VirtualArray_obj::__new(2)->init(0,hx::ClassOf< ::String >())->init(1,hx::ClassOf< ::thx::TestAssert >()))
            			->setFixed(1,HX_("exception",4f,10,9a,49),(int)1)))->init(2, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("catches",69,99,a5,e9),::cpp::VirtualArray_obj::__new(3)->init(0,hx::ClassOf< ::String >())->init(1,hx::ClassOf< ::Int >())->init(2,hx::ClassOf< ::thx::TestAssert >()))
            			->setFixed(1,HX_("exception",4f,10,9a,49),((Float)0.1))))->init(3, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("catches",69,99,a5,e9),::cpp::VirtualArray_obj::__new(3)->init(0,hx::ClassOf< ::Int >())->init(1,hx::ClassOf< ::Float >())->init(2,hx::ClassOf< ::String >()))
            			->setFixed(1,HX_("exception",4f,10,9a,49), ::thx::TestAssert_obj::__new())))->init(4, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("catches",69,99,a5,e9),::cpp::VirtualArray_obj::__new(3)->init(0,hx::ClassOf< ::thx::TestAssert >())->init(1,hx::ClassOf< ::Int >())->init(2,hx::ClassOf< ::Float >()))
            			->setFixed(1,HX_("exception",4f,10,9a,49),::cpp::VirtualArray_obj::__new(1)->init(0,(int)1))));
HXLINE(  87)		{
HXLINE(  87)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  87)			while((_g < tests->length)){
HXLINE(  87)				HX_VARI(  ::Dynamic,test) = tests->__get(_g);
HXDLIN(  87)				++_g;
HXLINE(  88)				{
HXLINE(  88)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(  88)					HX_VARI( ::cpp::VirtualArray,_g2) = ( (::cpp::VirtualArray)(test->__Field(HX_("catches",69,99,a5,e9),hx::paccDynamic)) );
HXDLIN(  88)					while((_g1 < _g2->get_length())){
            						HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,test) HXARGC(0)
            						void _hx_run(){
            							HX_STACK_FRAME("thx.TestAssert","testRaisesFailure",0x4f7ffa65,"thx.TestAssert.testRaisesFailure","thx/TestAssert.hx",90,0xf0cbd6db)
HXLINE(  90)							HX_STACK_DO_THROW( ::Dynamic(test->__Field(HX_("exception",4f,10,9a,49),hx::paccDynamic)));
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  88)						HX_VARI(  ::Dynamic,catcher) = _g2->__get(_g1);
HXDLIN(  88)						++_g1;
HXLINE(  89)						++counter;
HXLINE(  90)						::thx::Assert_obj::raises( ::Dynamic(new _hx_Closure_0(test)),catcher,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),90,HX_("thx.TestAssert",82,fc,17,e2),HX_("testRaisesFailure",51,c9,1f,5d)));
            					}
            				}
            			}
            		}
HXLINE(  93)		this->expect((int)0,counter,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),93,HX_("thx.TestAssert",82,fc,17,e2),HX_("testRaisesFailure",51,c9,1f,5d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testRaisesFailure,(void))

void TestAssert_obj::testIs(){
            	HX_STACK_FRAME("thx.TestAssert","testIs",0xa0d30f48,"thx.TestAssert.testIs","thx/TestAssert.hx",96,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE(  97)		HX_VARI( ::cpp::VirtualArray,values) = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::thx::TestAssert_obj::__new())->init(4, ::Dynamic(hx::Anon_obj::Create(0)))->init(5,::cpp::VirtualArray_obj::__new(1)->init(0,(int)1));
HXLINE(  98)		HX_VARI( ::cpp::VirtualArray,types) = ::cpp::VirtualArray_obj::__new(6)->init(0,hx::ClassOf< ::String >())->init(1,hx::ClassOf< ::Int >())->init(2,hx::ClassOf< ::Float >())->init(3,hx::ClassOf< ::thx::TestAssert >())->init(4,hx::ClassOf< ::Dynamic >())->init(5,hx::ArrayBase::__mClass);
HXLINE(  99)		HX_VARI( Int,i) = (int)0;
HXLINE( 101)		{
HXLINE( 101)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 101)			while((_g < values->get_length())){
HXLINE( 101)				HX_VARI(  ::Dynamic,value) = values->__get(_g);
HXDLIN( 101)				++_g;
HXLINE( 102)				{
HXLINE( 102)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 102)					while((_g1 < types->get_length())){
HXLINE( 102)						HX_VARI(  ::Dynamic,type) = types->__get(_g1);
HXDLIN( 102)						++_g1;
HXLINE( 103)						++i;
HXLINE( 104)						::thx::Assert_obj::is(value,type,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),104,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIs",dc,40,3a,d5)));
            					}
            				}
            			}
            		}
HXLINE( 106)		this->expect((int)12,(i - (int)12),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),106,HX_("thx.TestAssert",82,fc,17,e2),HX_("testIs",dc,40,3a,d5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testIs,(void))

void TestAssert_obj::testSamePrimitive(){
            	HX_STACK_FRAME("thx.TestAssert","testSamePrimitive",0x0e9fb5c3,"thx.TestAssert.testSamePrimitive","thx/TestAssert.hx",109,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 110)		::thx::Assert_obj::same(null(),(int)1,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),110,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 111)		::thx::Assert_obj::same((int)1,(int)1,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),111,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 112)		::thx::Assert_obj::same((int)1,HX_("1",31,00,00,00),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),112,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 113)		::thx::Assert_obj::same(HX_("a",61,00,00,00),HX_("a",61,00,00,00),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),113,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 114)		::thx::Assert_obj::same(null(),HX_("",00,00,00,00),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),114,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 115)		::thx::Assert_obj::same( ::Date_obj::__new((int)2000,(int)0,(int)1,(int)0,(int)0,(int)0),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),115,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 116)		HX_VARI(  ::haxe::ds::IntMap,_g) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 116)		_g->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 116)		_g->set((int)2,HX_("b",62,00,00,00));
HXDLIN( 116)		HX_VARI(  ::haxe::ds::IntMap,_g1) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 116)		_g1->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 116)		_g1->set((int)2,HX_("b",62,00,00,00));
HXDLIN( 116)		::thx::Assert_obj::same(_g,_g1,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),116,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 117)		HX_VARI(  ::haxe::ds::StringMap,_g2) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 117)		_g2->set(HX_("a",61,00,00,00),(int)1);
HXDLIN( 117)		HX_VARI(  ::haxe::ds::StringMap,_g3) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 117)		_g3->set(HX_("a",61,00,00,00),(int)1);
HXDLIN( 117)		::thx::Assert_obj::same(_g2,_g3,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),117,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 118)		HX_VARI(  ::haxe::ds::StringMap,_g4) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN( 118)		_g4->set(HX_("a",61,00,00,00),(int)1);
HXDLIN( 118)		HX_VARI(  ::haxe::ds::IntMap,_g5) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 118)		_g5->set((int)1,(int)1);
HXDLIN( 118)		::thx::Assert_obj::same(_g4,_g5,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),118,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 119)		HX_VARI(  ::haxe::ds::IntMap,_g6) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 119)		_g6->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 119)		HX_VARI(  ::haxe::ds::IntMap,_g7) =  ::haxe::ds::IntMap_obj::__new();
HXDLIN( 119)		_g7->set((int)1,HX_("a",61,00,00,00));
HXDLIN( 119)		_g7->set((int)2,HX_("b",62,00,00,00));
HXDLIN( 119)		::thx::Assert_obj::same(_g6,_g7,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),119,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 120)		 ::Date _hx_tmp =  ::Date_obj::__new((int)2000,(int)0,(int)1,(int)0,(int)0,(int)0);
HXDLIN( 120)		::thx::Assert_obj::same(_hx_tmp, ::Date_obj::__new((int)2000,(int)0,(int)1,(int)0,(int)0,(int)0),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),120,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
HXLINE( 122)		this->expect((int)5,(int)6,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),122,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSamePrimitive",af,84,3f,1c)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSamePrimitive,(void))

void TestAssert_obj::testSameType(){
            	HX_STACK_FRAME("thx.TestAssert","testSameType",0x38c8db1e,"thx.TestAssert.testSameType","thx/TestAssert.hx",125,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 126)		::thx::Assert_obj::same(null(), ::Dynamic(hx::Anon_obj::Create(0)),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),126,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameType",b2,73,93,da)));
HXLINE( 127)		::thx::Assert_obj::same(null(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),127,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameType",b2,73,93,da)));
HXLINE( 128)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),128,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameType",b2,73,93,da)));
HXLINE( 129)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),(int)1,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),129,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameType",b2,73,93,da)));
HXLINE( 130)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),::cpp::VirtualArray_obj::__new(0),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),130,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameType",b2,73,93,da)));
HXLINE( 131)		::thx::Assert_obj::same(null(),::thx::_TestAssert::Sample_obj::None_dyn(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),131,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameType",b2,73,93,da)));
HXLINE( 132)		::thx::Assert_obj::same(::thx::_TestAssert::Sample_obj::None_dyn(),null(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),132,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameType",b2,73,93,da)));
HXLINE( 134)		this->expect((int)1,(int)6,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),134,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameType",b2,73,93,da)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameType,(void))

void TestAssert_obj::testSameArray(){
            	HX_STACK_FRAME("thx.TestAssert","testSameArray",0x81badcb5,"thx.TestAssert.testSameArray","thx/TestAssert.hx",137,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 138)		::thx::Assert_obj::same(::cpp::VirtualArray_obj::__new(0),::cpp::VirtualArray_obj::__new(0),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),138,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 139)		::thx::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)1),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("1",31,00,00,00)),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),139,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 140)		::thx::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),140,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 141)		::thx::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),141,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 142)		::thx::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),142,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 143)		::thx::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),143,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 144)		::thx::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(0)),false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),144,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 145)		::thx::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,::cpp::VirtualArray_obj::__new(0)),true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),145,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameArray",a1,c5,35,71)));
HXLINE( 147)		this->expect((int)4,(int)4,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),147,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameArray",a1,c5,35,71)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameArray,(void))

void TestAssert_obj::testSameObject(){
            	HX_STACK_FRAME("thx.TestAssert","testSameObject",0x5f154823,"thx.TestAssert.testSameObject","thx/TestAssert.hx",150,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 151)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)), ::Dynamic(hx::Anon_obj::Create(0)),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),151,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 152)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),HX_("1",31,00,00,00))),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),152,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 153)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),153,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 154)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),154,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 155)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00),HX_("c",63,00,00,00))), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),155,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 156)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),156,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 157)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(0)))),false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),157,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 158)		::thx::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("c",63,00,00,00),HX_("c",63,00,00,00))))), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)
            			->setFixed(1,HX_("b",62,00,00,00), ::Dynamic(hx::Anon_obj::Create(0)))),true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),158,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameObject",b7,2d,26,fb)));
HXLINE( 160)		this->expect((int)4,(int)4,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),160,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameObject",b7,2d,26,fb)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameObject,(void))

void TestAssert_obj::testSameInstance(){
            	HX_STACK_FRAME("thx.TestAssert","testSameInstance",0x1bc709f9,"thx.TestAssert.testSameInstance","thx/TestAssert.hx",165,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 166)		HX_VARI(  ::thx::TestAssert,c1) =  ::thx::TestAssert_obj::__new();
HXLINE( 167)		c1->value = HX_("a",61,00,00,00);
HXLINE( 168)		HX_VARI(  ::thx::TestAssert,c2) =  ::thx::TestAssert_obj::__new();
HXLINE( 169)		c2->value = HX_("a",61,00,00,00);
HXLINE( 170)		HX_VARI(  ::thx::TestAssert,c3) =  ::thx::TestAssert_obj::__new();
HXLINE( 172)		HX_VARI(  ::thx::TestAssert,r1) =  ::thx::TestAssert_obj::__new();
HXLINE( 173)		r1->sub = c1;
HXLINE( 174)		HX_VARI(  ::thx::TestAssert,r2) =  ::thx::TestAssert_obj::__new();
HXLINE( 175)		r2->sub = c2;
HXLINE( 176)		HX_VARI(  ::thx::TestAssert,r3) =  ::thx::TestAssert_obj::__new();
HXLINE( 177)		r3->sub = c3;
HXLINE( 180)		::thx::Assert_obj::same(c1,c1,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),180,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 181)		::thx::Assert_obj::same(c1,c2,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),181,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 182)		::thx::Assert_obj::same(c1,c3,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),182,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 184)		::thx::Assert_obj::same(r1,r2,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),184,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 185)		::thx::Assert_obj::same(r1,r3,false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),185,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 186)		::thx::Assert_obj::same(r1,r3,true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),186,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameInstance",8d,7c,0b,8a)));
HXLINE( 188)		this->expect((int)4,(int)2,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),188,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameInstance",8d,7c,0b,8a)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameInstance,(void))

void TestAssert_obj::testSameIterable(){
            	HX_STACK_FRAME("thx.TestAssert","testSameIterable",0x55728916,"thx.TestAssert.testSameIterable","thx/TestAssert.hx",191,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 192)		HX_VARI(  ::List,list1) =  ::List_obj::__new();
HXLINE( 193)		list1->add(HX_("a",61,00,00,00));
HXLINE( 194)		list1->add((int)1);
HXLINE( 195)		HX_VARI(  ::List,s1) =  ::List_obj::__new();
HXLINE( 196)		s1->add((int)2);
HXLINE( 197)		list1->add(s1);
HXLINE( 198)		HX_VARI(  ::List,list2) =  ::List_obj::__new();
HXLINE( 199)		list2->add(HX_("a",61,00,00,00));
HXLINE( 200)		list2->add((int)1);
HXLINE( 201)		list2->add(s1);
HXLINE( 202)		HX_VARI(  ::List,list3) =  ::List_obj::__new();
HXLINE( 203)		list3->add(HX_("a",61,00,00,00));
HXLINE( 204)		list3->add((int)1);
HXLINE( 205)		list3->add( ::List_obj::__new());
HXLINE( 207)		::thx::Assert_obj::same(list1,list2,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),207,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 208)		::thx::Assert_obj::same(list1,list3,false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),208,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 209)		::thx::Assert_obj::same(list1,list3,true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),209,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 211)		::thx::Assert_obj::same( ::IntIterator_obj::__new((int)0,(int)3), ::IntIterator_obj::__new((int)0,(int)3),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),211,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 212)		::thx::Assert_obj::same( ::IntIterator_obj::__new((int)0,(int)3), ::IntIterator_obj::__new((int)0,(int)4),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),212,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameIterable",aa,fb,b6,c3)));
HXLINE( 214)		this->expect((int)3,(int)2,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),214,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameIterable",aa,fb,b6,c3)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameIterable,(void))

void TestAssert_obj::testSameMap(){
            	HX_STACK_FRAME("thx.TestAssert","testSameMap",0x197d3ab8,"thx.TestAssert.testSameMap","thx/TestAssert.hx",217,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 218)		HX_VARI(  ::haxe::ds::StringMap,h1) =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 219)		h1->set(HX_("a",61,00,00,00),HX_("b",62,00,00,00));
HXLINE( 220)		h1->set(HX_("c",63,00,00,00),HX_("d",64,00,00,00));
HXLINE( 221)		HX_VARI(  ::haxe::ds::StringMap,h2) =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 222)		h2->set(HX_("a",61,00,00,00),HX_("b",62,00,00,00));
HXLINE( 223)		h2->set(HX_("c",63,00,00,00),HX_("d",64,00,00,00));
HXLINE( 224)		HX_VARI(  ::haxe::ds::StringMap,h3) =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 225)		HX_VARI(  ::haxe::ds::StringMap,h4) =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 226)		h4->set(HX_("c",63,00,00,00),HX_("d",64,00,00,00));
HXLINE( 228)		HX_VARI(  ::haxe::ds::IntMap,i1) =  ::haxe::ds::IntMap_obj::__new();
HXLINE( 229)		i1->set((int)2,HX_("b",62,00,00,00));
HXLINE( 230)		HX_VARI(  ::haxe::ds::IntMap,i2) =  ::haxe::ds::IntMap_obj::__new();
HXLINE( 231)		i2->set((int)2,HX_("b",62,00,00,00));
HXLINE( 233)		::thx::Assert_obj::same(h1,h2,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),233,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameMap",a4,d0,35,39)));
HXLINE( 234)		::thx::Assert_obj::same(h1,h3,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),234,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameMap",a4,d0,35,39)));
HXLINE( 235)		::thx::Assert_obj::same(h1,h4,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),235,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameMap",a4,d0,35,39)));
HXLINE( 236)		::thx::Assert_obj::same(i1,i2,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),236,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameMap",a4,d0,35,39)));
HXLINE( 238)		this->expect((int)2,(int)2,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),238,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameMap",a4,d0,35,39)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameMap,(void))

void TestAssert_obj::testSameEnums(){
            	HX_STACK_FRAME("thx.TestAssert","testSameEnums",0xccb2a56e,"thx.TestAssert.testSameEnums","thx/TestAssert.hx",241,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 243)		::thx::Assert_obj::same(::thx::_TestAssert::Sample_obj::None_dyn(),::thx::_TestAssert::Sample_obj::None_dyn(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),243,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 244)		::hx::EnumBase _hx_tmp = ::thx::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 244)		::hx::EnumBase _hx_tmp1 = ::thx::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 244)		::thx::Assert_obj::same(_hx_tmp,_hx_tmp1,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),244,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 245)		::hx::EnumBase _hx_tmp2 = ::thx::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 245)		::hx::EnumBase _hx_tmp3 = ::thx::_TestAssert::Sample_obj::Some(HX_("b",62,00,00,00));
HXDLIN( 245)		::thx::Assert_obj::same(_hx_tmp2,_hx_tmp3,true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),245,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 246)		::hx::EnumBase _hx_tmp4 = ::thx::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 246)		::hx::EnumBase _hx_tmp5 = ::thx::_TestAssert::Sample_obj::Some(HX_("b",62,00,00,00));
HXDLIN( 246)		::thx::Assert_obj::same(_hx_tmp4,_hx_tmp5,false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),246,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 247)		::hx::EnumBase _hx_tmp6 = ::thx::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 247)		::thx::Assert_obj::same(_hx_tmp6,::thx::_TestAssert::Sample_obj::None_dyn(),null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),247,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 248)		::hx::EnumBase _hx_tmp7 = ::thx::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 248)		::hx::EnumBase _hx_tmp8 = ::thx::_TestAssert::Sample_obj::Rec(_hx_tmp7);
HXDLIN( 248)		::hx::EnumBase _hx_tmp9 = ::thx::_TestAssert::Sample_obj::Rec(_hx_tmp8);
HXDLIN( 248)		::hx::EnumBase _hx_tmp10 = ::thx::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 248)		::hx::EnumBase _hx_tmp11 = ::thx::_TestAssert::Sample_obj::Rec(_hx_tmp10);
HXDLIN( 248)		::hx::EnumBase _hx_tmp12 = ::thx::_TestAssert::Sample_obj::Rec(_hx_tmp11);
HXDLIN( 248)		::thx::Assert_obj::same(_hx_tmp9,_hx_tmp12,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),248,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 249)		::hx::EnumBase _hx_tmp13 = ::thx::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 249)		::hx::EnumBase _hx_tmp14 = ::thx::_TestAssert::Sample_obj::Rec(_hx_tmp13);
HXDLIN( 249)		::hx::EnumBase _hx_tmp15 = ::thx::_TestAssert::Sample_obj::Rec(_hx_tmp14);
HXDLIN( 249)		::hx::EnumBase _hx_tmp16 = ::thx::_TestAssert::Sample_obj::Rec(::thx::_TestAssert::Sample_obj::None_dyn());
HXDLIN( 249)		::thx::Assert_obj::same(_hx_tmp15,_hx_tmp16,true,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),249,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 250)		::hx::EnumBase _hx_tmp17 = ::thx::_TestAssert::Sample_obj::Some(HX_("a",61,00,00,00));
HXDLIN( 250)		::hx::EnumBase _hx_tmp18 = ::thx::_TestAssert::Sample_obj::Rec(_hx_tmp17);
HXDLIN( 250)		::hx::EnumBase _hx_tmp19 = ::thx::_TestAssert::Sample_obj::Rec(_hx_tmp18);
HXDLIN( 250)		::hx::EnumBase _hx_tmp20 = ::thx::_TestAssert::Sample_obj::Rec(::thx::_TestAssert::Sample_obj::None_dyn());
HXDLIN( 250)		::hx::EnumBase _hx_tmp21 = ::thx::_TestAssert::Sample_obj::Rec(_hx_tmp20);
HXDLIN( 250)		::thx::Assert_obj::same(_hx_tmp19,_hx_tmp21,false,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),250,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameEnums",5a,8e,2d,bc)));
HXLINE( 252)		this->expect((int)4,(int)4,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),252,HX_("thx.TestAssert",82,fc,17,e2),HX_("testSameEnums",5a,8e,2d,bc)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testSameEnums,(void))

void TestAssert_obj::testEquals(){
            	HX_STACK_FRAME("thx.TestAssert","testEquals",0x0b45a89d,"thx.TestAssert.testEquals","thx/TestAssert.hx",255,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 256)		HX_VARI( ::cpp::VirtualArray,values) = ::cpp::VirtualArray_obj::__new(4)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::Dynamic(hx::Anon_obj::Create(0)));
HXLINE( 257)		HX_VARI( ::cpp::VirtualArray,expecteds) = ::cpp::VirtualArray_obj::__new(4)->init(0,HX_("e",65,00,00,00))->init(1,(int)1)->init(2,((Float)0.1))->init(3, ::Dynamic(hx::Anon_obj::Create(0)));
HXLINE( 258)		HX_VARI( Int,i) = (int)0;
HXLINE( 260)		{
HXLINE( 260)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 260)			while((_g < expecteds->get_length())){
HXLINE( 260)				HX_VARI(  ::Dynamic,expected) = expecteds->__get(_g);
HXDLIN( 260)				++_g;
HXLINE( 261)				{
HXLINE( 261)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 261)					while((_g1 < values->get_length())){
HXLINE( 261)						HX_VARI(  ::Dynamic,value) = values->__get(_g1);
HXDLIN( 261)						++_g1;
HXLINE( 262)						++i;
HXLINE( 263)						::thx::Assert_obj::equals(expected,value,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),263,HX_("thx.TestAssert",82,fc,17,e2),HX_("testEquals",31,34,e7,d8)));
            					}
            				}
            			}
            		}
HXLINE( 265)		this->expect((int)3,(i - (int)3),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),265,HX_("thx.TestAssert",82,fc,17,e2),HX_("testEquals",31,34,e7,d8)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testEquals,(void))

void TestAssert_obj::testNearEqualsSuccess(){
            	HX_STACK_FRAME("thx.TestAssert","testNearEqualsSuccess",0xb489699e,"thx.TestAssert.testNearEqualsSuccess","thx/TestAssert.hx",268,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 269)		HX_VARI( Int,counter) = (int)0;
HXDLIN( 269)		HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(6)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("tests",e1,7f,95,0d),::Array_obj< Float >::__new(3)->init(0,((Float)0.1))->init(1,((Float)0.100000000000000000000000000001))->init(2,((Float)0.099999999999999999999999999999)))
            			->setFixed(1,HX_("expected",78,2e,30,40),((Float)0.1))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("tests",e1,7f,95,0d),::Array_obj< Float >::__new(3)->init(0,(int)1)->init(1,((Float)1.000000000000000000000000000001))->init(2,((Float)0.999999999999999999999999999999)))
            			->setFixed(1,HX_("expected",78,2e,30,40),(int)1)))->init(2, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("tests",e1,7f,95,0d),::Array_obj< Float >::__new(1)->init(0,::Math_obj::NaN))
            			->setFixed(1,HX_("expected",78,2e,30,40),::Math_obj::NaN)))->init(3, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("tests",e1,7f,95,0d),::Array_obj< Float >::__new(1)->init(0,::Math_obj::NEGATIVE_INFINITY))
            			->setFixed(1,HX_("expected",78,2e,30,40),::Math_obj::NEGATIVE_INFINITY)))->init(4, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("tests",e1,7f,95,0d),::Array_obj< Float >::__new(1)->init(0,::Math_obj::POSITIVE_INFINITY))
            			->setFixed(1,HX_("expected",78,2e,30,40),::Math_obj::POSITIVE_INFINITY)))->init(5, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("tests",e1,7f,95,0d),::Array_obj< Float >::__new(1)->init(0,::Math_obj::PI))
            			->setFixed(1,HX_("expected",78,2e,30,40),::Math_obj::PI)));
HXLINE( 278)		{
HXLINE( 278)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 278)			while((_g < tests->length)){
HXLINE( 278)				HX_VARI(  ::Dynamic,test) = tests->__get(_g);
HXDLIN( 278)				++_g;
HXLINE( 279)				{
HXLINE( 279)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 279)					HX_VARI( ::Array< Float >,_g2) = ( (::Array< Float >)(test->__Field(HX_("tests",e1,7f,95,0d),hx::paccDynamic)) );
HXDLIN( 279)					while((_g1 < _g2->length)){
HXLINE( 279)						HX_VARI( Float,value) = _g2->__get(_g1);
HXDLIN( 279)						++_g1;
HXLINE( 280)						++counter;
HXLINE( 281)						::thx::Assert_obj::nearEquals( ::Dynamic(test->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)),value,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),281,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNearEqualsSuccess",8a,1e,b9,eb)));
            					}
            				}
            			}
            		}
HXLINE( 284)		this->expect(counter,(int)0,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),284,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNearEqualsSuccess",8a,1e,b9,eb)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testNearEqualsSuccess,(void))

void TestAssert_obj::testNearEqualsFail(){
            	HX_STACK_FRAME("thx.TestAssert","testNearEqualsFail",0xaac14f23,"thx.TestAssert.testNearEqualsFail","thx/TestAssert.hx",287,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 288)		HX_VARI( Int,counter) = (int)0;
HXDLIN( 288)		HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(4)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("tests",e1,7f,95,0d),::Array_obj< Float >::__new(6)->init(0,((Float)0.2))->init(1,((Float)0.10000001))->init(2,((Float)0.0999998))->init(3,::Math_obj::NaN)->init(4,::Math_obj::POSITIVE_INFINITY)->init(5,::Math_obj::NEGATIVE_INFINITY))
            			->setFixed(1,HX_("expected",78,2e,30,40),((Float)0.1))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("tests",e1,7f,95,0d),::Array_obj< Float >::__new(5)->init(0,(int)2)->init(1,((Float)1.1))->init(2,((Float)0.9))->init(3,::Math_obj::POSITIVE_INFINITY)->init(4,::Math_obj::NEGATIVE_INFINITY))
            			->setFixed(1,HX_("expected",78,2e,30,40),::Math_obj::NaN)))->init(2, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("tests",e1,7f,95,0d),::Array_obj< Float >::__new(5)->init(0,(int)2)->init(1,((Float)1.1))->init(2,((Float)0.9))->init(3,::Math_obj::NaN)->init(4,::Math_obj::POSITIVE_INFINITY))
            			->setFixed(1,HX_("expected",78,2e,30,40),::Math_obj::NEGATIVE_INFINITY)))->init(3, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("tests",e1,7f,95,0d),::Array_obj< Float >::__new(5)->init(0,(int)2)->init(1,((Float)1.1))->init(2,((Float)0.9))->init(3,::Math_obj::NaN)->init(4,::Math_obj::NEGATIVE_INFINITY))
            			->setFixed(1,HX_("expected",78,2e,30,40),::Math_obj::POSITIVE_INFINITY)));
HXLINE( 296)		{
HXLINE( 296)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 296)			while((_g < tests->length)){
HXLINE( 296)				HX_VARI(  ::Dynamic,test) = tests->__get(_g);
HXDLIN( 296)				++_g;
HXLINE( 297)				{
HXLINE( 297)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 297)					HX_VARI( ::Array< Float >,_g2) = ( (::Array< Float >)(test->__Field(HX_("tests",e1,7f,95,0d),hx::paccDynamic)) );
HXDLIN( 297)					while((_g1 < _g2->length)){
HXLINE( 297)						HX_VARI( Float,value) = _g2->__get(_g1);
HXDLIN( 297)						++_g1;
HXLINE( 298)						++counter;
HXLINE( 299)						::thx::Assert_obj::nearEquals( ::Dynamic(test->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)),value,null(),null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),299,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNearEqualsFail",b7,8e,f6,88)));
            					}
            				}
            			}
            		}
HXLINE( 302)		this->expect((int)0,counter,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),302,HX_("thx.TestAssert",82,fc,17,e2),HX_("testNearEqualsFail",b7,8e,f6,88)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testNearEqualsFail,(void))

void TestAssert_obj::testPass(){
            	HX_STACK_FRAME("thx.TestAssert","testPass",0xcbbeabaf,"thx.TestAssert.testPass","thx/TestAssert.hx",305,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 306)		::thx::Assert_obj::pass(null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),306,HX_("thx.TestAssert",82,fc,17,e2),HX_("testPass",43,6a,84,4d)));
HXLINE( 307)		this->expect((int)1,(int)0,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),307,HX_("thx.TestAssert",82,fc,17,e2),HX_("testPass",43,6a,84,4d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testPass,(void))

void TestAssert_obj::testFail(){
            	HX_STACK_FRAME("thx.TestAssert","testFail",0xc52280bc,"thx.TestAssert.testFail","thx/TestAssert.hx",310,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 311)		::thx::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),311,HX_("thx.TestAssert",82,fc,17,e2),HX_("testFail",50,3f,e8,46)));
HXLINE( 312)		this->expect((int)0,(int)1,null(),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),312,HX_("thx.TestAssert",82,fc,17,e2),HX_("testFail",50,3f,e8,46)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testFail,(void))

void TestAssert_obj::testWarn(){
            	HX_STACK_FRAME("thx.TestAssert","testWarn",0xd05f2924,"thx.TestAssert.testWarn","thx/TestAssert.hx",315,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 316)		::thx::Assert_obj::warn(HX_("",00,00,00,00),hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),316,HX_("thx.TestAssert",82,fc,17,e2),HX_("testWarn",b8,e7,24,52)));
HXLINE( 317)		this->expect((int)0,(int)0,(int)1,hx::SourceInfo(HX_("TestAssert.hx",e6,c8,fa,1a),317,HX_("thx.TestAssert",82,fc,17,e2),HX_("testWarn",b8,e7,24,52)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestAssert_obj,testWarn,(void))

void TestAssert_obj::expect(Int successes,Int failures,hx::Null< Int >  __o_warnings, ::Dynamic pos){
Int warnings = __o_warnings.Default(0);
            	HX_STACK_FRAME("thx.TestAssert","expect",0x900ebc45,"thx.TestAssert.expect","thx/TestAssert.hx",320,0xf0cbd6db)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(successes,"successes")
            	HX_STACK_ARG(failures,"failures")
            	HX_STACK_ARG(warnings,"warnings")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 321)		Int _hx_tmp = this->behavior->successes;
HXDLIN( 321)		::String _hx_tmp1 = (((HX_("expected ",a8,7a,f8,e9) + successes) + HX_(" successes but they are ",56,d2,44,88)) + this->behavior->successes);
HXDLIN( 321)		::utest::Assert_obj::equals(successes,_hx_tmp,_hx_tmp1,pos);
HXLINE( 322)		Int _hx_tmp2 = this->behavior->failures;
HXDLIN( 322)		::String _hx_tmp3 = (((HX_("expected ",a8,7a,f8,e9) + failures) + HX_(" failures but they are ",8e,04,d0,37)) + this->behavior->failures);
HXDLIN( 322)		::utest::Assert_obj::equals(failures,_hx_tmp2,_hx_tmp3,pos);
HXLINE( 323)		Int _hx_tmp4 = this->behavior->warnings;
HXDLIN( 323)		::String _hx_tmp5 = (((HX_("expected ",a8,7a,f8,e9) + warnings) + HX_(" warnings but they are ",bc,be,88,0a)) + this->behavior->warnings);
HXDLIN( 323)		::utest::Assert_obj::equals(warnings,_hx_tmp4,_hx_tmp5,pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestAssert_obj,expect,(void))


TestAssert_obj::TestAssert_obj()
{
}

void TestAssert_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestAssert);
	HX_MARK_MEMBER_NAME(orig,"orig");
	HX_MARK_MEMBER_NAME(behavior,"behavior");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(sub,"sub");
	HX_MARK_END_CLASS();
}

void TestAssert_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(orig,"orig");
	HX_VISIT_MEMBER_NAME(behavior,"behavior");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(sub,"sub");
}

hx::Val TestAssert_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sub") ) { return hx::Val( sub); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"orig") ) { return hx::Val( orig); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn()); }
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"testIs") ) { return hx::Val( testIs_dyn()); }
		if (HX_FIELD_EQ(inName,"expect") ) { return hx::Val( expect_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"behavior") ) { return hx::Val( behavior); }
		if (HX_FIELD_EQ(inName,"teardown") ) { return hx::Val( teardown_dyn()); }
		if (HX_FIELD_EQ(inName,"testPass") ) { return hx::Val( testPass_dyn()); }
		if (HX_FIELD_EQ(inName,"testFail") ) { return hx::Val( testFail_dyn()); }
		if (HX_FIELD_EQ(inName,"testWarn") ) { return hx::Val( testWarn_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testIsBool") ) { return hx::Val( testIsBool_dyn()); }
		if (HX_FIELD_EQ(inName,"testIsNull") ) { return hx::Val( testIsNull_dyn()); }
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testNotNull") ) { return hx::Val( testNotNull_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameMap") ) { return hx::Val( testSameMap_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testSameType") ) { return hx::Val( testSameType_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testSameArray") ) { return hx::Val( testSameArray_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameEnums") ) { return hx::Val( testSameEnums_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testSameObject") ) { return hx::Val( testSameObject_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testSameInstance") ) { return hx::Val( testSameInstance_dyn()); }
		if (HX_FIELD_EQ(inName,"testSameIterable") ) { return hx::Val( testSameIterable_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testRaisesSuccess") ) { return hx::Val( testRaisesSuccess_dyn()); }
		if (HX_FIELD_EQ(inName,"testRaisesFailure") ) { return hx::Val( testRaisesFailure_dyn()); }
		if (HX_FIELD_EQ(inName,"testSamePrimitive") ) { return hx::Val( testSamePrimitive_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"testNearEqualsFail") ) { return hx::Val( testNearEqualsFail_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"testNearEqualsSuccess") ) { return hx::Val( testNearEqualsSuccess_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestAssert_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sub") ) { sub=inValue.Cast<  ::thx::TestAssert >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"orig") ) { orig=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"behavior") ) { behavior=inValue.Cast<  ::thx::CollectBehavior >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestAssert_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("orig","\xc1","\x8b","\xb5","\x49"));
	outFields->push(HX_HCSTRING("behavior","\x92","\x90","\x92","\x0a"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestAssert_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::thx::IAssertBehavior*/ ,(int)offsetof(TestAssert_obj,orig),HX_HCSTRING("orig","\xc1","\x8b","\xb5","\x49")},
	{hx::fsObject /*::thx::CollectBehavior*/ ,(int)offsetof(TestAssert_obj,behavior),HX_HCSTRING("behavior","\x92","\x90","\x92","\x0a")},
	{hx::fsString,(int)offsetof(TestAssert_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsObject /*::thx::TestAssert*/ ,(int)offsetof(TestAssert_obj,sub),HX_HCSTRING("sub","\x80","\xa9","\x57","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestAssert_obj_sStaticStorageInfo = 0;
#endif

static ::String TestAssert_obj_sMemberFields[] = {
	HX_HCSTRING("orig","\xc1","\x8b","\xb5","\x49"),
	HX_HCSTRING("behavior","\x92","\x90","\x92","\x0a"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("teardown","\x04","\xaa","\x8d","\x01"),
	HX_HCSTRING("testIsBool","\x26","\x8f","\x76","\x77"),
	HX_HCSTRING("testIsNull","\x83","\xa9","\x69","\x7f"),
	HX_HCSTRING("testNotNull","\x08","\x17","\x02","\xfb"),
	HX_HCSTRING("testRaisesSuccess","\xca","\x7e","\x73","\xfe"),
	HX_HCSTRING("testRaisesFailure","\x51","\xc9","\x1f","\x5d"),
	HX_HCSTRING("testIs","\xdc","\x40","\x3a","\xd5"),
	HX_HCSTRING("testSamePrimitive","\xaf","\x84","\x3f","\x1c"),
	HX_HCSTRING("testSameType","\xb2","\x73","\x93","\xda"),
	HX_HCSTRING("testSameArray","\xa1","\xc5","\x35","\x71"),
	HX_HCSTRING("testSameObject","\xb7","\x2d","\x26","\xfb"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"),
	HX_HCSTRING("testSameInstance","\x8d","\x7c","\x0b","\x8a"),
	HX_HCSTRING("testSameIterable","\xaa","\xfb","\xb6","\xc3"),
	HX_HCSTRING("testSameMap","\xa4","\xd0","\x35","\x39"),
	HX_HCSTRING("testSameEnums","\x5a","\x8e","\x2d","\xbc"),
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testNearEqualsSuccess","\x8a","\x1e","\xb9","\xeb"),
	HX_HCSTRING("testNearEqualsFail","\xb7","\x8e","\xf6","\x88"),
	HX_HCSTRING("testPass","\x43","\x6a","\x84","\x4d"),
	HX_HCSTRING("testFail","\x50","\x3f","\xe8","\x46"),
	HX_HCSTRING("testWarn","\xb8","\xe7","\x24","\x52"),
	HX_HCSTRING("expect","\xd9","\xed","\x75","\xc4"),
	::String(null()) };

static void TestAssert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestAssert_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestAssert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestAssert_obj::__mClass,"__mClass");
};

#endif

hx::Class TestAssert_obj::__mClass;

void TestAssert_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestAssert","\x82","\xfc","\x17","\xe2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestAssert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestAssert_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestAssert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestAssert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestAssert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestAssert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
