// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_thx_Assert
#include <thx/Assert.h>
#endif
#ifndef INCLUDED_thx_TestChar
#include <thx/TestChar.h>
#endif
#ifndef INCLUDED_thx__Char_Char_Impl_
#include <thx/_Char/Char_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestChar_obj::__construct(){
            	HX_STACK_FRAME("thx.TestChar","new",0x5b3cbf84,"thx.TestChar.new","thx/TestChar.hx",8,0xcd100a0b)
            	HX_STACK_THIS(this)
            	}

Dynamic TestChar_obj::__CreateEmpty() { return new TestChar_obj; }

hx::ObjectPtr< TestChar_obj > TestChar_obj::__new()
{
	hx::ObjectPtr< TestChar_obj > _hx_result = new TestChar_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestChar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestChar_obj > _hx_result = new TestChar_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestChar_obj::testChar(){
            	HX_STACK_FRAME("thx.TestChar","testChar",0x111f92a4,"thx.TestChar.testChar","thx/TestChar.hx",10,0xcd100a0b)
            	HX_STACK_THIS(this)
HXLINE(  11)		::thx::Assert_obj::isTrue(true,(HX_("Char value should be greater than zero: ",de,84,0e,b2) + (int)120),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  11)		HX_VARI_NAME( Int,_hx_char,"char") = (int)120;
HXLINE(  13)		::utest::Assert_obj::equals((int)120,_hx_char,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),13,HX_("thx.TestChar",92,ed,05,4e),HX_("testChar",48,e4,f1,44)));
HXLINE(  14)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(_hx_char);
HXDLIN(  14)		::utest::Assert_obj::equals(HX_("x",78,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),14,HX_("thx.TestChar",92,ed,05,4e),HX_("testChar",48,e4,f1,44)));
HXLINE(  16)		HX_VARI( Int,i) = ::haxe::Utf8_obj::charCodeAt(HX_("y",79,00,00,00),(int)0);
HXDLIN(  16)		::thx::Assert_obj::isTrue((i >= (int)0),(HX_("Char value should be greater than zero: ",de,84,0e,b2) + i),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  16)		_hx_char = i;
HXLINE(  18)		::utest::Assert_obj::equals((int)121,_hx_char,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),18,HX_("thx.TestChar",92,ed,05,4e),HX_("testChar",48,e4,f1,44)));
HXLINE(  19)		::String _hx_tmp1 = ::thx::_Char::Char_Impl__obj::toString(_hx_char);
HXDLIN(  19)		::utest::Assert_obj::equals(HX_("y",79,00,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),19,HX_("thx.TestChar",92,ed,05,4e),HX_("testChar",48,e4,f1,44)));
HXLINE(  21)		Int _hx_tmp2 = ::thx::_Char::Char_Impl__obj::toUpperCase(_hx_char);
HXDLIN(  21)		::utest::Assert_obj::equals((int)89,_hx_tmp2,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),21,HX_("thx.TestChar",92,ed,05,4e),HX_("testChar",48,e4,f1,44)));
HXLINE(  22)		Int _hx_tmp3 = ::thx::_Char::Char_Impl__obj::toUpperCase(_hx_char);
HXDLIN(  22)		::String _hx_tmp4 = ::thx::_Char::Char_Impl__obj::toString(_hx_tmp3);
HXDLIN(  22)		::utest::Assert_obj::equals(HX_("Y",59,00,00,00),_hx_tmp4,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),22,HX_("thx.TestChar",92,ed,05,4e),HX_("testChar",48,e4,f1,44)));
HXLINE(  24)		_hx_char = ::thx::_Char::Char_Impl__obj::next(_hx_char);
HXLINE(  26)		::utest::Assert_obj::equals((int)122,_hx_char,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),26,HX_("thx.TestChar",92,ed,05,4e),HX_("testChar",48,e4,f1,44)));
HXLINE(  27)		::String _hx_tmp5 = ::thx::_Char::Char_Impl__obj::toString(_hx_char);
HXDLIN(  27)		::utest::Assert_obj::equals(HX_("z",7a,00,00,00),_hx_tmp5,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),27,HX_("thx.TestChar",92,ed,05,4e),HX_("testChar",48,e4,f1,44)));
HXLINE(  29)		Int _hx_tmp6 = ::thx::_Char::Char_Impl__obj::prev(_hx_char);
HXDLIN(  29)		::utest::Assert_obj::equals((int)121,_hx_tmp6,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),29,HX_("thx.TestChar",92,ed,05,4e),HX_("testChar",48,e4,f1,44)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestChar_obj,testChar,(void))

void TestChar_obj::testControl(){
            	HX_STACK_FRAME("thx.TestChar","testControl",0x642d0c4f,"thx.TestChar.testControl","thx/TestChar.hx",32,0xcd100a0b)
            	HX_STACK_THIS(this)
HXLINE(  33)		::thx::Assert_obj::isTrue(true,(HX_("Char value should be greater than zero: ",de,84,0e,b2) + (int)7),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  33)		::utest::Assert_obj::isTrue(::thx::_Char::Char_Impl__obj::isControl((int)7),null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),33,HX_("thx.TestChar",92,ed,05,4e),HX_("testControl",2b,59,4a,d6)));
HXLINE(  34)		HX_VARI( Int,i) = ::haxe::Utf8_obj::charCodeAt(HX_("x",78,00,00,00),(int)0);
HXDLIN(  34)		::thx::Assert_obj::isTrue((i >= (int)0),(HX_("Char value should be greater than zero: ",de,84,0e,b2) + i),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  34)		::utest::Assert_obj::isFalse(::thx::_Char::Char_Impl__obj::isControl(i),null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),34,HX_("thx.TestChar",92,ed,05,4e),HX_("testControl",2b,59,4a,d6)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestChar_obj,testControl,(void))

void TestChar_obj::testUtf8(){
            	HX_STACK_FRAME("thx.TestChar","testUtf8",0x1d0e88ff,"thx.TestChar.testUtf8","thx/TestChar.hx",37,0xcd100a0b)
            	HX_STACK_THIS(this)
HXLINE(  38)		HX_VARI( Int,i) = ::haxe::Utf8_obj::charCodeAt(HX_("\xe2""\x98""\xba""",84,02,ac,00),(int)0);
HXDLIN(  38)		::thx::Assert_obj::isTrue((i >= (int)0),(HX_("Char value should be greater than zero: ",de,84,0e,b2) + i),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  38)		::utest::Assert_obj::equals((int)9786,i,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),38,HX_("thx.TestChar",92,ed,05,4e),HX_("testUtf8",a3,da,e0,50)));
HXLINE(  39)		::thx::Assert_obj::isTrue(true,(HX_("Char value should be greater than zero: ",de,84,0e,b2) + (int)9786),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  39)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString((int)9786);
HXDLIN(  39)		::utest::Assert_obj::equals(HX_("\xe2""\x98""\xba""",84,02,ac,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),39,HX_("thx.TestChar",92,ed,05,4e),HX_("testUtf8",a3,da,e0,50)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestChar_obj,testUtf8,(void))

void TestChar_obj::testArrayToString(){
            	HX_STACK_FRAME("thx.TestChar","testArrayToString",0x911a9dd7,"thx.TestChar.testArrayToString","thx/TestChar.hx",42,0xcd100a0b)
            	HX_STACK_THIS(this)
HXLINE(  43)		::thx::Assert_obj::isTrue(true,(HX_("Char value should be greater than zero: ",de,84,0e,b2) + (int)120),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  43)		Int _hx_tmp = (int)120;
HXDLIN(  43)		::thx::Assert_obj::isTrue(true,(HX_("Char value should be greater than zero: ",de,84,0e,b2) + (int)121),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  43)		Int _hx_tmp1 = (int)121;
HXDLIN(  43)		::thx::Assert_obj::isTrue(true,(HX_("Char value should be greater than zero: ",de,84,0e,b2) + (int)122),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXLINE(  44)		::String _hx_tmp2 = ::thx::_Char::Char_Impl__obj::arrayToString(::Array_obj< Int >::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,(int)122));
HXDLIN(  44)		::utest::Assert_obj::equals(HX_("xyz",59,78,5b,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestChar.hx",56,d3,41,70),44,HX_("thx.TestChar",92,ed,05,4e),HX_("testArrayToString",b3,f7,aa,12)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestChar_obj,testArrayToString,(void))


TestChar_obj::TestChar_obj()
{
}

hx::Val TestChar_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"testChar") ) { return hx::Val( testChar_dyn()); }
		if (HX_FIELD_EQ(inName,"testUtf8") ) { return hx::Val( testUtf8_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testControl") ) { return hx::Val( testControl_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testArrayToString") ) { return hx::Val( testArrayToString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestChar_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestChar_obj_sStaticStorageInfo = 0;
#endif

static ::String TestChar_obj_sMemberFields[] = {
	HX_HCSTRING("testChar","\x48","\xe4","\xf1","\x44"),
	HX_HCSTRING("testControl","\x2b","\x59","\x4a","\xd6"),
	HX_HCSTRING("testUtf8","\xa3","\xda","\xe0","\x50"),
	HX_HCSTRING("testArrayToString","\xb3","\xf7","\xaa","\x12"),
	::String(null()) };

static void TestChar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestChar_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestChar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestChar_obj::__mClass,"__mClass");
};

#endif

hx::Class TestChar_obj::__mClass;

void TestChar_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestChar","\x92","\xed","\x05","\x4e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestChar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestChar_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestChar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestChar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestChar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestChar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
