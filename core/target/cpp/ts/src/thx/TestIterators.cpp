// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Iterators
#include <thx/Iterators.h>
#endif
#ifndef INCLUDED_thx_TestIterators
#include <thx/TestIterators.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestIterators_obj::__construct(){
            	HX_STACK_FRAME("thx.TestIterators","new",0x6a6507fb,"thx.TestIterators.new","thx/TestIterators.hx",12,0x153921d6)
            	HX_STACK_THIS(this)
            	}

Dynamic TestIterators_obj::__CreateEmpty() { return new TestIterators_obj; }

hx::ObjectPtr< TestIterators_obj > TestIterators_obj::__new()
{
	hx::ObjectPtr< TestIterators_obj > _hx_result = new TestIterators_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestIterators_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestIterators_obj > _hx_result = new TestIterators_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestIterators_obj::testEquals(){
            	HX_STACK_FRAME("thx.TestIterators","testEquals",0xbb05f5f6,"thx.TestIterators.testEquals","thx/TestIterators.hx",14,0x153921d6)
            	HX_STACK_THIS(this)
HXLINE(  15)		HX_VARI( ::Array< Int >,a) = ::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3);
HXDLIN(  15)		HX_VARI( ::Array< Int >,b) = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2);
HXDLIN(  15)		HX_VARI( ::Array< Int >,c) = ::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)4);
HXLINE(  19)		 ::Dynamic _hx_tmp = a->iterator();
HXDLIN(  19)		 ::Dynamic _hx_tmp1 = a->iterator();
HXDLIN(  19)		Bool _hx_tmp2 = ::thx::Iterators_obj::equals(_hx_tmp,_hx_tmp1,null());
HXDLIN(  19)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestIterators.hx",ab,c8,b2,f8),19,HX_("thx.TestIterators",89,ee,b4,21),HX_("testEquals",31,34,e7,d8)));
HXLINE(  20)		 ::Dynamic _hx_tmp3 = a->iterator();
HXDLIN(  20)		 ::Dynamic _hx_tmp4 = b->iterator();
HXDLIN(  20)		Bool _hx_tmp5 = ::thx::Iterators_obj::equals(_hx_tmp3,_hx_tmp4,null());
HXDLIN(  20)		::utest::Assert_obj::isFalse(_hx_tmp5,null(),hx::SourceInfo(HX_("TestIterators.hx",ab,c8,b2,f8),20,HX_("thx.TestIterators",89,ee,b4,21),HX_("testEquals",31,34,e7,d8)));
HXLINE(  21)		 ::Dynamic _hx_tmp6 = a->iterator();
HXDLIN(  21)		 ::Dynamic _hx_tmp7 = c->iterator();
HXDLIN(  21)		Bool _hx_tmp8 = ::thx::Iterators_obj::equals(_hx_tmp6,_hx_tmp7,null());
HXDLIN(  21)		::utest::Assert_obj::isFalse(_hx_tmp8,null(),hx::SourceInfo(HX_("TestIterators.hx",ab,c8,b2,f8),21,HX_("thx.TestIterators",89,ee,b4,21),HX_("testEquals",31,34,e7,d8)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestIterators_obj,testEquals,(void))

void TestIterators_obj::testReduce(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.TestIterators","testReduce",0xf9ad355d,"thx.TestIterators.testReduce","thx/TestIterators.hx",26,0x153921d6)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  26)			return (a + b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestIterators","testReduce",0xf9ad355d,"thx.TestIterators.testReduce","thx/TestIterators.hx",24,0x153921d6)
            	HX_STACK_THIS(this)
HXLINE(  26)		 ::Dynamic _hx_tmp = ::Array_obj< Int >::__new(4)->init(0,(int)2)->init(1,(int)3)->init(2,(int)5)->init(3,(int)7)->iterator();
HXDLIN(  26)		Int _hx_tmp1 = ( (Int)(::thx::Iterators_obj::reduce(_hx_tmp, ::Dynamic(new _hx_Closure_0()),(int)0)) );
HXDLIN(  26)		::utest::Assert_obj::equals((int)17,_hx_tmp1,null(),hx::SourceInfo(HX_("TestIterators.hx",ab,c8,b2,f8),26,HX_("thx.TestIterators",89,ee,b4,21),HX_("testReduce",98,73,8e,17)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestIterators_obj,testReduce,(void))


TestIterators_obj::TestIterators_obj()
{
}

hx::Val TestIterators_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"testReduce") ) { return hx::Val( testReduce_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestIterators_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestIterators_obj_sStaticStorageInfo = 0;
#endif

static ::String TestIterators_obj_sMemberFields[] = {
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testReduce","\x98","\x73","\x8e","\x17"),
	::String(null()) };

static void TestIterators_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestIterators_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestIterators_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestIterators_obj::__mClass,"__mClass");
};

#endif

hx::Class TestIterators_obj::__mClass;

void TestIterators_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestIterators","\x89","\xee","\xb4","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestIterators_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestIterators_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestIterators_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestIterators_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestIterators_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestIterators_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
