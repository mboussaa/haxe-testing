// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_CollectBehavior
#include <thx/CollectBehavior.h>
#endif
#ifndef INCLUDED_thx_IAssertBehavior
#include <thx/IAssertBehavior.h>
#endif

namespace thx{

void CollectBehavior_obj::__construct(){
            	HX_STACK_FRAME("thx.CollectBehavior","new",0x2a1cf244,"thx.CollectBehavior.new","thx/TestAssert.hx",327,0xf0cbd6db)
            	HX_STACK_THIS(this)
HXLINE( 330)		this->failures = (int)0;
HXLINE( 329)		this->warnings = (int)0;
HXLINE( 328)		this->successes = (int)0;
            	}

Dynamic CollectBehavior_obj::__CreateEmpty() { return new CollectBehavior_obj; }

hx::ObjectPtr< CollectBehavior_obj > CollectBehavior_obj::__new()
{
	hx::ObjectPtr< CollectBehavior_obj > _hx_result = new CollectBehavior_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CollectBehavior_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CollectBehavior_obj > _hx_result = new CollectBehavior_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::thx::IAssertBehavior_obj _hx_thx_CollectBehavior__hx_thx_IAssertBehavior= {
	( void (hx::Object::*)( ::Dynamic))&::thx::CollectBehavior_obj::success,
	( void (hx::Object::*)(::String, ::Dynamic))&::thx::CollectBehavior_obj::fail,
	( void (hx::Object::*)(::String, ::Dynamic))&::thx::CollectBehavior_obj::warn,
};

void *CollectBehavior_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x98b49bdd: return &_hx_thx_CollectBehavior__hx_thx_IAssertBehavior;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void CollectBehavior_obj::success( ::Dynamic pos){
            	HX_STACK_FRAME("thx.CollectBehavior","success",0x7b1809a7,"thx.CollectBehavior.success","thx/TestAssert.hx",335,0xf0cbd6db)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 335)		this->successes++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CollectBehavior_obj,success,(void))

void CollectBehavior_obj::warn(::String message, ::Dynamic pos){
            	HX_STACK_FRAME("thx.CollectBehavior","warn",0xb526e7e2,"thx.CollectBehavior.warn","thx/TestAssert.hx",338,0xf0cbd6db)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(message,"message")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 338)		this->warnings++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(CollectBehavior_obj,warn,(void))

void CollectBehavior_obj::fail(::String message, ::Dynamic pos){
            	HX_STACK_FRAME("thx.CollectBehavior","fail",0xa9ea3f7a,"thx.CollectBehavior.fail","thx/TestAssert.hx",341,0xf0cbd6db)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(message,"message")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 341)		this->failures++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(CollectBehavior_obj,fail,(void))


CollectBehavior_obj::CollectBehavior_obj()
{
}

hx::Val CollectBehavior_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"warn") ) { return hx::Val( warn_dyn()); }
		if (HX_FIELD_EQ(inName,"fail") ) { return hx::Val( fail_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"success") ) { return hx::Val( success_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"warnings") ) { return hx::Val( warnings); }
		if (HX_FIELD_EQ(inName,"failures") ) { return hx::Val( failures); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"successes") ) { return hx::Val( successes); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CollectBehavior_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"warnings") ) { warnings=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"failures") ) { failures=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"successes") ) { successes=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CollectBehavior_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("successes","\xf1","\xb4","\x75","\x04"));
	outFields->push(HX_HCSTRING("warnings","\x97","\x36","\x93","\x88"));
	outFields->push(HX_HCSTRING("failures","\xe9","\xd0","\x27","\x04"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CollectBehavior_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(CollectBehavior_obj,successes),HX_HCSTRING("successes","\xf1","\xb4","\x75","\x04")},
	{hx::fsInt,(int)offsetof(CollectBehavior_obj,warnings),HX_HCSTRING("warnings","\x97","\x36","\x93","\x88")},
	{hx::fsInt,(int)offsetof(CollectBehavior_obj,failures),HX_HCSTRING("failures","\xe9","\xd0","\x27","\x04")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CollectBehavior_obj_sStaticStorageInfo = 0;
#endif

static ::String CollectBehavior_obj_sMemberFields[] = {
	HX_HCSTRING("successes","\xf1","\xb4","\x75","\x04"),
	HX_HCSTRING("warnings","\x97","\x36","\x93","\x88"),
	HX_HCSTRING("failures","\xe9","\xd0","\x27","\x04"),
	HX_HCSTRING("success","\xc3","\x25","\x4e","\xb8"),
	HX_HCSTRING("warn","\x46","\x62","\xf2","\x4e"),
	HX_HCSTRING("fail","\xde","\xb9","\xb5","\x43"),
	::String(null()) };

static void CollectBehavior_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CollectBehavior_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CollectBehavior_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CollectBehavior_obj::__mClass,"__mClass");
};

#endif

hx::Class CollectBehavior_obj::__mClass;

void CollectBehavior_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.CollectBehavior","\x52","\xc0","\xa5","\x2e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CollectBehavior_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CollectBehavior_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CollectBehavior_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CollectBehavior_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CollectBehavior_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CollectBehavior_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
