// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx_TestThx
#include <thx/TestThx.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestThx_obj::__construct(){
            	HX_STACK_FRAME("thx.TestThx","new",0x5fb2e23a,"thx.TestThx.new","thx/TestThx.hx",7,0xa97a2db7)
            	HX_STACK_THIS(this)
            	}

Dynamic TestThx_obj::__CreateEmpty() { return new TestThx_obj; }

hx::ObjectPtr< TestThx_obj > TestThx_obj::__new()
{
	hx::ObjectPtr< TestThx_obj > _hx_result = new TestThx_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestThx_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestThx_obj > _hx_result = new TestThx_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestThx_obj::testUsing(){
            	HX_STACK_FRAME("thx.TestThx","testUsing",0x7a00a4ec,"thx.TestThx.testUsing","thx/TestThx.hx",10,0xa97a2db7)
            	HX_STACK_THIS(this)
HXLINE(  10)		::String _hx_tmp = ::thx::Strings_obj::humanize(HX_("ThxUsing",40,e2,7b,e1));
HXDLIN(  10)		::utest::Assert_obj::equals(HX_("thx using",a8,9c,92,c5),_hx_tmp,null(),hx::SourceInfo(HX_("TestThx.hx",cc,56,2c,a2),10,HX_("thx.TestThx",48,fd,5a,36),HX_("testUsing",92,b3,37,73)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestThx_obj,testUsing,(void))


TestThx_obj::TestThx_obj()
{
}

hx::Val TestThx_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"testUsing") ) { return hx::Val( testUsing_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestThx_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestThx_obj_sStaticStorageInfo = 0;
#endif

static ::String TestThx_obj_sMemberFields[] = {
	HX_HCSTRING("testUsing","\x92","\xb3","\x37","\x73"),
	::String(null()) };

static void TestThx_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestThx_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestThx_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestThx_obj::__mClass,"__mClass");
};

#endif

hx::Class TestThx_obj::__mClass;

void TestThx_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestThx","\x48","\xfd","\x5a","\x36");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestThx_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestThx_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestThx_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestThx_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestThx_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestThx_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
