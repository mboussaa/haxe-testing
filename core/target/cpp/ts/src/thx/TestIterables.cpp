// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_Functions
#include <thx/Functions.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Iterables
#include <thx/Iterables.h>
#endif
#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx_TestIterables
#include <thx/TestIterables.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestIterables_obj::__construct(){
            	HX_STACK_FRAME("thx.TestIterables","new",0xb574ecb7,"thx.TestIterables.new","thx/TestIterables.hx",9,0x796f289a)
            	HX_STACK_THIS(this)
            	}

Dynamic TestIterables_obj::__CreateEmpty() { return new TestIterables_obj; }

hx::ObjectPtr< TestIterables_obj > TestIterables_obj::__new()
{
	hx::ObjectPtr< TestIterables_obj > _hx_result = new TestIterables_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestIterables_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestIterables_obj > _hx_result = new TestIterables_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestIterables_obj::testMin(){
            	HX_STACK_FRAME("thx.TestIterables","testMin",0x677d1437,"thx.TestIterables.testMin","thx/TestIterables.hx",11,0x796f289a)
            	HX_STACK_THIS(this)
HXLINE(  12)		HX_VARI( ::Array< Int >,a) = ::Array_obj< Int >::__new(3)->init(0,(int)3)->init(1,(int)1)->init(2,(int)2);
HXLINE(  14)		::hx::EnumBase _hx_tmp = ::haxe::ds::Option_obj::Some((int)1);
HXDLIN(  14)		::hx::EnumBase _hx_tmp1 = ::thx::Iterables_obj::minBy(a,::thx::Functions_obj::identity_dyn(),::thx::Ints_obj::order);
HXDLIN(  14)		::utest::Assert_obj::same(_hx_tmp,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestIterables.hx",6f,cf,e8,5c),14,HX_("thx.TestIterables",45,c5,cc,15),HX_("testMin",60,80,c1,bd)));
HXLINE(  15)		::hx::EnumBase _hx_tmp2 = ::thx::Iterables_obj::minBy(::Array_obj< Int >::__new(0),::thx::Functions_obj::identity_dyn(),::thx::Ints_obj::order);
HXDLIN(  15)		::utest::Assert_obj::same(::haxe::ds::Option_obj::None_dyn(),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestIterables.hx",6f,cf,e8,5c),15,HX_("thx.TestIterables",45,c5,cc,15),HX_("testMin",60,80,c1,bd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestIterables_obj,testMin,(void))

void TestIterables_obj::testMinBy(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run( ::Dynamic o){
            			HX_STACK_FRAME("thx.TestIterables","testMinBy",0x101409ee,"thx.TestIterables.testMinBy","thx/TestIterables.hx",21,0x796f289a)
            			HX_STACK_ARG(o,"o")
HXLINE(  21)			return ( (Int)(o->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		Int _hx_run( ::Dynamic o1){
            			HX_STACK_FRAME("thx.TestIterables","testMinBy",0x101409ee,"thx.TestIterables.testMinBy","thx/TestIterables.hx",22,0x796f289a)
            			HX_STACK_ARG(o1,"o1")
HXLINE(  22)			return ( (Int)(o1->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) );
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.TestIterables","testMinBy",0x101409ee,"thx.TestIterables.testMinBy","thx/TestIterables.hx",18,0x796f289a)
            	HX_STACK_THIS(this)
HXLINE(  19)		HX_VARI( ::Array< ::Dynamic>,a) = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)3)))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)))->init(2, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)2)));
HXLINE(  21)		::hx::EnumBase _hx_tmp = ::haxe::ds::Option_obj::Some( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("a",61,00,00,00),(int)1)));
HXDLIN(  21)		::hx::EnumBase _hx_tmp1 = ::thx::Iterables_obj::minBy(a, ::Dynamic(new _hx_Closure_0()),::thx::Ints_obj::order);
HXDLIN(  21)		::utest::Assert_obj::same(_hx_tmp,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestIterables.hx",6f,cf,e8,5c),21,HX_("thx.TestIterables",45,c5,cc,15),HX_("testMinBy",57,92,6a,d1)));
HXLINE(  22)		::hx::EnumBase _hx_tmp2 = ::thx::Iterables_obj::minBy(::Array_obj< ::Dynamic>::__new(0), ::Dynamic(new _hx_Closure_1()),::thx::Ints_obj::order);
HXDLIN(  22)		::utest::Assert_obj::same(::haxe::ds::Option_obj::None_dyn(),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestIterables.hx",6f,cf,e8,5c),22,HX_("thx.TestIterables",45,c5,cc,15),HX_("testMinBy",57,92,6a,d1)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestIterables_obj,testMinBy,(void))


TestIterables_obj::TestIterables_obj()
{
}

hx::Val TestIterables_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"testMin") ) { return hx::Val( testMin_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testMinBy") ) { return hx::Val( testMinBy_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestIterables_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestIterables_obj_sStaticStorageInfo = 0;
#endif

static ::String TestIterables_obj_sMemberFields[] = {
	HX_HCSTRING("testMin","\x60","\x80","\xc1","\xbd"),
	HX_HCSTRING("testMinBy","\x57","\x92","\x6a","\xd1"),
	::String(null()) };

static void TestIterables_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestIterables_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestIterables_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestIterables_obj::__mClass,"__mClass");
};

#endif

hx::Class TestIterables_obj::__mClass;

void TestIterables_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestIterables","\x45","\xc5","\xcc","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestIterables_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestIterables_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestIterables_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestIterables_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestIterables_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestIterables_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
