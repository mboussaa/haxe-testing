// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_thx_Objects
#include <thx/Objects.h>
#endif
#ifndef INCLUDED_thx_TestObjects
#include <thx/TestObjects.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestObjects_obj::__construct(){
            	HX_STACK_FRAME("thx.TestObjects","new",0xd6a5048a,"thx.TestObjects.new","thx/TestObjects.hx",13,0x6ee9f9e7)
            	HX_STACK_THIS(this)
            	}

Dynamic TestObjects_obj::__CreateEmpty() { return new TestObjects_obj; }

hx::ObjectPtr< TestObjects_obj > TestObjects_obj::__new()
{
	hx::ObjectPtr< TestObjects_obj > _hx_result = new TestObjects_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestObjects_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestObjects_obj > _hx_result = new TestObjects_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestObjects_obj::testIssue20151201(){
            	HX_STACK_FRAME("thx.TestObjects","testIssue20151201",0x20114d15,"thx.TestObjects.testIssue20151201","thx/TestObjects.hx",15,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE(  16)		HX_VARI( ::String,s) = ::thx::Objects_obj::string( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("newId",5b,e8,30,99),HX_("2",32,00,00,00))
            			->setFixed(1,HX_("oldId",62,90,29,31),HX_("1",31,00,00,00))));
HXLINE(  18)		::utest::Assert_obj::stringContains(HX_("oldId : \"1\"",4f,02,d7,39),s,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),18,HX_("thx.TestObjects",98,b7,59,3e),HX_("testIssue20151201",6b,e3,44,b0)));
HXLINE(  19)		::utest::Assert_obj::stringContains(HX_("newId : \"2\"",e7,1b,da,1e),s,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),19,HX_("thx.TestObjects",98,b7,59,3e),HX_("testIssue20151201",6b,e3,44,b0)));
HXLINE(  20)		::utest::Assert_obj::stringContains(HX_(", ",74,26,00,00),s,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),20,HX_("thx.TestObjects",98,b7,59,3e),HX_("testIssue20151201",6b,e3,44,b0)));
HXLINE(  21)		Bool _hx_tmp = ::StringTools_obj::startsWith(s,HX_("{",7b,00,00,00));
HXDLIN(  21)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),21,HX_("thx.TestObjects",98,b7,59,3e),HX_("testIssue20151201",6b,e3,44,b0)));
HXLINE(  22)		Bool _hx_tmp1 = ::StringTools_obj::endsWith(s,HX_("}",7d,00,00,00));
HXDLIN(  22)		::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),22,HX_("thx.TestObjects",98,b7,59,3e),HX_("testIssue20151201",6b,e3,44,b0)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testIssue20151201,(void))

void TestObjects_obj::testObjects(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,o) HXARGC(1)
            		 ::Dynamic _hx_run(::String key){
            			HX_STACK_FRAME("thx.TestObjects","testObjects",0xf358c4cc,"thx.TestObjects.testObjects","thx/TestObjects.hx",38,0x6ee9f9e7)
            			HX_STACK_ARG(key,"key")
HXLINE(  38)			return ::Reflect_obj::field(o,key);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		Int _hx_run( ::Dynamic a, ::Dynamic b){
            			HX_STACK_FRAME("thx.TestObjects","testObjects",0xf358c4cc,"thx.TestObjects.testObjects","thx/TestObjects.hx",45,0x6ee9f9e7)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE(  45)			return ::haxe::Utf8_obj::compare( ::Dynamic(a->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)), ::Dynamic(b->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.TestObjects","testObjects",0xf358c4cc,"thx.TestObjects.testObjects","thx/TestObjects.hx",25,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE(  26)		HX_VARI(  ::Dynamic,ob) =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE(  27)		Bool _hx_tmp = (::Reflect_obj::fields(ob)->length == (int)0);
HXDLIN(  27)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),27,HX_("thx.TestObjects",98,b7,59,3e),HX_("testObjects",a2,56,18,3f)));
HXLINE(  28)		::Array< ::String > _hx_tmp1 = ::Reflect_obj::fields(ob);
HXDLIN(  28)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(0),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),28,HX_("thx.TestObjects",98,b7,59,3e),HX_("testObjects",a2,56,18,3f)));
HXLINE(  30)		HX_VARI_NAME(  ::Dynamic,ob1,"ob") =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("a",61,00,00,00),HX_("A",41,00,00,00))
            			->setFixed(1,HX_("b",62,00,00,00),HX_("B",42,00,00,00)));
HXLINE(  31)		Bool _hx_tmp2 = (::Reflect_obj::fields(ob1)->length == (int)0);
HXDLIN(  31)		::utest::Assert_obj::isFalse(_hx_tmp2,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),31,HX_("thx.TestObjects",98,b7,59,3e),HX_("testObjects",a2,56,18,3f)));
HXLINE(  33)		HX_VARI( ::Array< ::String >,fields) = ::Reflect_obj::fields(ob1);
HXLINE(  34)		Bool _hx_tmp3 = fields->remove(HX_("a",61,00,00,00));
HXDLIN(  34)		::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),34,HX_("thx.TestObjects",98,b7,59,3e),HX_("testObjects",a2,56,18,3f)));
HXLINE(  35)		Bool _hx_tmp4 = fields->remove(HX_("b",62,00,00,00));
HXDLIN(  35)		::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),35,HX_("thx.TestObjects",98,b7,59,3e),HX_("testObjects",a2,56,18,3f)));
HXLINE(  36)		::utest::Assert_obj::equals((int)0,fields->length,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),36,HX_("thx.TestObjects",98,b7,59,3e),HX_("testObjects",a2,56,18,3f)));
HXLINE(  38)		HX_VARI(  ::Dynamic,o) = ob1;
HXDLIN(  38)		HX_VARI( ::cpp::VirtualArray,values) = ::Reflect_obj::fields(o)->map( ::Dynamic(new _hx_Closure_0(o)));
HXLINE(  39)		Bool _hx_tmp5 = values->remove(HX_("A",41,00,00,00));
HXDLIN(  39)		::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),39,HX_("thx.TestObjects",98,b7,59,3e),HX_("testObjects",a2,56,18,3f)));
HXLINE(  40)		Bool _hx_tmp6 = values->remove(HX_("B",42,00,00,00));
HXDLIN(  40)		::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),40,HX_("thx.TestObjects",98,b7,59,3e),HX_("testObjects",a2,56,18,3f)));
HXLINE(  41)		::utest::Assert_obj::equals((int)0,values->get_length(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),41,HX_("thx.TestObjects",98,b7,59,3e),HX_("testObjects",a2,56,18,3f)));
HXLINE(  43)		HX_VARI( ::Array< ::Dynamic>,tuples) = ::thx::Objects_obj::tuples(ob1);
HXLINE(  45)		tuples->sort( ::Dynamic(new _hx_Closure_1()));
HXLINE(  47)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),HX_("a",61,00,00,00))
            			->setFixed(1,HX_("_1",f2,52,00,00),HX_("A",41,00,00,00))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),HX_("b",62,00,00,00))
            			->setFixed(1,HX_("_1",f2,52,00,00),HX_("B",42,00,00,00)))),tuples,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),47,HX_("thx.TestObjects",98,b7,59,3e),HX_("testObjects",a2,56,18,3f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testObjects,(void))

void TestObjects_obj::testAssign(){
            	HX_STACK_FRAME("thx.TestObjects","testAssign",0x0c3e9137,"thx.TestObjects.testAssign","thx/TestObjects.hx",49,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE(  50)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("age",bf,f4,49,00),(int)19)
            			->setFixed(1,HX_("name",4b,72,ff,48),HX_("Franco",45,e4,1a,e1)));
HXLINE(  51)		HX_VARI(  ::Dynamic,out) = ::thx::Objects_obj::assign(o, ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("age",bf,f4,49,00),HX_("Two",6c,25,40,00))
            			->setFixed(1,HX_("foo",06,c7,4d,00),HX_("bar",d3,b1,4a,00))
            			->setFixed(2,HX_("name",4b,72,ff,48),HX_("Michael",87,2c,21,c3))),null());
HXLINE(  53)		::utest::Assert_obj::same(HX_("Michael",87,2c,21,c3), ::Dynamic(out->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),53,HX_("thx.TestObjects",98,b7,59,3e),HX_("testAssign",21,8c,fa,64)));
HXLINE(  54)		::utest::Assert_obj::same(HX_("Two",6c,25,40,00), ::Dynamic(out->__Field(HX_("age",bf,f4,49,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),54,HX_("thx.TestObjects",98,b7,59,3e),HX_("testAssign",21,8c,fa,64)));
HXLINE(  55)		::utest::Assert_obj::same(HX_("bar",d3,b1,4a,00), ::Dynamic(out->__Field(HX_("foo",06,c7,4d,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),55,HX_("thx.TestObjects",98,b7,59,3e),HX_("testAssign",21,8c,fa,64)));
HXLINE(  57)		{
HXLINE(  57)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  57)			HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(out);
HXDLIN(  57)			while((_g < _g1->length)){
HXLINE(  57)				HX_VARI( ::String,field) = _g1->__get(_g);
HXDLIN(  57)				++_g;
HXLINE(  58)				 ::Dynamic _hx_tmp = ::Reflect_obj::field(out,field);
HXDLIN(  58)				 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(o,field);
HXDLIN(  58)				::utest::Assert_obj::same(_hx_tmp,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),58,HX_("thx.TestObjects",98,b7,59,3e),HX_("testAssign",21,8c,fa,64)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testAssign,(void))

void TestObjects_obj::testCombine(){
            	HX_STACK_FRAME("thx.TestObjects","testCombine",0xeb378677,"thx.TestObjects.testCombine","thx/TestObjects.hx",62,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE(  63)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("age",bf,f4,49,00),(int)19)
            			->setFixed(1,HX_("name",4b,72,ff,48),HX_("Franco",45,e4,1a,e1)));
HXLINE(  64)		HX_VARI(  ::Dynamic,out) = ::thx::Objects_obj::combine(o, ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("age",bf,f4,49,00),HX_("Two",6c,25,40,00))
            			->setFixed(1,HX_("foo",06,c7,4d,00),HX_("bar",d3,b1,4a,00))
            			->setFixed(2,HX_("name",4b,72,ff,48),HX_("Michael",87,2c,21,c3))));
HXLINE(  66)		::utest::Assert_obj::same(HX_("Michael",87,2c,21,c3), ::Dynamic(out->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),66,HX_("thx.TestObjects",98,b7,59,3e),HX_("testCombine",4d,18,f7,36)));
HXLINE(  67)		::utest::Assert_obj::same(HX_("Two",6c,25,40,00), ::Dynamic(out->__Field(HX_("age",bf,f4,49,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),67,HX_("thx.TestObjects",98,b7,59,3e),HX_("testCombine",4d,18,f7,36)));
HXLINE(  68)		::utest::Assert_obj::same(HX_("bar",d3,b1,4a,00), ::Dynamic(out->__Field(HX_("foo",06,c7,4d,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),68,HX_("thx.TestObjects",98,b7,59,3e),HX_("testCombine",4d,18,f7,36)));
HXLINE(  69)		::utest::Assert_obj::same(HX_("Franco",45,e4,1a,e1), ::Dynamic(o->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),69,HX_("thx.TestObjects",98,b7,59,3e),HX_("testCombine",4d,18,f7,36)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testCombine,(void))

void TestObjects_obj::testMergeWithNullable(){
            	HX_STACK_FRAME("thx.TestObjects","testMergeWithNullable",0xfa6e2897,"thx.TestObjects.testMergeWithNullable","thx/TestObjects.hx",72,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE(  73)		HX_VARI(  ::Dynamic,a) = ::thx::Objects_obj::combine( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("bar",d3,b1,4a,00),HX_("qux",14,25,56,00))
            			->setFixed(1,HX_("foo",06,c7,4d,00),HX_("baz",db,b1,4a,00))), ::Dynamic(hx::Anon_obj::Create(0)));
HXLINE(  81)		::utest::Assert_obj::same(HX_("baz",db,b1,4a,00), ::Dynamic(a->__Field(HX_("foo",06,c7,4d,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),81,HX_("thx.TestObjects",98,b7,59,3e),HX_("testMergeWithNullable",ed,a1,9a,bf)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testMergeWithNullable,(void))

void TestObjects_obj::testMergeWithTypedef(){
            	HX_STACK_FRAME("thx.TestObjects","testMergeWithTypedef",0xf1b3bb15,"thx.TestObjects.testMergeWithTypedef","thx/TestObjects.hx",84,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE(  85)		HX_VARI(  ::Dynamic,to) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("bar",d3,b1,4a,00),HX_("qux",14,25,56,00)));
HXDLIN(  85)		HX_VARI(  ::Dynamic,from) =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("foo",06,c7,4d,00),HX_("baz",db,b1,4a,00))
            			->setFixed(1,HX_("extra",90,9a,22,77),HX_("field",ba,94,93,00)));
HXLINE(  93)		HX_VARI(  ::Dynamic,merged) = ::thx::Objects_obj::combine(to,from);
HXLINE(  95)		::utest::Assert_obj::same( ::Dynamic(merged->__Field(HX_("foo",06,c7,4d,00),hx::paccDynamic)), ::Dynamic(from->__Field(HX_("foo",06,c7,4d,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),95,HX_("thx.TestObjects",98,b7,59,3e),HX_("testMergeWithTypedef",7f,3e,3a,a2)));
HXLINE(  96)		::utest::Assert_obj::same( ::Dynamic(merged->__Field(HX_("bar",d3,b1,4a,00),hx::paccDynamic)), ::Dynamic(to->__Field(HX_("bar",d3,b1,4a,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),96,HX_("thx.TestObjects",98,b7,59,3e),HX_("testMergeWithTypedef",7f,3e,3a,a2)));
HXLINE(  97)		 ::Dynamic _hx_tmp = ::Reflect_obj::field(merged,HX_("extra",90,9a,22,77));
HXDLIN(  97)		::utest::Assert_obj::same(_hx_tmp,HX_("field",ba,94,93,00),null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),97,HX_("thx.TestObjects",98,b7,59,3e),HX_("testMergeWithTypedef",7f,3e,3a,a2)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testMergeWithTypedef,(void))

void TestObjects_obj::testHasPath(){
            	HX_STACK_FRAME("thx.TestObjects","testHasPath",0x8a9f6217,"thx.TestObjects.testHasPath","thx/TestObjects.hx",100,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE( 101)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47), ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("key2",b3,e1,06,47),(int)123)
            				->setFixed(1,HX_("key3",b4,e1,06,47),HX_("abc",62,f0,49,00))
            				->setFixed(2,HX_("key4",b5,e1,06,47),::Array_obj< ::String >::__new(2)->init(0,HX_("one",66,9a,54,00))->init(1,HX_("two",8c,6d,58,00)))
            				->setFixed(3,HX_("key5",b6,e1,06,47),::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("key6",b7,e1,06,47),HX_("test1",9f,7f,95,0d))))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("key6",b7,e1,06,47),HX_("test2",a0,7f,95,0d)))))
            				->setFixed(4,HX_("key6",b7,e1,06,47),null()))));
HXLINE( 117)		Bool _hx_tmp = ::thx::Objects_obj::hasPath(o,HX_("key1.key2",ef,49,65,be));
HXDLIN( 117)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),117,HX_("thx.TestObjects",98,b7,59,3e),HX_("testHasPath",ed,f3,5e,d6)));
HXLINE( 118)		Bool _hx_tmp1 = ::thx::Objects_obj::hasPath(o,HX_("key1.key4.1",74,90,c0,19));
HXDLIN( 118)		::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),118,HX_("thx.TestObjects",98,b7,59,3e),HX_("testHasPath",ed,f3,5e,d6)));
HXLINE( 119)		Bool _hx_tmp2 = ::thx::Objects_obj::hasPath(o,HX_("key1.key6",f3,49,65,be));
HXDLIN( 119)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),119,HX_("thx.TestObjects",98,b7,59,3e),HX_("testHasPath",ed,f3,5e,d6)));
HXLINE( 121)		Bool _hx_tmp3 = ::thx::Objects_obj::hasPath(o,HX_("key1.key4.2",75,90,c0,19));
HXDLIN( 121)		::utest::Assert_obj::isFalse(_hx_tmp3,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),121,HX_("thx.TestObjects",98,b7,59,3e),HX_("testHasPath",ed,f3,5e,d6)));
HXLINE( 122)		Bool _hx_tmp4 = ::thx::Objects_obj::hasPath(o,HX_("key1.key7",f4,49,65,be));
HXDLIN( 122)		::utest::Assert_obj::isFalse(_hx_tmp4,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),122,HX_("thx.TestObjects",98,b7,59,3e),HX_("testHasPath",ed,f3,5e,d6)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testHasPath,(void))

void TestObjects_obj::testHasPathValue(){
            	HX_STACK_FRAME("thx.TestObjects","testHasPathValue",0x857899da,"thx.TestObjects.testHasPathValue","thx/TestObjects.hx",125,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE( 126)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47), ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("key2",b3,e1,06,47),(int)123)
            				->setFixed(1,HX_("key3",b4,e1,06,47),HX_("abc",62,f0,49,00))
            				->setFixed(2,HX_("key4",b5,e1,06,47),::Array_obj< ::String >::__new(3)->init(0,HX_("one",66,9a,54,00))->init(1,HX_("two",8c,6d,58,00))->init(2,null()))
            				->setFixed(3,HX_("key5",b6,e1,06,47),::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("key6",b7,e1,06,47),HX_("test1",9f,7f,95,0d))))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("key6",b7,e1,06,47),HX_("test2",a0,7f,95,0d)))))
            				->setFixed(4,HX_("key6",b7,e1,06,47),null()))));
HXLINE( 143)		Bool _hx_tmp = ::thx::Objects_obj::hasPathValue(o,HX_("key1.key6",f3,49,65,be));
HXDLIN( 143)		::utest::Assert_obj::isFalse(_hx_tmp,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),143,HX_("thx.TestObjects",98,b7,59,3e),HX_("testHasPathValue",44,a0,0a,95)));
HXLINE( 144)		Bool _hx_tmp1 = ::thx::Objects_obj::hasPathValue(o,HX_("key1.key4.2",75,90,c0,19));
HXDLIN( 144)		::utest::Assert_obj::isFalse(_hx_tmp1,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),144,HX_("thx.TestObjects",98,b7,59,3e),HX_("testHasPathValue",44,a0,0a,95)));
HXLINE( 145)		Bool _hx_tmp2 = ::thx::Objects_obj::hasPathValue(o,HX_("key1.key7",f4,49,65,be));
HXDLIN( 145)		::utest::Assert_obj::isFalse(_hx_tmp2,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),145,HX_("thx.TestObjects",98,b7,59,3e),HX_("testHasPathValue",44,a0,0a,95)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testHasPathValue,(void))

void TestObjects_obj::testGetPath(){
            	HX_STACK_FRAME("thx.TestObjects","testGetPath",0x8dddf153,"thx.TestObjects.testGetPath","thx/TestObjects.hx",148,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE( 149)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47), ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("key2",b3,e1,06,47),(int)123)
            				->setFixed(1,HX_("key3",b4,e1,06,47),HX_("abc",62,f0,49,00))
            				->setFixed(2,HX_("key4",b5,e1,06,47),::Array_obj< ::String >::__new(2)->init(0,HX_("one",66,9a,54,00))->init(1,HX_("two",8c,6d,58,00)))
            				->setFixed(3,HX_("key5",b6,e1,06,47),::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("key6",b7,e1,06,47),HX_("test1",9f,7f,95,0d))))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("key6",b7,e1,06,47),HX_("test2",a0,7f,95,0d))))))));
HXLINE( 163)		 ::Dynamic _hx_tmp = ::thx::Objects_obj::getPath(o,HX_("key1.key2",ef,49,65,be));
HXDLIN( 163)		::utest::Assert_obj::same((int)123,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),163,HX_("thx.TestObjects",98,b7,59,3e),HX_("testGetPath",29,83,9d,d9)));
HXLINE( 164)		 ::Dynamic _hx_tmp1 = ::thx::Objects_obj::getPath(o,HX_("key1.key3",f0,49,65,be));
HXDLIN( 164)		::utest::Assert_obj::same(HX_("abc",62,f0,49,00),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),164,HX_("thx.TestObjects",98,b7,59,3e),HX_("testGetPath",29,83,9d,d9)));
HXLINE( 165)		 ::Dynamic _hx_tmp2 = ::thx::Objects_obj::getPath(o,HX_("key1.key4.0",73,90,c0,19));
HXDLIN( 165)		::utest::Assert_obj::same(HX_("one",66,9a,54,00),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),165,HX_("thx.TestObjects",98,b7,59,3e),HX_("testGetPath",29,83,9d,d9)));
HXLINE( 166)		 ::Dynamic _hx_tmp3 = ::thx::Objects_obj::getPath(o,HX_("key1.key4.1",74,90,c0,19));
HXDLIN( 166)		::utest::Assert_obj::same(HX_("two",8c,6d,58,00),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),166,HX_("thx.TestObjects",98,b7,59,3e),HX_("testGetPath",29,83,9d,d9)));
HXLINE( 167)		 ::Dynamic _hx_tmp4 = ::thx::Objects_obj::getPath(o,HX_("key1.key5",f2,49,65,be));
HXDLIN( 167)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key6",b7,e1,06,47),HX_("test1",9f,7f,95,0d))))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key6",b7,e1,06,47),HX_("test2",a0,7f,95,0d)))),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),167,HX_("thx.TestObjects",98,b7,59,3e),HX_("testGetPath",29,83,9d,d9)));
HXLINE( 168)		 ::Dynamic _hx_tmp5 = ::thx::Objects_obj::getPath(o,HX_("key1.key5.0.key6",b1,f1,e7,e9));
HXDLIN( 168)		::utest::Assert_obj::same(HX_("test1",9f,7f,95,0d),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),168,HX_("thx.TestObjects",98,b7,59,3e),HX_("testGetPath",29,83,9d,d9)));
HXLINE( 169)		 ::Dynamic _hx_tmp6 = ::thx::Objects_obj::getPath(o,HX_("key1.key5.1.key6",10,4e,43,50));
HXDLIN( 169)		::utest::Assert_obj::same(HX_("test2",a0,7f,95,0d),_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),169,HX_("thx.TestObjects",98,b7,59,3e),HX_("testGetPath",29,83,9d,d9)));
HXLINE( 171)		 ::Dynamic _hx_tmp7 = ::thx::Objects_obj::getPath(o,HX_("",00,00,00,00));
HXDLIN( 171)		::utest::Assert_obj::isNull(_hx_tmp7,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),171,HX_("thx.TestObjects",98,b7,59,3e),HX_("testGetPath",29,83,9d,d9)));
HXLINE( 172)		 ::Dynamic _hx_tmp8 = ::thx::Objects_obj::getPath(o,HX_("bad",c5,b1,4a,00));
HXDLIN( 172)		::utest::Assert_obj::isNull(_hx_tmp8,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),172,HX_("thx.TestObjects",98,b7,59,3e),HX_("testGetPath",29,83,9d,d9)));
HXLINE( 173)		 ::Dynamic _hx_tmp9 = ::thx::Objects_obj::getPath(o,HX_("bad.key",76,d2,a0,66));
HXDLIN( 173)		::utest::Assert_obj::isNull(_hx_tmp9,null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),173,HX_("thx.TestObjects",98,b7,59,3e),HX_("testGetPath",29,83,9d,d9)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testGetPath,(void))

void TestObjects_obj::testSetPath(){
            	HX_STACK_FRAME("thx.TestObjects","testSetPath",0x80df825f,"thx.TestObjects.testSetPath","thx/TestObjects.hx",176,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE( 177)		 ::Dynamic _hx_tmp = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(0)),HX_("key",9f,89,51,00),HX_("val",e1,de,59,00));
HXDLIN( 177)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("val",e1,de,59,00))),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),177,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 178)		 ::Dynamic _hx_tmp1 = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(0)),HX_("key1",b2,e1,06,47),HX_("val1",30,26,49,4e));
HXDLIN( 178)		 ::Dynamic _hx_tmp2 = ::thx::Objects_obj::setPath(_hx_tmp1,HX_("key2",b3,e1,06,47),HX_("val2",31,26,49,4e));
HXDLIN( 178)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("key1",b2,e1,06,47),HX_("val1",30,26,49,4e))
            			->setFixed(1,HX_("key2",b3,e1,06,47),HX_("val2",31,26,49,4e))),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),178,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 179)		 ::Dynamic _hx_tmp3 = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(0)),HX_("key1.key2",ef,49,65,be),HX_("val",e1,de,59,00));
HXDLIN( 179)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("key2",b3,e1,06,47),HX_("val",e1,de,59,00))))),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),179,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 180)		 ::Dynamic _hx_tmp4 = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(0)),HX_("key1.0.key2",ed,d1,8c,ce),HX_("val",e1,de,59,00));
HXDLIN( 180)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("key2",b3,e1,06,47),HX_("val",e1,de,59,00)))))),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),180,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 181)		 ::Dynamic _hx_tmp5 = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(0)),HX_("key1.0.0.1",79,09,05,bd),(int)123);
HXDLIN( 181)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47),::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< ::Dynamic>::__new(2)->init(0,null())->init(1,(int)123))))),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),181,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 182)		 ::Dynamic _hx_tmp6 = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(0)),HX_("key1.0.0.1.key2",c8,90,be,4b),HX_("val",e1,de,59,00));
HXDLIN( 182)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47),::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< ::Dynamic>::__new(2)->init(0,null())->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("key2",b3,e1,06,47),HX_("val",e1,de,59,00)))))))),_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),182,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 184)		 ::Dynamic _hx_tmp7 = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("before",7f,54,32,9a))),HX_("key",9f,89,51,00),HX_("val",e1,de,59,00));
HXDLIN( 184)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key",9f,89,51,00),HX_("val",e1,de,59,00))),_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),184,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 185)		 ::Dynamic _hx_tmp8 = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("key2",b3,e1,06,47),HX_("before",7f,54,32,9a))))),HX_("key1.key2",ef,49,65,be),HX_("val",e1,de,59,00));
HXDLIN( 185)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("key2",b3,e1,06,47),HX_("val",e1,de,59,00))))),_hx_tmp8,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),185,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 186)		 ::Dynamic _hx_tmp9 = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("key2",b3,e1,06,47),::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3))))),HX_("key1.key2.1",f2,0b,bf,19),(int)55);
HXDLIN( 186)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("key2",b3,e1,06,47),::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)55)->init(2,(int)3))))),_hx_tmp9,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),186,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 187)		 ::Dynamic _hx_tmp10 = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("key1",b2,e1,06,47),(int)123)),HX_("newKey",1f,ed,9b,71),HX_("val",e1,de,59,00));
HXDLIN( 187)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("key1",b2,e1,06,47),(int)123)
            			->setFixed(1,HX_("newKey",1f,ed,9b,71),HX_("val",e1,de,59,00))),_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),187,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 189)		 ::Dynamic _hx_tmp11 = ::thx::Objects_obj::setPath(::cpp::VirtualArray_obj::__new(0),HX_("*",2a,00,00,00),(int)1);
HXDLIN( 189)		 ::Dynamic _hx_tmp12 = ::thx::Objects_obj::setPath(_hx_tmp11,HX_("*",2a,00,00,00),(int)2);
HXDLIN( 189)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),_hx_tmp12,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),189,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 190)		 ::Dynamic _hx_tmp13 = ::thx::Objects_obj::setPath( ::Dynamic(hx::Anon_obj::Create(0)),HX_("list.*",1a,98,f9,ef),(int)1);
HXDLIN( 190)		 ::Dynamic _hx_tmp14 = ::thx::Objects_obj::setPath(_hx_tmp13,HX_("list.*",1a,98,f9,ef),(int)2);
HXDLIN( 190)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("list",5e,1c,b3,47),::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2))),_hx_tmp14,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),190,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 191)		 ::Dynamic _hx_tmp15 = ::thx::Objects_obj::setPath(::cpp::VirtualArray_obj::__new(0),HX_("0.*",6c,94,24,00),(int)1);
HXDLIN( 191)		 ::Dynamic _hx_tmp16 = ::thx::Objects_obj::setPath(_hx_tmp15,HX_("0.*",6c,94,24,00),(int)2);
HXDLIN( 191)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2)),_hx_tmp16,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),191,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
HXLINE( 192)		 ::Dynamic _hx_tmp17 = ::thx::Objects_obj::setPath(::cpp::VirtualArray_obj::__new(0),HX_("0.*",6c,94,24,00),(int)1);
HXDLIN( 192)		 ::Dynamic _hx_tmp18 = ::thx::Objects_obj::setPath(_hx_tmp17,HX_("*.*",e6,06,20,00),(int)2);
HXDLIN( 192)		::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,::cpp::VirtualArray_obj::__new(1)->init(0,(int)1))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,(int)2)),_hx_tmp18,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),192,HX_("thx.TestObjects",98,b7,59,3e),HX_("testSetPath",35,14,9f,cc)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testSetPath,(void))

void TestObjects_obj::testRemovePath(){
            	HX_STACK_FRAME("thx.TestObjects","testRemovePath",0xac5f8f11,"thx.TestObjects.testRemovePath","thx/TestObjects.hx",195,0x6ee9f9e7)
            	HX_STACK_THIS(this)
HXLINE( 196)		HX_VARI(  ::Dynamic,simple) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00),HX_("bar",d3,b1,4a,00)));
HXLINE( 197)		HX_VARI(  ::Dynamic,nested) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("bar",d3,b1,4a,00), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("baz",db,b1,4a,00),HX_("qux",14,25,56,00))
            					->setFixed(1,HX_("other",d0,66,76,36),HX_("other",d0,66,76,36)))))));
HXLINE( 205)		HX_VARI(  ::Dynamic,arr) =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00),::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(0)))->init(1, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("bar",d3,b1,4a,00),HX_("baz",db,b1,4a,00))))));
HXLINE( 211)		 ::Dynamic _hx_tmp = ::thx::Objects_obj::removePath(simple,HX_("foo",06,c7,4d,00));
HXDLIN( 211)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),211,HX_("thx.TestObjects",98,b7,59,3e),HX_("testRemovePath",fb,46,64,67)));
HXLINE( 212)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(0)),simple,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),212,HX_("thx.TestObjects",98,b7,59,3e),HX_("testRemovePath",fb,46,64,67)));
HXLINE( 213)		 ::Dynamic _hx_tmp1 = ::thx::Objects_obj::removePath(simple,HX_("a.b.c.d",c0,89,04,b2));
HXDLIN( 213)		::utest::Assert_obj::same(simple,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),213,HX_("thx.TestObjects",98,b7,59,3e),HX_("testRemovePath",fb,46,64,67)));
HXLINE( 215)		 ::Dynamic _hx_tmp2 = ::thx::Objects_obj::removePath(nested,HX_("foo.bar.other",8d,e6,7b,46));
HXDLIN( 215)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("bar",d3,b1,4a,00), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("baz",db,b1,4a,00),HX_("qux",14,25,56,00))))))),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),215,HX_("thx.TestObjects",98,b7,59,3e),HX_("testRemovePath",fb,46,64,67)));
HXLINE( 217)		 ::Dynamic _hx_tmp3 = ::thx::Objects_obj::removePath(arr,HX_("foo.0.bar",2d,c3,36,07));
HXDLIN( 217)		::utest::Assert_obj::same(arr,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),217,HX_("thx.TestObjects",98,b7,59,3e),HX_("testRemovePath",fb,46,64,67)));
HXLINE( 218)		 ::Dynamic _hx_tmp4 = ::thx::Objects_obj::removePath(arr,HX_("foo.1.bar",ae,57,9d,9a));
HXDLIN( 218)		::utest::Assert_obj::same( ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("foo",06,c7,4d,00),::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(0)))->init(1, ::Dynamic(hx::Anon_obj::Create(0))))),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestObjects.hx",7c,d1,ce,2d),218,HX_("thx.TestObjects",98,b7,59,3e),HX_("testRemovePath",fb,46,64,67)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestObjects_obj,testRemovePath,(void))


TestObjects_obj::TestObjects_obj()
{
}

hx::Val TestObjects_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"testAssign") ) { return hx::Val( testAssign_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testObjects") ) { return hx::Val( testObjects_dyn()); }
		if (HX_FIELD_EQ(inName,"testCombine") ) { return hx::Val( testCombine_dyn()); }
		if (HX_FIELD_EQ(inName,"testHasPath") ) { return hx::Val( testHasPath_dyn()); }
		if (HX_FIELD_EQ(inName,"testGetPath") ) { return hx::Val( testGetPath_dyn()); }
		if (HX_FIELD_EQ(inName,"testSetPath") ) { return hx::Val( testSetPath_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testRemovePath") ) { return hx::Val( testRemovePath_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testHasPathValue") ) { return hx::Val( testHasPathValue_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testIssue20151201") ) { return hx::Val( testIssue20151201_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"testMergeWithTypedef") ) { return hx::Val( testMergeWithTypedef_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"testMergeWithNullable") ) { return hx::Val( testMergeWithNullable_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestObjects_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestObjects_obj_sStaticStorageInfo = 0;
#endif

static ::String TestObjects_obj_sMemberFields[] = {
	HX_HCSTRING("testIssue20151201","\x6b","\xe3","\x44","\xb0"),
	HX_HCSTRING("testObjects","\xa2","\x56","\x18","\x3f"),
	HX_HCSTRING("testAssign","\x21","\x8c","\xfa","\x64"),
	HX_HCSTRING("testCombine","\x4d","\x18","\xf7","\x36"),
	HX_HCSTRING("testMergeWithNullable","\xed","\xa1","\x9a","\xbf"),
	HX_HCSTRING("testMergeWithTypedef","\x7f","\x3e","\x3a","\xa2"),
	HX_HCSTRING("testHasPath","\xed","\xf3","\x5e","\xd6"),
	HX_HCSTRING("testHasPathValue","\x44","\xa0","\x0a","\x95"),
	HX_HCSTRING("testGetPath","\x29","\x83","\x9d","\xd9"),
	HX_HCSTRING("testSetPath","\x35","\x14","\x9f","\xcc"),
	HX_HCSTRING("testRemovePath","\xfb","\x46","\x64","\x67"),
	::String(null()) };

static void TestObjects_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestObjects_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestObjects_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestObjects_obj::__mClass,"__mClass");
};

#endif

hx::Class TestObjects_obj::__mClass;

void TestObjects_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestObjects","\x98","\xb7","\x59","\x3e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestObjects_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestObjects_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestObjects_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestObjects_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestObjects_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestObjects_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
