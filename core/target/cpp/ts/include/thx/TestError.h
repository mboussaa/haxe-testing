// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestError
#define INCLUDED_thx_TestError

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,TestError)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestError_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestError_obj OBJ_;
		TestError_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.TestError")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.TestError"); }
		static hx::ObjectPtr< TestError_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestError_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestError","\xf6","\xe9","\xfe","\xdd"); }

		void testAbstract();
		::Dynamic testAbstract_dyn();

		void testNotImplemented();
		::Dynamic testNotImplemented_dyn();

		void testNullArgument();
		::Dynamic testNullArgument_dyn();

		void testNullArgumentUsing();
		::Dynamic testNullArgumentUsing_dyn();

		void testEmptyArray();
		::Dynamic testEmptyArray_dyn();

		void testEmptyString();
		::Dynamic testEmptyString_dyn();

		void testEmptyIterator();
		::Dynamic testEmptyIterator_dyn();

		void testEmptyIterable();
		::Dynamic testEmptyIterable_dyn();

		void nullInt( ::Dynamic i);
		::Dynamic nullInt_dyn();

		void nullUsingInt( ::Dynamic i);
		::Dynamic nullUsingInt_dyn();

		void emptyArray(::Array< Int > arr);
		::Dynamic emptyArray_dyn();

		void emptyString(::String s);
		::Dynamic emptyString_dyn();

		void emptyIterator( ::Dynamic it);
		::Dynamic emptyIterator_dyn();

		void emptyIterable( ::Dynamic it);
		::Dynamic emptyIterable_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestError */ 
