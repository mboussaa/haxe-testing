// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__Path_Path_Impl_
#define INCLUDED_thx__Path_Path_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,_Path,Path_Impl_)

namespace thx{
namespace _Path{


class HXCPP_CLASS_ATTRIBUTES Path_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Path_Impl__obj OBJ_;
		Path_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._Path.Path_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._Path.Path_Impl_"); }
		static hx::ObjectPtr< Path_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Path_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Path_Impl_","\x25","\x70","\xdb","\x20"); }

		static void __boot();
		static ::String nixSeparator;
		static ::String win32Separator;
		static Bool isValidNix(::Array< ::String > path);
		static ::Dynamic isValidNix_dyn();

		static Bool isValidWin32(::Array< ::String > path);
		static ::Dynamic isValidWin32_dyn();

		static ::Array< ::String > normalizeNix(::Array< ::String > path,::String replacement);
		static ::Dynamic normalizeNix_dyn();

		static ::Array< ::String > normalizeWin32(::Array< ::String > path,::String replacement);
		static ::Dynamic normalizeWin32_dyn();

		static ::Array< ::String > fromString(::String s);
		static ::Dynamic fromString_dyn();

		static ::Array< ::String > resolve(::Array< ::String > path,Bool isAbsolute);
		static ::Dynamic resolve_dyn();

		static ::Array< ::String > create(::String root,::Array< ::String > path,::String sep);
		static ::Dynamic create_dyn();

		static ::Array< ::String > raw(::Array< ::String > parts);
		static ::Dynamic raw_dyn();

		static ::Array< ::String > _new(::Array< ::String > parts);
		static ::Dynamic _new_dyn();

		static ::Array< ::String > asAbsolute(::Array< ::String > this1,::String root);
		static ::Dynamic asAbsolute_dyn();

		static ::Array< ::String > asRelative(::Array< ::String > this1);
		static ::Dynamic asRelative_dyn();

		static ::Array< ::String > normalize(::Array< ::String > this1);
		static ::Dynamic normalize_dyn();

		static Bool isAbsolute(::Array< ::String > this1);
		static ::Dynamic isAbsolute_dyn();

		static Bool isRelative(::Array< ::String > this1);
		static ::Dynamic isRelative_dyn();

		static Bool isRoot(::Array< ::String > this1);
		static ::Dynamic isRoot_dyn();

		static Bool isNix(::Array< ::String > this1);
		static ::Dynamic isNix_dyn();

		static Bool isWin32(::Array< ::String > this1);
		static ::Dynamic isWin32_dyn();

		static Bool isValid(::Array< ::String > this1);
		static ::Dynamic isValid_dyn();

		static ::String noext(::Array< ::String > this1);
		static ::Dynamic noext_dyn();

		static ::String base(::Array< ::String > this1,::String end);
		static ::Dynamic base_dyn();

		static ::String ext(::Array< ::String > this1);
		static ::Dynamic ext_dyn();

		static ::String dir(::Array< ::String > this1);
		static ::Dynamic dir_dyn();

		static ::Array< ::String > map(::Array< ::String > this1, ::Dynamic handler);
		static ::Dynamic map_dyn();

		static ::Array< ::Dynamic> hierarchy(::Array< ::String > this1);
		static ::Dynamic hierarchy_dyn();

		static  ::Dynamic iterator(::Array< ::String > this1);
		static ::Dynamic iterator_dyn();

		static ::Array< ::String > pathTo(::Array< ::String > this1,::Array< ::String > destination);
		static ::Dynamic pathTo_dyn();

		static ::Array< ::String > sibling(::Array< ::String > this1,::Array< ::String > path);
		static ::Dynamic sibling_dyn();

		static ::Array< ::String > toNix(::Array< ::String > this1);
		static ::Dynamic toNix_dyn();

		static ::Array< ::String > toWin32(::Array< ::String > this1,::String root);
		static ::Dynamic toWin32_dyn();

		static ::Array< ::String > up(::Array< ::String > this1, ::Dynamic n);
		static ::Dynamic up_dyn();

		static ::Array< ::String > withExt(::Array< ::String > this1,::String newextension);
		static ::Dynamic withExt_dyn();

		static ::Array< ::String > join(::Array< ::String > this1,::Array< ::String > other);
		static ::Dynamic join_dyn();

		static ::String toString(::Array< ::String > this1);
		static ::Dynamic toString_dyn();

		static ::Array< ::String > get_path(::Array< ::String > this1);
		static ::Dynamic get_path_dyn();

		static ::String get_root(::Array< ::String > this1);
		static ::Dynamic get_root_dyn();

		static ::String get_sep(::Array< ::String > this1);
		static ::Dynamic get_sep_dyn();

		static ::Array< ::String > get_self(::Array< ::String > this1);
		static ::Dynamic get_self_dyn();

};

} // end namespace thx
} // end namespace _Path

#endif /* INCLUDED_thx__Path_Path_Impl_ */ 
