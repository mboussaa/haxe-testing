// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestHashSet
#define INCLUDED_thx_TestHashSet

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,TestHashSet)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestHashSet_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestHashSet_obj OBJ_;
		TestHashSet_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.TestHashSet")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.TestHashSet"); }
		static hx::ObjectPtr< TestHashSet_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestHashSet_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestHashSet","\x22","\xfe","\x63","\xca"); }

		void testCreate();
		::Dynamic testCreate_dyn();

		void testEmpty();
		::Dynamic testEmpty_dyn();

		void testExists();
		::Dynamic testExists_dyn();

		void testAdd();
		::Dynamic testAdd_dyn();

		void testPush();
		::Dynamic testPush_dyn();

		void testRemove();
		::Dynamic testRemove_dyn();

		void testCopy();
		::Dynamic testCopy_dyn();

		void testUnion();
		::Dynamic testUnion_dyn();

		void testIntersection();
		::Dynamic testIntersection_dyn();

		void testDifference();
		::Dynamic testDifference_dyn();

		void testSymmetricDifference();
		::Dynamic testSymmetricDifference_dyn();

		void testToArray();
		::Dynamic testToArray_dyn();

		void testToString();
		::Dynamic testToString_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestHashSet */ 
