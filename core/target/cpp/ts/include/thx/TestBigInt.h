// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestBigInt
#define INCLUDED_thx_TestBigInt

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,TestBigInt)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestBigInt_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestBigInt_obj OBJ_;
		TestBigInt_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.TestBigInt")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.TestBigInt"); }
		static hx::ObjectPtr< TestBigInt_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestBigInt_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestBigInt","\x21","\x4e","\xfe","\xf7"); }

		void testIssue82();
		::Dynamic testIssue82_dyn();

		void testFromInt64();
		::Dynamic testFromInt64_dyn();

		void testLcmAndGcd();
		::Dynamic testLcmAndGcd_dyn();

		void testIncrements();
		::Dynamic testIncrements_dyn();

		void testCanHandleLargeNumbers();
		::Dynamic testCanHandleLargeNumbers_dyn();

		void testIsImmutable();
		::Dynamic testIsImmutable_dyn();

		void testInts();
		::Dynamic testInts_dyn();

		void testFloats();
		::Dynamic testFloats_dyn();

		void testStrings();
		::Dynamic testStrings_dyn();

		void testEquals();
		::Dynamic testEquals_dyn();

		void testIgnoreLeadingZeros();
		::Dynamic testIgnoreLeadingZeros_dyn();

		void testNumbersShouldBeTheSameWhenConstructedDifferently();
		::Dynamic testNumbersShouldBeTheSameWhenConstructedDifferently_dyn();

		void testFibonacci();
		::Dynamic testFibonacci_dyn();

		void testCarriesOverCorrectly();
		::Dynamic testCarriesOverCorrectly_dyn();

		void testMisc();
		::Dynamic testMisc_dyn();

		void testMultiplyHandlesSignsCorectly();
		::Dynamic testMultiplyHandlesSignsCorectly_dyn();

		void testDivisionBy1IsTheIdentity();
		::Dynamic testDivisionBy1IsTheIdentity_dyn();

		void testDivisionBySelfIs1();
		::Dynamic testDivisionBySelfIs1_dyn();

		void testDivisionOf0Equals0();
		::Dynamic testDivisionOf0Equals0_dyn();

		void testModulo0ThrowsError();
		::Dynamic testModulo0ThrowsError_dyn();

		void testModuloHandlesSignsCorrectly();
		::Dynamic testModuloHandlesSignsCorrectly_dyn();

		void testPrevNext();
		::Dynamic testPrevNext_dyn();

		void testPrevNextCarriesOverCorrectly();
		::Dynamic testPrevNextCarriesOverCorrectly_dyn();

		void testAbs();
		::Dynamic testAbs_dyn();

		void testIsPositiveAndIsNegative();
		::Dynamic testIsPositiveAndIsNegative_dyn();

		void testIsPositiveAndIsNegativeWorkForSmallNumbers();
		::Dynamic testIsPositiveAndIsNegativeWorkForSmallNumbers_dyn();

		void testIsPositiveAndIsNegativeWorkForBigNumbers();
		::Dynamic testIsPositiveAndIsNegativeWorkForBigNumbers_dyn();

		void testIsUnit();
		::Dynamic testIsUnit_dyn();

		void testIsZero();
		::Dynamic testIsZero_dyn();

		void testSquare();
		::Dynamic testSquare_dyn();

		void testPowerToNegativeNumbersIs0();
		::Dynamic testPowerToNegativeNumbersIs0_dyn();

		void testPowerHandlesSignsCorrectly();
		::Dynamic testPowerHandlesSignsCorrectly_dyn();

		void testPower();
		::Dynamic testPower_dyn();

		void testPowerOf0to0is1();
		::Dynamic testPowerOf0to0is1_dyn();

		void testPowerCarriesOverCorrectly();
		::Dynamic testPowerCarriesOverCorrectly_dyn();

		void testDivision();
		::Dynamic testDivision_dyn();

		void testAddition();
		::Dynamic testAddition_dyn();

		void testMultiplication();
		::Dynamic testMultiplication_dyn();

		void testComparison();
		::Dynamic testComparison_dyn();

		void testNegation();
		::Dynamic testNegation_dyn();

		void testBigIntParsesNumbersCorrectly();
		::Dynamic testBigIntParsesNumbersCorrectly_dyn();

		void testBigIntOutputsNumbersCorrectly();
		::Dynamic testBigIntOutputsNumbersCorrectly_dyn();

		void testShiftingLeftAndRight();
		::Dynamic testShiftingLeftAndRight_dyn();

		void testBitwiseOperations();
		::Dynamic testBitwiseOperations_dyn();

		void testIsEvenAndIsOdd();
		::Dynamic testIsEvenAndIsOdd_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestBigInt */ 
