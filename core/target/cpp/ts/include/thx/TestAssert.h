// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestAssert
#define INCLUDED_thx_TestAssert

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,CollectBehavior)
HX_DECLARE_CLASS1(thx,IAssertBehavior)
HX_DECLARE_CLASS1(thx,TestAssert)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestAssert_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestAssert_obj OBJ_;
		TestAssert_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="thx.TestAssert")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"thx.TestAssert"); }
		static hx::ObjectPtr< TestAssert_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestAssert_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("TestAssert","\xd8","\x90","\xa8","\x5b"); }

		::Dynamic orig;
		 ::thx::CollectBehavior behavior;
		void setup();
		::Dynamic setup_dyn();

		void teardown();
		::Dynamic teardown_dyn();

		void testIsBool();
		::Dynamic testIsBool_dyn();

		void testIsNull();
		::Dynamic testIsNull_dyn();

		void testNotNull();
		::Dynamic testNotNull_dyn();

		void testRaisesSuccess();
		::Dynamic testRaisesSuccess_dyn();

		void testRaisesFailure();
		::Dynamic testRaisesFailure_dyn();

		void testIs();
		::Dynamic testIs_dyn();

		void testSamePrimitive();
		::Dynamic testSamePrimitive_dyn();

		void testSameType();
		::Dynamic testSameType_dyn();

		void testSameArray();
		::Dynamic testSameArray_dyn();

		void testSameObject();
		::Dynamic testSameObject_dyn();

		::String value;
		 ::thx::TestAssert sub;
		void testSameInstance();
		::Dynamic testSameInstance_dyn();

		void testSameIterable();
		::Dynamic testSameIterable_dyn();

		void testSameMap();
		::Dynamic testSameMap_dyn();

		void testSameEnums();
		::Dynamic testSameEnums_dyn();

		void testEquals();
		::Dynamic testEquals_dyn();

		void testNearEqualsSuccess();
		::Dynamic testNearEqualsSuccess_dyn();

		void testNearEqualsFail();
		::Dynamic testNearEqualsFail_dyn();

		void testPass();
		::Dynamic testPass_dyn();

		void testFail();
		::Dynamic testFail_dyn();

		void testWarn();
		::Dynamic testWarn_dyn();

		void expect(Int successes,Int failures,hx::Null< Int >  warnings, ::Dynamic pos);
		::Dynamic expect_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestAssert */ 
