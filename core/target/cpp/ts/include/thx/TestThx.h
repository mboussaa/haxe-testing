// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestThx
#define INCLUDED_thx_TestThx

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,TestThx)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestThx_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestThx_obj OBJ_;
		TestThx_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.TestThx")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.TestThx"); }
		static hx::ObjectPtr< TestThx_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestThx_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestThx","\x32","\xf7","\x17","\x8b"); }

		void testUsing();
		::Dynamic testUsing_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestThx */ 
