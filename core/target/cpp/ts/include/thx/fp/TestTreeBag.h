// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_fp_TestTreeBag
#define INCLUDED_thx_fp_TestTreeBag

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,fp,TestTreeBag)
HX_DECLARE_CLASS2(thx,fp,TreeBagImpl)

namespace thx{
namespace fp{


class HXCPP_CLASS_ATTRIBUTES TestTreeBag_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestTreeBag_obj OBJ_;
		TestTreeBag_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.fp.TestTreeBag")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.fp.TestTreeBag"); }
		static hx::ObjectPtr< TestTreeBag_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestTreeBag_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestTreeBag","\xb8","\x04","\xd2","\x77"); }

		static void __boot();
		static ::hx::EnumBase t0;
		static ::hx::EnumBase t1;
		static ::hx::EnumBase t2;
		::hx::EnumBase plusOneBag(Int i);
		::Dynamic plusOneBag_dyn();

		::hx::EnumBase plusTwoBags(Int i);
		::Dynamic plusTwoBags_dyn();

		void testMap();
		::Dynamic testMap_dyn();

		void testToArray();
		::Dynamic testToArray_dyn();

		void testFlatMap();
		::Dynamic testFlatMap_dyn();

};

} // end namespace thx
} // end namespace fp

#endif /* INCLUDED_thx_fp_TestTreeBag */ 
