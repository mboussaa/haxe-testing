// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_fp_IntMap
#define INCLUDED_thx_fp_IntMap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,Option)
HX_DECLARE_CLASS2(thx,fp,IntMap)
HX_DECLARE_CLASS2(thx,fp,MapImpl)

namespace thx{
namespace fp{


class HXCPP_CLASS_ATTRIBUTES IntMap_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef IntMap_obj OBJ_;
		IntMap_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.fp.IntMap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.fp.IntMap"); }
		static hx::ObjectPtr< IntMap_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~IntMap_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("IntMap","\x0d","\xa9","\x08","\xd3"); }

		static Bool exists(::hx::EnumBase map,Int key);
		static ::Dynamic exists_dyn();

		static ::hx::EnumBase get(::hx::EnumBase map,Int key);
		static ::Dynamic get_dyn();

		static  ::Dynamic getAlt(::hx::EnumBase map,Int key, ::Dynamic alt);
		static ::Dynamic getAlt_dyn();

		static ::hx::EnumBase set(::hx::EnumBase map,Int key, ::Dynamic value);
		static ::Dynamic set_dyn();

		static ::hx::EnumBase remove(::hx::EnumBase map,Int key);
		static ::Dynamic remove_dyn();

		static ::hx::EnumBase fromNative(::Dynamic map);
		static ::Dynamic fromNative_dyn();

		static  ::haxe::ds::IntMap toNative(::hx::EnumBase map);
		static ::Dynamic toNative_dyn();

		static ::hx::EnumBase merge(::hx::EnumBase a,::hx::EnumBase b);
		static ::Dynamic merge_dyn();

};

} // end namespace thx
} // end namespace fp

#endif /* INCLUDED_thx_fp_IntMap */ 
