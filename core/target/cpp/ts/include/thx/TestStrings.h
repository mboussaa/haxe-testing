// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestStrings
#define INCLUDED_thx_TestStrings

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,TestStrings)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestStrings_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestStrings_obj OBJ_;
		TestStrings_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.TestStrings")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.TestStrings"); }
		static hx::ObjectPtr< TestStrings_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestStrings_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestStrings","\x30","\x14","\xef","\x99"); }

		void testLowerUpperCaseFirst();
		::Dynamic testLowerUpperCaseFirst_dyn();

		void testContains();
		::Dynamic testContains_dyn();

		void testCount();
		::Dynamic testCount_dyn();

		void testContainsAny();
		::Dynamic testContainsAny_dyn();

		void testHashCode();
		::Dynamic testHashCode_dyn();

		void testUcwordsws();
		::Dynamic testUcwordsws_dyn();

		void testDifferAt();
		::Dynamic testDifferAt_dyn();

		void testEllipsis();
		::Dynamic testEllipsis_dyn();

		void testEllipsisMiddle();
		::Dynamic testEllipsisMiddle_dyn();

		void testUcwords();
		::Dynamic testUcwords_dyn();

		void testAlphaNum();
		::Dynamic testAlphaNum_dyn();

		void testHumanize();
		::Dynamic testHumanize_dyn();

		void testWrapColumn();
		::Dynamic testWrapColumn_dyn();

		void testWrapColumnPreserveNewLines();
		::Dynamic testWrapColumnPreserveNewLines_dyn();

		void testWrapColumnLong();
		::Dynamic testWrapColumnLong_dyn();

		void testRepeat();
		::Dynamic testRepeat_dyn();

		void testUpTo();
		::Dynamic testUpTo_dyn();

		void testFrom();
		::Dynamic testFrom_dyn();

		void testAfter();
		::Dynamic testAfter_dyn();

		void testStripTags();
		::Dynamic testStripTags_dyn();

		void testLtrim();
		::Dynamic testLtrim_dyn();

		void testRtrim();
		::Dynamic testRtrim_dyn();

		void testTrim();
		::Dynamic testTrim_dyn();

		void testToArray();
		::Dynamic testToArray_dyn();

		void testToLines();
		::Dynamic testToLines_dyn();

		void testReverse();
		::Dynamic testReverse_dyn();

		void testOrder();
		::Dynamic testOrder_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestStrings */ 
