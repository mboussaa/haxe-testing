// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_Timer
#define INCLUDED_thx_Timer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(thx,Timer)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES Timer_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Timer_obj OBJ_;
		Timer_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.Timer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.Timer"); }
		static hx::ObjectPtr< Timer_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Timer_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Timer","\xa5","\x2f","\x63","\xa3"); }

		static void __boot();
		static  ::Dynamic debounce( ::Dynamic callback,Int delayms,hx::Null< Bool >  leading);
		static ::Dynamic debounce_dyn();

		static  ::Dynamic throttle( ::Dynamic callback,Int delayms,hx::Null< Bool >  leading);
		static ::Dynamic throttle_dyn();

		static  ::haxe::ds::IntMap timers;
		static Int _id;
		static  ::Dynamic repeat( ::Dynamic callback,Int delayms);
		static ::Dynamic repeat_dyn();

		static  ::Dynamic delay( ::Dynamic callback,Int delayms);
		static ::Dynamic delay_dyn();

		static  ::Dynamic frame( ::Dynamic callback);
		static ::Dynamic frame_dyn();

		static  ::Dynamic nextFrame( ::Dynamic callback);
		static ::Dynamic nextFrame_dyn();

		static Int FRAME_RATE;
		static  ::Dynamic immediate( ::Dynamic callback);
		static ::Dynamic immediate_dyn();

		static void clear( ::Dynamic id);
		static ::Dynamic clear_dyn();

		static Float time();
		static ::Dynamic time_dyn();

		static  ::Dynamic _resolution;
		static Float resolution();
		static ::Dynamic resolution_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_Timer */ 
