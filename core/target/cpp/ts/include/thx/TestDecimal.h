// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestDecimal
#define INCLUDED_thx_TestDecimal

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,TestDecimal)
HX_DECLARE_CLASS2(thx,bigint,DecimalImpl)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestDecimal_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestDecimal_obj OBJ_;
		TestDecimal_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.TestDecimal")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.TestDecimal"); }
		static hx::ObjectPtr< TestDecimal_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestDecimal_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestDecimal","\x3f","\x3a","\xcf","\x87"); }

		Int divisionSize;
		void setup();
		::Dynamic setup_dyn();

		void teardown();
		::Dynamic teardown_dyn();

		void testToBigInt();
		::Dynamic testToBigInt_dyn();

		void testTrim();
		::Dynamic testTrim_dyn();

		void testStringExp();
		::Dynamic testStringExp_dyn();

		void testModulo();
		::Dynamic testModulo_dyn();

		void testDivision();
		::Dynamic testDivision_dyn();

		void testMultiply();
		::Dynamic testMultiply_dyn();

		void testInts();
		::Dynamic testInts_dyn();

		void testFloats();
		::Dynamic testFloats_dyn();

		void testEquality();
		::Dynamic testEquality_dyn();

		void testAddition();
		::Dynamic testAddition_dyn();

		void testSubtraction();
		::Dynamic testSubtraction_dyn();

		void testComparison();
		::Dynamic testComparison_dyn();

		void testString();
		::Dynamic testString_dyn();

		void assertDecimalEquals( ::thx::bigint::DecimalImpl test, ::thx::bigint::DecimalImpl expected, ::Dynamic pos);
		::Dynamic assertDecimalEquals_dyn();

		void testRound();
		::Dynamic testRound_dyn();

		void testScaleTo();
		::Dynamic testScaleTo_dyn();

		void testNegativePow();
		::Dynamic testNegativePow_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestDecimal */ 
