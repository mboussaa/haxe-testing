// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestReadonlyArray
#define INCLUDED_thx_TestReadonlyArray

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,TestReadonlyArray)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestReadonlyArray_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestReadonlyArray_obj OBJ_;
		TestReadonlyArray_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.TestReadonlyArray")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.TestReadonlyArray"); }
		static hx::ObjectPtr< TestReadonlyArray_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestReadonlyArray_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestReadonlyArray","\xa5","\xc6","\x72","\x9a"); }

		void testInsertAt();
		::Dynamic testInsertAt_dyn();

		void testReplaceAt();
		::Dynamic testReplaceAt_dyn();

		void testPush();
		::Dynamic testPush_dyn();

		void testPop();
		::Dynamic testPop_dyn();

		void testShift();
		::Dynamic testShift_dyn();

		void testUnshift();
		::Dynamic testUnshift_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestReadonlyArray */ 
