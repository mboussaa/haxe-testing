// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_utest_Dispatcher
#include <utest/Dispatcher.h>
#endif
#ifndef INCLUDED_utest_ui_common_ResultStats
#include <utest/ui/common/ResultStats.h>
#endif

namespace utest{
namespace ui{
namespace common{

void ResultStats_obj::__construct(){
            	HX_STACK_FRAME("utest.ui.common.ResultStats","new",0x287a5584,"utest.ui.common.ResultStats.new","utest/ui/common/ResultStats.hx",21,0x86a8eb8d)
            	HX_STACK_THIS(this)
HXLINE(  22)		this->assertations = (int)0;
HXLINE(  23)		this->successes = (int)0;
HXLINE(  24)		this->failures = (int)0;
HXLINE(  25)		this->errors = (int)0;
HXLINE(  26)		this->warnings = (int)0;
HXLINE(  28)		this->isOk = true;
HXLINE(  29)		this->hasFailures = false;
HXLINE(  30)		this->hasErrors = false;
HXLINE(  31)		this->hasWarnings = false;
HXLINE(  33)		this->onAddSuccesses =  ::utest::Dispatcher_obj::__new();
HXLINE(  34)		this->onAddFailures =  ::utest::Dispatcher_obj::__new();
HXLINE(  35)		this->onAddErrors =  ::utest::Dispatcher_obj::__new();
HXLINE(  36)		this->onAddWarnings =  ::utest::Dispatcher_obj::__new();
            	}

Dynamic ResultStats_obj::__CreateEmpty() { return new ResultStats_obj; }

hx::ObjectPtr< ResultStats_obj > ResultStats_obj::__new()
{
	hx::ObjectPtr< ResultStats_obj > _hx_result = new ResultStats_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ResultStats_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ResultStats_obj > _hx_result = new ResultStats_obj();
	_hx_result->__construct();
	return _hx_result;
}

void ResultStats_obj::addSuccesses(Int v){
            	HX_STACK_FRAME("utest.ui.common.ResultStats","addSuccesses",0x61a38cec,"utest.ui.common.ResultStats.addSuccesses","utest/ui/common/ResultStats.hx",39,0x86a8eb8d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  40)		if ((v == (int)0)) {
HXLINE(  40)			return;
            		}
HXLINE(  41)		hx::AddEq(this->assertations,v);
HXLINE(  42)		hx::AddEq(this->successes,v);
HXLINE(  43)		this->onAddSuccesses->dispatch(v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultStats_obj,addSuccesses,(void))

void ResultStats_obj::addFailures(Int v){
            	HX_STACK_FRAME("utest.ui.common.ResultStats","addFailures",0x092a514e,"utest.ui.common.ResultStats.addFailures","utest/ui/common/ResultStats.hx",46,0x86a8eb8d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  47)		if ((v == (int)0)) {
HXLINE(  47)			return;
            		}
HXLINE(  48)		hx::AddEq(this->assertations,v);
HXLINE(  49)		hx::AddEq(this->failures,v);
HXLINE(  50)		this->hasFailures = (this->failures > (int)0);
HXLINE(  51)		Bool _hx_tmp;
HXDLIN(  51)		Bool _hx_tmp1;
HXDLIN(  51)		if (!(this->hasFailures)) {
HXLINE(  51)			_hx_tmp1 = this->hasErrors;
            		}
            		else {
HXLINE(  51)			_hx_tmp1 = true;
            		}
HXDLIN(  51)		if (!(_hx_tmp1)) {
HXLINE(  51)			_hx_tmp = this->hasWarnings;
            		}
            		else {
HXLINE(  51)			_hx_tmp = true;
            		}
HXDLIN(  51)		this->isOk = !(_hx_tmp);
HXLINE(  52)		this->onAddFailures->dispatch(v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultStats_obj,addFailures,(void))

void ResultStats_obj::addErrors(Int v){
            	HX_STACK_FRAME("utest.ui.common.ResultStats","addErrors",0x51e9b0d0,"utest.ui.common.ResultStats.addErrors","utest/ui/common/ResultStats.hx",55,0x86a8eb8d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  56)		if ((v == (int)0)) {
HXLINE(  56)			return;
            		}
HXLINE(  57)		hx::AddEq(this->assertations,v);
HXLINE(  58)		hx::AddEq(this->errors,v);
HXLINE(  59)		this->hasErrors = (this->errors > (int)0);
HXLINE(  60)		Bool _hx_tmp;
HXDLIN(  60)		Bool _hx_tmp1;
HXDLIN(  60)		if (!(this->hasFailures)) {
HXLINE(  60)			_hx_tmp1 = this->hasErrors;
            		}
            		else {
HXLINE(  60)			_hx_tmp1 = true;
            		}
HXDLIN(  60)		if (!(_hx_tmp1)) {
HXLINE(  60)			_hx_tmp = this->hasWarnings;
            		}
            		else {
HXLINE(  60)			_hx_tmp = true;
            		}
HXDLIN(  60)		this->isOk = !(_hx_tmp);
HXLINE(  61)		this->onAddErrors->dispatch(v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultStats_obj,addErrors,(void))

void ResultStats_obj::addWarnings(Int v){
            	HX_STACK_FRAME("utest.ui.common.ResultStats","addWarnings",0x8d95b6fc,"utest.ui.common.ResultStats.addWarnings","utest/ui/common/ResultStats.hx",64,0x86a8eb8d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  65)		if ((v == (int)0)) {
HXLINE(  65)			return;
            		}
HXLINE(  66)		hx::AddEq(this->assertations,v);
HXLINE(  67)		hx::AddEq(this->warnings,v);
HXLINE(  68)		this->hasWarnings = (this->warnings > (int)0);
HXLINE(  69)		Bool _hx_tmp;
HXDLIN(  69)		Bool _hx_tmp1;
HXDLIN(  69)		if (!(this->hasFailures)) {
HXLINE(  69)			_hx_tmp1 = this->hasErrors;
            		}
            		else {
HXLINE(  69)			_hx_tmp1 = true;
            		}
HXDLIN(  69)		if (!(_hx_tmp1)) {
HXLINE(  69)			_hx_tmp = this->hasWarnings;
            		}
            		else {
HXLINE(  69)			_hx_tmp = true;
            		}
HXDLIN(  69)		this->isOk = !(_hx_tmp);
HXLINE(  70)		this->onAddWarnings->dispatch(v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultStats_obj,addWarnings,(void))

void ResultStats_obj::sum( ::utest::ui::common::ResultStats other){
            	HX_STACK_FRAME("utest.ui.common.ResultStats","sum",0x287e2eaf,"utest.ui.common.ResultStats.sum","utest/ui/common/ResultStats.hx",73,0x86a8eb8d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE(  74)		this->addSuccesses(other->successes);
HXLINE(  75)		this->addFailures(other->failures);
HXLINE(  76)		this->addErrors(other->errors);
HXLINE(  77)		this->addWarnings(other->warnings);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultStats_obj,sum,(void))

void ResultStats_obj::subtract( ::utest::ui::common::ResultStats other){
            	HX_STACK_FRAME("utest.ui.common.ResultStats","subtract",0x6201cd70,"utest.ui.common.ResultStats.subtract","utest/ui/common/ResultStats.hx",80,0x86a8eb8d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE(  81)		this->addSuccesses(-(other->successes));
HXLINE(  82)		this->addFailures(-(other->failures));
HXLINE(  83)		this->addErrors(-(other->errors));
HXLINE(  84)		this->addWarnings(-(other->warnings));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultStats_obj,subtract,(void))

void ResultStats_obj::wire( ::utest::ui::common::ResultStats dependant){
            	HX_STACK_FRAME("utest.ui.common.ResultStats","wire",0x48866ea1,"utest.ui.common.ResultStats.wire","utest/ui/common/ResultStats.hx",87,0x86a8eb8d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dependant,"dependant")
HXLINE(  88)		dependant->onAddSuccesses->add(this->addSuccesses_dyn());
HXLINE(  89)		dependant->onAddFailures->add(this->addFailures_dyn());
HXLINE(  90)		dependant->onAddErrors->add(this->addErrors_dyn());
HXLINE(  91)		dependant->onAddWarnings->add(this->addWarnings_dyn());
HXLINE(  92)		this->sum(dependant);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultStats_obj,wire,(void))

void ResultStats_obj::unwire( ::utest::ui::common::ResultStats dependant){
            	HX_STACK_FRAME("utest.ui.common.ResultStats","unwire",0x6193c47a,"utest.ui.common.ResultStats.unwire","utest/ui/common/ResultStats.hx",95,0x86a8eb8d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dependant,"dependant")
HXLINE(  96)		dependant->onAddSuccesses->remove(this->addSuccesses_dyn());
HXLINE(  97)		dependant->onAddFailures->remove(this->addFailures_dyn());
HXLINE(  98)		dependant->onAddErrors->remove(this->addErrors_dyn());
HXLINE(  99)		dependant->onAddWarnings->remove(this->addWarnings_dyn());
HXLINE( 100)		this->subtract(dependant);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResultStats_obj,unwire,(void))


ResultStats_obj::ResultStats_obj()
{
}

void ResultStats_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ResultStats);
	HX_MARK_MEMBER_NAME(assertations,"assertations");
	HX_MARK_MEMBER_NAME(successes,"successes");
	HX_MARK_MEMBER_NAME(failures,"failures");
	HX_MARK_MEMBER_NAME(errors,"errors");
	HX_MARK_MEMBER_NAME(warnings,"warnings");
	HX_MARK_MEMBER_NAME(onAddSuccesses,"onAddSuccesses");
	HX_MARK_MEMBER_NAME(onAddFailures,"onAddFailures");
	HX_MARK_MEMBER_NAME(onAddErrors,"onAddErrors");
	HX_MARK_MEMBER_NAME(onAddWarnings,"onAddWarnings");
	HX_MARK_MEMBER_NAME(isOk,"isOk");
	HX_MARK_MEMBER_NAME(hasFailures,"hasFailures");
	HX_MARK_MEMBER_NAME(hasErrors,"hasErrors");
	HX_MARK_MEMBER_NAME(hasWarnings,"hasWarnings");
	HX_MARK_END_CLASS();
}

void ResultStats_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(assertations,"assertations");
	HX_VISIT_MEMBER_NAME(successes,"successes");
	HX_VISIT_MEMBER_NAME(failures,"failures");
	HX_VISIT_MEMBER_NAME(errors,"errors");
	HX_VISIT_MEMBER_NAME(warnings,"warnings");
	HX_VISIT_MEMBER_NAME(onAddSuccesses,"onAddSuccesses");
	HX_VISIT_MEMBER_NAME(onAddFailures,"onAddFailures");
	HX_VISIT_MEMBER_NAME(onAddErrors,"onAddErrors");
	HX_VISIT_MEMBER_NAME(onAddWarnings,"onAddWarnings");
	HX_VISIT_MEMBER_NAME(isOk,"isOk");
	HX_VISIT_MEMBER_NAME(hasFailures,"hasFailures");
	HX_VISIT_MEMBER_NAME(hasErrors,"hasErrors");
	HX_VISIT_MEMBER_NAME(hasWarnings,"hasWarnings");
}

hx::Val ResultStats_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sum") ) { return hx::Val( sum_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"isOk") ) { return hx::Val( isOk); }
		if (HX_FIELD_EQ(inName,"wire") ) { return hx::Val( wire_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"errors") ) { return hx::Val( errors); }
		if (HX_FIELD_EQ(inName,"unwire") ) { return hx::Val( unwire_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"failures") ) { return hx::Val( failures); }
		if (HX_FIELD_EQ(inName,"warnings") ) { return hx::Val( warnings); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"successes") ) { return hx::Val( successes); }
		if (HX_FIELD_EQ(inName,"hasErrors") ) { return hx::Val( hasErrors); }
		if (HX_FIELD_EQ(inName,"addErrors") ) { return hx::Val( addErrors_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onAddErrors") ) { return hx::Val( onAddErrors); }
		if (HX_FIELD_EQ(inName,"hasFailures") ) { return hx::Val( hasFailures); }
		if (HX_FIELD_EQ(inName,"hasWarnings") ) { return hx::Val( hasWarnings); }
		if (HX_FIELD_EQ(inName,"addFailures") ) { return hx::Val( addFailures_dyn()); }
		if (HX_FIELD_EQ(inName,"addWarnings") ) { return hx::Val( addWarnings_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"assertations") ) { return hx::Val( assertations); }
		if (HX_FIELD_EQ(inName,"addSuccesses") ) { return hx::Val( addSuccesses_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onAddFailures") ) { return hx::Val( onAddFailures); }
		if (HX_FIELD_EQ(inName,"onAddWarnings") ) { return hx::Val( onAddWarnings); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onAddSuccesses") ) { return hx::Val( onAddSuccesses); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ResultStats_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"isOk") ) { isOk=inValue.Cast< Bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"errors") ) { errors=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"failures") ) { failures=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"warnings") ) { warnings=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"successes") ) { successes=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasErrors") ) { hasErrors=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onAddErrors") ) { onAddErrors=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasFailures") ) { hasFailures=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasWarnings") ) { hasWarnings=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"assertations") ) { assertations=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onAddFailures") ) { onAddFailures=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onAddWarnings") ) { onAddWarnings=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onAddSuccesses") ) { onAddSuccesses=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ResultStats_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("assertations","\x64","\xeb","\x2a","\x91"));
	outFields->push(HX_HCSTRING("successes","\xf1","\xb4","\x75","\x04"));
	outFields->push(HX_HCSTRING("failures","\xe9","\xd0","\x27","\x04"));
	outFields->push(HX_HCSTRING("errors","\xab","\x83","\x68","\x51"));
	outFields->push(HX_HCSTRING("warnings","\x97","\x36","\x93","\x88"));
	outFields->push(HX_HCSTRING("onAddSuccesses","\x4f","\x36","\xb9","\x2d"));
	outFields->push(HX_HCSTRING("onAddFailures","\x4b","\x25","\x6e","\x98"));
	outFields->push(HX_HCSTRING("onAddErrors","\x8d","\x9b","\xcf","\x2b"));
	outFields->push(HX_HCSTRING("onAddWarnings","\xf9","\x8a","\xd9","\x1c"));
	outFields->push(HX_HCSTRING("isOk","\xa6","\xef","\xbe","\x45"));
	outFields->push(HX_HCSTRING("hasFailures","\x63","\xb6","\xde","\xd6"));
	outFields->push(HX_HCSTRING("hasErrors","\xa5","\x36","\x51","\x92"));
	outFields->push(HX_HCSTRING("hasWarnings","\x11","\x1c","\x4a","\x5b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ResultStats_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ResultStats_obj,assertations),HX_HCSTRING("assertations","\x64","\xeb","\x2a","\x91")},
	{hx::fsInt,(int)offsetof(ResultStats_obj,successes),HX_HCSTRING("successes","\xf1","\xb4","\x75","\x04")},
	{hx::fsInt,(int)offsetof(ResultStats_obj,failures),HX_HCSTRING("failures","\xe9","\xd0","\x27","\x04")},
	{hx::fsInt,(int)offsetof(ResultStats_obj,errors),HX_HCSTRING("errors","\xab","\x83","\x68","\x51")},
	{hx::fsInt,(int)offsetof(ResultStats_obj,warnings),HX_HCSTRING("warnings","\x97","\x36","\x93","\x88")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(ResultStats_obj,onAddSuccesses),HX_HCSTRING("onAddSuccesses","\x4f","\x36","\xb9","\x2d")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(ResultStats_obj,onAddFailures),HX_HCSTRING("onAddFailures","\x4b","\x25","\x6e","\x98")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(ResultStats_obj,onAddErrors),HX_HCSTRING("onAddErrors","\x8d","\x9b","\xcf","\x2b")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(ResultStats_obj,onAddWarnings),HX_HCSTRING("onAddWarnings","\xf9","\x8a","\xd9","\x1c")},
	{hx::fsBool,(int)offsetof(ResultStats_obj,isOk),HX_HCSTRING("isOk","\xa6","\xef","\xbe","\x45")},
	{hx::fsBool,(int)offsetof(ResultStats_obj,hasFailures),HX_HCSTRING("hasFailures","\x63","\xb6","\xde","\xd6")},
	{hx::fsBool,(int)offsetof(ResultStats_obj,hasErrors),HX_HCSTRING("hasErrors","\xa5","\x36","\x51","\x92")},
	{hx::fsBool,(int)offsetof(ResultStats_obj,hasWarnings),HX_HCSTRING("hasWarnings","\x11","\x1c","\x4a","\x5b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ResultStats_obj_sStaticStorageInfo = 0;
#endif

static ::String ResultStats_obj_sMemberFields[] = {
	HX_HCSTRING("assertations","\x64","\xeb","\x2a","\x91"),
	HX_HCSTRING("successes","\xf1","\xb4","\x75","\x04"),
	HX_HCSTRING("failures","\xe9","\xd0","\x27","\x04"),
	HX_HCSTRING("errors","\xab","\x83","\x68","\x51"),
	HX_HCSTRING("warnings","\x97","\x36","\x93","\x88"),
	HX_HCSTRING("onAddSuccesses","\x4f","\x36","\xb9","\x2d"),
	HX_HCSTRING("onAddFailures","\x4b","\x25","\x6e","\x98"),
	HX_HCSTRING("onAddErrors","\x8d","\x9b","\xcf","\x2b"),
	HX_HCSTRING("onAddWarnings","\xf9","\x8a","\xd9","\x1c"),
	HX_HCSTRING("isOk","\xa6","\xef","\xbe","\x45"),
	HX_HCSTRING("hasFailures","\x63","\xb6","\xde","\xd6"),
	HX_HCSTRING("hasErrors","\xa5","\x36","\x51","\x92"),
	HX_HCSTRING("hasWarnings","\x11","\x1c","\x4a","\x5b"),
	HX_HCSTRING("addSuccesses","\x90","\xd6","\xc9","\x03"),
	HX_HCSTRING("addFailures","\x2a","\x08","\x84","\x35"),
	HX_HCSTRING("addErrors","\xac","\xb8","\x8c","\x09"),
	HX_HCSTRING("addWarnings","\xd8","\x6d","\xef","\xb9"),
	HX_HCSTRING("sum","\x8b","\xa9","\x57","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("wire","\x45","\x74","\xf8","\x4e"),
	HX_HCSTRING("unwire","\x1e","\x7b","\xcd","\x6c"),
	::String(null()) };

static void ResultStats_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ResultStats_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ResultStats_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ResultStats_obj::__mClass,"__mClass");
};

#endif

hx::Class ResultStats_obj::__mClass;

void ResultStats_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.ui.common.ResultStats","\x92","\x83","\x40","\xdb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ResultStats_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ResultStats_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ResultStats_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ResultStats_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ResultStats_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ResultStats_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
} // end namespace ui
} // end namespace common
