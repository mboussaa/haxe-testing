// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_crypto_Base64
#include <haxe/crypto/Base64.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Iterables
#include <thx/Iterables.h>
#endif
#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx__Ord_Ord_Impl_
#include <thx/_Ord/Ord_Impl_.h>
#endif

namespace thx{

void Strings_obj::__construct() { }

Dynamic Strings_obj::__CreateEmpty() { return new Strings_obj; }

hx::ObjectPtr< Strings_obj > Strings_obj::__new()
{
	hx::ObjectPtr< Strings_obj > _hx_result = new Strings_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Strings_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Strings_obj > _hx_result = new Strings_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String Strings_obj::after(::String value,::String searchFor){
            	HX_STACK_FRAME("thx.Strings","after",0x941965a6,"thx.Strings.after","thx/Strings.hx",20,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(searchFor,"searchFor")
HXLINE(  21)		HX_VARI( Int,pos) = value.indexOf(searchFor,null());
HXLINE(  22)		if ((pos < (int)0)) {
HXLINE(  23)			return HX_("",00,00,00,00);
            		}
            		else {
HXLINE(  25)			Int _hx_tmp = (pos + searchFor.length);
HXDLIN(  25)			return value.substring(_hx_tmp,null());
            		}
HXLINE(  22)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,after,return )

::String Strings_obj::afterLast(::String value,::String searchFor){
            	HX_STACK_FRAME("thx.Strings","afterLast",0x543a671c,"thx.Strings.afterLast","thx/Strings.hx",33,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(searchFor,"searchFor")
HXLINE(  34)		HX_VARI( Int,pos) = value.lastIndexOf(searchFor,null());
HXLINE(  35)		if ((pos < (int)0)) {
HXLINE(  36)			return HX_("",00,00,00,00);
            		}
            		else {
HXLINE(  38)			Int _hx_tmp = (pos + searchFor.length);
HXDLIN(  38)			return value.substring(_hx_tmp,null());
            		}
HXLINE(  35)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,afterLast,return )

::String Strings_obj::capitalize(::String s){
            	HX_STACK_FRAME("thx.Strings","capitalize",0x6da875e2,"thx.Strings.capitalize","thx/Strings.hx",45,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE(  45)		::String _hx_tmp = ::haxe::Utf8_obj::sub(s,(int)0,(int)1).toUpperCase();
HXDLIN(  45)		Int _hx_tmp1 = ::haxe::Utf8_obj::length(s);
HXDLIN(  45)		::String _hx_tmp2 = ::haxe::Utf8_obj::sub(s,(int)1,(_hx_tmp1 - (int)1));
HXDLIN(  45)		return (_hx_tmp + _hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,capitalize,return )

::String Strings_obj::capitalizeWords(::String value, ::Dynamic __o_whiteSpaceOnly){
 ::Dynamic whiteSpaceOnly = __o_whiteSpaceOnly.Default(false);
            	HX_STACK_FRAME("thx.Strings","capitalizeWords",0x90c8f627,"thx.Strings.capitalizeWords","thx/Strings.hx",52,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(whiteSpaceOnly,"whiteSpaceOnly")
HXLINE(  52)		if (whiteSpaceOnly) {
HXLINE(  56)			::String _hx_tmp = ::haxe::Utf8_obj::sub(value,(int)0,(int)1).toUpperCase();
HXDLIN(  56)			Int _hx_tmp1 = ::haxe::Utf8_obj::length(value);
HXDLIN(  56)			::String _hx_tmp2 = ::haxe::Utf8_obj::sub(value,(int)1,(_hx_tmp1 - (int)1));
HXDLIN(  56)			return ::thx::Strings_obj::UCWORDSWS->map((_hx_tmp + _hx_tmp2),::thx::Strings_obj::upperMatch_dyn());
            		}
            		else {
HXLINE(  59)			::String _hx_tmp3 = ::haxe::Utf8_obj::sub(value,(int)0,(int)1).toUpperCase();
HXDLIN(  59)			Int _hx_tmp4 = ::haxe::Utf8_obj::length(value);
HXDLIN(  59)			::String _hx_tmp5 = ::haxe::Utf8_obj::sub(value,(int)1,(_hx_tmp4 - (int)1));
HXDLIN(  59)			return ::thx::Strings_obj::UCWORDS->map((_hx_tmp3 + _hx_tmp5),::thx::Strings_obj::upperMatch_dyn());
            		}
HXLINE(  52)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,capitalizeWords,return )

::String Strings_obj::canonicalizeNewlines(::String value){
            	HX_STACK_FRAME("thx.Strings","canonicalizeNewlines",0x85244955,"thx.Strings.canonicalizeNewlines","thx/Strings.hx",67,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE(  67)		return ::thx::Strings_obj::CANONICALIZE_LINES->replace(value,HX_("\n",0a,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,canonicalizeNewlines,return )

Int Strings_obj::caseInsensitiveCompare(::String a,::String b){
            	HX_STACK_FRAME("thx.Strings","caseInsensitiveCompare",0xac0de51a,"thx.Strings.caseInsensitiveCompare","thx/Strings.hx",72,0x11490c87)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  73)		Bool _hx_tmp;
HXDLIN(  73)		if (hx::IsNull( a )) {
HXLINE(  73)			_hx_tmp = hx::IsNull( b );
            		}
            		else {
HXLINE(  73)			_hx_tmp = false;
            		}
HXDLIN(  73)		if (_hx_tmp) {
HXLINE(  74)			return (int)0;
            		}
HXLINE(  75)		if (hx::IsNull( a )) {
HXLINE(  76)			return (int)-1;
            		}
            		else {
HXLINE(  77)			if (hx::IsNull( b )) {
HXLINE(  78)				return (int)1;
            			}
            		}
HXLINE(  79)		HX_VARI_NAME( ::String,a1,"a") = a.toLowerCase();
HXDLIN(  79)		HX_VARI_NAME( ::String,b1,"b") = b.toLowerCase();
HXDLIN(  79)		return ::haxe::Utf8_obj::compare(a1,b1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,caseInsensitiveCompare,return )

Bool Strings_obj::caseInsensitiveEndsWith(::String s,::String end){
            	HX_STACK_FRAME("thx.Strings","caseInsensitiveEndsWith",0x43449449,"thx.Strings.caseInsensitiveEndsWith","thx/Strings.hx",86,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(end,"end")
HXLINE(  86)		::String _hx_tmp = s.toLowerCase();
HXDLIN(  86)		::String _hx_tmp1 = end.toLowerCase();
HXDLIN(  86)		return ::StringTools_obj::endsWith(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,caseInsensitiveEndsWith,return )

Bool Strings_obj::caseInsensitiveEndsWithAny(::String s,::Array< ::String > values){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run(::String v){
            			HX_STACK_FRAME("thx.Strings","caseInsensitiveEndsWithAny",0x23423223,"thx.Strings.caseInsensitiveEndsWithAny","thx/Strings.hx",92,0x11490c87)
            			HX_STACK_ARG(v,"v")
HXLINE(  92)			return v.toLowerCase();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Strings","caseInsensitiveEndsWithAny",0x23423223,"thx.Strings.caseInsensitiveEndsWithAny","thx/Strings.hx",92,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(values,"values")
HXLINE(  92)		::String _hx_tmp = s.toLowerCase();
HXDLIN(  92)		::Array< ::String > _hx_tmp1 = values->map( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  92)		return ::thx::Strings_obj::endsWithAny(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,caseInsensitiveEndsWithAny,return )

Bool Strings_obj::caseInsensitiveStartsWith(::String s,::String start){
            	HX_STACK_FRAME("thx.Strings","caseInsensitiveStartsWith",0xf4886b22,"thx.Strings.caseInsensitiveStartsWith","thx/Strings.hx",98,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(start,"start")
HXLINE(  98)		::String _hx_tmp = s.toLowerCase();
HXDLIN(  98)		::String _hx_tmp1 = start.toLowerCase();
HXDLIN(  98)		return ::StringTools_obj::startsWith(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,caseInsensitiveStartsWith,return )

Bool Strings_obj::caseInsensitiveStartsWithAny(::String s,::Array< ::String > values){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run(::String v){
            			HX_STACK_FRAME("thx.Strings","caseInsensitiveStartsWithAny",0x60f768ea,"thx.Strings.caseInsensitiveStartsWithAny","thx/Strings.hx",104,0x11490c87)
            			HX_STACK_ARG(v,"v")
HXLINE( 104)			return v.toLowerCase();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Strings","caseInsensitiveStartsWithAny",0x60f768ea,"thx.Strings.caseInsensitiveStartsWithAny","thx/Strings.hx",104,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(values,"values")
HXLINE( 104)		::String _hx_tmp = s.toLowerCase();
HXDLIN( 104)		::Array< ::String > _hx_tmp1 = values->map( ::Dynamic(new _hx_Closure_0()));
HXDLIN( 104)		return ::thx::Strings_obj::startsWithAny(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,caseInsensitiveStartsWithAny,return )

::String Strings_obj::collapse(::String value){
            	HX_STACK_FRAME("thx.Strings","collapse",0x247f2423,"thx.Strings.collapse","thx/Strings.hx",115,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 115)		::String _hx_tmp = ::StringTools_obj::trim(value);
HXDLIN( 115)		return ::thx::Strings_obj::WSG->replace(_hx_tmp,HX_(" ",20,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,collapse,return )

Int Strings_obj::compare(::String a,::String b){
            	HX_STACK_FRAME("thx.Strings","compare",0xc5468eaf,"thx.Strings.compare","thx/Strings.hx",125,0x11490c87)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 125)		return ::haxe::Utf8_obj::compare(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,compare,return )

 ::Dynamic Strings_obj::order;

Bool Strings_obj::caseInsensitiveContains(::String s,::String test){
            	HX_STACK_FRAME("thx.Strings","caseInsensitiveContains",0x9409740a,"thx.Strings.caseInsensitiveContains","thx/Strings.hx",137,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(test,"test")
HXLINE( 137)		::String _hx_tmp = s.toLowerCase();
HXDLIN( 137)		::String _hx_tmp1 = test.toLowerCase();
HXDLIN( 137)		Int _hx_tmp2 = _hx_tmp.indexOf(_hx_tmp1,null());
HXDLIN( 137)		return (_hx_tmp2 >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,caseInsensitiveContains,return )

Bool Strings_obj::contains(::String s,::String test){
            	HX_STACK_FRAME("thx.Strings","contains",0x8c652cd5,"thx.Strings.contains","thx/Strings.hx",147,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(test,"test")
HXLINE( 147)		Int _hx_tmp = s.indexOf(test,null());
HXDLIN( 147)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,contains,return )

Int Strings_obj::count(::String s,::String test){
            	HX_STACK_FRAME("thx.Strings","count",0xc0da4459,"thx.Strings.count","thx/Strings.hx",154,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(test,"test")
HXLINE( 154)		return (s.split(test)->length - (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,count,return )

Bool Strings_obj::caseInsensitiveContainsAny(::String s,::Array< ::String > tests){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,s1) HXARGC(1)
            		Bool _hx_run(::String a1){
            			HX_STACK_FRAME("thx.Strings","caseInsensitiveContainsAny",0x8b24e102,"thx.Strings.caseInsensitiveContainsAny","thx/Strings.hx",160,0x11490c87)
            			HX_STACK_ARG(a1,"a1")
HXLINE( 160)			return ::thx::Strings_obj::caseInsensitiveContains(s1,a1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Strings","caseInsensitiveContainsAny",0x8b24e102,"thx.Strings.caseInsensitiveContainsAny","thx/Strings.hx",160,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(tests,"tests")
HXLINE( 160)		HX_VARI_NAME( ::String,s1,"s") = s;
HXDLIN( 160)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(s1));
HXDLIN( 160)		return ::thx::Arrays_obj::any(tests,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,caseInsensitiveContainsAny,return )

Bool Strings_obj::containsAny(::String s,::Array< ::String > tests){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,s1) HXARGC(1)
            		Bool _hx_run(::String a1){
            			HX_STACK_FRAME("thx.Strings","containsAny",0x231a7917,"thx.Strings.containsAny","thx/Strings.hx",166,0x11490c87)
            			HX_STACK_ARG(a1,"a1")
HXLINE( 166)			return ::thx::Strings_obj::contains(s1,a1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Strings","containsAny",0x231a7917,"thx.Strings.containsAny","thx/Strings.hx",166,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(tests,"tests")
HXLINE( 166)		HX_VARI_NAME( ::String,s1,"s") = s;
HXDLIN( 166)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(s1));
HXDLIN( 166)		return ::thx::Arrays_obj::any(tests,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,containsAny,return )

::String Strings_obj::dasherize(::String s){
            	HX_STACK_FRAME("thx.Strings","dasherize",0x557daeff,"thx.Strings.dasherize","thx/Strings.hx",173,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 173)		return ::StringTools_obj::replace(s,HX_("_",5f,00,00,00),HX_("-",2d,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,dasherize,return )

Int Strings_obj::diffAt(::String a,::String b){
            	HX_STACK_FRAME("thx.Strings","diffAt",0xe624f98e,"thx.Strings.diffAt","thx/Strings.hx",182,0x11490c87)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 183)		HX_VARI_NAME( Int,a1,"a") = a.length;
HXDLIN( 183)		HX_VARI_NAME( Int,b1,"b") = b.length;
HXDLIN( 183)		HX_VAR( Int,min);
HXDLIN( 183)		if ((a1 < b1)) {
HXLINE( 183)			min = a1;
            		}
            		else {
HXLINE( 183)			min = b1;
            		}
HXLINE( 184)		{
HXLINE( 184)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 184)			HX_VARI( Int,_g) = min;
HXDLIN( 184)			while((_g1 < _g)){
HXLINE( 184)				HX_VARI( Int,i) = _g1++;
HXLINE( 185)				::String _hx_tmp = a.substring(i,(i + (int)1));
HXDLIN( 185)				::String _hx_tmp1 = b.substring(i,(i + (int)1));
HXDLIN( 185)				if ((_hx_tmp != _hx_tmp1)) {
HXLINE( 186)					return i;
            				}
            			}
            		}
HXLINE( 187)		return min;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,diffAt,return )

::String Strings_obj::ellipsis(::String s, ::Dynamic __o_maxlen,::String __o_symbol){
 ::Dynamic maxlen = __o_maxlen.Default(20);
::String symbol = __o_symbol.Default(HX_HCSTRING("\xe2""\x80""\xa6""","\x88","\xed","\xab","\x00"));
            	HX_STACK_FRAME("thx.Strings","ellipsis",0x69dc5807,"thx.Strings.ellipsis","thx/Strings.hx",198,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(maxlen,"maxlen")
            	HX_STACK_ARG(symbol,"symbol")
HXLINE( 199)		HX_VARI( Int,sl) = ::haxe::Utf8_obj::length(s);
HXDLIN( 199)		HX_VARI( Int,symboll) = ::haxe::Utf8_obj::length(symbol);
HXLINE( 201)		if (hx::IsGreater( sl,maxlen )) {
HXLINE( 202)			if (hx::IsLess( maxlen,symboll )) {
HXLINE( 203)				return ::haxe::Utf8_obj::sub(symbol,(symboll - maxlen),maxlen);
            			}
            			else {
HXLINE( 205)				::String _hx_tmp = ::haxe::Utf8_obj::sub(s,(int)0,(maxlen - symboll));
HXDLIN( 205)				return (_hx_tmp + symbol);
            			}
            		}
            		else {
HXLINE( 208)			return s;
            		}
HXLINE( 201)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,ellipsis,return )

::String Strings_obj::ellipsisMiddle(::String s, ::Dynamic __o_maxlen,::String __o_symbol){
 ::Dynamic maxlen = __o_maxlen.Default(20);
::String symbol = __o_symbol.Default(HX_HCSTRING("\xe2""\x80""\xa6""","\x88","\xed","\xab","\x00"));
            	HX_STACK_FRAME("thx.Strings","ellipsisMiddle",0x3bb7debc,"thx.Strings.ellipsisMiddle","thx/Strings.hx",218,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(maxlen,"maxlen")
            	HX_STACK_ARG(symbol,"symbol")
HXLINE( 219)		HX_VARI( Int,sl) = ::haxe::Utf8_obj::length(s);
HXDLIN( 219)		HX_VARI( Int,symboll) = ::haxe::Utf8_obj::length(symbol);
HXLINE( 221)		if (hx::IsGreater( sl,maxlen )) {
HXLINE( 222)			if (hx::IsLessEq( maxlen,symboll )) {
HXLINE( 223)				return ::thx::Strings_obj::ellipsis(s,maxlen,symbol);
            			}
HXLINE( 225)			HX_VARI( Int,hll) = ::Math_obj::ceil(((Float)(maxlen - symboll) / (Float)(int)2));
HXDLIN( 225)			HX_VARI( Int,hlr) = ::Math_obj::floor(((Float)(maxlen - symboll) / (Float)(int)2));
HXLINE( 227)			::String _hx_tmp = ::haxe::Utf8_obj::sub(s,(int)0,hll);
HXDLIN( 227)			::String _hx_tmp1 = (_hx_tmp + symbol);
HXDLIN( 227)			::String _hx_tmp2 = ::haxe::Utf8_obj::sub(s,(sl - hlr),hlr);
HXDLIN( 227)			return (_hx_tmp1 + _hx_tmp2);
            		}
            		else {
HXLINE( 229)			return s;
            		}
HXLINE( 221)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,ellipsisMiddle,return )

Bool Strings_obj::endsWithAny(::String s, ::Dynamic values){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,s) HXARGC(1)
            		Bool _hx_run(::String end){
            			HX_STACK_FRAME("thx.Strings","endsWithAny",0xbb37ca38,"thx.Strings.endsWithAny","thx/Strings.hx",236,0x11490c87)
            			HX_STACK_ARG(end,"end")
HXLINE( 236)			return ::StringTools_obj::endsWith(s,end);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Strings","endsWithAny",0xbb37ca38,"thx.Strings.endsWithAny","thx/Strings.hx",236,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(values,"values")
HXLINE( 236)		return ::thx::Iterables_obj::any(values, ::Dynamic(new _hx_Closure_0(s)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,endsWithAny,return )

::String Strings_obj::filter(::String s, ::Dynamic predicate){
            	HX_STACK_FRAME("thx.Strings","filter",0xb6ddb8ee,"thx.Strings.filter","thx/Strings.hx",243,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(predicate,"predicate")
HXLINE( 243)		return s.split(HX_("",00,00,00,00))->filter(predicate)->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,filter,return )

::String Strings_obj::filterCharcode(::String s, ::Dynamic predicate){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run(::String s1){
            			HX_STACK_FRAME("thx.Strings","filterCharcode",0x86c24611,"thx.Strings.filterCharcode","thx/Strings.hx",251,0x11490c87)
            			HX_STACK_ARG(s1,"s1")
HXLINE( 251)			return ::haxe::Utf8_obj::charCodeAt(s1,(int)0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		::String _hx_run(Int i){
            			HX_STACK_FRAME("thx.Strings","filterCharcode",0x86c24611,"thx.Strings.filterCharcode","thx/Strings.hx",253,0x11490c87)
            			HX_STACK_ARG(i,"i")
HXLINE( 253)			return ::String::fromCharCode(i);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Strings","filterCharcode",0x86c24611,"thx.Strings.filterCharcode","thx/Strings.hx",250,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(predicate,"predicate")
HXLINE( 251)		HX_VARI( ::Array< Int >,codes) = ::thx::Strings_obj::map(s, ::Dynamic(new _hx_Closure_0()))->filter(predicate);
HXLINE( 252)		return codes->map( ::Dynamic(new _hx_Closure_1()))->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,filterCharcode,return )

::String Strings_obj::from(::String value,::String searchFor){
            	HX_STACK_FRAME("thx.Strings","from",0x77f36520,"thx.Strings.from","thx/Strings.hx",262,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(searchFor,"searchFor")
HXLINE( 263)		HX_VARI( Int,pos) = value.indexOf(searchFor,null());
HXLINE( 264)		if ((pos < (int)0)) {
HXLINE( 265)			return HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 267)			return value.substring(pos,null());
            		}
HXLINE( 264)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,from,return )

Int Strings_obj::HASCODE_MAX;

Int Strings_obj::HASCODE_MUL;

Int Strings_obj::hashCode(::String value){
            	HX_STACK_FRAME("thx.Strings","hashCode",0x675eded1,"thx.Strings.hashCode","thx/Strings.hx",272,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 273)		HX_VARI( Int,code) = (int)0;
HXLINE( 274)		{
HXLINE( 274)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 274)			HX_VARI( Int,_g) = value.length;
HXDLIN( 274)			while((_g1 < _g)){
HXLINE( 274)				HX_VARI( Int,i) = _g1++;
HXLINE( 275)				HX_VARI( Int,c) = value.charCodeAt(i);
HXLINE( 276)				Int _hx_tmp = ((::thx::Strings_obj::HASCODE_MUL * code) + c);
HXDLIN( 276)				code = hx::Mod(_hx_tmp,::thx::Strings_obj::HASCODE_MAX);
            			}
            		}
HXLINE( 278)		return code;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,hashCode,return )

Bool Strings_obj::hasContent(::String value){
            	HX_STACK_FRAME("thx.Strings","hasContent",0x3037e135,"thx.Strings.hasContent","thx/Strings.hx",285,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 285)		if (hx::IsNotNull( value )) {
HXLINE( 285)			return (value.length > (int)0);
            		}
            		else {
HXLINE( 285)			return false;
            		}
HXDLIN( 285)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,hasContent,return )

::String Strings_obj::humanize(::String s){
            	HX_STACK_FRAME("thx.Strings","humanize",0x55819e7d,"thx.Strings.humanize","thx/Strings.hx",291,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 291)		::String _hx_tmp = ::thx::Strings_obj::underscore(s);
HXDLIN( 291)		return ::StringTools_obj::replace(_hx_tmp,HX_("_",5f,00,00,00),HX_(" ",20,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,humanize,return )

Bool Strings_obj::isAlpha(::String s){
            	HX_STACK_FRAME("thx.Strings","isAlpha",0xfff9c11e,"thx.Strings.isAlpha","thx/Strings.hx",297,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 297)		Bool _hx_tmp = (s.length > (int)0);
HXDLIN( 297)		if (_hx_tmp) {
HXLINE( 297)			return !(::thx::Strings_obj::IS_ALPHA->match(s));
            		}
            		else {
HXLINE( 297)			return false;
            		}
HXDLIN( 297)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isAlpha,return )

Bool Strings_obj::isAlphaNum(::String value){
            	HX_STACK_FRAME("thx.Strings","isAlphaNum",0x27e4dbc8,"thx.Strings.isAlphaNum","thx/Strings.hx",306,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 306)		return ::thx::Strings_obj::ALPHANUM->match(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isAlphaNum,return )

Bool Strings_obj::isBreakingWhitespace(::String value){
            	HX_STACK_FRAME("thx.Strings","isBreakingWhitespace",0x436e1b20,"thx.Strings.isBreakingWhitespace","thx/Strings.hx",310,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 310)		return !(::thx::Strings_obj::IS_BREAKINGWHITESPACE->match(value));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isBreakingWhitespace,return )

Bool Strings_obj::isLowerCase(::String value){
            	HX_STACK_FRAME("thx.Strings","isLowerCase",0x2ed1d311,"thx.Strings.isLowerCase","thx/Strings.hx",317,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 317)		::String _hx_tmp = value.toLowerCase();
HXDLIN( 317)		return (_hx_tmp == value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isLowerCase,return )

Bool Strings_obj::isUpperCase(::String value){
            	HX_STACK_FRAME("thx.Strings","isUpperCase",0xaf6ab6f2,"thx.Strings.isUpperCase","thx/Strings.hx",324,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 324)		::String _hx_tmp = value.toUpperCase();
HXDLIN( 324)		return (_hx_tmp == value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isUpperCase,return )

::String Strings_obj::ifEmpty(::String value,::String alt){
            	HX_STACK_FRAME("thx.Strings","ifEmpty",0x1b99a37a,"thx.Strings.ifEmpty","thx/Strings.hx",330,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 330)		Bool _hx_tmp;
HXDLIN( 330)		if (hx::IsNotNull( value )) {
HXLINE( 330)			_hx_tmp = (HX_("",00,00,00,00) != value);
            		}
            		else {
HXLINE( 330)			_hx_tmp = false;
            		}
HXDLIN( 330)		if (_hx_tmp) {
HXLINE( 330)			return value;
            		}
            		else {
HXLINE( 330)			return alt;
            		}
HXDLIN( 330)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,ifEmpty,return )

Bool Strings_obj::isDigitsOnly(::String value){
            	HX_STACK_FRAME("thx.Strings","isDigitsOnly",0x4c0254f2,"thx.Strings.isDigitsOnly","thx/Strings.hx",339,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 339)		return ::thx::Strings_obj::DIGITS->match(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isDigitsOnly,return )

Bool Strings_obj::isEmpty(::String value){
            	HX_STACK_FRAME("thx.Strings","isEmpty",0x4e3d544d,"thx.Strings.isEmpty","thx/Strings.hx",346,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 346)		if (hx::IsNotNull( value )) {
HXLINE( 346)			return (value == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 346)			return true;
            		}
HXDLIN( 346)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isEmpty,return )

::String Strings_obj::lowerCaseFirst(::String value){
            	HX_STACK_FRAME("thx.Strings","lowerCaseFirst",0xce176855,"thx.Strings.lowerCaseFirst","thx/Strings.hx",352,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 352)		::String _hx_tmp = value.substring((int)0,(int)1).toLowerCase();
HXDLIN( 352)		::String _hx_tmp1 = value.substring((int)1,null());
HXDLIN( 352)		return (_hx_tmp + _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,lowerCaseFirst,return )

::String Strings_obj::random(::String value,hx::Null< Int >  __o_length){
Int length = __o_length.Default(1);
            	HX_STACK_FRAME("thx.Strings","random",0xe937bb39,"thx.Strings.random","thx/Strings.hx",358,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(length,"length")
HXLINE( 358)		Int _hx_tmp = ::haxe::Utf8_obj::length(value);
HXDLIN( 358)		Int _hx_tmp1 = ((_hx_tmp - length) + (int)1);
HXDLIN( 358)		Float _hx_tmp2 = ::Math_obj::random();
HXDLIN( 358)		Int _hx_tmp3 = ::Math_obj::floor((_hx_tmp1 * _hx_tmp2));
HXDLIN( 358)		return ::haxe::Utf8_obj::sub(value,_hx_tmp3,length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,random,return )

::String Strings_obj::randomSequence(::String seed,Int length){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,seed) HXARGC(1)
            		::String _hx_run(Int _){
            			HX_STACK_FRAME("thx.Strings","randomSequence",0x8a49f69a,"thx.Strings.randomSequence","thx/Strings.hx",364,0x11490c87)
            			HX_STACK_ARG(_,"_")
HXLINE( 364)			return ::thx::Strings_obj::random(seed,null());
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Strings","randomSequence",0x8a49f69a,"thx.Strings.randomSequence","thx/Strings.hx",364,0x11490c87)
            	HX_STACK_ARG(seed,"seed")
            	HX_STACK_ARG(length,"length")
HXLINE( 364)		return ::thx::Ints_obj::range((int)0,length,null())->map( ::Dynamic(new _hx_Closure_0(seed)))->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,randomSequence,return )

::String Strings_obj::randomSequence64(Int length){
            	HX_STACK_FRAME("thx.Strings","randomSequence64",0x29a88058,"thx.Strings.randomSequence64","thx/Strings.hx",371,0x11490c87)
            	HX_STACK_ARG(length,"length")
HXLINE( 371)		return ::thx::Strings_obj::randomSequence(::haxe::crypto::Base64_obj::CHARS,length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,randomSequence64,return )

 ::Dynamic Strings_obj::iterator(::String s){
            	HX_STACK_FRAME("thx.Strings","iterator",0xf3841ca4,"thx.Strings.iterator","thx/Strings.hx",377,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 377)		return s.split(HX_("",00,00,00,00))->iterator();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,iterator,return )

::cpp::VirtualArray Strings_obj::map(::String value, ::Dynamic callback){
            	HX_STACK_FRAME("thx.Strings","map",0xcce633a6,"thx.Strings.map","thx/Strings.hx",383,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(callback,"callback")
HXLINE( 383)		return value.split(HX_("",00,00,00,00))->map(callback);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,map,return )

::String Strings_obj::remove(::String value,::String toremove){
            	HX_STACK_FRAME("thx.Strings","remove",0x3631357a,"thx.Strings.remove","thx/Strings.hx",389,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(toremove,"toremove")
HXLINE( 389)		return ::StringTools_obj::replace(value,toremove,HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,remove,return )

::String Strings_obj::removeAfter(::String value,::String toremove){
            	HX_STACK_FRAME("thx.Strings","removeAfter",0x1aa88642,"thx.Strings.removeAfter","thx/Strings.hx",395,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(toremove,"toremove")
HXLINE( 395)		Bool _hx_tmp = ::StringTools_obj::endsWith(value,toremove);
HXDLIN( 395)		if (_hx_tmp) {
HXLINE( 395)			Int _hx_tmp1 = (value.length - toremove.length);
HXDLIN( 395)			return value.substring((int)0,_hx_tmp1);
            		}
            		else {
HXLINE( 395)			return value;
            		}
HXDLIN( 395)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeAfter,return )

::String Strings_obj::removeAt(::String value,Int index,Int length){
            	HX_STACK_FRAME("thx.Strings","removeAt",0x0d05410d,"thx.Strings.removeAt","thx/Strings.hx",401,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(length,"length")
HXLINE( 401)		::String _hx_tmp = value.substring((int)0,index);
HXDLIN( 401)		::String _hx_tmp1 = value.substring((index + length),null());
HXDLIN( 401)		return (_hx_tmp + _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,removeAt,return )

::String Strings_obj::removeBefore(::String value,::String toremove){
            	HX_STACK_FRAME("thx.Strings","removeBefore",0x02885599,"thx.Strings.removeBefore","thx/Strings.hx",407,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(toremove,"toremove")
HXLINE( 407)		Bool _hx_tmp = ::StringTools_obj::startsWith(value,toremove);
HXDLIN( 407)		if (_hx_tmp) {
HXLINE( 407)			return value.substring(toremove.length,null());
            		}
            		else {
HXLINE( 407)			return value;
            		}
HXDLIN( 407)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeBefore,return )

::String Strings_obj::removeOne(::String value,::String toremove){
            	HX_STACK_FRAME("thx.Strings","removeOne",0x579e450c,"thx.Strings.removeOne","thx/Strings.hx",412,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(toremove,"toremove")
HXLINE( 413)		HX_VARI( Int,pos) = value.indexOf(toremove,null());
HXLINE( 414)		if ((pos < (int)0)) {
HXLINE( 415)			return value;
            		}
HXLINE( 416)		::String _hx_tmp = value.substring((int)0,pos);
HXDLIN( 416)		Int _hx_tmp1 = (pos + toremove.length);
HXDLIN( 416)		::String _hx_tmp2 = value.substring(_hx_tmp1,null());
HXDLIN( 416)		return (_hx_tmp + _hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeOne,return )

::String Strings_obj::repeat(::String s,Int times){
            	HX_STACK_FRAME("thx.Strings","repeat",0x38253091,"thx.Strings.repeat","thx/Strings.hx",427,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(times,"times")
HXLINE( 427)		HX_VARI( ::Array< ::String >,_g) = ::Array_obj< ::String >::__new(0);
HXDLIN( 427)		{
HXLINE( 427)			HX_VARI( Int,_g2) = (int)0;
HXDLIN( 427)			while((_g2 < times)){
HXLINE( 427)				++_g2;
HXDLIN( 427)				_g->push(s);
            			}
            		}
HXDLIN( 427)		return _g->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,repeat,return )

::String Strings_obj::reverse(::String s){
            	HX_STACK_FRAME("thx.Strings","reverse",0x5cd9af2c,"thx.Strings.reverse","thx/Strings.hx",432,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 433)		HX_VARI( ::Array< ::String >,arr) = s.split(HX_("",00,00,00,00));
HXLINE( 434)		arr->reverse();
HXLINE( 435)		return arr->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,reverse,return )

::String Strings_obj::quote(::String s){
            	HX_STACK_FRAME("thx.Strings","quote",0xd46922c6,"thx.Strings.quote","thx/Strings.hx",442,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 442)		Int _hx_tmp = s.indexOf(HX_("\"",22,00,00,00),null());
HXDLIN( 442)		if ((_hx_tmp < (int)0)) {
HXLINE( 443)			return ((HX_("\"",22,00,00,00) + s) + HX_("\"",22,00,00,00));
            		}
            		else {
HXLINE( 444)			Int _hx_tmp1 = s.indexOf(HX_("'",27,00,00,00),null());
HXDLIN( 444)			if ((_hx_tmp1 < (int)0)) {
HXLINE( 445)				return ((HX_("'",27,00,00,00) + s) + HX_("'",27,00,00,00));
            			}
            			else {
HXLINE( 447)				::String _hx_tmp2 = ::StringTools_obj::replace(s,HX_("\"",22,00,00,00),HX_("\\\"",46,50,00,00));
HXDLIN( 447)				return ((HX_("\"",22,00,00,00) + _hx_tmp2) + HX_("\"",22,00,00,00));
            			}
            		}
HXLINE( 442)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,quote,return )

::Array< ::String > Strings_obj::splitOnce(::String s,::String separator){
            	HX_STACK_FRAME("thx.Strings","splitOnce",0xdac09605,"thx.Strings.splitOnce","thx/Strings.hx",453,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(separator,"separator")
HXLINE( 454)		HX_VARI( Int,pos) = s.indexOf(separator,null());
HXLINE( 455)		if ((pos < (int)0)) {
HXLINE( 456)			return ::Array_obj< ::String >::__new(1)->init(0,s);
            		}
HXLINE( 457)		::String _hx_tmp = s.substring((int)0,pos);
HXDLIN( 457)		Int _hx_tmp1 = (pos + separator.length);
HXDLIN( 457)		::String _hx_tmp2 = s.substring(_hx_tmp1,null());
HXDLIN( 457)		return ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp)->init(1,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,splitOnce,return )

Bool Strings_obj::startsWithAny(::String s, ::Dynamic values){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,s) HXARGC(1)
            		Bool _hx_run(::String start){
            			HX_STACK_FRAME("thx.Strings","startsWithAny",0x1392f03f,"thx.Strings.startsWithAny","thx/Strings.hx",464,0x11490c87)
            			HX_STACK_ARG(start,"start")
HXLINE( 464)			return ::StringTools_obj::startsWith(s,start);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Strings","startsWithAny",0x1392f03f,"thx.Strings.startsWithAny","thx/Strings.hx",464,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(values,"values")
HXLINE( 464)		return ::thx::Iterables_obj::any(values, ::Dynamic(new _hx_Closure_0(s)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,startsWithAny,return )

::String Strings_obj::stripTags(::String s){
            	HX_STACK_FRAME("thx.Strings","stripTags",0x6eb50c5b,"thx.Strings.stripTags","thx/Strings.hx",474,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 474)		return ::thx::Strings_obj::STRIPTAGS->replace(s,HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,stripTags,return )

::String Strings_obj::surround(::String s,::String left,::String right){
            	HX_STACK_FRAME("thx.Strings","surround",0x94f77774,"thx.Strings.surround","thx/Strings.hx",482,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(left,"left")
            	HX_STACK_ARG(right,"right")
HXLINE( 482)		::String _hx_tmp = ((HX_("",00,00,00,00) + left) + s);
HXDLIN( 482)		::String _hx_tmp1;
HXDLIN( 482)		if (hx::IsNull( right )) {
HXLINE( 482)			_hx_tmp1 = left;
            		}
            		else {
HXLINE( 482)			_hx_tmp1 = right;
            		}
HXDLIN( 482)		return (_hx_tmp + _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,surround,return )

::Array< ::String > Strings_obj::toArray(::String s){
            	HX_STACK_FRAME("thx.Strings","toArray",0x33f13028,"thx.Strings.toArray","thx/Strings.hx",494,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 494)		return s.split(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toArray,return )

::Array< Int > Strings_obj::toCharcodes(::String s){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run(::String s1){
            			HX_STACK_FRAME("thx.Strings","toCharcodes",0xd639261f,"thx.Strings.toCharcodes","thx/Strings.hx",503,0x11490c87)
            			HX_STACK_ARG(s1,"s1")
HXLINE( 503)			return ::haxe::Utf8_obj::charCodeAt(s1,(int)0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Strings","toCharcodes",0xd639261f,"thx.Strings.toCharcodes","thx/Strings.hx",502,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 502)		return ::thx::Strings_obj::map(s, ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toCharcodes,return )

::Array< ::String > Strings_obj::toChunks(::String s,Int len){
            	HX_STACK_FRAME("thx.Strings","toChunks",0x4bd353f7,"thx.Strings.toChunks","thx/Strings.hx",509,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(len,"len")
HXLINE( 510)		HX_VARI( ::Array< ::String >,chunks) = ::Array_obj< ::String >::__new(0);
HXLINE( 511)		while(true){
HXLINE( 511)			Int _hx_tmp = ::haxe::Utf8_obj::length(s);
HXDLIN( 511)			if (!((_hx_tmp > (int)0))) {
HXLINE( 511)				goto _hx_goto_3;
            			}
HXLINE( 512)			::String _hx_tmp1 = ::haxe::Utf8_obj::sub(s,(int)0,len);
HXDLIN( 512)			chunks->push(_hx_tmp1);
HXLINE( 513)			Int _hx_tmp2 = ::haxe::Utf8_obj::length(s);
HXDLIN( 513)			s = ::haxe::Utf8_obj::sub(s,len,(_hx_tmp2 - len));
            		}
            		_hx_goto_3:;
HXLINE( 515)		return chunks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,toChunks,return )

::Array< ::String > Strings_obj::toLines(::String s){
            	HX_STACK_FRAME("thx.Strings","toLines",0x8363a08e,"thx.Strings.toLines","thx/Strings.hx",522,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 522)		return ::thx::Strings_obj::SPLIT_LINES->split(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toLines,return )

::String Strings_obj::trimChars(::String value,::String charlist){
            	HX_STACK_FRAME("thx.Strings","trimChars",0x169e0925,"thx.Strings.trimChars","thx/Strings.hx",531,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(charlist,"charlist")
HXLINE( 531)		::String _hx_tmp = ::thx::Strings_obj::trimCharsLeft(value,charlist);
HXDLIN( 531)		return ::thx::Strings_obj::trimCharsRight(_hx_tmp,charlist);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,trimChars,return )

::String Strings_obj::trimCharsLeft(::String value,::String charlist){
            	HX_STACK_FRAME("thx.Strings","trimCharsLeft",0xd93333cc,"thx.Strings.trimCharsLeft","thx/Strings.hx",537,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(charlist,"charlist")
HXLINE( 541)		HX_VARI( Int,pos) = (int)0;
HXLINE( 542)		{
HXLINE( 542)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 542)			HX_VARI( Int,_g) = value.length;
HXDLIN( 542)			while((_g1 < _g)){
HXLINE( 542)				HX_VARI( Int,i) = _g1++;
HXLINE( 543)				HX_VARI( ::String,test) = value.charAt(i);
HXDLIN( 543)				Int _hx_tmp = charlist.indexOf(test,null());
HXDLIN( 543)				if ((_hx_tmp >= (int)0)) {
HXLINE( 544)					++pos;
            				}
            				else {
HXLINE( 546)					goto _hx_goto_4;
            				}
            			}
            			_hx_goto_4:;
            		}
HXLINE( 547)		return value.substring(pos,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,trimCharsLeft,return )

::String Strings_obj::trimCharsRight(::String value,::String charlist){
            	HX_STACK_FRAME("thx.Strings","trimCharsRight",0xaaa72c77,"thx.Strings.trimCharsRight","thx/Strings.hx",554,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(charlist,"charlist")
HXLINE( 558)		HX_VARI( Int,len) = value.length;
HXDLIN( 558)		HX_VARI( Int,pos) = len;
HXDLIN( 558)		HX_VAR( Int,i);
HXLINE( 561)		{
HXLINE( 561)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 561)			while((_g1 < len)){
HXLINE( 561)				HX_VARI( Int,j) = _g1++;
HXLINE( 562)				i = ((len - j) - (int)1);
HXLINE( 563)				HX_VARI( ::String,test) = value.charAt(i);
HXDLIN( 563)				Int _hx_tmp = charlist.indexOf(test,null());
HXDLIN( 563)				if ((_hx_tmp >= (int)0)) {
HXLINE( 564)					pos = i;
            				}
            				else {
HXLINE( 566)					goto _hx_goto_5;
            				}
            			}
            			_hx_goto_5:;
            		}
HXLINE( 568)		return value.substring((int)0,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,trimCharsRight,return )

::String Strings_obj::underscore(::String s){
            	HX_STACK_FRAME("thx.Strings","underscore",0xdf055770,"thx.Strings.underscore","thx/Strings.hx",576,0x11490c87)
            	HX_STACK_ARG(s,"s")
HXLINE( 577)		s =  ::EReg_obj::__new(HX_("::",c0,32,00,00),HX_("g",67,00,00,00))->replace(s,HX_("/",2f,00,00,00));
HXLINE( 578)		s =  ::EReg_obj::__new(HX_("([A-Z]+)([A-Z][a-z])",e1,16,b1,0e),HX_("g",67,00,00,00))->replace(s,HX_("$1_$2",40,8c,18,db));
HXLINE( 579)		s =  ::EReg_obj::__new(HX_("([a-z\\d])([A-Z])",58,34,65,15),HX_("g",67,00,00,00))->replace(s,HX_("$1_$2",40,8c,18,db));
HXLINE( 580)		s =  ::EReg_obj::__new(HX_("-",2d,00,00,00),HX_("g",67,00,00,00))->replace(s,HX_("_",5f,00,00,00));
HXLINE( 581)		return s.toLowerCase();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,underscore,return )

::String Strings_obj::upperCaseFirst(::String value){
            	HX_STACK_FRAME("thx.Strings","upperCaseFirst",0x1fb3d4d4,"thx.Strings.upperCaseFirst","thx/Strings.hx",588,0x11490c87)
            	HX_STACK_ARG(value,"value")
HXLINE( 588)		::String _hx_tmp = value.substring((int)0,(int)1).toUpperCase();
HXDLIN( 588)		::String _hx_tmp1 = value.substring((int)1,null());
HXDLIN( 588)		return (_hx_tmp + _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,upperCaseFirst,return )

::String Strings_obj::upTo(::String value,::String searchFor){
            	HX_STACK_FRAME("thx.Strings","upTo",0x81dbfc6c,"thx.Strings.upTo","thx/Strings.hx",595,0x11490c87)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(searchFor,"searchFor")
HXLINE( 596)		HX_VARI( Int,pos) = value.indexOf(searchFor,null());
HXLINE( 597)		if ((pos < (int)0)) {
HXLINE( 598)			return value;
            		}
            		else {
HXLINE( 600)			return value.substring((int)0,pos);
            		}
HXLINE( 597)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,upTo,return )

::String Strings_obj::wrapColumns(::String s,hx::Null< Int >  __o_columns,::String __o_indent,::String __o_newline){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,newline,::String,indent,Int,columns) HXARGC(1)
            		::String _hx_run(::String part){
            			HX_STACK_FRAME("thx.Strings","wrapColumns",0x3b950b3d,"thx.Strings.wrapColumns","thx/Strings.hx",610,0x11490c87)
            			HX_STACK_ARG(part,"part")
HXLINE( 611)			::String _hx_tmp = ::thx::Strings_obj::WSG->replace(part,HX_(" ",20,00,00,00));
HXDLIN( 611)			::String _hx_tmp1 = ::StringTools_obj::trim(_hx_tmp);
HXLINE( 610)			return ::thx::Strings_obj::wrapLine(_hx_tmp1,columns,indent,newline);
            		}
            		HX_END_LOCAL_FUNC1(return)

Int columns = __o_columns.Default(78);
::String indent = __o_indent.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String newline = __o_newline.Default(HX_HCSTRING("\n","\x0a","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx.Strings","wrapColumns",0x3b950b3d,"thx.Strings.wrapColumns","thx/Strings.hx",609,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(columns,"columns")
            	HX_STACK_ARG(indent,"indent")
            	HX_STACK_ARG(newline,"newline")
HXLINE( 609)		return ::thx::Strings_obj::SPLIT_LINES->split(s)->map( ::Dynamic(new _hx_Closure_0(newline,indent,columns)))->join(newline);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Strings_obj,wrapColumns,return )

::String Strings_obj::upperMatch( ::EReg re){
            	HX_STACK_FRAME("thx.Strings","upperMatch",0x50bcc8b9,"thx.Strings.upperMatch","thx/Strings.hx",616,0x11490c87)
            	HX_STACK_ARG(re,"re")
HXLINE( 616)		return re->matched((int)0).toUpperCase();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,upperMatch,return )

::String Strings_obj::wrapLine(::String s,Int columns,::String indent,::String newline){
            	HX_STACK_FRAME("thx.Strings","wrapLine",0xf2f6fd94,"thx.Strings.wrapLine","thx/Strings.hx",618,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(columns,"columns")
            	HX_STACK_ARG(indent,"indent")
            	HX_STACK_ARG(newline,"newline")
HXLINE( 619)		HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(0);
HXDLIN( 619)		HX_VARI( Int,pos) = (int)0;
HXDLIN( 619)		HX_VARI( Int,len) = s.length;
HXDLIN( 619)		HX_VARI( Int,ilen) = indent.length;
HXLINE( 623)		hx::SubEq(columns,ilen);
HXLINE( 624)		while(true){
HXLINE( 625)			if (((pos + columns) >= (len - ilen))) {
HXLINE( 626)				::String _hx_tmp = s.substring(pos,null());
HXDLIN( 626)				parts->push(_hx_tmp);
HXLINE( 627)				goto _hx_goto_6;
            			}
HXLINE( 630)			HX_VARI( Int,i) = (int)0;
HXLINE( 631)			while(true){
HXLINE( 631)				Bool _hx_tmp1;
HXDLIN( 631)				Bool _hx_tmp2 = !(::StringTools_obj::isSpace(s,((pos + columns) - i)));
HXDLIN( 631)				if (_hx_tmp2) {
HXLINE( 631)					_hx_tmp1 = (i < columns);
            				}
            				else {
HXLINE( 631)					_hx_tmp1 = false;
            				}
HXDLIN( 631)				if (!(_hx_tmp1)) {
HXLINE( 631)					goto _hx_goto_7;
            				}
HXLINE( 632)				++i;
            			}
            			_hx_goto_7:;
HXLINE( 633)			if ((i == columns)) {
HXLINE( 635)				i = (int)0;
HXLINE( 636)				while(true){
HXLINE( 636)					Bool _hx_tmp3;
HXDLIN( 636)					Bool _hx_tmp4 = !(::StringTools_obj::isSpace(s,((pos + columns) + i)));
HXDLIN( 636)					if (_hx_tmp4) {
HXLINE( 636)						_hx_tmp3 = (((pos + columns) + i) < len);
            					}
            					else {
HXLINE( 636)						_hx_tmp3 = false;
            					}
HXDLIN( 636)					if (!(_hx_tmp3)) {
HXLINE( 636)						goto _hx_goto_8;
            					}
HXLINE( 637)					++i;
            				}
            				_hx_goto_8:;
HXLINE( 638)				::String _hx_tmp5 = s.substring(pos,((pos + columns) + i));
HXDLIN( 638)				parts->push(_hx_tmp5);
HXLINE( 639)				hx::AddEq(pos,((columns + i) + (int)1));
            			}
            			else {
HXLINE( 641)				::String _hx_tmp6 = s.substring(pos,((pos + columns) - i));
HXDLIN( 641)				parts->push(_hx_tmp6);
HXLINE( 642)				hx::AddEq(pos,((columns - i) + (int)1));
            			}
            		}
            		_hx_goto_6:;
HXLINE( 646)		::String _hx_tmp7 = parts->join((newline + indent));
HXDLIN( 646)		return (indent + _hx_tmp7);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Strings_obj,wrapLine,return )

::String Strings_obj::lpad(::String s,::String _hx_char,Int length){
            	HX_STACK_FRAME("thx.Strings","lpad",0x7be91c1d,"thx.Strings.lpad","thx/Strings.hx",649,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(_hx_char,"char")
            	HX_STACK_ARG(length,"length")
HXLINE( 650)		Int _hx_tmp = ::haxe::Utf8_obj::length(s);
HXDLIN( 650)		HX_VARI( Int,diff) = (length - _hx_tmp);
HXLINE( 651)		if ((diff > (int)0)) {
HXLINE( 652)			::String _hx_tmp1 = ::thx::Strings_obj::repeat(_hx_char,diff);
HXDLIN( 652)			return (_hx_tmp1 + s);
            		}
            		else {
HXLINE( 654)			return s;
            		}
HXLINE( 651)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,lpad,return )

::String Strings_obj::rpad(::String s,::String _hx_char,Int length){
            	HX_STACK_FRAME("thx.Strings","rpad",0x7fe063d7,"thx.Strings.rpad","thx/Strings.hx",658,0x11490c87)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(_hx_char,"char")
            	HX_STACK_ARG(length,"length")
HXLINE( 659)		Int _hx_tmp = ::haxe::Utf8_obj::length(s);
HXDLIN( 659)		HX_VARI( Int,diff) = (length - _hx_tmp);
HXLINE( 660)		if ((diff > (int)0)) {
HXLINE( 661)			::String _hx_tmp1 = ::thx::Strings_obj::repeat(_hx_char,diff);
HXDLIN( 661)			return (s + _hx_tmp1);
            		}
            		else {
HXLINE( 663)			return s;
            		}
HXLINE( 660)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,rpad,return )

 ::Dynamic Strings_obj::monoid;

 ::EReg Strings_obj::UCWORDS;

 ::EReg Strings_obj::IS_BREAKINGWHITESPACE;

 ::EReg Strings_obj::IS_ALPHA;

 ::EReg Strings_obj::UCWORDSWS;

 ::EReg Strings_obj::ALPHANUM;

 ::EReg Strings_obj::DIGITS;

 ::EReg Strings_obj::STRIPTAGS;

 ::EReg Strings_obj::WSG;

 ::EReg Strings_obj::SPLIT_LINES;

 ::EReg Strings_obj::CANONICALIZE_LINES;


Strings_obj::Strings_obj()
{
}

bool Strings_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"WSG") ) { outValue = WSG; return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"from") ) { outValue = from_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"upTo") ) { outValue = upTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lpad") ) { outValue = lpad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rpad") ) { outValue = rpad_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"after") ) { outValue = after_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"order") ) { outValue = order; return true; }
		if (HX_FIELD_EQ(inName,"count") ) { outValue = count_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quote") ) { outValue = quote_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"diffAt") ) { outValue = diffAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"filter") ) { outValue = filter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"random") ) { outValue = random_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"repeat") ) { outValue = repeat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"monoid") ) { outValue = monoid; return true; }
		if (HX_FIELD_EQ(inName,"DIGITS") ) { outValue = DIGITS; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isAlpha") ) { outValue = isAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ifEmpty") ) { outValue = ifEmpty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { outValue = isEmpty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reverse") ) { outValue = reverse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLines") ) { outValue = toLines_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"UCWORDS") ) { outValue = UCWORDS; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"collapse") ) { outValue = collapse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"contains") ) { outValue = contains_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ellipsis") ) { outValue = ellipsis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hashCode") ) { outValue = hashCode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"humanize") ) { outValue = humanize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeAt") ) { outValue = removeAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"surround") ) { outValue = surround_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toChunks") ) { outValue = toChunks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"wrapLine") ) { outValue = wrapLine_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"IS_ALPHA") ) { outValue = IS_ALPHA; return true; }
		if (HX_FIELD_EQ(inName,"ALPHANUM") ) { outValue = ALPHANUM; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"afterLast") ) { outValue = afterLast_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dasherize") ) { outValue = dasherize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeOne") ) { outValue = removeOne_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"splitOnce") ) { outValue = splitOnce_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stripTags") ) { outValue = stripTags_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trimChars") ) { outValue = trimChars_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"UCWORDSWS") ) { outValue = UCWORDSWS; return true; }
		if (HX_FIELD_EQ(inName,"STRIPTAGS") ) { outValue = STRIPTAGS; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"capitalize") ) { outValue = capitalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasContent") ) { outValue = hasContent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isAlphaNum") ) { outValue = isAlphaNum_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"underscore") ) { outValue = underscore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"upperMatch") ) { outValue = upperMatch_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"containsAny") ) { outValue = containsAny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endsWithAny") ) { outValue = endsWithAny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"HASCODE_MAX") ) { outValue = HASCODE_MAX; return true; }
		if (HX_FIELD_EQ(inName,"HASCODE_MUL") ) { outValue = HASCODE_MUL; return true; }
		if (HX_FIELD_EQ(inName,"isLowerCase") ) { outValue = isLowerCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isUpperCase") ) { outValue = isUpperCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeAfter") ) { outValue = removeAfter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCharcodes") ) { outValue = toCharcodes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"wrapColumns") ) { outValue = wrapColumns_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"SPLIT_LINES") ) { outValue = SPLIT_LINES; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isDigitsOnly") ) { outValue = isDigitsOnly_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeBefore") ) { outValue = removeBefore_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"startsWithAny") ) { outValue = startsWithAny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trimCharsLeft") ) { outValue = trimCharsLeft_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"ellipsisMiddle") ) { outValue = ellipsisMiddle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"filterCharcode") ) { outValue = filterCharcode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lowerCaseFirst") ) { outValue = lowerCaseFirst_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"randomSequence") ) { outValue = randomSequence_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trimCharsRight") ) { outValue = trimCharsRight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"upperCaseFirst") ) { outValue = upperCaseFirst_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"capitalizeWords") ) { outValue = capitalizeWords_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"randomSequence64") ) { outValue = randomSequence64_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"CANONICALIZE_LINES") ) { outValue = CANONICALIZE_LINES; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"canonicalizeNewlines") ) { outValue = canonicalizeNewlines_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isBreakingWhitespace") ) { outValue = isBreakingWhitespace_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"IS_BREAKINGWHITESPACE") ) { outValue = IS_BREAKINGWHITESPACE; return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"caseInsensitiveCompare") ) { outValue = caseInsensitiveCompare_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"caseInsensitiveEndsWith") ) { outValue = caseInsensitiveEndsWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"caseInsensitiveContains") ) { outValue = caseInsensitiveContains_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"caseInsensitiveStartsWith") ) { outValue = caseInsensitiveStartsWith_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"caseInsensitiveEndsWithAny") ) { outValue = caseInsensitiveEndsWithAny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"caseInsensitiveContainsAny") ) { outValue = caseInsensitiveContainsAny_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"caseInsensitiveStartsWithAny") ) { outValue = caseInsensitiveStartsWithAny_dyn(); return true; }
	}
	return false;
}

bool Strings_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"WSG") ) { WSG=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"order") ) { order=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"monoid") ) { monoid=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"DIGITS") ) { DIGITS=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"UCWORDS") ) { UCWORDS=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"IS_ALPHA") ) { IS_ALPHA=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"ALPHANUM") ) { ALPHANUM=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"UCWORDSWS") ) { UCWORDSWS=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"STRIPTAGS") ) { STRIPTAGS=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"HASCODE_MAX") ) { HASCODE_MAX=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"HASCODE_MUL") ) { HASCODE_MUL=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"SPLIT_LINES") ) { SPLIT_LINES=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"CANONICALIZE_LINES") ) { CANONICALIZE_LINES=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"IS_BREAKINGWHITESPACE") ) { IS_BREAKINGWHITESPACE=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Strings_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Strings_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &Strings_obj::order,HX_HCSTRING("order","\x8e","\xf0","\x20","\x35")},
	{hx::fsInt,(void *) &Strings_obj::HASCODE_MAX,HX_HCSTRING("HASCODE_MAX","\x6c","\xa4","\xff","\x6c")},
	{hx::fsInt,(void *) &Strings_obj::HASCODE_MUL,HX_HCSTRING("HASCODE_MUL","\xcc","\xb5","\xff","\x6c")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Strings_obj::monoid,HX_HCSTRING("monoid","\xbe","\xc6","\x6a","\xc7")},
	{hx::fsObject /*::EReg*/ ,(void *) &Strings_obj::UCWORDS,HX_HCSTRING("UCWORDS","\x3b","\x62","\xdc","\xe4")},
	{hx::fsObject /*::EReg*/ ,(void *) &Strings_obj::IS_BREAKINGWHITESPACE,HX_HCSTRING("IS_BREAKINGWHITESPACE","\x35","\x6b","\x5c","\x5a")},
	{hx::fsObject /*::EReg*/ ,(void *) &Strings_obj::IS_ALPHA,HX_HCSTRING("IS_ALPHA","\xe9","\x31","\x44","\x66")},
	{hx::fsObject /*::EReg*/ ,(void *) &Strings_obj::UCWORDSWS,HX_HCSTRING("UCWORDSWS","\x17","\xf3","\x65","\x1e")},
	{hx::fsObject /*::EReg*/ ,(void *) &Strings_obj::ALPHANUM,HX_HCSTRING("ALPHANUM","\xa8","\x35","\xc7","\x7a")},
	{hx::fsObject /*::EReg*/ ,(void *) &Strings_obj::DIGITS,HX_HCSTRING("DIGITS","\x26","\xb6","\xaa","\x67")},
	{hx::fsObject /*::EReg*/ ,(void *) &Strings_obj::STRIPTAGS,HX_HCSTRING("STRIPTAGS","\x91","\xc3","\x85","\xf2")},
	{hx::fsObject /*::EReg*/ ,(void *) &Strings_obj::WSG,HX_HCSTRING("WSG","\xab","\x4c","\x42","\x00")},
	{hx::fsObject /*::EReg*/ ,(void *) &Strings_obj::SPLIT_LINES,HX_HCSTRING("SPLIT_LINES","\x5a","\x47","\x52","\x62")},
	{hx::fsObject /*::EReg*/ ,(void *) &Strings_obj::CANONICALIZE_LINES,HX_HCSTRING("CANONICALIZE_LINES","\x00","\xcd","\x77","\x59")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Strings_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Strings_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Strings_obj::order,"order");
	HX_MARK_MEMBER_NAME(Strings_obj::HASCODE_MAX,"HASCODE_MAX");
	HX_MARK_MEMBER_NAME(Strings_obj::HASCODE_MUL,"HASCODE_MUL");
	HX_MARK_MEMBER_NAME(Strings_obj::monoid,"monoid");
	HX_MARK_MEMBER_NAME(Strings_obj::UCWORDS,"UCWORDS");
	HX_MARK_MEMBER_NAME(Strings_obj::IS_BREAKINGWHITESPACE,"IS_BREAKINGWHITESPACE");
	HX_MARK_MEMBER_NAME(Strings_obj::IS_ALPHA,"IS_ALPHA");
	HX_MARK_MEMBER_NAME(Strings_obj::UCWORDSWS,"UCWORDSWS");
	HX_MARK_MEMBER_NAME(Strings_obj::ALPHANUM,"ALPHANUM");
	HX_MARK_MEMBER_NAME(Strings_obj::DIGITS,"DIGITS");
	HX_MARK_MEMBER_NAME(Strings_obj::STRIPTAGS,"STRIPTAGS");
	HX_MARK_MEMBER_NAME(Strings_obj::WSG,"WSG");
	HX_MARK_MEMBER_NAME(Strings_obj::SPLIT_LINES,"SPLIT_LINES");
	HX_MARK_MEMBER_NAME(Strings_obj::CANONICALIZE_LINES,"CANONICALIZE_LINES");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Strings_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Strings_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Strings_obj::order,"order");
	HX_VISIT_MEMBER_NAME(Strings_obj::HASCODE_MAX,"HASCODE_MAX");
	HX_VISIT_MEMBER_NAME(Strings_obj::HASCODE_MUL,"HASCODE_MUL");
	HX_VISIT_MEMBER_NAME(Strings_obj::monoid,"monoid");
	HX_VISIT_MEMBER_NAME(Strings_obj::UCWORDS,"UCWORDS");
	HX_VISIT_MEMBER_NAME(Strings_obj::IS_BREAKINGWHITESPACE,"IS_BREAKINGWHITESPACE");
	HX_VISIT_MEMBER_NAME(Strings_obj::IS_ALPHA,"IS_ALPHA");
	HX_VISIT_MEMBER_NAME(Strings_obj::UCWORDSWS,"UCWORDSWS");
	HX_VISIT_MEMBER_NAME(Strings_obj::ALPHANUM,"ALPHANUM");
	HX_VISIT_MEMBER_NAME(Strings_obj::DIGITS,"DIGITS");
	HX_VISIT_MEMBER_NAME(Strings_obj::STRIPTAGS,"STRIPTAGS");
	HX_VISIT_MEMBER_NAME(Strings_obj::WSG,"WSG");
	HX_VISIT_MEMBER_NAME(Strings_obj::SPLIT_LINES,"SPLIT_LINES");
	HX_VISIT_MEMBER_NAME(Strings_obj::CANONICALIZE_LINES,"CANONICALIZE_LINES");
};

#endif

hx::Class Strings_obj::__mClass;

static ::String Strings_obj_sStaticFields[] = {
	HX_HCSTRING("after","\x1c","\x66","\xa2","\x1d"),
	HX_HCSTRING("afterLast","\x92","\xda","\x8b","\xc7"),
	HX_HCSTRING("capitalize","\xac","\x09","\x9c","\xe1"),
	HX_HCSTRING("capitalizeWords","\x1d","\x66","\x17","\x26"),
	HX_HCSTRING("canonicalizeNewlines","\x9f","\x3d","\xee","\xed"),
	HX_HCSTRING("caseInsensitiveCompare","\xe4","\xff","\x74","\x52"),
	HX_HCSTRING("caseInsensitiveEndsWith","\x3f","\xea","\x14","\x37"),
	HX_HCSTRING("caseInsensitiveEndsWithAny","\xed","\x79","\x2f","\x43"),
	HX_HCSTRING("caseInsensitiveStartsWith","\x98","\xaa","\x92","\xbd"),
	HX_HCSTRING("caseInsensitiveStartsWithAny","\x34","\xb7","\x9d","\x4c"),
	HX_HCSTRING("collapse","\x6d","\x51","\x95","\xc4"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("order","\x8e","\xf0","\x20","\x35"),
	HX_HCSTRING("caseInsensitiveContains","\x00","\xca","\xd9","\x87"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("caseInsensitiveContainsAny","\xcc","\x28","\x12","\xab"),
	HX_HCSTRING("containsAny","\x0d","\x36","\x48","\x24"),
	HX_HCSTRING("dasherize","\x75","\x22","\xcf","\xc8"),
	HX_HCSTRING("diffAt","\x58","\x60","\x7c","\xb4"),
	HX_HCSTRING("ellipsis","\x51","\x85","\xf2","\x09"),
	HX_HCSTRING("ellipsisMiddle","\x86","\x1f","\x62","\x5b"),
	HX_HCSTRING("endsWithAny","\x2e","\x87","\x65","\xbc"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	HX_HCSTRING("filterCharcode","\xdb","\x86","\x6c","\xa6"),
	HX_HCSTRING("from","\x6a","\xa5","\xc2","\x43"),
	HX_HCSTRING("HASCODE_MAX","\x6c","\xa4","\xff","\x6c"),
	HX_HCSTRING("HASCODE_MUL","\xcc","\xb5","\xff","\x6c"),
	HX_HCSTRING("hashCode","\x1b","\x0c","\x75","\x07"),
	HX_HCSTRING("hasContent","\xff","\x74","\x2b","\xa4"),
	HX_HCSTRING("humanize","\xc7","\xcb","\x97","\xf5"),
	HX_HCSTRING("isAlpha","\x14","\x4b","\x1c","\xbe"),
	HX_HCSTRING("isAlphaNum","\x92","\x6f","\xd8","\x9b"),
	HX_HCSTRING("isBreakingWhitespace","\x6a","\x0f","\x38","\xac"),
	HX_HCSTRING("isLowerCase","\x07","\x90","\xff","\x2f"),
	HX_HCSTRING("isUpperCase","\xe8","\x73","\x98","\xb0"),
	HX_HCSTRING("ifEmpty","\x70","\x2d","\xbc","\xd9"),
	HX_HCSTRING("isDigitsOnly","\x3c","\xef","\xd9","\x52"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("lowerCaseFirst","\x1f","\xa9","\xc1","\xed"),
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	HX_HCSTRING("randomSequence","\x64","\x37","\xf4","\xa9"),
	HX_HCSTRING("randomSequence64","\xa2","\x07","\xfc","\x38"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("removeAfter","\x38","\x43","\xd6","\x1b"),
	HX_HCSTRING("removeAt","\x57","\x6e","\x1b","\xad"),
	HX_HCSTRING("removeBefore","\xe3","\xef","\x5f","\x09"),
	HX_HCSTRING("removeOne","\x82","\xb8","\xef","\xca"),
	HX_HCSTRING("repeat","\x5b","\x97","\x7c","\x06"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("quote","\x3c","\x23","\xf2","\x5d"),
	HX_HCSTRING("splitOnce","\x7b","\x09","\x12","\x4e"),
	HX_HCSTRING("startsWithAny","\xb5","\x56","\x62","\x09"),
	HX_HCSTRING("stripTags","\xd1","\x7f","\x06","\xe2"),
	HX_HCSTRING("surround","\xbe","\xa4","\x0d","\x35"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("toCharcodes","\x15","\xe3","\x66","\xd7"),
	HX_HCSTRING("toChunks","\x41","\x81","\xe9","\xeb"),
	HX_HCSTRING("toLines","\x84","\x2a","\x86","\x41"),
	HX_HCSTRING("trimChars","\x9b","\x7c","\xef","\x89"),
	HX_HCSTRING("trimCharsLeft","\x42","\x9a","\x02","\xcf"),
	HX_HCSTRING("trimCharsRight","\x41","\x6d","\x51","\xca"),
	HX_HCSTRING("underscore","\x3a","\xeb","\xf8","\x52"),
	HX_HCSTRING("upperCaseFirst","\x9e","\x15","\x5e","\x3f"),
	HX_HCSTRING("upTo","\xb6","\x3c","\xab","\x4d"),
	HX_HCSTRING("wrapColumns","\x33","\xc8","\xc2","\x3c"),
	HX_HCSTRING("upperMatch","\x83","\x5c","\xb0","\xc4"),
	HX_HCSTRING("wrapLine","\xde","\x2a","\x0d","\x93"),
	HX_HCSTRING("lpad","\x67","\x5c","\xb8","\x47"),
	HX_HCSTRING("rpad","\x21","\xa4","\xaf","\x4b"),
	HX_HCSTRING("monoid","\xbe","\xc6","\x6a","\xc7"),
	HX_HCSTRING("UCWORDS","\x3b","\x62","\xdc","\xe4"),
	HX_HCSTRING("IS_BREAKINGWHITESPACE","\x35","\x6b","\x5c","\x5a"),
	HX_HCSTRING("IS_ALPHA","\xe9","\x31","\x44","\x66"),
	HX_HCSTRING("UCWORDSWS","\x17","\xf3","\x65","\x1e"),
	HX_HCSTRING("ALPHANUM","\xa8","\x35","\xc7","\x7a"),
	HX_HCSTRING("DIGITS","\x26","\xb6","\xaa","\x67"),
	HX_HCSTRING("STRIPTAGS","\x91","\xc3","\x85","\xf2"),
	HX_HCSTRING("WSG","\xab","\x4c","\x42","\x00"),
	HX_HCSTRING("SPLIT_LINES","\x5a","\x47","\x52","\x62"),
	HX_HCSTRING("CANONICALIZE_LINES","\x00","\xcd","\x77","\x59"),
	::String(null())
};

void Strings_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Strings","\x78","\xbc","\x87","\x71");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Strings_obj::__GetStatic;
	__mClass->mSetStaticField = &Strings_obj::__SetStatic;
	__mClass->mMarkFunc = Strings_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Strings_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Strings_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Strings_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Strings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Strings_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Strings_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",128,0x11490c87)
HXLINE( 128)		order = ::thx::_Ord::Ord_Impl__obj::fromIntComparison(::thx::Strings_obj::compare_dyn());
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",270,0x11490c87)
HXLINE( 270)		HASCODE_MAX = (int)2147483647;
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",271,0x11490c87)
HXLINE( 271)		HASCODE_MUL = (int)31;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::String _hx_run(::String a,::String b){
            			HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",668,0x11490c87)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 668)			return (a + b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",668,0x11490c87)
HXLINE( 668)		monoid =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("append",da,e1,d3,8f), ::Dynamic(new _hx_Closure_0()))
            			->setFixed(1,HX_("zero",28,0f,f1,50),HX_("",00,00,00,00)));
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",670,0x11490c87)
HXLINE( 670)		UCWORDS =  ::EReg_obj::__new(HX_("[^a-zA-Z]([a-z])",8d,ff,d0,2d),HX_("g",67,00,00,00));
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",671,0x11490c87)
HXLINE( 671)		IS_BREAKINGWHITESPACE =  ::EReg_obj::__new(HX_("[^\t\n\r ]",c6,75,ee,92),HX_("",00,00,00,00));
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",672,0x11490c87)
HXLINE( 672)		IS_ALPHA =  ::EReg_obj::__new(HX_("[^a-zA-Z]",9a,8e,03,26),HX_("",00,00,00,00));
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",674,0x11490c87)
HXLINE( 674)		UCWORDSWS =  ::EReg_obj::__new(HX_("[ \t\r\n][a-z]",ce,d6,29,9f),HX_("g",67,00,00,00));
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",675,0x11490c87)
HXLINE( 675)		ALPHANUM =  ::EReg_obj::__new(HX_("^[a-z0-9]+$",0b,bc,d2,b8),HX_("i",69,00,00,00));
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",676,0x11490c87)
HXLINE( 676)		DIGITS =  ::EReg_obj::__new(HX_("^[0-9]+$",17,6b,c4,08),HX_("",00,00,00,00));
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",677,0x11490c87)
HXLINE( 677)		STRIPTAGS =  ::EReg_obj::__new(HX_("</?[a-z]+[^>]*>",03,10,75,c9),HX_("gi",22,5a,00,00));
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",679,0x11490c87)
HXLINE( 679)		WSG =  ::EReg_obj::__new(HX_("[ \t\r\n]+",cf,a8,c7,ca),HX_("g",67,00,00,00));
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",680,0x11490c87)
HXLINE( 680)		SPLIT_LINES =  ::EReg_obj::__new(HX_("\r\n|\n\r|\n|\r",a1,ed,65,e4),HX_("g",67,00,00,00));
            	}
{
            	HX_STACK_FRAME("thx.Strings","boot",0x754c43e8,"thx.Strings.boot","thx/Strings.hx",681,0x11490c87)
HXLINE( 681)		CANONICALIZE_LINES =  ::EReg_obj::__new(HX_("\r\n|\n\r|\r",93,fd,7e,88),HX_("g",67,00,00,00));
            	}
}

} // end namespace thx
