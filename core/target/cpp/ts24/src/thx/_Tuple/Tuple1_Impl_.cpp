// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx__Tuple_Tuple1_Impl_
#include <thx/_Tuple/Tuple1_Impl_.h>
#endif

namespace thx{
namespace _Tuple{

void Tuple1_Impl__obj::__construct() { }

Dynamic Tuple1_Impl__obj::__CreateEmpty() { return new Tuple1_Impl__obj; }

hx::ObjectPtr< Tuple1_Impl__obj > Tuple1_Impl__obj::__new()
{
	hx::ObjectPtr< Tuple1_Impl__obj > _hx_result = new Tuple1_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Tuple1_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tuple1_Impl__obj > _hx_result = new Tuple1_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic Tuple1_Impl__obj::_new( ::Dynamic _0){
            	HX_STACK_FRAME("thx._Tuple.Tuple1_Impl_","_new",0xfe1905eb,"thx._Tuple.Tuple1_Impl_._new","thx/Tuple.hx",48,0x02554e01)
            	HX_STACK_ARG(_0,"_0")
HXLINE(  48)		return _0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tuple1_Impl__obj,_new,return )

 ::Dynamic Tuple1_Impl__obj::get__0( ::Dynamic this1){
            	HX_STACK_FRAME("thx._Tuple.Tuple1_Impl_","get__0",0x88ee9144,"thx._Tuple.Tuple1_Impl_.get__0","thx/Tuple.hx",51,0x02554e01)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  51)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tuple1_Impl__obj,get__0,return )

 ::Dynamic Tuple1_Impl__obj::with( ::Dynamic this1, ::Dynamic v){
            	HX_STACK_FRAME("thx._Tuple.Tuple1_Impl_","with",0x0df26690,"thx._Tuple.Tuple1_Impl_.with","thx/Tuple.hx",58,0x02554e01)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(v,"v")
HXLINE(  58)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),this1)
            			->setFixed(1,HX_("_1",f2,52,00,00),v));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Tuple1_Impl__obj,with,return )

::String Tuple1_Impl__obj::toString( ::Dynamic this1){
            	HX_STACK_FRAME("thx._Tuple.Tuple1_Impl_","toString",0x086cce36,"thx._Tuple.Tuple1_Impl_.toString","thx/Tuple.hx",64,0x02554e01)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  64)		::String _hx_tmp = ::Std_obj::string(this1);
HXDLIN(  64)		return ((HX_("Tuple1(",bf,00,5d,31) + _hx_tmp) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tuple1_Impl__obj,toString,return )

 ::Dynamic Tuple1_Impl__obj::arrayToTuple(::cpp::VirtualArray v){
            	HX_STACK_FRAME("thx._Tuple.Tuple1_Impl_","arrayToTuple",0x7e97027e,"thx._Tuple.Tuple1_Impl_.arrayToTuple","thx/Tuple.hx",67,0x02554e01)
            	HX_STACK_ARG(v,"v")
HXLINE(  67)		return v->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tuple1_Impl__obj,arrayToTuple,return )


Tuple1_Impl__obj::Tuple1_Impl__obj()
{
}

bool Tuple1_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"with") ) { outValue = with_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get__0") ) { outValue = get__0_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"arrayToTuple") ) { outValue = arrayToTuple_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Tuple1_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Tuple1_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Tuple1_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tuple1_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tuple1_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tuple1_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Tuple1_Impl__obj::__mClass;

static ::String Tuple1_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("get__0","\x3a","\xea","\x2f","\xa3"),
	HX_HCSTRING("with","\x06","\x76","\xf8","\x4e"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("arrayToTuple","\xf4","\x77","\x0a","\x96"),
	::String(null())
};

void Tuple1_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._Tuple.Tuple1_Impl_","\x24","\x3c","\x74","\x07");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Tuple1_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Tuple1_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Tuple1_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Tuple1_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tuple1_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tuple1_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tuple1_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace _Tuple
