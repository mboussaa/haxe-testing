// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_utest_Assertation
#include <utest/Assertation.h>
#endif
namespace utest{

::utest::Assertation Assertation_obj::AsyncError( ::Dynamic e,::Array< ::Dynamic> stack)
{
	return hx::CreateEnum< Assertation_obj >(HX_("AsyncError",0c,87,17,18),6,2)->_hx_init(0,e)->_hx_init(1,stack);
}

::utest::Assertation Assertation_obj::Error( ::Dynamic e,::Array< ::Dynamic> stack)
{
	return hx::CreateEnum< Assertation_obj >(HX_("Error",a8,3b,57,06),2,2)->_hx_init(0,e)->_hx_init(1,stack);
}

::utest::Assertation Assertation_obj::Failure(::String msg, ::Dynamic pos)
{
	return hx::CreateEnum< Assertation_obj >(HX_("Failure",2a,98,4b,e4),1,2)->_hx_init(0,msg)->_hx_init(1,pos);
}

::utest::Assertation Assertation_obj::SetupError( ::Dynamic e,::Array< ::Dynamic> stack)
{
	return hx::CreateEnum< Assertation_obj >(HX_("SetupError",2b,ec,dd,4b),3,2)->_hx_init(0,e)->_hx_init(1,stack);
}

::utest::Assertation Assertation_obj::Success( ::Dynamic pos)
{
	return hx::CreateEnum< Assertation_obj >(HX_("Success",a3,4d,9f,85),0,1)->_hx_init(0,pos);
}

::utest::Assertation Assertation_obj::TeardownError( ::Dynamic e,::Array< ::Dynamic> stack)
{
	return hx::CreateEnum< Assertation_obj >(HX_("TeardownError",04,13,5f,d2),4,2)->_hx_init(0,e)->_hx_init(1,stack);
}

::utest::Assertation Assertation_obj::TimeoutError(Int missedAsyncs,::Array< ::Dynamic> stack)
{
	return hx::CreateEnum< Assertation_obj >(HX_("TimeoutError",87,45,e9,bc),5,2)->_hx_init(0,missedAsyncs)->_hx_init(1,stack);
}

::utest::Assertation Assertation_obj::Warning(::String msg)
{
	return hx::CreateEnum< Assertation_obj >(HX_("Warning",3c,02,1d,d7),7,1)->_hx_init(0,msg);
}

bool Assertation_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("AsyncError",0c,87,17,18)) { outValue = Assertation_obj::AsyncError_dyn(); return true; }
	if (inName==HX_("Error",a8,3b,57,06)) { outValue = Assertation_obj::Error_dyn(); return true; }
	if (inName==HX_("Failure",2a,98,4b,e4)) { outValue = Assertation_obj::Failure_dyn(); return true; }
	if (inName==HX_("SetupError",2b,ec,dd,4b)) { outValue = Assertation_obj::SetupError_dyn(); return true; }
	if (inName==HX_("Success",a3,4d,9f,85)) { outValue = Assertation_obj::Success_dyn(); return true; }
	if (inName==HX_("TeardownError",04,13,5f,d2)) { outValue = Assertation_obj::TeardownError_dyn(); return true; }
	if (inName==HX_("TimeoutError",87,45,e9,bc)) { outValue = Assertation_obj::TimeoutError_dyn(); return true; }
	if (inName==HX_("Warning",3c,02,1d,d7)) { outValue = Assertation_obj::Warning_dyn(); return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Assertation_obj)

int Assertation_obj::__FindIndex(::String inName)
{
	if (inName==HX_("AsyncError",0c,87,17,18)) return 6;
	if (inName==HX_("Error",a8,3b,57,06)) return 2;
	if (inName==HX_("Failure",2a,98,4b,e4)) return 1;
	if (inName==HX_("SetupError",2b,ec,dd,4b)) return 3;
	if (inName==HX_("Success",a3,4d,9f,85)) return 0;
	if (inName==HX_("TeardownError",04,13,5f,d2)) return 4;
	if (inName==HX_("TimeoutError",87,45,e9,bc)) return 5;
	if (inName==HX_("Warning",3c,02,1d,d7)) return 7;
	return super::__FindIndex(inName);
}

STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assertation_obj,AsyncError,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assertation_obj,Error,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assertation_obj,Failure,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assertation_obj,SetupError,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assertation_obj,Success,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assertation_obj,TeardownError,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assertation_obj,TimeoutError,return)

STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assertation_obj,Warning,return)

int Assertation_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("AsyncError",0c,87,17,18)) return 2;
	if (inName==HX_("Error",a8,3b,57,06)) return 2;
	if (inName==HX_("Failure",2a,98,4b,e4)) return 2;
	if (inName==HX_("SetupError",2b,ec,dd,4b)) return 2;
	if (inName==HX_("Success",a3,4d,9f,85)) return 1;
	if (inName==HX_("TeardownError",04,13,5f,d2)) return 2;
	if (inName==HX_("TimeoutError",87,45,e9,bc)) return 2;
	if (inName==HX_("Warning",3c,02,1d,d7)) return 1;
	return super::__FindArgCount(inName);
}

hx::Val Assertation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("AsyncError",0c,87,17,18)) return AsyncError_dyn();
	if (inName==HX_("Error",a8,3b,57,06)) return Error_dyn();
	if (inName==HX_("Failure",2a,98,4b,e4)) return Failure_dyn();
	if (inName==HX_("SetupError",2b,ec,dd,4b)) return SetupError_dyn();
	if (inName==HX_("Success",a3,4d,9f,85)) return Success_dyn();
	if (inName==HX_("TeardownError",04,13,5f,d2)) return TeardownError_dyn();
	if (inName==HX_("TimeoutError",87,45,e9,bc)) return TimeoutError_dyn();
	if (inName==HX_("Warning",3c,02,1d,d7)) return Warning_dyn();
	return super::__Field(inName,inCallProp);
}

static ::String Assertation_obj_sStaticFields[] = {
	HX_("Success",a3,4d,9f,85),
	HX_("Failure",2a,98,4b,e4),
	HX_("Error",a8,3b,57,06),
	HX_("SetupError",2b,ec,dd,4b),
	HX_("TeardownError",04,13,5f,d2),
	HX_("TimeoutError",87,45,e9,bc),
	HX_("AsyncError",0c,87,17,18),
	HX_("Warning",3c,02,1d,d7),
	::String(null())
};

static void Assertation_obj_sMarkStatics(HX_MARK_PARAMS) {
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assertation_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assertation_obj::__mClass,"__mClass");
};
#endif

hx::Class Assertation_obj::__mClass;

Dynamic __Create_Assertation_obj() { return new Assertation_obj; }

void Assertation_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("utest.Assertation","\x68","\xbe","\x18","\x3c"), hx::TCanCast< Assertation_obj >,Assertation_obj_sStaticFields,0,
	&__Create_Assertation_obj, &__Create,
	&super::__SGetClass(), &CreateAssertation_obj, Assertation_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , Assertation_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Assertation_obj::__GetStatic;
}

void Assertation_obj::__boot()
{
}


} // end namespace utest
