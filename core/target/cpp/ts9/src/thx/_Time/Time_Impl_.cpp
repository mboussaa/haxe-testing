// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Int64s
#include <thx/Int64s.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_
#include <thx/_DateTimeUtc/DateTimeUtc_Impl_.h>
#endif
#ifndef INCLUDED_thx__Time_Time_Impl_
#include <thx/_Time/Time_Impl_.h>
#endif

namespace thx{
namespace _Time{

void Time_Impl__obj::__construct() { }

Dynamic Time_Impl__obj::__CreateEmpty() { return new Time_Impl__obj; }

hx::ObjectPtr< Time_Impl__obj > Time_Impl__obj::__new()
{
	hx::ObjectPtr< Time_Impl__obj > _hx_result = new Time_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Time_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Time_Impl__obj > _hx_result = new Time_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::cpp::Int64Struct Time_Impl__obj::zero;

 ::cpp::Int64Struct Time_Impl__obj::oneDay;

 ::cpp::Int64Struct Time_Impl__obj::fromDays(Int days){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","fromDays",0x0bc63356,"thx._Time.Time_Impl_.fromDays","thx/Time.hx",14,0x8a8c5ce6)
            	HX_STACK_ARG(days,"days")
HXLINE(  14)		return ::thx::_Time::Time_Impl__obj::create(((int)24 * days),(int)0,(int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,fromDays,return )

 ::cpp::Int64Struct Time_Impl__obj::fromHours(Int hours){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","fromHours",0x987efd30,"thx._Time.Time_Impl_.fromHours","thx/Time.hx",16,0x8a8c5ce6)
            	HX_STACK_ARG(hours,"hours")
HXLINE(  16)		return ::thx::_Time::Time_Impl__obj::create(hours,(int)0,(int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,fromHours,return )

 ::cpp::Int64Struct Time_Impl__obj::fromMinutes(Int minutes){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","fromMinutes",0x58127fc0,"thx._Time.Time_Impl_.fromMinutes","thx/Time.hx",18,0x8a8c5ce6)
            	HX_STACK_ARG(minutes,"minutes")
HXLINE(  18)		return ::thx::_Time::Time_Impl__obj::create((int)0,minutes,(int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,fromMinutes,return )

 ::cpp::Int64Struct Time_Impl__obj::fromSeconds(Int seconds){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","fromSeconds",0x5ec19f20,"thx._Time.Time_Impl_.fromSeconds","thx/Time.hx",20,0x8a8c5ce6)
            	HX_STACK_ARG(seconds,"seconds")
HXLINE(  20)		return ::thx::_Time::Time_Impl__obj::create((int)0,(int)0,seconds,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,fromSeconds,return )

 ::cpp::Int64Struct Time_Impl__obj::fromMilliseconds(Int milliseconds){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","fromMilliseconds",0xd5553dd1,"thx._Time.Time_Impl_.fromMilliseconds","thx/Time.hx",22,0x8a8c5ce6)
            	HX_STACK_ARG(milliseconds,"milliseconds")
HXLINE(  22)		return ::thx::_Time::Time_Impl__obj::create((int)0,(int)0,(int)0,milliseconds);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,fromMilliseconds,return )

 ::cpp::Int64Struct Time_Impl__obj::timeToTicks(Int hours,Int minutes,Int seconds){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","timeToTicks",0xbafba759,"thx._Time.Time_Impl_.timeToTicks","thx/Time.hx",24,0x8a8c5ce6)
            	HX_STACK_ARG(hours,"hours")
            	HX_STACK_ARG(minutes,"minutes")
            	HX_STACK_ARG(seconds,"seconds")
HXLINE(  25)		HX_VARI(  ::cpp::Int64Struct,a) = ( ::cpp::Int64Struct((hours * (int)3600)));
HXDLIN(  25)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((minutes * (int)60)));
HXDLIN(  25)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_add(a,b);
HXDLIN(  25)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct(seconds));
HXDLIN(  25)		HX_VARI(  ::cpp::Int64Struct,totalSeconds) = _hx_int64_add(a1,b1);
HXLINE(  26)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN(  26)		return _hx_int64_mul(totalSeconds,b2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Time_Impl__obj,timeToTicks,return )

 ::cpp::Int64Struct Time_Impl__obj::fromString(::String s){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","fromString",0x1b89ef50,"thx._Time.Time_Impl_.fromString","thx/Time.hx",29,0x8a8c5ce6)
            	HX_STACK_ARG(s,"s")
HXLINE(  30)		HX_VARI(  ::EReg,pattern) =  ::EReg_obj::__new(HX_("^([-+])?(?:(\\d+)[.](\\d{1,2})|(\\d+))[:](\\d{2})(?:[:](\\d{2})(?:\\.(\\d+))?)?$",b6,40,26,eb),HX_("",00,00,00,00));
HXLINE(  31)		Bool _hx_tmp = !(pattern->match(s));
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  32)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to parse Time string: \"",3d,f6,bd,47) + s) + HX_("\"",22,00,00,00)),null(),hx::SourceInfo(HX_("Time.hx",b1,e4,16,a6),32,HX_("thx._Time.Time_Impl_",d9,70,fb,b7),HX_("fromString",db,2d,74,54))));
            		}
HXLINE(  33)		HX_VARI( ::String,smticks) = pattern->matched((int)7);
HXDLIN(  33)		HX_VARI( Int,mticks) = (int)0;
HXLINE(  35)		if (hx::IsNotNull( smticks )) {
HXLINE(  36)			::String _hx_tmp1 = ::thx::Strings_obj::rpad(smticks,HX_("0",30,00,00,00),(int)7).substring((int)0,(int)7);
HXDLIN(  36)			smticks = (HX_("1",31,00,00,00) + _hx_tmp1);
HXLINE(  37)			 ::Dynamic _hx_tmp2 = ::Std_obj::parseInt(smticks);
HXDLIN(  37)			mticks = (_hx_tmp2 - (int)10000000);
            		}
HXLINE(  40)		HX_VARI( Int,days) = (int)0;
HXDLIN(  40)		HX_VARI( Int,hours) = (int)0;
HXLINE(  42)		::String _hx_tmp3 = pattern->matched((int)5);
HXLINE(  40)		HX_VARI(  ::Dynamic,minutes) = ::Std_obj::parseInt(_hx_tmp3);
HXLINE(  43)		::String _hx_tmp4 = pattern->matched((int)6);
HXLINE(  40)		HX_VARI(  ::Dynamic,seconds) = ::Std_obj::parseInt(_hx_tmp4);
HXLINE(  44)		::String _hx_tmp5 = pattern->matched((int)2);
HXDLIN(  44)		if (hx::IsNotNull( _hx_tmp5 )) {
HXLINE(  45)			::String _hx_tmp6 = pattern->matched((int)2);
HXDLIN(  45)			days = ::Std_obj::parseInt(_hx_tmp6);
HXLINE(  46)			::String _hx_tmp7 = pattern->matched((int)3);
HXDLIN(  46)			hours = ::Std_obj::parseInt(_hx_tmp7);
            		}
            		else {
HXLINE(  48)			::String _hx_tmp8 = pattern->matched((int)4);
HXDLIN(  48)			hours = ::Std_obj::parseInt(_hx_tmp8);
            		}
HXLINE(  51)		HX_VARI_NAME(  ::cpp::Int64Struct,this1,"this") = ::thx::_Time::Time_Impl__obj::create(((days * (int)24) + hours),minutes,seconds,null());
HXDLIN(  51)		HX_VARI(  ::cpp::Int64Struct,that) = ( ::cpp::Int64Struct(mticks));
HXDLIN(  51)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1,that);
HXDLIN(  51)		HX_VARI(  ::cpp::Int64Struct,time) = ticks;
HXLINE(  57)		::String _hx_tmp9 = pattern->matched((int)1);
HXDLIN(  57)		if ((_hx_tmp9 == HX_("-",2d,00,00,00))) {
HXLINE(  58)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_neg(time);
HXDLIN(  58)			return ticks1;
            		}
            		else {
HXLINE(  60)			return time;
            		}
HXLINE(  57)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,fromString,return )

Int Time_Impl__obj::compare( ::cpp::Int64Struct a, ::cpp::Int64Struct b){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","compare",0xe2070c10,"thx._Time.Time_Impl_.compare","thx/Time.hx",65,0x8a8c5ce6)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  65)		return ::thx::Int64s_obj::compare(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,compare,return )

 ::cpp::Int64Struct Time_Impl__obj::create(Int hours, ::Dynamic __o_minutes, ::Dynamic __o_seconds, ::Dynamic __o_milliseconds){
 ::Dynamic minutes = __o_minutes.Default(0);
 ::Dynamic seconds = __o_seconds.Default(0);
 ::Dynamic milliseconds = __o_milliseconds.Default(0);
            	HX_STACK_FRAME("thx._Time.Time_Impl_","create",0x900009f1,"thx._Time.Time_Impl_.create","thx/Time.hx",68,0x8a8c5ce6)
            	HX_STACK_ARG(hours,"hours")
            	HX_STACK_ARG(minutes,"minutes")
            	HX_STACK_ARG(seconds,"seconds")
            	HX_STACK_ARG(milliseconds,"milliseconds")
HXLINE(  68)		HX_VARI(  ::cpp::Int64Struct,a) = ::thx::_Time::Time_Impl__obj::timeToTicks(hours,minutes,seconds);
HXDLIN(  68)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = ( ::cpp::Int64Struct(milliseconds));
HXDLIN(  68)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  68)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = _hx_int64_mul(a1,b);
HXDLIN(  68)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(a,b1);
HXDLIN(  68)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Time_Impl__obj,create,return )

 ::cpp::Int64Struct Time_Impl__obj::createDays(Int days, ::Dynamic __o_hours, ::Dynamic __o_minutes, ::Dynamic __o_seconds, ::Dynamic __o_milliseconds){
 ::Dynamic hours = __o_hours.Default(0);
 ::Dynamic minutes = __o_minutes.Default(0);
 ::Dynamic seconds = __o_seconds.Default(0);
 ::Dynamic milliseconds = __o_milliseconds.Default(0);
            	HX_STACK_FRAME("thx._Time.Time_Impl_","createDays",0x1c06dd28,"thx._Time.Time_Impl_.createDays","thx/Time.hx",71,0x8a8c5ce6)
            	HX_STACK_ARG(days,"days")
            	HX_STACK_ARG(hours,"hours")
            	HX_STACK_ARG(minutes,"minutes")
            	HX_STACK_ARG(seconds,"seconds")
            	HX_STACK_ARG(milliseconds,"milliseconds")
HXLINE(  71)		return ::thx::_Time::Time_Impl__obj::create(((days * (int)24) + hours),minutes,seconds,milliseconds);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Time_Impl__obj,createDays,return )

 ::cpp::Int64Struct Time_Impl__obj::_new( ::cpp::Int64Struct ticks){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","_new",0xf18da116,"thx._Time.Time_Impl_._new","thx/Time.hx",73,0x8a8c5ce6)
            	HX_STACK_ARG(ticks,"ticks")
HXLINE(  73)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,_new,return )

 ::cpp::Int64Struct Time_Impl__obj::abs( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","abs",0xc319125d,"thx._Time.Time_Impl_.abs","thx/Time.hx",94,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  94)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)0));
HXDLIN(  94)		Int _hx_tmp = _hx_int64_compare(this1,b);
HXDLIN(  94)		if ((_hx_tmp < (int)0)) {
HXLINE(  94)			HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_neg(this1);
HXDLIN(  94)			return ticks;
            		}
            		else {
HXLINE(  94)			return this1;
            		}
HXDLIN(  94)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,abs,return )

 ::cpp::Int64Struct Time_Impl__obj::withHours( ::cpp::Int64Struct this1,Int hours){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","withHours",0x67e37714,"thx._Time.Time_Impl_.withHours","thx/Time.hx",97,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(hours,"hours")
HXLINE(  97)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN(  97)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN(  97)		if (_hx_tmp) {
HXLINE(  97)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  97)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN(  97)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN(  97)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN(  97)		if (_hx_tmp1) {
HXLINE(  97)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  97)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN(  97)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN(  97)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN(  97)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE(  97)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  97)		Int _hx_tmp4 = _hx_int64_low(x);
HXDLIN(  97)		Int _hx_tmp5 = _hx_tmp4;
HXDLIN(  97)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN(  97)		Bool _hx_tmp6 = _hx_int64_is_zero(this1);
HXDLIN(  97)		if (_hx_tmp6) {
HXLINE(  97)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  97)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_div(this1,b2);
HXDLIN(  97)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN(  97)		Bool _hx_tmp7 = _hx_int64_is_zero(a1);
HXDLIN(  97)		if (_hx_tmp7) {
HXLINE(  97)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  97)		HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(a1,b3);
HXDLIN(  97)		Int _hx_tmp8 = _hx_int64_high(x1);
HXDLIN(  97)		Int _hx_tmp9 = _hx_int64_low(x1);
HXDLIN(  97)		if ((_hx_tmp8 != ((int)_hx_tmp9 >> (int)(int)31))) {
HXLINE(  97)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  97)		Int _hx_tmp10 = _hx_int64_low(x1);
HXDLIN(  97)		Int _hx_tmp11 = _hx_tmp10;
HXDLIN(  97)		HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  97)		Bool _hx_tmp12 = _hx_int64_is_zero(this1);
HXDLIN(  97)		if (_hx_tmp12) {
HXLINE(  97)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  97)		HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = _hx_int64_div(this1,b4);
HXDLIN(  97)		HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::thousandI64;
HXDLIN(  97)		Bool _hx_tmp13 = _hx_int64_is_zero(a2);
HXDLIN(  97)		if (_hx_tmp13) {
HXLINE(  97)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN(  97)		HX_VARI_NAME(  ::cpp::Int64Struct,x2,"x") = _hx_int64_mod(a2,b5);
HXDLIN(  97)		Int _hx_tmp14 = _hx_int64_high(x2);
HXDLIN(  97)		Int _hx_tmp15 = _hx_int64_low(x2);
HXDLIN(  97)		if ((_hx_tmp14 != ((int)_hx_tmp15 >> (int)(int)31))) {
HXLINE(  97)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN(  97)		Int _hx_tmp16 = _hx_int64_low(x2);
HXDLIN(  97)		return ::thx::_Time::Time_Impl__obj::create(hours,_hx_tmp5,_hx_tmp11,_hx_tmp16);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,withHours,return )

 ::cpp::Int64Struct Time_Impl__obj::withMinutes( ::cpp::Int64Struct this1,Int minutes){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","withMinutes",0x24f43aa4,"thx._Time.Time_Impl_.withMinutes","thx/Time.hx",100,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(minutes,"minutes")
HXLINE( 100)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 100)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 100)		if (_hx_tmp) {
HXLINE( 100)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 100)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 100)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN( 100)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 100)		if (_hx_tmp1) {
HXLINE( 100)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 100)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 100)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 100)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 100)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 100)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 100)		Int _hx_tmp4 = _hx_int64_low(x);
HXDLIN( 100)		Int _hx_tmp5 = _hx_tmp4;
HXDLIN( 100)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 100)		Bool _hx_tmp6 = _hx_int64_is_zero(this1);
HXDLIN( 100)		if (_hx_tmp6) {
HXLINE( 100)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 100)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_div(this1,b2);
HXDLIN( 100)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 100)		Bool _hx_tmp7 = _hx_int64_is_zero(a1);
HXDLIN( 100)		if (_hx_tmp7) {
HXLINE( 100)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 100)		HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(a1,b3);
HXDLIN( 100)		Int _hx_tmp8 = _hx_int64_high(x1);
HXDLIN( 100)		Int _hx_tmp9 = _hx_int64_low(x1);
HXDLIN( 100)		if ((_hx_tmp8 != ((int)_hx_tmp9 >> (int)(int)31))) {
HXLINE( 100)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 100)		Int _hx_tmp10 = _hx_int64_low(x1);
HXDLIN( 100)		Int _hx_tmp11 = _hx_tmp10;
HXDLIN( 100)		HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN( 100)		Bool _hx_tmp12 = _hx_int64_is_zero(this1);
HXDLIN( 100)		if (_hx_tmp12) {
HXLINE( 100)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 100)		HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = _hx_int64_div(this1,b4);
HXDLIN( 100)		HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::thousandI64;
HXDLIN( 100)		Bool _hx_tmp13 = _hx_int64_is_zero(a2);
HXDLIN( 100)		if (_hx_tmp13) {
HXLINE( 100)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 100)		HX_VARI_NAME(  ::cpp::Int64Struct,x2,"x") = _hx_int64_mod(a2,b5);
HXDLIN( 100)		Int _hx_tmp14 = _hx_int64_high(x2);
HXDLIN( 100)		Int _hx_tmp15 = _hx_int64_low(x2);
HXDLIN( 100)		if ((_hx_tmp14 != ((int)_hx_tmp15 >> (int)(int)31))) {
HXLINE( 100)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 100)		Int _hx_tmp16 = _hx_int64_low(x2);
HXDLIN( 100)		return ::thx::_Time::Time_Impl__obj::create(_hx_tmp5,minutes,_hx_tmp11,_hx_tmp16);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,withMinutes,return )

 ::cpp::Int64Struct Time_Impl__obj::withSeconds( ::cpp::Int64Struct this1,Int seconds){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","withSeconds",0x2ba35a04,"thx._Time.Time_Impl_.withSeconds","thx/Time.hx",103,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(seconds,"seconds")
HXLINE( 103)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 103)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 103)		if (_hx_tmp) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 103)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 103)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN( 103)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 103)		if (_hx_tmp1) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 103)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 103)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 103)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 103)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 103)		Int _hx_tmp4 = _hx_int64_low(x);
HXDLIN( 103)		Int _hx_tmp5 = _hx_tmp4;
HXDLIN( 103)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 103)		Bool _hx_tmp6 = _hx_int64_is_zero(this1);
HXDLIN( 103)		if (_hx_tmp6) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 103)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_div(this1,b2);
HXDLIN( 103)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 103)		Bool _hx_tmp7 = _hx_int64_is_zero(a1);
HXDLIN( 103)		if (_hx_tmp7) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 103)		HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(a1,b3);
HXDLIN( 103)		Int _hx_tmp8 = _hx_int64_high(x1);
HXDLIN( 103)		Int _hx_tmp9 = _hx_int64_low(x1);
HXDLIN( 103)		if ((_hx_tmp8 != ((int)_hx_tmp9 >> (int)(int)31))) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 103)		Int _hx_tmp10 = _hx_int64_low(x1);
HXDLIN( 103)		Int _hx_tmp11 = _hx_tmp10;
HXDLIN( 103)		HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN( 103)		Bool _hx_tmp12 = _hx_int64_is_zero(this1);
HXDLIN( 103)		if (_hx_tmp12) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 103)		HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = _hx_int64_div(this1,b4);
HXDLIN( 103)		HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::thousandI64;
HXDLIN( 103)		Bool _hx_tmp13 = _hx_int64_is_zero(a2);
HXDLIN( 103)		if (_hx_tmp13) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 103)		HX_VARI_NAME(  ::cpp::Int64Struct,x2,"x") = _hx_int64_mod(a2,b5);
HXDLIN( 103)		Int _hx_tmp14 = _hx_int64_high(x2);
HXDLIN( 103)		Int _hx_tmp15 = _hx_int64_low(x2);
HXDLIN( 103)		if ((_hx_tmp14 != ((int)_hx_tmp15 >> (int)(int)31))) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 103)		Int _hx_tmp16 = _hx_int64_low(x2);
HXDLIN( 103)		return ::thx::_Time::Time_Impl__obj::create(_hx_tmp5,_hx_tmp11,seconds,_hx_tmp16);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,withSeconds,return )

 ::cpp::Int64Struct Time_Impl__obj::withMilliseconds( ::cpp::Int64Struct this1,Int milliseconds){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","withMilliseconds",0x434f886d,"thx._Time.Time_Impl_.withMilliseconds","thx/Time.hx",106,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(milliseconds,"milliseconds")
HXLINE( 106)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 106)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 106)		if (_hx_tmp) {
HXLINE( 106)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 106)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 106)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN( 106)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 106)		if (_hx_tmp1) {
HXLINE( 106)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 106)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 106)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 106)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 106)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 106)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 106)		Int _hx_tmp4 = _hx_int64_low(x);
HXDLIN( 106)		Int _hx_tmp5 = _hx_tmp4;
HXDLIN( 106)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 106)		Bool _hx_tmp6 = _hx_int64_is_zero(this1);
HXDLIN( 106)		if (_hx_tmp6) {
HXLINE( 106)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 106)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_div(this1,b2);
HXDLIN( 106)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 106)		Bool _hx_tmp7 = _hx_int64_is_zero(a1);
HXDLIN( 106)		if (_hx_tmp7) {
HXLINE( 106)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 106)		HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(a1,b3);
HXDLIN( 106)		Int _hx_tmp8 = _hx_int64_high(x1);
HXDLIN( 106)		Int _hx_tmp9 = _hx_int64_low(x1);
HXDLIN( 106)		if ((_hx_tmp8 != ((int)_hx_tmp9 >> (int)(int)31))) {
HXLINE( 106)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 106)		Int _hx_tmp10 = _hx_int64_low(x1);
HXDLIN( 106)		Int _hx_tmp11 = _hx_tmp10;
HXDLIN( 106)		HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 106)		Bool _hx_tmp12 = _hx_int64_is_zero(this1);
HXDLIN( 106)		if (_hx_tmp12) {
HXLINE( 106)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 106)		HX_VARI_NAME(  ::cpp::Int64Struct,a2,"a") = _hx_int64_div(this1,b4);
HXDLIN( 106)		HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 106)		Bool _hx_tmp13 = _hx_int64_is_zero(a2);
HXDLIN( 106)		if (_hx_tmp13) {
HXLINE( 106)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 106)		HX_VARI_NAME(  ::cpp::Int64Struct,x2,"x") = _hx_int64_mod(a2,b5);
HXDLIN( 106)		Int _hx_tmp14 = _hx_int64_high(x2);
HXDLIN( 106)		Int _hx_tmp15 = _hx_int64_low(x2);
HXDLIN( 106)		if ((_hx_tmp14 != ((int)_hx_tmp15 >> (int)(int)31))) {
HXLINE( 106)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 106)		Int _hx_tmp16 = _hx_int64_low(x2);
HXDLIN( 106)		return ::thx::_Time::Time_Impl__obj::create(_hx_tmp5,_hx_tmp11,_hx_tmp16,milliseconds);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,withMilliseconds,return )

 ::cpp::Int64Struct Time_Impl__obj::negate( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","negate",0x7b09e4b7,"thx._Time.Time_Impl_.negate","thx/Time.hx",109,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 109)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_neg(this1);
HXDLIN( 109)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,negate,return )

 ::cpp::Int64Struct Time_Impl__obj::add( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","add",0xc319140c,"thx._Time.Time_Impl_.add","thx/Time.hx",112,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 112)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1,that);
HXDLIN( 112)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,add,return )

 ::cpp::Int64Struct Time_Impl__obj::addTicks( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","addTicks",0xf5225eca,"thx._Time.Time_Impl_.addTicks","thx/Time.hx",115,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 115)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1,that);
HXDLIN( 115)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,addTicks,return )

 ::cpp::Int64Struct Time_Impl__obj::subtract( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","subtract",0x63a87f49,"thx._Time.Time_Impl_.subtract","thx/Time.hx",118,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 118)		HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_sub(this1,that);
HXDLIN( 118)		return ticks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,subtract,return )

Int Time_Impl__obj::compareTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","compareTo",0xbaee79ab,"thx._Time.Time_Impl_.compareTo","thx/Time.hx",121,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 121)		return ::thx::Int64s_obj::compare(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,compareTo,return )

Bool Time_Impl__obj::equalsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","equalsTo",0x40d18fcf,"thx._Time.Time_Impl_.equalsTo","thx/Time.hx",124,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 124)		return _hx_int64_eq(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,equalsTo,return )

Bool Time_Impl__obj::equals( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","equals",0xd3e39134,"thx._Time.Time_Impl_.equals","thx/Time.hx",128,0x8a8c5ce6)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 128)		return _hx_int64_eq(self,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,equals,return )

Bool Time_Impl__obj::notEqualsTo( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","notEqualsTo",0x701f6ab8,"thx._Time.Time_Impl_.notEqualsTo","thx/Time.hx",132,0x8a8c5ce6)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 132)		return _hx_int64_neq(self,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,notEqualsTo,return )

Bool Time_Impl__obj::notEquals( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","notEquals",0xf56dafdd,"thx._Time.Time_Impl_.notEquals","thx/Time.hx",135,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 135)		return _hx_int64_neq(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,notEquals,return )

Bool Time_Impl__obj::greaterThan( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","greaterThan",0xe13e4666,"thx._Time.Time_Impl_.greaterThan","thx/Time.hx",139,0x8a8c5ce6)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 139)		Int _hx_tmp = _hx_int64_compare(self,that);
HXDLIN( 139)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,greaterThan,return )

Bool Time_Impl__obj::greater( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","greater",0x165e8465,"thx._Time.Time_Impl_.greater","thx/Time.hx",142,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 142)		Int _hx_tmp = _hx_int64_compare(this1,that);
HXDLIN( 142)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,greater,return )

Bool Time_Impl__obj::greaterEqualsTo( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","greaterEqualsTo",0x06ad331f,"thx._Time.Time_Impl_.greaterEqualsTo","thx/Time.hx",146,0x8a8c5ce6)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 146)		Int _hx_tmp = _hx_int64_compare(self,that);
HXDLIN( 146)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,greaterEqualsTo,return )

Bool Time_Impl__obj::greaterEquals( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","greaterEquals",0x9e98c084,"thx._Time.Time_Impl_.greaterEquals","thx/Time.hx",149,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 149)		Int _hx_tmp = _hx_int64_compare(this1,that);
HXDLIN( 149)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,greaterEquals,return )

Bool Time_Impl__obj::lessThan( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","lessThan",0x5ecb698f,"thx._Time.Time_Impl_.lessThan","thx/Time.hx",153,0x8a8c5ce6)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 153)		Int _hx_tmp = _hx_int64_compare(self,that);
HXDLIN( 153)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,lessThan,return )

Bool Time_Impl__obj::less( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","less",0xfa1e9f0e,"thx._Time.Time_Impl_.less","thx/Time.hx",156,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 156)		Int _hx_tmp = _hx_int64_compare(this1,that);
HXDLIN( 156)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,less,return )

Bool Time_Impl__obj::lessEqualsTo( ::cpp::Int64Struct self, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","lessEqualsTo",0x70759ec8,"thx._Time.Time_Impl_.lessEqualsTo","thx/Time.hx",160,0x8a8c5ce6)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 160)		Int _hx_tmp = _hx_int64_compare(self,that);
HXDLIN( 160)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,lessEqualsTo,return )

Bool Time_Impl__obj::lessEquals( ::cpp::Int64Struct this1, ::cpp::Int64Struct that){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","lessEquals",0x7413bfed,"thx._Time.Time_Impl_.lessEquals","thx/Time.hx",163,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 163)		Int _hx_tmp = _hx_int64_compare(this1,that);
HXDLIN( 163)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Time_Impl__obj,lessEquals,return )

 ::cpp::Int64Struct Time_Impl__obj::toDateTimeUtc( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","toDateTimeUtc",0xf4934679,"thx._Time.Time_Impl_.toDateTimeUtc","thx/Time.hx",166,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 166)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,toDateTimeUtc,return )

::String Time_Impl__obj::toString( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","toString",0xa405dae1,"thx._Time.Time_Impl_.toString","thx/Time.hx",168,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 169)		HX_VARI(  ::cpp::Int64Struct,timeAbs) = ::thx::_Time::Time_Impl__obj::abs(this1);
HXLINE( 170)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 170)		Bool _hx_tmp = _hx_int64_is_zero(timeAbs);
HXDLIN( 170)		if (_hx_tmp) {
HXLINE( 170)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 170)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(timeAbs,b);
HXDLIN( 170)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 170)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 170)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 170)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 170)		Int _hx_tmp3 = _hx_int64_low(x);
HXLINE( 169)		HX_VARI( Int,ticksInSecondAbs) = _hx_tmp3;
HXDLIN( 169)		HX_VAR( ::String,decimals);
HXLINE( 171)		if ((ticksInSecondAbs != (int)0)) {
HXLINE( 171)			::String _hx_tmp4 = ::thx::Strings_obj::trimCharsRight(::thx::Ints_obj::lpad(ticksInSecondAbs,HX_("0",30,00,00,00),(int)7),HX_("0",30,00,00,00));
HXLINE( 169)			decimals = (HX_(".",2e,00,00,00) + _hx_tmp4);
            		}
            		else {
HXLINE( 169)			decimals = HX_("",00,00,00,00);
            		}
HXLINE( 173)		::String _hx_tmp5;
HXDLIN( 173)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)0));
HXDLIN( 173)		Int _hx_tmp6 = _hx_int64_compare(this1,b1);
HXDLIN( 173)		if ((_hx_tmp6 < (int)0)) {
HXLINE( 173)			_hx_tmp5 = HX_("-",2d,00,00,00);
            		}
            		else {
HXLINE( 173)			_hx_tmp5 = HX_("",00,00,00,00);
            		}
HXLINE( 174)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 174)		Bool _hx_tmp7 = _hx_int64_is_zero(timeAbs);
HXDLIN( 174)		if (_hx_tmp7) {
HXLINE( 174)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 174)		 ::cpp::Int64Struct _hx_tmp8 = _hx_int64_div(timeAbs,b2);
HXDLIN( 174)		::String _hx_tmp9 = _hx_int64_to_string(_hx_tmp8);
HXDLIN( 174)		::String _hx_tmp10 = ((HX_("",00,00,00,00) + _hx_tmp9) + HX_(":",3a,00,00,00));
HXDLIN( 174)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 174)		Bool _hx_tmp11 = _hx_int64_is_zero(timeAbs);
HXDLIN( 174)		if (_hx_tmp11) {
HXLINE( 174)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 174)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(timeAbs,b3);
HXDLIN( 174)		HX_VARI_NAME(  ::cpp::Int64Struct,b4,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 174)		Bool _hx_tmp12 = _hx_int64_is_zero(a);
HXDLIN( 174)		if (_hx_tmp12) {
HXLINE( 174)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 174)		HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(a,b4);
HXDLIN( 174)		Int _hx_tmp13 = _hx_int64_high(x1);
HXDLIN( 174)		Int _hx_tmp14 = _hx_int64_low(x1);
HXDLIN( 174)		if ((_hx_tmp13 != ((int)_hx_tmp14 >> (int)(int)31))) {
HXLINE( 174)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 174)		Int _hx_tmp15 = _hx_int64_low(x1);
HXDLIN( 174)		::String _hx_tmp16 = ((_hx_tmp10 + ::thx::Ints_obj::lpad(_hx_tmp15,HX_("0",30,00,00,00),(int)2)) + HX_(":",3a,00,00,00));
HXDLIN( 174)		HX_VARI_NAME(  ::cpp::Int64Struct,b5,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 174)		Bool _hx_tmp17 = _hx_int64_is_zero(timeAbs);
HXDLIN( 174)		if (_hx_tmp17) {
HXLINE( 174)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 174)		HX_VARI_NAME(  ::cpp::Int64Struct,a1,"a") = _hx_int64_div(timeAbs,b5);
HXDLIN( 174)		HX_VARI_NAME(  ::cpp::Int64Struct,b6,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 174)		Bool _hx_tmp18 = _hx_int64_is_zero(a1);
HXDLIN( 174)		if (_hx_tmp18) {
HXLINE( 174)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 174)		HX_VARI_NAME(  ::cpp::Int64Struct,x2,"x") = _hx_int64_mod(a1,b6);
HXDLIN( 174)		Int _hx_tmp19 = _hx_int64_high(x2);
HXDLIN( 174)		Int _hx_tmp20 = _hx_int64_low(x2);
HXDLIN( 174)		if ((_hx_tmp19 != ((int)_hx_tmp20 >> (int)(int)31))) {
HXLINE( 174)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 174)		Int _hx_tmp21 = _hx_int64_low(x2);
HXLINE( 173)		return ((_hx_tmp5 + (_hx_tmp16 + ::thx::Ints_obj::lpad(_hx_tmp21,HX_("0",30,00,00,00),(int)2))) + decimals);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,toString,return )

::String Time_Impl__obj::toGmtString( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","toGmtString",0x29f33aef,"thx._Time.Time_Impl_.toGmtString","thx/Time.hx",178,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 179)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 179)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 179)		if (_hx_tmp) {
HXLINE( 179)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 179)		 ::cpp::Int64Struct _hx_tmp1 = _hx_int64_div(this1,b);
HXDLIN( 179)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_tmp1;
HXDLIN( 179)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 179)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 179)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 179)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 179)		Int _hx_tmp4 = _hx_int64_low(x);
HXDLIN( 179)		HX_VARI( ::String,h) = ::thx::Ints_obj::lpad(_hx_tmp4,HX_("0",30,00,00,00),(int)2);
HXLINE( 180)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)0));
HXDLIN( 180)		Int _hx_tmp5 = _hx_int64_compare(this1,b1);
HXDLIN( 180)		if ((_hx_tmp5 >= (int)0)) {
HXLINE( 181)			h = (HX_("+",2b,00,00,00) + h);
            		}
HXLINE( 182)		::String _hx_tmp6 = ((HX_("",00,00,00,00) + h) + HX_(":",3a,00,00,00));
HXDLIN( 182)		HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 182)		Bool _hx_tmp7 = _hx_int64_is_zero(this1);
HXDLIN( 182)		if (_hx_tmp7) {
HXLINE( 182)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 182)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b2);
HXDLIN( 182)		HX_VARI_NAME(  ::cpp::Int64Struct,b3,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 182)		Bool _hx_tmp8 = _hx_int64_is_zero(a);
HXDLIN( 182)		if (_hx_tmp8) {
HXLINE( 182)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 182)		HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = _hx_int64_mod(a,b3);
HXDLIN( 182)		Int _hx_tmp9 = _hx_int64_high(x1);
HXDLIN( 182)		Int _hx_tmp10 = _hx_int64_low(x1);
HXDLIN( 182)		if ((_hx_tmp9 != ((int)_hx_tmp10 >> (int)(int)31))) {
HXLINE( 182)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 182)		Int _hx_tmp11 = _hx_int64_low(x1);
HXDLIN( 182)		return (_hx_tmp6 + ::thx::Ints_obj::lpad(_hx_tmp11,HX_("0",30,00,00,00),(int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,toGmtString,return )

 ::cpp::Int64Struct Time_Impl__obj::get_ticks( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_ticks",0x0c696ef8,"thx._Time.Time_Impl_.get_ticks","thx/Time.hx",186,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 186)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_ticks,return )

Int Time_Impl__obj::get_days( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_days",0x2db52055,"thx._Time.Time_Impl_.get_days","thx/Time.hx",189,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 189)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 189)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 189)		if (_hx_tmp) {
HXLINE( 189)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 189)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_div(this1,b);
HXDLIN( 189)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 189)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 189)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 189)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 189)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_days,return )

Int Time_Impl__obj::get_hours( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_hours",0x279f6f51,"thx._Time.Time_Impl_.get_hours","thx/Time.hx",192,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 192)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 192)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 192)		if (_hx_tmp) {
HXLINE( 192)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 192)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 192)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN( 192)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 192)		if (_hx_tmp1) {
HXLINE( 192)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 192)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 192)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 192)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 192)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 192)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 192)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_hours,return )

Int Time_Impl__obj::get_minutes( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_minutes",0x45cc7c21,"thx._Time.Time_Impl_.get_minutes","thx/Time.hx",195,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 195)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 195)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 195)		if (_hx_tmp) {
HXLINE( 195)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 195)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 195)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 195)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 195)		if (_hx_tmp1) {
HXLINE( 195)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 195)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 195)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 195)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 195)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 195)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 195)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_minutes,return )

Int Time_Impl__obj::get_seconds( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_seconds",0x4c7b9b81,"thx._Time.Time_Impl_.get_seconds","thx/Time.hx",198,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 198)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 198)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 198)		if (_hx_tmp) {
HXLINE( 198)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 198)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 198)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)60));
HXDLIN( 198)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 198)		if (_hx_tmp1) {
HXLINE( 198)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 198)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 198)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 198)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 198)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 198)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 198)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_seconds,return )

Int Time_Impl__obj::get_milliseconds( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_milliseconds",0x4087c1d0,"thx._Time.Time_Impl_.get_milliseconds","thx/Time.hx",201,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 201)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN( 201)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 201)		if (_hx_tmp) {
HXLINE( 201)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 201)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 201)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::thousandI64;
HXDLIN( 201)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 201)		if (_hx_tmp1) {
HXLINE( 201)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 201)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 201)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 201)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 201)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 201)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 201)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_milliseconds,return )

Int Time_Impl__obj::get_microseconds( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_microseconds",0xc6c0adb9,"thx._Time.Time_Impl_.get_microseconds","thx/Time.hx",204,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 204)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMicrosecondI64;
HXDLIN( 204)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 204)		if (_hx_tmp) {
HXLINE( 204)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 204)		HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this1,b);
HXDLIN( 204)		HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::tenThousandI64;
HXDLIN( 204)		Bool _hx_tmp1 = _hx_int64_is_zero(a);
HXDLIN( 204)		if (_hx_tmp1) {
HXLINE( 204)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 204)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN( 204)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 204)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 204)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 204)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 204)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_microseconds,return )

Int Time_Impl__obj::get_ticksInSecond( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_ticksInSecond",0xf8dcfc51,"thx._Time.Time_Impl_.get_ticksInSecond","thx/Time.hx",207,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 207)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 207)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 207)		if (_hx_tmp) {
HXLINE( 207)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 207)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(this1,b);
HXDLIN( 207)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 207)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 207)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 207)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 207)		return _hx_int64_low(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_ticksInSecond,return )

 ::cpp::Int64Struct Time_Impl__obj::get_totalDays( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_totalDays",0x1410b5fd,"thx._Time.Time_Impl_.get_totalDays","thx/Time.hx",210,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 210)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 210)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 210)		if (_hx_tmp) {
HXLINE( 210)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 210)		return _hx_int64_div(this1,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_totalDays,return )

 ::cpp::Int64Struct Time_Impl__obj::get_totalHours( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_totalHours",0xd166cca9,"thx._Time.Time_Impl_.get_totalHours","thx/Time.hx",213,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 213)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN( 213)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 213)		if (_hx_tmp) {
HXLINE( 213)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 213)		return _hx_int64_div(this1,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_totalHours,return )

 ::cpp::Int64Struct Time_Impl__obj::get_totalMinutes( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_totalMinutes",0x7627df79,"thx._Time.Time_Impl_.get_totalMinutes","thx/Time.hx",216,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 216)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMinuteI64;
HXDLIN( 216)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 216)		if (_hx_tmp) {
HXLINE( 216)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 216)		return _hx_int64_div(this1,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_totalMinutes,return )

 ::cpp::Int64Struct Time_Impl__obj::get_totalSeconds( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_totalSeconds",0x7cd6fed9,"thx._Time.Time_Impl_.get_totalSeconds","thx/Time.hx",219,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 219)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerSecondI64;
HXDLIN( 219)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 219)		if (_hx_tmp) {
HXLINE( 219)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 219)		return _hx_int64_div(this1,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_totalSeconds,return )

 ::cpp::Int64Struct Time_Impl__obj::get_totalMilliseconds( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_totalMilliseconds",0x6a6d3f78,"thx._Time.Time_Impl_.get_totalMilliseconds","thx/Time.hx",222,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 222)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN( 222)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 222)		if (_hx_tmp) {
HXLINE( 222)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 222)		return _hx_int64_div(this1,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_totalMilliseconds,return )

 ::cpp::Int64Struct Time_Impl__obj::get_totalMicroseconds( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_totalMicroseconds",0xf0a62b61,"thx._Time.Time_Impl_.get_totalMicroseconds","thx/Time.hx",225,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 225)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMicrosecondI64;
HXDLIN( 225)		Bool _hx_tmp = _hx_int64_is_zero(this1);
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 225)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 225)		return _hx_int64_div(this1,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_totalMicroseconds,return )

Bool Time_Impl__obj::get_isNegative( ::cpp::Int64Struct this1){
            	HX_STACK_FRAME("thx._Time.Time_Impl_","get_isNegative",0x6b52e0bd,"thx._Time.Time_Impl_.get_isNegative","thx/Time.hx",228,0x8a8c5ce6)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 228)		HX_VARI(  ::cpp::Int64Struct,b) = ( ::cpp::Int64Struct((int)0));
HXDLIN( 228)		Int _hx_tmp = _hx_int64_compare(this1,b);
HXDLIN( 228)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Time_Impl__obj,get_isNegative,return )


Time_Impl__obj::Time_Impl__obj()
{
}

bool Time_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"abs") ) { outValue = abs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"less") ) { outValue = less_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greater") ) { outValue = greater_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromDays") ) { outValue = fromDays_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addTicks") ) { outValue = addTicks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equalsTo") ) { outValue = equalsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessThan") ) { outValue = lessThan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_days") ) { outValue = get_days_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromHours") ) { outValue = fromHours_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withHours") ) { outValue = withHours_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compareTo") ) { outValue = compareTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEquals") ) { outValue = notEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_ticks") ) { outValue = get_ticks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hours") ) { outValue = get_hours_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createDays") ) { outValue = createDays_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEquals") ) { outValue = lessEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromMinutes") ) { outValue = fromMinutes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromSeconds") ) { outValue = fromSeconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"timeToTicks") ) { outValue = timeToTicks_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMinutes") ) { outValue = withMinutes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withSeconds") ) { outValue = withSeconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEqualsTo") ) { outValue = notEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterThan") ) { outValue = greaterThan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toGmtString") ) { outValue = toGmtString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_minutes") ) { outValue = get_minutes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_seconds") ) { outValue = get_seconds_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lessEqualsTo") ) { outValue = lessEqualsTo_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"greaterEquals") ) { outValue = greaterEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toDateTimeUtc") ) { outValue = toDateTimeUtc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_totalDays") ) { outValue = get_totalDays_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_totalHours") ) { outValue = get_totalHours_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_isNegative") ) { outValue = get_isNegative_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"greaterEqualsTo") ) { outValue = greaterEqualsTo_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fromMilliseconds") ) { outValue = fromMilliseconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMilliseconds") ) { outValue = withMilliseconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_milliseconds") ) { outValue = get_milliseconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_microseconds") ) { outValue = get_microseconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_totalMinutes") ) { outValue = get_totalMinutes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_totalSeconds") ) { outValue = get_totalSeconds_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_ticksInSecond") ) { outValue = get_ticksInSecond_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_totalMilliseconds") ) { outValue = get_totalMilliseconds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_totalMicroseconds") ) { outValue = get_totalMicroseconds_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Time_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Time_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &Time_Impl__obj::zero,HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(void *) &Time_Impl__obj::oneDay,HX_HCSTRING("oneDay","\x96","\x57","\xa7","\xfa")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Time_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Time_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Time_Impl__obj::zero,"zero");
	HX_MARK_MEMBER_NAME(Time_Impl__obj::oneDay,"oneDay");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Time_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Time_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Time_Impl__obj::zero,"zero");
	HX_VISIT_MEMBER_NAME(Time_Impl__obj::oneDay,"oneDay");
};

#endif

hx::Class Time_Impl__obj::__mClass;

static ::String Time_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("oneDay","\x96","\x57","\xa7","\xfa"),
	HX_HCSTRING("fromDays","\x21","\x29","\x2f","\xa0"),
	HX_HCSTRING("fromHours","\x05","\x19","\xed","\xdf"),
	HX_HCSTRING("fromMinutes","\xd5","\xfa","\x1e","\xec"),
	HX_HCSTRING("fromSeconds","\x35","\x1a","\xce","\xf2"),
	HX_HCSTRING("fromMilliseconds","\x9c","\x76","\xa9","\x60"),
	HX_HCSTRING("timeToTicks","\x6e","\x22","\x08","\x4f"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("createDays","\xb3","\x1b","\xf1","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("withHours","\xe9","\x92","\x51","\xaf"),
	HX_HCSTRING("withMinutes","\xb9","\xb5","\x00","\xb9"),
	HX_HCSTRING("withSeconds","\x19","\xd5","\xaf","\xbf"),
	HX_HCSTRING("withMilliseconds","\x38","\xc1","\xa3","\xce"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addTicks","\x95","\x54","\x8b","\x89"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	HX_HCSTRING("equalsTo","\x9a","\x85","\x3a","\xd5"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("notEqualsTo","\xcd","\xe5","\x2b","\x04"),
	HX_HCSTRING("notEquals","\xb2","\xcb","\xdb","\x3c"),
	HX_HCSTRING("greaterThan","\x7b","\xc1","\x4a","\x75"),
	HX_HCSTRING("greater","\xfa","\x90","\xc0","\xb7"),
	HX_HCSTRING("greaterEqualsTo","\xb4","\x5c","\x7d","\xf1"),
	HX_HCSTRING("greaterEquals","\xd9","\xea","\x09","\xab"),
	HX_HCSTRING("lessThan","\x5a","\x5f","\x34","\xf3"),
	HX_HCSTRING("less","\x59","\x13","\xb0","\x47"),
	HX_HCSTRING("lessEqualsTo","\x13","\xd6","\x54","\x67"),
	HX_HCSTRING("lessEquals","\x78","\xfe","\xfd","\xac"),
	HX_HCSTRING("toDateTimeUtc","\xce","\x70","\x04","\x01"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toGmtString","\x04","\xb6","\xff","\xbd"),
	HX_HCSTRING("get_ticks","\xcd","\x8a","\xd7","\x53"),
	HX_HCSTRING("get_days","\x20","\x16","\x1e","\xc2"),
	HX_HCSTRING("get_hours","\x26","\x8b","\x0d","\x6f"),
	HX_HCSTRING("get_minutes","\x36","\xf7","\xd8","\xd9"),
	HX_HCSTRING("get_seconds","\x96","\x16","\x88","\xe0"),
	HX_HCSTRING("get_milliseconds","\x9b","\xfa","\xdb","\xcb"),
	HX_HCSTRING("get_microseconds","\x84","\xe6","\x14","\x52"),
	HX_HCSTRING("get_ticksInSecond","\x26","\x75","\x3a","\x57"),
	HX_HCSTRING("get_totalDays","\x52","\xe0","\x81","\x20"),
	HX_HCSTRING("get_totalHours","\xb4","\xac","\xfa","\xa7"),
	HX_HCSTRING("get_totalMinutes","\x44","\x18","\x7c","\x01"),
	HX_HCSTRING("get_totalSeconds","\xa4","\x37","\x2b","\x08"),
	HX_HCSTRING("get_totalMilliseconds","\xcd","\x46","\x40","\x75"),
	HX_HCSTRING("get_totalMicroseconds","\xb6","\x32","\x79","\xfb"),
	HX_HCSTRING("get_isNegative","\xc8","\xc0","\xe6","\x41"),
	::String(null())
};

void Time_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._Time.Time_Impl_","\xd9","\x70","\xfb","\xb7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Time_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Time_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Time_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Time_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Time_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Time_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Time_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Time_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("thx._Time.Time_Impl_","boot",0xf38a0fe7,"thx._Time.Time_Impl_.boot","thx/Time.hx",10,0x8a8c5ce6)
HXLINE(  10)		HX_VARI(  ::cpp::Int64Struct,ticks) = ( ::cpp::Int64Struct((int)0));
HXDLIN(  10)		zero = ticks;
            	}
{
            	HX_STACK_FRAME("thx._Time.Time_Impl_","boot",0xf38a0fe7,"thx._Time.Time_Impl_.boot","thx/Time.hx",11,0x8a8c5ce6)
HXLINE(  11)		HX_VARI(  ::cpp::Int64Struct,ticks) = ( ::cpp::Int64Struct((int)24));
HXDLIN(  11)		oneDay = ticks;
            	}
}

} // end namespace thx
} // end namespace _Time
