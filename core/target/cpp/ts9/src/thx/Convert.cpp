// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Bools
#include <thx/Bools.h>
#endif
#ifndef INCLUDED_thx_Convert
#include <thx/Convert.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Maps
#include <thx/Maps.h>
#endif
#ifndef INCLUDED_thx_Types
#include <thx/Types.h>
#endif
#ifndef INCLUDED_thx__DateTime_DateTime_Impl_
#include <thx/_DateTime/DateTime_Impl_.h>
#endif
#ifndef INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_
#include <thx/_DateTimeUtc/DateTimeUtc_Impl_.h>
#endif

namespace thx{

void Convert_obj::__construct() { }

Dynamic Convert_obj::__CreateEmpty() { return new Convert_obj; }

hx::ObjectPtr< Convert_obj > Convert_obj::__new()
{
	hx::ObjectPtr< Convert_obj > _hx_result = new Convert_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Convert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Convert_obj > _hx_result = new Convert_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String Convert_obj::toString( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toString",0xb69b3dd1,"thx.Convert.toString","thx/Convert.hx",9,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE(   9)		HX_VARI( ::hx::EnumBase,_g) = ::Type_obj::_hx_typeof(value);
HXDLIN(   9)		Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(   9)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  11)				return null();
            			}
            			break;
            			case (int)1: case (int)2: case (int)3: {
HXLINE(  13)				::String _hx_tmp1 = ::Std_obj::string(value);
HXDLIN(  13)				return (HX_("",00,00,00,00) + _hx_tmp1);
            			}
            			break;
            			case (int)4: {
HXLINE(  15)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  15)					return ::haxe::format::JsonPrinter_obj::print(value,null(),null());
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic e = _hx_e;
HXLINE(  15)						HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("unable to convert object to String",3a,d1,94,f3),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),15,HX_("thx.Convert",e9,2b,5e,93),HX_("toString",ac,d0,6e,38))));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			break;
            			case (int)6: {
HXLINE(  17)				::String _hx_switch_0 = ::Type_obj::getClassName(_g->_hx_getObject(0).StaticCast< hx::Class >());
            				if (  (_hx_switch_0==HX_("Date",4e,82,3c,2d)) ){
HXLINE(  21)					return ( ( ::Date)(value) )->toString();
HXDLIN(  21)					goto _hx_goto_0;
            				}
            				if (  (_hx_switch_0==HX_("String",f1,9c,c4,45)) ){
HXLINE(  19)					return value;
HXDLIN(  19)					goto _hx_goto_0;
            				}
            				/* default */{
HXLINE(  23)					Bool _hx_tmp2 = ::Std_obj::is(value,hx::ClassOf< ::haxe::IMap >());
HXDLIN(  23)					if (_hx_tmp2) {
HXLINE(  24)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  24)							HX_VARI_NAME(  ::Dynamic,value1,"value") = ::thx::Maps_obj::toObject(value);
HXDLIN(  24)							return ::haxe::format::JsonPrinter_obj::print(value1,null(),null());
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic e1 = _hx_e;
HXLINE(  24)								HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("unable to convert object to String",3a,d1,94,f3),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),24,HX_("thx.Convert",e9,2b,5e,93),HX_("toString",ac,d0,6e,38))));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            					else {
HXLINE(  26)						::String _hx_tmp3 = ::Std_obj::string(value);
HXDLIN(  26)						HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp3) + HX_(" to String",d6,80,05,e4)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),26,HX_("thx.Convert",e9,2b,5e,93),HX_("toString",ac,d0,6e,38))));
            					}
            				}
            				_hx_goto_0:;
            			}
            			break;
            			default:{
HXLINE(  29)				::String _hx_tmp4 = ::Std_obj::string(value);
HXDLIN(  29)				HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp4) + HX_(" to String",d6,80,05,e4)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),29,HX_("thx.Convert",e9,2b,5e,93),HX_("toString",ac,d0,6e,38))));
            			}
            		}
HXLINE(   9)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toString,return )

::String Convert_obj::toStringOr( ::Dynamic value,::String alt){
            	HX_STACK_FRAME("thx.Convert","toStringOr",0x02435954,"thx.Convert.toStringOr","thx/Convert.hx",34,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE(  34)		if (hx::IsNull( value )) {
HXLINE(  34)			return alt;
            		}
            		else {
HXLINE(  34)			return ::thx::Convert_obj::toString(value);
            		}
HXDLIN(  34)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toStringOr,return )

Int Convert_obj::toInt( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toInt",0xda55d7ef,"thx.Convert.toInt","thx/Convert.hx",36,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE(  37)		if (hx::IsNull( value )) {
HXLINE(  37)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("unable to convert null to Int",5e,dd,a1,4f),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),37,HX_("thx.Convert",e9,2b,5e,93),HX_("toInt",34,be,11,14))));
            		}
HXLINE(  38)		::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(value);
HXDLIN(  38)		HX_VARI( ::String,_g) = ::thx::Types_obj::toString(_hx_tmp);
HXDLIN(  38)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("Bool",4a,b0,f4,2b)) ){
HXLINE(  46)			if (( (Bool)(value) )) {
HXLINE(  38)				return (int)1;
            			}
            			else {
HXLINE(  38)				return (int)0;
            			}
HXLINE(  46)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Float",7c,35,c4,95)) ){
HXLINE(  38)			return ::Std_obj::_hx_int(( (Int)(value) ));
HXDLIN(  38)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Int",cf,c4,37,00)) ){
HXLINE(  38)			return ( (Int)(value) );
HXDLIN(  38)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("String",f1,9c,c4,45)) ){
HXLINE(  43)			Bool _hx_tmp1 = ::thx::Ints_obj::canParse(( (::String)(value) ));
HXDLIN(  43)			if (_hx_tmp1) {
HXLINE(  38)				return ::thx::Ints_obj::parse(( (::String)(value) ),null());
            			}
            			else {
HXLINE(  48)				::String _hx_tmp2 = ::Std_obj::string(value);
HXDLIN(  48)				HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp2) + HX_(" to Int",ca,af,ed,92)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),48,HX_("thx.Convert",e9,2b,5e,93),HX_("toInt",34,be,11,14))));
            			}
HXLINE(  43)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  48)			::String _hx_tmp3 = ::Std_obj::string(value);
HXDLIN(  48)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp3) + HX_(" to Int",ca,af,ed,92)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),48,HX_("thx.Convert",e9,2b,5e,93),HX_("toInt",34,be,11,14))));
            		}
            		_hx_goto_1:;
HXLINE(  38)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toInt,return )

Int Convert_obj::toIntOr( ::Dynamic value,Int alt){
            	HX_STACK_FRAME("thx.Convert","toIntOr",0x7d6f36f2,"thx.Convert.toIntOr","thx/Convert.hx",53,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE(  53)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE(  53)			return ::thx::Convert_obj::toInt(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE(  53)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  53)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toIntOr,return )

Float Convert_obj::toFloat( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toFloat",0xc1e5509c,"thx.Convert.toFloat","thx/Convert.hx",55,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE(  56)		if (hx::IsNull( value )) {
HXLINE(  56)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("unable to convert null to Float",cb,cf,50,26),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),56,HX_("thx.Convert",e9,2b,5e,93),HX_("toFloat",21,12,1b,cf))));
            		}
HXLINE(  57)		::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(value);
HXDLIN(  57)		HX_VARI( ::String,_g) = ::thx::Types_obj::toString(_hx_tmp);
HXDLIN(  57)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("Bool",4a,b0,f4,2b)) ){
HXLINE(  65)			if (( (Bool)(value) )) {
HXLINE(  57)				return ((Float)1.0);
            			}
            			else {
HXLINE(  57)				return ((Float)0.0);
            			}
HXLINE(  65)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Date",4e,82,3c,2d)) ){
HXLINE(  57)			return ( ( ::Date)(value) )->getTime();
HXDLIN(  57)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Float",7c,35,c4,95)) ||  (_hx_switch_0==HX_("Int",cf,c4,37,00)) ){
HXLINE(  57)			return ( (Float)(value) );
HXDLIN(  57)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("String",f1,9c,c4,45)) ){
HXLINE(  60)			Bool _hx_tmp1 = ::thx::Floats_obj::canParse(( (::String)(value) ));
HXDLIN(  60)			if (_hx_tmp1) {
HXLINE(  57)				return ::thx::Floats_obj::parse(( (::String)(value) ));
            			}
            			else {
HXLINE(  67)				::String _hx_tmp2 = ::Std_obj::string(value);
HXDLIN(  67)				HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp2) + HX_(" to Float",37,15,07,b2)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),67,HX_("thx.Convert",e9,2b,5e,93),HX_("toFloat",21,12,1b,cf))));
            			}
HXLINE(  60)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE(  67)			::String _hx_tmp3 = ::Std_obj::string(value);
HXDLIN(  67)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp3) + HX_(" to Float",37,15,07,b2)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),67,HX_("thx.Convert",e9,2b,5e,93),HX_("toFloat",21,12,1b,cf))));
            		}
            		_hx_goto_2:;
HXLINE(  57)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toFloat,return )

Float Convert_obj::toFloatOr( ::Dynamic value,Float alt){
            	HX_STACK_FRAME("thx.Convert","toFloatOr",0x024ff4df,"thx.Convert.toFloatOr","thx/Convert.hx",72,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE(  72)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE(  72)			return ::thx::Convert_obj::toFloat(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE(  72)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  72)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toFloatOr,return )

Bool Convert_obj::toBool( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toBool",0x2c27592a,"thx.Convert.toBool","thx/Convert.hx",74,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE(  75)		if (hx::IsNull( value )) {
HXLINE(  75)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("unable to convert null to Bool",db,14,60,59),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),75,HX_("thx.Convert",e9,2b,5e,93),HX_("toBool",45,ef,d4,76))));
            		}
HXLINE(  76)		::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(value);
HXDLIN(  76)		HX_VARI( ::String,_g) = ::thx::Types_obj::toString(_hx_tmp);
HXDLIN(  76)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("Bool",4a,b0,f4,2b)) ){
HXLINE(  76)			return ( (Bool)(value) );
HXDLIN(  76)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("Float",7c,35,c4,95)) ||  (_hx_switch_0==HX_("Int",cf,c4,37,00)) ){
HXLINE(  76)			return (( (Float)(value) ) != (int)0);
HXDLIN(  76)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("String",f1,9c,c4,45)) ){
HXLINE(  81)			Bool _hx_tmp1 = ::thx::Bools_obj::canParse(( (::String)(value) ));
HXDLIN(  81)			if (_hx_tmp1) {
HXLINE(  76)				return ::thx::Bools_obj::parse(( (::String)(value) ));
            			}
            			else {
HXLINE(  84)				::String _hx_tmp2 = ::Std_obj::string(value);
HXDLIN(  84)				HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp2) + HX_(" to Bool",ef,60,6c,f8)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),84,HX_("thx.Convert",e9,2b,5e,93),HX_("toBool",45,ef,d4,76))));
            			}
HXLINE(  81)			goto _hx_goto_3;
            		}
            		/* default */{
HXLINE(  84)			::String _hx_tmp3 = ::Std_obj::string(value);
HXDLIN(  84)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp3) + HX_(" to Bool",ef,60,6c,f8)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),84,HX_("thx.Convert",e9,2b,5e,93),HX_("toBool",45,ef,d4,76))));
            		}
            		_hx_goto_3:;
HXLINE(  76)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toBool,return )

Bool Convert_obj::toBoolOr( ::Dynamic value,Bool alt){
            	HX_STACK_FRAME("thx.Convert","toBoolOr",0x078fbced,"thx.Convert.toBoolOr","thx/Convert.hx",89,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE(  89)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE(  89)			return ::thx::Convert_obj::toBool(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE(  89)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  89)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toBoolOr,return )

 ::Date Convert_obj::toDate( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toDate",0x2d6f2b2e,"thx.Convert.toDate","thx/Convert.hx",91,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE(  92)		if (hx::IsNull( value )) {
HXLINE(  92)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("unable to convert null to Date",df,e6,a7,5a),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),92,HX_("thx.Convert",e9,2b,5e,93),HX_("toDate",49,c1,1c,78))));
            		}
HXLINE(  93)		::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(value);
HXDLIN(  93)		HX_VARI( ::String,_g) = ::thx::Types_obj::toString(_hx_tmp);
HXDLIN(  93)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("Date",4e,82,3c,2d)) ){
HXLINE(  93)			return ( ( ::Date)(value) );
HXDLIN(  93)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("Float",7c,35,c4,95)) ||  (_hx_switch_0==HX_("Int",cf,c4,37,00)) ){
HXLINE(  93)			return ::Date_obj::fromTime(( (Float)(value) ));
HXDLIN(  93)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("String",f1,9c,c4,45)) ){
HXLINE(  97)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  93)				return ::Date_obj::fromString(( (::String)(value) ));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 100)					::String _hx_tmp1 = ::Std_obj::string(value);
HXDLIN( 100)					HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert string ",ea,71,50,55) + _hx_tmp1) + HX_(" to Date",f3,32,b4,f9)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),100,HX_("thx.Convert",e9,2b,5e,93),HX_("toDate",49,c1,1c,78))));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(  97)			goto _hx_goto_4;
            		}
            		/* default */{
HXLINE( 104)			::String _hx_tmp2 = ::Std_obj::string(value);
HXDLIN( 104)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp2) + HX_(" to Date",f3,32,b4,f9)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),104,HX_("thx.Convert",e9,2b,5e,93),HX_("toDate",49,c1,1c,78))));
            		}
            		_hx_goto_4:;
HXLINE(  93)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toDate,return )

 ::Date Convert_obj::toDateOr( ::Dynamic value, ::Date alt){
            	HX_STACK_FRAME("thx.Convert","toDateOr",0xc7f317f1,"thx.Convert.toDateOr","thx/Convert.hx",109,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 109)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 109)			return ::thx::Convert_obj::toDate(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 109)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 109)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toDateOr,return )

::Array< ::Dynamic> Convert_obj::toDateTime( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toDateTime",0x0025525b,"thx.Convert.toDateTime","thx/Convert.hx",111,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE( 112)		if (hx::IsNull( value )) {
HXLINE( 112)			return null();
            		}
HXLINE( 113)		::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(value);
HXDLIN( 113)		HX_VARI( ::String,_g) = ::thx::Types_obj::toString(_hx_tmp);
HXDLIN( 113)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("Date",4e,82,3c,2d)) ){
HXLINE( 113)			return ::thx::_DateTime::DateTime_Impl__obj::fromDate(( ( ::Date)(value) ));
HXDLIN( 113)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("Float",7c,35,c4,95)) ||  (_hx_switch_0==HX_("Int",cf,c4,37,00)) ){
HXLINE( 113)			return ::thx::_DateTime::DateTime_Impl__obj::fromTime(( (Float)(value) ));
HXDLIN( 113)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("String",f1,9c,c4,45)) ){
HXLINE( 117)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 113)				return ::thx::_DateTime::DateTime_Impl__obj::fromString(( (::String)(value) ));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 120)					::String _hx_tmp1 = ::Std_obj::string(value);
HXDLIN( 120)					HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert string ",ea,71,50,55) + _hx_tmp1) + HX_(" to DateTime",a0,20,ea,0e)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),120,HX_("thx.Convert",e9,2b,5e,93),HX_("toDateTime",f6,91,27,4c))));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 117)			goto _hx_goto_5;
            		}
            		/* default */{
HXLINE( 124)			::String _hx_tmp2 = ::Std_obj::string(value);
HXDLIN( 124)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp2) + HX_(" to DateTime",a0,20,ea,0e)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),124,HX_("thx.Convert",e9,2b,5e,93),HX_("toDateTime",f6,91,27,4c))));
            		}
            		_hx_goto_5:;
HXLINE( 113)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toDateTime,return )

::Array< ::Dynamic> Convert_obj::toDateTimeOr( ::Dynamic value,::Array< ::Dynamic> alt){
            	HX_STACK_FRAME("thx.Convert","toDateTimeOr",0x51e3245e,"thx.Convert.toDateTimeOr","thx/Convert.hx",128,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 129)		HX_VAR( ::Array< ::Dynamic>,v);
HXDLIN( 129)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 129)			v = ::thx::Convert_obj::toDateTime(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 129)				v = null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 130)		if (hx::IsNull( v )) {
HXLINE( 130)			return alt;
            		}
            		else {
HXLINE( 130)			return v;
            		}
HXDLIN( 130)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toDateTimeOr,return )

 ::Dynamic Convert_obj::toDateTimeUtc( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toDateTimeUtc",0x54e13d89,"thx.Convert.toDateTimeUtc","thx/Convert.hx",133,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE( 134)		if (hx::IsNull( value )) {
HXLINE( 134)			return null();
            		}
HXLINE( 135)		::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(value);
HXDLIN( 135)		HX_VARI( ::String,_g) = ::thx::Types_obj::toString(_hx_tmp);
HXDLIN( 135)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("Date",4e,82,3c,2d)) ){
HXLINE( 135)			return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromDate(( ( ::Date)(value) ));
HXDLIN( 135)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("Float",7c,35,c4,95)) ||  (_hx_switch_0==HX_("Int",cf,c4,37,00)) ){
HXLINE( 135)			return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromTime(( (Float)(value) ));
HXDLIN( 135)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("String",f1,9c,c4,45)) ){
HXLINE( 139)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 135)				return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(( (::String)(value) ));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 142)					::String _hx_tmp1 = ::Std_obj::string(value);
HXDLIN( 142)					HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert string ",ea,71,50,55) + _hx_tmp1) + HX_(" to DateTimeUtc",64,e8,2c,30)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),142,HX_("thx.Convert",e9,2b,5e,93),HX_("toDateTimeUtc",ce,70,04,01))));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 139)			goto _hx_goto_6;
            		}
            		/* default */{
HXLINE( 146)			::String _hx_tmp2 = ::Std_obj::string(value);
HXDLIN( 146)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp2) + HX_(" to DateTimeUtc",64,e8,2c,30)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),146,HX_("thx.Convert",e9,2b,5e,93),HX_("toDateTimeUtc",ce,70,04,01))));
            		}
            		_hx_goto_6:;
HXLINE( 135)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toDateTimeUtc,return )

 ::Dynamic Convert_obj::toDateTimeUtcOr( ::Dynamic value, ::cpp::Int64Struct alt){
            	HX_STACK_FRAME("thx.Convert","toDateTimeUtcOr",0x3dd2b70c,"thx.Convert.toDateTimeUtcOr","thx/Convert.hx",150,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 151)		HX_VAR(  ::Dynamic,v);
HXDLIN( 151)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 151)			v = ::thx::Convert_obj::toDateTimeUtc(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 151)				v = null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 152)		if (hx::IsNull( v )) {
HXLINE( 152)			return alt;
            		}
            		else {
HXLINE( 152)			return v;
            		}
HXDLIN( 152)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toDateTimeUtcOr,return )

 ::Dynamic Convert_obj::toObject( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toObject",0xbaaa93bf,"thx.Convert.toObject","thx/Convert.hx",155,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE( 156)		if (hx::IsNull( value )) {
HXLINE( 157)			return null();
            		}
HXLINE( 158)		Bool _hx_tmp = ::Reflect_obj::isObject(value);
HXDLIN( 158)		if (_hx_tmp) {
HXLINE( 159)			return value;
            		}
HXLINE( 160)		::hx::EnumBase _hx_tmp1 = ::Type_obj::_hx_typeof(value);
HXDLIN( 160)		HX_VARI( ::String,_g) = ::thx::Types_obj::toString(_hx_tmp1);
HXDLIN( 160)		if ((_g == HX_("String",f1,9c,c4,45))) {
HXLINE( 162)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 160)				return  ::haxe::format::JsonParser_obj::__new(( (::String)(value) ))->parseRec();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 165)					::String _hx_tmp2 = ::Std_obj::string(value);
HXDLIN( 165)					HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert string ",ea,71,50,55) + _hx_tmp2) + HX_(" to Object",c4,d6,14,e8)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),165,HX_("thx.Convert",e9,2b,5e,93),HX_("toObject",9a,26,7e,3c))));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		else {
HXLINE( 167)			::String _hx_tmp3 = ::Std_obj::string(value);
HXDLIN( 167)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp3) + HX_(" to Object",c4,d6,14,e8)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),167,HX_("thx.Convert",e9,2b,5e,93),HX_("toObject",9a,26,7e,3c))));
            		}
HXLINE( 160)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toObject,return )

 ::Dynamic Convert_obj::toObjectOr( ::Dynamic value, ::Dynamic alt){
            	HX_STACK_FRAME("thx.Convert","toObjectOr",0xa94686c2,"thx.Convert.toObjectOr","thx/Convert.hx",171,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 172)		if (hx::IsNull( value )) {
HXLINE( 172)			return alt;
            		}
HXLINE( 173)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 173)			return ::thx::Convert_obj::toObject(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 173)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 173)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toObjectOr,return )

::Array< ::String > Convert_obj::toArrayString( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toArrayString",0x53c08e4a,"thx.Convert.toArrayString","thx/Convert.hx",177,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE( 177)		return ::thx::Convert_obj::toArray(value,::thx::Convert_obj::toString_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toArrayString,return )

::Array< ::String > Convert_obj::toArrayStringOr( ::Dynamic value,::Array< ::String > alt){
            	HX_STACK_FRAME("thx.Convert","toArrayStringOr",0x2fb87a0d,"thx.Convert.toArrayStringOr","thx/Convert.hx",179,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 180)		if (hx::IsNull( value )) {
HXLINE( 180)			return alt;
            		}
HXLINE( 181)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 181)			return ::thx::Convert_obj::toArrayString(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 181)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 181)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toArrayStringOr,return )

::Array< Int > Convert_obj::toArrayInt( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toArrayInt",0x158671d6,"thx.Convert.toArrayInt","thx/Convert.hx",185,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE( 185)		return ::thx::Convert_obj::toArray(value,::thx::Convert_obj::toInt_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toArrayInt,return )

::Array< Int > Convert_obj::toArrayIntOr( ::Dynamic value,::Array< Int > alt){
            	HX_STACK_FRAME("thx.Convert","toArrayIntOr",0x59675899,"thx.Convert.toArrayIntOr","thx/Convert.hx",187,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 188)		if (hx::IsNull( value )) {
HXLINE( 188)			return alt;
            		}
HXLINE( 189)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 189)			return ::thx::Convert_obj::toArrayInt(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 189)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 189)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toArrayIntOr,return )

::Array< Float > Convert_obj::toArrayFloat( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toArrayFloat",0x9ddd7243,"thx.Convert.toArrayFloat","thx/Convert.hx",193,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE( 193)		return ::thx::Convert_obj::toArray(value,::thx::Convert_obj::toFloat_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toArrayFloat,return )

::Array< Float > Convert_obj::toArrayFloatOr( ::Dynamic value,::Array< Float > alt){
            	HX_STACK_FRAME("thx.Convert","toArrayFloatOr",0xe5d10e46,"thx.Convert.toArrayFloatOr","thx/Convert.hx",195,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 196)		if (hx::IsNull( value )) {
HXLINE( 196)			return alt;
            		}
HXLINE( 197)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 197)			return ::thx::Convert_obj::toArrayFloat(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 197)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 197)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toArrayFloatOr,return )

::Array< Bool > Convert_obj::toArrayBool( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toArrayBool",0xbb7d6963,"thx.Convert.toArrayBool","thx/Convert.hx",201,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE( 201)		return ::thx::Convert_obj::toArray(value,::thx::Convert_obj::toBool_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toArrayBool,return )

::Array< Bool > Convert_obj::toArrayBoolOr( ::Dynamic value,::Array< Bool > alt){
            	HX_STACK_FRAME("thx.Convert","toArrayBoolOr",0xa4b50d66,"thx.Convert.toArrayBoolOr","thx/Convert.hx",203,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 204)		if (hx::IsNull( value )) {
HXLINE( 204)			return alt;
            		}
HXLINE( 205)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 205)			return ::thx::Convert_obj::toArrayBool(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 205)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 205)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toArrayBoolOr,return )

::Array< ::Dynamic> Convert_obj::toArrayDate( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toArrayDate",0xbcc53b67,"thx.Convert.toArrayDate","thx/Convert.hx",209,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE( 209)		return ::thx::Convert_obj::toArray(value,::thx::Convert_obj::toDate_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toArrayDate,return )

::Array< ::Dynamic> Convert_obj::toArrayDateOr( ::Dynamic value,::Array< ::Dynamic> alt){
            	HX_STACK_FRAME("thx.Convert","toArrayDateOr",0x6518686a,"thx.Convert.toArrayDateOr","thx/Convert.hx",211,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 212)		if (hx::IsNull( value )) {
HXLINE( 212)			return alt;
            		}
HXLINE( 213)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 213)			return ::thx::Convert_obj::toArrayDate(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 213)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 213)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toArrayDateOr,return )

::Array< ::Dynamic> Convert_obj::toArrayDateTime( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toArrayDateTime",0x2d9a7314,"thx.Convert.toArrayDateTime","thx/Convert.hx",217,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE( 217)		return ::thx::Convert_obj::toArray(value,::thx::Convert_obj::toDateTime_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toArrayDateTime,return )

::Array< ::Dynamic> Convert_obj::toArrayDateTimeOr( ::Dynamic value,::Array< ::Dynamic> alt){
            	HX_STACK_FRAME("thx.Convert","toArrayDateTimeOr",0x9f6ca557,"thx.Convert.toArrayDateTimeOr","thx/Convert.hx",219,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 220)		if (hx::IsNull( value )) {
HXLINE( 220)			return alt;
            		}
HXLINE( 221)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 221)			return ::thx::Convert_obj::toArrayDateTime(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 221)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 221)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toArrayDateTimeOr,return )

::Array< ::Dynamic> Convert_obj::toArrayObject( ::Dynamic value){
            	HX_STACK_FRAME("thx.Convert","toArrayObject",0x57cfe438,"thx.Convert.toArrayObject","thx/Convert.hx",225,0xe29319b6)
            	HX_STACK_ARG(value,"value")
HXLINE( 225)		return ::thx::Convert_obj::toArray(value,::thx::Convert_obj::toObject_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Convert_obj,toArrayObject,return )

::Array< ::Dynamic> Convert_obj::toArrayObjectOr( ::Dynamic value,::Array< ::Dynamic> alt){
            	HX_STACK_FRAME("thx.Convert","toArrayObjectOr",0xd6bba77b,"thx.Convert.toArrayObjectOr","thx/Convert.hx",227,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 228)		if (hx::IsNull( value )) {
HXLINE( 228)			return alt;
            		}
HXLINE( 229)		try {
            			HX_STACK_CATCHABLE( ::thx::Error, 0);
HXLINE( 229)			return ::thx::Convert_obj::toArrayObject(value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::thx::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::thx::Error e = _hx_e;
HXLINE( 229)				return alt;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 229)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toArrayObjectOr,return )

::cpp::VirtualArray Convert_obj::toArray( ::Dynamic value, ::Dynamic convert){
            	HX_STACK_FRAME("thx.Convert","toArray",0xe4ddf899,"thx.Convert.toArray","thx/Convert.hx",232,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(convert,"convert")
HXLINE( 233)		if (hx::IsNull( value )) {
HXLINE( 233)			return ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 234)		Bool _hx_tmp = ::Std_obj::is(value,hx::ArrayBase::__mClass);
HXDLIN( 234)		if (_hx_tmp) {
HXLINE( 234)			return ( (::cpp::VirtualArray)(value) )->map(convert);
            		}
            		else {
HXLINE( 236)			::String _hx_tmp1 = ::Std_obj::string(value);
HXDLIN( 236)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to convert ",e5,72,35,85) + _hx_tmp1) + HX_(" to Array<T>",f2,4b,41,24)),null(),hx::SourceInfo(HX_("Convert.hx",cb,42,45,db),236,HX_("thx.Convert",e9,2b,5e,93),HX_("toArray",1e,ba,13,f2))));
            		}
HXLINE( 234)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toArray,return )

 ::haxe::ds::StringMap Convert_obj::toMap( ::Dynamic value, ::Dynamic convert){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,obj, ::Dynamic,convert) HXARGC(2)
            		 ::haxe::ds::StringMap _hx_run( ::haxe::ds::StringMap map,::String field){
            			HX_STACK_FRAME("thx.Convert","toMap",0xda58d59c,"thx.Convert.toMap","thx/Convert.hx",241,0xe29319b6)
            			HX_STACK_ARG(map,"map")
            			HX_STACK_ARG(field,"field")
HXLINE( 242)			{
HXLINE( 242)				 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(obj,field);
HXDLIN( 242)				HX_VARI_NAME(  ::Dynamic,value1,"value") = convert(_hx_tmp1);
HXDLIN( 242)				map->set(field,value1);
            			}
HXLINE( 243)			return map;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.Convert","toMap",0xda58d59c,"thx.Convert.toMap","thx/Convert.hx",239,0xe29319b6)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(convert,"convert")
HXLINE( 240)		HX_VARI(  ::Dynamic,obj) = ::thx::Convert_obj::toObject(value);
HXLINE( 241)		::Array< ::String > _hx_tmp = ::Reflect_obj::fields(obj);
HXDLIN( 241)		return ( ( ::haxe::ds::StringMap)(::thx::Arrays_obj::reduce(_hx_tmp, ::Dynamic(new _hx_Closure_0(obj,convert)), ::haxe::ds::StringMap_obj::__new())) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Convert_obj,toMap,return )


Convert_obj::Convert_obj()
{
}

bool Convert_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toMap") ) { outValue = toMap_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toBool") ) { outValue = toBool_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toDate") ) { outValue = toDate_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toIntOr") ) { outValue = toIntOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFloat") ) { outValue = toFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toBoolOr") ) { outValue = toBoolOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toDateOr") ) { outValue = toDateOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toObject") ) { outValue = toObject_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"toFloatOr") ) { outValue = toFloatOr_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"toStringOr") ) { outValue = toStringOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toDateTime") ) { outValue = toDateTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toObjectOr") ) { outValue = toObjectOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayInt") ) { outValue = toArrayInt_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toArrayBool") ) { outValue = toArrayBool_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayDate") ) { outValue = toArrayDate_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toDateTimeOr") ) { outValue = toDateTimeOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayIntOr") ) { outValue = toArrayIntOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayFloat") ) { outValue = toArrayFloat_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toDateTimeUtc") ) { outValue = toDateTimeUtc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayString") ) { outValue = toArrayString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayBoolOr") ) { outValue = toArrayBoolOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayDateOr") ) { outValue = toArrayDateOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayObject") ) { outValue = toArrayObject_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"toArrayFloatOr") ) { outValue = toArrayFloatOr_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"toDateTimeUtcOr") ) { outValue = toDateTimeUtcOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayStringOr") ) { outValue = toArrayStringOr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayDateTime") ) { outValue = toArrayDateTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArrayObjectOr") ) { outValue = toArrayObjectOr_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"toArrayDateTimeOr") ) { outValue = toArrayDateTimeOr_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Convert_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Convert_obj_sStaticStorageInfo = 0;
#endif

static void Convert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Convert_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Convert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Convert_obj::__mClass,"__mClass");
};

#endif

hx::Class Convert_obj::__mClass;

static ::String Convert_obj_sStaticFields[] = {
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toStringOr","\xef","\x98","\x45","\x4e"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("toIntOr","\x77","\xf8","\xa4","\x8a"),
	HX_HCSTRING("toFloat","\x21","\x12","\x1b","\xcf"),
	HX_HCSTRING("toFloatOr","\xa4","\xe1","\x9c","\x19"),
	HX_HCSTRING("toBool","\x45","\xef","\xd4","\x76"),
	HX_HCSTRING("toBoolOr","\xc8","\x4f","\x63","\x89"),
	HX_HCSTRING("toDate","\x49","\xc1","\x1c","\x78"),
	HX_HCSTRING("toDateOr","\xcc","\xaa","\xc6","\x49"),
	HX_HCSTRING("toDateTime","\xf6","\x91","\x27","\x4c"),
	HX_HCSTRING("toDateTimeOr","\xb9","\xc0","\xa8","\x52"),
	HX_HCSTRING("toDateTimeUtc","\xce","\x70","\x04","\x01"),
	HX_HCSTRING("toDateTimeUtcOr","\x91","\x05","\x9d","\x9f"),
	HX_HCSTRING("toObject","\x9a","\x26","\x7e","\x3c"),
	HX_HCSTRING("toObjectOr","\x5d","\xc6","\x48","\xf5"),
	HX_HCSTRING("toArrayString","\x8f","\xc1","\xe3","\xff"),
	HX_HCSTRING("toArrayStringOr","\x92","\xc8","\x82","\x91"),
	HX_HCSTRING("toArrayInt","\x71","\xb1","\x88","\x61"),
	HX_HCSTRING("toArrayIntOr","\xf4","\xf4","\x2c","\x5a"),
	HX_HCSTRING("toArrayFloat","\x9e","\x0e","\xa3","\x9e"),
	HX_HCSTRING("toArrayFloatOr","\x61","\xb7","\x7a","\xd8"),
	HX_HCSTRING("toArrayBool","\x68","\xd1","\x72","\xf1"),
	HX_HCSTRING("toArrayBoolOr","\xab","\x40","\xd8","\x50"),
	HX_HCSTRING("toArrayDate","\x6c","\xa3","\xba","\xf2"),
	HX_HCSTRING("toArrayDateOr","\xaf","\x9b","\x3b","\x11"),
	HX_HCSTRING("toArrayDateTime","\x99","\xc1","\x64","\x8f"),
	HX_HCSTRING("toArrayDateTimeOr","\x1c","\x5f","\x4b","\xc3"),
	HX_HCSTRING("toArrayObject","\x7d","\x17","\xf3","\x03"),
	HX_HCSTRING("toArrayObjectOr","\x00","\xf6","\x85","\x38"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("toMap","\xe1","\xbb","\x14","\x14"),
	::String(null())
};

void Convert_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Convert","\xe9","\x2b","\x5e","\x93");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Convert_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Convert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Convert_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Convert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Convert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Convert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Convert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
