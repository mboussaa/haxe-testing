// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_Convert
#include <thx/Convert.h>
#endif
#ifndef INCLUDED_thx_TestConvert
#include <thx/TestConvert.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestConvert_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestConvert","new",0xc1fa1529,"thx.TestConvert.new","thx/TestConvert.hx",8,0x6ff82228)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   8)		this->x = i;
            	}

Dynamic TestConvert_obj::__CreateEmpty() { return new TestConvert_obj; }

hx::ObjectPtr< TestConvert_obj > TestConvert_obj::__new(Int i)
{
	hx::ObjectPtr< TestConvert_obj > _hx_result = new TestConvert_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestConvert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestConvert_obj > _hx_result = new TestConvert_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestConvert_obj::testString(){
            	HX_STACK_FRAME("thx.TestConvert","testString",0xd82a451a,"thx.TestConvert.testString","thx/TestConvert.hx",12,0x6ff82228)
            	HX_STACK_THIS(this)
HXLINE(  12)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  12)		HX_VARI( Int,_g) = this->x;
HXDLIN(  12)		while((_g1 < _g)){
HXLINE(  12)			++_g1;
HXLINE(  13)			::String _hx_tmp = ::thx::Convert_obj::toString((int)1);
HXDLIN(  13)			::utest::Assert_obj::equals(HX_("1",31,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),13,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testString",c3,6e,24,2a)));
HXLINE(  14)			::String _hx_tmp1 = ::thx::Convert_obj::toStringOr(null(),HX_("1",31,00,00,00));
HXDLIN(  14)			::utest::Assert_obj::equals(HX_("1",31,00,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),14,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testString",c3,6e,24,2a)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConvert_obj,testString,(void))

void TestConvert_obj::testInt(){
            	HX_STACK_FRAME("thx.TestConvert","testInt",0x45615906,"thx.TestConvert.testInt","thx/TestConvert.hx",18,0x6ff82228)
            	HX_STACK_THIS(this)
HXLINE(  18)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  18)		HX_VARI( Int,_g) = this->x;
HXDLIN(  18)		while((_g1 < _g)){
HXLINE(  18)			++_g1;
HXLINE(  19)			Int _hx_tmp = ::thx::Convert_obj::toInt(HX_("1",31,00,00,00));
HXDLIN(  19)			::utest::Assert_obj::equals((int)1,_hx_tmp,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),19,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testInt",bd,7b,be,bd)));
HXLINE(  20)			Int _hx_tmp1 = ::thx::Convert_obj::toInt(true);
HXDLIN(  20)			::utest::Assert_obj::equals((int)1,_hx_tmp1,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),20,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testInt",bd,7b,be,bd)));
HXLINE(  21)			Int _hx_tmp2 = ::thx::Convert_obj::toInt(false);
HXDLIN(  21)			::utest::Assert_obj::equals((int)0,_hx_tmp2,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),21,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testInt",bd,7b,be,bd)));
HXLINE(  22)			Int _hx_tmp3 = ::thx::Convert_obj::toInt(((Float)1.1));
HXDLIN(  22)			::utest::Assert_obj::equals((int)1,_hx_tmp3,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),22,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testInt",bd,7b,be,bd)));
HXLINE(  24)			Int _hx_tmp4 = ::thx::Convert_obj::toIntOr(HX_("z",7a,00,00,00),(int)1);
HXDLIN(  24)			::utest::Assert_obj::equals((int)1,_hx_tmp4,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),24,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testInt",bd,7b,be,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConvert_obj,testInt,(void))

void TestConvert_obj::testFloat(){
            	HX_STACK_FRAME("thx.TestConvert","testFloat",0xa7a48573,"thx.TestConvert.testFloat","thx/TestConvert.hx",28,0x6ff82228)
            	HX_STACK_THIS(this)
HXLINE(  28)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  28)		HX_VARI( Int,_g) = this->x;
HXDLIN(  28)		while((_g1 < _g)){
HXLINE(  28)			++_g1;
HXLINE(  29)			Float _hx_tmp = ::thx::Convert_obj::toFloat(HX_("1",31,00,00,00));
HXDLIN(  29)			::utest::Assert_obj::equals((int)1,_hx_tmp,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),29,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testFloat",ea,03,99,cb)));
HXLINE(  30)			Float _hx_tmp1 = ::thx::Convert_obj::toFloat(true);
HXDLIN(  30)			::utest::Assert_obj::equals((int)1,_hx_tmp1,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),30,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testFloat",ea,03,99,cb)));
HXLINE(  31)			Float _hx_tmp2 = ::thx::Convert_obj::toFloat(false);
HXDLIN(  31)			::utest::Assert_obj::equals((int)0,_hx_tmp2,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),31,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testFloat",ea,03,99,cb)));
HXLINE(  32)			Float _hx_tmp3 = ::thx::Convert_obj::toFloat(((Float)1.1));
HXDLIN(  32)			::utest::Assert_obj::equals(((Float)1.1),_hx_tmp3,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),32,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testFloat",ea,03,99,cb)));
HXLINE(  34)			Float _hx_tmp4 = ::thx::Convert_obj::toFloatOr(HX_("z",7a,00,00,00),((Float)1.1));
HXDLIN(  34)			::utest::Assert_obj::equals(((Float)1.1),_hx_tmp4,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),34,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testFloat",ea,03,99,cb)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConvert_obj,testFloat,(void))

void TestConvert_obj::testBool(){
            	HX_STACK_FRAME("thx.TestConvert","testBool",0x6b2ccc33,"thx.TestConvert.testBool","thx/TestConvert.hx",38,0x6ff82228)
            	HX_STACK_THIS(this)
HXLINE(  38)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  38)		HX_VARI( Int,_g) = this->x;
HXDLIN(  38)		while((_g1 < _g)){
HXLINE(  38)			++_g1;
HXLINE(  39)			Bool _hx_tmp = ::thx::Convert_obj::toBool(HX_("1",31,00,00,00));
HXDLIN(  39)			::utest::Assert_obj::equals(true,_hx_tmp,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),39,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testBool",9c,09,4e,44)));
HXLINE(  40)			Bool _hx_tmp1 = ::thx::Convert_obj::toBool(true);
HXDLIN(  40)			::utest::Assert_obj::equals(true,_hx_tmp1,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),40,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testBool",9c,09,4e,44)));
HXLINE(  41)			Bool _hx_tmp2 = ::thx::Convert_obj::toBool(false);
HXDLIN(  41)			::utest::Assert_obj::equals(false,_hx_tmp2,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),41,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testBool",9c,09,4e,44)));
HXLINE(  42)			Bool _hx_tmp3 = ::thx::Convert_obj::toBool(((Float)1.1));
HXDLIN(  42)			::utest::Assert_obj::equals(true,_hx_tmp3,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),42,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testBool",9c,09,4e,44)));
HXLINE(  43)			Bool _hx_tmp4 = ::thx::Convert_obj::toBool((int)0);
HXDLIN(  43)			::utest::Assert_obj::equals(false,_hx_tmp4,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),43,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testBool",9c,09,4e,44)));
HXLINE(  45)			Bool _hx_tmp5 = ::thx::Convert_obj::toBoolOr(HX_("z",7a,00,00,00),true);
HXDLIN(  45)			::utest::Assert_obj::equals(true,_hx_tmp5,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),45,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testBool",9c,09,4e,44)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConvert_obj,testBool,(void))

void TestConvert_obj::testMap(){
            	HX_STACK_FRAME("thx.TestConvert","testMap",0x456456b3,"thx.TestConvert.testMap","thx/TestConvert.hx",49,0x6ff82228)
            	HX_STACK_THIS(this)
HXLINE(  49)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  49)		HX_VARI( Int,_g) = this->x;
HXDLIN(  49)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			::Array< ::String > _hx_run( ::Dynamic val){
            				HX_STACK_FRAME("thx.TestConvert","testMap",0x456456b3,"thx.TestConvert.testMap","thx/TestConvert.hx",54,0x6ff82228)
            				HX_STACK_ARG(val,"val")
HXLINE(  54)				return ::thx::Convert_obj::toArray(val,::thx::Convert_obj::toString_dyn());
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestConvert","testMap",0x456456b3,"thx.TestConvert.testMap","thx/TestConvert.hx",59,0x6ff82228)
HXLINE(  59)				::thx::Convert_obj::toMap((int)3,::thx::Convert_obj::toString_dyn());
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Dynamic,objOfArrays) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestConvert","testMap",0x456456b3,"thx.TestConvert.testMap","thx/TestConvert.hx",60,0x6ff82228)
HXLINE(  60)				::thx::Convert_obj::toMap(objOfArrays,::thx::Convert_obj::toString_dyn());
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  49)			++_g1;
HXLINE(  50)			HX_VARI(  ::Dynamic,objOfArrays) =  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("baz",db,b1,4a,00),::Array_obj< ::String >::__new(1)->init(0,HX_("qux",14,25,56,00)))
            				->setFixed(1,HX_("foo",06,c7,4d,00),::Array_obj< ::String >::__new(1)->init(0,HX_("bar",d3,b1,4a,00))));
HXDLIN(  50)			HX_VARI(  ::Dynamic,objOfNumbers) =  ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("a",61,00,00,00),(int)1)
            				->setFixed(1,HX_("b",62,00,00,00),(int)2)
            				->setFixed(2,HX_("c",63,00,00,00),(int)3));
HXLINE(  53)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::Convert_obj::toMap(objOfArrays, ::Dynamic(new _hx_Closure_0()));
HXDLIN(  53)			::Array< ::String > _hx_tmp = ( (::Array< ::String >)(::haxe::IMap_obj::get(this1,HX_("foo",06,c7,4d,00))) );
HXDLIN(  53)			::utest::Assert_obj::equals(HX_("bar",d3,b1,4a,00),_hx_tmp->__get((int)0),null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),53,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testMap",6a,79,c1,bd)));
HXLINE(  57)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::Convert_obj::toMap(objOfNumbers,::thx::Convert_obj::toInt_dyn());
HXDLIN(  57)			 ::Dynamic _hx_tmp1 = ::haxe::IMap_obj::get(this2,HX_("b",62,00,00,00));
HXDLIN(  57)			::utest::Assert_obj::equals((int)2,_hx_tmp1,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),57,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testMap",6a,79,c1,bd)));
HXLINE(  59)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_1()),null(),null(),null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),59,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testMap",6a,79,c1,bd)));
HXLINE(  60)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_2(objOfArrays)),null(),null(),null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),60,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testMap",6a,79,c1,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConvert_obj,testMap,(void))

void TestConvert_obj::testDateTimeUtc(){
            	HX_STACK_FRAME("thx.TestConvert","testDateTimeUtc",0xdc862da0,"thx.TestConvert.testDateTimeUtc","thx/TestConvert.hx",64,0x6ff82228)
            	HX_STACK_THIS(this)
HXLINE(  64)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  64)		HX_VARI( Int,_g) = this->x;
HXDLIN(  64)		while((_g1 < _g)){
HXLINE(  64)			++_g1;
HXLINE(  65)			HX_VARI(  ::Dynamic,value) = null();
HXLINE(  66)			::thx::Convert_obj::toDateTimeUtc(value);
HXLINE(  67)			::utest::Assert_obj::isNull(value,null(),hx::SourceInfo(HX_("TestConvert.hx",bd,f9,dc,2e),67,HX_("thx.TestConvert",b7,4c,d4,d6),HX_("testDateTimeUtc",57,5f,67,54)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConvert_obj,testDateTimeUtc,(void))


TestConvert_obj::TestConvert_obj()
{
}

hx::Val TestConvert_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testInt") ) { return hx::Val( testInt_dyn()); }
		if (HX_FIELD_EQ(inName,"testMap") ) { return hx::Val( testMap_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testBool") ) { return hx::Val( testBool_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testFloat") ) { return hx::Val( testFloat_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testString") ) { return hx::Val( testString_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testDateTimeUtc") ) { return hx::Val( testDateTimeUtc_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestConvert_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestConvert_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestConvert_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestConvert_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestConvert_obj_sStaticStorageInfo = 0;
#endif

static ::String TestConvert_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testString","\xc3","\x6e","\x24","\x2a"),
	HX_HCSTRING("testInt","\xbd","\x7b","\xbe","\xbd"),
	HX_HCSTRING("testFloat","\xea","\x03","\x99","\xcb"),
	HX_HCSTRING("testBool","\x9c","\x09","\x4e","\x44"),
	HX_HCSTRING("testMap","\x6a","\x79","\xc1","\xbd"),
	HX_HCSTRING("testDateTimeUtc","\x57","\x5f","\x67","\x54"),
	::String(null()) };

static void TestConvert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestConvert_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestConvert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestConvert_obj::__mClass,"__mClass");
};

#endif

hx::Class TestConvert_obj::__mClass;

void TestConvert_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestConvert","\xb7","\x4c","\xd4","\xd6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestConvert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestConvert_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestConvert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestConvert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestConvert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestConvert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
