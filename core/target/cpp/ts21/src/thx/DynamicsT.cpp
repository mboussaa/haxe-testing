// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_thx_DynamicsT
#include <thx/DynamicsT.h>
#endif

namespace thx{

void DynamicsT_obj::__construct() { }

Dynamic DynamicsT_obj::__CreateEmpty() { return new DynamicsT_obj; }

hx::ObjectPtr< DynamicsT_obj > DynamicsT_obj::__new()
{
	hx::ObjectPtr< DynamicsT_obj > _hx_result = new DynamicsT_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DynamicsT_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DynamicsT_obj > _hx_result = new DynamicsT_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool DynamicsT_obj::isEmpty( ::Dynamic o){
            	HX_STACK_FRAME("thx.DynamicsT","isEmpty",0xe98dbf0b,"thx.DynamicsT.isEmpty","thx/Dynamics.hx",275,0xc7dc65bf)
            	HX_STACK_ARG(o,"o")
HXLINE( 275)		return (::Reflect_obj::fields(o)->length == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DynamicsT_obj,isEmpty,return )

Bool DynamicsT_obj::exists( ::Dynamic o,::String name){
            	HX_STACK_FRAME("thx.DynamicsT","exists",0xf7f86e14,"thx.DynamicsT.exists","thx/Dynamics.hx",281,0xc7dc65bf)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(name,"name")
HXLINE( 281)		return ::Reflect_obj::hasField(o,name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DynamicsT_obj,exists,return )

::Array< ::String > DynamicsT_obj::fields( ::Dynamic o){
            	HX_STACK_FRAME("thx.DynamicsT","fields",0xb8a6deb1,"thx.DynamicsT.fields","thx/Dynamics.hx",287,0xc7dc65bf)
            	HX_STACK_ARG(o,"o")
HXLINE( 287)		return ::Reflect_obj::fields(o);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DynamicsT_obj,fields,return )

 ::Dynamic DynamicsT_obj::merge( ::Dynamic to, ::Dynamic from, ::Dynamic replacef){
            	HX_STACK_FRAME("thx.DynamicsT","merge",0x79f94180,"thx.DynamicsT.merge","thx/Dynamics.hx",295,0xc7dc65bf)
            	HX_STACK_ARG(to,"to")
            	HX_STACK_ARG(from,"from")
            	HX_STACK_ARG(replacef,"replacef")
HXLINE( 296)		Bool _hx_tmp = hx::IsNull( replacef );
HXDLIN( 296)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			 ::Dynamic _hx_run(::String field, ::Dynamic oldv, ::Dynamic newv){
            				HX_STACK_FRAME("thx.DynamicsT","merge",0x79f94180,"thx.DynamicsT.merge","thx/Dynamics.hx",297,0xc7dc65bf)
            				HX_STACK_ARG(field,"field")
            				HX_STACK_ARG(oldv,"oldv")
            				HX_STACK_ARG(newv,"newv")
HXLINE( 297)				return newv;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 297)			replacef =  ::Dynamic(new _hx_Closure_0());
            		}
HXLINE( 298)		{
HXLINE( 298)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 298)			HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(from);
HXDLIN( 298)			while((_g < _g1->length)){
HXLINE( 298)				HX_VARI_NAME( ::String,field1,"field") = _g1->__get(_g);
HXDLIN( 298)				++_g;
HXLINE( 299)				HX_VARI_NAME(  ::Dynamic,newv1,"newv") = ::Reflect_obj::field(from,field1);
HXLINE( 300)				Bool _hx_tmp1 = ::Reflect_obj::hasField(to,field1);
HXDLIN( 300)				if (_hx_tmp1) {
HXLINE( 301)					 ::Dynamic _hx_tmp2 = ::Reflect_obj::field(to,field1);
HXDLIN( 301)					 ::Dynamic _hx_tmp3 = replacef(field1,_hx_tmp2,newv1);
HXDLIN( 301)					::Reflect_obj::setField(to,field1,_hx_tmp3);
            				}
            				else {
HXLINE( 303)					::Reflect_obj::setField(to,field1,newv1);
            				}
            			}
            		}
HXLINE( 306)		return to;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DynamicsT_obj,merge,return )

Int DynamicsT_obj::size( ::Dynamic o){
            	HX_STACK_FRAME("thx.DynamicsT","size",0xfec8f2f9,"thx.DynamicsT.size","thx/Dynamics.hx",323,0xc7dc65bf)
            	HX_STACK_ARG(o,"o")
HXLINE( 323)		return ::Reflect_obj::fields(o)->length;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DynamicsT_obj,size,return )

::cpp::VirtualArray DynamicsT_obj::values( ::Dynamic o){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,o) HXARGC(1)
            		 ::Dynamic _hx_run(::String key){
            			HX_STACK_FRAME("thx.DynamicsT","values",0x87cf541a,"thx.DynamicsT.values","thx/Dynamics.hx",329,0xc7dc65bf)
            			HX_STACK_ARG(key,"key")
HXLINE( 329)			return ::Reflect_obj::field(o,key);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.DynamicsT","values",0x87cf541a,"thx.DynamicsT.values","thx/Dynamics.hx",329,0xc7dc65bf)
            	HX_STACK_ARG(o,"o")
HXLINE( 329)		return ::Reflect_obj::fields(o)->map( ::Dynamic(new _hx_Closure_0(o)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DynamicsT_obj,values,return )

::Array< ::Dynamic> DynamicsT_obj::tuples( ::Dynamic o){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,o) HXARGC(1)
            		 ::Dynamic _hx_run(::String key){
            			HX_STACK_FRAME("thx.DynamicsT","tuples",0x41ba3ba3,"thx.DynamicsT.tuples","thx/Dynamics.hx",337,0xc7dc65bf)
            			HX_STACK_ARG(key,"key")
HXLINE( 337)			HX_VARI(  ::Dynamic,_1) = ::Reflect_obj::field(o,key);
HXDLIN( 337)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("_0",f1,52,00,00),key)
            				->setFixed(1,HX_("_1",f2,52,00,00),_1));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.DynamicsT","tuples",0x41ba3ba3,"thx.DynamicsT.tuples","thx/Dynamics.hx",336,0xc7dc65bf)
            	HX_STACK_ARG(o,"o")
HXLINE( 336)		return ::Reflect_obj::fields(o)->map( ::Dynamic(new _hx_Closure_0(o)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DynamicsT_obj,tuples,return )


DynamicsT_obj::DynamicsT_obj()
{
}

bool DynamicsT_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { outValue = size_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fields") ) { outValue = fields_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"values") ) { outValue = values_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tuples") ) { outValue = tuples_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEmpty") ) { outValue = isEmpty_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DynamicsT_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *DynamicsT_obj_sStaticStorageInfo = 0;
#endif

static void DynamicsT_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DynamicsT_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DynamicsT_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DynamicsT_obj::__mClass,"__mClass");
};

#endif

hx::Class DynamicsT_obj::__mClass;

static ::String DynamicsT_obj_sStaticFields[] = {
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("fields","\x79","\x8e","\x8e","\x80"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("tuples","\x6b","\xeb","\xa1","\x09"),
	::String(null())
};

void DynamicsT_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.DynamicsT","\x36","\x39","\xd0","\x06");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DynamicsT_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DynamicsT_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DynamicsT_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< DynamicsT_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DynamicsT_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DynamicsT_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DynamicsT_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
