// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_bigint_Decimals
#define INCLUDED_thx_bigint_Decimals

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,bigint,DecimalImpl)
HX_DECLARE_CLASS2(thx,bigint,Decimals)

namespace thx{
namespace bigint{


class HXCPP_CLASS_ATTRIBUTES Decimals_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Decimals_obj OBJ_;
		Decimals_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.bigint.Decimals")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.bigint.Decimals"); }
		static hx::ObjectPtr< Decimals_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Decimals_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Decimals","\xe2","\x06","\x1c","\xec"); }

		static void __boot();
		static Int divisionExtraScale;
		static  ::thx::bigint::DecimalImpl fromInt(Int value);
		static ::Dynamic fromInt_dyn();

		static  ::thx::bigint::DecimalImpl fromFloat(Float value);
		static ::Dynamic fromFloat_dyn();

		static  ::thx::bigint::DecimalImpl parse(::String value);
		static ::Dynamic parse_dyn();

};

} // end namespace thx
} // end namespace bigint

#endif /* INCLUDED_thx_bigint_Decimals */ 
