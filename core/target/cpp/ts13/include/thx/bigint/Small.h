// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_bigint_Small
#define INCLUDED_thx_bigint_Small

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
HX_DECLARE_CLASS2(thx,bigint,Big)
HX_DECLARE_CLASS2(thx,bigint,BigIntImpl)
HX_DECLARE_CLASS2(thx,bigint,Small)

namespace thx{
namespace bigint{


class HXCPP_CLASS_ATTRIBUTES Small_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Small_obj OBJ_;
		Small_obj();

	public:
		void __construct(Int value);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.bigint.Small")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.bigint.Small"); }
		static hx::ObjectPtr< Small_obj > __new(Int value);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Small_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("Small","\xa7","\x60","\x98","\x12"); }

		static void __boot();
		static  ::thx::bigint::Small zero;
		static  ::thx::bigint::Small one;
		static  ::thx::bigint::Small two;
		static  ::thx::bigint::Small ten;
		static  ::thx::bigint::Small negativeOne;
		Int value;
		Bool sign;
		Bool isSmall;
		::Dynamic add(::Dynamic that);
		::Dynamic add_dyn();

		::Dynamic addSmall( ::thx::bigint::Small small);
		::Dynamic addSmall_dyn();

		::Dynamic addBig( ::thx::bigint::Big big);
		::Dynamic addBig_dyn();

		::Dynamic subtract(::Dynamic that);
		::Dynamic subtract_dyn();

		::Dynamic subtractSmall( ::thx::bigint::Small small);
		::Dynamic subtractSmall_dyn();

		::Dynamic subtractBig( ::thx::bigint::Big big);
		::Dynamic subtractBig_dyn();

		::Dynamic divide(::Dynamic that);
		::Dynamic divide_dyn();

		 ::Dynamic divMod(::Dynamic that);
		::Dynamic divMod_dyn();

		 ::Dynamic divModSmall( ::thx::bigint::Small small);
		::Dynamic divModSmall_dyn();

		 ::Dynamic divModBig( ::thx::bigint::Big big);
		::Dynamic divModBig_dyn();

		::Dynamic multiply(::Dynamic that);
		::Dynamic multiply_dyn();

		::Dynamic multiplySmall( ::thx::bigint::Small small);
		::Dynamic multiplySmall_dyn();

		::Dynamic multiplyBig( ::thx::bigint::Big big);
		::Dynamic multiplyBig_dyn();

		::Dynamic modulo(::Dynamic that);
		::Dynamic modulo_dyn();

		::Dynamic random();
		::Dynamic random_dyn();

		::Dynamic abs();
		::Dynamic abs_dyn();

		::Dynamic negate();
		::Dynamic negate_dyn();

		::Dynamic next();
		::Dynamic next_dyn();

		::Dynamic prev();
		::Dynamic prev_dyn();

		::Dynamic pow(::Dynamic exp);
		::Dynamic pow_dyn();

		::Dynamic shiftLeft(Int n);
		::Dynamic shiftLeft_dyn();

		::Dynamic shiftRight(Int n);
		::Dynamic shiftRight_dyn();

		::Dynamic square();
		::Dynamic square_dyn();

		Bool isEven();
		::Dynamic isEven_dyn();

		Bool isOdd();
		::Dynamic isOdd_dyn();

		Bool isZero();
		::Dynamic isZero_dyn();

		Bool isUnit();
		::Dynamic isUnit_dyn();

		Int compareTo(::Dynamic that);
		::Dynamic compareTo_dyn();

		Int compareToSmall( ::thx::bigint::Small small);
		::Dynamic compareToSmall_dyn();

		Int compareToBig( ::thx::bigint::Big big);
		::Dynamic compareToBig_dyn();

		Int compareToAbs(::Dynamic that);
		::Dynamic compareToAbs_dyn();

		Int compareToAbsSmall( ::thx::bigint::Small small);
		::Dynamic compareToAbsSmall_dyn();

		Int compareToAbsBig( ::thx::bigint::Big big);
		::Dynamic compareToAbsBig_dyn();

		::Dynamic _hx_not();
		::Dynamic _hx_not_dyn();

		::Dynamic _hx_and(::Dynamic that);
		::Dynamic _hx_and_dyn();

		::Dynamic _hx_or(::Dynamic that);
		::Dynamic _hx_or_dyn();

		::Dynamic _hx_xor(::Dynamic that);
		::Dynamic _hx_xor_dyn();

		Float toFloat();
		::Dynamic toFloat_dyn();

		Int toInt();
		::Dynamic toInt_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		::String toStringWithBase(Int base);
		::Dynamic toStringWithBase_dyn();

};

} // end namespace thx
} // end namespace bigint

#endif /* INCLUDED_thx_bigint_Small */ 
