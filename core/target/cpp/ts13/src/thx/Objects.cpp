// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Dynamics
#include <thx/Dynamics.h>
#endif
#ifndef INCLUDED_thx_Objects
#include <thx/Objects.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif

namespace thx{

void Objects_obj::__construct() { }

Dynamic Objects_obj::__CreateEmpty() { return new Objects_obj; }

hx::ObjectPtr< Objects_obj > Objects_obj::__new()
{
	hx::ObjectPtr< Objects_obj > _hx_result = new Objects_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Objects_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Objects_obj > _hx_result = new Objects_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Objects_obj::compare( ::Dynamic a, ::Dynamic b){
            	HX_STACK_FRAME("thx.Objects","compare",0xc6600b01,"thx.Objects.compare","thx/Objects.hx",19,0xe184f175)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  20)		HX_VAR( Int,v);
HXDLIN(  20)		HX_VARI( ::Array< ::String >,fields) = ::Reflect_obj::fields(a);
HXLINE(  21)		::Array< ::String > _hx_tmp = ::Reflect_obj::fields(b);
HXDLIN(  21)		v = ::thx::Arrays_obj::compare(fields,_hx_tmp);
HXDLIN(  21)		if ((v != (int)0)) {
HXLINE(  22)			return v;
            		}
HXLINE(  23)		{
HXLINE(  23)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  23)			while((_g < fields->length)){
HXLINE(  23)				HX_VARI( ::String,field) = fields->__get(_g);
HXDLIN(  23)				++_g;
HXLINE(  24)				 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(a,field);
HXDLIN(  24)				 ::Dynamic _hx_tmp2 = ::Reflect_obj::field(b,field);
HXDLIN(  24)				v = ::thx::Dynamics_obj::compare(_hx_tmp1,_hx_tmp2);
HXDLIN(  24)				if ((v != (int)0)) {
HXLINE(  25)					return v;
            				}
            			}
            		}
HXLINE(  27)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Objects_obj,compare,return )

Bool Objects_obj::isEmpty( ::Dynamic o){
            	HX_STACK_FRAME("thx.Objects","isEmpty",0x4f56d09f,"thx.Objects.isEmpty","thx/Objects.hx",34,0xe184f175)
            	HX_STACK_ARG(o,"o")
HXLINE(  34)		return (::Reflect_obj::fields(o)->length == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Objects_obj,isEmpty,return )

Bool Objects_obj::exists( ::Dynamic o,::String name){
            	HX_STACK_FRAME("thx.Objects","exists",0x60e4ab00,"thx.Objects.exists","thx/Objects.hx",40,0xe184f175)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(name,"name")
HXLINE(  40)		return ::Reflect_obj::hasField(o,name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Objects_obj,exists,return )

::Array< ::String > Objects_obj::fields( ::Dynamic o){
            	HX_STACK_FRAME("thx.Objects","fields",0x21931b9d,"thx.Objects.fields","thx/Objects.hx",46,0xe184f175)
            	HX_STACK_ARG(o,"o")
HXLINE(  46)		return ::Reflect_obj::fields(o);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Objects_obj,fields,return )

 ::Dynamic Objects_obj::combine( ::Dynamic first, ::Dynamic second){
            	HX_STACK_FRAME("thx.Objects","combine",0xbd251cdb,"thx.Objects.combine","thx/Objects.hx",63,0xe184f175)
            	HX_STACK_ARG(first,"first")
            	HX_STACK_ARG(second,"second")
HXLINE(  64)		HX_VARI(  ::Dynamic,to) =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE(  65)		{
HXLINE(  65)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  65)			HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(first);
HXDLIN(  65)			while((_g < _g1->length)){
HXLINE(  65)				HX_VARI( ::String,field) = _g1->__get(_g);
HXDLIN(  65)				++_g;
HXLINE(  66)				 ::Dynamic _hx_tmp = ::Reflect_obj::field(first,field);
HXDLIN(  66)				::Reflect_obj::setField(to,field,_hx_tmp);
            			}
            		}
HXLINE(  68)		{
HXLINE(  68)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(  68)			HX_VARI_NAME( ::Array< ::String >,_g11,"_g1") = ::Reflect_obj::fields(second);
HXDLIN(  68)			while((_g2 < _g11->length)){
HXLINE(  68)				HX_VARI_NAME( ::String,field1,"field") = _g11->__get(_g2);
HXDLIN(  68)				++_g2;
HXLINE(  69)				 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(second,field1);
HXDLIN(  69)				::Reflect_obj::setField(to,field1,_hx_tmp1);
            			}
            		}
HXLINE(  71)		return to;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Objects_obj,combine,return )

 ::Dynamic Objects_obj::assign( ::Dynamic to, ::Dynamic from, ::Dynamic replacef){
            	HX_STACK_FRAME("thx.Objects","assign",0xed0ad353,"thx.Objects.assign","thx/Objects.hx",80,0xe184f175)
            	HX_STACK_ARG(to,"to")
            	HX_STACK_ARG(from,"from")
            	HX_STACK_ARG(replacef,"replacef")
HXLINE(  81)		Bool _hx_tmp = hx::IsNull( replacef );
HXDLIN(  81)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			 ::Dynamic _hx_run(::String field, ::Dynamic oldv, ::Dynamic newv){
            				HX_STACK_FRAME("thx.Objects","assign",0xed0ad353,"thx.Objects.assign","thx/Objects.hx",82,0xe184f175)
            				HX_STACK_ARG(field,"field")
            				HX_STACK_ARG(oldv,"oldv")
            				HX_STACK_ARG(newv,"newv")
HXLINE(  82)				return newv;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(  82)			replacef =  ::Dynamic(new _hx_Closure_0());
            		}
HXLINE(  83)		{
HXLINE(  83)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  83)			HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(from);
HXDLIN(  83)			while((_g < _g1->length)){
HXLINE(  83)				HX_VARI_NAME( ::String,field1,"field") = _g1->__get(_g);
HXDLIN(  83)				++_g;
HXLINE(  84)				HX_VARI_NAME(  ::Dynamic,newv1,"newv") = ::Reflect_obj::field(from,field1);
HXLINE(  85)				Bool _hx_tmp1 = ::Reflect_obj::hasField(to,field1);
HXDLIN(  85)				if (_hx_tmp1) {
HXLINE(  86)					 ::Dynamic _hx_tmp2 = ::Reflect_obj::field(to,field1);
HXDLIN(  86)					 ::Dynamic _hx_tmp3 = replacef(field1,_hx_tmp2,newv1);
HXDLIN(  86)					::Reflect_obj::setField(to,field1,_hx_tmp3);
            				}
            				else {
HXLINE(  88)					::Reflect_obj::setField(to,field1,newv1);
            				}
            			}
            		}
HXLINE(  91)		return to;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Objects_obj,assign,return )

 ::Dynamic Objects_obj::copyTo( ::Dynamic src, ::Dynamic dst,hx::Null< Bool >  __o_cloneInstances){
Bool cloneInstances = __o_cloneInstances.Default(false);
            	HX_STACK_FRAME("thx.Objects","copyTo",0x6a37a9b4,"thx.Objects.copyTo","thx/Objects.hx",98,0xe184f175)
            	HX_STACK_ARG(src,"src")
            	HX_STACK_ARG(dst,"dst")
            	HX_STACK_ARG(cloneInstances,"cloneInstances")
HXLINE(  99)		{
HXLINE(  99)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  99)			HX_VARI( ::Array< ::String >,_g1) = ::Reflect_obj::fields(src);
HXDLIN(  99)			while((_g < _g1->length)){
HXLINE(  99)				HX_VARI( ::String,field) = _g1->__get(_g);
HXDLIN(  99)				++_g;
HXLINE( 100)				 ::Dynamic _hx_tmp = ::Reflect_obj::field(src,field);
HXDLIN( 100)				HX_VARI(  ::Dynamic,sv) = ::thx::Dynamics_obj::clone(_hx_tmp,cloneInstances);
HXLINE( 101)				HX_VARI(  ::Dynamic,dv) = ::Reflect_obj::field(dst,field);
HXLINE( 102)				Bool _hx_tmp1;
HXDLIN( 102)				Bool _hx_tmp2;
HXDLIN( 102)				Bool _hx_tmp3 = ::Reflect_obj::isObject(sv);
HXDLIN( 102)				if (_hx_tmp3) {
HXLINE( 102)					hx::Class _hx_tmp4 = ::Type_obj::getClass(sv);
HXDLIN( 102)					_hx_tmp2 = hx::IsNull( _hx_tmp4 );
            				}
            				else {
HXLINE( 102)					_hx_tmp2 = false;
            				}
HXDLIN( 102)				if (_hx_tmp2) {
HXLINE( 102)					Bool _hx_tmp5 = ::Reflect_obj::isObject(dv);
HXDLIN( 102)					if (_hx_tmp5) {
HXLINE( 102)						hx::Class _hx_tmp6 = ::Type_obj::getClass(dv);
HXDLIN( 102)						_hx_tmp1 = hx::IsNull( _hx_tmp6 );
            					}
            					else {
HXLINE( 102)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE( 102)					_hx_tmp1 = false;
            				}
HXDLIN( 102)				if (_hx_tmp1) {
HXLINE( 103)					::thx::Objects_obj::copyTo(sv,dv,null());
            				}
            				else {
HXLINE( 105)					::Reflect_obj::setField(dst,field,sv);
            				}
            			}
            		}
HXLINE( 108)		return dst;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Objects_obj,copyTo,return )

 ::Dynamic Objects_obj::clone( ::Dynamic src,hx::Null< Bool >  __o_cloneInstances){
Bool cloneInstances = __o_cloneInstances.Default(false);
            	HX_STACK_FRAME("thx.Objects","clone",0xd77576b9,"thx.Objects.clone","thx/Objects.hx",115,0xe184f175)
            	HX_STACK_ARG(src,"src")
            	HX_STACK_ARG(cloneInstances,"cloneInstances")
HXLINE( 115)		return ::thx::Dynamics_obj::clone(src,cloneInstances);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Objects_obj,clone,return )

 ::haxe::ds::StringMap Objects_obj::toMap( ::Dynamic o){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		 ::haxe::ds::StringMap _hx_run( ::haxe::ds::StringMap map, ::Dynamic t){
            			HX_STACK_FRAME("thx.Objects","toMap",0xa3271f3d,"thx.Objects.toMap","thx/Objects.hx",123,0xe184f175)
            			HX_STACK_ARG(map,"map")
            			HX_STACK_ARG(t,"t")
HXLINE( 124)			{
HXLINE( 124)				HX_VARI(  ::Dynamic,value) =  ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic));
HXDLIN( 124)				map->set( ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),value);
            			}
HXLINE( 125)			return map;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.Objects","toMap",0xa3271f3d,"thx.Objects.toMap","thx/Objects.hx",123,0xe184f175)
            	HX_STACK_ARG(o,"o")
HXLINE( 123)		::Array< ::Dynamic> _hx_tmp = ::thx::Objects_obj::tuples(o);
HXDLIN( 123)		return ( ( ::haxe::ds::StringMap)(::thx::Arrays_obj::reduce(_hx_tmp, ::Dynamic(new _hx_Closure_0()), ::haxe::ds::StringMap_obj::__new())) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Objects_obj,toMap,return )

Int Objects_obj::size( ::Dynamic o){
            	HX_STACK_FRAME("thx.Objects","size",0xc335dce5,"thx.Objects.size","thx/Objects.hx",132,0xe184f175)
            	HX_STACK_ARG(o,"o")
HXLINE( 132)		return ::Reflect_obj::fields(o)->length;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Objects_obj,size,return )

::String Objects_obj::string( ::Dynamic o){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,o) HXARGC(1)
            		::String _hx_run(::String key){
            			HX_STACK_FRAME("thx.Objects","string",0xb234b5f5,"thx.Objects.string","thx/Objects.hx",143,0xe184f175)
            			HX_STACK_ARG(key,"key")
HXLINE( 144)			HX_VARI( ::String,v) = ( (::String)(::Reflect_obj::field(o,key)) );
HXLINE( 145)			HX_VAR( ::String,s);
HXDLIN( 145)			Bool _hx_tmp1 = ::Std_obj::is(v,hx::ClassOf< ::String >());
HXDLIN( 145)			if (_hx_tmp1) {
HXLINE( 145)				s = ::thx::Strings_obj::quote(v);
            			}
            			else {
HXLINE( 145)				s = ::thx::Dynamics_obj::string(v);
            			}
HXLINE( 150)			return (((HX_("",00,00,00,00) + key) + HX_(" : ",c6,7a,18,00)) + s);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Objects","string",0xb234b5f5,"thx.Objects.string","thx/Objects.hx",141,0xe184f175)
            	HX_STACK_ARG(o,"o")
HXLINE( 142)		::String _hx_tmp = ::Reflect_obj::fields(o)->map( ::Dynamic(new _hx_Closure_0(o)))->join(HX_(", ",74,26,00,00));
HXLINE( 141)		return ((HX_("{",7b,00,00,00) + _hx_tmp) + HX_("}",7d,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Objects_obj,string,return )

void Objects_obj::stringImpl( ::Dynamic o, ::haxe::ds::ObjectMap cache){
            	HX_STACK_FRAME("thx.Objects","stringImpl",0xa4f2ff75,"thx.Objects.stringImpl","thx/Objects.hx",156,0xe184f175)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(cache,"cache")
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Objects_obj,stringImpl,(void))

::cpp::VirtualArray Objects_obj::values( ::Dynamic o){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,o) HXARGC(1)
            		 ::Dynamic _hx_run(::String key){
            			HX_STACK_FRAME("thx.Objects","values",0xf0bb9106,"thx.Objects.values","thx/Objects.hx",164,0xe184f175)
            			HX_STACK_ARG(key,"key")
HXLINE( 164)			return ::Reflect_obj::field(o,key);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Objects","values",0xf0bb9106,"thx.Objects.values","thx/Objects.hx",164,0xe184f175)
            	HX_STACK_ARG(o,"o")
HXLINE( 164)		return ::Reflect_obj::fields(o)->map( ::Dynamic(new _hx_Closure_0(o)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Objects_obj,values,return )

::Array< ::Dynamic> Objects_obj::tuples( ::Dynamic o){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,o) HXARGC(1)
            		 ::Dynamic _hx_run(::String key){
            			HX_STACK_FRAME("thx.Objects","tuples",0xaaa6788f,"thx.Objects.tuples","thx/Objects.hx",172,0xe184f175)
            			HX_STACK_ARG(key,"key")
HXLINE( 172)			HX_VARI(  ::Dynamic,_1) = ::Reflect_obj::field(o,key);
HXDLIN( 172)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("_0",f1,52,00,00),key)
            				->setFixed(1,HX_("_1",f2,52,00,00),_1));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Objects","tuples",0xaaa6788f,"thx.Objects.tuples","thx/Objects.hx",171,0xe184f175)
            	HX_STACK_ARG(o,"o")
HXLINE( 171)		return ::Reflect_obj::fields(o)->map( ::Dynamic(new _hx_Closure_0(o)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Objects_obj,tuples,return )

Bool Objects_obj::hasPath( ::Dynamic o,::String path){
            	HX_STACK_FRAME("thx.Objects","hasPath",0x5c8cf87b,"thx.Objects.hasPath","thx/Objects.hx",181,0xe184f175)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(path,"path")
HXLINE( 182)		HX_VARI( ::Array< ::String >,paths) = path.split(HX_(".",2e,00,00,00));
HXLINE( 183)		HX_VARI(  ::Dynamic,current) = o;
HXLINE( 185)		{
HXLINE( 185)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 185)			while((_g < paths->length)){
HXLINE( 185)				HX_VARI( ::String,currentPath) = paths->__get(_g);
HXDLIN( 185)				++_g;
HXLINE( 186)				Bool _hx_tmp = ::thx::Strings_obj::DIGITS->match(currentPath);
HXDLIN( 186)				if (_hx_tmp) {
HXLINE( 187)					HX_VARI(  ::Dynamic,index) = ::Std_obj::parseInt(currentPath);
HXDLIN( 187)					HX_VARI( ::cpp::VirtualArray,arr) = ( (::cpp::VirtualArray)(::Std_obj::instance(current,hx::ArrayBase::__mClass)) );
HXLINE( 189)					Bool _hx_tmp1;
HXDLIN( 189)					if (hx::IsNotNull( arr )) {
HXLINE( 189)						_hx_tmp1 = hx::IsLessEq( arr->get_length(),index );
            					}
            					else {
HXLINE( 189)						_hx_tmp1 = true;
            					}
HXDLIN( 189)					if (_hx_tmp1) {
HXLINE( 189)						return false;
            					}
HXLINE( 190)					current = arr->__get(index);
            				}
            				else {
HXLINE( 191)					Bool _hx_tmp2 = ::Reflect_obj::hasField(current,currentPath);
HXDLIN( 191)					if (_hx_tmp2) {
HXLINE( 192)						current = ::Reflect_obj::field(current,currentPath);
            					}
            					else {
HXLINE( 194)						return false;
            					}
            				}
            			}
            		}
HXLINE( 197)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Objects_obj,hasPath,return )

Bool Objects_obj::hasPathValue( ::Dynamic o,::String path){
            	HX_STACK_FRAME("thx.Objects","hasPathValue",0x1c3b58f6,"thx.Objects.hasPathValue","thx/Objects.hx",206,0xe184f175)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(path,"path")
HXLINE( 206)		 ::Dynamic _hx_tmp = ::thx::Objects_obj::getPath(o,path);
HXDLIN( 206)		return hx::IsNotNull( _hx_tmp );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Objects_obj,hasPathValue,return )

 ::Dynamic Objects_obj::getPath( ::Dynamic o,::String path){
            	HX_STACK_FRAME("thx.Objects","getPath",0x5fcb87b7,"thx.Objects.getPath","thx/Objects.hx",214,0xe184f175)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(path,"path")
HXLINE( 215)		HX_VARI( ::Array< ::String >,paths) = path.split(HX_(".",2e,00,00,00));
HXLINE( 216)		HX_VARI(  ::Dynamic,current) = o;
HXLINE( 217)		{
HXLINE( 217)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 217)			while((_g < paths->length)){
HXLINE( 217)				HX_VARI( ::String,currentPath) = paths->__get(_g);
HXDLIN( 217)				++_g;
HXLINE( 218)				Bool _hx_tmp = ::thx::Strings_obj::DIGITS->match(currentPath);
HXDLIN( 218)				if (_hx_tmp) {
HXLINE( 219)					HX_VARI(  ::Dynamic,index) = ::Std_obj::parseInt(currentPath);
HXDLIN( 219)					HX_VARI( ::cpp::VirtualArray,arr) = ( (::cpp::VirtualArray)(::Std_obj::instance(current,hx::ArrayBase::__mClass)) );
HXLINE( 221)					if (hx::IsNull( arr )) {
HXLINE( 221)						return null();
            					}
HXLINE( 222)					current = arr->__get(index);
            				}
            				else {
HXLINE( 223)					Bool _hx_tmp1 = ::Reflect_obj::hasField(current,currentPath);
HXDLIN( 223)					if (_hx_tmp1) {
HXLINE( 224)						current = ::Reflect_obj::field(current,currentPath);
            					}
            					else {
HXLINE( 226)						return null();
            					}
            				}
            			}
            		}
HXLINE( 229)		return current;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Objects_obj,getPath,return )

::hx::EnumBase Objects_obj::getPathOption( ::Dynamic o,::String path){
            	HX_STACK_FRAME("thx.Objects","getPathOption",0xb591f28c,"thx.Objects.getPathOption","thx/Objects.hx",236,0xe184f175)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(path,"path")
HXLINE( 236)		HX_VARI(  ::Dynamic,value) = ::thx::Objects_obj::getPath(o,path);
HXDLIN( 236)		if (hx::IsNull( value )) {
HXLINE( 236)			return ::haxe::ds::Option_obj::None_dyn();
            		}
            		else {
HXLINE( 236)			return ::haxe::ds::Option_obj::Some(value);
            		}
HXDLIN( 236)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Objects_obj,getPathOption,return )

 ::Dynamic Objects_obj::getPathOr( ::Dynamic o,::String path, ::Dynamic alt){
            	HX_STACK_FRAME("thx.Objects","getPathOr",0x8f8668ba,"thx.Objects.getPathOr","thx/Objects.hx",246,0xe184f175)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(alt,"alt")
HXLINE( 247)		HX_VARI( ::Array< ::String >,paths) = path.split(HX_(".",2e,00,00,00));
HXLINE( 248)		HX_VARI(  ::Dynamic,current) = o;
HXLINE( 249)		{
HXLINE( 249)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 249)			while((_g < paths->length)){
HXLINE( 249)				HX_VARI( ::String,currentPath) = paths->__get(_g);
HXDLIN( 249)				++_g;
HXLINE( 250)				Bool _hx_tmp = ::thx::Strings_obj::DIGITS->match(currentPath);
HXDLIN( 250)				if (_hx_tmp) {
HXLINE( 251)					HX_VARI(  ::Dynamic,index) = ::Std_obj::parseInt(currentPath);
HXDLIN( 251)					HX_VARI( ::cpp::VirtualArray,arr) = ( (::cpp::VirtualArray)(::Std_obj::instance(current,hx::ArrayBase::__mClass)) );
HXLINE( 253)					if (hx::IsNull( arr )) {
HXLINE( 253)						return null();
            					}
HXLINE( 254)					current = arr->__get(index);
            				}
            				else {
HXLINE( 255)					Bool _hx_tmp1 = ::Reflect_obj::hasField(current,currentPath);
HXDLIN( 255)					if (_hx_tmp1) {
HXLINE( 256)						current = ::Reflect_obj::field(current,currentPath);
            					}
            					else {
HXLINE( 258)						return alt;
            					}
            				}
            			}
            		}
HXLINE( 261)		return current;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Objects_obj,getPathOr,return )

 ::Dynamic Objects_obj::setPath( ::Dynamic o,::String path, ::Dynamic val){
            	HX_STACK_FRAME("thx.Objects","setPath",0x52cd18c3,"thx.Objects.setPath","thx/Objects.hx",272,0xe184f175)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(val,"val")
HXLINE( 273)		HX_VARI( ::Array< ::String >,paths) = path.split(HX_(".",2e,00,00,00));
HXDLIN( 273)		HX_VARI(  ::Dynamic,current) = o;
HXLINE( 276)		{
HXLINE( 276)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 276)			HX_VARI( Int,_g) = (paths->length - (int)1);
HXDLIN( 276)			while((_g1 < _g)){
HXLINE( 276)				HX_VARI( Int,i) = _g1++;
HXLINE( 277)				HX_VARI( ::String,currentPath) = paths->__get(i);
HXDLIN( 277)				HX_VARI( ::String,nextPath) = paths->__get((i + (int)1));
HXLINE( 280)				Bool _hx_tmp;
HXDLIN( 280)				Bool _hx_tmp1 = !(::thx::Strings_obj::DIGITS->match(currentPath));
HXDLIN( 280)				if (_hx_tmp1) {
HXLINE( 280)					_hx_tmp = (currentPath == HX_("*",2a,00,00,00));
            				}
            				else {
HXLINE( 280)					_hx_tmp = true;
            				}
HXDLIN( 280)				if (_hx_tmp) {
HXLINE( 281)					HX_VAR(  ::Dynamic,index);
HXDLIN( 281)					if ((currentPath == HX_("*",2a,00,00,00))) {
HXLINE( 281)						index = ( (::cpp::VirtualArray)(current) )->get_length();
            					}
            					else {
HXLINE( 281)						index = ::Std_obj::parseInt(currentPath);
            					}
HXLINE( 286)					if (hx::IsNull( current->__GetItem(index) )) {
HXLINE( 287)						Bool _hx_tmp2;
HXDLIN( 287)						Bool _hx_tmp3 = !(::thx::Strings_obj::DIGITS->match(nextPath));
HXDLIN( 287)						if (_hx_tmp3) {
HXLINE( 287)							_hx_tmp2 = (nextPath == HX_("*",2a,00,00,00));
            						}
            						else {
HXLINE( 287)							_hx_tmp2 = true;
            						}
HXDLIN( 287)						if (_hx_tmp2) {
HXLINE( 288)							current->__SetItem(index,::cpp::VirtualArray_obj::__new(0));
            						}
            						else {
HXLINE( 290)							current->__SetItem(index, ::Dynamic(hx::Anon_obj::Create(0)));
            						}
            					}
HXLINE( 293)					current = current->__GetItem(index);
            				}
            				else {
HXLINE( 295)					Bool _hx_tmp4 = !(::Reflect_obj::hasField(current,currentPath));
HXDLIN( 295)					if (_hx_tmp4) {
HXLINE( 296)						Bool _hx_tmp5;
HXDLIN( 296)						Bool _hx_tmp6 = !(::thx::Strings_obj::DIGITS->match(nextPath));
HXDLIN( 296)						if (_hx_tmp6) {
HXLINE( 296)							_hx_tmp5 = (nextPath == HX_("*",2a,00,00,00));
            						}
            						else {
HXLINE( 296)							_hx_tmp5 = true;
            						}
HXDLIN( 296)						if (_hx_tmp5) {
HXLINE( 297)							::Reflect_obj::setField(current,currentPath,::cpp::VirtualArray_obj::__new(0));
            						}
            						else {
HXLINE( 299)							::Reflect_obj::setField(current,currentPath, ::Dynamic(hx::Anon_obj::Create(0)));
            						}
            					}
HXLINE( 302)					current = ::Reflect_obj::field(current,currentPath);
            				}
            			}
            		}
HXLINE( 305)		::String _hx_tmp7 = paths->__get((paths->length - (int)1));
HXLINE( 306)		Bool _hx_tmp8 = ::thx::Strings_obj::DIGITS->match(_hx_tmp7);
HXDLIN( 306)		if (_hx_tmp8) {
HXLINE( 307)			HX_VARI_NAME(  ::Dynamic,index1,"index") = ::Std_obj::parseInt(_hx_tmp7);
HXLINE( 308)			current->__SetItem(index1,val);
            		}
            		else {
HXLINE( 309)			if ((_hx_tmp7 == HX_("*",2a,00,00,00))) {
HXLINE( 310)				( (::cpp::VirtualArray)(current) )->push(val);
            			}
            			else {
HXLINE( 312)				::Reflect_obj::setField(current,_hx_tmp7,val);
            			}
            		}
HXLINE( 314)		return o;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Objects_obj,setPath,return )

 ::Dynamic Objects_obj::removePath( ::Dynamic o,::String path){
            	HX_STACK_FRAME("thx.Objects","removePath",0x74ad0f2d,"thx.Objects.removePath","thx/Objects.hx",322,0xe184f175)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(path,"path")
HXLINE( 323)		HX_VARI( ::Array< ::String >,paths) = path.split(HX_(".",2e,00,00,00));
HXLINE( 326)		HX_VARI( ::String,target) = ( (::String)(paths->pop()) );
HXLINE( 330)		try {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			 ::Dynamic _hx_run( ::Dynamic existing,::String nextPath){
            				HX_STACK_FRAME("thx.Objects","removePath",0x74ad0f2d,"thx.Objects.removePath","thx/Objects.hx",332,0xe184f175)
            				HX_STACK_ARG(existing,"existing")
            				HX_STACK_ARG(nextPath,"nextPath")
HXLINE( 332)				if ((nextPath == HX_("*",2a,00,00,00))) {
HXLINE( 333)					return ( (::cpp::VirtualArray)(existing) )->pop();
            				}
            				else {
HXLINE( 334)					Bool _hx_tmp = ::thx::Strings_obj::DIGITS->match(nextPath);
HXDLIN( 334)					if (_hx_tmp) {
HXLINE( 336)						HX_VARI(  ::Dynamic,index) = ::Std_obj::parseInt(nextPath);
HXLINE( 337)						return existing->__GetItem(index);
            					}
            					else {
HXLINE( 339)						return ::Reflect_obj::field(existing,nextPath);
            					}
            				}
HXLINE( 332)				return null();
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 331)			HX_VARI(  ::Dynamic,sub) = ::thx::Arrays_obj::reduce(paths, ::Dynamic(new _hx_Closure_0()),o);
HXLINE( 343)			if (hx::IsNotNull( sub )) {
HXLINE( 344)				::Reflect_obj::deleteField(sub,target);
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 347)		return o;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Objects_obj,removePath,return )


Objects_obj::Objects_obj()
{
}

bool Objects_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { outValue = size_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toMap") ) { outValue = toMap_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fields") ) { outValue = fields_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"assign") ) { outValue = assign_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyTo") ) { outValue = copyTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"string") ) { outValue = string_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"values") ) { outValue = values_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tuples") ) { outValue = tuples_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { outValue = isEmpty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"combine") ) { outValue = combine_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasPath") ) { outValue = hasPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPath") ) { outValue = setPath_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getPathOr") ) { outValue = getPathOr_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stringImpl") ) { outValue = stringImpl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removePath") ) { outValue = removePath_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hasPathValue") ) { outValue = hasPathValue_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getPathOption") ) { outValue = getPathOption_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Objects_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Objects_obj_sStaticStorageInfo = 0;
#endif

static void Objects_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Objects_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Objects_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Objects_obj::__mClass,"__mClass");
};

#endif

hx::Class Objects_obj::__mClass;

static ::String Objects_obj_sStaticFields[] = {
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("fields","\x79","\x8e","\x8e","\x80"),
	HX_HCSTRING("combine","\x7f","\x2a","\x2e","\x7a"),
	HX_HCSTRING("assign","\x2f","\x46","\x06","\x4c"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("toMap","\xe1","\xbb","\x14","\x14"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("string","\xd1","\x28","\x30","\x11"),
	HX_HCSTRING("stringImpl","\x51","\x10","\xb7","\xf7"),
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("tuples","\x6b","\xeb","\xa1","\x09"),
	HX_HCSTRING("hasPath","\x1f","\x06","\x96","\x19"),
	HX_HCSTRING("hasPathValue","\xd2","\x58","\xca","\xb4"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getPathOption","\x30","\xd3","\x22","\x9a"),
	HX_HCSTRING("getPathOr","\x5e","\x27","\x29","\x6b"),
	HX_HCSTRING("setPath","\x67","\x26","\xd6","\x0f"),
	HX_HCSTRING("removePath","\x09","\x20","\x71","\xc7"),
	::String(null())
};

void Objects_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Objects","\xca","\x96","\xe3","\xfa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Objects_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Objects_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Objects_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Objects_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Objects_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Objects_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Objects_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
