// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_TestDecimal
#include <thx/TestDecimal.h>
#endif
#ifndef INCLUDED_thx__BigInt_BigInt_Impl_
#include <thx/_BigInt/BigInt_Impl_.h>
#endif
#ifndef INCLUDED_thx__Decimal_Decimal_Impl_
#include <thx/_Decimal/Decimal_Impl_.h>
#endif
#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Bigs
#include <thx/bigint/Bigs.h>
#endif
#ifndef INCLUDED_thx_bigint_DecimalImpl
#include <thx/bigint/DecimalImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Decimals
#include <thx/bigint/Decimals.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestDecimal_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestDecimal","new",0xad6672c7,"thx.TestDecimal.new","thx/TestDecimal.hx",9,0xc4d3e24a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   9)		this->x = i;
            	}

Dynamic TestDecimal_obj::__CreateEmpty() { return new TestDecimal_obj; }

hx::ObjectPtr< TestDecimal_obj > TestDecimal_obj::__new(Int i)
{
	hx::ObjectPtr< TestDecimal_obj > _hx_result = new TestDecimal_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestDecimal_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestDecimal_obj > _hx_result = new TestDecimal_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestDecimal_obj::setup(){
            	HX_STACK_FRAME("thx.TestDecimal","setup",0x8afcf8a4,"thx.TestDecimal.setup","thx/TestDecimal.hx",14,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE(  15)		this->divisionSize = ::thx::bigint::Decimals_obj::divisionExtraScale;
HXLINE(  16)		::thx::bigint::Decimals_obj::divisionExtraScale = (int)16;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,setup,(void))

void TestDecimal_obj::teardown(){
            	HX_STACK_FRAME("thx.TestDecimal","teardown",0xb271f23d,"thx.TestDecimal.teardown","thx/TestDecimal.hx",20,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE(  20)		HX_VARI( Int,v) = this->divisionSize;
HXDLIN(  20)		::thx::bigint::Decimals_obj::divisionExtraScale = v;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,teardown,(void))

void TestDecimal_obj::testToBigInt(){
            	HX_STACK_FRAME("thx.TestDecimal","testToBigInt",0x211e2b15,"thx.TestDecimal.testToBigInt","thx/TestDecimal.hx",24,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE(  24)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  24)		HX_VARI( Int,_g) = this->x;
HXDLIN(  24)		while((_g1 < _g)){
HXLINE(  24)			++_g1;
HXLINE(  25)			HX_VARI(  ::thx::bigint::DecimalImpl,v) = ::thx::bigint::Decimals_obj::parse(HX_("10234.0001040000",1f,41,94,09));
HXLINE(  26)			::Dynamic _hx_tmp = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(v);
HXDLIN(  26)			Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(_hx_tmp,::thx::bigint::Bigs_obj::parseBase(HX_("10234",d4,c7,82,56),(int)10));
HXDLIN(  26)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(v);
HXDLIN(  26)			::String _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::toString(this1);
HXDLIN(  26)			::utest::Assert_obj::isTrue(_hx_tmp1,(HX_("expected 10234 but got ",07,89,c0,5c) + _hx_tmp2),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),26,HX_("thx.TestDecimal",55,03,de,a2),HX_("testToBigInt",5c,d2,9e,82)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testToBigInt,(void))

void TestDecimal_obj::testTrim(){
            	HX_STACK_FRAME("thx.TestDecimal","testTrim",0x011a6a8d,"thx.TestDecimal.testTrim","thx/TestDecimal.hx",30,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE(  30)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  30)		HX_VARI( Int,_g) = this->x;
HXDLIN(  30)		while((_g1 < _g)){
HXLINE(  30)			++_g1;
HXLINE(  31)			HX_VARI(  ::thx::bigint::DecimalImpl,v) = ::thx::bigint::Decimals_obj::parse(HX_("10234.0001040000",1f,41,94,09));
HXLINE(  32)			Bool _hx_tmp = (v->scale == (int)10);
HXDLIN(  32)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),32,HX_("thx.TestDecimal",55,03,de,a2),HX_("testTrim",54,22,36,50)));
HXLINE(  33)			Bool _hx_tmp1 = (v->trim(null())->scale == (int)6);
HXDLIN(  33)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),33,HX_("thx.TestDecimal",55,03,de,a2),HX_("testTrim",54,22,36,50)));
HXLINE(  34)			Bool _hx_tmp2 = (v->trim((int)8)->scale == (int)8);
HXDLIN(  34)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = v->trim((int)8);
HXDLIN(  34)			::String _hx_tmp3 = this1->toString();
HXDLIN(  34)			::String _hx_tmp4 = (((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" to have a scale 8 but it is ",d0,b3,bf,f7)) + v->trim((int)8)->scale);
HXDLIN(  34)			::utest::Assert_obj::isTrue(_hx_tmp2,_hx_tmp4,hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),34,HX_("thx.TestDecimal",55,03,de,a2),HX_("testTrim",54,22,36,50)));
HXLINE(  35)			Bool _hx_tmp5 = (v->trim((int)2)->scale == (int)6);
HXDLIN(  35)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this2,"this") = v->trim((int)2);
HXDLIN(  35)			::String _hx_tmp6 = this2->toString();
HXDLIN(  35)			::String _hx_tmp7 = (((HX_("expected ",a8,7a,f8,e9) + _hx_tmp6) + HX_(" to have a scale 6 but it is ",92,d8,40,74)) + v->trim((int)2)->scale);
HXDLIN(  35)			::utest::Assert_obj::isTrue(_hx_tmp5,_hx_tmp7,hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),35,HX_("thx.TestDecimal",55,03,de,a2),HX_("testTrim",54,22,36,50)));
HXLINE(  36)			v = ::thx::bigint::Decimals_obj::parse(HX_("10234.00000000",da,23,30,4b));
HXLINE(  37)			Bool _hx_tmp8 = (v->trim(null())->scale == (int)0);
HXDLIN(  37)			::utest::Assert_obj::isTrue(_hx_tmp8,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),37,HX_("thx.TestDecimal",55,03,de,a2),HX_("testTrim",54,22,36,50)));
HXLINE(  38)			Bool _hx_tmp9 = (v->trim((int)2)->scale == (int)2);
HXDLIN(  38)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this3,"this") = v->trim((int)2);
HXDLIN(  38)			::String _hx_tmp10 = this3->toString();
HXDLIN(  38)			::String _hx_tmp11 = (((HX_("expected ",a8,7a,f8,e9) + _hx_tmp10) + HX_(".scale == 2 but is ",ed,02,ac,fe)) + v->trim((int)2)->scale);
HXDLIN(  38)			::utest::Assert_obj::isTrue(_hx_tmp9,_hx_tmp11,hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),38,HX_("thx.TestDecimal",55,03,de,a2),HX_("testTrim",54,22,36,50)));
HXLINE(  39)			v = ::thx::bigint::Decimals_obj::parse(HX_("1.20000000",1b,5c,be,a1));
HXLINE(  40)			Bool _hx_tmp12 = (v->trim(null())->scale == (int)1);
HXDLIN(  40)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this4,"this") = v->trim(null());
HXDLIN(  40)			::String _hx_tmp13 = this4->toString();
HXDLIN(  40)			::String _hx_tmp14 = (((HX_("expected ",a8,7a,f8,e9) + _hx_tmp13) + HX_(".scale == 1 but got ",9e,e7,36,16)) + v->trim(null())->scale);
HXDLIN(  40)			::utest::Assert_obj::isTrue(_hx_tmp12,_hx_tmp14,hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),40,HX_("thx.TestDecimal",55,03,de,a2),HX_("testTrim",54,22,36,50)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testTrim,(void))

void TestDecimal_obj::testStringExp(){
            	HX_STACK_FRAME("thx.TestDecimal","testStringExp",0x0bdbfac1,"thx.TestDecimal.testStringExp","thx/TestDecimal.hx",44,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE(  44)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  44)		HX_VARI( Int,_g) = this->x;
HXDLIN(  44)		while((_g1 < _g)){
HXLINE(  44)			++_g1;
HXLINE(  45)			 ::thx::bigint::DecimalImpl _hx_tmp = ::thx::bigint::Decimals_obj::parse(HX_("1.12345e-10",3d,7c,7a,9e));
HXDLIN(  45)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp,::thx::bigint::Decimals_obj::parse(HX_("0.000000000112345",54,06,c5,69)));
HXDLIN(  45)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = ::thx::bigint::Decimals_obj::parse(HX_("0.000000000112345",54,06,c5,69));
HXDLIN(  45)			::String _hx_tmp2 = this1->toString();
HXDLIN(  45)			::String _hx_tmp3 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp2) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  45)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this2,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1.12345e-10",3d,7c,7a,9e));
HXDLIN(  45)			::String _hx_tmp4 = this2->toString();
HXDLIN(  45)			::utest::Assert_obj::isTrue(_hx_tmp1,(_hx_tmp3 + _hx_tmp4),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),45,HX_("thx.TestDecimal",55,03,de,a2),HX_("testStringExp",9a,b1,ed,fa)));
HXLINE(  46)			 ::thx::bigint::DecimalImpl _hx_tmp5 = ::thx::bigint::Decimals_obj::parse(HX_("1.12345e+10",bb,f7,78,9e));
HXDLIN(  46)			Bool _hx_tmp6 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp5,::thx::bigint::Decimals_obj::parse(HX_("11234500000",8e,a2,67,77)));
HXDLIN(  46)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this3,"this") = ::thx::bigint::Decimals_obj::parse(HX_("11234500000",8e,a2,67,77));
HXDLIN(  46)			::String _hx_tmp7 = this3->toString();
HXDLIN(  46)			::String _hx_tmp8 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp7) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  46)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this4,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1.12345e+10",bb,f7,78,9e));
HXDLIN(  46)			::String _hx_tmp9 = this4->toString();
HXDLIN(  46)			::utest::Assert_obj::isTrue(_hx_tmp6,(_hx_tmp8 + _hx_tmp9),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),46,HX_("thx.TestDecimal",55,03,de,a2),HX_("testStringExp",9a,b1,ed,fa)));
HXLINE(  47)			 ::thx::bigint::DecimalImpl _hx_tmp10 = ::thx::bigint::Decimals_obj::parse(HX_("-1.12345e-10",30,c1,20,2d));
HXDLIN(  47)			Bool _hx_tmp11 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp10,::thx::bigint::Decimals_obj::parse(HX_("-0.000000000112345",87,03,56,a5)));
HXDLIN(  47)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this5,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-0.000000000112345",87,03,56,a5));
HXDLIN(  47)			::String _hx_tmp12 = this5->toString();
HXDLIN(  47)			::String _hx_tmp13 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp12) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  47)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this6,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1.12345e-10",30,c1,20,2d));
HXDLIN(  47)			::String _hx_tmp14 = this6->toString();
HXDLIN(  47)			::utest::Assert_obj::isTrue(_hx_tmp11,(_hx_tmp13 + _hx_tmp14),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),47,HX_("thx.TestDecimal",55,03,de,a2),HX_("testStringExp",9a,b1,ed,fa)));
HXLINE(  48)			 ::thx::bigint::DecimalImpl _hx_tmp15 = ::thx::bigint::Decimals_obj::parse(HX_("-1.12345e+10",ae,3c,1f,2d));
HXDLIN(  48)			Bool _hx_tmp16 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp15,::thx::bigint::Decimals_obj::parse(HX_("-11234500000",81,e7,0d,06)));
HXDLIN(  48)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this7,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-11234500000",81,e7,0d,06));
HXDLIN(  48)			::String _hx_tmp17 = this7->toString();
HXDLIN(  48)			::String _hx_tmp18 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp17) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  48)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this8,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1.12345e+10",ae,3c,1f,2d));
HXDLIN(  48)			::String _hx_tmp19 = this8->toString();
HXDLIN(  48)			::utest::Assert_obj::isTrue(_hx_tmp16,(_hx_tmp18 + _hx_tmp19),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),48,HX_("thx.TestDecimal",55,03,de,a2),HX_("testStringExp",9a,b1,ed,fa)));
HXLINE(  49)			 ::thx::bigint::DecimalImpl _hx_tmp20 = ::thx::bigint::Decimals_obj::parse(HX_("0E7",82,a8,24,00));
HXDLIN(  49)			Bool _hx_tmp21 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp20,::thx::bigint::Decimals_obj::parse(HX_("0",30,00,00,00)));
HXDLIN(  49)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this9,"this") = ::thx::bigint::Decimals_obj::parse(HX_("0",30,00,00,00));
HXDLIN(  49)			::String _hx_tmp22 = this9->toString();
HXDLIN(  49)			::String _hx_tmp23 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp22) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  49)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this10,"this") = ::thx::bigint::Decimals_obj::parse(HX_("0E7",82,a8,24,00));
HXDLIN(  49)			::String _hx_tmp24 = this10->toString();
HXDLIN(  49)			::utest::Assert_obj::isTrue(_hx_tmp21,(_hx_tmp23 + _hx_tmp24),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),49,HX_("thx.TestDecimal",55,03,de,a2),HX_("testStringExp",9a,b1,ed,fa)));
HXLINE(  50)			 ::thx::bigint::DecimalImpl _hx_tmp25 = ::thx::bigint::Decimals_obj::fromFloat(((Float)1.234e-50));
HXDLIN(  50)			Bool _hx_tmp26 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp25,::thx::bigint::Decimals_obj::parse(HX_("1.234000e-050",c9,a7,86,79)));
HXDLIN(  50)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this11,"this") = ::thx::bigint::Decimals_obj::fromFloat(((Float)1.234e-50));
HXDLIN(  50)			::String _hx_tmp27 = this11->toString();
HXDLIN(  50)			::String _hx_tmp28 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp27) + HX_(" == ",a0,52,55,15));
HXDLIN(  50)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this12,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1.234000e-050",c9,a7,86,79));
HXDLIN(  50)			::String _hx_tmp29 = this12->toString();
HXDLIN(  50)			::utest::Assert_obj::isTrue(_hx_tmp26,(_hx_tmp28 + _hx_tmp29),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),50,HX_("thx.TestDecimal",55,03,de,a2),HX_("testStringExp",9a,b1,ed,fa)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testStringExp,(void))

void TestDecimal_obj::testModulo(){
            	HX_STACK_FRAME("thx.TestDecimal","testModulo",0xc2790321,"thx.TestDecimal.testModulo","thx/TestDecimal.hx",54,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE(  54)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  54)		HX_VARI( Int,_g) = this->x;
HXDLIN(  54)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestDecimal","testModulo",0xc2790321,"thx.TestDecimal.testModulo","thx/TestDecimal.hx",68,0xc4d3e24a)
HXLINE(  68)				HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this11,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1);
HXDLIN(  68)				HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that10,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0);
HXDLIN(  68)				this11->modulo(that10);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  54)			++_g1;
HXLINE(  55)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)10);
HXDLIN(  55)			HX_VARI(  ::thx::bigint::DecimalImpl,that) = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)3);
HXDLIN(  55)			 ::thx::bigint::DecimalImpl _hx_tmp = this1->modulo(that);
HXDLIN(  55)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1));
HXDLIN(  55)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),55,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
HXLINE(  56)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this2,"this") = ::thx::bigint::Decimals_obj::fromFloat(((Float)10.2));
HXDLIN(  56)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that1,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)3);
HXDLIN(  56)			 ::thx::bigint::DecimalImpl _hx_tmp2 = this2->modulo(that1);
HXDLIN(  56)			Bool _hx_tmp3 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp2,::thx::bigint::Decimals_obj::fromFloat(((Float)1.2)));
HXDLIN(  56)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),56,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
HXLINE(  57)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this3,"this") = ::thx::bigint::Decimals_obj::parse(HX_("12345678900000000",35,65,2f,b2));
HXDLIN(  57)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that2,"that") = ::thx::bigint::Decimals_obj::parse(HX_("0.0000000012345678",82,41,40,7a));
HXDLIN(  57)			 ::thx::bigint::DecimalImpl _hx_tmp4 = this3->modulo(that2);
HXDLIN(  57)			Bool _hx_tmp5 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp4,::thx::bigint::Decimals_obj::parse(HX_("0.0000000009832122",81,d4,86,ce)));
HXDLIN(  57)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),57,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
HXLINE(  58)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this4,"this") = ::thx::bigint::Decimals_obj::fromFloat(((Float)16.80));
HXDLIN(  58)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that3,"that") = ::thx::bigint::Decimals_obj::fromFloat(((Float)4.10));
HXDLIN(  58)			 ::thx::bigint::DecimalImpl _hx_tmp6 = this4->modulo(that3);
HXDLIN(  58)			Bool _hx_tmp7 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp6,::thx::bigint::Decimals_obj::parse(HX_("0.4",76,94,24,00)));
HXDLIN(  58)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),58,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
HXLINE(  59)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this5,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)10);
HXDLIN(  59)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that4,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)3);
HXDLIN(  59)			 ::thx::bigint::DecimalImpl _hx_tmp8 = this5->modulo(that4);
HXDLIN(  59)			Bool _hx_tmp9 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp8,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1));
HXDLIN(  59)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),59,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
HXLINE(  60)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this6,"this") = ::thx::bigint::Decimals_obj::fromFloat(((Float)10.2));
HXDLIN(  60)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that5,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)3);
HXDLIN(  60)			 ::thx::bigint::DecimalImpl _hx_tmp10 = this6->modulo(that5);
HXDLIN(  60)			Bool _hx_tmp11 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp10,::thx::bigint::Decimals_obj::fromFloat(((Float)1.2)));
HXDLIN(  60)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),60,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
HXLINE(  62)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this7,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)10);
HXDLIN(  62)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that6,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-3);
HXDLIN(  62)			 ::thx::bigint::DecimalImpl _hx_tmp12 = this7->modulo(that6);
HXDLIN(  62)			Bool _hx_tmp13 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp12,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1));
HXDLIN(  62)			::utest::Assert_obj::isTrue(_hx_tmp13,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),62,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
HXLINE(  63)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this8,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-10);
HXDLIN(  63)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that7,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-3);
HXDLIN(  63)			 ::thx::bigint::DecimalImpl _hx_tmp14 = this8->modulo(that7);
HXDLIN(  63)			Bool _hx_tmp15 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp14,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1));
HXDLIN(  63)			::utest::Assert_obj::isTrue(_hx_tmp15,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),63,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
HXLINE(  64)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this9,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-10);
HXDLIN(  64)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that8,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)3);
HXDLIN(  64)			 ::thx::bigint::DecimalImpl _hx_tmp16 = this9->modulo(that8);
HXDLIN(  64)			Bool _hx_tmp17 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp16,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1));
HXDLIN(  64)			::utest::Assert_obj::isTrue(_hx_tmp17,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),64,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
HXLINE(  66)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this10,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0);
HXDLIN(  66)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that9,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)3);
HXDLIN(  66)			 ::thx::bigint::DecimalImpl _hx_tmp18 = this10->modulo(that9);
HXDLIN(  66)			Bool _hx_tmp19 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp18,::thx::bigint::Decimals_obj::parse(HX_("0.0",72,94,24,00)));
HXDLIN(  66)			::utest::Assert_obj::isTrue(_hx_tmp19,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),66,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
HXLINE(  68)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0()),null(),null(),null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),68,HX_("thx.TestDecimal",55,03,de,a2),HX_("testModulo",a8,7a,c7,d9)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testModulo,(void))

void TestDecimal_obj::testDivision(){
            	HX_STACK_FRAME("thx.TestDecimal","testDivision",0x670bdc58,"thx.TestDecimal.testDivision","thx/TestDecimal.hx",72,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE(  72)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  72)		HX_VARI( Int,_g) = this->x;
HXDLIN(  72)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.TestDecimal","testDivision",0x670bdc58,"thx.TestDecimal.testDivision","thx/TestDecimal.hx",87,0xc4d3e24a)
HXLINE(  87)				HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this18,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1);
HXDLIN(  87)				HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that13,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0);
HXDLIN(  87)				this18->divide(that13);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  72)			++_g1;
HXLINE(  73)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = ::thx::bigint::Decimals_obj::parse(HX_("12345678900000000",35,65,2f,b2));
HXDLIN(  73)			HX_VARI(  ::thx::bigint::DecimalImpl,that) = ::thx::bigint::Decimals_obj::parse(HX_("0.0000000012345678",82,41,40,7a));
HXDLIN(  73)			 ::thx::bigint::DecimalImpl _hx_tmp = this1->divide(that);
HXDLIN(  73)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp,::thx::bigint::Decimals_obj::parse(HX_("10000000729000059778004901.79640194730495967900669367854888",86,7d,b8,3d)));
HXDLIN(  73)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),73,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  74)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this2,"this") = ::thx::bigint::Decimals_obj::parse(HX_("12345678901234567890.12346789",3c,b0,36,e3));
HXDLIN(  74)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that1,"that") = ::thx::bigint::Decimals_obj::parse(HX_("987654321.987654321",bc,18,3c,4c));
HXDLIN(  74)			 ::thx::bigint::DecimalImpl _hx_tmp2 = this2->divide(that1);
HXDLIN(  74)			Bool _hx_tmp3 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp2,::thx::bigint::Decimals_obj::parse(HX_("12499999874.843750115314464248433558",03,69,b7,1a)));
HXDLIN(  74)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this3,"this") = ::thx::bigint::Decimals_obj::parse(HX_("12345678901234567890.12346789",3c,b0,36,e3));
HXDLIN(  74)			::String _hx_tmp4 = this3->toString();
HXDLIN(  74)			::String _hx_tmp5 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp4) + HX_(" / ",31,71,18,00));
HXDLIN(  74)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this4,"this") = ::thx::bigint::Decimals_obj::parse(HX_("987654321.987654321",bc,18,3c,4c));
HXDLIN(  74)			::String _hx_tmp6 = this4->toString();
HXDLIN(  74)			::String _hx_tmp7 = ((_hx_tmp5 + _hx_tmp6) + HX_(" == ",a0,52,55,15));
HXDLIN(  74)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this5,"this") = ::thx::bigint::Decimals_obj::parse(HX_("12499999874.843750115314464248433558",03,69,b7,1a));
HXDLIN(  74)			::String _hx_tmp8 = this5->toString();
HXDLIN(  74)			::String _hx_tmp9 = ((_hx_tmp7 + _hx_tmp8) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  74)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this6,"this") = ::thx::bigint::Decimals_obj::parse(HX_("12345678901234567890.12346789",3c,b0,36,e3));
HXDLIN(  74)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that2,"that") = ::thx::bigint::Decimals_obj::parse(HX_("987654321.987654321",bc,18,3c,4c));
HXDLIN(  74)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this7,"this") = this6->divide(that2);
HXDLIN(  74)			::String _hx_tmp10 = this7->toString();
HXDLIN(  74)			::utest::Assert_obj::isTrue(_hx_tmp3,(_hx_tmp9 + _hx_tmp10),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),74,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  75)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this8,"this") = ::thx::bigint::Decimals_obj::parse(HX_("12345678901234567890.12346789",3c,b0,36,e3));
HXDLIN(  75)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that3,"that") = ::thx::bigint::Decimals_obj::parse(HX_("-987654321.987654321",af,08,ed,4b));
HXDLIN(  75)			 ::thx::bigint::DecimalImpl _hx_tmp11 = this8->divide(that3);
HXDLIN(  75)			Bool _hx_tmp12 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp11,::thx::bigint::Decimals_obj::parse(HX_("-12499999874.843750115314464248433558",b0,57,e5,35)));
HXDLIN(  75)			::utest::Assert_obj::isTrue(_hx_tmp12,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),75,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  76)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this9,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-12345678901234567890.12346789",ef,2d,28,58));
HXDLIN(  76)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that4,"that") = ::thx::bigint::Decimals_obj::parse(HX_("-987654321.987654321",af,08,ed,4b));
HXDLIN(  76)			 ::thx::bigint::DecimalImpl _hx_tmp13 = this9->divide(that4);
HXDLIN(  76)			Bool _hx_tmp14 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp13,::thx::bigint::Decimals_obj::parse(HX_("12499999874.843750115314464248433558",03,69,b7,1a)));
HXDLIN(  76)			::utest::Assert_obj::isTrue(_hx_tmp14,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),76,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  77)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this10,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-12345678901234567890.12346789",ef,2d,28,58));
HXDLIN(  77)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that5,"that") = ::thx::bigint::Decimals_obj::parse(HX_("987654321.987654321",bc,18,3c,4c));
HXDLIN(  77)			 ::thx::bigint::DecimalImpl _hx_tmp15 = this10->divide(that5);
HXDLIN(  77)			Bool _hx_tmp16 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp15,::thx::bigint::Decimals_obj::parse(HX_("-12499999874.843750115314464248433558",b0,57,e5,35)));
HXDLIN(  77)			::utest::Assert_obj::isTrue(_hx_tmp16,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),77,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  78)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this11,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-12345678901234567890.12346789",ef,2d,28,58));
HXDLIN(  78)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that6,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1);
HXDLIN(  78)			 ::thx::bigint::DecimalImpl _hx_tmp17 = this11->divide(that6);
HXDLIN(  78)			Bool _hx_tmp18 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp17,::thx::bigint::Decimals_obj::parse(HX_("-12345678901234567890.12346789",ef,2d,28,58)));
HXDLIN(  78)			::utest::Assert_obj::isTrue(_hx_tmp18,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),78,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  79)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this12,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-12345678901234567890.12346789",ef,2d,28,58));
HXDLIN(  79)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that7,"that") = ::thx::bigint::Decimals_obj::parse(HX_("-12345678901234567890.12346789",ef,2d,28,58));
HXDLIN(  79)			 ::thx::bigint::DecimalImpl _hx_tmp19 = this12->divide(that7);
HXDLIN(  79)			Bool _hx_tmp20 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp19,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1));
HXDLIN(  79)			::utest::Assert_obj::isTrue(_hx_tmp20,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),79,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  80)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this13,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)10);
HXDLIN(  80)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that8,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)2);
HXDLIN(  80)			 ::thx::bigint::DecimalImpl _hx_tmp21 = this13->divide(that8);
HXDLIN(  80)			Bool _hx_tmp22 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp21,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)5));
HXDLIN(  80)			::utest::Assert_obj::isTrue(_hx_tmp22,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),80,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  81)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this14,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)10);
HXDLIN(  81)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that9,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)3);
HXDLIN(  81)			 ::thx::bigint::DecimalImpl _hx_tmp23 = this14->divide(that9);
HXDLIN(  81)			Bool _hx_tmp24 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp23,::thx::bigint::Decimals_obj::parse(HX_("3.3333333333333333",9b,17,05,e8)));
HXDLIN(  81)			::utest::Assert_obj::isTrue(_hx_tmp24,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),81,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  82)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this15,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1);
HXDLIN(  82)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that10,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)2);
HXDLIN(  82)			 ::thx::bigint::DecimalImpl _hx_tmp25 = this15->divide(that10);
HXDLIN(  82)			Bool _hx_tmp26 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp25,::thx::bigint::Decimals_obj::fromFloat(((Float)0.5)));
HXDLIN(  82)			::utest::Assert_obj::isTrue(_hx_tmp26,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),82,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  83)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this16,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1);
HXDLIN(  83)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that11,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)3);
HXDLIN(  83)			 ::thx::bigint::DecimalImpl _hx_tmp27 = this16->divide(that11);
HXDLIN(  83)			Bool _hx_tmp28 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp27,::thx::bigint::Decimals_obj::parse(HX_("0.3333333333333333",fe,4a,d9,b0)));
HXDLIN(  83)			::utest::Assert_obj::isTrue(_hx_tmp28,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),83,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  85)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this17,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0);
HXDLIN(  85)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that12,"that") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)3);
HXDLIN(  85)			 ::thx::bigint::DecimalImpl _hx_tmp29 = this17->divide(that12);
HXDLIN(  85)			Bool _hx_tmp30 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp29,::thx::bigint::Decimals_obj::parse(HX_("0.0",72,94,24,00)));
HXDLIN(  85)			::utest::Assert_obj::isTrue(_hx_tmp30,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),85,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
HXLINE(  87)			::utest::Assert_obj::raises( ::Dynamic(new _hx_Closure_0()),null(),null(),null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),87,HX_("thx.TestDecimal",55,03,de,a2),HX_("testDivision",9f,83,8c,c8)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testDivision,(void))

void TestDecimal_obj::testMultiply(){
            	HX_STACK_FRAME("thx.TestDecimal","testMultiply",0xac13614f,"thx.TestDecimal.testMultiply","thx/TestDecimal.hx",91,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE(  91)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  91)		HX_VARI( Int,_g) = this->x;
HXDLIN(  91)		while((_g1 < _g)){
HXLINE(  91)			++_g1;
HXLINE(  92)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = ::thx::bigint::Decimals_obj::parse(HX_("12345678900000000",35,65,2f,b2));
HXDLIN(  92)			HX_VARI(  ::thx::bigint::DecimalImpl,that) = ::thx::bigint::Decimals_obj::parse(HX_("0.0000000012345678",82,41,40,7a));
HXDLIN(  92)			 ::thx::bigint::DecimalImpl _hx_tmp = this1->multiply(that);
HXDLIN(  92)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp,::thx::bigint::Decimals_obj::parse(HX_("15241577.63907942",b8,88,25,bb)));
HXDLIN(  92)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),92,HX_("thx.TestDecimal",55,03,de,a2),HX_("testMultiply",96,08,94,0d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testMultiply,(void))

void TestDecimal_obj::testInts(){
            	HX_STACK_FRAME("thx.TestDecimal","testInts",0xf9d2124f,"thx.TestDecimal.testInts","thx/TestDecimal.hx",96,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE(  96)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  96)		HX_VARI( Int,_g) = this->x;
HXDLIN(  96)		while((_g1 < _g)){
HXLINE(  96)			++_g1;
HXLINE(  97)			 ::thx::bigint::DecimalImpl _hx_tmp = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)123);
HXDLIN(  97)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp,::thx::bigint::Decimals_obj::parse(HX_("123",32,5a,25,00)));
HXDLIN(  97)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),97,HX_("thx.TestDecimal",55,03,de,a2),HX_("testInts",16,ca,ed,48)));
HXLINE(  98)			 ::thx::bigint::DecimalImpl _hx_tmp2 = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-123);
HXDLIN(  98)			Bool _hx_tmp3 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp2,::thx::bigint::Decimals_obj::parse(HX_("-123",25,f4,e3,1d)));
HXDLIN(  98)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),98,HX_("thx.TestDecimal",55,03,de,a2),HX_("testInts",16,ca,ed,48)));
HXLINE(  99)			 ::thx::bigint::DecimalImpl _hx_tmp4 = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1234567890);
HXDLIN(  99)			Bool _hx_tmp5 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp4,::thx::bigint::Decimals_obj::parse(HX_("1234567890",5b,2e,e3,45)));
HXDLIN(  99)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),99,HX_("thx.TestDecimal",55,03,de,a2),HX_("testInts",16,ca,ed,48)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testInts,(void))

void TestDecimal_obj::testFloats(){
            	HX_STACK_FRAME("thx.TestDecimal","testFloats",0x42fbf1c2,"thx.TestDecimal.testFloats","thx/TestDecimal.hx",103,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE( 103)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 103)		HX_VARI( Int,_g) = this->x;
HXDLIN( 103)		while((_g1 < _g)){
HXLINE( 103)			++_g1;
HXLINE( 104)			 ::thx::bigint::DecimalImpl _hx_tmp = ::thx::bigint::Decimals_obj::fromFloat(((Float)123.456));
HXDLIN( 104)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp,::thx::bigint::Decimals_obj::parse(HX_("123.456",59,cf,72,6f)));
HXDLIN( 104)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),104,HX_("thx.TestDecimal",55,03,de,a2),HX_("testFloats",49,69,4a,5a)));
HXLINE( 105)			 ::thx::bigint::DecimalImpl _hx_tmp2 = ::thx::bigint::Decimals_obj::fromFloat(((Float)-123.456));
HXDLIN( 105)			Bool _hx_tmp3 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp2,::thx::bigint::Decimals_obj::parse(HX_("-123.456",cc,de,50,7d)));
HXDLIN( 105)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),105,HX_("thx.TestDecimal",55,03,de,a2),HX_("testFloats",49,69,4a,5a)));
HXLINE( 106)			 ::thx::bigint::DecimalImpl _hx_tmp4 = ::thx::bigint::Decimals_obj::fromFloat(((Float)0.123456789));
HXDLIN( 106)			Bool _hx_tmp5 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp4,::thx::bigint::Decimals_obj::parse(HX_("0.123456789",77,a6,92,fe)));
HXDLIN( 106)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),106,HX_("thx.TestDecimal",55,03,de,a2),HX_("testFloats",49,69,4a,5a)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testFloats,(void))

void TestDecimal_obj::testEquality(){
            	HX_STACK_FRAME("thx.TestDecimal","testEquality",0xe6b98a25,"thx.TestDecimal.testEquality","thx/TestDecimal.hx",110,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE( 110)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 110)		HX_VARI( Int,_g) = this->x;
HXDLIN( 110)		while((_g1 < _g)){
HXLINE( 110)			++_g1;
HXLINE( 111)			 ::thx::bigint::DecimalImpl _hx_tmp = ::thx::bigint::Decimals_obj::parse(HX_("123.456",59,cf,72,6f));
HXDLIN( 111)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp,::thx::bigint::Decimals_obj::parse(HX_("123.4560000",d9,c3,0e,61)));
HXDLIN( 111)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),111,HX_("thx.TestDecimal",55,03,de,a2),HX_("testEquality",6c,31,3a,48)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testEquality,(void))

void TestDecimal_obj::testAddition(){
            	HX_STACK_FRAME("thx.TestDecimal","testAddition",0xb9c5ec27,"thx.TestDecimal.testAddition","thx/TestDecimal.hx",115,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE( 115)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 115)		HX_VARI( Int,_g) = this->x;
HXDLIN( 115)		while((_g1 < _g)){
HXLINE( 115)			++_g1;
HXLINE( 116)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = ::thx::bigint::Decimals_obj::parse(HX_("123.456",59,cf,72,6f));
HXDLIN( 116)			HX_VARI(  ::thx::bigint::DecimalImpl,that) = ::thx::bigint::Decimals_obj::parse(HX_("76.544000",ca,f0,a0,1f));
HXDLIN( 116)			 ::thx::bigint::DecimalImpl _hx_tmp = this1->add(that);
HXDLIN( 116)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp,::thx::bigint::Decimals_obj::parse(HX_("200",b2,1a,26,00)));
HXDLIN( 116)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),116,HX_("thx.TestDecimal",55,03,de,a2),HX_("testAddition",6e,93,46,1b)));
HXLINE( 117)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this2,"this") = ::thx::bigint::Decimals_obj::parse(HX_("123.456",59,cf,72,6f));
HXDLIN( 117)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that1,"that") = ::thx::bigint::Decimals_obj::parse(HX_("0.004",f6,3e,c8,c1));
HXDLIN( 117)			 ::thx::bigint::DecimalImpl _hx_tmp2 = this2->add(that1);
HXDLIN( 117)			Bool _hx_tmp3 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp2,::thx::bigint::Decimals_obj::parse(HX_("123.46",3e,a6,5e,83)));
HXDLIN( 117)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),117,HX_("thx.TestDecimal",55,03,de,a2),HX_("testAddition",6e,93,46,1b)));
HXLINE( 118)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this3,"this") = ::thx::bigint::Decimals_obj::parse(HX_("123.456",59,cf,72,6f));
HXDLIN( 118)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that2,"that") = ::thx::bigint::Decimals_obj::parse(HX_("-0.456",0a,89,da,bf));
HXDLIN( 118)			 ::thx::bigint::DecimalImpl _hx_tmp4 = this3->add(that2);
HXDLIN( 118)			Bool _hx_tmp5 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp4,::thx::bigint::Decimals_obj::parse(HX_("123",32,5a,25,00)));
HXDLIN( 118)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),118,HX_("thx.TestDecimal",55,03,de,a2),HX_("testAddition",6e,93,46,1b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testAddition,(void))

void TestDecimal_obj::testSubtraction(){
            	HX_STACK_FRAME("thx.TestDecimal","testSubtraction",0x40cd0ae9,"thx.TestDecimal.testSubtraction","thx/TestDecimal.hx",122,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE( 122)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 122)		HX_VARI( Int,_g) = this->x;
HXDLIN( 122)		while((_g1 < _g)){
HXLINE( 122)			++_g1;
HXLINE( 123)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = ::thx::bigint::Decimals_obj::parse(HX_("123.456",59,cf,72,6f));
HXDLIN( 123)			HX_VARI(  ::thx::bigint::DecimalImpl,that) = ::thx::bigint::Decimals_obj::parse(HX_("76.544000",ca,f0,a0,1f));
HXDLIN( 123)			 ::thx::bigint::DecimalImpl _hx_tmp = this1->subtract(that);
HXDLIN( 123)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp,::thx::bigint::Decimals_obj::parse(HX_("46.912000",82,fc,b3,84)));
HXDLIN( 123)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),123,HX_("thx.TestDecimal",55,03,de,a2),HX_("testSubtraction",02,ea,dc,60)));
HXLINE( 124)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this2,"this") = ::thx::bigint::Decimals_obj::parse(HX_("123.456",59,cf,72,6f));
HXDLIN( 124)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that1,"that") = ::thx::bigint::Decimals_obj::parse(HX_("0.004",f6,3e,c8,c1));
HXDLIN( 124)			 ::thx::bigint::DecimalImpl _hx_tmp2 = this2->subtract(that1);
HXDLIN( 124)			Bool _hx_tmp3 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp2,::thx::bigint::Decimals_obj::parse(HX_("123.452",55,cf,72,6f)));
HXDLIN( 124)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),124,HX_("thx.TestDecimal",55,03,de,a2),HX_("testSubtraction",02,ea,dc,60)));
HXLINE( 125)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this3,"this") = ::thx::bigint::Decimals_obj::parse(HX_("123.456",59,cf,72,6f));
HXDLIN( 125)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,that2,"that") = ::thx::bigint::Decimals_obj::parse(HX_("-0.456",0a,89,da,bf));
HXDLIN( 125)			 ::thx::bigint::DecimalImpl _hx_tmp4 = this3->subtract(that2);
HXDLIN( 125)			Bool _hx_tmp5 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp4,::thx::bigint::Decimals_obj::parse(HX_("123.912",1e,97,76,6f)));
HXDLIN( 125)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),125,HX_("thx.TestDecimal",55,03,de,a2),HX_("testSubtraction",02,ea,dc,60)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testSubtraction,(void))

void TestDecimal_obj::testComparison(){
            	HX_STACK_FRAME("thx.TestDecimal","testComparison",0x70e77b34,"thx.TestDecimal.testComparison","thx/TestDecimal.hx",129,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE( 129)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 129)		HX_VARI( Int,_g) = this->x;
HXDLIN( 129)		while((_g1 < _g)){
HXLINE( 129)			++_g1;
HXLINE( 130)			 ::thx::bigint::DecimalImpl _hx_tmp = ::thx::bigint::Decimals_obj::parse(HX_("1",31,00,00,00));
HXDLIN( 130)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::greater(_hx_tmp,::thx::bigint::Decimals_obj::parse(HX_("0.11111",b3,17,9c,87)));
HXDLIN( 130)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),130,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 131)			 ::thx::bigint::DecimalImpl _hx_tmp2 = ::thx::bigint::Decimals_obj::parse(HX_("1",31,00,00,00));
HXDLIN( 131)			Bool _hx_tmp3 = ::thx::_Decimal::Decimal_Impl__obj::greater(_hx_tmp2,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1));
HXDLIN( 131)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),131,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 132)			 ::thx::bigint::DecimalImpl _hx_tmp4 = ::thx::bigint::Decimals_obj::parse(HX_("1",31,00,00,00));
HXDLIN( 132)			Bool _hx_tmp5 = ::thx::_Decimal::Decimal_Impl__obj::greater(_hx_tmp4,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1));
HXDLIN( 132)			::utest::Assert_obj::isFalse(_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),132,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 133)			 ::thx::bigint::DecimalImpl _hx_tmp6 = ::thx::bigint::Decimals_obj::parse(HX_("1",31,00,00,00));
HXDLIN( 133)			Bool _hx_tmp7 = ::thx::_Decimal::Decimal_Impl__obj::greaterEquals(_hx_tmp6,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1));
HXDLIN( 133)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),133,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 134)			 ::thx::bigint::DecimalImpl _hx_tmp8 = ::thx::bigint::Decimals_obj::parse(HX_("1",31,00,00,00));
HXDLIN( 134)			Bool _hx_tmp9 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp8,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1));
HXDLIN( 134)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),134,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 135)			 ::thx::bigint::DecimalImpl _hx_tmp10 = ::thx::bigint::Decimals_obj::parse(HX_("1.01001",d3,36,ca,1d));
HXDLIN( 135)			Bool _hx_tmp11 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp10,::thx::bigint::Decimals_obj::parse(HX_("1.0100100",93,fb,e3,cd)));
HXDLIN( 135)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),135,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 136)			 ::thx::bigint::DecimalImpl _hx_tmp12 = ::thx::bigint::Decimals_obj::parse(HX_("0",30,00,00,00));
HXDLIN( 136)			Bool _hx_tmp13 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp12,::thx::bigint::Decimals_obj::parse(HX_("0",30,00,00,00)));
HXDLIN( 136)			::utest::Assert_obj::isTrue(_hx_tmp13,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),136,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 137)			 ::thx::bigint::DecimalImpl _hx_tmp14 = ::thx::bigint::Decimals_obj::parse(HX_("0.000",f2,3e,c8,c1));
HXDLIN( 137)			Bool _hx_tmp15 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp14,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0));
HXDLIN( 137)			::utest::Assert_obj::isTrue(_hx_tmp15,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),137,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 138)			 ::thx::bigint::DecimalImpl _hx_tmp16 = ::thx::bigint::Decimals_obj::parse(HX_("-1.12345e+10",ae,3c,1f,2d));
HXDLIN( 138)			Bool _hx_tmp17 = ::thx::_Decimal::Decimal_Impl__obj::greaterEquals(_hx_tmp16,::thx::bigint::Decimals_obj::parse(HX_("-11234500000",81,e7,0d,06)));
HXDLIN( 138)			::utest::Assert_obj::isTrue(_hx_tmp17,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),138,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 139)			 ::thx::bigint::DecimalImpl _hx_tmp18 = ::thx::bigint::Decimals_obj::parse(HX_("-1.12345e+10",ae,3c,1f,2d));
HXDLIN( 139)			Bool _hx_tmp19 = ::thx::_Decimal::Decimal_Impl__obj::lessEquals(_hx_tmp18,::thx::bigint::Decimals_obj::parse(HX_("-11234500000",81,e7,0d,06)));
HXDLIN( 139)			::utest::Assert_obj::isTrue(_hx_tmp19,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),139,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 140)			 ::thx::bigint::DecimalImpl _hx_tmp20 = ::thx::bigint::Decimals_obj::parse(HX_("1.12345e+10",bb,f7,78,9e));
HXDLIN( 140)			Bool _hx_tmp21 = ::thx::_Decimal::Decimal_Impl__obj::greaterEquals(_hx_tmp20,::thx::bigint::Decimals_obj::parse(HX_("11234500000",8e,a2,67,77)));
HXDLIN( 140)			::utest::Assert_obj::isTrue(_hx_tmp21,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),140,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
HXLINE( 141)			 ::thx::bigint::DecimalImpl _hx_tmp22 = ::thx::bigint::Decimals_obj::parse(HX_("1.12345e+10",bb,f7,78,9e));
HXDLIN( 141)			Bool _hx_tmp23 = ::thx::_Decimal::Decimal_Impl__obj::lessEquals(_hx_tmp22,::thx::bigint::Decimals_obj::parse(HX_("11234500000",8e,a2,67,77)));
HXDLIN( 141)			::utest::Assert_obj::isTrue(_hx_tmp23,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),141,HX_("thx.TestDecimal",55,03,de,a2),HX_("testComparison",3b,c2,55,b1)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testComparison,(void))

void TestDecimal_obj::testString(){
            	HX_STACK_FRAME("thx.TestDecimal","testString",0x12d5f73c,"thx.TestDecimal.testString","thx/TestDecimal.hx",145,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE( 145)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 145)		HX_VARI( Int,_g) = this->x;
HXDLIN( 145)		while((_g1 < _g)){
HXLINE( 145)			++_g1;
HXLINE( 146)			HX_VARI( ::Array< ::String >,tests) = ::Array_obj< ::String >::__new(9)->init(0,HX_("0",30,00,00,00))->init(1,HX_("0.00000789",c6,56,14,6f))->init(2,HX_("0.001",f3,3e,c8,c1))->init(3,HX_("0.123",f4,02,c9,c1))->init(4,HX_("1.0",b3,56,25,00))->init(5,HX_("1",31,00,00,00))->init(6,HX_("1.1",b4,56,25,00))->init(7,HX_("123456789.0123456789",9e,71,af,b9))->init(8,HX_("123456789.012345678900000",d2,9d,34,0f));
HXDLIN( 146)			HX_VAR(  ::thx::bigint::DecimalImpl,dec);
HXLINE( 148)			{
HXLINE( 148)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 148)				while((_g2 < tests->length)){
HXLINE( 148)					HX_VARI( ::String,test) = tests->__get(_g2);
HXDLIN( 148)					++_g2;
HXLINE( 149)					dec = ::thx::bigint::Decimals_obj::parse(test);
HXLINE( 150)					::String _hx_tmp = dec->toString();
HXDLIN( 150)					::utest::Assert_obj::equals(test,_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),150,HX_("thx.TestDecimal",55,03,de,a2),HX_("testString",c3,6e,24,2a)));
HXLINE( 152)					if ((test == HX_("0",30,00,00,00))) {
HXLINE( 152)						continue;
            					}
HXLINE( 154)					dec = ::thx::bigint::Decimals_obj::parse((HX_("-",2d,00,00,00) + test));
HXLINE( 155)					::String _hx_tmp1 = (HX_("-",2d,00,00,00) + test);
HXDLIN( 155)					::String _hx_tmp2 = dec->toString();
HXDLIN( 155)					::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),155,HX_("thx.TestDecimal",55,03,de,a2),HX_("testString",c3,6e,24,2a)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testString,(void))

void TestDecimal_obj::assertDecimalEquals( ::thx::bigint::DecimalImpl test, ::thx::bigint::DecimalImpl expected, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestDecimal","assertDecimalEquals",0xb9ba3f71,"thx.TestDecimal.assertDecimalEquals","thx/TestDecimal.hx",160,0xc4d3e24a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(test,"test")
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 160)		Bool _hx_tmp = ::thx::_Decimal::Decimal_Impl__obj::equals(test,expected);
HXDLIN( 160)		::String _hx_tmp1 = expected->toString();
HXDLIN( 160)		::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 160)		::String _hx_tmp3 = test->toString();
HXDLIN( 160)		::utest::Assert_obj::isTrue(_hx_tmp,(_hx_tmp2 + _hx_tmp3),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TestDecimal_obj,assertDecimalEquals,(void))

void TestDecimal_obj::testRound(){
            	HX_STACK_FRAME("thx.TestDecimal","testRound",0xcd432043,"thx.TestDecimal.testRound","thx/TestDecimal.hx",164,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE( 164)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 164)		HX_VARI( Int,_g) = this->x;
HXDLIN( 164)		while((_g1 < _g)){
HXLINE( 164)			++_g1;
HXLINE( 165)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0);
HXDLIN( 165)			 ::thx::bigint::DecimalImpl _hx_tmp = this1->roundTo((int)0);
HXDLIN( 165)			this->assertDecimalEquals(_hx_tmp,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),165,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 166)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this2,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0);
HXDLIN( 166)			 ::thx::bigint::DecimalImpl _hx_tmp1 = this2->ceilTo((int)0);
HXDLIN( 166)			this->assertDecimalEquals(_hx_tmp1,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),166,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 167)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this3,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0);
HXDLIN( 167)			 ::thx::bigint::DecimalImpl _hx_tmp2 = this3->floorTo((int)0);
HXDLIN( 167)			this->assertDecimalEquals(_hx_tmp2,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),167,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 169)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this4,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1);
HXDLIN( 169)			 ::thx::bigint::DecimalImpl _hx_tmp3 = this4->roundTo((int)0);
HXDLIN( 169)			this->assertDecimalEquals(_hx_tmp3,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),169,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 170)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this5,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1);
HXDLIN( 170)			 ::thx::bigint::DecimalImpl _hx_tmp4 = this5->roundTo((int)0);
HXDLIN( 170)			this->assertDecimalEquals(_hx_tmp4,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),170,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 171)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this6,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1);
HXDLIN( 171)			 ::thx::bigint::DecimalImpl _hx_tmp5 = this6->ceilTo((int)0);
HXDLIN( 171)			this->assertDecimalEquals(_hx_tmp5,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),171,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 172)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this7,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1);
HXDLIN( 172)			 ::thx::bigint::DecimalImpl _hx_tmp6 = this7->ceilTo((int)0);
HXDLIN( 172)			this->assertDecimalEquals(_hx_tmp6,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),172,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 173)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this8,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1);
HXDLIN( 173)			 ::thx::bigint::DecimalImpl _hx_tmp7 = this8->floorTo((int)0);
HXDLIN( 173)			this->assertDecimalEquals(_hx_tmp7,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),173,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 174)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this9,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1);
HXDLIN( 174)			 ::thx::bigint::DecimalImpl _hx_tmp8 = this9->floorTo((int)0);
HXDLIN( 174)			this->assertDecimalEquals(_hx_tmp8,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),174,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 176)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this10,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 176)			 ::thx::bigint::DecimalImpl _hx_tmp9 = this10->roundTo((int)0);
HXDLIN( 176)			this->assertDecimalEquals(_hx_tmp9,::thx::bigint::Decimals_obj::parse(HX_("1234567890",5b,2e,e3,45)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),176,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 177)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this11,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 177)			 ::thx::bigint::DecimalImpl _hx_tmp10 = this11->roundTo((int)3);
HXDLIN( 177)			this->assertDecimalEquals(_hx_tmp10,::thx::bigint::Decimals_obj::parse(HX_("1234567890.123",9f,22,16,66)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),177,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 178)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this12,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 178)			 ::thx::bigint::DecimalImpl _hx_tmp11 = this12->roundTo((int)5);
HXDLIN( 178)			this->assertDecimalEquals(_hx_tmp11,::thx::bigint::Decimals_obj::parse(HX_("1234567890.12346",e1,75,db,b1)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),178,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 179)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this13,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 179)			 ::thx::bigint::DecimalImpl _hx_tmp12 = this13->roundTo((int)6);
HXDLIN( 179)			this->assertDecimalEquals(_hx_tmp12,::thx::bigint::Decimals_obj::parse(HX_("1234567890.123457",57,ae,2b,ee)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),179,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 181)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this14,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 181)			 ::thx::bigint::DecimalImpl _hx_tmp13 = this14->roundTo((int)0);
HXDLIN( 181)			this->assertDecimalEquals(_hx_tmp13,::thx::bigint::Decimals_obj::parse(HX_("-1234567890",c8,08,fc,ec)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),181,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 182)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this15,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 182)			 ::thx::bigint::DecimalImpl _hx_tmp14 = this15->roundTo((int)3);
HXDLIN( 182)			this->assertDecimalEquals(_hx_tmp14,::thx::bigint::Decimals_obj::parse(HX_("-1234567890.123",8c,37,51,96)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),182,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 183)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this16,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 183)			 ::thx::bigint::DecimalImpl _hx_tmp15 = this16->roundTo((int)5);
HXDLIN( 183)			this->assertDecimalEquals(_hx_tmp15,::thx::bigint::Decimals_obj::parse(HX_("-1234567890.12345",0d,60,b7,b6)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),183,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 184)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this17,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 184)			 ::thx::bigint::DecimalImpl _hx_tmp16 = this17->roundTo((int)6);
HXDLIN( 184)			this->assertDecimalEquals(_hx_tmp16,::thx::bigint::Decimals_obj::parse(HX_("-1234567890.123456",89,ab,bc,29)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),184,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 186)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this18,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 186)			 ::thx::bigint::DecimalImpl _hx_tmp17 = this18->ceilTo((int)0);
HXDLIN( 186)			this->assertDecimalEquals(_hx_tmp17,::thx::bigint::Decimals_obj::parse(HX_("1234567891",5c,2e,e3,45)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),186,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 187)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this19,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 187)			 ::thx::bigint::DecimalImpl _hx_tmp18 = this19->ceilTo((int)3);
HXDLIN( 187)			this->assertDecimalEquals(_hx_tmp18,::thx::bigint::Decimals_obj::parse(HX_("1234567890.124",a0,22,16,66)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),187,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 188)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this20,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 188)			 ::thx::bigint::DecimalImpl _hx_tmp19 = this20->ceilTo((int)5);
HXDLIN( 188)			this->assertDecimalEquals(_hx_tmp19,::thx::bigint::Decimals_obj::parse(HX_("1234567890.12346",e1,75,db,b1)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),188,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 189)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this21,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 189)			 ::thx::bigint::DecimalImpl _hx_tmp20 = this21->ceilTo((int)6);
HXDLIN( 189)			this->assertDecimalEquals(_hx_tmp20,::thx::bigint::Decimals_obj::parse(HX_("1234567890.123457",57,ae,2b,ee)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),189,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 191)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this22,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 191)			 ::thx::bigint::DecimalImpl _hx_tmp21 = this22->ceilTo((int)0);
HXDLIN( 191)			this->assertDecimalEquals(_hx_tmp21,::thx::bigint::Decimals_obj::parse(HX_("-1234567890",c8,08,fc,ec)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),191,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 192)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this23,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 192)			 ::thx::bigint::DecimalImpl _hx_tmp22 = this23->ceilTo((int)3);
HXDLIN( 192)			this->assertDecimalEquals(_hx_tmp22,::thx::bigint::Decimals_obj::parse(HX_("-1234567890.123",8c,37,51,96)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),192,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 193)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this24,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 193)			 ::thx::bigint::DecimalImpl _hx_tmp23 = this24->ceilTo((int)5);
HXDLIN( 193)			this->assertDecimalEquals(_hx_tmp23,::thx::bigint::Decimals_obj::parse(HX_("-1234567890.12345",0d,60,b7,b6)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),193,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 194)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this25,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 194)			 ::thx::bigint::DecimalImpl _hx_tmp24 = this25->ceilTo((int)6);
HXDLIN( 194)			this->assertDecimalEquals(_hx_tmp24,::thx::bigint::Decimals_obj::parse(HX_("-1234567890.123456",89,ab,bc,29)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),194,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 196)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this26,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 196)			 ::thx::bigint::DecimalImpl _hx_tmp25 = this26->floorTo((int)0);
HXDLIN( 196)			this->assertDecimalEquals(_hx_tmp25,::thx::bigint::Decimals_obj::parse(HX_("1234567890",5b,2e,e3,45)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),196,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 197)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this27,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 197)			 ::thx::bigint::DecimalImpl _hx_tmp26 = this27->floorTo((int)3);
HXDLIN( 197)			this->assertDecimalEquals(_hx_tmp26,::thx::bigint::Decimals_obj::parse(HX_("1234567890.123",9f,22,16,66)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),197,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 198)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this28,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 198)			 ::thx::bigint::DecimalImpl _hx_tmp27 = this28->floorTo((int)5);
HXDLIN( 198)			this->assertDecimalEquals(_hx_tmp27,::thx::bigint::Decimals_obj::parse(HX_("1234567890.12345",e0,75,db,b1)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),198,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 199)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this29,"this") = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.1234567890",8e,fd,95,41));
HXDLIN( 199)			 ::thx::bigint::DecimalImpl _hx_tmp28 = this29->floorTo((int)6);
HXDLIN( 199)			this->assertDecimalEquals(_hx_tmp28,::thx::bigint::Decimals_obj::parse(HX_("1234567890.123456",56,ae,2b,ee)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),199,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 201)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this30,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 201)			 ::thx::bigint::DecimalImpl _hx_tmp29 = this30->floorTo((int)0);
HXDLIN( 201)			this->assertDecimalEquals(_hx_tmp29,::thx::bigint::Decimals_obj::parse(HX_("-1234567890",c8,08,fc,ec)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),201,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 202)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this31,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 202)			 ::thx::bigint::DecimalImpl _hx_tmp30 = this31->floorTo((int)3);
HXDLIN( 202)			this->assertDecimalEquals(_hx_tmp30,::thx::bigint::Decimals_obj::parse(HX_("-1234567890.123",8c,37,51,96)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),202,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 203)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this32,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 203)			 ::thx::bigint::DecimalImpl _hx_tmp31 = this32->floorTo((int)5);
HXDLIN( 203)			this->assertDecimalEquals(_hx_tmp31,::thx::bigint::Decimals_obj::parse(HX_("-1234567890.12345",0d,60,b7,b6)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),203,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
HXLINE( 204)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this33,"this") = ::thx::bigint::Decimals_obj::parse(HX_("-1234567890.1234567890",41,10,59,43));
HXDLIN( 204)			 ::thx::bigint::DecimalImpl _hx_tmp32 = this33->floorTo((int)6);
HXDLIN( 204)			this->assertDecimalEquals(_hx_tmp32,::thx::bigint::Decimals_obj::parse(HX_("-1234567890.123456",89,ab,bc,29)),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),204,HX_("thx.TestDecimal",55,03,de,a2),HX_("testRound",9c,36,68,b6)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testRound,(void))

void TestDecimal_obj::testScaleTo(){
            	HX_STACK_FRAME("thx.TestDecimal","testScaleTo",0xd4761dda,"thx.TestDecimal.testScaleTo","thx/TestDecimal.hx",208,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE( 208)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 208)		HX_VARI( Int,_g) = this->x;
HXDLIN( 208)		while((_g1 < _g)){
HXLINE( 208)			++_g1;
HXLINE( 209)			HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(7)->init(0, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("exp",9d,0c,4d,00),HX_("0",30,00,00,00))
            				->setFixed(1,HX_("src",e4,a6,57,00),HX_("0",30,00,00,00))
            				->setFixed(2,HX_("scale",8a,ce,ce,78),(int)0)))->init(1, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("exp",9d,0c,4d,00),HX_("0.00000",72,89,8b,f3))
            				->setFixed(1,HX_("src",e4,a6,57,00),HX_("0",30,00,00,00))
            				->setFixed(2,HX_("scale",8a,ce,ce,78),(int)5)))->init(2, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("exp",9d,0c,4d,00),HX_("0.100",33,01,c9,c1))
            				->setFixed(1,HX_("src",e4,a6,57,00),HX_("0.1",73,94,24,00))
            				->setFixed(2,HX_("scale",8a,ce,ce,78),(int)3)))->init(3, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("exp",9d,0c,4d,00),HX_("0.012",d3,3f,c8,c1))
            				->setFixed(1,HX_("src",e4,a6,57,00),HX_("0.0123456",95,aa,bd,23))
            				->setFixed(2,HX_("scale",8a,ce,ce,78),(int)3)))->init(4, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("exp",9d,0c,4d,00),HX_("1234567890.123",9f,22,16,66))
            				->setFixed(1,HX_("src",e4,a6,57,00),HX_("1234567890.1234567890",8e,fd,95,41))
            				->setFixed(2,HX_("scale",8a,ce,ce,78),(int)3)))->init(5, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("exp",9d,0c,4d,00),HX_("1234567890.1234567890",8e,fd,95,41))
            				->setFixed(1,HX_("src",e4,a6,57,00),HX_("1234567890.1234567890",8e,fd,95,41))
            				->setFixed(2,HX_("scale",8a,ce,ce,78),(int)10)))->init(6, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("exp",9d,0c,4d,00),HX_("1234567890.123456789000",0e,27,3b,51))
            				->setFixed(1,HX_("src",e4,a6,57,00),HX_("1234567890.1234567890",8e,fd,95,41))
            				->setFixed(2,HX_("scale",8a,ce,ce,78),(int)12)));
HXDLIN( 209)			HX_VAR(  ::thx::bigint::DecimalImpl,dec);
HXLINE( 219)			{
HXLINE( 219)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 219)				while((_g2 < tests->length)){
HXLINE( 219)					HX_VARI(  ::Dynamic,test) = tests->__get(_g2);
HXDLIN( 219)					++_g2;
HXLINE( 220)					dec = ::thx::bigint::Decimals_obj::parse( ::Dynamic(test->__Field(HX_("src",e4,a6,57,00),hx::paccDynamic)));
HXLINE( 221)					HX_VARI( Int,decimals) = ( (Int)(test->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) );
HXDLIN( 221)					HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = dec->scaleTo(decimals);
HXDLIN( 221)					::String _hx_tmp = this1->toString();
HXDLIN( 221)					::String _hx_tmp1 = ((((((HX_("expected ",a8,7a,f8,e9) + ( (::String)(test->__Field(HX_("src",e4,a6,57,00),hx::paccDynamic)) )) + HX_(" to be ",f8,9f,00,93)) + ( (::String)(test->__Field(HX_("exp",9d,0c,4d,00),hx::paccDynamic)) )) + HX_(" when scaled to ",45,c5,fd,55)) + ( (Int)(test->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) )) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 221)					HX_VARI_NAME( Int,decimals1,"decimals") = ( (Int)(test->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) );
HXDLIN( 221)					HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this2,"this") = dec->scaleTo(decimals1);
HXDLIN( 221)					::String _hx_tmp2 = this2->toString();
HXDLIN( 221)					::utest::Assert_obj::equals( ::Dynamic(test->__Field(HX_("exp",9d,0c,4d,00),hx::paccDynamic)),_hx_tmp,(_hx_tmp1 + _hx_tmp2),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),221,HX_("thx.TestDecimal",55,03,de,a2),HX_("testScaleTo",73,3c,d0,21)));
HXLINE( 223)					if ((( (::String)(test->__Field(HX_("src",e4,a6,57,00),hx::paccDynamic)) ) == HX_("0",30,00,00,00))) {
HXLINE( 223)						continue;
            					}
HXLINE( 225)					dec = ::thx::bigint::Decimals_obj::parse((HX_("-",2d,00,00,00) + ( (::String)(test->__Field(HX_("src",e4,a6,57,00),hx::paccDynamic)) )));
HXLINE( 226)					::String _hx_tmp3 = (HX_("-",2d,00,00,00) + ( (::String)(test->__Field(HX_("exp",9d,0c,4d,00),hx::paccDynamic)) ));
HXDLIN( 226)					HX_VARI_NAME( Int,decimals2,"decimals") = ( (Int)(test->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) );
HXDLIN( 226)					HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this3,"this") = dec->scaleTo(decimals2);
HXDLIN( 226)					::String _hx_tmp4 = this3->toString();
HXDLIN( 226)					::String _hx_tmp5 = ((((((HX_("expected -",85,d8,72,cf) + ( (::String)(test->__Field(HX_("src",e4,a6,57,00),hx::paccDynamic)) )) + HX_(" to be -",35,59,8b,0d)) + ( (::String)(test->__Field(HX_("exp",9d,0c,4d,00),hx::paccDynamic)) )) + HX_(" when scaled to ",45,c5,fd,55)) + ( (Int)(test->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) )) + HX_(" but got -",1a,42,e9,28));
HXDLIN( 226)					HX_VARI_NAME( Int,decimals3,"decimals") = ( (Int)(test->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) );
HXDLIN( 226)					HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this4,"this") = dec->scaleTo(decimals3);
HXDLIN( 226)					::String _hx_tmp6 = this4->toString();
HXDLIN( 226)					::utest::Assert_obj::equals(_hx_tmp3,_hx_tmp4,(_hx_tmp5 + _hx_tmp6),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),226,HX_("thx.TestDecimal",55,03,de,a2),HX_("testScaleTo",73,3c,d0,21)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testScaleTo,(void))

void TestDecimal_obj::testNegativePow(){
            	HX_STACK_FRAME("thx.TestDecimal","testNegativePow",0x046bb3d8,"thx.TestDecimal.testNegativePow","thx/TestDecimal.hx",231,0xc4d3e24a)
            	HX_STACK_THIS(this)
HXLINE( 231)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 231)		HX_VARI( Int,_g) = this->x;
HXDLIN( 231)		while((_g1 < _g)){
HXLINE( 231)			++_g1;
HXLINE( 232)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)10);
HXDLIN( 232)			 ::thx::bigint::DecimalImpl _hx_tmp = this1->pow((int)-2);
HXDLIN( 232)			Bool _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::equals(_hx_tmp,::thx::bigint::Decimals_obj::fromFloat(((Float)0.01)));
HXDLIN( 232)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimal.hx",df,b9,b8,83),232,HX_("thx.TestDecimal",55,03,de,a2),HX_("testNegativePow",f1,92,7b,24)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimal_obj,testNegativePow,(void))


TestDecimal_obj::TestDecimal_obj()
{
}

hx::Val TestDecimal_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"teardown") ) { return hx::Val( teardown_dyn()); }
		if (HX_FIELD_EQ(inName,"testTrim") ) { return hx::Val( testTrim_dyn()); }
		if (HX_FIELD_EQ(inName,"testInts") ) { return hx::Val( testInts_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testRound") ) { return hx::Val( testRound_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testModulo") ) { return hx::Val( testModulo_dyn()); }
		if (HX_FIELD_EQ(inName,"testFloats") ) { return hx::Val( testFloats_dyn()); }
		if (HX_FIELD_EQ(inName,"testString") ) { return hx::Val( testString_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testScaleTo") ) { return hx::Val( testScaleTo_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"divisionSize") ) { return hx::Val( divisionSize); }
		if (HX_FIELD_EQ(inName,"testToBigInt") ) { return hx::Val( testToBigInt_dyn()); }
		if (HX_FIELD_EQ(inName,"testDivision") ) { return hx::Val( testDivision_dyn()); }
		if (HX_FIELD_EQ(inName,"testMultiply") ) { return hx::Val( testMultiply_dyn()); }
		if (HX_FIELD_EQ(inName,"testEquality") ) { return hx::Val( testEquality_dyn()); }
		if (HX_FIELD_EQ(inName,"testAddition") ) { return hx::Val( testAddition_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testStringExp") ) { return hx::Val( testStringExp_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testComparison") ) { return hx::Val( testComparison_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testSubtraction") ) { return hx::Val( testSubtraction_dyn()); }
		if (HX_FIELD_EQ(inName,"testNegativePow") ) { return hx::Val( testNegativePow_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"assertDecimalEquals") ) { return hx::Val( assertDecimalEquals_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestDecimal_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"divisionSize") ) { divisionSize=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestDecimal_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("divisionSize","\x8e","\xc4","\x2c","\x60"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestDecimal_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestDecimal_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(TestDecimal_obj,divisionSize),HX_HCSTRING("divisionSize","\x8e","\xc4","\x2c","\x60")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestDecimal_obj_sStaticStorageInfo = 0;
#endif

static ::String TestDecimal_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("divisionSize","\x8e","\xc4","\x2c","\x60"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("teardown","\x04","\xaa","\x8d","\x01"),
	HX_HCSTRING("testToBigInt","\x5c","\xd2","\x9e","\x82"),
	HX_HCSTRING("testTrim","\x54","\x22","\x36","\x50"),
	HX_HCSTRING("testStringExp","\x9a","\xb1","\xed","\xfa"),
	HX_HCSTRING("testModulo","\xa8","\x7a","\xc7","\xd9"),
	HX_HCSTRING("testDivision","\x9f","\x83","\x8c","\xc8"),
	HX_HCSTRING("testMultiply","\x96","\x08","\x94","\x0d"),
	HX_HCSTRING("testInts","\x16","\xca","\xed","\x48"),
	HX_HCSTRING("testFloats","\x49","\x69","\x4a","\x5a"),
	HX_HCSTRING("testEquality","\x6c","\x31","\x3a","\x48"),
	HX_HCSTRING("testAddition","\x6e","\x93","\x46","\x1b"),
	HX_HCSTRING("testSubtraction","\x02","\xea","\xdc","\x60"),
	HX_HCSTRING("testComparison","\x3b","\xc2","\x55","\xb1"),
	HX_HCSTRING("testString","\xc3","\x6e","\x24","\x2a"),
	HX_HCSTRING("assertDecimalEquals","\x0a","\x1f","\xaa","\x4d"),
	HX_HCSTRING("testRound","\x9c","\x36","\x68","\xb6"),
	HX_HCSTRING("testScaleTo","\x73","\x3c","\xd0","\x21"),
	HX_HCSTRING("testNegativePow","\xf1","\x92","\x7b","\x24"),
	::String(null()) };

static void TestDecimal_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestDecimal_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestDecimal_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestDecimal_obj::__mClass,"__mClass");
};

#endif

hx::Class TestDecimal_obj::__mClass;

void TestDecimal_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestDecimal","\x55","\x03","\xde","\xa2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestDecimal_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestDecimal_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestDecimal_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestDecimal_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDecimal_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDecimal_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
