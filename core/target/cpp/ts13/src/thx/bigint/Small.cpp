// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_bigint_Big
#include <thx/bigint/Big.h>
#endif
#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Bigs
#include <thx/bigint/Bigs.h>
#endif
#ifndef INCLUDED_thx_bigint_Small
#include <thx/bigint/Small.h>
#endif

namespace thx{
namespace bigint{

void Small_obj::__construct(Int value){
            	HX_STACK_FRAME("thx.bigint.Small","new",0x1440ef44,"thx.bigint.Small.new","thx/bigint/Small.hx",14,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  15)		this->sign = (value < (int)0);
HXLINE(  16)		this->value = value;
HXLINE(  17)		this->isSmall = true;
            	}

Dynamic Small_obj::__CreateEmpty() { return new Small_obj; }

hx::ObjectPtr< Small_obj > Small_obj::__new(Int value)
{
	hx::ObjectPtr< Small_obj > _hx_result = new Small_obj();
	_hx_result->__construct(value);
	return _hx_result;
}

Dynamic Small_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Small_obj > _hx_result = new Small_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::thx::bigint::BigIntImpl_obj _hx_thx_bigint_Small__hx_thx_bigint_BigIntImpl= {
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Small_obj::abs,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::add,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::subtract,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::divide,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::multiply,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::modulo,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Small_obj::random,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Small_obj::negate,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Small_obj::next,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Small_obj::prev,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::pow,
	( ::Dynamic (hx::Object::*)(Int))&::thx::bigint::Small_obj::shiftLeft,
	( ::Dynamic (hx::Object::*)(Int))&::thx::bigint::Small_obj::shiftRight,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Small_obj::square,
	( Bool (hx::Object::*)())&::thx::bigint::Small_obj::isEven,
	( Bool (hx::Object::*)())&::thx::bigint::Small_obj::isOdd,
	( Bool (hx::Object::*)())&::thx::bigint::Small_obj::isUnit,
	( Bool (hx::Object::*)())&::thx::bigint::Small_obj::isZero,
	( Int (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::compareTo,
	( Int (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::compareToAbs,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Small_obj::_hx_not,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::_hx_and,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::_hx_or,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::_hx_xor,
	( Float (hx::Object::*)())&::thx::bigint::Small_obj::toFloat,
	( Int (hx::Object::*)())&::thx::bigint::Small_obj::toInt,
	( ::String (hx::Object::*)())&::thx::bigint::Small_obj::toString,
	( ::String (hx::Object::*)(Int))&::thx::bigint::Small_obj::toStringWithBase,
	(  ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Small_obj::divMod,
};

void *Small_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xbdacfd62: return &_hx_thx_bigint_Small__hx_thx_bigint_BigIntImpl;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic Small_obj::add(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Small","add",0x14371105,"thx.bigint.Small.add","thx/bigint/Small.hx",20,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  21)		Bool _hx_tmp = this->isZero();
HXDLIN(  21)		if (_hx_tmp) {
HXLINE(  22)			return that;
            		}
HXLINE(  23)		Bool _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::isZero(that);
HXDLIN(  23)		if (_hx_tmp1) {
HXLINE(  24)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  25)		Bool _hx_tmp2 = (this->sign != ( (Bool)(that->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) ));
HXDLIN(  25)		if (_hx_tmp2) {
HXLINE(  26)			::Dynamic _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::negate(that);
HXDLIN(  26)			return this->subtract(_hx_tmp3);
            		}
HXLINE(  27)		Bool _hx_tmp4 = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN(  27)		if (_hx_tmp4) {
HXLINE(  27)			return this->addSmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE(  27)			return this->addBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXDLIN(  27)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,add,return )

::Dynamic Small_obj::addSmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Small","addSmall",0x67ec7d82,"thx.bigint.Small.addSmall","thx/bigint/Small.hx",32,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE(  32)		Bool _hx_tmp = ::thx::bigint::Bigs_obj::canAdd(this->value,small->value);
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  37)			return  ::thx::bigint::Small_obj::__new((this->value + small->value));
            		}
            		else {
HXLINE(  40)			HX_VARI( Int,v) = small->value;
HXDLIN(  40)			Int _hx_tmp1;
HXDLIN(  40)			if ((v < (int)0)) {
HXLINE(  40)				_hx_tmp1 = -(v);
            			}
            			else {
HXLINE(  40)				_hx_tmp1 = v;
            			}
HXDLIN(  40)			::Array< Int > _hx_tmp2 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp1);
HXLINE(  41)			HX_VARI_NAME( Int,v1,"v") = this->value;
HXDLIN(  41)			Int _hx_tmp3;
HXDLIN(  41)			if ((v1 < (int)0)) {
HXLINE(  41)				_hx_tmp3 = -(v1);
            			}
            			else {
HXLINE(  41)				_hx_tmp3 = v1;
            			}
HXLINE(  39)			::Array< Int > _hx_tmp4 = ::thx::bigint::Bigs_obj::addSmall(_hx_tmp2,_hx_tmp3);
HXDLIN(  39)			return  ::thx::bigint::Big_obj::__new(_hx_tmp4,this->sign);
            		}
HXLINE(  32)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,addSmall,return )

::Dynamic Small_obj::addBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Small","addBig",0x684a10bb,"thx.bigint.Small.addBig","thx/bigint/Small.hx",48,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE(  49)		HX_VARI( Int,v) = this->value;
HXDLIN(  49)		Int _hx_tmp;
HXDLIN(  49)		if ((v < (int)0)) {
HXLINE(  49)			_hx_tmp = -(v);
            		}
            		else {
HXLINE(  49)			_hx_tmp = v;
            		}
HXDLIN(  49)		::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::addSmall(big->value,_hx_tmp);
HXLINE(  48)		return  ::thx::bigint::Big_obj::__new(_hx_tmp1,this->sign);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,addBig,return )

::Dynamic Small_obj::subtract(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Small","subtract",0x6735dbb0,"thx.bigint.Small.subtract","thx/bigint/Small.hx",53,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  54)		Bool _hx_tmp = this->isZero();
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  55)			return ::thx::bigint::BigIntImpl_obj::negate(that);
            		}
HXLINE(  56)		Bool _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::isZero(that);
HXDLIN(  56)		if (_hx_tmp1) {
HXLINE(  57)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  58)		Bool _hx_tmp2 = (this->sign != ( (Bool)(that->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) ));
HXDLIN(  58)		if (_hx_tmp2) {
HXLINE(  59)			::Dynamic _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::negate(that);
HXDLIN(  59)			return this->add(_hx_tmp3);
            		}
HXLINE(  60)		Bool _hx_tmp4 = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN(  60)		if (_hx_tmp4) {
HXLINE(  60)			return this->subtractSmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE(  60)			return this->subtractBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXDLIN(  60)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,subtract,return )

::Dynamic Small_obj::subtractSmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Small","subtractSmall",0xf21826f7,"thx.bigint.Small.subtractSmall","thx/bigint/Small.hx",64,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE(  64)		return  ::thx::bigint::Small_obj::__new((this->value - small->value));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,subtractSmall,return )

::Dynamic Small_obj::subtractBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Small","subtractBig",0x7e2d02f0,"thx.bigint.Small.subtractBig","thx/bigint/Small.hx",66,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE(  67)		Int _hx_tmp = big->compareToAbsSmall(hx::ObjectPtr<OBJ_>(this));
HXDLIN(  67)		if ((_hx_tmp < (int)0)) {
HXLINE(  68)			Int _hx_tmp1 = this->value;
HXDLIN(  68)			Int _hx_tmp2 = big->toInt();
HXDLIN(  68)			return  ::thx::bigint::Small_obj::__new((_hx_tmp1 - _hx_tmp2));
            		}
HXLINE(  69)		HX_VARI( Int,v) = this->value;
HXDLIN(  69)		Int _hx_tmp3;
HXDLIN(  69)		if ((v < (int)0)) {
HXLINE(  69)			_hx_tmp3 = -(v);
            		}
            		else {
HXLINE(  69)			_hx_tmp3 = v;
            		}
HXDLIN(  69)		Bool _hx_tmp4 = (this->value >= (int)0);
HXDLIN(  69)		return ::thx::bigint::Bigs_obj::subtractSmall(big->value,_hx_tmp3,_hx_tmp4);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,subtractBig,return )

::Dynamic Small_obj::divide(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Small","divide",0x88607715,"thx.bigint.Small.divide","thx/bigint/Small.hx",73,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  73)		return  ::Dynamic(this->divMod(that)->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,divide,return )

 ::Dynamic Small_obj::divMod(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Small","divMod",0x884b418d,"thx.bigint.Small.divMod","thx/bigint/Small.hx",75,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  76)		Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(that);
HXDLIN(  76)		if (_hx_tmp) {
HXLINE(  77)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("division by zero",1e,d4,91,da),null(),hx::SourceInfo(HX_("Small.hx",77,84,69,7f),77,HX_("thx.bigint.Small",52,3d,c7,5d),HX_("divMod",f1,f9,fc,be))));
            		}
HXLINE(  78)		Bool _hx_tmp1 = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN(  78)		if (_hx_tmp1) {
HXLINE(  78)			return this->divModSmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE(  78)			return this->divModBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXDLIN(  78)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,divMod,return )

 ::Dynamic Small_obj::divModSmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Small","divModSmall",0x2d335ffa,"thx.bigint.Small.divModSmall","thx/bigint/Small.hx",82,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE(  83)		HX_VARI( Float,value) = ((Float)this->value / (Float)small->value);
HXDLIN(  83)		Int _hx_tmp;
HXDLIN(  83)		if ((value < ((Float)0.0))) {
HXLINE(  83)			_hx_tmp = ::Math_obj::ceil(value);
            		}
            		else {
HXLINE(  83)			_hx_tmp = ::Math_obj::floor(value);
            		}
HXLINE(  82)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("quotient",ab,68,60,b2), ::thx::bigint::Small_obj::__new(_hx_tmp))
            			->setFixed(1,HX_("remainder",e5,f3,bd,bb), ::thx::bigint::Small_obj::__new(hx::Mod(this->value,small->value))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,divModSmall,return )

 ::Dynamic Small_obj::divModBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Small","divModBig",0xccd8e533,"thx.bigint.Small.divModBig","thx/bigint/Small.hx",88,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE(  88)		HX_VARI( Int,v) = this->value;
HXDLIN(  88)		Int _hx_tmp;
HXDLIN(  88)		if ((v < (int)0)) {
HXLINE(  88)			_hx_tmp = -(v);
            		}
            		else {
HXLINE(  88)			_hx_tmp = v;
            		}
HXDLIN(  88)		::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp);
HXDLIN(  88)		Bool _hx_tmp2 = (this->value < (int)0);
HXDLIN(  88)		return  ::thx::bigint::Big_obj::__new(_hx_tmp1,_hx_tmp2)->divModBig(big);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,divModBig,return )

::Dynamic Small_obj::multiply(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Small","multiply",0x09b148c0,"thx.bigint.Small.multiply","thx/bigint/Small.hx",91,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  91)		Bool _hx_tmp = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN(  91)		if (_hx_tmp) {
HXLINE(  91)			return this->multiplySmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE(  91)			return this->multiplyBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXDLIN(  91)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,multiply,return )

::Dynamic Small_obj::multiplySmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Small","multiplySmall",0xbdc75fe7,"thx.bigint.Small.multiplySmall","thx/bigint/Small.hx",93,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE(  95)		if (::thx::bigint::Bigs_obj::canMultiply(this->value,small->value)) {
HXLINE(  99)			return  ::thx::bigint::Small_obj::__new((this->value * small->value));
            		}
HXLINE( 100)		HX_VARI( Int,v) = small->value;
HXDLIN( 100)		Int _hx_tmp;
HXDLIN( 100)		if ((v < (int)0)) {
HXLINE( 100)			_hx_tmp = -(v);
            		}
            		else {
HXLINE( 100)			_hx_tmp = v;
            		}
HXDLIN( 100)		HX_VARI( ::Array< Int >,arr) = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp);
HXLINE( 101)		HX_VARI_NAME( Int,v1,"v") = this->value;
HXDLIN( 101)		HX_VAR( Int,abs);
HXDLIN( 101)		if ((v1 < (int)0)) {
HXLINE( 101)			abs = -(v1);
            		}
            		else {
HXLINE( 101)			abs = v1;
            		}
HXLINE( 102)		if ((abs < (int)10000000)) {
HXLINE( 103)			::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::multiplySmall(arr,abs);
HXDLIN( 103)			return  ::thx::bigint::Big_obj::__new(_hx_tmp1,(this->sign != small->sign));
            		}
            		else {
HXLINE( 105)			::Array< Int > _hx_tmp2 = ::thx::bigint::Bigs_obj::smallToArray(abs);
HXDLIN( 105)			::Array< Int > _hx_tmp3 = ::thx::bigint::Bigs_obj::multiplyLong(arr,_hx_tmp2);
HXDLIN( 105)			return  ::thx::bigint::Big_obj::__new(_hx_tmp3,(this->sign != small->sign));
            		}
HXLINE( 102)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,multiplySmall,return )

::Dynamic Small_obj::multiplyBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Small","multiplyBig",0x71671fe0,"thx.bigint.Small.multiplyBig","thx/bigint/Small.hx",110,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE( 110)		HX_VARI( Int,v) = this->value;
HXDLIN( 110)		Int _hx_tmp;
HXDLIN( 110)		if ((v < (int)0)) {
HXLINE( 110)			_hx_tmp = -(v);
            		}
            		else {
HXLINE( 110)			_hx_tmp = v;
            		}
HXDLIN( 110)		::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp);
HXDLIN( 110)		::Array< Int > _hx_tmp2 = ::thx::bigint::Bigs_obj::multiplyLong(big->value,_hx_tmp1);
HXDLIN( 110)		return  ::thx::bigint::Big_obj::__new(_hx_tmp2,(this->sign != big->sign));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,multiplyBig,return )

::Dynamic Small_obj::modulo(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Small","modulo",0x8a217c52,"thx.bigint.Small.modulo","thx/bigint/Small.hx",114,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 114)		return  ::Dynamic(this->divMod(that)->__Field(HX_("remainder",e5,f3,bd,bb),hx::paccDynamic));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,modulo,return )

::Dynamic Small_obj::random(){
            	HX_STACK_FRAME("thx.bigint.Small","random",0x80dd699f,"thx.bigint.Small.random","thx/bigint/Small.hx",117,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 117)		Float _hx_tmp = ::Math_obj::random();
HXDLIN( 117)		Float _hx_tmp1 = (_hx_tmp * this->value);
HXDLIN( 117)		Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 117)		return ::thx::bigint::Bigs_obj::fromInt(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,random,return )

::Dynamic Small_obj::abs(){
            	HX_STACK_FRAME("thx.bigint.Small","abs",0x14370f56,"thx.bigint.Small.abs","thx/bigint/Small.hx",120,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 120)		HX_VARI( Int,v) = this->value;
HXDLIN( 120)		Int _hx_tmp;
HXDLIN( 120)		if ((v < (int)0)) {
HXLINE( 120)			_hx_tmp = -(v);
            		}
            		else {
HXLINE( 120)			_hx_tmp = v;
            		}
HXDLIN( 120)		return  ::thx::bigint::Small_obj::__new(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,abs,return )

::Dynamic Small_obj::negate(){
            	HX_STACK_FRAME("thx.bigint.Small","negate",0x3067895e,"thx.bigint.Small.negate","thx/bigint/Small.hx",123,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 123)		return  ::thx::bigint::Small_obj::__new(-(this->value));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,negate,return )

::Dynamic Small_obj::next(){
            	HX_STACK_FRAME("thx.bigint.Small","next",0xa4906d8f,"thx.bigint.Small.next","thx/bigint/Small.hx",126,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 126)		return this->addSmall(::thx::bigint::Small_obj::one);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,next,return )

::Dynamic Small_obj::prev(){
            	HX_STACK_FRAME("thx.bigint.Small","prev",0xa5eca78f,"thx.bigint.Small.prev","thx/bigint/Small.hx",129,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 129)		return this->addSmall(::thx::bigint::Small_obj::negativeOne);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,prev,return )

::Dynamic Small_obj::pow(::Dynamic exp){
            	HX_STACK_FRAME("thx.bigint.Small","pow",0x14427c7c,"thx.bigint.Small.pow","thx/bigint/Small.hx",131,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(exp,"exp")
HXLINE( 132)		Bool _hx_tmp = this->isZero();
HXDLIN( 132)		if (_hx_tmp) {
HXLINE( 133)			Bool _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::isZero(exp);
HXDLIN( 133)			if (_hx_tmp1) {
HXLINE( 133)				return ::thx::bigint::Small_obj::one;
            			}
            			else {
HXLINE( 133)				return hx::ObjectPtr<OBJ_>(this);
            			}
            		}
HXLINE( 134)		Bool _hx_tmp2 = this->isUnit();
HXDLIN( 134)		if (_hx_tmp2) {
HXLINE( 135)			Bool _hx_tmp3 = this->sign;
HXDLIN( 135)			if (_hx_tmp3) {
HXLINE( 136)				Bool _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::isEven(exp);
HXDLIN( 136)				if (_hx_tmp4) {
HXLINE( 135)					return ::thx::bigint::Small_obj::one;
            				}
            				else {
HXLINE( 135)					return ::thx::bigint::Small_obj::negativeOne;
            				}
            			}
            			else {
HXLINE( 135)				return ::thx::bigint::Small_obj::one;
            			}
            		}
HXLINE( 138)		if (( (Bool)(exp->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) )) {
HXLINE( 139)			return ::thx::bigint::Small_obj::zero;
            		}
HXLINE( 140)		Bool _hx_tmp5 = !(( (Bool)(exp->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) ));
HXDLIN( 140)		if (_hx_tmp5) {
HXLINE( 141)			::String _hx_tmp6 = ::Std_obj::string(exp);
HXDLIN( 141)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("The exponent ",42,2a,0c,af) + _hx_tmp6) + HX_(" is too large.",75,c8,74,82)),null(),hx::SourceInfo(HX_("Small.hx",77,84,69,7f),141,HX_("thx.bigint.Small",52,3d,c7,5d),HX_("pow",98,5d,55,00))));
            		}
HXLINE( 142)		HX_VARI( Int,b) = ( ( ::thx::bigint::Small)(exp) )->value;
HXLINE( 143)		Bool _hx_tmp7 = ::thx::bigint::Bigs_obj::canPower(this->value,b);
HXDLIN( 143)		if (_hx_tmp7) {
HXLINE( 144)			Float _hx_tmp8 = ::Math_obj::pow(this->value,b);
HXDLIN( 144)			Int _hx_tmp9 = ::Std_obj::_hx_int(_hx_tmp8);
HXDLIN( 144)			return  ::thx::bigint::Small_obj::__new(_hx_tmp9);
            		}
HXLINE( 145)		HX_VARI( Int,v) = this->value;
HXDLIN( 145)		Int _hx_tmp10;
HXDLIN( 145)		if ((v < (int)0)) {
HXLINE( 145)			_hx_tmp10 = -(v);
            		}
            		else {
HXLINE( 145)			_hx_tmp10 = v;
            		}
HXDLIN( 145)		::Array< Int > _hx_tmp11 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp10);
HXDLIN( 145)		return  ::thx::bigint::Big_obj::__new(_hx_tmp11,this->sign)->pow(exp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,pow,return )

::Dynamic Small_obj::shiftLeft(Int n){
            	HX_STACK_FRAME("thx.bigint.Small","shiftLeft",0xa35eeb8d,"thx.bigint.Small.shiftLeft","thx/bigint/Small.hx",148,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(n,"n")
HXLINE( 149)		if ((n < (int)0)) {
HXLINE( 150)			return this->shiftRight(-(n));
            		}
HXLINE( 151)		Int _hx_tmp;
HXDLIN( 151)		if ((n < (int)0)) {
HXLINE( 151)			_hx_tmp = -(n);
            		}
            		else {
HXLINE( 151)			_hx_tmp = n;
            		}
HXDLIN( 151)		if ((_hx_tmp > (int)10000000)) {
HXLINE( 152)			::Dynamic _hx_tmp1 = ::thx::bigint::Bigs_obj::fromInt(n);
HXDLIN( 152)			::Dynamic _hx_tmp2 = ::thx::bigint::Small_obj::two->pow(_hx_tmp1);
HXDLIN( 152)			return this->multiply(_hx_tmp2);
            		}
HXLINE( 154)		HX_VARI( ::Dynamic,result) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 155)		while((n >= ::thx::bigint::Bigs_obj::powers2Length)){
HXLINE( 156)			result = ::thx::bigint::BigIntImpl_obj::multiply(result,::thx::bigint::Bigs_obj::bigHighestPower2);
HXLINE( 157)			hx::SubEq(n,(::thx::bigint::Bigs_obj::powers2Length - (int)1));
            		}
HXLINE( 159)		return ::thx::bigint::BigIntImpl_obj::multiply(result,::thx::bigint::Bigs_obj::bigPowersOfTwo->__get(n));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,shiftLeft,return )

::Dynamic Small_obj::shiftRight(Int n){
            	HX_STACK_FRAME("thx.bigint.Small","shiftRight",0xc6bc3d96,"thx.bigint.Small.shiftRight","thx/bigint/Small.hx",162,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(n,"n")
HXLINE( 163)		if ((n < (int)0)) {
HXLINE( 164)			return this->shiftLeft(-(n));
            		}
HXLINE( 165)		HX_VAR(  ::Dynamic,remQuo);
HXLINE( 166)		Int _hx_tmp;
HXDLIN( 166)		if ((n < (int)0)) {
HXLINE( 166)			_hx_tmp = -(n);
            		}
            		else {
HXLINE( 166)			_hx_tmp = n;
            		}
HXDLIN( 166)		if ((_hx_tmp > (int)10000000)) {
HXLINE( 167)			::Dynamic _hx_tmp1 = ::thx::bigint::Bigs_obj::fromInt(n);
HXDLIN( 167)			::Dynamic _hx_tmp2 = ::thx::bigint::Small_obj::two->pow(_hx_tmp1);
HXDLIN( 167)			remQuo = this->divMod(_hx_tmp2);
HXLINE( 168)			Bool _hx_tmp3 = ( (Bool)( ::Dynamic(remQuo->__Field(HX_("remainder",e5,f3,bd,bb),hx::paccDynamic))->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 168)			if (_hx_tmp3) {
HXLINE( 168)				return ::thx::bigint::BigIntImpl_obj::prev( ::Dynamic(remQuo->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic)));
            			}
            			else {
HXLINE( 168)				return  ::Dynamic(remQuo->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic));
            			}
            		}
HXLINE( 170)		HX_VARI( ::Dynamic,result) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 171)		while((n >= ::thx::bigint::Bigs_obj::powers2Length)){
HXLINE( 172)			Bool _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::isZero(result);
HXDLIN( 172)			if (_hx_tmp4) {
HXLINE( 173)				return result;
            			}
HXLINE( 174)			remQuo = ::thx::bigint::BigIntImpl_obj::divMod(result,::thx::bigint::Bigs_obj::bigHighestPower2);
HXLINE( 175)			Bool _hx_tmp5 = ( (Bool)( ::Dynamic(remQuo->__Field(HX_("remainder",e5,f3,bd,bb),hx::paccDynamic))->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 175)			if (_hx_tmp5) {
HXLINE( 175)				result = ::thx::bigint::BigIntImpl_obj::prev( ::Dynamic(remQuo->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic)));
            			}
            			else {
HXLINE( 175)				result =  ::Dynamic(remQuo->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic));
            			}
HXLINE( 176)			hx::SubEq(n,(::thx::bigint::Bigs_obj::powers2Length - (int)1));
            		}
HXLINE( 178)		remQuo = ::thx::bigint::BigIntImpl_obj::divMod(result,::thx::bigint::Bigs_obj::bigPowersOfTwo->__get(n));
HXLINE( 179)		Bool _hx_tmp6 = ( (Bool)( ::Dynamic(remQuo->__Field(HX_("remainder",e5,f3,bd,bb),hx::paccDynamic))->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 179)		if (_hx_tmp6) {
HXLINE( 179)			return ::thx::bigint::BigIntImpl_obj::prev( ::Dynamic(remQuo->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic)));
            		}
            		else {
HXLINE( 179)			return  ::Dynamic(remQuo->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic));
            		}
HXDLIN( 179)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,shiftRight,return )

::Dynamic Small_obj::square(){
            	HX_STACK_FRAME("thx.bigint.Small","square",0x22404839,"thx.bigint.Small.square","thx/bigint/Small.hx",182,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 184)		if (::thx::bigint::Bigs_obj::canMultiply(this->value,this->value)) {
HXLINE( 188)			return  ::thx::bigint::Small_obj::__new((this->value * this->value));
            		}
HXLINE( 189)		HX_VARI( Int,v) = this->value;
HXDLIN( 189)		Int _hx_tmp;
HXDLIN( 189)		if ((v < (int)0)) {
HXLINE( 189)			_hx_tmp = -(v);
            		}
            		else {
HXLINE( 189)			_hx_tmp = v;
            		}
HXDLIN( 189)		::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp);
HXDLIN( 189)		::Array< Int > _hx_tmp2 = ::thx::bigint::Bigs_obj::square(_hx_tmp1);
HXDLIN( 189)		return  ::thx::bigint::Big_obj::__new(_hx_tmp2,false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,square,return )

Bool Small_obj::isEven(){
            	HX_STACK_FRAME("thx.bigint.Small","isEven",0x29d17bc0,"thx.bigint.Small.isEven","thx/bigint/Small.hx",193,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 193)		return (((int)this->value & (int)(int)1) == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,isEven,return )

Bool Small_obj::isOdd(){
            	HX_STACK_FRAME("thx.bigint.Small","isOdd",0x81f05bc9,"thx.bigint.Small.isOdd","thx/bigint/Small.hx",196,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 196)		return (((int)this->value & (int)(int)1) == (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,isOdd,return )

Bool Small_obj::isZero(){
            	HX_STACK_FRAME("thx.bigint.Small","isZero",0x37a61bce,"thx.bigint.Small.isZero","thx/bigint/Small.hx",199,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 199)		return (this->value == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,isZero,return )

Bool Small_obj::isUnit(){
            	HX_STACK_FRAME("thx.bigint.Small","isUnit",0x345ed72a,"thx.bigint.Small.isUnit","thx/bigint/Small.hx",202,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 202)		HX_VARI( Int,v) = this->value;
HXDLIN( 202)		Int _hx_tmp;
HXDLIN( 202)		if ((v < (int)0)) {
HXLINE( 202)			_hx_tmp = -(v);
            		}
            		else {
HXLINE( 202)			_hx_tmp = v;
            		}
HXDLIN( 202)		return (_hx_tmp == (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,isUnit,return )

Int Small_obj::compareTo(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Small","compareTo",0xd311f764,"thx.bigint.Small.compareTo","thx/bigint/Small.hx",204,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 205)		if ((this->sign != ( (Bool)(that->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) ))) {
HXLINE( 206)			if (this->sign) {
HXLINE( 206)				return (int)-1;
            			}
            			else {
HXLINE( 206)				return (int)1;
            			}
            		}
HXLINE( 207)		Bool _hx_tmp = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN( 207)		if (_hx_tmp) {
HXLINE( 207)			return this->compareToSmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE( 207)			return this->compareToBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXDLIN( 207)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,compareTo,return )

Int Small_obj::compareToSmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Small","compareToSmall",0xa3b71ec3,"thx.bigint.Small.compareToSmall","thx/bigint/Small.hx",211,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE( 211)		return (this->value - small->value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,compareToSmall,return )

Int Small_obj::compareToBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Small","compareToBig",0x338e2fbc,"thx.bigint.Small.compareToBig","thx/bigint/Small.hx",214,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE( 214)		HX_VARI( Int,v) = this->value;
HXDLIN( 214)		Int _hx_tmp;
HXDLIN( 214)		if ((v < (int)0)) {
HXLINE( 214)			_hx_tmp = -(v);
            		}
            		else {
HXLINE( 214)			_hx_tmp = v;
            		}
HXDLIN( 214)		::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp);
HXDLIN( 214)		Int _hx_tmp2 = ::thx::bigint::Bigs_obj::compareToAbs(_hx_tmp1,big->value);
HXDLIN( 214)		Int _hx_tmp3;
HXDLIN( 214)		if (this->sign) {
HXLINE( 214)			_hx_tmp3 = (int)-1;
            		}
            		else {
HXLINE( 214)			_hx_tmp3 = (int)1;
            		}
HXDLIN( 214)		return (_hx_tmp2 * _hx_tmp3);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,compareToBig,return )

Int Small_obj::compareToAbs(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Small","compareToAbs",0x338d676e,"thx.bigint.Small.compareToAbs","thx/bigint/Small.hx",217,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 217)		Bool _hx_tmp = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN( 217)		if (_hx_tmp) {
HXLINE( 218)			return this->compareToAbsSmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE( 220)			return this->compareToAbsBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXLINE( 217)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,compareToAbs,return )

Int Small_obj::compareToAbsSmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Small","compareToAbsSmall",0x9d574a79,"thx.bigint.Small.compareToAbsSmall","thx/bigint/Small.hx",224,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE( 224)		HX_VARI( Int,v) = this->value;
HXDLIN( 224)		HX_VAR( Int,a);
HXDLIN( 224)		if ((v < (int)0)) {
HXLINE( 224)			a = -(v);
            		}
            		else {
HXLINE( 224)			a = v;
            		}
HXDLIN( 224)		HX_VARI_NAME( Int,v1,"v") = small->value;
HXDLIN( 224)		HX_VAR( Int,b);
HXDLIN( 224)		if ((v1 < (int)0)) {
HXLINE( 224)			b = -(v1);
            		}
            		else {
HXLINE( 224)			b = v1;
            		}
HXDLIN( 224)		return (a - b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,compareToAbsSmall,return )

Int Small_obj::compareToAbsBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Small","compareToAbsBig",0x2074e1f2,"thx.bigint.Small.compareToAbsBig","thx/bigint/Small.hx",227,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE( 227)		HX_VARI( Int,v) = this->value;
HXDLIN( 227)		Int _hx_tmp;
HXDLIN( 227)		if ((v < (int)0)) {
HXLINE( 227)			_hx_tmp = -(v);
            		}
            		else {
HXLINE( 227)			_hx_tmp = v;
            		}
HXDLIN( 227)		::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp);
HXDLIN( 227)		return ::thx::bigint::Bigs_obj::compareToAbs(_hx_tmp1,big->value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,compareToAbsBig,return )

::Dynamic Small_obj::_hx_not(){
            	HX_STACK_FRAME("thx.bigint.Small","not",0x1440f7f7,"thx.bigint.Small.not","thx/bigint/Small.hx",230,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 230)		return ::thx::bigint::BigIntImpl_obj::prev(this->negate());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,_hx_not,return )

::Dynamic Small_obj::_hx_and(::Dynamic that){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.bigint.Small","and",0x143719bb,"thx.bigint.Small.and","thx/bigint/Small.hx",233,0x5b1536cc)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 233)			return ((int)a & (int)b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.bigint.Small","and",0x143719bb,"thx.bigint.Small.and","thx/bigint/Small.hx",233,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 233)		return ::thx::bigint::Bigs_obj::bitwise(hx::ObjectPtr<OBJ_>(this),that, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,_hx_and,return )

::Dynamic Small_obj::_hx_or(::Dynamic that){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.bigint.Small","or",0xc0f3aabf,"thx.bigint.Small.or","thx/bigint/Small.hx",236,0x5b1536cc)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 236)			return ((int)a | (int)b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.bigint.Small","or",0xc0f3aabf,"thx.bigint.Small.or","thx/bigint/Small.hx",236,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 236)		return ::thx::bigint::Bigs_obj::bitwise(hx::ObjectPtr<OBJ_>(this),that, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,_hx_or,return )

::Dynamic Small_obj::_hx_xor(::Dynamic that){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.bigint.Small","xor",0x14488e7f,"thx.bigint.Small.xor","thx/bigint/Small.hx",239,0x5b1536cc)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 239)			return ((int)a ^ (int)b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.bigint.Small","xor",0x14488e7f,"thx.bigint.Small.xor","thx/bigint/Small.hx",239,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 239)		return ::thx::bigint::Bigs_obj::bitwise(hx::ObjectPtr<OBJ_>(this),that, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,_hx_xor,return )

Float Small_obj::toFloat(){
            	HX_STACK_FRAME("thx.bigint.Small","toFloat",0x2a4b7305,"thx.bigint.Small.toFloat","thx/bigint/Small.hx",242,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 242)		return this->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,toFloat,return )

Int Small_obj::toInt(){
            	HX_STACK_FRAME("thx.bigint.Small","toInt",0xd4af5e18,"thx.bigint.Small.toInt","thx/bigint/Small.hx",245,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 245)		return this->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,toInt,return )

::String Small_obj::toString(){
            	HX_STACK_FRAME("thx.bigint.Small","toString",0xa7933748,"thx.bigint.Small.toString","thx/bigint/Small.hx",248,0x5b1536cc)
            	HX_STACK_THIS(this)
HXLINE( 248)		return (HX_("",00,00,00,00) + this->value);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Small_obj,toString,return )

::String Small_obj::toStringWithBase(Int base){
            	HX_STACK_FRAME("thx.bigint.Small","toStringWithBase",0x1176809f,"thx.bigint.Small.toStringWithBase","thx/bigint/Small.hx",251,0x5b1536cc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(base,"base")
HXLINE( 251)		return ::thx::Ints_obj::toString(this->value,base);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Small_obj,toStringWithBase,return )

 ::thx::bigint::Small Small_obj::zero;

 ::thx::bigint::Small Small_obj::one;

 ::thx::bigint::Small Small_obj::two;

 ::thx::bigint::Small Small_obj::ten;

 ::thx::bigint::Small Small_obj::negativeOne;


Small_obj::Small_obj()
{
}

hx::Val Small_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"or") ) { return hx::Val( _hx_or_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"abs") ) { return hx::Val( abs_dyn()); }
		if (HX_FIELD_EQ(inName,"pow") ) { return hx::Val( pow_dyn()); }
		if (HX_FIELD_EQ(inName,"not") ) { return hx::Val( _hx_not_dyn()); }
		if (HX_FIELD_EQ(inName,"and") ) { return hx::Val( _hx_and_dyn()); }
		if (HX_FIELD_EQ(inName,"xor") ) { return hx::Val( _hx_xor_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"sign") ) { return hx::Val( sign); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value); }
		if (HX_FIELD_EQ(inName,"isOdd") ) { return hx::Val( isOdd_dyn()); }
		if (HX_FIELD_EQ(inName,"toInt") ) { return hx::Val( toInt_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"addBig") ) { return hx::Val( addBig_dyn()); }
		if (HX_FIELD_EQ(inName,"divide") ) { return hx::Val( divide_dyn()); }
		if (HX_FIELD_EQ(inName,"divMod") ) { return hx::Val( divMod_dyn()); }
		if (HX_FIELD_EQ(inName,"modulo") ) { return hx::Val( modulo_dyn()); }
		if (HX_FIELD_EQ(inName,"random") ) { return hx::Val( random_dyn()); }
		if (HX_FIELD_EQ(inName,"negate") ) { return hx::Val( negate_dyn()); }
		if (HX_FIELD_EQ(inName,"square") ) { return hx::Val( square_dyn()); }
		if (HX_FIELD_EQ(inName,"isEven") ) { return hx::Val( isEven_dyn()); }
		if (HX_FIELD_EQ(inName,"isZero") ) { return hx::Val( isZero_dyn()); }
		if (HX_FIELD_EQ(inName,"isUnit") ) { return hx::Val( isUnit_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isSmall") ) { return hx::Val( isSmall); }
		if (HX_FIELD_EQ(inName,"toFloat") ) { return hx::Val( toFloat_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addSmall") ) { return hx::Val( addSmall_dyn()); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn()); }
		if (HX_FIELD_EQ(inName,"multiply") ) { return hx::Val( multiply_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"divModBig") ) { return hx::Val( divModBig_dyn()); }
		if (HX_FIELD_EQ(inName,"shiftLeft") ) { return hx::Val( shiftLeft_dyn()); }
		if (HX_FIELD_EQ(inName,"compareTo") ) { return hx::Val( compareTo_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"shiftRight") ) { return hx::Val( shiftRight_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"subtractBig") ) { return hx::Val( subtractBig_dyn()); }
		if (HX_FIELD_EQ(inName,"divModSmall") ) { return hx::Val( divModSmall_dyn()); }
		if (HX_FIELD_EQ(inName,"multiplyBig") ) { return hx::Val( multiplyBig_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"compareToBig") ) { return hx::Val( compareToBig_dyn()); }
		if (HX_FIELD_EQ(inName,"compareToAbs") ) { return hx::Val( compareToAbs_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"subtractSmall") ) { return hx::Val( subtractSmall_dyn()); }
		if (HX_FIELD_EQ(inName,"multiplySmall") ) { return hx::Val( multiplySmall_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"compareToSmall") ) { return hx::Val( compareToSmall_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"compareToAbsBig") ) { return hx::Val( compareToAbsBig_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"toStringWithBase") ) { return hx::Val( toStringWithBase_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"compareToAbsSmall") ) { return hx::Val( compareToAbsSmall_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Small_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"one") ) { outValue = one; return true; }
		if (HX_FIELD_EQ(inName,"two") ) { outValue = two; return true; }
		if (HX_FIELD_EQ(inName,"ten") ) { outValue = ten; return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zero") ) { outValue = zero; return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"negativeOne") ) { outValue = negativeOne; return true; }
	}
	return false;
}

hx::Val Small_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sign") ) { sign=inValue.Cast< Bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isSmall") ) { isSmall=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Small_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"one") ) { one=ioValue.Cast<  ::thx::bigint::Small >(); return true; }
		if (HX_FIELD_EQ(inName,"two") ) { two=ioValue.Cast<  ::thx::bigint::Small >(); return true; }
		if (HX_FIELD_EQ(inName,"ten") ) { ten=ioValue.Cast<  ::thx::bigint::Small >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zero") ) { zero=ioValue.Cast<  ::thx::bigint::Small >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"negativeOne") ) { negativeOne=ioValue.Cast<  ::thx::bigint::Small >(); return true; }
	}
	return false;
}

void Small_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c"));
	outFields->push(HX_HCSTRING("isSmall","\x7d","\x94","\xf0","\x1b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Small_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Small_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsBool,(int)offsetof(Small_obj,sign),HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c")},
	{hx::fsBool,(int)offsetof(Small_obj,isSmall),HX_HCSTRING("isSmall","\x7d","\x94","\xf0","\x1b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Small_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::bigint::Small*/ ,(void *) &Small_obj::zero,HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50")},
	{hx::fsObject /*::thx::bigint::Small*/ ,(void *) &Small_obj::one,HX_HCSTRING("one","\x66","\x9a","\x54","\x00")},
	{hx::fsObject /*::thx::bigint::Small*/ ,(void *) &Small_obj::two,HX_HCSTRING("two","\x8c","\x6d","\x58","\x00")},
	{hx::fsObject /*::thx::bigint::Small*/ ,(void *) &Small_obj::ten,HX_HCSTRING("ten","\xdd","\x5d","\x58","\x00")},
	{hx::fsObject /*::thx::bigint::Small*/ ,(void *) &Small_obj::negativeOne,HX_HCSTRING("negativeOne","\xf1","\xe2","\xab","\xcf")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Small_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c"),
	HX_HCSTRING("isSmall","\x7d","\x94","\xf0","\x1b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addSmall","\xe6","\x16","\xc8","\xf8"),
	HX_HCSTRING("addBig","\x1f","\xc9","\xfb","\x9e"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("subtractSmall","\x13","\x03","\x42","\xfd"),
	HX_HCSTRING("subtractBig","\x0c","\x60","\xf0","\x0b"),
	HX_HCSTRING("divide","\x79","\x2f","\x12","\xbf"),
	HX_HCSTRING("divMod","\xf1","\xf9","\xfc","\xbe"),
	HX_HCSTRING("divModSmall","\x16","\xbd","\xf6","\xba"),
	HX_HCSTRING("divModBig","\x4f","\x83","\x23","\xfc"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("multiplySmall","\x03","\x3c","\xf1","\xc8"),
	HX_HCSTRING("multiplyBig","\xfc","\x7c","\x2a","\xff"),
	HX_HCSTRING("modulo","\xb6","\x34","\xd3","\xc0"),
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("pow","\x98","\x5d","\x55","\x00"),
	HX_HCSTRING("shiftLeft","\xa9","\x89","\xa9","\xd2"),
	HX_HCSTRING("shiftRight","\xfa","\xf7","\xbb","\xf8"),
	HX_HCSTRING("square","\x9d","\x00","\xf2","\x58"),
	HX_HCSTRING("isEven","\x24","\x34","\x83","\x60"),
	HX_HCSTRING("isOdd","\xe5","\xbb","\x52","\xc1"),
	HX_HCSTRING("isZero","\x32","\xd4","\x57","\x6e"),
	HX_HCSTRING("isUnit","\x8e","\x8f","\x10","\x6b"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	HX_HCSTRING("compareToSmall","\x27","\xdb","\x2d","\x5d"),
	HX_HCSTRING("compareToBig","\x20","\x4b","\xbc","\xb0"),
	HX_HCSTRING("compareToAbs","\xd2","\x82","\xbb","\xb0"),
	HX_HCSTRING("compareToAbsSmall","\x95","\x64","\xd7","\x37"),
	HX_HCSTRING("compareToAbsBig","\x0e","\xfd","\xe2","\xae"),
	HX_HCSTRING("not","\x13","\xd9","\x53","\x00"),
	HX_HCSTRING("and","\xd7","\xfa","\x49","\x00"),
	HX_HCSTRING("or","\x23","\x61","\x00","\x00"),
	HX_HCSTRING("xor","\x9b","\x6f","\x5b","\x00"),
	HX_HCSTRING("toFloat","\x21","\x12","\x1b","\xcf"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toStringWithBase","\x03","\x1e","\x60","\x23"),
	::String(null()) };

static void Small_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Small_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Small_obj::zero,"zero");
	HX_MARK_MEMBER_NAME(Small_obj::one,"one");
	HX_MARK_MEMBER_NAME(Small_obj::two,"two");
	HX_MARK_MEMBER_NAME(Small_obj::ten,"ten");
	HX_MARK_MEMBER_NAME(Small_obj::negativeOne,"negativeOne");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Small_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Small_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Small_obj::zero,"zero");
	HX_VISIT_MEMBER_NAME(Small_obj::one,"one");
	HX_VISIT_MEMBER_NAME(Small_obj::two,"two");
	HX_VISIT_MEMBER_NAME(Small_obj::ten,"ten");
	HX_VISIT_MEMBER_NAME(Small_obj::negativeOne,"negativeOne");
};

#endif

hx::Class Small_obj::__mClass;

static ::String Small_obj_sStaticFields[] = {
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("one","\x66","\x9a","\x54","\x00"),
	HX_HCSTRING("two","\x8c","\x6d","\x58","\x00"),
	HX_HCSTRING("ten","\xdd","\x5d","\x58","\x00"),
	HX_HCSTRING("negativeOne","\xf1","\xe2","\xab","\xcf"),
	::String(null())
};

void Small_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.bigint.Small","\x52","\x3d","\xc7","\x5d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Small_obj::__GetStatic;
	__mClass->mSetStaticField = &Small_obj::__SetStatic;
	__mClass->mMarkFunc = Small_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Small_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Small_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Small_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Small_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Small_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Small_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Small_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.bigint.Small","boot",0x9ca96cce,"thx.bigint.Small.boot","thx/bigint/Small.hx",4,0x5b1536cc)
HXLINE(   4)		zero =  ::thx::bigint::Small_obj::__new((int)0);
            	}
{
            	HX_STACK_FRAME("thx.bigint.Small","boot",0x9ca96cce,"thx.bigint.Small.boot","thx/bigint/Small.hx",5,0x5b1536cc)
HXLINE(   5)		one =  ::thx::bigint::Small_obj::__new((int)1);
            	}
{
            	HX_STACK_FRAME("thx.bigint.Small","boot",0x9ca96cce,"thx.bigint.Small.boot","thx/bigint/Small.hx",6,0x5b1536cc)
HXLINE(   6)		two =  ::thx::bigint::Small_obj::__new((int)2);
            	}
{
            	HX_STACK_FRAME("thx.bigint.Small","boot",0x9ca96cce,"thx.bigint.Small.boot","thx/bigint/Small.hx",7,0x5b1536cc)
HXLINE(   7)		ten =  ::thx::bigint::Small_obj::__new((int)10);
            	}
{
            	HX_STACK_FRAME("thx.bigint.Small","boot",0x9ca96cce,"thx.bigint.Small.boot","thx/bigint/Small.hx",8,0x5b1536cc)
HXLINE(   8)		negativeOne =  ::thx::bigint::Small_obj::__new((int)-1);
            	}
}

} // end namespace thx
} // end namespace bigint
