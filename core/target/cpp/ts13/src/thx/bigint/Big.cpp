// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_bigint_Big
#include <thx/bigint/Big.h>
#endif
#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Bigs
#include <thx/bigint/Bigs.h>
#endif
#ifndef INCLUDED_thx_bigint_Small
#include <thx/bigint/Small.h>
#endif

namespace thx{
namespace bigint{

void Big_obj::__construct(::Array< Int > value,Bool sign){
            	HX_STACK_FRAME("thx.bigint.Big","new",0xbb227efd,"thx.bigint.Big.new","thx/bigint/Big.hx",11,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(sign,"sign")
HXLINE(  12)		this->sign = sign;
HXLINE(  13)		this->value = value;
HXLINE(  14)		this->isSmall = false;
            	}

Dynamic Big_obj::__CreateEmpty() { return new Big_obj; }

hx::ObjectPtr< Big_obj > Big_obj::__new(::Array< Int > value,Bool sign)
{
	hx::ObjectPtr< Big_obj > _hx_result = new Big_obj();
	_hx_result->__construct(value,sign);
	return _hx_result;
}

Dynamic Big_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Big_obj > _hx_result = new Big_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

static ::thx::bigint::BigIntImpl_obj _hx_thx_bigint_Big__hx_thx_bigint_BigIntImpl= {
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Big_obj::abs,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::add,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::subtract,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::divide,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::multiply,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::modulo,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Big_obj::random,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Big_obj::negate,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Big_obj::next,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Big_obj::prev,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::pow,
	( ::Dynamic (hx::Object::*)(Int))&::thx::bigint::Big_obj::shiftLeft,
	( ::Dynamic (hx::Object::*)(Int))&::thx::bigint::Big_obj::shiftRight,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Big_obj::square,
	( Bool (hx::Object::*)())&::thx::bigint::Big_obj::isEven,
	( Bool (hx::Object::*)())&::thx::bigint::Big_obj::isOdd,
	( Bool (hx::Object::*)())&::thx::bigint::Big_obj::isUnit,
	( Bool (hx::Object::*)())&::thx::bigint::Big_obj::isZero,
	( Int (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::compareTo,
	( Int (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::compareToAbs,
	( ::Dynamic (hx::Object::*)())&::thx::bigint::Big_obj::_hx_not,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::_hx_and,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::_hx_or,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::_hx_xor,
	( Float (hx::Object::*)())&::thx::bigint::Big_obj::toFloat,
	( Int (hx::Object::*)())&::thx::bigint::Big_obj::toInt,
	( ::String (hx::Object::*)())&::thx::bigint::Big_obj::toString,
	( ::String (hx::Object::*)(Int))&::thx::bigint::Big_obj::toStringWithBase,
	(  ::Dynamic (hx::Object::*)(::Dynamic))&::thx::bigint::Big_obj::divMod,
};

void *Big_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xbdacfd62: return &_hx_thx_bigint_Big__hx_thx_bigint_BigIntImpl;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic Big_obj::add(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Big","add",0xbb18a0be,"thx.bigint.Big.add","thx/bigint/Big.hx",17,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  18)		Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(that);
HXDLIN(  18)		if (_hx_tmp) {
HXLINE(  19)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  20)		Bool _hx_tmp1 = this->isZero();
HXDLIN(  20)		if (_hx_tmp1) {
HXLINE(  21)			return that;
            		}
HXLINE(  22)		Bool _hx_tmp2 = (this->sign != ( (Bool)(that->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) ));
HXDLIN(  22)		if (_hx_tmp2) {
HXLINE(  23)			::Dynamic _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::negate(that);
HXDLIN(  23)			return this->subtract(_hx_tmp3);
            		}
HXLINE(  24)		Bool _hx_tmp4 = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN(  24)		if (_hx_tmp4) {
HXLINE(  24)			return this->addSmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE(  24)			return this->addBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXDLIN(  24)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,add,return )

::Dynamic Big_obj::addSmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Big","addSmall",0x320a4f29,"thx.bigint.Big.addSmall","thx/bigint/Big.hx",28,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE(  28)		HX_VARI( Int,v) = small->value;
HXDLIN(  28)		Int _hx_tmp;
HXDLIN(  28)		if ((v < (int)0)) {
HXLINE(  28)			_hx_tmp = -(v);
            		}
            		else {
HXLINE(  28)			_hx_tmp = v;
            		}
HXDLIN(  28)		::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::addSmall(this->value,_hx_tmp);
HXDLIN(  28)		return  ::thx::bigint::Big_obj::__new(_hx_tmp1,this->sign);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,addSmall,return )

::Dynamic Big_obj::addBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Big","addBig",0x83d45aa2,"thx.bigint.Big.addBig","thx/bigint/Big.hx",31,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE(  31)		::Array< Int > _hx_tmp = ::thx::bigint::Bigs_obj::addAny(this->value,big->value);
HXDLIN(  31)		return  ::thx::bigint::Big_obj::__new(_hx_tmp,this->sign);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,addBig,return )

::Dynamic Big_obj::subtract(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Big","subtract",0x3153ad57,"thx.bigint.Big.subtract","thx/bigint/Big.hx",33,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  34)		Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(that);
HXDLIN(  34)		if (_hx_tmp) {
HXLINE(  35)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  36)		Bool _hx_tmp1 = this->isZero();
HXDLIN(  36)		if (_hx_tmp1) {
HXLINE(  37)			return ::thx::bigint::BigIntImpl_obj::negate(that);
            		}
HXLINE(  38)		Bool _hx_tmp2 = (this->sign != ( (Bool)(that->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) ));
HXDLIN(  38)		if (_hx_tmp2) {
HXLINE(  39)			::Dynamic _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::negate(that);
HXDLIN(  39)			return this->add(_hx_tmp3);
            		}
HXLINE(  40)		Bool _hx_tmp4 = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN(  40)		if (_hx_tmp4) {
HXLINE(  40)			return this->subtractSmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE(  40)			return this->subtractBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXDLIN(  40)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,subtract,return )

::Dynamic Big_obj::subtractSmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Big","subtractSmall",0xbaddf7f0,"thx.bigint.Big.subtractSmall","thx/bigint/Big.hx",44,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE(  44)		HX_VARI( Int,v) = small->value;
HXDLIN(  44)		Int _hx_tmp;
HXDLIN(  44)		if ((v < (int)0)) {
HXLINE(  44)			_hx_tmp = -(v);
            		}
            		else {
HXLINE(  44)			_hx_tmp = v;
            		}
HXDLIN(  44)		return ::thx::bigint::Bigs_obj::subtractSmall(this->value,_hx_tmp,this->sign);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,subtractSmall,return )

::Dynamic Big_obj::subtractBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Big","subtractBig",0xb82a73a9,"thx.bigint.Big.subtractBig","thx/bigint/Big.hx",47,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE(  47)		return ::thx::bigint::Bigs_obj::subtractAny(this->value,big->value,this->sign);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,subtractBig,return )

::Dynamic Big_obj::divide(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Big","divide",0xa3eac0fc,"thx.bigint.Big.divide","thx/bigint/Big.hx",51,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  51)		return  ::Dynamic(this->divMod(that)->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,divide,return )

 ::Dynamic Big_obj::divMod(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Big","divMod",0xa3d58b74,"thx.bigint.Big.divMod","thx/bigint/Big.hx",53,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE(  54)		Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(that);
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  55)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("division by zero",1e,d4,91,da),null(),hx::SourceInfo(HX_("Big.hx",1e,f6,d8,1c),55,HX_("thx.bigint.Big",8b,3c,e6,9d),HX_("divMod",f1,f9,fc,be))));
            		}
HXLINE(  56)		Bool _hx_tmp1 = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN(  56)		if (_hx_tmp1) {
HXLINE(  56)			return this->divModSmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE(  56)			return this->divModBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXDLIN(  56)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,divMod,return )

 ::Dynamic Big_obj::divModSmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Big","divModSmall",0x6730d0b3,"thx.bigint.Big.divModSmall","thx/bigint/Big.hx",59,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE(  60)		HX_VARI( Int,v) = small->value;
HXDLIN(  60)		Int _hx_tmp;
HXDLIN(  60)		if ((v < (int)0)) {
HXLINE(  60)			_hx_tmp = -(v);
            		}
            		else {
HXLINE(  60)			_hx_tmp = v;
            		}
HXDLIN(  60)		HX_VARI(  ::Dynamic,values) = ::thx::bigint::Bigs_obj::divModSmall(this->value,_hx_tmp);
HXLINE(  61)		HX_VARI(  ::Dynamic,quotient) = ::thx::bigint::Bigs_obj::arrayToSmall( ::Dynamic(values->__Field(HX_("q",71,00,00,00),hx::paccDynamic)));
HXLINE(  62)		HX_VARI( Int,remainder) = ( (Int)(values->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) );
HXLINE(  63)		if (this->sign) {
HXLINE(  63)			remainder = -(remainder);
            		}
HXLINE(  64)		Bool _hx_tmp1 = hx::IsNotNull( quotient );
HXDLIN(  64)		if (_hx_tmp1) {
HXLINE(  65)			if ((this->sign != small->sign)) {
HXLINE(  66)				quotient = -(quotient);
            			}
HXLINE(  67)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("quotient",ab,68,60,b2), ::thx::bigint::Small_obj::__new(quotient))
            				->setFixed(1,HX_("remainder",e5,f3,bd,bb), ::thx::bigint::Small_obj::__new(remainder)));
            		}
HXLINE(  72)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("quotient",ab,68,60,b2), ::thx::bigint::Big_obj::__new( ::Dynamic(values->__Field(HX_("q",71,00,00,00),hx::paccDynamic)),(this->sign != small->sign)))
            			->setFixed(1,HX_("remainder",e5,f3,bd,bb), ::thx::bigint::Small_obj::__new(remainder)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,divModSmall,return )

 ::Dynamic Big_obj::divModBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Big","divModBig",0xdcd285ac,"thx.bigint.Big.divModBig","thx/bigint/Big.hx",78,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE(  79)		HX_VARI( Int,comparison) = ::thx::bigint::Bigs_obj::compareToAbs(this->value,big->value);
HXLINE(  80)		if ((comparison == (int)-1)) {
HXLINE(  80)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("quotient",ab,68,60,b2),::thx::bigint::Small_obj::zero)
            				->setFixed(1,HX_("remainder",e5,f3,bd,bb),hx::ObjectPtr<OBJ_>(this)));
            		}
HXLINE(  84)		if ((comparison == (int)0)) {
HXLINE(  85)			::Dynamic _hx_tmp;
HXDLIN(  85)			if ((this->sign == big->sign)) {
HXLINE(  85)				_hx_tmp = ::thx::bigint::Small_obj::one;
            			}
            			else {
HXLINE(  85)				_hx_tmp = ::thx::bigint::Small_obj::negativeOne;
            			}
HXLINE(  84)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("quotient",ab,68,60,b2),_hx_tmp)
            				->setFixed(1,HX_("remainder",e5,f3,bd,bb),::thx::bigint::Small_obj::zero));
            		}
HXLINE(  90)		HX_VAR( ::Array< ::Dynamic>,values);
HXDLIN(  90)		Bool _hx_tmp1 = ((this->value->length + big->value->length) <= (int)200);
HXDLIN(  90)		if (_hx_tmp1) {
HXLINE(  90)			values = ::thx::bigint::Bigs_obj::divMod1(this->value,big->value);
            		}
            		else {
HXLINE(  90)			values = ::thx::bigint::Bigs_obj::divMod2(this->value,big->value);
            		}
HXLINE(  91)		HX_VARI(  ::Dynamic,q) = values->__get((int)0)->__Field(HX_("small",c7,f0,6a,7f),hx::paccDynamic);
HXLINE(  92)		HX_VAR( ::Dynamic,quotient);
HXDLIN(  92)		HX_VAR( ::Dynamic,remainder);
HXLINE(  93)		HX_VARI( Bool,qSign) = (this->sign != big->sign);
HXDLIN(  93)		HX_VARI(  ::Dynamic,r) = values->__get((int)1)->__Field(HX_("small",c7,f0,6a,7f),hx::paccDynamic);
HXDLIN(  93)		HX_VARI( Bool,mSign) = this->sign;
HXLINE(  96)		Bool _hx_tmp2 = hx::IsNotNull( q );
HXDLIN(  96)		if (_hx_tmp2) {
HXLINE(  97)			if (qSign) {
HXLINE(  97)				q = -(q);
            			}
HXLINE(  98)			quotient =  ::thx::bigint::Small_obj::__new(q);
            		}
            		else {
HXLINE( 100)			quotient =  ::thx::bigint::Big_obj::__new( ::Dynamic(values->__get((int)0)->__Field(HX_("big",c0,b8,4a,00),hx::paccDynamic)),qSign);
            		}
HXLINE( 101)		Bool _hx_tmp3 = hx::IsNotNull( r );
HXDLIN( 101)		if (_hx_tmp3) {
HXLINE( 102)			if (mSign) {
HXLINE( 102)				r = -(r);
            			}
HXLINE( 103)			remainder =  ::thx::bigint::Small_obj::__new(r);
            		}
            		else {
HXLINE( 105)			remainder =  ::thx::bigint::Big_obj::__new( ::Dynamic(values->__get((int)1)->__Field(HX_("big",c0,b8,4a,00),hx::paccDynamic)),mSign);
            		}
HXLINE( 106)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("quotient",ab,68,60,b2),quotient)
            			->setFixed(1,HX_("remainder",e5,f3,bd,bb),remainder));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,divModBig,return )

::Dynamic Big_obj::multiply(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Big","multiply",0xd3cf1a67,"thx.bigint.Big.multiply","thx/bigint/Big.hx",112,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 113)		Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(that);
HXDLIN( 113)		if (_hx_tmp) {
HXLINE( 114)			return ::thx::bigint::Small_obj::zero;
            		}
HXLINE( 115)		Bool _hx_tmp1 = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN( 115)		if (_hx_tmp1) {
HXLINE( 115)			return this->multiplySmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE( 115)			return this->multiplyBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXDLIN( 115)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,multiply,return )

::Dynamic Big_obj::multiplySmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Big","multiplySmall",0x868d30e0,"thx.bigint.Big.multiplySmall","thx/bigint/Big.hx",119,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE( 119)		HX_VARI( Int,v) = small->value;
HXDLIN( 119)		Int _hx_tmp;
HXDLIN( 119)		if ((v < (int)0)) {
HXLINE( 119)			_hx_tmp = -(v);
            		}
            		else {
HXLINE( 119)			_hx_tmp = v;
            		}
HXDLIN( 119)		::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp);
HXDLIN( 119)		::Array< Int > _hx_tmp2 = ::thx::bigint::Bigs_obj::multiplyLong(this->value,_hx_tmp1);
HXDLIN( 119)		return  ::thx::bigint::Big_obj::__new(_hx_tmp2,(this->sign != small->sign));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,multiplySmall,return )

::Dynamic Big_obj::multiplyBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Big","multiplyBig",0xab649099,"thx.bigint.Big.multiplyBig","thx/bigint/Big.hx",122,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE( 123)		Bool _hx_tmp = ((this->value->length + big->value->length) > (int)4000);
HXDLIN( 123)		if (_hx_tmp) {
HXLINE( 124)			::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::multiplyKaratsuba(this->value,big->value);
HXDLIN( 124)			return  ::thx::bigint::Big_obj::__new(_hx_tmp1,(this->sign != big->sign));
            		}
HXLINE( 125)		::Array< Int > _hx_tmp2 = ::thx::bigint::Bigs_obj::multiplyLong(this->value,big->value);
HXDLIN( 125)		return  ::thx::bigint::Big_obj::__new(_hx_tmp2,(this->sign != big->sign));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,multiplyBig,return )

::Dynamic Big_obj::modulo(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Big","modulo",0xa5abc639,"thx.bigint.Big.modulo","thx/bigint/Big.hx",129,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 129)		return  ::Dynamic(this->divMod(that)->__Field(HX_("remainder",e5,f3,bd,bb),hx::paccDynamic));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,modulo,return )

::Dynamic Big_obj::random(){
            	HX_STACK_FRAME("thx.bigint.Big","random",0x9c67b386,"thx.bigint.Big.random","thx/bigint/Big.hx",131,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 132)		HX_VARI( Int,length) = (this->value->length - (int)1);
HXDLIN( 132)		HX_VARI( ::Array< Int >,result) = ::Array_obj< Int >::__new(0);
HXDLIN( 132)		HX_VARI( Bool,restricted) = true;
HXDLIN( 132)		HX_VARI( Int,i) = length;
HXDLIN( 132)		HX_VAR( Int,top);
HXDLIN( 132)		HX_VAR( Int,digit);
HXLINE( 137)		while((i >= (int)0)){
HXLINE( 138)			if (restricted) {
HXLINE( 138)				top = this->value->__get(i);
            			}
            			else {
HXLINE( 138)				top = (int)10000000;
            			}
HXLINE( 139)			Float _hx_tmp = ::Math_obj::random();
HXDLIN( 139)			HX_VARI( Float,value) = (_hx_tmp * top);
HXDLIN( 139)			if ((value < ((Float)0.0))) {
HXLINE( 139)				digit = ::Math_obj::ceil(value);
            			}
            			else {
HXLINE( 139)				digit = ::Math_obj::floor(value);
            			}
HXLINE( 140)			result->unshift(digit);
HXLINE( 141)			if ((digit < top)) {
HXLINE( 142)				restricted = false;
            			}
HXLINE( 143)			--i;
            		}
HXLINE( 145)		HX_VARI(  ::Dynamic,v) = ::thx::bigint::Bigs_obj::arrayToSmall(result);
HXLINE( 146)		if (hx::IsNotNull( v )) {
HXLINE( 147)			return  ::thx::bigint::Small_obj::__new(v);
            		}
            		else {
HXLINE( 149)			return  ::thx::bigint::Big_obj::__new(result,false);
            		}
HXLINE( 146)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,random,return )

::Dynamic Big_obj::abs(){
            	HX_STACK_FRAME("thx.bigint.Big","abs",0xbb189f0f,"thx.bigint.Big.abs","thx/bigint/Big.hx",153,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 153)		return  ::thx::bigint::Big_obj::__new(this->value,false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,abs,return )

::Dynamic Big_obj::negate(){
            	HX_STACK_FRAME("thx.bigint.Big","negate",0x4bf1d345,"thx.bigint.Big.negate","thx/bigint/Big.hx",156,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 156)		return  ::thx::bigint::Big_obj::__new(this->value,!(this->sign));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,negate,return )

::Dynamic Big_obj::next(){
            	HX_STACK_FRAME("thx.bigint.Big","next",0x030c9fb6,"thx.bigint.Big.next","thx/bigint/Big.hx",159,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 159)		return this->add(::thx::bigint::Small_obj::one);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,next,return )

::Dynamic Big_obj::prev(){
            	HX_STACK_FRAME("thx.bigint.Big","prev",0x0468d9b6,"thx.bigint.Big.prev","thx/bigint/Big.hx",162,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 162)		return this->subtract(::thx::bigint::Small_obj::one);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,prev,return )

::Dynamic Big_obj::pow(::Dynamic exp){
            	HX_STACK_FRAME("thx.bigint.Big","pow",0xbb240c35,"thx.bigint.Big.pow","thx/bigint/Big.hx",164,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(exp,"exp")
HXLINE( 165)		Bool _hx_tmp = this->isZero();
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 166)			Bool _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::isZero(exp);
HXDLIN( 166)			if (_hx_tmp1) {
HXLINE( 166)				return ::thx::bigint::Small_obj::one;
            			}
            			else {
HXLINE( 166)				return hx::ObjectPtr<OBJ_>(this);
            			}
            		}
HXLINE( 167)		Bool _hx_tmp2 = this->isUnit();
HXDLIN( 167)		if (_hx_tmp2) {
HXLINE( 168)			Bool _hx_tmp3 = this->sign;
HXDLIN( 168)			if (_hx_tmp3) {
HXLINE( 169)				Bool _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::isEven(exp);
HXDLIN( 169)				if (_hx_tmp4) {
HXLINE( 168)					return ::thx::bigint::Small_obj::one;
            				}
            				else {
HXLINE( 168)					return ::thx::bigint::Small_obj::negativeOne;
            				}
            			}
            			else {
HXLINE( 168)				return ::thx::bigint::Small_obj::one;
            			}
            		}
HXLINE( 171)		if (( (Bool)(exp->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) )) {
HXLINE( 172)			return ::thx::bigint::Small_obj::zero;
            		}
HXLINE( 173)		Bool _hx_tmp5 = !(( (Bool)(exp->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) ));
HXDLIN( 173)		if (_hx_tmp5) {
HXLINE( 174)			::String _hx_tmp6 = ::Std_obj::string(exp);
HXDLIN( 174)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("The exponent ",42,2a,0c,af) + _hx_tmp6) + HX_(" is too large.",75,c8,74,82)),null(),hx::SourceInfo(HX_("Big.hx",1e,f6,d8,1c),174,HX_("thx.bigint.Big",8b,3c,e6,9d),HX_("pow",98,5d,55,00))));
            		}
HXLINE( 175)		HX_VARI( Int,b) = ( ( ::thx::bigint::Small)(exp) )->value;
HXDLIN( 175)		HX_VARI( ::Dynamic,x) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 175)		HX_VARI( ::Dynamic,y) = ::thx::bigint::Small_obj::one;
HXLINE( 178)		while(true){
HXLINE( 179)			if ((((int)b & (int)(int)1) == (int)1)) {
HXLINE( 180)				y = ::thx::bigint::BigIntImpl_obj::multiply(y,x);
HXLINE( 181)				--b;
            			}
HXLINE( 183)			if ((b == (int)0)) {
HXLINE( 183)				goto _hx_goto_1;
            			}
HXLINE( 184)			b = ::Std_obj::_hx_int(((Float)b / (Float)(int)2));
HXLINE( 185)			x = ::thx::bigint::BigIntImpl_obj::square(x);
            		}
            		_hx_goto_1:;
HXLINE( 187)		return y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,pow,return )

::Dynamic Big_obj::shiftLeft(Int n){
            	HX_STACK_FRAME("thx.bigint.Big","shiftLeft",0xb3588c06,"thx.bigint.Big.shiftLeft","thx/bigint/Big.hx",190,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(n,"n")
HXLINE( 191)		if ((n < (int)0)) {
HXLINE( 192)			return this->shiftRight(-(n));
            		}
HXLINE( 193)		HX_VARI( ::Dynamic,result) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 194)		while((n >= ::thx::bigint::Bigs_obj::powers2Length)){
HXLINE( 195)			result = ::thx::bigint::BigIntImpl_obj::multiply(result,::thx::bigint::Bigs_obj::bigHighestPower2);
HXLINE( 196)			hx::SubEq(n,(::thx::bigint::Bigs_obj::powers2Length - (int)1));
            		}
HXLINE( 198)		return ::thx::bigint::BigIntImpl_obj::multiply(result,::thx::bigint::Bigs_obj::bigPowersOfTwo->__get(n));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,shiftLeft,return )

::Dynamic Big_obj::shiftRight(Int n){
            	HX_STACK_FRAME("thx.bigint.Big","shiftRight",0xb12f06fd,"thx.bigint.Big.shiftRight","thx/bigint/Big.hx",201,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(n,"n")
HXLINE( 202)		if ((n < (int)0)) {
HXLINE( 203)			return this->shiftLeft(-(n));
            		}
HXLINE( 204)		HX_VARI( ::Dynamic,result) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 204)		HX_VAR(  ::Dynamic,remQuo);
HXLINE( 206)		while((n >= ::thx::bigint::Bigs_obj::powers2Length)){
HXLINE( 207)			Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(result);
HXDLIN( 207)			if (_hx_tmp) {
HXLINE( 208)				return result;
            			}
HXLINE( 209)			remQuo = ::thx::bigint::BigIntImpl_obj::divMod(result,::thx::bigint::Bigs_obj::bigHighestPower2);
HXLINE( 210)			Bool _hx_tmp1 = ( (Bool)( ::Dynamic(remQuo->__Field(HX_("remainder",e5,f3,bd,bb),hx::paccDynamic))->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 210)			if (_hx_tmp1) {
HXLINE( 210)				result = ::thx::bigint::BigIntImpl_obj::prev( ::Dynamic(remQuo->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic)));
            			}
            			else {
HXLINE( 210)				result =  ::Dynamic(remQuo->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic));
            			}
HXLINE( 211)			hx::SubEq(n,(::thx::bigint::Bigs_obj::powers2Length - (int)1));
            		}
HXLINE( 213)		remQuo = ::thx::bigint::BigIntImpl_obj::divMod(result,::thx::bigint::Bigs_obj::bigPowersOfTwo->__get(n));
HXLINE( 214)		Bool _hx_tmp2 = ( (Bool)( ::Dynamic(remQuo->__Field(HX_("remainder",e5,f3,bd,bb),hx::paccDynamic))->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 214)		if (_hx_tmp2) {
HXLINE( 214)			return ::thx::bigint::BigIntImpl_obj::prev( ::Dynamic(remQuo->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic)));
            		}
            		else {
HXLINE( 214)			return  ::Dynamic(remQuo->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic));
            		}
HXDLIN( 214)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,shiftRight,return )

::Dynamic Big_obj::square(){
            	HX_STACK_FRAME("thx.bigint.Big","square",0x3dca9220,"thx.bigint.Big.square","thx/bigint/Big.hx",218,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 218)		::Array< Int > _hx_tmp = ::thx::bigint::Bigs_obj::square(this->value);
HXDLIN( 218)		return  ::thx::bigint::Big_obj::__new(_hx_tmp,false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,square,return )

Bool Big_obj::isEven(){
            	HX_STACK_FRAME("thx.bigint.Big","isEven",0x455bc5a7,"thx.bigint.Big.isEven","thx/bigint/Big.hx",221,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 221)		return (((int)this->value->__get((int)0) & (int)(int)1) == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,isEven,return )

Bool Big_obj::isOdd(){
            	HX_STACK_FRAME("thx.bigint.Big","isOdd",0xd0200bc2,"thx.bigint.Big.isOdd","thx/bigint/Big.hx",224,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 224)		return (((int)this->value->__get((int)0) & (int)(int)1) == (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,isOdd,return )

Bool Big_obj::isZero(){
            	HX_STACK_FRAME("thx.bigint.Big","isZero",0x533065b5,"thx.bigint.Big.isZero","thx/bigint/Big.hx",227,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 227)		return (this->value->length == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,isZero,return )

Bool Big_obj::isUnit(){
            	HX_STACK_FRAME("thx.bigint.Big","isUnit",0x4fe92111,"thx.bigint.Big.isUnit","thx/bigint/Big.hx",230,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 230)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,isUnit,return )

Int Big_obj::compareTo(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Big","compareTo",0xe30b97dd,"thx.bigint.Big.compareTo","thx/bigint/Big.hx",232,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 233)		if ((this->sign != ( (Bool)(that->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) ))) {
HXLINE( 234)			if (this->sign) {
HXLINE( 234)				return (int)-1;
            			}
            			else {
HXLINE( 234)				return (int)1;
            			}
            		}
HXLINE( 235)		Bool _hx_tmp = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN( 235)		if (_hx_tmp) {
HXLINE( 235)			return this->compareToSmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE( 235)			return this->compareToBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXDLIN( 235)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,compareTo,return )

Int Big_obj::compareToSmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Big","compareToSmall",0x880827aa,"thx.bigint.Big.compareToSmall","thx/bigint/Big.hx",239,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE( 239)		HX_VARI( Int,v) = small->value;
HXDLIN( 239)		Int _hx_tmp;
HXDLIN( 239)		if ((v < (int)0)) {
HXLINE( 239)			_hx_tmp = -(v);
            		}
            		else {
HXLINE( 239)			_hx_tmp = v;
            		}
HXDLIN( 239)		::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp);
HXDLIN( 239)		Int _hx_tmp2 = ::thx::bigint::Bigs_obj::compareToAbs(this->value,_hx_tmp1);
HXDLIN( 239)		Int _hx_tmp3;
HXDLIN( 239)		if (this->sign) {
HXLINE( 239)			_hx_tmp3 = (int)-1;
            		}
            		else {
HXLINE( 239)			_hx_tmp3 = (int)1;
            		}
HXDLIN( 239)		return (_hx_tmp2 * _hx_tmp3);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,compareToSmall,return )

Int Big_obj::compareToBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Big","compareToBig",0xb75360e3,"thx.bigint.Big.compareToBig","thx/bigint/Big.hx",242,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE( 242)		Int _hx_tmp = ::thx::bigint::Bigs_obj::compareToAbs(this->value,big->value);
HXDLIN( 242)		Int _hx_tmp1;
HXDLIN( 242)		if (this->sign) {
HXLINE( 242)			_hx_tmp1 = (int)-1;
            		}
            		else {
HXLINE( 242)			_hx_tmp1 = (int)1;
            		}
HXDLIN( 242)		return (_hx_tmp * _hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,compareToBig,return )

Int Big_obj::compareToAbs(::Dynamic that){
            	HX_STACK_FRAME("thx.bigint.Big","compareToAbs",0xb7529895,"thx.bigint.Big.compareToAbs","thx/bigint/Big.hx",245,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 245)		Bool _hx_tmp = ( (Bool)(that->__Field(HX_("isSmall",7d,94,f0,1b),hx::paccDynamic)) );
HXDLIN( 245)		if (_hx_tmp) {
HXLINE( 246)			return this->compareToAbsSmall(( ( ::thx::bigint::Small)(that) ));
            		}
            		else {
HXLINE( 248)			return this->compareToAbsBig(( ( ::thx::bigint::Big)(that) ));
            		}
HXLINE( 245)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,compareToAbs,return )

Int Big_obj::compareToAbsSmall( ::thx::bigint::Small small){
            	HX_STACK_FRAME("thx.bigint.Big","compareToAbsSmall",0x640b8bf2,"thx.bigint.Big.compareToAbsSmall","thx/bigint/Big.hx",252,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(small,"small")
HXLINE( 252)		HX_VARI( Int,v) = small->value;
HXDLIN( 252)		Int _hx_tmp;
HXDLIN( 252)		if ((v < (int)0)) {
HXLINE( 252)			_hx_tmp = -(v);
            		}
            		else {
HXLINE( 252)			_hx_tmp = v;
            		}
HXDLIN( 252)		::Array< Int > _hx_tmp1 = ::thx::bigint::Bigs_obj::smallToArray(_hx_tmp);
HXDLIN( 252)		return ::thx::bigint::Bigs_obj::compareToAbs(this->value,_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,compareToAbsSmall,return )

Int Big_obj::compareToAbsBig( ::thx::bigint::Big big){
            	HX_STACK_FRAME("thx.bigint.Big","compareToAbsBig",0x030ba32b,"thx.bigint.Big.compareToAbsBig","thx/bigint/Big.hx",255,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(big,"big")
HXLINE( 255)		return ::thx::bigint::Bigs_obj::compareToAbs(this->value,big->value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,compareToAbsBig,return )

::Dynamic Big_obj::_hx_not(){
            	HX_STACK_FRAME("thx.bigint.Big","not",0xbb2287b0,"thx.bigint.Big.not","thx/bigint/Big.hx",258,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 258)		return ::thx::bigint::BigIntImpl_obj::prev(this->negate());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,_hx_not,return )

::Dynamic Big_obj::_hx_and(::Dynamic that){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.bigint.Big","and",0xbb18a974,"thx.bigint.Big.and","thx/bigint/Big.hx",261,0x86edf933)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 261)			return ((int)a & (int)b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.bigint.Big","and",0xbb18a974,"thx.bigint.Big.and","thx/bigint/Big.hx",261,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 261)		return ::thx::bigint::Bigs_obj::bitwise(hx::ObjectPtr<OBJ_>(this),that, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,_hx_and,return )

::Dynamic Big_obj::_hx_or(::Dynamic that){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.bigint.Big","or",0x9aab3526,"thx.bigint.Big.or","thx/bigint/Big.hx",264,0x86edf933)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 264)			return ((int)a | (int)b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.bigint.Big","or",0x9aab3526,"thx.bigint.Big.or","thx/bigint/Big.hx",264,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 264)		return ::thx::bigint::Bigs_obj::bitwise(hx::ObjectPtr<OBJ_>(this),that, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,_hx_or,return )

::Dynamic Big_obj::_hx_xor(::Dynamic that){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.bigint.Big","xor",0xbb2a1e38,"thx.bigint.Big.xor","thx/bigint/Big.hx",267,0x86edf933)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 267)			return ((int)a ^ (int)b);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.bigint.Big","xor",0xbb2a1e38,"thx.bigint.Big.xor","thx/bigint/Big.hx",267,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(that,"that")
HXLINE( 267)		return ::thx::bigint::Bigs_obj::bitwise(hx::ObjectPtr<OBJ_>(this),that, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,_hx_xor,return )

Float Big_obj::toFloat(){
            	HX_STACK_FRAME("thx.bigint.Big","toFloat",0x27c1d33e,"thx.bigint.Big.toFloat","thx/bigint/Big.hx",270,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 270)		::String _hx_tmp = this->toString();
HXDLIN( 270)		return ::Std_obj::parseFloat(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,toFloat,return )

Int Big_obj::toInt(){
            	HX_STACK_FRAME("thx.bigint.Big","toInt",0x22df0e11,"thx.bigint.Big.toInt","thx/bigint/Big.hx",272,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 273)		HX_VARI(  ::Dynamic,v) = ::thx::bigint::Bigs_obj::arrayToSmall(this->value);
HXLINE( 274)		if (hx::IsNull( v )) {
HXLINE( 274)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("overflow",42,e3,3b,41),null(),hx::SourceInfo(HX_("Big.hx",1e,f6,d8,1c),274,HX_("thx.bigint.Big",8b,3c,e6,9d),HX_("toInt",34,be,11,14))));
            		}
HXLINE( 275)		Int _hx_tmp;
HXDLIN( 275)		if (this->sign) {
HXLINE( 275)			_hx_tmp = (int)-1;
            		}
            		else {
HXLINE( 275)			_hx_tmp = (int)1;
            		}
HXDLIN( 275)		return (_hx_tmp * v);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,toInt,return )

::String Big_obj::toString(){
            	HX_STACK_FRAME("thx.bigint.Big","toString",0x71b108ef,"thx.bigint.Big.toString","thx/bigint/Big.hx",279,0x86edf933)
            	HX_STACK_THIS(this)
HXLINE( 279)		return this->toStringWithBase((int)10);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Big_obj,toString,return )

::String Big_obj::toStringWithBase(Int base){
            	HX_STACK_FRAME("thx.bigint.Big","toStringWithBase",0x72c8d146,"thx.bigint.Big.toStringWithBase","thx/bigint/Big.hx",281,0x86edf933)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(base,"base")
HXLINE( 282)		Bool _hx_tmp = this->isZero();
HXDLIN( 282)		if (_hx_tmp) {
HXLINE( 283)			return HX_("0",30,00,00,00);
            		}
HXLINE( 284)		if ((base == (int)10)) {
HXLINE( 285)			HX_VARI( Int,l) = this->value->length;
HXLINE( 286)			Int _hx_tmp1 = --l;
HXLINE( 285)			HX_VARI( ::String,out) = (HX_("",00,00,00,00) + this->value->__get(_hx_tmp1));
HXDLIN( 285)			HX_VAR( ::String,digit);
HXLINE( 289)			while(true){
HXLINE( 289)				Int _hx_tmp2 = --l;
HXDLIN( 289)				if (!((_hx_tmp2 >= (int)0))) {
HXLINE( 289)					goto _hx_goto_4;
            				}
HXLINE( 290)				digit = (HX_("",00,00,00,00) + this->value->__get(l));
HXLINE( 291)				::String _hx_tmp3 = HX_("0000000",30,42,42,c0).substring(digit.length,null());
HXDLIN( 291)				hx::AddEq(out,(_hx_tmp3 + digit));
            			}
            			_hx_goto_4:;
HXLINE( 293)			::String _hx_tmp4;
HXDLIN( 293)			if (this->sign) {
HXLINE( 293)				_hx_tmp4 = HX_("-",2d,00,00,00);
            			}
            			else {
HXLINE( 293)				_hx_tmp4 = HX_("",00,00,00,00);
            			}
HXDLIN( 293)			return (_hx_tmp4 + out);
            		}
HXLINE( 296)		HX_VARI_NAME( ::Array< ::String >,out1,"out") = ::Array_obj< ::String >::__new(0);
HXLINE( 297)		HX_VARI(  ::thx::bigint::Small,baseBig) =  ::thx::bigint::Small_obj::__new(base);
HXLINE( 298)		HX_VARI( ::Dynamic,left) = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 298)		HX_VAR(  ::Dynamic,divmod);
HXLINE( 299)		while(true){
HXLINE( 299)			Bool _hx_tmp5;
HXDLIN( 299)			Bool _hx_tmp6 = !(( (Bool)(left->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) ));
HXDLIN( 299)			if (_hx_tmp6) {
HXLINE( 299)				Int _hx_tmp7 = ::thx::bigint::BigIntImpl_obj::compareToAbs(left,baseBig);
HXDLIN( 299)				_hx_tmp5 = (_hx_tmp7 >= (int)0);
            			}
            			else {
HXLINE( 299)				_hx_tmp5 = true;
            			}
HXDLIN( 299)			if (!(_hx_tmp5)) {
HXLINE( 299)				goto _hx_goto_5;
            			}
HXLINE( 300)			divmod = ::thx::bigint::BigIntImpl_obj::divMod(left,baseBig);
HXLINE( 301)			left =  ::Dynamic(divmod->__Field(HX_("quotient",ab,68,60,b2),hx::paccDynamic));
HXLINE( 302)			HX_VARI_NAME( ::Dynamic,digit1,"digit") =  ::Dynamic(divmod->__Field(HX_("remainder",e5,f3,bd,bb),hx::paccDynamic));
HXLINE( 303)			Bool _hx_tmp8 = ( (Bool)(digit1->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 303)			if (_hx_tmp8) {
HXLINE( 304)				digit1 = ::thx::bigint::BigIntImpl_obj::abs(baseBig->subtract(digit1));
HXLINE( 305)				left = ::thx::bigint::BigIntImpl_obj::next(left);
            			}
HXLINE( 307)			::String _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::toStringWithBase(digit1,base);
HXDLIN( 307)			out1->push(_hx_tmp9);
            		}
            		_hx_goto_5:;
HXLINE( 309)		::String _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::toStringWithBase(left,base);
HXDLIN( 309)		out1->push(_hx_tmp10);
HXLINE( 310)		out1->reverse();
HXLINE( 311)		::String _hx_tmp11;
HXDLIN( 311)		if (this->sign) {
HXLINE( 311)			_hx_tmp11 = HX_("-",2d,00,00,00);
            		}
            		else {
HXLINE( 311)			_hx_tmp11 = HX_("",00,00,00,00);
            		}
HXDLIN( 311)		::String _hx_tmp12 = out1->join(HX_("",00,00,00,00));
HXDLIN( 311)		return (_hx_tmp11 + _hx_tmp12);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Big_obj,toStringWithBase,return )


Big_obj::Big_obj()
{
}

void Big_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Big);
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(sign,"sign");
	HX_MARK_MEMBER_NAME(isSmall,"isSmall");
	HX_MARK_END_CLASS();
}

void Big_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(sign,"sign");
	HX_VISIT_MEMBER_NAME(isSmall,"isSmall");
}

hx::Val Big_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"or") ) { return hx::Val( _hx_or_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"abs") ) { return hx::Val( abs_dyn()); }
		if (HX_FIELD_EQ(inName,"pow") ) { return hx::Val( pow_dyn()); }
		if (HX_FIELD_EQ(inName,"not") ) { return hx::Val( _hx_not_dyn()); }
		if (HX_FIELD_EQ(inName,"and") ) { return hx::Val( _hx_and_dyn()); }
		if (HX_FIELD_EQ(inName,"xor") ) { return hx::Val( _hx_xor_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"sign") ) { return hx::Val( sign); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value); }
		if (HX_FIELD_EQ(inName,"isOdd") ) { return hx::Val( isOdd_dyn()); }
		if (HX_FIELD_EQ(inName,"toInt") ) { return hx::Val( toInt_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"addBig") ) { return hx::Val( addBig_dyn()); }
		if (HX_FIELD_EQ(inName,"divide") ) { return hx::Val( divide_dyn()); }
		if (HX_FIELD_EQ(inName,"divMod") ) { return hx::Val( divMod_dyn()); }
		if (HX_FIELD_EQ(inName,"modulo") ) { return hx::Val( modulo_dyn()); }
		if (HX_FIELD_EQ(inName,"random") ) { return hx::Val( random_dyn()); }
		if (HX_FIELD_EQ(inName,"negate") ) { return hx::Val( negate_dyn()); }
		if (HX_FIELD_EQ(inName,"square") ) { return hx::Val( square_dyn()); }
		if (HX_FIELD_EQ(inName,"isEven") ) { return hx::Val( isEven_dyn()); }
		if (HX_FIELD_EQ(inName,"isZero") ) { return hx::Val( isZero_dyn()); }
		if (HX_FIELD_EQ(inName,"isUnit") ) { return hx::Val( isUnit_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isSmall") ) { return hx::Val( isSmall); }
		if (HX_FIELD_EQ(inName,"toFloat") ) { return hx::Val( toFloat_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addSmall") ) { return hx::Val( addSmall_dyn()); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn()); }
		if (HX_FIELD_EQ(inName,"multiply") ) { return hx::Val( multiply_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"divModBig") ) { return hx::Val( divModBig_dyn()); }
		if (HX_FIELD_EQ(inName,"shiftLeft") ) { return hx::Val( shiftLeft_dyn()); }
		if (HX_FIELD_EQ(inName,"compareTo") ) { return hx::Val( compareTo_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"shiftRight") ) { return hx::Val( shiftRight_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"subtractBig") ) { return hx::Val( subtractBig_dyn()); }
		if (HX_FIELD_EQ(inName,"divModSmall") ) { return hx::Val( divModSmall_dyn()); }
		if (HX_FIELD_EQ(inName,"multiplyBig") ) { return hx::Val( multiplyBig_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"compareToBig") ) { return hx::Val( compareToBig_dyn()); }
		if (HX_FIELD_EQ(inName,"compareToAbs") ) { return hx::Val( compareToAbs_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"subtractSmall") ) { return hx::Val( subtractSmall_dyn()); }
		if (HX_FIELD_EQ(inName,"multiplySmall") ) { return hx::Val( multiplySmall_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"compareToSmall") ) { return hx::Val( compareToSmall_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"compareToAbsBig") ) { return hx::Val( compareToAbsBig_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"toStringWithBase") ) { return hx::Val( toStringWithBase_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"compareToAbsSmall") ) { return hx::Val( compareToAbsSmall_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Big_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sign") ) { sign=inValue.Cast< Bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isSmall") ) { isSmall=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Big_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c"));
	outFields->push(HX_HCSTRING("isSmall","\x7d","\x94","\xf0","\x1b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Big_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Big_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsBool,(int)offsetof(Big_obj,sign),HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c")},
	{hx::fsBool,(int)offsetof(Big_obj,isSmall),HX_HCSTRING("isSmall","\x7d","\x94","\xf0","\x1b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Big_obj_sStaticStorageInfo = 0;
#endif

static ::String Big_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c"),
	HX_HCSTRING("isSmall","\x7d","\x94","\xf0","\x1b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addSmall","\xe6","\x16","\xc8","\xf8"),
	HX_HCSTRING("addBig","\x1f","\xc9","\xfb","\x9e"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("subtractSmall","\x13","\x03","\x42","\xfd"),
	HX_HCSTRING("subtractBig","\x0c","\x60","\xf0","\x0b"),
	HX_HCSTRING("divide","\x79","\x2f","\x12","\xbf"),
	HX_HCSTRING("divMod","\xf1","\xf9","\xfc","\xbe"),
	HX_HCSTRING("divModSmall","\x16","\xbd","\xf6","\xba"),
	HX_HCSTRING("divModBig","\x4f","\x83","\x23","\xfc"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("multiplySmall","\x03","\x3c","\xf1","\xc8"),
	HX_HCSTRING("multiplyBig","\xfc","\x7c","\x2a","\xff"),
	HX_HCSTRING("modulo","\xb6","\x34","\xd3","\xc0"),
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("pow","\x98","\x5d","\x55","\x00"),
	HX_HCSTRING("shiftLeft","\xa9","\x89","\xa9","\xd2"),
	HX_HCSTRING("shiftRight","\xfa","\xf7","\xbb","\xf8"),
	HX_HCSTRING("square","\x9d","\x00","\xf2","\x58"),
	HX_HCSTRING("isEven","\x24","\x34","\x83","\x60"),
	HX_HCSTRING("isOdd","\xe5","\xbb","\x52","\xc1"),
	HX_HCSTRING("isZero","\x32","\xd4","\x57","\x6e"),
	HX_HCSTRING("isUnit","\x8e","\x8f","\x10","\x6b"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	HX_HCSTRING("compareToSmall","\x27","\xdb","\x2d","\x5d"),
	HX_HCSTRING("compareToBig","\x20","\x4b","\xbc","\xb0"),
	HX_HCSTRING("compareToAbs","\xd2","\x82","\xbb","\xb0"),
	HX_HCSTRING("compareToAbsSmall","\x95","\x64","\xd7","\x37"),
	HX_HCSTRING("compareToAbsBig","\x0e","\xfd","\xe2","\xae"),
	HX_HCSTRING("not","\x13","\xd9","\x53","\x00"),
	HX_HCSTRING("and","\xd7","\xfa","\x49","\x00"),
	HX_HCSTRING("or","\x23","\x61","\x00","\x00"),
	HX_HCSTRING("xor","\x9b","\x6f","\x5b","\x00"),
	HX_HCSTRING("toFloat","\x21","\x12","\x1b","\xcf"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toStringWithBase","\x03","\x1e","\x60","\x23"),
	::String(null()) };

static void Big_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Big_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Big_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Big_obj::__mClass,"__mClass");
};

#endif

hx::Class Big_obj::__mClass;

void Big_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.bigint.Big","\x8b","\x3c","\xe6","\x9d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Big_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Big_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Big_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Big_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Big_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Big_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace bigint
