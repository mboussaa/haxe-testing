// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_thx_DefaultAssertBehavior
#include <thx/DefaultAssertBehavior.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_IAssertBehavior
#include <thx/IAssertBehavior.h>
#endif
#ifndef INCLUDED_thx_error_AssertError
#include <thx/error/AssertError.h>
#endif

namespace thx{

void DefaultAssertBehavior_obj::__construct(){
            	HX_STACK_FRAME("thx.DefaultAssertBehavior","new",0x68cbab01,"thx.DefaultAssertBehavior.new","thx/Assert.hx",685,0x488e8b0d)
            	HX_STACK_THIS(this)
            	}

Dynamic DefaultAssertBehavior_obj::__CreateEmpty() { return new DefaultAssertBehavior_obj; }

hx::ObjectPtr< DefaultAssertBehavior_obj > DefaultAssertBehavior_obj::__new()
{
	hx::ObjectPtr< DefaultAssertBehavior_obj > _hx_result = new DefaultAssertBehavior_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DefaultAssertBehavior_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DefaultAssertBehavior_obj > _hx_result = new DefaultAssertBehavior_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::thx::IAssertBehavior_obj _hx_thx_DefaultAssertBehavior__hx_thx_IAssertBehavior= {
	( void (hx::Object::*)( ::Dynamic))&::thx::DefaultAssertBehavior_obj::success,
	( void (hx::Object::*)(::String, ::Dynamic))&::thx::DefaultAssertBehavior_obj::fail,
	( void (hx::Object::*)(::String, ::Dynamic))&::thx::DefaultAssertBehavior_obj::warn,
};

void *DefaultAssertBehavior_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x98b49bdd: return &_hx_thx_DefaultAssertBehavior__hx_thx_IAssertBehavior;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void DefaultAssertBehavior_obj::success( ::Dynamic pos){
            	HX_STACK_FRAME("thx.DefaultAssertBehavior","success",0x363e64e4,"thx.DefaultAssertBehavior.success","thx/Assert.hx",687,0x488e8b0d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	}


HX_DEFINE_DYNAMIC_FUNC1(DefaultAssertBehavior_obj,success,(void))

void DefaultAssertBehavior_obj::warn(::String message, ::Dynamic pos){
            	HX_STACK_FRAME("thx.DefaultAssertBehavior","warn",0x4f59d485,"thx.DefaultAssertBehavior.warn","thx/Assert.hx",694,0x488e8b0d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(message,"message")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 694)		::haxe::Log_obj::trace(message,pos);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DefaultAssertBehavior_obj,warn,(void))

void DefaultAssertBehavior_obj::fail(::String message, ::Dynamic pos){
            	HX_STACK_FRAME("thx.DefaultAssertBehavior","fail",0x441d2c1d,"thx.DefaultAssertBehavior.fail","thx/Assert.hx",697,0x488e8b0d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(message,"message")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 697)		HX_STACK_DO_THROW( ::thx::error::AssertError_obj::__new(message,pos));
            	}


HX_DEFINE_DYNAMIC_FUNC2(DefaultAssertBehavior_obj,fail,(void))


DefaultAssertBehavior_obj::DefaultAssertBehavior_obj()
{
}

hx::Val DefaultAssertBehavior_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"warn") ) { return hx::Val( warn_dyn()); }
		if (HX_FIELD_EQ(inName,"fail") ) { return hx::Val( fail_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"success") ) { return hx::Val( success_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DefaultAssertBehavior_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *DefaultAssertBehavior_obj_sStaticStorageInfo = 0;
#endif

static ::String DefaultAssertBehavior_obj_sMemberFields[] = {
	HX_HCSTRING("success","\xc3","\x25","\x4e","\xb8"),
	HX_HCSTRING("warn","\x46","\x62","\xf2","\x4e"),
	HX_HCSTRING("fail","\xde","\xb9","\xb5","\x43"),
	::String(null()) };

static void DefaultAssertBehavior_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DefaultAssertBehavior_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DefaultAssertBehavior_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DefaultAssertBehavior_obj::__mClass,"__mClass");
};

#endif

hx::Class DefaultAssertBehavior_obj::__mClass;

void DefaultAssertBehavior_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.DefaultAssertBehavior","\x8f","\x16","\x00","\xa3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DefaultAssertBehavior_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DefaultAssertBehavior_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DefaultAssertBehavior_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DefaultAssertBehavior_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DefaultAssertBehavior_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DefaultAssertBehavior_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
