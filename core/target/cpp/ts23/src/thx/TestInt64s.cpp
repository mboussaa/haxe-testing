// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_thx_Int64s
#include <thx/Int64s.h>
#endif
#ifndef INCLUDED_thx_TestInt64s
#include <thx/TestInt64s.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestInt64s_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestInt64s","new",0x49706994,"thx.TestInt64s.new","thx/TestInt64s.hx",15,0x15a937bb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  15)		this->x = i;
            	}

Dynamic TestInt64s_obj::__CreateEmpty() { return new TestInt64s_obj; }

hx::ObjectPtr< TestInt64s_obj > TestInt64s_obj::__new(Int i)
{
	hx::ObjectPtr< TestInt64s_obj > _hx_result = new TestInt64s_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestInt64s_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestInt64s_obj > _hx_result = new TestInt64s_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestInt64s_obj::testRounding(){
            	HX_STACK_FRAME("thx.TestInt64s","testRounding",0x97b38012,"thx.TestInt64s.testRounding","thx/TestInt64s.hx",19,0x15a937bb)
            	HX_STACK_THIS(this)
HXLINE(  19)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  19)		HX_VARI( Int,_g) = this->x;
HXDLIN(  19)		while((_g1 < _g)){
HXLINE(  19)			++_g1;
HXLINE(  20)			HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(8)->init(0, ::Dynamic(hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("roundUp",49,72,0f,8d),(int)3)
            				->setFixed(1,HX_("round",4e,f8,65,ed),(int)3)
            				->setFixed(2,HX_("div",51,3d,4c,00),(int)2)
            				->setFixed(3,HX_("num",46,de,53,00),(int)5)
            				->setFixed(4,HX_("pos",94,5d,55,00),hx::SourceInfo(HX_("TestInt64s.hx",c6,29,d8,3f),21,HX_("thx.TestInt64s",a2,4f,77,34),HX_("testRounding",c6,df,8a,53)))
            				->setFixed(5,HX_("roundDown",d0,5b,4a,7a),(int)2)))->init(1, ::Dynamic(hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("roundUp",49,72,0f,8d),(int)0)
            				->setFixed(1,HX_("round",4e,f8,65,ed),(int)0)
            				->setFixed(2,HX_("div",51,3d,4c,00),(int)2)
            				->setFixed(3,HX_("num",46,de,53,00),(int)0)
            				->setFixed(4,HX_("pos",94,5d,55,00),hx::SourceInfo(HX_("TestInt64s.hx",c6,29,d8,3f),22,HX_("thx.TestInt64s",a2,4f,77,34),HX_("testRounding",c6,df,8a,53)))
            				->setFixed(5,HX_("roundDown",d0,5b,4a,7a),(int)0)))->init(2, ::Dynamic(hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("roundUp",49,72,0f,8d),(int)1)
            				->setFixed(1,HX_("round",4e,f8,65,ed),(int)0)
            				->setFixed(2,HX_("div",51,3d,4c,00),(int)4)
            				->setFixed(3,HX_("num",46,de,53,00),(int)1)
            				->setFixed(4,HX_("pos",94,5d,55,00),hx::SourceInfo(HX_("TestInt64s.hx",c6,29,d8,3f),23,HX_("thx.TestInt64s",a2,4f,77,34),HX_("testRounding",c6,df,8a,53)))
            				->setFixed(5,HX_("roundDown",d0,5b,4a,7a),(int)0)))->init(3, ::Dynamic(hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("roundUp",49,72,0f,8d),(int)-2)
            				->setFixed(1,HX_("round",4e,f8,65,ed),(int)-2)
            				->setFixed(2,HX_("div",51,3d,4c,00),(int)2)
            				->setFixed(3,HX_("num",46,de,53,00),(int)-5)
            				->setFixed(4,HX_("pos",94,5d,55,00),hx::SourceInfo(HX_("TestInt64s.hx",c6,29,d8,3f),25,HX_("thx.TestInt64s",a2,4f,77,34),HX_("testRounding",c6,df,8a,53)))
            				->setFixed(5,HX_("roundDown",d0,5b,4a,7a),(int)-3)))->init(4, ::Dynamic(hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("roundUp",49,72,0f,8d),(int)0)
            				->setFixed(1,HX_("round",4e,f8,65,ed),(int)0)
            				->setFixed(2,HX_("div",51,3d,4c,00),(int)4)
            				->setFixed(3,HX_("num",46,de,53,00),(int)-1)
            				->setFixed(4,HX_("pos",94,5d,55,00),hx::SourceInfo(HX_("TestInt64s.hx",c6,29,d8,3f),26,HX_("thx.TestInt64s",a2,4f,77,34),HX_("testRounding",c6,df,8a,53)))
            				->setFixed(5,HX_("roundDown",d0,5b,4a,7a),(int)-1)))->init(5, ::Dynamic(hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("roundUp",49,72,0f,8d),(int)0)
            				->setFixed(1,HX_("round",4e,f8,65,ed),(int)0)
            				->setFixed(2,HX_("div",51,3d,4c,00),(int)-2)
            				->setFixed(3,HX_("num",46,de,53,00),(int)0)
            				->setFixed(4,HX_("pos",94,5d,55,00),hx::SourceInfo(HX_("TestInt64s.hx",c6,29,d8,3f),28,HX_("thx.TestInt64s",a2,4f,77,34),HX_("testRounding",c6,df,8a,53)))
            				->setFixed(5,HX_("roundDown",d0,5b,4a,7a),(int)0)))->init(6, ::Dynamic(hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("roundUp",49,72,0f,8d),(int)-2)
            				->setFixed(1,HX_("round",4e,f8,65,ed),(int)-2)
            				->setFixed(2,HX_("div",51,3d,4c,00),(int)-2)
            				->setFixed(3,HX_("num",46,de,53,00),(int)5)
            				->setFixed(4,HX_("pos",94,5d,55,00),hx::SourceInfo(HX_("TestInt64s.hx",c6,29,d8,3f),29,HX_("thx.TestInt64s",a2,4f,77,34),HX_("testRounding",c6,df,8a,53)))
            				->setFixed(5,HX_("roundDown",d0,5b,4a,7a),(int)-3)))->init(7, ::Dynamic(hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("roundUp",49,72,0f,8d),(int)0)
            				->setFixed(1,HX_("round",4e,f8,65,ed),(int)0)
            				->setFixed(2,HX_("div",51,3d,4c,00),(int)-4)
            				->setFixed(3,HX_("num",46,de,53,00),(int)1)
            				->setFixed(4,HX_("pos",94,5d,55,00),hx::SourceInfo(HX_("TestInt64s.hx",c6,29,d8,3f),30,HX_("thx.TestInt64s",a2,4f,77,34),HX_("testRounding",c6,df,8a,53)))
            				->setFixed(5,HX_("roundDown",d0,5b,4a,7a),(int)-1)));
HXLINE(  32)			HX_VAR(  ::cpp::Int64Struct,up);
HXDLIN(  32)			HX_VAR(  ::cpp::Int64Struct,down);
HXDLIN(  32)			HX_VAR(  ::cpp::Int64Struct,round);
HXDLIN(  32)			HX_VAR(  ::cpp::Int64Struct,num);
HXDLIN(  32)			HX_VAR(  ::cpp::Int64Struct,div);
HXLINE(  37)			{
HXLINE(  37)				HX_VARI( Int,_g2) = (int)0;
HXDLIN(  37)				while((_g2 < tests->length)){
HXLINE(  37)					HX_VARI(  ::Dynamic,test) = tests->__get(_g2);
HXDLIN(  37)					++_g2;
HXLINE(  38)					HX_VARI( Int,x) = ( (Int)(test->__Field(HX_("roundUp",49,72,0f,8d),hx::paccDynamic)) );
HXDLIN(  38)					up = ( ::cpp::Int64Struct(x));
HXLINE(  39)					HX_VARI_NAME( Int,x1,"x") = ( (Int)(test->__Field(HX_("roundDown",d0,5b,4a,7a),hx::paccDynamic)) );
HXDLIN(  39)					down = ( ::cpp::Int64Struct(x1));
HXLINE(  40)					HX_VARI_NAME( Int,x2,"x") = ( (Int)(test->__Field(HX_("round",4e,f8,65,ed),hx::paccDynamic)) );
HXDLIN(  40)					round = ( ::cpp::Int64Struct(x2));
HXLINE(  41)					HX_VARI_NAME( Int,x3,"x") = ( (Int)(test->__Field(HX_("num",46,de,53,00),hx::paccDynamic)) );
HXDLIN(  41)					num = ( ::cpp::Int64Struct(x3));
HXLINE(  42)					HX_VARI_NAME( Int,x4,"x") = ( (Int)(test->__Field(HX_("div",51,3d,4c,00),hx::paccDynamic)) );
HXDLIN(  42)					div = ( ::cpp::Int64Struct(x4));
HXLINE(  43)					HX_VARI(  ::cpp::Int64Struct,b) = ::thx::Int64s_obj::divRound(num,div);
HXDLIN(  43)					Bool _hx_tmp = _hx_int64_eq(round,b);
HXDLIN(  43)					::String _hx_tmp1 = _hx_int64_to_string(round);
HXDLIN(  43)					::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  43)					HX_VARI_NAME(  ::cpp::Int64Struct,this1,"this") = ::thx::Int64s_obj::divRound(num,div);
HXDLIN(  43)					::String _hx_tmp3 = _hx_int64_to_string(this1);
HXDLIN(  43)					::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" from ",56,a3,f9,d1));
HXDLIN(  43)					::String _hx_tmp5 = _hx_int64_to_string(num);
HXDLIN(  43)					::String _hx_tmp6 = ((_hx_tmp4 + _hx_tmp5) + HX_(".divRound(",5d,da,ab,94));
HXDLIN(  43)					::String _hx_tmp7 = _hx_int64_to_string(div);
HXDLIN(  43)					::utest::Assert_obj::isTrue(_hx_tmp,((_hx_tmp6 + _hx_tmp7) + HX_(")",29,00,00,00)), ::Dynamic(test->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)));
HXLINE(  44)					HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::Int64s_obj::divCeil(num,div);
HXDLIN(  44)					Bool _hx_tmp8 = _hx_int64_eq(up,b1);
HXDLIN(  44)					::String _hx_tmp9 = _hx_int64_to_string(up);
HXDLIN(  44)					::String _hx_tmp10 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp9) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  44)					HX_VARI_NAME(  ::cpp::Int64Struct,this2,"this") = ::thx::Int64s_obj::divCeil(num,div);
HXDLIN(  44)					::String _hx_tmp11 = _hx_int64_to_string(this2);
HXDLIN(  44)					::String _hx_tmp12 = ((_hx_tmp10 + _hx_tmp11) + HX_(" from ",56,a3,f9,d1));
HXDLIN(  44)					::String _hx_tmp13 = _hx_int64_to_string(num);
HXDLIN(  44)					::String _hx_tmp14 = ((_hx_tmp12 + _hx_tmp13) + HX_(".divCeil(",a0,30,6b,52));
HXDLIN(  44)					::String _hx_tmp15 = _hx_int64_to_string(div);
HXDLIN(  44)					::utest::Assert_obj::isTrue(_hx_tmp8,((_hx_tmp14 + _hx_tmp15) + HX_(")",29,00,00,00)), ::Dynamic(test->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)));
HXLINE(  45)					HX_VARI_NAME(  ::cpp::Int64Struct,b2,"b") = ::thx::Int64s_obj::divFloor(num,div);
HXDLIN(  45)					Bool _hx_tmp16 = _hx_int64_eq(down,b2);
HXDLIN(  45)					::String _hx_tmp17 = _hx_int64_to_string(down);
HXDLIN(  45)					::String _hx_tmp18 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp17) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  45)					HX_VARI_NAME(  ::cpp::Int64Struct,this3,"this") = ::thx::Int64s_obj::divFloor(num,div);
HXDLIN(  45)					::String _hx_tmp19 = _hx_int64_to_string(this3);
HXDLIN(  45)					::String _hx_tmp20 = ((_hx_tmp18 + _hx_tmp19) + HX_(" from ",56,a3,f9,d1));
HXDLIN(  45)					::String _hx_tmp21 = _hx_int64_to_string(num);
HXDLIN(  45)					::String _hx_tmp22 = ((_hx_tmp20 + _hx_tmp21) + HX_(".divFloor(",1f,4f,39,0a));
HXDLIN(  45)					::String _hx_tmp23 = _hx_int64_to_string(div);
HXDLIN(  45)					::utest::Assert_obj::isTrue(_hx_tmp16,((_hx_tmp22 + _hx_tmp23) + HX_(")",29,00,00,00)), ::Dynamic(test->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestInt64s_obj,testRounding,(void))

 ::Dynamic TestInt64s_obj::here( ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestInt64s","here",0xf4f4ac3c,"thx.TestInt64s.here","thx/TestInt64s.hx",49,0x15a937bb)
            	HX_STACK_ARG(pos,"pos")
HXLINE(  49)		return pos;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TestInt64s_obj,here,return )


TestInt64s_obj::TestInt64s_obj()
{
}

hx::Val TestInt64s_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testRounding") ) { return hx::Val( testRounding_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestInt64s_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"here") ) { outValue = here_dyn(); return true; }
	}
	return false;
}

hx::Val TestInt64s_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestInt64s_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestInt64s_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestInt64s_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestInt64s_obj_sStaticStorageInfo = 0;
#endif

static ::String TestInt64s_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testRounding","\xc6","\xdf","\x8a","\x53"),
	::String(null()) };

static void TestInt64s_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestInt64s_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestInt64s_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestInt64s_obj::__mClass,"__mClass");
};

#endif

hx::Class TestInt64s_obj::__mClass;

static ::String TestInt64s_obj_sStaticFields[] = {
	HX_HCSTRING("here","\xf0","\x37","\x0b","\x45"),
	::String(null())
};

void TestInt64s_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestInt64s","\xa2","\x4f","\x77","\x34");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestInt64s_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestInt64s_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestInt64s_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestInt64s_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestInt64s_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestInt64s_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestInt64s_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestInt64s_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
