// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_TestUrl
#include <thx/TestUrl.h>
#endif
#ifndef INCLUDED_thx__Url_Url_Impl_
#include <thx/_Url/Url_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestUrl_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestUrl","new",0xa00afea5,"thx.TestUrl.new","thx/TestUrl.hx",9,0xc9e8c7ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   9)		this->x = i;
            	}

Dynamic TestUrl_obj::__CreateEmpty() { return new TestUrl_obj; }

hx::ObjectPtr< TestUrl_obj > TestUrl_obj::__new(Int i)
{
	hx::ObjectPtr< TestUrl_obj > _hx_result = new TestUrl_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestUrl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestUrl_obj > _hx_result = new TestUrl_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestUrl_obj::testBasics(){
            	HX_STACK_FRAME("thx.TestUrl","testBasics",0xbe62c852,"thx.TestUrl.testBasics","thx/TestUrl.hx",13,0xc9e8c7ac)
            	HX_STACK_THIS(this)
HXLINE(  13)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  13)		HX_VARI( Int,_g) = this->x;
HXDLIN(  13)		while((_g1 < _g)){
HXLINE(  13)			++_g1;
HXLINE(  14)			HX_VARI(  ::Dynamic,url) = ::thx::_Url::Url_Impl__obj::fromString(HX_("http://user:password@www.example.com:8888/some/path/name.ext?a=b&c=d#hashtag/is/here",3a,5a,42,f9));
HXLINE(  15)			::utest::Assert_obj::equals(HX_("http",88,9b,16,45), ::Dynamic(url->__Field(HX_("protocol",58,56,63,00),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),15,HX_("thx.TestUrl",33,c8,5b,36),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  16)			::utest::Assert_obj::equals(HX_("user:password",aa,39,63,f6), ::Dynamic(url->__Field(HX_("auth",68,df,76,40),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),16,HX_("thx.TestUrl",33,c8,5b,36),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  17)			::String _hx_tmp;
HXDLIN(  17)			if (hx::IsNotNull( url->__Field(HX_("port",81,83,5c,4a),hx::paccDynamic) )) {
HXLINE(  17)				_hx_tmp = (HX_(":",3a,00,00,00) + url->__Field(HX_("port",81,83,5c,4a),hx::paccDynamic));
            			}
            			else {
HXLINE(  17)				_hx_tmp = HX_("",00,00,00,00);
            			}
HXDLIN(  17)			::utest::Assert_obj::equals(HX_("www.example.com:8888",14,72,b0,14),(( (::String)(url->__Field(HX_("hostName",d3,41,ab,3d),hx::paccDynamic)) ) + _hx_tmp),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),17,HX_("thx.TestUrl",33,c8,5b,36),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  18)			::utest::Assert_obj::equals(HX_("www.example.com",66,c3,1f,e5), ::Dynamic(url->__Field(HX_("hostName",d3,41,ab,3d),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),18,HX_("thx.TestUrl",33,c8,5b,36),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  21)			Bool _hx_tmp1;
HXDLIN(  21)			::String _hx_tmp2;
HXDLIN(  21)			Bool _hx_tmp3;
HXDLIN(  21)			if (hx::IsNull( ( (::String)(url->__Field(HX_("search",68,9f,f7,62),hx::paccDynamic)) ) )) {
HXLINE(  21)				if (hx::IsNotNull( ( ( ::haxe::ds::StringMap)(url->__Field(HX_("queryString",f9,1d,55,63),hx::paccDynamic)) ) )) {
HXLINE(  21)					_hx_tmp3 = !(!(( (Bool)( ::Dynamic(( ( ::haxe::ds::StringMap)(url->__Field(HX_("queryString",f9,1d,55,63),hx::paccDynamic)) )->iterator()->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) )));
            				}
            				else {
HXLINE(  21)					_hx_tmp3 = false;
            				}
            			}
            			else {
HXLINE(  21)				_hx_tmp3 = true;
            			}
HXDLIN(  21)			if (_hx_tmp3) {
HXLINE(  21)				::String _hx_tmp4 = ::thx::_Url::Url_Impl__obj::get_search(url);
HXDLIN(  21)				_hx_tmp2 = (HX_("?",3f,00,00,00) + _hx_tmp4);
            			}
            			else {
HXLINE(  21)				_hx_tmp2 = HX_("",00,00,00,00);
            			}
HXDLIN(  21)			if ((HX_("/some/path/name.ext?a=b&c=d",47,bf,c0,f3) != (( (::String)(url->__Field(HX_("pathName",90,ba,9e,3e),hx::paccDynamic)) ) + _hx_tmp2))) {
HXLINE(  22)				::String _hx_tmp5;
HXDLIN(  22)				Bool _hx_tmp6;
HXDLIN(  22)				if (hx::IsNull( ( (::String)(url->__Field(HX_("search",68,9f,f7,62),hx::paccDynamic)) ) )) {
HXLINE(  22)					if (hx::IsNotNull( ( ( ::haxe::ds::StringMap)(url->__Field(HX_("queryString",f9,1d,55,63),hx::paccDynamic)) ) )) {
HXLINE(  22)						_hx_tmp6 = !(!(( (Bool)( ::Dynamic(( ( ::haxe::ds::StringMap)(url->__Field(HX_("queryString",f9,1d,55,63),hx::paccDynamic)) )->iterator()->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) )));
            					}
            					else {
HXLINE(  22)						_hx_tmp6 = false;
            					}
            				}
            				else {
HXLINE(  22)					_hx_tmp6 = true;
            				}
HXDLIN(  22)				if (_hx_tmp6) {
HXLINE(  22)					::String _hx_tmp7 = ::thx::_Url::Url_Impl__obj::get_search(url);
HXDLIN(  22)					_hx_tmp5 = (HX_("?",3f,00,00,00) + _hx_tmp7);
            				}
            				else {
HXLINE(  22)					_hx_tmp5 = HX_("",00,00,00,00);
            				}
HXLINE(  21)				_hx_tmp1 = (HX_("/some/path/name.ext?c=d&a=b",47,51,b7,6d) == (( (::String)(url->__Field(HX_("pathName",90,ba,9e,3e),hx::paccDynamic)) ) + _hx_tmp5));
            			}
            			else {
HXLINE(  21)				_hx_tmp1 = true;
            			}
HXLINE(  20)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),20,HX_("thx.TestUrl",33,c8,5b,36),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  24)			::utest::Assert_obj::equals(HX_("/some/path/name.ext",3c,c2,1a,28), ::Dynamic(url->__Field(HX_("pathName",90,ba,9e,3e),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),24,HX_("thx.TestUrl",33,c8,5b,36),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  25)			::utest::Assert_obj::equals(HX_("hashtag/is/here",72,4e,bf,53), ::Dynamic(url->__Field(HX_("hash",ce,2f,08,45),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),25,HX_("thx.TestUrl",33,c8,5b,36),HX_("testBasics",f7,73,1f,6e)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestUrl_obj,testBasics,(void))

void TestUrl_obj::testToString(){
            	HX_STACK_FRAME("thx.TestUrl","testToString",0x127b5839,"thx.TestUrl.testToString","thx/TestUrl.hx",29,0xc9e8c7ac)
            	HX_STACK_THIS(this)
HXLINE(  29)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  29)		HX_VARI( Int,_g) = this->x;
HXDLIN(  29)		while((_g1 < _g)){
HXLINE(  29)			++_g1;
HXLINE(  30)			HX_VARI( ::Array< ::String >,urls) = ::Array_obj< ::String >::__new(10)->init(0,HX_("http://user:password@www.example.com:8888/some/path/name.ext?a=b#hashtag/is/here",76,b2,c5,b2))->init(1,HX_("http://example.com",eb,7d,74,23))->init(2,HX_("irc://irc.example.com/channel",9d,c5,1b,6d))->init(3,HX_("www.example.com/foo",9d,3c,fb,5d))->init(4,HX_("news:rec.gardens.roses",6f,16,94,c0))->init(5,HX_("ldap://[2001:db8::7]/c=GB?objectClass?one",d8,3a,8b,75))->init(6,HX_("mailto:John.Doe@example.com",5c,9e,98,75))->init(7,HX_("telnet://192.0.2.16:80/",b8,91,3e,22))->init(8,HX_("ldap://ldap.example.com/dc=example,dc=com",3d,c6,33,0f))->init(9,HX_("ldap://ldap.example.com/cn=Barbara%20Jensen,dc=example,dc=com?cn,mail,telephoneNumber",e8,08,72,43));
HXLINE(  42)			{
HXLINE(  42)				HX_VARI( Int,_g2) = (int)0;
HXDLIN(  42)				while((_g2 < urls->length)){
HXLINE(  42)					HX_VARI( ::String,url) = urls->__get(_g2);
HXDLIN(  42)					++_g2;
HXLINE(  43)					 ::Dynamic _hx_tmp = ::thx::_Url::Url_Impl__obj::parse(url,false);
HXDLIN(  43)					::String _hx_tmp1 = ::thx::_Url::Url_Impl__obj::toString(_hx_tmp);
HXDLIN(  43)					::utest::Assert_obj::equals(url,_hx_tmp1,null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),43,HX_("thx.TestUrl",33,c8,5b,36),HX_("testToString",1e,f7,75,ab)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestUrl_obj,testToString,(void))

void TestUrl_obj::testAbsolute(){
            	HX_STACK_FRAME("thx.TestUrl","testAbsolute",0x9da25604,"thx.TestUrl.testAbsolute","thx/TestUrl.hx",47,0xc9e8c7ac)
            	HX_STACK_THIS(this)
HXLINE(  47)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  47)		HX_VARI( Int,_g) = this->x;
HXDLIN(  47)		while((_g1 < _g)){
HXLINE(  47)			++_g1;
HXLINE(  48)			HX_VARI(  ::Dynamic,url) = ::thx::_Url::Url_Impl__obj::fromString(HX_("http://example.com",eb,7d,74,23));
HXLINE(  49)			::utest::Assert_obj::isTrue(hx::IsNotNull( ( (::String)(url->__Field(HX_("hostName",d3,41,ab,3d),hx::paccDynamic)) ) ),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),49,HX_("thx.TestUrl",33,c8,5b,36),HX_("testAbsolute",e9,f4,9c,36)));
HXLINE(  50)			::utest::Assert_obj::isFalse(hx::IsNull( ( (::String)(url->__Field(HX_("hostName",d3,41,ab,3d),hx::paccDynamic)) ) ),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),50,HX_("thx.TestUrl",33,c8,5b,36),HX_("testAbsolute",e9,f4,9c,36)));
HXLINE(  52)			url = ::thx::_Url::Url_Impl__obj::fromString(HX_("example.com",fd,b5,b6,e8));
HXLINE(  53)			::utest::Assert_obj::isTrue(hx::IsNotNull( ( (::String)(url->__Field(HX_("hostName",d3,41,ab,3d),hx::paccDynamic)) ) ),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),53,HX_("thx.TestUrl",33,c8,5b,36),HX_("testAbsolute",e9,f4,9c,36)));
HXLINE(  54)			::utest::Assert_obj::isFalse(hx::IsNull( ( (::String)(url->__Field(HX_("hostName",d3,41,ab,3d),hx::paccDynamic)) ) ),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),54,HX_("thx.TestUrl",33,c8,5b,36),HX_("testAbsolute",e9,f4,9c,36)));
HXLINE(  56)			url = ::thx::_Url::Url_Impl__obj::fromString(HX_("/some/path",d1,d3,d3,4d));
HXLINE(  57)			::utest::Assert_obj::isFalse(hx::IsNotNull( ( (::String)(url->__Field(HX_("hostName",d3,41,ab,3d),hx::paccDynamic)) ) ),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),57,HX_("thx.TestUrl",33,c8,5b,36),HX_("testAbsolute",e9,f4,9c,36)));
HXLINE(  58)			::utest::Assert_obj::isTrue(hx::IsNull( ( (::String)(url->__Field(HX_("hostName",d3,41,ab,3d),hx::paccDynamic)) ) ),null(),hx::SourceInfo(HX_("TestUrl.hx",c1,f0,9a,c2),58,HX_("thx.TestUrl",33,c8,5b,36),HX_("testAbsolute",e9,f4,9c,36)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestUrl_obj,testAbsolute,(void))


TestUrl_obj::TestUrl_obj()
{
}

hx::Val TestUrl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testToString") ) { return hx::Val( testToString_dyn()); }
		if (HX_FIELD_EQ(inName,"testAbsolute") ) { return hx::Val( testAbsolute_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestUrl_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestUrl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestUrl_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestUrl_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestUrl_obj_sStaticStorageInfo = 0;
#endif

static ::String TestUrl_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testToString","\x1e","\xf7","\x75","\xab"),
	HX_HCSTRING("testAbsolute","\xe9","\xf4","\x9c","\x36"),
	::String(null()) };

static void TestUrl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestUrl_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestUrl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestUrl_obj::__mClass,"__mClass");
};

#endif

hx::Class TestUrl_obj::__mClass;

void TestUrl_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestUrl","\x33","\xc8","\x5b","\x36");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestUrl_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestUrl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestUrl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestUrl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestUrl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestUrl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
