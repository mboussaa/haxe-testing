// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_fp_TestList
#define INCLUDED_thx_fp_TestList

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,fp,TestList)

namespace thx{
namespace fp{


class HXCPP_CLASS_ATTRIBUTES TestList_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestList_obj OBJ_;
		TestList_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.fp.TestList")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.fp.TestList"); }
		static hx::ObjectPtr< TestList_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestList_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestList","\xf0","\x5d","\x97","\x24"); }

		Int x;
		void testFoldLeft();
		::Dynamic testFoldLeft_dyn();

		void testToArray();
		::Dynamic testToArray_dyn();

		void testIntersperse();
		::Dynamic testIntersperse_dyn();

		void testFromArray();
		::Dynamic testFromArray_dyn();

		void testConcat();
		::Dynamic testConcat_dyn();

		void testToString();
		::Dynamic testToString_dyn();

		void testMap();
		::Dynamic testMap_dyn();

		void testFlatMap();
		::Dynamic testFlatMap_dyn();

		void testZip5Ap();
		::Dynamic testZip5Ap_dyn();

};

} // end namespace thx
} // end namespace fp

#endif /* INCLUDED_thx_fp_TestList */ 
