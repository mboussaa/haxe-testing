// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_fp_ListImpl
#include <thx/fp/ListImpl.h>
#endif
#ifndef INCLUDED_thx_fp_ObjectList
#include <thx/fp/ObjectList.h>
#endif
#ifndef INCLUDED_thx_fp__List_List_Impl_
#include <thx/fp/_List/List_Impl_.h>
#endif

namespace thx{
namespace fp{

void ObjectList_obj::__construct() { }

Dynamic ObjectList_obj::__CreateEmpty() { return new ObjectList_obj; }

hx::ObjectPtr< ObjectList_obj > ObjectList_obj::__new()
{
	hx::ObjectPtr< ObjectList_obj > _hx_result = new ObjectList_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ObjectList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ObjectList_obj > _hx_result = new ObjectList_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String ObjectList_obj::toString(::hx::EnumBase l){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run( ::Dynamic o){
            			HX_STACK_FRAME("thx.fp.ObjectList","toString",0x1db525e3,"thx.fp.ObjectList.toString","thx/fp/Lists.hx",23,0xab47d703)
            			HX_STACK_ARG(o,"o")
HXLINE(  23)			return o->toString();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.fp.ObjectList","toString",0x1db525e3,"thx.fp.ObjectList.toString","thx/fp/Lists.hx",23,0xab47d703)
            	HX_STACK_ARG(l,"l")
HXLINE(  23)		return ::thx::fp::_List::List_Impl__obj::toStringWithShow(l, ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ObjectList_obj,toString,return )


ObjectList_obj::ObjectList_obj()
{
}

bool ObjectList_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ObjectList_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ObjectList_obj_sStaticStorageInfo = 0;
#endif

static void ObjectList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ObjectList_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ObjectList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ObjectList_obj::__mClass,"__mClass");
};

#endif

hx::Class ObjectList_obj::__mClass;

static ::String ObjectList_obj_sStaticFields[] = {
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null())
};

void ObjectList_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.fp.ObjectList","\x17","\x8e","\x29","\x8a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ObjectList_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ObjectList_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ObjectList_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ObjectList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ObjectList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace fp
