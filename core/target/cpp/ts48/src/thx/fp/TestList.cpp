// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_fp_ListImpl
#include <thx/fp/ListImpl.h>
#endif
#ifndef INCLUDED_thx_fp_TestList
#include <thx/fp/TestList.h>
#endif
#ifndef INCLUDED_thx_fp__List_List_Impl_
#include <thx/fp/_List/List_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace fp{

void TestList_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.fp.TestList","new",0x4f15709c,"thx.fp.TestList.new","thx/fp/TestList.hx",11,0x13eda3b4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  11)		this->x = i;
            	}

Dynamic TestList_obj::__CreateEmpty() { return new TestList_obj; }

hx::ObjectPtr< TestList_obj > TestList_obj::__new(Int i)
{
	hx::ObjectPtr< TestList_obj > _hx_result = new TestList_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestList_obj > _hx_result = new TestList_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestList_obj::testFoldLeft(){
            	HX_STACK_FRAME("thx.fp.TestList","testFoldLeft",0x2793c35e,"thx.fp.TestList.testFoldLeft","thx/fp/TestList.hx",15,0x13eda3b4)
            	HX_STACK_THIS(this)
HXLINE(  15)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  15)		HX_VARI( Int,_g) = this->x;
HXDLIN(  15)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			Int _hx_run( ::Dynamic _0, ::Dynamic _1){
            				HX_STACK_FRAME("thx.fp.TestList","testFoldLeft",0x2793c35e,"thx.fp.TestList.testFoldLeft","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_0,"_0")
            				HX_STACK_ARG(_1,"_1")
HXLINE(  86)				return (_0 + _1);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            			::Array< Int > _hx_run(::Array< Int > acc,Int v){
            				HX_STACK_FRAME("thx.fp.TestList","testFoldLeft",0x2793c35e,"thx.fp.TestList.testFoldLeft","thx/fp/TestList.hx",19,0x13eda3b4)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(v,"v")
HXLINE(  20)				acc->push(v);
HXLINE(  21)				return acc;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  15)			++_g1;
HXLINE(  16)			::hx::EnumBase _hx_tmp = ::thx::fp::ListImpl_obj::Cons((int)3,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  16)			::hx::EnumBase _hx_tmp1 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp);
HXDLIN(  16)			HX_VARI( ::hx::EnumBase,list) = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp1);
HXLINE(  17)			Int _hx_tmp2 = ( (Int)(::thx::fp::_List::List_Impl__obj::foldLeft(list,(int)0, ::Dynamic(new _hx_Closure_0()))) );
HXDLIN(  17)			::utest::Assert_obj::equals((int)6,_hx_tmp2,null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),17,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testFoldLeft",1a,4b,15,3a)));
HXLINE(  19)			::Array< Int > _hx_tmp3 = ( (::Array< Int >)(::thx::fp::_List::List_Impl__obj::foldLeft(list,::Array_obj< Int >::__new(0), ::Dynamic(new _hx_Closure_1()))) );
HXDLIN(  19)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),19,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testFoldLeft",1a,4b,15,3a)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestList_obj,testFoldLeft,(void))

void TestList_obj::testToArray(){
            	HX_STACK_FRAME("thx.fp.TestList","testToArray",0x78d2e428,"thx.fp.TestList.testToArray","thx/fp/TestList.hx",26,0x13eda3b4)
            	HX_STACK_THIS(this)
HXLINE(  26)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  26)		HX_VARI( Int,_g) = this->x;
HXDLIN(  26)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			::Array< Int > _hx_run(::Array< Int > acc,Int a){
            				HX_STACK_FRAME("thx.fp.TestList","testToArray",0x78d2e428,"thx.fp.TestList.testToArray","thx/fp/TestList.hx",28,0x13eda3b4)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(a,"a")
HXLINE(  28)				acc->push(a);
HXDLIN(  28)				return acc;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  26)			++_g1;
HXLINE(  27)			::hx::EnumBase _hx_tmp = ::thx::fp::ListImpl_obj::Cons((int)3,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  27)			::hx::EnumBase _hx_tmp1 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp);
HXDLIN(  27)			HX_VARI( ::hx::EnumBase,list) = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp1);
HXLINE(  28)			::Array< Int > _hx_tmp2 = ( (::Array< Int >)(::thx::fp::_List::List_Impl__obj::foldLeft(list,::Array_obj< Int >::__new(0), ::Dynamic(new _hx_Closure_0()))) );
HXDLIN(  28)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),28,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testToArray",ec,a7,dc,ae)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestList_obj,testToArray,(void))

void TestList_obj::testIntersperse(){
            	HX_STACK_FRAME("thx.fp.TestList","testIntersperse",0xc9b5dc82,"thx.fp.TestList.testIntersperse","thx/fp/TestList.hx",32,0x13eda3b4)
            	HX_STACK_THIS(this)
HXLINE(  32)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  32)		HX_VARI( Int,_g) = this->x;
HXDLIN(  32)		while((_g1 < _g)){
HXLINE(  32)			++_g1;
HXLINE(  33)			::hx::EnumBase _hx_tmp = ::thx::fp::ListImpl_obj::Cons((int)3,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  33)			::hx::EnumBase _hx_tmp1 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp);
HXDLIN(  33)			HX_VARI( ::hx::EnumBase,list) = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp1);
HXDLIN(  33)			HX_VARI( ::hx::EnumBase,interspersed) = ::thx::fp::_List::List_Impl__obj::intersperse(list,(int)0);
HXLINE(  35)			::hx::EnumBase _hx_tmp2 = ::thx::fp::ListImpl_obj::Cons((int)3,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  35)			::hx::EnumBase _hx_tmp3 = ::thx::fp::ListImpl_obj::Cons((int)0,_hx_tmp2);
HXDLIN(  35)			::hx::EnumBase _hx_tmp4 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp3);
HXDLIN(  35)			::hx::EnumBase _hx_tmp5 = ::thx::fp::ListImpl_obj::Cons((int)0,_hx_tmp4);
HXDLIN(  35)			::hx::EnumBase _hx_tmp6 = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp5);
HXDLIN(  35)			::utest::Assert_obj::same(_hx_tmp6,interspersed,null(),null(),null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),35,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testIntersperse",46,d2,e6,35)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestList_obj,testIntersperse,(void))

void TestList_obj::testFromArray(){
            	HX_STACK_FRAME("thx.fp.TestList","testFromArray",0xee7d9859,"thx.fp.TestList.testFromArray","thx/fp/TestList.hx",39,0x13eda3b4)
            	HX_STACK_THIS(this)
HXLINE(  39)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  39)		HX_VARI( Int,_g) = this->x;
HXDLIN(  39)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,_e) HXARGC(2)
            			::hx::EnumBase _hx_run( ::Dynamic f,::hx::EnumBase initial){
            				HX_STACK_FRAME("thx.fp.TestList","testFromArray",0xee7d9859,"thx.fp.TestList.testFromArray","thx/fp/TestList.hx",41,0x13eda3b4)
            				HX_STACK_ARG(f,"f")
            				HX_STACK_ARG(initial,"initial")
HXLINE(  41)				HX_VARI_NAME( ::hx::EnumBase,initial1,"initial") = initial;
HXDLIN(  41)				HX_VARI( Int,i) = _e->length;
HXDLIN(  41)				while(true){
HXLINE( 787)					Int _hx_tmp1 = --i;
HXLINE(  41)					if (!((_hx_tmp1 >= (int)0))) {
HXLINE(  41)						goto _hx_goto_4;
            					}
HXDLIN(  41)					initial1 = f(initial1,_e->__get(i));
            				}
            				_hx_goto_4:;
HXDLIN(  41)				return initial1;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            			::hx::EnumBase _hx_run(::hx::EnumBase _0, ::Dynamic _1){
            				HX_STACK_FRAME("thx.fp.TestList","testFromArray",0xee7d9859,"thx.fp.TestList.testFromArray","thx/fp/TestList.hx",41,0x13eda3b4)
            				HX_STACK_ARG(_0,"_0")
            				HX_STACK_ARG(_1,"_1")
HXLINE(  41)				return ::thx::fp::ListImpl_obj::Cons(_1,_0);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            			::Array< Int > _hx_run(::Array< Int > acc,Int a){
            				HX_STACK_FRAME("thx.fp.TestList","testFromArray",0xee7d9859,"thx.fp.TestList.testFromArray","thx/fp/TestList.hx",41,0x13eda3b4)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(a,"a")
HXLINE(  41)				acc->push(a);
HXDLIN(  41)				return acc;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  39)			++_g1;
HXLINE(  40)			HX_VARI( ::Array< Int >,arr) = ::Array_obj< Int >::__new(4)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4);
HXLINE(  41)			HX_VARI( ::Array< Int >,_e) = arr;
HXDLIN(  41)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_e));
HXDLIN(  41)			HX_VARI_NAME( ::hx::EnumBase,this1,"this") = _hx_tmp( ::Dynamic(new _hx_Closure_1()),::thx::fp::_List::List_Impl__obj::empty());
HXDLIN(  41)			::Array< Int > _hx_tmp2 = ( (::Array< Int >)(::thx::fp::_List::List_Impl__obj::foldLeft(this1,::Array_obj< Int >::__new(0), ::Dynamic(new _hx_Closure_2()))) );
HXDLIN(  41)			::utest::Assert_obj::same(arr,_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),41,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testFromArray",1d,d5,52,0d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestList_obj,testFromArray,(void))

void TestList_obj::testConcat(){
            	HX_STACK_FRAME("thx.fp.TestList","testConcat",0x4b496e4a,"thx.fp.TestList.testConcat","thx/fp/TestList.hx",45,0x13eda3b4)
            	HX_STACK_THIS(this)
HXLINE(  45)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  45)		HX_VARI( Int,_g) = this->x;
HXDLIN(  45)		while((_g1 < _g)){
HXLINE(  45)			++_g1;
HXLINE(  46)			::hx::EnumBase _hx_tmp = ::thx::fp::ListImpl_obj::Cons((int)2,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  46)			HX_VARI( ::hx::EnumBase,l1) = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp);
HXLINE(  47)			::hx::EnumBase _hx_tmp1 = ::thx::fp::ListImpl_obj::Cons((int)4,::thx::fp::ListImpl_obj::Nil_dyn());
HXLINE(  46)			HX_VARI( ::hx::EnumBase,l2) = ::thx::fp::ListImpl_obj::Cons((int)3,_hx_tmp1);
HXDLIN(  46)			HX_VARI( ::hx::EnumBase,l) = ::thx::fp::_List::List_Impl__obj::concat(l1,l2);
HXLINE(  49)			::hx::EnumBase _hx_tmp2 = ::thx::fp::ListImpl_obj::Cons((int)4,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  49)			::hx::EnumBase _hx_tmp3 = ::thx::fp::ListImpl_obj::Cons((int)3,_hx_tmp2);
HXDLIN(  49)			::hx::EnumBase _hx_tmp4 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp3);
HXDLIN(  49)			::hx::EnumBase _hx_tmp5 = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp4);
HXDLIN(  49)			::utest::Assert_obj::same(_hx_tmp5,l,null(),null(),null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),49,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testConcat",06,4f,c4,e0)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestList_obj,testConcat,(void))

void TestList_obj::testToString(){
            	HX_STACK_FRAME("thx.fp.TestList","testToString",0x98f46f62,"thx.fp.TestList.testToString","thx/fp/TestList.hx",53,0x13eda3b4)
            	HX_STACK_THIS(this)
HXLINE(  53)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  53)		HX_VARI( Int,_g) = this->x;
HXDLIN(  53)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			::String _hx_run(Int a1){
            				HX_STACK_FRAME("thx.fp.TestList","testToString",0x98f46f62,"thx.fp.TestList.testToString","thx/fp/TestList.hx",55,0x13eda3b4)
            				HX_STACK_ARG(a1,"a1")
HXLINE(  55)				return ::thx::Ints_obj::toString(a1,(int)10);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            			::String _hx_run(::String _0,::String _1){
            				HX_STACK_FRAME("thx.fp.TestList","testToString",0x98f46f62,"thx.fp.TestList.testToString","thx/fp/TestList.hx",58,0x13eda3b4)
            				HX_STACK_ARG(_0,"_0")
            				HX_STACK_ARG(_1,"_1")
HXLINE(  58)				return (_0 + _1);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  53)			++_g1;
HXLINE(  54)			::hx::EnumBase _hx_tmp = ::thx::fp::ListImpl_obj::Cons((int)3,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  54)			::hx::EnumBase _hx_tmp1 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp);
HXDLIN(  54)			HX_VARI( ::hx::EnumBase,list) = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp1);
HXLINE(  55)			::String _hx_tmp2 = ::thx::fp::_List::List_Impl__obj::toStringWithShow(list, ::Dynamic(new _hx_Closure_0()));
HXDLIN(  55)			::utest::Assert_obj::same(HX_("[1,2,3]",fa,a5,6d,d6),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),55,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testToString",1e,f7,75,ab)));
HXLINE(  57)			::hx::EnumBase _hx_tmp3 = ::thx::fp::ListImpl_obj::Cons(HX_("3",33,00,00,00),::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  57)			::hx::EnumBase _hx_tmp4 = ::thx::fp::ListImpl_obj::Cons(HX_("2",32,00,00,00),_hx_tmp3);
HXDLIN(  57)			HX_VARI_NAME( ::hx::EnumBase,list1,"list") = ::thx::fp::ListImpl_obj::Cons(HX_("1",31,00,00,00),_hx_tmp4);
HXLINE(  58)			::hx::EnumBase _hx_tmp5 = ::thx::fp::_List::List_Impl__obj::intersperse(list1,HX_(",",2c,00,00,00));
HXDLIN(  58)			::String _hx_tmp6 = ( (::String)(::thx::fp::_List::List_Impl__obj::foldLeft(_hx_tmp5,HX_("",00,00,00,00), ::Dynamic(new _hx_Closure_1()))) );
HXDLIN(  58)			::utest::Assert_obj::same(HX_("[1,2,3]",fa,a5,6d,d6),((HX_("[",5b,00,00,00) + _hx_tmp6) + HX_("]",5d,00,00,00)),null(),null(),null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),58,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testToString",1e,f7,75,ab)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestList_obj,testToString,(void))

void TestList_obj::testMap(){
            	HX_STACK_FRAME("thx.fp.TestList","testMap",0xa9dde7a6,"thx.fp.TestList.testMap","thx/fp/TestList.hx",62,0x13eda3b4)
            	HX_STACK_THIS(this)
HXLINE(  62)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  62)		HX_VARI( Int,_g) = this->x;
HXDLIN(  62)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			Int _hx_run(Int v){
            				HX_STACK_FRAME("thx.fp.TestList","testMap",0xa9dde7a6,"thx.fp.TestList.testMap","thx/fp/TestList.hx",64,0x13eda3b4)
            				HX_STACK_ARG(v,"v")
HXLINE(  64)				return (v * (int)2);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  62)			++_g1;
HXLINE(  63)			::hx::EnumBase _hx_tmp = ::thx::fp::ListImpl_obj::Cons((int)3,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  63)			::hx::EnumBase _hx_tmp1 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp);
HXDLIN(  63)			HX_VARI( ::hx::EnumBase,list) = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp1);
HXLINE(  64)			::hx::EnumBase _hx_tmp2 = ::thx::fp::ListImpl_obj::Cons((int)6,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  64)			::hx::EnumBase _hx_tmp3 = ::thx::fp::ListImpl_obj::Cons((int)4,_hx_tmp2);
HXDLIN(  64)			::hx::EnumBase _hx_tmp4 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp3);
HXDLIN(  64)			::hx::EnumBase _hx_tmp5 = ::thx::fp::_List::List_Impl__obj::map(list, ::Dynamic(new _hx_Closure_0()));
HXDLIN(  64)			::utest::Assert_obj::same(_hx_tmp4,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),64,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testMap",6a,79,c1,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestList_obj,testMap,(void))

void TestList_obj::testFlatMap(){
            	HX_STACK_FRAME("thx.fp.TestList","testFlatMap",0x6d9d3a6d,"thx.fp.TestList.testFlatMap","thx/fp/TestList.hx",68,0x13eda3b4)
            	HX_STACK_THIS(this)
HXLINE(  68)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  68)		HX_VARI( Int,_g) = this->x;
HXDLIN(  68)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,map) HXARGC(1)
            			::hx::EnumBase _hx_run(Int v){
            				HX_STACK_FRAME("thx.fp.TestList","testFlatMap",0x6d9d3a6d,"thx.fp.TestList.testFlatMap","thx/fp/TestList.hx",71,0x13eda3b4)
            				HX_STACK_ARG(v,"v")
HXLINE(  71)				if ((v == (int)0)) {
HXLINE(  72)					return ::thx::fp::ListImpl_obj::Nil_dyn();
            				}
            				else {
HXLINE(  74)					HX_VARI( ::hx::EnumBase,xs) = map->__get((int)0)((v - (int)1));
HXDLIN(  74)					return ::thx::fp::ListImpl_obj::Cons(v,xs);
            				}
HXLINE(  71)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  68)			++_g1;
HXLINE(  69)			::hx::EnumBase _hx_tmp = ::thx::fp::ListImpl_obj::Cons((int)3,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  69)			::hx::EnumBase _hx_tmp1 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp);
HXDLIN(  69)			HX_VARI( ::hx::EnumBase,list) = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp1);
HXLINE(  70)			HX_VARI( ::Array< ::Dynamic>,map) = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(  70)			map[(int)0] =  ::Dynamic(new _hx_Closure_0(map));
HXLINE(  76)			HX_VARI( ::hx::EnumBase,slist) = ::thx::fp::_List::List_Impl__obj::flatMap(list,map->__get((int)0));
HXLINE(  77)			::hx::EnumBase _hx_tmp2 = ::thx::fp::ListImpl_obj::Cons((int)1,::thx::fp::ListImpl_obj::Nil_dyn());
HXDLIN(  77)			::hx::EnumBase _hx_tmp3 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp2);
HXDLIN(  77)			::hx::EnumBase _hx_tmp4 = ::thx::fp::ListImpl_obj::Cons((int)3,_hx_tmp3);
HXDLIN(  77)			::hx::EnumBase _hx_tmp5 = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp4);
HXDLIN(  77)			::hx::EnumBase _hx_tmp6 = ::thx::fp::ListImpl_obj::Cons((int)2,_hx_tmp5);
HXDLIN(  77)			::hx::EnumBase _hx_tmp7 = ::thx::fp::ListImpl_obj::Cons((int)1,_hx_tmp6);
HXDLIN(  77)			::utest::Assert_obj::same(_hx_tmp7,slist,null(),null(),null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),77,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testFlatMap",31,fe,a6,a3)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestList_obj,testFlatMap,(void))

void TestList_obj::testZip5Ap(){
            	HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",82,0x13eda3b4)
            	HX_STACK_THIS(this)
HXLINE(  82)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  82)		HX_VARI( Int,_g) = this->x;
HXDLIN(  82)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,_e) HXARGC(2)
            			::hx::EnumBase _hx_run( ::Dynamic f,::hx::EnumBase initial){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",83,0x13eda3b4)
            				HX_STACK_ARG(f,"f")
            				HX_STACK_ARG(initial,"initial")
HXLINE(  83)				HX_VARI_NAME( ::hx::EnumBase,initial1,"initial") = initial;
HXDLIN(  83)				HX_VARI( Int,i) = _e->length;
HXDLIN(  83)				while(true){
HXLINE( 787)					Int _hx_tmp1 = --i;
HXLINE(  83)					if (!((_hx_tmp1 >= (int)0))) {
HXLINE(  83)						goto _hx_goto_10;
            					}
HXDLIN(  83)					initial1 = f(initial1,_e->__get(i));
            				}
            				_hx_goto_10:;
HXDLIN(  83)				return initial1;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            			::hx::EnumBase _hx_run(::hx::EnumBase _0,::String _1){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",83,0x13eda3b4)
            				HX_STACK_ARG(_0,"_0")
            				HX_STACK_ARG(_1,"_1")
HXLINE(  83)				return ::thx::fp::ListImpl_obj::Cons(_1,_0);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2,::Array< Int >,_e1) HXARGC(2)
            			::hx::EnumBase _hx_run( ::Dynamic f1,::hx::EnumBase initial2){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",84,0x13eda3b4)
            				HX_STACK_ARG(f1,"f1")
            				HX_STACK_ARG(initial2,"initial2")
HXLINE(  84)				HX_VARI_NAME( ::hx::EnumBase,initial3,"initial") = initial2;
HXDLIN(  84)				HX_VARI_NAME( Int,i1,"i") = _e1->length;
HXDLIN(  84)				while(true){
HXLINE( 787)					Int _hx_tmp3 = --i1;
HXLINE(  84)					if (!((_hx_tmp3 >= (int)0))) {
HXLINE(  84)						goto _hx_goto_11;
            					}
HXDLIN(  84)					initial3 = f1(initial3,_e1->__get(i1));
            				}
            				_hx_goto_11:;
HXDLIN(  84)				return initial3;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(2)
            			::hx::EnumBase _hx_run(::hx::EnumBase _01, ::Dynamic _11){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",84,0x13eda3b4)
            				HX_STACK_ARG(_01,"_01")
            				HX_STACK_ARG(_11,"_11")
HXLINE(  84)				return ::thx::fp::ListImpl_obj::Cons(_11,_01);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_4,::Array< ::String >,_e2) HXARGC(2)
            			::hx::EnumBase _hx_run( ::Dynamic f2,::hx::EnumBase initial4){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",85,0x13eda3b4)
            				HX_STACK_ARG(f2,"f2")
            				HX_STACK_ARG(initial4,"initial4")
HXLINE(  85)				HX_VARI_NAME( ::hx::EnumBase,initial5,"initial") = initial4;
HXDLIN(  85)				HX_VARI_NAME( Int,i2,"i") = _e2->length;
HXDLIN(  85)				while(true){
HXLINE( 787)					Int _hx_tmp5 = --i2;
HXLINE(  85)					if (!((_hx_tmp5 >= (int)0))) {
HXLINE(  85)						goto _hx_goto_12;
            					}
HXDLIN(  85)					initial5 = f2(initial5,_e2->__get(i2));
            				}
            				_hx_goto_12:;
HXDLIN(  85)				return initial5;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(2)
            			::hx::EnumBase _hx_run(::hx::EnumBase _02,::String _12){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",85,0x13eda3b4)
            				HX_STACK_ARG(_02,"_02")
            				HX_STACK_ARG(_12,"_12")
HXLINE(  85)				return ::thx::fp::ListImpl_obj::Cons(_12,_02);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_6,::Array< Int >,_e3) HXARGC(2)
            			::hx::EnumBase _hx_run( ::Dynamic f3,::hx::EnumBase initial6){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",86,0x13eda3b4)
            				HX_STACK_ARG(f3,"f3")
            				HX_STACK_ARG(initial6,"initial6")
HXLINE(  86)				HX_VARI_NAME( ::hx::EnumBase,initial7,"initial") = initial6;
HXDLIN(  86)				HX_VARI_NAME( Int,i3,"i") = _e3->length;
HXDLIN(  86)				while(true){
HXLINE( 787)					Int _hx_tmp7 = --i3;
HXLINE(  86)					if (!((_hx_tmp7 >= (int)0))) {
HXLINE(  86)						goto _hx_goto_13;
            					}
HXDLIN(  86)					initial7 = f3(initial7,_e3->__get(i3));
            				}
            				_hx_goto_13:;
HXDLIN(  86)				return initial7;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_7) HXARGC(2)
            			::hx::EnumBase _hx_run(::hx::EnumBase _03, ::Dynamic _13){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",86,0x13eda3b4)
            				HX_STACK_ARG(_03,"_03")
            				HX_STACK_ARG(_13,"_13")
HXLINE(  86)				return ::thx::fp::ListImpl_obj::Cons(_13,_03);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_8,::Array< Bool >,_e4) HXARGC(2)
            			::hx::EnumBase _hx_run( ::Dynamic f4,::hx::EnumBase initial8){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",87,0x13eda3b4)
            				HX_STACK_ARG(f4,"f4")
            				HX_STACK_ARG(initial8,"initial8")
HXLINE(  87)				HX_VARI_NAME( ::hx::EnumBase,initial9,"initial") = initial8;
HXDLIN(  87)				HX_VARI_NAME( Int,i4,"i") = _e4->length;
HXDLIN(  87)				while(true){
HXLINE( 787)					Int _hx_tmp9 = --i4;
HXLINE(  87)					if (!((_hx_tmp9 >= (int)0))) {
HXLINE(  87)						goto _hx_goto_14;
            					}
HXDLIN(  87)					initial9 = f4(initial9,_e4->__get(i4));
            				}
            				_hx_goto_14:;
HXDLIN(  87)				return initial9;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_9) HXARGC(2)
            			::hx::EnumBase _hx_run(::hx::EnumBase _04, ::Dynamic _14){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",87,0x13eda3b4)
            				HX_STACK_ARG(_04,"_04")
            				HX_STACK_ARG(_14,"_14")
HXLINE(  87)				return ::thx::fp::ListImpl_obj::Cons(_14,_04);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_10,::Array< ::String >,_e5) HXARGC(2)
            			::hx::EnumBase _hx_run( ::Dynamic f5,::hx::EnumBase initial10){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",89,0x13eda3b4)
            				HX_STACK_ARG(f5,"f5")
            				HX_STACK_ARG(initial10,"initial10")
HXLINE(  89)				HX_VARI_NAME( ::hx::EnumBase,initial11,"initial") = initial10;
HXDLIN(  89)				HX_VARI_NAME( Int,i5,"i") = _e5->length;
HXDLIN(  89)				while(true){
HXLINE( 787)					Int _hx_tmp11 = --i5;
HXLINE(  89)					if (!((_hx_tmp11 >= (int)0))) {
HXLINE(  89)						goto _hx_goto_15;
            					}
HXDLIN(  89)					initial11 = f5(initial11,_e5->__get(i5));
            				}
            				_hx_goto_15:;
HXDLIN(  89)				return initial11;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_11) HXARGC(2)
            			::hx::EnumBase _hx_run(::hx::EnumBase _05,::String _15){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",89,0x13eda3b4)
            				HX_STACK_ARG(_05,"_05")
            				HX_STACK_ARG(_15,"_15")
HXLINE(  89)				return ::thx::fp::ListImpl_obj::Cons(_15,_05);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_12) HXARGC(5)
            			::String _hx_run(::String s,Int i6,::String t,Int j,Bool b){
            				HX_STACK_FRAME("thx.fp.TestList","testZip5Ap",0x0a46a979,"thx.fp.TestList.testZip5Ap","thx/fp/TestList.hx",89,0x13eda3b4)
            				HX_STACK_ARG(s,"s")
            				HX_STACK_ARG(i6,"i6")
            				HX_STACK_ARG(t,"t")
            				HX_STACK_ARG(j,"j")
            				HX_STACK_ARG(b,"b")
HXLINE(  89)				::String _hx_tmp14 = ((((HX_("",00,00,00,00) + s) + i6) + t) + j);
HXDLIN(  89)				::String _hx_tmp15 = ::Std_obj::string(b);
HXDLIN(  89)				return (_hx_tmp14 + _hx_tmp15);
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE(  82)			++_g1;
HXLINE(  83)			HX_VARI( ::Array< ::String >,_e) = ::Array_obj< ::String >::__new(3)->init(0,HX_("a",61,00,00,00))->init(1,HX_("b",62,00,00,00))->init(2,HX_("c",63,00,00,00));
HXDLIN(  83)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_e));
HXDLIN(  83)			HX_VARI( ::hx::EnumBase,sx) = _hx_tmp( ::Dynamic(new _hx_Closure_1()),::thx::fp::_List::List_Impl__obj::empty());
HXLINE(  84)			HX_VARI_NAME( ::Array< Int >,_e1,"_e") = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2);
HXDLIN(  84)			 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(_e1));
HXDLIN(  84)			HX_VARI( ::hx::EnumBase,ix) = _hx_tmp2( ::Dynamic(new _hx_Closure_3()),::thx::fp::_List::List_Impl__obj::empty());
HXLINE(  85)			HX_VARI_NAME( ::Array< ::String >,_e2,"_e") = ::Array_obj< ::String >::__new(3)->init(0,HX_("x",78,00,00,00))->init(1,HX_("y",79,00,00,00))->init(2,HX_("z",7a,00,00,00));
HXDLIN(  85)			 ::Dynamic _hx_tmp4 =  ::Dynamic(new _hx_Closure_4(_e2));
HXDLIN(  85)			HX_VARI( ::hx::EnumBase,tx) = _hx_tmp4( ::Dynamic(new _hx_Closure_5()),::thx::fp::_List::List_Impl__obj::empty());
HXLINE(  86)			HX_VARI_NAME( ::Array< Int >,_e3,"_e") = ::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)4);
HXDLIN(  86)			 ::Dynamic _hx_tmp6 =  ::Dynamic(new _hx_Closure_6(_e3));
HXDLIN(  86)			HX_VARI( ::hx::EnumBase,jx) = _hx_tmp6( ::Dynamic(new _hx_Closure_7()),::thx::fp::_List::List_Impl__obj::empty());
HXLINE(  87)			HX_VARI_NAME( ::Array< Bool >,_e4,"_e") = ::Array_obj< Bool >::__new(3)->init(0,true)->init(1,false)->init(2,true);
HXDLIN(  87)			 ::Dynamic _hx_tmp8 =  ::Dynamic(new _hx_Closure_8(_e4));
HXDLIN(  87)			HX_VARI( ::hx::EnumBase,bx) = _hx_tmp8( ::Dynamic(new _hx_Closure_9()),::thx::fp::_List::List_Impl__obj::empty());
HXLINE(  89)			HX_VARI_NAME( ::Array< ::String >,_e5,"_e") = ::Array_obj< ::String >::__new(2)->init(0,HX_("a1x3true",39,82,ff,46))->init(1,HX_("b2y4false",98,96,c7,59));
HXDLIN(  89)			 ::Dynamic _hx_tmp10 =  ::Dynamic(new _hx_Closure_10(_e5));
HXDLIN(  89)			::hx::EnumBase _hx_tmp12 = _hx_tmp10( ::Dynamic(new _hx_Closure_11()),::thx::fp::_List::List_Impl__obj::empty());
HXDLIN(  89)			::hx::EnumBase _hx_tmp13 = ::thx::fp::_List::List_Impl__obj::zip5Ap( ::Dynamic(new _hx_Closure_12()),sx,ix,tx,jx,bx);
HXDLIN(  89)			::utest::Assert_obj::same(_hx_tmp12,_hx_tmp13,null(),null(),null(),hx::SourceInfo(HX_("TestList.hx",ce,3a,67,ab),89,HX_("thx.fp.TestList",aa,32,3a,a0),HX_("testZip5Ap",35,8a,c1,9f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestList_obj,testZip5Ap,(void))


TestList_obj::TestList_obj()
{
}

hx::Val TestList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testMap") ) { return hx::Val( testMap_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testConcat") ) { return hx::Val( testConcat_dyn()); }
		if (HX_FIELD_EQ(inName,"testZip5Ap") ) { return hx::Val( testZip5Ap_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testToArray") ) { return hx::Val( testToArray_dyn()); }
		if (HX_FIELD_EQ(inName,"testFlatMap") ) { return hx::Val( testFlatMap_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testFoldLeft") ) { return hx::Val( testFoldLeft_dyn()); }
		if (HX_FIELD_EQ(inName,"testToString") ) { return hx::Val( testToString_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testFromArray") ) { return hx::Val( testFromArray_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testIntersperse") ) { return hx::Val( testIntersperse_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestList_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestList_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestList_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestList_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestList_obj_sStaticStorageInfo = 0;
#endif

static ::String TestList_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testFoldLeft","\x1a","\x4b","\x15","\x3a"),
	HX_HCSTRING("testToArray","\xec","\xa7","\xdc","\xae"),
	HX_HCSTRING("testIntersperse","\x46","\xd2","\xe6","\x35"),
	HX_HCSTRING("testFromArray","\x1d","\xd5","\x52","\x0d"),
	HX_HCSTRING("testConcat","\x06","\x4f","\xc4","\xe0"),
	HX_HCSTRING("testToString","\x1e","\xf7","\x75","\xab"),
	HX_HCSTRING("testMap","\x6a","\x79","\xc1","\xbd"),
	HX_HCSTRING("testFlatMap","\x31","\xfe","\xa6","\xa3"),
	HX_HCSTRING("testZip5Ap","\x35","\x8a","\xc1","\x9f"),
	::String(null()) };

static void TestList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestList_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestList_obj::__mClass,"__mClass");
};

#endif

hx::Class TestList_obj::__mClass;

void TestList_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.fp.TestList","\xaa","\x32","\x3a","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestList_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace fp
