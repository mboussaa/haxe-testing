// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_Uuid
#include <thx/Uuid.h>
#endif

namespace thx{

void Uuid_obj::__construct() { }

Dynamic Uuid_obj::__CreateEmpty() { return new Uuid_obj; }

hx::ObjectPtr< Uuid_obj > Uuid_obj::__new()
{
	hx::ObjectPtr< Uuid_obj > _hx_result = new Uuid_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Uuid_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Uuid_obj > _hx_result = new Uuid_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Uuid_obj::random(){
            	HX_STACK_FRAME("thx.Uuid","random",0xd4144ccc,"thx.Uuid.random","thx/Uuid.hx",9,0x32269f78)
HXLINE(   9)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(   9)		return ::Math_obj::floor((_hx_tmp * (int)16));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Uuid_obj,random,return )

::String Uuid_obj::srandom(){
            	HX_STACK_FRAME("thx.Uuid","srandom",0x3db3bfcd,"thx.Uuid.srandom","thx/Uuid.hx",12,0x32269f78)
HXLINE(  12)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  12)		Int _hx_tmp1 = ::Math_obj::floor((_hx_tmp * (int)16));
HXDLIN(  12)		return HX_("0123456789ABCDEF",68,2a,58,a2).charAt(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Uuid_obj,srandom,return )

::String Uuid_obj::create(){
            	HX_STACK_FRAME("thx.Uuid","create",0x989491c5,"thx.Uuid.create","thx/Uuid.hx",17,0x32269f78)
HXLINE(  18)		HX_VARI( ::Array< ::String >,s) = ::Array_obj< ::String >::__new(0);
HXLINE(  19)		{
HXLINE(  19)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  19)			while((_g < (int)8)){
HXLINE(  19)				HX_VARI( Int,i) = _g++;
HXLINE(  20)				Float _hx_tmp = ::Math_obj::random();
HXDLIN(  20)				Int _hx_tmp1 = ::Math_obj::floor((_hx_tmp * (int)16));
HXDLIN(  20)				::String _hx_tmp2 = HX_("0123456789ABCDEF",68,2a,58,a2).charAt(_hx_tmp1);
HXDLIN(  20)				s[i] = _hx_tmp2;
            			}
            		}
HXLINE(  21)		s[(int)8] = HX_("-",2d,00,00,00);
HXLINE(  22)		{
HXLINE(  22)			HX_VARI_NAME( Int,_g1,"_g") = (int)9;
HXDLIN(  22)			while((_g1 < (int)13)){
HXLINE(  22)				HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE(  23)				Float _hx_tmp3 = ::Math_obj::random();
HXDLIN(  23)				Int _hx_tmp4 = ::Math_obj::floor((_hx_tmp3 * (int)16));
HXDLIN(  23)				::String _hx_tmp5 = HX_("0123456789ABCDEF",68,2a,58,a2).charAt(_hx_tmp4);
HXDLIN(  23)				s[i1] = _hx_tmp5;
            			}
            		}
HXLINE(  24)		s[(int)13] = HX_("-",2d,00,00,00);
HXLINE(  25)		s[(int)14] = HX_("4",34,00,00,00);
HXLINE(  26)		{
HXLINE(  26)			HX_VARI_NAME( Int,_g2,"_g") = (int)15;
HXDLIN(  26)			while((_g2 < (int)18)){
HXLINE(  26)				HX_VARI_NAME( Int,i2,"i") = _g2++;
HXLINE(  27)				Float _hx_tmp6 = ::Math_obj::random();
HXDLIN(  27)				Int _hx_tmp7 = ::Math_obj::floor((_hx_tmp6 * (int)16));
HXDLIN(  27)				::String _hx_tmp8 = HX_("0123456789ABCDEF",68,2a,58,a2).charAt(_hx_tmp7);
HXDLIN(  27)				s[i2] = _hx_tmp8;
            			}
            		}
HXLINE(  28)		s[(int)18] = HX_("-",2d,00,00,00);
HXLINE(  29)		Float _hx_tmp9 = ::Math_obj::random();
HXDLIN(  29)		Int _hx_tmp10 = ::Math_obj::floor((_hx_tmp9 * (int)16));
HXDLIN(  29)		::String _hx_tmp11 = HX_("89AB",22,6c,2f,25).charAt(((int)_hx_tmp10 & (int)(int)3));
HXDLIN(  29)		s[(int)19] = _hx_tmp11;
HXLINE(  30)		{
HXLINE(  30)			HX_VARI_NAME( Int,_g3,"_g") = (int)20;
HXDLIN(  30)			while((_g3 < (int)23)){
HXLINE(  30)				HX_VARI_NAME( Int,i3,"i") = _g3++;
HXLINE(  31)				Float _hx_tmp12 = ::Math_obj::random();
HXDLIN(  31)				Int _hx_tmp13 = ::Math_obj::floor((_hx_tmp12 * (int)16));
HXDLIN(  31)				::String _hx_tmp14 = HX_("0123456789ABCDEF",68,2a,58,a2).charAt(_hx_tmp13);
HXDLIN(  31)				s[i3] = _hx_tmp14;
            			}
            		}
HXLINE(  32)		s[(int)23] = HX_("-",2d,00,00,00);
HXLINE(  33)		{
HXLINE(  33)			HX_VARI_NAME( Int,_g4,"_g") = (int)24;
HXDLIN(  33)			while((_g4 < (int)36)){
HXLINE(  33)				HX_VARI_NAME( Int,i4,"i") = _g4++;
HXLINE(  34)				Float _hx_tmp15 = ::Math_obj::random();
HXDLIN(  34)				Int _hx_tmp16 = ::Math_obj::floor((_hx_tmp15 * (int)16));
HXDLIN(  34)				::String _hx_tmp17 = HX_("0123456789ABCDEF",68,2a,58,a2).charAt(_hx_tmp16);
HXDLIN(  34)				s[i4] = _hx_tmp17;
            			}
            		}
HXLINE(  35)		return s->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Uuid_obj,create,return )


Uuid_obj::Uuid_obj()
{
}

bool Uuid_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"random") ) { outValue = random_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"srandom") ) { outValue = srandom_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Uuid_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Uuid_obj_sStaticStorageInfo = 0;
#endif

static void Uuid_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Uuid_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Uuid_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Uuid_obj::__mClass,"__mClass");
};

#endif

hx::Class Uuid_obj::__mClass;

static ::String Uuid_obj_sStaticFields[] = {
	HX_HCSTRING("random","\x03","\x22","\x8f","\xb7"),
	HX_HCSTRING("srandom","\xb6","\x7a","\xb3","\x65"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	::String(null())
};

void Uuid_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Uuid","\x85","\x36","\x5e","\x7f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Uuid_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Uuid_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Uuid_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Uuid_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Uuid_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Uuid_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Uuid_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
