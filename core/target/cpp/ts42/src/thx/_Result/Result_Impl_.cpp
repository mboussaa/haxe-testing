// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_Either
#include <thx/Either.h>
#endif
#ifndef INCLUDED_thx__Result_Result_Impl_
#include <thx/_Result/Result_Impl_.h>
#endif

namespace thx{
namespace _Result{

void Result_Impl__obj::__construct() { }

Dynamic Result_Impl__obj::__CreateEmpty() { return new Result_Impl__obj; }

hx::ObjectPtr< Result_Impl__obj > Result_Impl__obj::__new()
{
	hx::ObjectPtr< Result_Impl__obj > _hx_result = new Result_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Result_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Result_Impl__obj > _hx_result = new Result_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::hx::EnumBase Result_Impl__obj::success( ::Dynamic value){
            	HX_STACK_FRAME("thx._Result.Result_Impl_","success",0x4f80eeee,"thx._Result.Result_Impl_.success","thx/Result.hx",10,0x1b229156)
            	HX_STACK_ARG(value,"value")
HXLINE(  10)		return ::thx::Either_obj::Right(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Result_Impl__obj,success,return )

::hx::EnumBase Result_Impl__obj::failure( ::Dynamic error){
            	HX_STACK_FRAME("thx._Result.Result_Impl_","failure",0xae2d3975,"thx._Result.Result_Impl_.failure","thx/Result.hx",13,0x1b229156)
            	HX_STACK_ARG(error,"error")
HXLINE(  13)		return ::thx::Either_obj::Left(error);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Result_Impl__obj,failure,return )

::hx::EnumBase Result_Impl__obj::optionValue(::hx::EnumBase this1){
            	HX_STACK_FRAME("thx._Result.Result_Impl_","optionValue",0x3915ae67,"thx._Result.Result_Impl_.optionValue","thx/Result.hx",29,0x1b229156)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  29)		Int _hx_tmp = ( ( ::hx::EnumBase)(this1) )->_hx_getIndex();
HXDLIN(  29)		if ((_hx_tmp == (int)1)) {
HXLINE(  29)			return ::haxe::ds::Option_obj::Some(this1->_hx_getObject(0));
            		}
            		else {
HXLINE(  29)			return ::haxe::ds::Option_obj::None_dyn();
            		}
HXDLIN(  29)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Result_Impl__obj,optionValue,return )

::hx::EnumBase Result_Impl__obj::optionError(::hx::EnumBase this1){
            	HX_STACK_FRAME("thx._Result.Result_Impl_","optionError",0x7a86fabe,"thx._Result.Result_Impl_.optionError","thx/Result.hx",39,0x1b229156)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  39)		Int _hx_tmp = ( ( ::hx::EnumBase)(this1) )->_hx_getIndex();
HXDLIN(  39)		if ((_hx_tmp == (int)0)) {
HXLINE(  39)			return ::haxe::ds::Option_obj::Some(this1->_hx_getObject(0));
            		}
            		else {
HXLINE(  39)			return ::haxe::ds::Option_obj::None_dyn();
            		}
HXDLIN(  39)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Result_Impl__obj,optionError,return )

 ::Dynamic Result_Impl__obj::value(::hx::EnumBase this1){
            	HX_STACK_FRAME("thx._Result.Result_Impl_","value",0xcc8417dc,"thx._Result.Result_Impl_.value","thx/Result.hx",48,0x1b229156)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  48)		Int _hx_tmp = ( ( ::hx::EnumBase)(this1) )->_hx_getIndex();
HXDLIN(  48)		if ((_hx_tmp == (int)1)) {
HXLINE(  48)			return this1->_hx_getObject(0);
            		}
            		else {
HXLINE(  48)			return null();
            		}
HXDLIN(  48)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Result_Impl__obj,value,return )

 ::Dynamic Result_Impl__obj::error(::hx::EnumBase this1){
            	HX_STACK_FRAME("thx._Result.Result_Impl_","error",0x0df56433,"thx._Result.Result_Impl_.error","thx/Result.hx",57,0x1b229156)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  57)		Int _hx_tmp = ( ( ::hx::EnumBase)(this1) )->_hx_getIndex();
HXDLIN(  57)		if ((_hx_tmp == (int)0)) {
HXLINE(  57)			return this1->_hx_getObject(0);
            		}
            		else {
HXLINE(  57)			return null();
            		}
HXDLIN(  57)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Result_Impl__obj,error,return )

Bool Result_Impl__obj::get_isSuccess(::hx::EnumBase this1){
            	HX_STACK_FRAME("thx._Result.Result_Impl_","get_isSuccess",0xdcbaf23b,"thx._Result.Result_Impl_.get_isSuccess","thx/Result.hx",63,0x1b229156)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  63)		Int _hx_tmp = ( ( ::hx::EnumBase)(this1) )->_hx_getIndex();
HXDLIN(  63)		if ((_hx_tmp == (int)1)) {
HXLINE(  63)			return true;
            		}
            		else {
HXLINE(  63)			return false;
            		}
HXDLIN(  63)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Result_Impl__obj,get_isSuccess,return )

Bool Result_Impl__obj::get_isFailure(::hx::EnumBase this1){
            	HX_STACK_FRAME("thx._Result.Result_Impl_","get_isFailure",0x3b673cc2,"thx._Result.Result_Impl_.get_isFailure","thx/Result.hx",69,0x1b229156)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  69)		Int _hx_tmp = ( ( ::hx::EnumBase)(this1) )->_hx_getIndex();
HXDLIN(  69)		if ((_hx_tmp == (int)0)) {
HXLINE(  69)			return true;
            		}
            		else {
HXLINE(  69)			return false;
            		}
HXDLIN(  69)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Result_Impl__obj,get_isFailure,return )


Result_Impl__obj::Result_Impl__obj()
{
}

bool Result_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { outValue = value_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"error") ) { outValue = error_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"success") ) { outValue = success_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"failure") ) { outValue = failure_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"optionValue") ) { outValue = optionValue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"optionError") ) { outValue = optionError_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_isSuccess") ) { outValue = get_isSuccess_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_isFailure") ) { outValue = get_isFailure_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Result_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Result_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Result_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Result_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Result_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Result_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Result_Impl__obj::__mClass;

static ::String Result_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("success","\xc3","\x25","\x4e","\xb8"),
	HX_HCSTRING("failure","\x4a","\x70","\xfa","\x16"),
	HX_HCSTRING("optionValue","\xbc","\x73","\x0f","\xd4"),
	HX_HCSTRING("optionError","\x13","\xc0","\x80","\x15"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("get_isSuccess","\xd0","\x76","\xb0","\x7d"),
	HX_HCSTRING("get_isFailure","\x57","\xc1","\x5c","\xdc"),
	::String(null())
};

void Result_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._Result.Result_Impl_","\x99","\x86","\xe4","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Result_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Result_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Result_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Result_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Result_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Result_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Result_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace _Result
