// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#include "hxMath.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_TimePeriod
#include <thx/TimePeriod.h>
#endif
#ifndef INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_
#include <thx/_DateTimeUtc/DateTimeUtc_Impl_.h>
#endif
#ifndef INCLUDED_thx__LocalDate_LocalDate_Impl_
#include <thx/_LocalDate/LocalDate_Impl_.h>
#endif
#ifndef INCLUDED_thx__Time_Time_Impl_
#include <thx/_Time/Time_Impl_.h>
#endif

namespace thx{
namespace _LocalDate{

void LocalDate_Impl__obj::__construct() { }

Dynamic LocalDate_Impl__obj::__CreateEmpty() { return new LocalDate_Impl__obj; }

hx::ObjectPtr< LocalDate_Impl__obj > LocalDate_Impl__obj::__new()
{
	hx::ObjectPtr< LocalDate_Impl__obj > _hx_result = new LocalDate_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic LocalDate_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LocalDate_Impl__obj > _hx_result = new LocalDate_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Float LocalDate_Impl__obj::millisPerSecond;

Float LocalDate_Impl__obj::millisPerMinute;

Float LocalDate_Impl__obj::millisPerHour;

Float LocalDate_Impl__obj::millisPerDay;

Int LocalDate_Impl__obj::daysPerYear;

Int LocalDate_Impl__obj::daysPer4Years;

Int LocalDate_Impl__obj::daysPer100Years;

Int LocalDate_Impl__obj::daysPer400Years;

Int LocalDate_Impl__obj::unixEpochDays;

Int LocalDate_Impl__obj::DATE_PART_YEAR;

Int LocalDate_Impl__obj::DATE_PART_DAY_OF_YEAR;

Int LocalDate_Impl__obj::DATE_PART_MONTH;

Int LocalDate_Impl__obj::DATE_PART_DAY;

::Array< Int > LocalDate_Impl__obj::daysToMonth365;

::Array< Int > LocalDate_Impl__obj::daysToMonth366;

Int LocalDate_Impl__obj::now(){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","now",0xdfba3fb7,"thx._LocalDate.LocalDate_Impl_.now","thx/LocalDate.hx",37,0x8a26a2f0)
HXLINE(  37)		 ::Date _hx_tmp = ::Date_obj::now();
HXDLIN(  37)		return ::thx::_LocalDate::LocalDate_Impl__obj::fromDate(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LocalDate_Impl__obj,now,return )

Int LocalDate_Impl__obj::fromInt(Int days){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","fromInt",0x750fa8c6,"thx._LocalDate.LocalDate_Impl_.fromInt","thx/LocalDate.hx",44,0x8a26a2f0)
            	HX_STACK_ARG(days,"days")
HXLINE(  44)		return days;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,fromInt,return )

Int LocalDate_Impl__obj::fromDate( ::Date date){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","fromDate",0xf54c1677,"thx._LocalDate.LocalDate_Impl_.fromDate","thx/LocalDate.hx",50,0x8a26a2f0)
            	HX_STACK_ARG(date,"date")
HXLINE(  50)		Float _hx_tmp = date->getTime();
HXDLIN(  50)		return ::thx::_LocalDate::LocalDate_Impl__obj::fromTime(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,fromDate,return )

Int LocalDate_Impl__obj::fromTime(Float timestamp){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","fromTime",0xffe58c56,"thx._LocalDate.LocalDate_Impl_.fromTime","thx/LocalDate.hx",56,0x8a26a2f0)
            	HX_STACK_ARG(timestamp,"timestamp")
HXLINE(  56)		Float _hx_tmp = ((Float)timestamp / (Float)::thx::_LocalDate::LocalDate_Impl__obj::millisPerDay);
HXDLIN(  56)		Int _hx_tmp1 = ::Std_obj::_hx_int(_hx_tmp);
HXDLIN(  56)		return (_hx_tmp1 + ::thx::_LocalDate::LocalDate_Impl__obj::unixEpochDays);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,fromTime,return )

Int LocalDate_Impl__obj::fromString(::String s){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","fromString",0xe0004d5a,"thx._LocalDate.LocalDate_Impl_.fromString","thx/LocalDate.hx",64,0x8a26a2f0)
            	HX_STACK_ARG(s,"s")
HXLINE(  65)		if (hx::IsNull( s )) {
HXLINE(  66)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("null String cannot be parsed to LocalDate",4d,1c,5e,bb),null(),hx::SourceInfo(HX_("LocalDate.hx",45,fb,84,b2),66,HX_("thx._LocalDate.LocalDate_Impl_",8f,a2,b8,c4),HX_("fromString",db,2d,74,54))));
            		}
HXLINE(  67)		HX_VARI(  ::EReg,pattern) =  ::EReg_obj::__new(HX_("^([-])?(\\d+)[-](\\d{2})[-](\\d{2})$",dd,99,34,90),HX_("",00,00,00,00));
HXLINE(  68)		Bool _hx_tmp = !(pattern->match(s));
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  69)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(((HX_("unable to parse DateTime string: \"",8b,bb,7d,4b) + s) + HX_("\"",22,00,00,00)),null(),hx::SourceInfo(HX_("LocalDate.hx",45,fb,84,b2),69,HX_("thx._LocalDate.LocalDate_Impl_",8f,a2,b8,c4),HX_("fromString",db,2d,74,54))));
            		}
HXLINE(  72)		::String _hx_tmp1 = pattern->matched((int)2);
HXDLIN(  72)		 ::Dynamic _hx_tmp2 = ::Std_obj::parseInt(_hx_tmp1);
HXLINE(  73)		::String _hx_tmp3 = pattern->matched((int)3);
HXDLIN(  73)		 ::Dynamic _hx_tmp4 = ::Std_obj::parseInt(_hx_tmp3);
HXLINE(  74)		::String _hx_tmp5 = pattern->matched((int)4);
HXDLIN(  74)		 ::Dynamic _hx_tmp6 = ::Std_obj::parseInt(_hx_tmp5);
HXLINE(  71)		HX_VARI( Int,date) = ::thx::_LocalDate::LocalDate_Impl__obj::create(_hx_tmp2,_hx_tmp4,_hx_tmp6);
HXLINE(  76)		::String _hx_tmp7 = pattern->matched((int)1);
HXDLIN(  76)		if ((_hx_tmp7 == HX_("-",2d,00,00,00))) {
HXLINE(  77)			return -(date);
            		}
HXLINE(  78)		return date;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,fromString,return )

Int LocalDate_Impl__obj::compare(Int a,Int b){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","compare",0xa07de3c6,"thx._LocalDate.LocalDate_Impl_.compare","thx/LocalDate.hx",82,0x8a26a2f0)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  82)		return (a - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,compare,return )

Int LocalDate_Impl__obj::create(Int year,Int month,Int day){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","create",0x96981afb,"thx._LocalDate.LocalDate_Impl_.create","thx/LocalDate.hx",87,0x8a26a2f0)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(day,"day")
HXLINE(  88)		HX_VARI( Int,days) = ::thx::_LocalDate::LocalDate_Impl__obj::dateToDays(year,month,day);
HXLINE(  89)		return days;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LocalDate_Impl__obj,create,return )

Int LocalDate_Impl__obj::dateToDays(Int year,Int month,Int day){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< Int >,month1,::Array< Int >,year1) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","dateToDays",0x95a085ff,"thx._LocalDate.LocalDate_Impl_.dateToDays","thx/LocalDate.hx",94,0x8a26a2f0)
HXLINE(  94)			if ((month1->__get((int)0) == (int)0)) {
HXLINE(  95)				year1[(int)0]--;
HXLINE(  96)				month1[(int)0] = (int)12;
            			}
            			else {
HXLINE(  97)				if ((month1->__get((int)0) < (int)0)) {
HXLINE(  98)					month1[(int)0] = -(month1->__get((int)0));
HXLINE(  99)					HX_VARI( Int,years) = ::Math_obj::ceil(((Float)month1->__get((int)0) / (Float)(int)12));
HXLINE( 100)					hx::SubEq(year1[(int)0],years);
HXLINE( 101)					month1[(int)0] = ((years * (int)12) - month1->__get((int)0));
            				}
            				else {
HXLINE( 102)					if ((month1->__get((int)0) > (int)12)) {
HXLINE( 103)						HX_VARI_NAME( Int,years1,"years") = ::Math_obj::floor(((Float)month1->__get((int)0) / (Float)(int)12));
HXLINE( 104)						hx::AddEq(year1[(int)0],years1);
HXLINE( 105)						month1[(int)0] = (month1->__get((int)0) - (years1 * (int)12));
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","dateToDays",0x95a085ff,"thx._LocalDate.LocalDate_Impl_.dateToDays","thx/LocalDate.hx",92,0x8a26a2f0)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(day,"day")
HXLINE(  92)		HX_VARI_NAME( ::Array< Int >,month1,"month") = ::Array_obj< Int >::__new(1)->init(0,month);
HXDLIN(  92)		HX_VARI_NAME( ::Array< Int >,year1,"year") = ::Array_obj< Int >::__new(1)->init(0,year);
HXLINE(  93)		HX_VARI(  ::Dynamic,fixMonthYear) =  ::Dynamic(new _hx_Closure_0(month1,year1));
HXLINE( 109)		while((day < (int)0)){
HXLINE( 110)			month1[(int)0]--;
HXLINE( 111)			fixMonthYear();
HXLINE( 112)			hx::AddEq(day,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(year1->__get((int)0),month1->__get((int)0)));
            		}
HXLINE( 115)		fixMonthYear();
HXLINE( 116)		HX_VAR( Int,days);
HXLINE( 117)		while(true){
HXLINE( 117)			days = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(year1->__get((int)0),month1->__get((int)0));
HXDLIN( 117)			if (!((day > days))) {
HXLINE( 117)				goto _hx_goto_1;
            			}
HXLINE( 118)			month1[(int)0]++;
HXLINE( 119)			fixMonthYear();
HXLINE( 120)			hx::SubEq(day,days);
            		}
            		_hx_goto_1:;
HXLINE( 123)		if ((day == (int)0)) {
HXLINE( 124)			hx::SubEq(month1[(int)0],(int)1);
HXLINE( 125)			fixMonthYear();
HXLINE( 126)			day = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(year1->__get((int)0),month1->__get((int)0));
            		}
HXLINE( 129)		fixMonthYear();
HXLINE( 131)		return ::thx::_LocalDate::LocalDate_Impl__obj::rawDateToDays(year1->__get((int)0),month1->__get((int)0),day);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LocalDate_Impl__obj,dateToDays,return )

Int LocalDate_Impl__obj::rawDateToDays(Int year,Int month,Int day){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","rawDateToDays",0xe6ed0c69,"thx._LocalDate.LocalDate_Impl_.rawDateToDays","thx/LocalDate.hx",134,0x8a26a2f0)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(day,"day")
HXLINE( 135)		HX_VAR( ::Array< Int >,days);
HXDLIN( 135)		if (::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::isLeapYear(year)) {
HXLINE( 135)			days = ::thx::_LocalDate::LocalDate_Impl__obj::daysToMonth366;
            		}
            		else {
HXLINE( 135)			days = ::thx::_LocalDate::LocalDate_Impl__obj::daysToMonth365;
            		}
HXLINE( 136)		Bool _hx_tmp;
HXDLIN( 136)		if ((day >= (int)1)) {
HXLINE( 136)			_hx_tmp = (day <= (days->__get(month) - days->__get((month - (int)1))));
            		}
            		else {
HXLINE( 136)			_hx_tmp = false;
            		}
HXDLIN( 136)		if (_hx_tmp) {
HXLINE( 137)			HX_VARI( Int,y) = (year - (int)1);
HXLINE( 138)			Int _hx_tmp1 = (y * (int)365);
HXDLIN( 138)			Int _hx_tmp2 = ::Std_obj::_hx_int(((Float)y / (Float)(int)4));
HXDLIN( 138)			Int _hx_tmp3 = (_hx_tmp1 + _hx_tmp2);
HXDLIN( 138)			Int _hx_tmp4 = ::Std_obj::_hx_int(((Float)y / (Float)(int)100));
HXDLIN( 138)			Int _hx_tmp5 = (_hx_tmp3 - _hx_tmp4);
HXDLIN( 138)			Int _hx_tmp6 = ::Std_obj::_hx_int(((Float)y / (Float)(int)400));
HXLINE( 139)			return ((((_hx_tmp5 + _hx_tmp6) + days->__get((month - (int)1))) + day) - (int)1);
            		}
HXLINE( 141)		HX_STACK_DO_THROW( ::thx::Error_obj::__new((((((HX_("bad year-month-day ",26,75,0b,0c) + year) + HX_("-",2d,00,00,00)) + month) + HX_("-",2d,00,00,00)) + day),null(),hx::SourceInfo(HX_("LocalDate.hx",45,fb,84,b2),141,HX_("thx._LocalDate.LocalDate_Impl_",8f,a2,b8,c4),HX_("rawDateToDays",88,b2,69,e1))));
HXDLIN( 141)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LocalDate_Impl__obj,rawDateToDays,return )

::Array< Int > LocalDate_Impl__obj::daysRange(Int start,Int end){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","daysRange",0x509d8d07,"thx._LocalDate.LocalDate_Impl_.daysRange","thx/LocalDate.hx",149,0x8a26a2f0)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(end,"end")
HXLINE( 150)		if (((end - start) < (int)0)) {
HXLINE( 150)			return ::Array_obj< Int >::__new(0);
            		}
HXLINE( 151)		HX_VARI( ::Array< Int >,days) = ::Array_obj< Int >::__new(0);
HXLINE( 152)		while((start != end)){
HXLINE( 153)			days->push(start);
HXLINE( 154)			start = ::thx::_LocalDate::LocalDate_Impl__obj::jump(start,::thx::TimePeriod_obj::Day_dyn(),(int)1);
            		}
HXLINE( 156)		days->push(end);
HXLINE( 157)		return days;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,daysRange,return )

Int LocalDate_Impl__obj::getDatePart(Int this1,Int part){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","getDatePart",0x8c634798,"thx._LocalDate.LocalDate_Impl_.getDatePart","thx/LocalDate.hx",160,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(part,"part")
HXLINE( 161)		HX_VARI( Int,n) = this1;
HXLINE( 162)		Float _hx_tmp = ((Float)this1 / (Float)::thx::_LocalDate::LocalDate_Impl__obj::daysPer400Years);
HXDLIN( 162)		HX_VARI( Int,y400) = ::Std_obj::_hx_int(_hx_tmp);
HXLINE( 163)		n = (this1 - (y400 * ::thx::_LocalDate::LocalDate_Impl__obj::daysPer400Years));
HXLINE( 164)		Float _hx_tmp1 = ((Float)n / (Float)::thx::_LocalDate::LocalDate_Impl__obj::daysPer100Years);
HXDLIN( 164)		HX_VARI( Int,y100) = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE( 165)		Bool _hx_tmp2 = (y100 == (int)4);
HXDLIN( 165)		if (_hx_tmp2) {
HXLINE( 166)			y100 = (int)3;
            		}
HXLINE( 167)		hx::SubEq(n,(y100 * ::thx::_LocalDate::LocalDate_Impl__obj::daysPer100Years));
HXLINE( 168)		Float _hx_tmp3 = ((Float)n / (Float)::thx::_LocalDate::LocalDate_Impl__obj::daysPer4Years);
HXDLIN( 168)		HX_VARI( Int,y4) = ::Std_obj::_hx_int(_hx_tmp3);
HXLINE( 169)		hx::SubEq(n,(y4 * ::thx::_LocalDate::LocalDate_Impl__obj::daysPer4Years));
HXLINE( 170)		Float _hx_tmp4 = ((Float)n / (Float)::thx::_LocalDate::LocalDate_Impl__obj::daysPerYear);
HXDLIN( 170)		HX_VARI( Int,y1) = ::Std_obj::_hx_int(_hx_tmp4);
HXLINE( 171)		Bool _hx_tmp5 = (y1 == (int)4);
HXDLIN( 171)		if (_hx_tmp5) {
HXLINE( 172)			y1 = (int)3;
            		}
HXLINE( 173)		if ((part == ::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR)) {
HXLINE( 174)			return (((((y400 * (int)400) + (y100 * (int)100)) + (y4 * (int)4)) + y1) + (int)1);
            		}
HXLINE( 176)		hx::SubEq(n,(y1 * ::thx::_LocalDate::LocalDate_Impl__obj::daysPerYear));
HXLINE( 177)		if ((part == ::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY_OF_YEAR)) {
HXLINE( 178)			return (n + (int)1);
            		}
HXLINE( 179)		HX_VAR( Bool,leapYear);
HXDLIN( 179)		if ((y1 == (int)3)) {
HXLINE( 179)			if ((y4 == (int)24)) {
HXLINE( 179)				leapYear = (y100 == (int)3);
            			}
            			else {
HXLINE( 179)				leapYear = true;
            			}
            		}
            		else {
HXLINE( 179)			leapYear = false;
            		}
HXDLIN( 179)		HX_VAR( ::Array< Int >,adays);
HXLINE( 180)		if (leapYear) {
HXLINE( 179)			adays = ::thx::_LocalDate::LocalDate_Impl__obj::daysToMonth366;
            		}
            		else {
HXLINE( 179)			adays = ::thx::_LocalDate::LocalDate_Impl__obj::daysToMonth365;
            		}
HXDLIN( 179)		HX_VARI( Int,m) = ((int)n >> (int)(int)6);
HXLINE( 182)		while((n >= adays->__get(m))){
HXLINE( 183)			++m;
            		}
HXLINE( 184)		if ((part == ::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH)) {
HXLINE( 185)			return m;
            		}
HXLINE( 186)		return ((n - adays->__get((m - (int)1))) + (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,getDatePart,return )

Int LocalDate_Impl__obj::_new(Int days){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","_new",0xd9527ba0,"thx._LocalDate.LocalDate_Impl_._new","thx/LocalDate.hx",189,0x8a26a2f0)
            	HX_STACK_ARG(days,"days")
HXLINE( 189)		return days;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,_new,return )

Int LocalDate_Impl__obj::min(Int this1,Int other){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","min",0xdfb97833,"thx._LocalDate.LocalDate_Impl_.min","thx/LocalDate.hx",204,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 204)		if ((::thx::_LocalDate::LocalDate_Impl__obj::compareTo(this1,other) <= (int)0)) {
HXLINE( 204)			return this1;
            		}
            		else {
HXLINE( 204)			return other;
            		}
HXDLIN( 204)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,min,return )

Int LocalDate_Impl__obj::max(Int this1,Int other){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","max",0xdfb97145,"thx._LocalDate.LocalDate_Impl_.max","thx/LocalDate.hx",207,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 207)		if ((::thx::_LocalDate::LocalDate_Impl__obj::compareTo(this1,other) >= (int)0)) {
HXLINE( 207)			return this1;
            		}
            		else {
HXLINE( 207)			return other;
            		}
HXDLIN( 207)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,max,return )

Int LocalDate_Impl__obj::jump(Int this1,::hx::EnumBase period,Int amount){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","jump",0xe09d2b2d,"thx._LocalDate.LocalDate_Impl_.jump","thx/LocalDate.hx",217,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(amount,"amount")
HXLINE( 218)		HX_VARI( Int,sec) = (int)0;
HXDLIN( 218)		HX_VARI( Int,min) = (int)0;
HXDLIN( 218)		HX_VARI( Int,hr) = (int)0;
HXDLIN( 218)		HX_VARI( Int,day) = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN( 218)		HX_VARI( Int,mon) = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 218)		HX_VARI( Int,yr) = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXLINE( 225)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 225)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 226)				sec = amount;
            			}
            			break;
            			case (int)1: {
HXLINE( 227)				min = amount;
            			}
            			break;
            			case (int)2: {
HXLINE( 228)				hr = amount;
            			}
            			break;
            			case (int)3: {
HXLINE( 229)				hx::AddEq(day,amount);
            			}
            			break;
            			case (int)4: {
HXLINE( 230)				hx::AddEq(day,(amount * (int)7));
            			}
            			break;
            			case (int)5: {
HXLINE( 231)				hx::AddEq(mon,amount);
            			}
            			break;
            			case (int)6: {
HXLINE( 232)				hx::AddEq(yr,amount);
            			}
            			break;
            		}
HXLINE( 234)		HX_VARI(  ::cpp::Int64Struct,time) = ::thx::_Time::Time_Impl__obj::create(hr,min,sec,null());
HXLINE( 235)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 235)		Bool _hx_tmp1 = _hx_int64_is_zero(time);
HXDLIN( 235)		if (_hx_tmp1) {
HXLINE( 235)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 235)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_div(time,b);
HXDLIN( 235)		Int _hx_tmp2 = _hx_int64_high(x);
HXDLIN( 235)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 235)		if ((_hx_tmp2 != ((int)_hx_tmp3 >> (int)(int)31))) {
HXLINE( 235)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 235)		Int _hx_tmp4 = _hx_int64_low(x);
HXLINE( 234)		HX_VARI( Int,extraDays) = ::Math_obj::floor(((Float)_hx_tmp4 / (Float)(int)7));
HXLINE( 237)		return ::thx::_LocalDate::LocalDate_Impl__obj::create(yr,mon,(day + extraDays));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LocalDate_Impl__obj,jump,return )

Int LocalDate_Impl__obj::daysInThisMonth(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","daysInThisMonth",0xe36d3627,"thx._LocalDate.LocalDate_Impl_.daysInThisMonth","thx/LocalDate.hx",246,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 246)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 246)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 246)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,daysInThisMonth,return )

Int LocalDate_Impl__obj::prevYear(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","prevYear",0x6e329c0f,"thx._LocalDate.LocalDate_Impl_.prevYear","thx/LocalDate.hx",252,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 252)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Year_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,prevYear,return )

Int LocalDate_Impl__obj::nextYear(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","nextYear",0x5131620f,"thx._LocalDate.LocalDate_Impl_.nextYear","thx/LocalDate.hx",258,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 258)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Year_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,nextYear,return )

Int LocalDate_Impl__obj::prevMonth(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","prevMonth",0x1becfcae,"thx._LocalDate.LocalDate_Impl_.prevMonth","thx/LocalDate.hx",264,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 264)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Month_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,prevMonth,return )

Int LocalDate_Impl__obj::nextMonth(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","nextMonth",0xd7db76ae,"thx._LocalDate.LocalDate_Impl_.nextMonth","thx/LocalDate.hx",270,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 270)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Month_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,nextMonth,return )

Int LocalDate_Impl__obj::prevWeek(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","prevWeek",0x6ce03246,"thx._LocalDate.LocalDate_Impl_.prevWeek","thx/LocalDate.hx",276,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 276)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Week_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,prevWeek,return )

Int LocalDate_Impl__obj::nextWeek(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","nextWeek",0x4fdef846,"thx._LocalDate.LocalDate_Impl_.nextWeek","thx/LocalDate.hx",282,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 282)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Week_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,nextWeek,return )

Int LocalDate_Impl__obj::prevDay(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","prevDay",0x58d3944a,"thx._LocalDate.LocalDate_Impl_.prevDay","thx/LocalDate.hx",288,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 288)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,prevDay,return )

Int LocalDate_Impl__obj::nextDay(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","nextDay",0xc24f8e4a,"thx._LocalDate.LocalDate_Impl_.nextDay","thx/LocalDate.hx",294,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 294)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,nextDay,return )

Int LocalDate_Impl__obj::snapToWeekDay(Int this1,Int weekday, ::Dynamic __o_firstDayOfWk){
 ::Dynamic firstDayOfWk = __o_firstDayOfWk.Default(0);
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","snapToWeekDay",0x866b00c4,"thx._LocalDate.LocalDate_Impl_.snapToWeekDay","thx/LocalDate.hx",305,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(weekday,"weekday")
            	HX_STACK_ARG(firstDayOfWk,"firstDayOfWk")
HXLINE( 306)		HX_VARI( Int,d) = ::thx::_LocalDate::LocalDate_Impl__obj::get_dayOfWeek(this1);
HXDLIN( 306)		HX_VARI( Int,s) = weekday;
HXLINE( 310)		Bool _hx_tmp = hx::IsLess( s,firstDayOfWk );
HXDLIN( 310)		if (_hx_tmp) {
HXLINE( 310)			hx::AddEq(s,(int)7);
            		}
HXLINE( 311)		Bool _hx_tmp1 = hx::IsLess( d,firstDayOfWk );
HXDLIN( 311)		if (_hx_tmp1) {
HXLINE( 311)			hx::AddEq(d,(int)7);
            		}
HXLINE( 312)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LocalDate_Impl__obj,snapToWeekDay,return )

Int LocalDate_Impl__obj::snapNextWeekDay(Int this1,Int weekday){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","snapNextWeekDay",0x95107c0c,"thx._LocalDate.LocalDate_Impl_.snapNextWeekDay","thx/LocalDate.hx",322,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(weekday,"weekday")
HXLINE( 323)		HX_VARI( Int,d) = ::thx::_LocalDate::LocalDate_Impl__obj::get_dayOfWeek(this1);
HXDLIN( 323)		HX_VARI( Int,s) = weekday;
HXLINE( 327)		Bool _hx_tmp = (s < d);
HXDLIN( 327)		if (_hx_tmp) {
HXLINE( 327)			hx::AddEq(s,(int)7);
            		}
HXLINE( 328)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,snapNextWeekDay,return )

Int LocalDate_Impl__obj::snapPrevWeekDay(Int this1,Int weekday){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","snapPrevWeekDay",0x250f820c,"thx._LocalDate.LocalDate_Impl_.snapPrevWeekDay","thx/LocalDate.hx",338,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(weekday,"weekday")
HXLINE( 339)		HX_VARI( Int,d) = ::thx::_LocalDate::LocalDate_Impl__obj::get_dayOfWeek(this1);
HXDLIN( 339)		HX_VARI( Int,s) = weekday;
HXLINE( 343)		Bool _hx_tmp = (s > d);
HXDLIN( 343)		if (_hx_tmp) {
HXLINE( 343)			hx::SubEq(s,(int)7);
            		}
HXLINE( 344)		return ::thx::_LocalDate::LocalDate_Impl__obj::jump(this1,::thx::TimePeriod_obj::Day_dyn(),(s - d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,snapPrevWeekDay,return )

Int LocalDate_Impl__obj::snapNext(Int this1,::hx::EnumBase period){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","snapNext",0x5e59e61c,"thx._LocalDate.LocalDate_Impl_.snapNext","thx/LocalDate.hx",353,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
HXLINE( 353)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 353)		switch((int)(_hx_tmp)){
            			case (int)0: case (int)1: case (int)2: {
HXLINE( 353)				return this1;
            			}
            			break;
            			case (int)3: {
HXLINE( 353)				return (this1 + (int)1);
            			}
            			break;
            			case (int)4: {
HXLINE( 359)				HX_VARI( Int,wd) = ::thx::_LocalDate::LocalDate_Impl__obj::get_dayOfWeek(this1);
HXLINE( 353)				return ((this1 + (int)7) - wd);
            			}
            			break;
            			case (int)5: {
HXLINE( 362)				Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 362)				Int _hx_tmp2 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXLINE( 353)				return ::thx::_LocalDate::LocalDate_Impl__obj::create(_hx_tmp1,(_hx_tmp2 + (int)1),(int)1);
            			}
            			break;
            			case (int)6: {
HXLINE( 364)				Int _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXLINE( 353)				return ::thx::_LocalDate::LocalDate_Impl__obj::create((_hx_tmp3 + (int)1),(int)1,(int)1);
            			}
            			break;
            		}
HXDLIN( 353)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,snapNext,return )

Int LocalDate_Impl__obj::snapPrev(Int this1,::hx::EnumBase period){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","snapPrev",0x5fb6201c,"thx._LocalDate.LocalDate_Impl_.snapPrev","thx/LocalDate.hx",373,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
HXLINE( 373)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 373)		switch((int)(_hx_tmp)){
            			case (int)0: case (int)1: case (int)2: case (int)3: {
HXLINE( 373)				return (this1 - (int)1);
            			}
            			break;
            			case (int)4: {
HXLINE( 377)				HX_VARI( Int,wd) = ::thx::_LocalDate::LocalDate_Impl__obj::get_dayOfWeek(this1);
HXLINE( 373)				return (this1 - wd);
            			}
            			break;
            			case (int)5: {
HXLINE( 380)				Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 380)				Int _hx_tmp2 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXLINE( 373)				return ::thx::_LocalDate::LocalDate_Impl__obj::create(_hx_tmp1,_hx_tmp2,(int)1);
            			}
            			break;
            			case (int)6: {
HXLINE( 382)				Int _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXLINE( 373)				return ::thx::_LocalDate::LocalDate_Impl__obj::create(_hx_tmp3,(int)1,(int)1);
            			}
            			break;
            		}
HXDLIN( 373)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,snapPrev,return )

Int LocalDate_Impl__obj::snapTo(Int this1,::hx::EnumBase period){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","snapTo",0xac19fa64,"thx._LocalDate.LocalDate_Impl_.snapTo","thx/LocalDate.hx",391,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(period,"period")
HXLINE( 391)		Int _hx_tmp = ( ( ::hx::EnumBase)(period) )->_hx_getIndex();
HXDLIN( 391)		switch((int)(_hx_tmp)){
            			case (int)0: case (int)1: case (int)2: case (int)3: {
HXLINE( 391)				return this1;
            			}
            			break;
            			case (int)4: {
HXLINE( 395)				HX_VARI( Int,wd) = ::thx::_LocalDate::LocalDate_Impl__obj::get_dayOfWeek(this1);
HXDLIN( 395)				HX_VAR( Int,mod);
HXLINE( 396)				if ((wd <= (int)3)) {
HXLINE( 395)					mod = -(wd);
            				}
            				else {
HXLINE( 395)					mod = ((int)7 - wd);
            				}
HXLINE( 397)				Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 397)				Int _hx_tmp2 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 397)				Int _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXLINE( 391)				return ::thx::_LocalDate::LocalDate_Impl__obj::create(_hx_tmp1,_hx_tmp2,(_hx_tmp3 + mod));
            			}
            			break;
            			case (int)5: {
HXLINE( 399)				HX_VAR_NAME( Int,mod1,"mod");
HXDLIN( 399)				Int _hx_tmp4 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN( 399)				Int _hx_tmp5 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 399)				Int _hx_tmp6 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 399)				Int _hx_tmp7 = ::Math_obj::round(((Float)::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(_hx_tmp5,_hx_tmp6) / (Float)(int)2));
HXDLIN( 399)				if ((_hx_tmp4 > _hx_tmp7)) {
HXLINE( 399)					mod1 = (int)1;
            				}
            				else {
HXLINE( 399)					mod1 = (int)0;
            				}
HXLINE( 400)				Int _hx_tmp8 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 400)				Int _hx_tmp9 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXLINE( 391)				return ::thx::_LocalDate::LocalDate_Impl__obj::create(_hx_tmp8,(_hx_tmp9 + mod1),(int)1);
            			}
            			break;
            			case (int)6: {
HXLINE( 402)				HX_VAR_NAME( Int,mod2,"mod");
HXDLIN( 402)				Int _hx_tmp10 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 402)				HX_VARI( Int,that) = ::thx::_LocalDate::LocalDate_Impl__obj::create(_hx_tmp10,(int)6,(int)2);
HXDLIN( 402)				if (((this1 - that) > (int)0)) {
HXLINE( 402)					mod2 = (int)1;
            				}
            				else {
HXLINE( 402)					mod2 = (int)0;
            				}
HXLINE( 403)				Int _hx_tmp11 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXLINE( 391)				return ::thx::_LocalDate::LocalDate_Impl__obj::create((_hx_tmp11 + mod2),(int)1,(int)1);
            			}
            			break;
            		}
HXDLIN( 391)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,snapTo,return )

Bool LocalDate_Impl__obj::sameYear(Int this1,Int other){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","sameYear",0xbfe81602,"thx._LocalDate.LocalDate_Impl_.sameYear","thx/LocalDate.hx",410,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 410)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 410)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(other,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 410)		return (_hx_tmp == _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,sameYear,return )

Bool LocalDate_Impl__obj::sameMonth(Int this1,Int other){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","sameMonth",0x4902375b,"thx._LocalDate.LocalDate_Impl_.sameMonth","thx/LocalDate.hx",416,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 416)		Bool _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::sameYear(this1,other);
HXDLIN( 416)		if (_hx_tmp) {
HXLINE( 416)			Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 416)			Int _hx_tmp2 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(other,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 416)			return (_hx_tmp1 == _hx_tmp2);
            		}
            		else {
HXLINE( 416)			return false;
            		}
HXDLIN( 416)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,sameMonth,return )

Int LocalDate_Impl__obj::withYear(Int this1,Int year){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","withYear",0x7810d8a2,"thx._LocalDate.LocalDate_Impl_.withYear","thx/LocalDate.hx",419,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(year,"year")
HXLINE( 419)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 419)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN( 419)		return ::thx::_LocalDate::LocalDate_Impl__obj::create(year,_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,withYear,return )

Int LocalDate_Impl__obj::withMonth(Int this1,Int month){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","withMonth",0xb483c0bb,"thx._LocalDate.LocalDate_Impl_.withMonth","thx/LocalDate.hx",422,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(month,"month")
HXLINE( 422)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 422)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN( 422)		return ::thx::_LocalDate::LocalDate_Impl__obj::create(_hx_tmp,month,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,withMonth,return )

Int LocalDate_Impl__obj::withDay(Int this1,Int day){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","withDay",0x7c754b17,"thx._LocalDate.LocalDate_Impl_.withDay","thx/LocalDate.hx",425,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(day,"day")
HXLINE( 425)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 425)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 425)		return ::thx::_LocalDate::LocalDate_Impl__obj::create(_hx_tmp,_hx_tmp1,day);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,withDay,return )

Int LocalDate_Impl__obj::add(Int this1,Int days){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","add",0xdfb058c2,"thx._LocalDate.LocalDate_Impl_.add","thx/LocalDate.hx",428,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(days,"days")
HXLINE( 428)		return (this1 + days);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,add,return )

Int LocalDate_Impl__obj::subtract(Int this1,Int days){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","subtract",0x4d2e66d3,"thx._LocalDate.LocalDate_Impl_.subtract","thx/LocalDate.hx",431,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(days,"days")
HXLINE( 431)		return (this1 - days);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,subtract,return )

Int LocalDate_Impl__obj::subtractDate(Int this1,Int date){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","subtractDate",0x06224ea1,"thx._LocalDate.LocalDate_Impl_.subtractDate","thx/LocalDate.hx",434,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(date,"date")
HXLINE( 434)		return (this1 - date);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,subtractDate,return )

Int LocalDate_Impl__obj::addDays(Int this1,Int days){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","addDays",0x9bb56879,"thx._LocalDate.LocalDate_Impl_.addDays","thx/LocalDate.hx",437,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(days,"days")
HXLINE( 437)		return (this1 + days);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,addDays,return )

Int LocalDate_Impl__obj::addMonths(Int this1,Int months){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","addMonths",0xa3c95b95,"thx._LocalDate.LocalDate_Impl_.addMonths","thx/LocalDate.hx",440,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(months,"months")
HXLINE( 440)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 440)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 440)		Int _hx_tmp2 = (_hx_tmp1 + months);
HXDLIN( 440)		Int _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN( 440)		return ::thx::_LocalDate::LocalDate_Impl__obj::create(_hx_tmp,_hx_tmp2,_hx_tmp3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,addMonths,return )

Int LocalDate_Impl__obj::addYears(Int this1,Int years){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","addYears",0xbd02d3f4,"thx._LocalDate.LocalDate_Impl_.addYears","thx/LocalDate.hx",444,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(years,"years")
HXLINE( 444)		return ::thx::_LocalDate::LocalDate_Impl__obj::addMonths(this1,(years * (int)12));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,addYears,return )

Int LocalDate_Impl__obj::compareTo(Int this1,Int other){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","compareTo",0x26932ae1,"thx._LocalDate.LocalDate_Impl_.compareTo","thx/LocalDate.hx",452,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 452)		return (this1 - other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,compareTo,return )

Bool LocalDate_Impl__obj::equalsTo(Int this1,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","equalsTo",0x2a577759,"thx._LocalDate.LocalDate_Impl_.equalsTo","thx/LocalDate.hx",456,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 456)		return (this1 == that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,equalsTo,return )

Bool LocalDate_Impl__obj::equals(Int self,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","equals",0xda7ba23e,"thx._LocalDate.LocalDate_Impl_.equals","thx/LocalDate.hx",460,0x8a26a2f0)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 460)		return (self == that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,equals,return )

Bool LocalDate_Impl__obj::notEqualsTo(Int this1,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","notEqualsTo",0x933b556e,"thx._LocalDate.LocalDate_Impl_.notEqualsTo","thx/LocalDate.hx",463,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 463)		return (this1 != that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,notEqualsTo,return )

Bool LocalDate_Impl__obj::notEquals(Int self,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","notEquals",0x61126113,"thx._LocalDate.LocalDate_Impl_.notEquals","thx/LocalDate.hx",467,0x8a26a2f0)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 467)		return (self != that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,notEquals,return )

Bool LocalDate_Impl__obj::nearEqualsTo(Int this1,Int other, ::cpp::Int64Struct span){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","nearEqualsTo",0x311817e1,"thx._LocalDate.LocalDate_Impl_.nearEqualsTo","thx/LocalDate.hx",469,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(span,"span")
HXLINE( 470)		HX_VARI( Int,v) = (other - this1);
HXDLIN( 470)		HX_VAR( Int,days);
HXDLIN( 470)		if ((v < (int)0)) {
HXLINE( 470)			days = -(v);
            		}
            		else {
HXLINE( 470)			days = v;
            		}
HXLINE( 471)		HX_VARI_NAME(  ::cpp::Int64Struct,this2,"this") = ::thx::_Time::Time_Impl__obj::abs(span);
HXDLIN( 471)		HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerDayI64;
HXDLIN( 471)		Bool _hx_tmp = _hx_int64_is_zero(this2);
HXDLIN( 471)		if (_hx_tmp) {
HXLINE( 471)			HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            		}
HXDLIN( 471)		HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_div(this2,b);
HXDLIN( 471)		Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 471)		Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 471)		if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 471)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 471)		Int _hx_tmp3 = _hx_int64_low(x);
HXDLIN( 471)		return (days <= _hx_tmp3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LocalDate_Impl__obj,nearEqualsTo,return )

Bool LocalDate_Impl__obj::greaterThan(Int this1,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","greaterThan",0x045a311c,"thx._LocalDate.LocalDate_Impl_.greaterThan","thx/LocalDate.hx",475,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 475)		return ((this1 - that) > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,greaterThan,return )

Bool LocalDate_Impl__obj::greater(Int self,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","greater",0xd4d55c1b,"thx._LocalDate.LocalDate_Impl_.greater","thx/LocalDate.hx",479,0x8a26a2f0)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 479)		return ((self - that) > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,greater,return )

Bool LocalDate_Impl__obj::greaterEqualsTo(Int this1,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","greaterEqualsTo",0xe1f3b0d5,"thx._LocalDate.LocalDate_Impl_.greaterEqualsTo","thx/LocalDate.hx",482,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 482)		return ((this1 - that) >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,greaterEqualsTo,return )

Bool LocalDate_Impl__obj::greaterEquals(Int self,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","greaterEquals",0xb08d44ba,"thx._LocalDate.LocalDate_Impl_.greaterEquals","thx/LocalDate.hx",486,0x8a26a2f0)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 486)		return ((self - that) >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,greaterEquals,return )

Bool LocalDate_Impl__obj::lessThan(Int this1,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","lessThan",0x48515119,"thx._LocalDate.LocalDate_Impl_.lessThan","thx/LocalDate.hx",489,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 489)		return ((this1 - that) < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,lessThan,return )

Bool LocalDate_Impl__obj::less(Int self,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","less",0xe1e37998,"thx._LocalDate.LocalDate_Impl_.less","thx/LocalDate.hx",493,0x8a26a2f0)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 493)		return ((self - that) < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,less,return )

Bool LocalDate_Impl__obj::lessEqualsTo(Int this1,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","lessEqualsTo",0x05c71352,"thx._LocalDate.LocalDate_Impl_.lessEqualsTo","thx/LocalDate.hx",496,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 496)		return ((this1 - that) <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,lessEqualsTo,return )

Bool LocalDate_Impl__obj::lessEquals(Int self,Int that){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","lessEquals",0x388a1df7,"thx._LocalDate.LocalDate_Impl_.lessEquals","thx/LocalDate.hx",500,0x8a26a2f0)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 500)		return ((self - that) <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LocalDate_Impl__obj,lessEquals,return )

 ::Date LocalDate_Impl__obj::toDate(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","toDate",0x92a57548,"thx._LocalDate.LocalDate_Impl_.toDate","thx/LocalDate.hx",503,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 503)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 503)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 503)		Int _hx_tmp2 = (_hx_tmp1 - (int)1);
HXDLIN( 503)		Int _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN( 503)		return  ::Date_obj::__new(_hx_tmp,_hx_tmp2,_hx_tmp3,(int)0,(int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,toDate,return )

::String LocalDate_Impl__obj::toString(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","toString",0x8d8bc26b,"thx._LocalDate.LocalDate_Impl_.toString","thx/LocalDate.hx",506,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 511)		HX_VAR_NAME( Int,this2,"this");
HXDLIN( 511)		if ((this1 < (int)0)) {
HXLINE( 511)			this2 = -(this1);
            		}
            		else {
HXLINE( 511)			this2 = this1;
            		}
HXDLIN( 511)		HX_VARI( Int,abs) = this2;
HXLINE( 512)		HX_VARI( Bool,isneg) = (this1 < (int)0);
HXLINE( 513)		::String _hx_tmp;
HXDLIN( 513)		if (isneg) {
HXLINE( 513)			_hx_tmp = HX_("-",2d,00,00,00);
            		}
            		else {
HXLINE( 513)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 513)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(abs,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 513)		::String _hx_tmp2 = ((HX_("",00,00,00,00) + _hx_tmp1) + HX_("-",2d,00,00,00));
HXDLIN( 513)		Int _hx_tmp3 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(abs,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 513)		::String _hx_tmp4 = ((_hx_tmp2 + ::thx::Ints_obj::lpad(_hx_tmp3,HX_("0",30,00,00,00),(int)2)) + HX_("-",2d,00,00,00));
HXDLIN( 513)		Int _hx_tmp5 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(abs,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
HXDLIN( 513)		return (_hx_tmp + (_hx_tmp4 + ::thx::Ints_obj::lpad(_hx_tmp5,HX_("0",30,00,00,00),(int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,toString,return )

Int LocalDate_Impl__obj::get_days(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","get_days",0x173b07df,"thx._LocalDate.LocalDate_Impl_.get_days","thx/LocalDate.hx",517,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 517)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,get_days,return )

Int LocalDate_Impl__obj::get_year(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","get_year",0x251f7705,"thx._LocalDate.LocalDate_Impl_.get_year","thx/LocalDate.hx",520,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 520)		return ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,get_year,return )

Int LocalDate_Impl__obj::get_month(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","get_month",0x743fb8f8,"thx._LocalDate.LocalDate_Impl_.get_month","thx/LocalDate.hx",523,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 523)		return ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,get_month,return )

Int LocalDate_Impl__obj::get_day(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","get_day",0x43d5ca14,"thx._LocalDate.LocalDate_Impl_.get_day","thx/LocalDate.hx",526,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 526)		return ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,get_day,return )

Int LocalDate_Impl__obj::get_dayOfWeek(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","get_dayOfWeek",0x0bd5c9df,"thx._LocalDate.LocalDate_Impl_.get_dayOfWeek","thx/LocalDate.hx",529,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 529)		return hx::Mod((this1 + (int)1),(int)7);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,get_dayOfWeek,return )

Int LocalDate_Impl__obj::get_dayOfYear(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","get_dayOfYear",0x0d2833a8,"thx._LocalDate.LocalDate_Impl_.get_dayOfYear","thx/LocalDate.hx",532,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 532)		return ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_DAY_OF_YEAR);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,get_dayOfYear,return )

Bool LocalDate_Impl__obj::get_isInLeapYear(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","get_isInLeapYear",0xb3a9505c,"thx._LocalDate.LocalDate_Impl_.get_isInLeapYear","thx/LocalDate.hx",535,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 535)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 535)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::isLeapYear(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,get_isInLeapYear,return )

Int LocalDate_Impl__obj::get_monthDays(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","get_monthDays",0xb3181baf,"thx._LocalDate.LocalDate_Impl_.get_monthDays","thx/LocalDate.hx",538,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 538)		Int _hx_tmp = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_YEAR);
HXDLIN( 538)		Int _hx_tmp1 = ::thx::_LocalDate::LocalDate_Impl__obj::getDatePart(this1,::thx::_LocalDate::LocalDate_Impl__obj::DATE_PART_MONTH);
HXDLIN( 538)		return ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::daysInMonth(_hx_tmp,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,get_monthDays,return )

Int LocalDate_Impl__obj::self(Int this1){
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","self",0xe683f1cb,"thx._LocalDate.LocalDate_Impl_.self","thx/LocalDate.hx",541,0x8a26a2f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 541)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LocalDate_Impl__obj,self,return )


LocalDate_Impl__obj::LocalDate_Impl__obj()
{
}

bool LocalDate_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"now") ) { outValue = now_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"jump") ) { outValue = jump_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"less") ) { outValue = less_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"self") ) { outValue = self_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapTo") ) { outValue = snapTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toDate") ) { outValue = toDate_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevDay") ) { outValue = prevDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextDay") ) { outValue = nextDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withDay") ) { outValue = withDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addDays") ) { outValue = addDays_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greater") ) { outValue = greater_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_day") ) { outValue = get_day_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromDate") ) { outValue = fromDate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromTime") ) { outValue = fromTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevYear") ) { outValue = prevYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextYear") ) { outValue = nextYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevWeek") ) { outValue = prevWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextWeek") ) { outValue = nextWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapNext") ) { outValue = snapNext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapPrev") ) { outValue = snapPrev_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameYear") ) { outValue = sameYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withYear") ) { outValue = withYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addYears") ) { outValue = addYears_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equalsTo") ) { outValue = equalsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessThan") ) { outValue = lessThan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_days") ) { outValue = get_days_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_year") ) { outValue = get_year_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"daysRange") ) { outValue = daysRange_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prevMonth") ) { outValue = prevMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nextMonth") ) { outValue = nextMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameMonth") ) { outValue = sameMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withMonth") ) { outValue = withMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addMonths") ) { outValue = addMonths_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compareTo") ) { outValue = compareTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEquals") ) { outValue = notEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_month") ) { outValue = get_month_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dateToDays") ) { outValue = dateToDays_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEquals") ) { outValue = lessEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getDatePart") ) { outValue = getDatePart_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEqualsTo") ) { outValue = notEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterThan") ) { outValue = greaterThan_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subtractDate") ) { outValue = subtractDate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEqualsTo") ) { outValue = nearEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEqualsTo") ) { outValue = lessEqualsTo_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rawDateToDays") ) { outValue = rawDateToDays_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapToWeekDay") ) { outValue = snapToWeekDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterEquals") ) { outValue = greaterEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_dayOfWeek") ) { outValue = get_dayOfWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_dayOfYear") ) { outValue = get_dayOfYear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_monthDays") ) { outValue = get_monthDays_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"daysInThisMonth") ) { outValue = daysInThisMonth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapNextWeekDay") ) { outValue = snapNextWeekDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapPrevWeekDay") ) { outValue = snapPrevWeekDay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterEqualsTo") ) { outValue = greaterEqualsTo_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_isInLeapYear") ) { outValue = get_isInLeapYear_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *LocalDate_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo LocalDate_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &LocalDate_Impl__obj::millisPerSecond,HX_HCSTRING("millisPerSecond","\x8b","\x3b","\xa2","\x48")},
	{hx::fsFloat,(void *) &LocalDate_Impl__obj::millisPerMinute,HX_HCSTRING("millisPerMinute","\xeb","\x4e","\x62","\x37")},
	{hx::fsFloat,(void *) &LocalDate_Impl__obj::millisPerHour,HX_HCSTRING("millisPerHour","\x7b","\x39","\xc1","\x92")},
	{hx::fsFloat,(void *) &LocalDate_Impl__obj::millisPerDay,HX_HCSTRING("millisPerDay","\xe5","\x65","\x67","\x8a")},
	{hx::fsInt,(void *) &LocalDate_Impl__obj::daysPerYear,HX_HCSTRING("daysPerYear","\x63","\xdb","\x6c","\xd8")},
	{hx::fsInt,(void *) &LocalDate_Impl__obj::daysPer4Years,HX_HCSTRING("daysPer4Years","\x48","\xc2","\x79","\xc0")},
	{hx::fsInt,(void *) &LocalDate_Impl__obj::daysPer100Years,HX_HCSTRING("daysPer100Years","\x6b","\xba","\xd9","\xfa")},
	{hx::fsInt,(void *) &LocalDate_Impl__obj::daysPer400Years,HX_HCSTRING("daysPer400Years","\xc8","\x10","\x71","\xa6")},
	{hx::fsInt,(void *) &LocalDate_Impl__obj::unixEpochDays,HX_HCSTRING("unixEpochDays","\xd8","\xf0","\x8b","\xac")},
	{hx::fsInt,(void *) &LocalDate_Impl__obj::DATE_PART_YEAR,HX_HCSTRING("DATE_PART_YEAR","\x38","\x30","\x83","\x5d")},
	{hx::fsInt,(void *) &LocalDate_Impl__obj::DATE_PART_DAY_OF_YEAR,HX_HCSTRING("DATE_PART_DAY_OF_YEAR","\xc7","\x53","\x49","\x7c")},
	{hx::fsInt,(void *) &LocalDate_Impl__obj::DATE_PART_MONTH,HX_HCSTRING("DATE_PART_MONTH","\x45","\x0c","\x1e","\x93")},
	{hx::fsInt,(void *) &LocalDate_Impl__obj::DATE_PART_DAY,HX_HCSTRING("DATE_PART_DAY","\x21","\xdc","\x01","\x72")},
	{hx::fsObject /*Array< int >*/ ,(void *) &LocalDate_Impl__obj::daysToMonth365,HX_HCSTRING("daysToMonth365","\x04","\xd9","\xc1","\x46")},
	{hx::fsObject /*Array< int >*/ ,(void *) &LocalDate_Impl__obj::daysToMonth366,HX_HCSTRING("daysToMonth366","\x05","\xd9","\xc1","\x46")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void LocalDate_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::millisPerSecond,"millisPerSecond");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::millisPerMinute,"millisPerMinute");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::millisPerHour,"millisPerHour");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::millisPerDay,"millisPerDay");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::daysPerYear,"daysPerYear");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::daysPer4Years,"daysPer4Years");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::daysPer100Years,"daysPer100Years");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::daysPer400Years,"daysPer400Years");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::unixEpochDays,"unixEpochDays");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::DATE_PART_YEAR,"DATE_PART_YEAR");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::DATE_PART_DAY_OF_YEAR,"DATE_PART_DAY_OF_YEAR");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::DATE_PART_MONTH,"DATE_PART_MONTH");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::DATE_PART_DAY,"DATE_PART_DAY");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::daysToMonth365,"daysToMonth365");
	HX_MARK_MEMBER_NAME(LocalDate_Impl__obj::daysToMonth366,"daysToMonth366");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LocalDate_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::millisPerSecond,"millisPerSecond");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::millisPerMinute,"millisPerMinute");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::millisPerHour,"millisPerHour");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::millisPerDay,"millisPerDay");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::daysPerYear,"daysPerYear");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::daysPer4Years,"daysPer4Years");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::daysPer100Years,"daysPer100Years");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::daysPer400Years,"daysPer400Years");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::unixEpochDays,"unixEpochDays");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::DATE_PART_YEAR,"DATE_PART_YEAR");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::DATE_PART_DAY_OF_YEAR,"DATE_PART_DAY_OF_YEAR");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::DATE_PART_MONTH,"DATE_PART_MONTH");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::DATE_PART_DAY,"DATE_PART_DAY");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::daysToMonth365,"daysToMonth365");
	HX_VISIT_MEMBER_NAME(LocalDate_Impl__obj::daysToMonth366,"daysToMonth366");
};

#endif

hx::Class LocalDate_Impl__obj::__mClass;

static ::String LocalDate_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("millisPerSecond","\x8b","\x3b","\xa2","\x48"),
	HX_HCSTRING("millisPerMinute","\xeb","\x4e","\x62","\x37"),
	HX_HCSTRING("millisPerHour","\x7b","\x39","\xc1","\x92"),
	HX_HCSTRING("millisPerDay","\xe5","\x65","\x67","\x8a"),
	HX_HCSTRING("daysPerYear","\x63","\xdb","\x6c","\xd8"),
	HX_HCSTRING("daysPer4Years","\x48","\xc2","\x79","\xc0"),
	HX_HCSTRING("daysPer100Years","\x6b","\xba","\xd9","\xfa"),
	HX_HCSTRING("daysPer400Years","\xc8","\x10","\x71","\xa6"),
	HX_HCSTRING("unixEpochDays","\xd8","\xf0","\x8b","\xac"),
	HX_HCSTRING("DATE_PART_YEAR","\x38","\x30","\x83","\x5d"),
	HX_HCSTRING("DATE_PART_DAY_OF_YEAR","\xc7","\x53","\x49","\x7c"),
	HX_HCSTRING("DATE_PART_MONTH","\x45","\x0c","\x1e","\x93"),
	HX_HCSTRING("DATE_PART_DAY","\x21","\xdc","\x01","\x72"),
	HX_HCSTRING("daysToMonth365","\x04","\xd9","\xc1","\x46"),
	HX_HCSTRING("daysToMonth366","\x05","\xd9","\xc1","\x46"),
	HX_HCSTRING("now","\x16","\xd9","\x53","\x00"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromDate","\xb8","\x24","\x2f","\xa0"),
	HX_HCSTRING("fromTime","\x97","\x9a","\xc8","\xaa"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("dateToDays","\x80","\x66","\x14","\x0a"),
	HX_HCSTRING("rawDateToDays","\x88","\xb2","\x69","\xe1"),
	HX_HCSTRING("daysRange","\xa6","\xf7","\x66","\x2c"),
	HX_HCSTRING("getDatePart","\xf7","\xd7","\x53","\xfd"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("jump","\xee","\xc4","\x69","\x46"),
	HX_HCSTRING("daysInThisMonth","\x06","\xe2","\xf6","\xf2"),
	HX_HCSTRING("prevYear","\x50","\xaa","\x15","\x19"),
	HX_HCSTRING("nextYear","\x50","\x70","\x14","\xfc"),
	HX_HCSTRING("prevMonth","\x4d","\x67","\xb6","\xf7"),
	HX_HCSTRING("nextMonth","\x4d","\xe1","\xa4","\xb3"),
	HX_HCSTRING("prevWeek","\x87","\x40","\xc3","\x17"),
	HX_HCSTRING("nextWeek","\x87","\x06","\xc2","\xfa"),
	HX_HCSTRING("prevDay","\x29","\xc9","\xbe","\x3b"),
	HX_HCSTRING("nextDay","\x29","\xc3","\x3a","\xa5"),
	HX_HCSTRING("snapToWeekDay","\xe3","\xa6","\xe7","\x80"),
	HX_HCSTRING("snapNextWeekDay","\xeb","\x27","\x9a","\xa4"),
	HX_HCSTRING("snapPrevWeekDay","\xeb","\x2d","\x99","\x34"),
	HX_HCSTRING("snapNext","\x5d","\xf4","\x3c","\x09"),
	HX_HCSTRING("snapPrev","\x5d","\x2e","\x99","\x0a"),
	HX_HCSTRING("snapTo","\x65","\x46","\x91","\x91"),
	HX_HCSTRING("sameYear","\x43","\x24","\xcb","\x6a"),
	HX_HCSTRING("sameMonth","\xfa","\xa1","\xcb","\x24"),
	HX_HCSTRING("withYear","\xe3","\xe6","\xf3","\x22"),
	HX_HCSTRING("withMonth","\x5a","\x2b","\x4d","\x90"),
	HX_HCSTRING("withDay","\xf6","\x7f","\x60","\x5f"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("subtractDate","\x62","\x11","\xb0","\x67"),
	HX_HCSTRING("addDays","\x58","\x9d","\xa0","\x7e"),
	HX_HCSTRING("addMonths","\x34","\xc6","\x92","\x7f"),
	HX_HCSTRING("addYears","\x35","\xe2","\xe5","\x67"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	HX_HCSTRING("equalsTo","\x9a","\x85","\x3a","\xd5"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("notEqualsTo","\xcd","\xe5","\x2b","\x04"),
	HX_HCSTRING("notEquals","\xb2","\xcb","\xdb","\x3c"),
	HX_HCSTRING("nearEqualsTo","\xa2","\xda","\xa5","\x92"),
	HX_HCSTRING("greaterThan","\x7b","\xc1","\x4a","\x75"),
	HX_HCSTRING("greater","\xfa","\x90","\xc0","\xb7"),
	HX_HCSTRING("greaterEqualsTo","\xb4","\x5c","\x7d","\xf1"),
	HX_HCSTRING("greaterEquals","\xd9","\xea","\x09","\xab"),
	HX_HCSTRING("lessThan","\x5a","\x5f","\x34","\xf3"),
	HX_HCSTRING("less","\x59","\x13","\xb0","\x47"),
	HX_HCSTRING("lessEqualsTo","\x13","\xd6","\x54","\x67"),
	HX_HCSTRING("lessEquals","\x78","\xfe","\xfd","\xac"),
	HX_HCSTRING("toDate","\x49","\xc1","\x1c","\x78"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_days","\x20","\x16","\x1e","\xc2"),
	HX_HCSTRING("get_year","\x46","\x85","\x02","\xd0"),
	HX_HCSTRING("get_month","\x97","\x23","\x09","\x50"),
	HX_HCSTRING("get_day","\xf3","\xfe","\xc0","\x26"),
	HX_HCSTRING("get_dayOfWeek","\xfe","\x6f","\x52","\x06"),
	HX_HCSTRING("get_dayOfYear","\xc7","\xd9","\xa4","\x07"),
	HX_HCSTRING("get_isInLeapYear","\x9d","\x07","\x96","\x3c"),
	HX_HCSTRING("get_monthDays","\xce","\xc1","\x94","\xad"),
	HX_HCSTRING("self","\x8c","\x8b","\x50","\x4c"),
	::String(null())
};

void LocalDate_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._LocalDate.LocalDate_Impl_","\x8f","\xa2","\xb8","\xc4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LocalDate_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LocalDate_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(LocalDate_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< LocalDate_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LocalDate_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LocalDate_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LocalDate_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void LocalDate_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",13,0x8a26a2f0)
HXLINE(  13)		millisPerSecond = ((Float)1000);
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",14,0x8a26a2f0)
HXLINE(  14)		millisPerMinute = (::thx::_LocalDate::LocalDate_Impl__obj::millisPerSecond * (int)60);
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",15,0x8a26a2f0)
HXLINE(  15)		millisPerHour = (::thx::_LocalDate::LocalDate_Impl__obj::millisPerMinute * (int)60);
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",16,0x8a26a2f0)
HXLINE(  16)		millisPerDay = (::thx::_LocalDate::LocalDate_Impl__obj::millisPerHour * (int)24);
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",18,0x8a26a2f0)
HXLINE(  18)		daysPerYear = (int)365;
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",19,0x8a26a2f0)
HXLINE(  19)		daysPer4Years = ((::thx::_LocalDate::LocalDate_Impl__obj::daysPerYear * (int)4) + (int)1);
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",20,0x8a26a2f0)
HXLINE(  20)		daysPer100Years = ((::thx::_LocalDate::LocalDate_Impl__obj::daysPer4Years * (int)25) - (int)1);
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",21,0x8a26a2f0)
HXLINE(  21)		daysPer400Years = ((::thx::_LocalDate::LocalDate_Impl__obj::daysPer100Years * (int)4) + (int)1);
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",23,0x8a26a2f0)
HXLINE(  23)		unixEpochDays = ((((::thx::_LocalDate::LocalDate_Impl__obj::daysPer400Years * (int)4) + (::thx::_LocalDate::LocalDate_Impl__obj::daysPer100Years * (int)3)) + (::thx::_LocalDate::LocalDate_Impl__obj::daysPer4Years * (int)17)) + ::thx::_LocalDate::LocalDate_Impl__obj::daysPerYear);
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",25,0x8a26a2f0)
HXLINE(  25)		DATE_PART_YEAR = (int)0;
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",26,0x8a26a2f0)
HXLINE(  26)		DATE_PART_DAY_OF_YEAR = (int)1;
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",27,0x8a26a2f0)
HXLINE(  27)		DATE_PART_MONTH = (int)2;
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",28,0x8a26a2f0)
HXLINE(  28)		DATE_PART_DAY = (int)3;
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",30,0x8a26a2f0)
HXLINE(  30)		daysToMonth365 = ::Array_obj< Int >::__new(13)->init(0,(int)0)->init(1,(int)31)->init(2,(int)59)->init(3,(int)90)->init(4,(int)120)->init(5,(int)151)->init(6,(int)181)->init(7,(int)212)->init(8,(int)243)->init(9,(int)273)->init(10,(int)304)->init(11,(int)334)->init(12,(int)365);
            	}
{
            	HX_STACK_FRAME("thx._LocalDate.LocalDate_Impl_","boot",0xdb4eea71,"thx._LocalDate.LocalDate_Impl_.boot","thx/LocalDate.hx",31,0x8a26a2f0)
HXLINE(  31)		daysToMonth366 = ::Array_obj< Int >::__new(13)->init(0,(int)0)->init(1,(int)31)->init(2,(int)60)->init(3,(int)91)->init(4,(int)121)->init(5,(int)152)->init(6,(int)182)->init(7,(int)213)->init(8,(int)244)->init(9,(int)274)->init(10,(int)305)->init(11,(int)335)->init(12,(int)366);
            	}
}

} // end namespace thx
} // end namespace _LocalDate
