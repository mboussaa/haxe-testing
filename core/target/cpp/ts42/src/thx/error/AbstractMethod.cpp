// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_error_AbstractMethod
#include <thx/error/AbstractMethod.h>
#endif

namespace thx{
namespace error{

void AbstractMethod_obj::__construct( ::Dynamic posInfo){
            	HX_STACK_FRAME("thx.error.AbstractMethod","new",0x9376ca05,"thx.error.AbstractMethod.new","thx/error/AbstractMethod.hx",20,0x9967ec09)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(posInfo,"posInfo")
HXLINE(  20)		super::__construct(((((HX_("method ",1f,0e,3d,26) + ( (::String)(posInfo->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) )) + HX_(".",2e,00,00,00)) + ( (::String)(posInfo->__Field(HX_("methodName",cc,19,0f,12),hx::paccDynamic)) )) + HX_("() is abstract",39,8c,30,12)),null(),posInfo);
            	}

Dynamic AbstractMethod_obj::__CreateEmpty() { return new AbstractMethod_obj; }

hx::ObjectPtr< AbstractMethod_obj > AbstractMethod_obj::__new( ::Dynamic posInfo)
{
	hx::ObjectPtr< AbstractMethod_obj > _hx_result = new AbstractMethod_obj();
	_hx_result->__construct(posInfo);
	return _hx_result;
}

Dynamic AbstractMethod_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AbstractMethod_obj > _hx_result = new AbstractMethod_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}


AbstractMethod_obj::AbstractMethod_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *AbstractMethod_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *AbstractMethod_obj_sStaticStorageInfo = 0;
#endif

static void AbstractMethod_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AbstractMethod_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AbstractMethod_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AbstractMethod_obj::__mClass,"__mClass");
};

#endif

hx::Class AbstractMethod_obj::__mClass;

void AbstractMethod_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.error.AbstractMethod","\x93","\x63","\x66","\xfa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AbstractMethod_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< AbstractMethod_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AbstractMethod_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AbstractMethod_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AbstractMethod_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace error
