// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__LocalDate_LocalDate_Impl_
#define INCLUDED_thx__LocalDate_LocalDate_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS0(Date)
HX_DECLARE_CLASS1(thx,TimePeriod)
HX_DECLARE_CLASS2(thx,_LocalDate,LocalDate_Impl_)

namespace thx{
namespace _LocalDate{


class HXCPP_CLASS_ATTRIBUTES LocalDate_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef LocalDate_Impl__obj OBJ_;
		LocalDate_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._LocalDate.LocalDate_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._LocalDate.LocalDate_Impl_"); }
		static hx::ObjectPtr< LocalDate_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~LocalDate_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("LocalDate_Impl_","\x79","\x52","\x46","\x85"); }

		static void __boot();
		static Float millisPerSecond;
		static Float millisPerMinute;
		static Float millisPerHour;
		static Float millisPerDay;
		static Int daysPerYear;
		static Int daysPer4Years;
		static Int daysPer100Years;
		static Int daysPer400Years;
		static Int unixEpochDays;
		static Int DATE_PART_YEAR;
		static Int DATE_PART_DAY_OF_YEAR;
		static Int DATE_PART_MONTH;
		static Int DATE_PART_DAY;
		static ::Array< Int > daysToMonth365;
		static ::Array< Int > daysToMonth366;
		static Int now();
		static ::Dynamic now_dyn();

		static Int fromInt(Int days);
		static ::Dynamic fromInt_dyn();

		static Int fromDate( ::Date date);
		static ::Dynamic fromDate_dyn();

		static Int fromTime(Float timestamp);
		static ::Dynamic fromTime_dyn();

		static Int fromString(::String s);
		static ::Dynamic fromString_dyn();

		static Int compare(Int a,Int b);
		static ::Dynamic compare_dyn();

		static Int create(Int year,Int month,Int day);
		static ::Dynamic create_dyn();

		static Int dateToDays(Int year,Int month,Int day);
		static ::Dynamic dateToDays_dyn();

		static Int rawDateToDays(Int year,Int month,Int day);
		static ::Dynamic rawDateToDays_dyn();

		static ::Array< Int > daysRange(Int start,Int end);
		static ::Dynamic daysRange_dyn();

		static Int getDatePart(Int this1,Int part);
		static ::Dynamic getDatePart_dyn();

		static Int _new(Int days);
		static ::Dynamic _new_dyn();

		static Int min(Int this1,Int other);
		static ::Dynamic min_dyn();

		static Int max(Int this1,Int other);
		static ::Dynamic max_dyn();

		static Int jump(Int this1,::hx::EnumBase period,Int amount);
		static ::Dynamic jump_dyn();

		static Int daysInThisMonth(Int this1);
		static ::Dynamic daysInThisMonth_dyn();

		static Int prevYear(Int this1);
		static ::Dynamic prevYear_dyn();

		static Int nextYear(Int this1);
		static ::Dynamic nextYear_dyn();

		static Int prevMonth(Int this1);
		static ::Dynamic prevMonth_dyn();

		static Int nextMonth(Int this1);
		static ::Dynamic nextMonth_dyn();

		static Int prevWeek(Int this1);
		static ::Dynamic prevWeek_dyn();

		static Int nextWeek(Int this1);
		static ::Dynamic nextWeek_dyn();

		static Int prevDay(Int this1);
		static ::Dynamic prevDay_dyn();

		static Int nextDay(Int this1);
		static ::Dynamic nextDay_dyn();

		static Int snapToWeekDay(Int this1,Int weekday, ::Dynamic firstDayOfWk);
		static ::Dynamic snapToWeekDay_dyn();

		static Int snapNextWeekDay(Int this1,Int weekday);
		static ::Dynamic snapNextWeekDay_dyn();

		static Int snapPrevWeekDay(Int this1,Int weekday);
		static ::Dynamic snapPrevWeekDay_dyn();

		static Int snapNext(Int this1,::hx::EnumBase period);
		static ::Dynamic snapNext_dyn();

		static Int snapPrev(Int this1,::hx::EnumBase period);
		static ::Dynamic snapPrev_dyn();

		static Int snapTo(Int this1,::hx::EnumBase period);
		static ::Dynamic snapTo_dyn();

		static Bool sameYear(Int this1,Int other);
		static ::Dynamic sameYear_dyn();

		static Bool sameMonth(Int this1,Int other);
		static ::Dynamic sameMonth_dyn();

		static Int withYear(Int this1,Int year);
		static ::Dynamic withYear_dyn();

		static Int withMonth(Int this1,Int month);
		static ::Dynamic withMonth_dyn();

		static Int withDay(Int this1,Int day);
		static ::Dynamic withDay_dyn();

		static Int add(Int this1,Int days);
		static ::Dynamic add_dyn();

		static Int subtract(Int this1,Int days);
		static ::Dynamic subtract_dyn();

		static Int subtractDate(Int this1,Int date);
		static ::Dynamic subtractDate_dyn();

		static Int addDays(Int this1,Int days);
		static ::Dynamic addDays_dyn();

		static Int addMonths(Int this1,Int months);
		static ::Dynamic addMonths_dyn();

		static Int addYears(Int this1,Int years);
		static ::Dynamic addYears_dyn();

		static Int compareTo(Int this1,Int other);
		static ::Dynamic compareTo_dyn();

		static Bool equalsTo(Int this1,Int that);
		static ::Dynamic equalsTo_dyn();

		static Bool equals(Int self,Int that);
		static ::Dynamic equals_dyn();

		static Bool notEqualsTo(Int this1,Int that);
		static ::Dynamic notEqualsTo_dyn();

		static Bool notEquals(Int self,Int that);
		static ::Dynamic notEquals_dyn();

		static Bool nearEqualsTo(Int this1,Int other, ::cpp::Int64Struct span);
		static ::Dynamic nearEqualsTo_dyn();

		static Bool greaterThan(Int this1,Int that);
		static ::Dynamic greaterThan_dyn();

		static Bool greater(Int self,Int that);
		static ::Dynamic greater_dyn();

		static Bool greaterEqualsTo(Int this1,Int that);
		static ::Dynamic greaterEqualsTo_dyn();

		static Bool greaterEquals(Int self,Int that);
		static ::Dynamic greaterEquals_dyn();

		static Bool lessThan(Int this1,Int that);
		static ::Dynamic lessThan_dyn();

		static Bool less(Int self,Int that);
		static ::Dynamic less_dyn();

		static Bool lessEqualsTo(Int this1,Int that);
		static ::Dynamic lessEqualsTo_dyn();

		static Bool lessEquals(Int self,Int that);
		static ::Dynamic lessEquals_dyn();

		static  ::Date toDate(Int this1);
		static ::Dynamic toDate_dyn();

		static ::String toString(Int this1);
		static ::Dynamic toString_dyn();

		static Int get_days(Int this1);
		static ::Dynamic get_days_dyn();

		static Int get_year(Int this1);
		static ::Dynamic get_year_dyn();

		static Int get_month(Int this1);
		static ::Dynamic get_month_dyn();

		static Int get_day(Int this1);
		static ::Dynamic get_day_dyn();

		static Int get_dayOfWeek(Int this1);
		static ::Dynamic get_dayOfWeek_dyn();

		static Int get_dayOfYear(Int this1);
		static ::Dynamic get_dayOfYear_dyn();

		static Bool get_isInLeapYear(Int this1);
		static ::Dynamic get_isInLeapYear_dyn();

		static Int get_monthDays(Int this1);
		static ::Dynamic get_monthDays_dyn();

		static Int self(Int this1);
		static ::Dynamic self_dyn();

};

} // end namespace thx
} // end namespace _LocalDate

#endif /* INCLUDED_thx__LocalDate_LocalDate_Impl_ */ 
