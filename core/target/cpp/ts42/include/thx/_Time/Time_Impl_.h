// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__Time_Time_Impl_
#define INCLUDED_thx__Time_Time_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS2(thx,_Time,Time_Impl_)

namespace thx{
namespace _Time{


class HXCPP_CLASS_ATTRIBUTES Time_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Time_Impl__obj OBJ_;
		Time_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._Time.Time_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._Time.Time_Impl_"); }
		static hx::ObjectPtr< Time_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Time_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Time_Impl_","\x8d","\x14","\x6f","\xac"); }

		static void __boot();
		static  ::cpp::Int64Struct zero;
		static  ::cpp::Int64Struct oneDay;
		static  ::cpp::Int64Struct fromDays(Int days);
		static ::Dynamic fromDays_dyn();

		static  ::cpp::Int64Struct fromHours(Int hours);
		static ::Dynamic fromHours_dyn();

		static  ::cpp::Int64Struct fromMinutes(Int minutes);
		static ::Dynamic fromMinutes_dyn();

		static  ::cpp::Int64Struct fromSeconds(Int seconds);
		static ::Dynamic fromSeconds_dyn();

		static  ::cpp::Int64Struct fromMilliseconds(Int milliseconds);
		static ::Dynamic fromMilliseconds_dyn();

		static  ::cpp::Int64Struct timeToTicks(Int hours,Int minutes,Int seconds);
		static ::Dynamic timeToTicks_dyn();

		static  ::cpp::Int64Struct fromString(::String s);
		static ::Dynamic fromString_dyn();

		static Int compare( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic compare_dyn();

		static  ::cpp::Int64Struct create(Int hours, ::Dynamic minutes, ::Dynamic seconds, ::Dynamic milliseconds);
		static ::Dynamic create_dyn();

		static  ::cpp::Int64Struct createDays(Int days, ::Dynamic hours, ::Dynamic minutes, ::Dynamic seconds, ::Dynamic milliseconds);
		static ::Dynamic createDays_dyn();

		static  ::cpp::Int64Struct _new( ::cpp::Int64Struct ticks);
		static ::Dynamic _new_dyn();

		static  ::cpp::Int64Struct abs( ::cpp::Int64Struct this1);
		static ::Dynamic abs_dyn();

		static  ::cpp::Int64Struct withHours( ::cpp::Int64Struct this1,Int hours);
		static ::Dynamic withHours_dyn();

		static  ::cpp::Int64Struct withMinutes( ::cpp::Int64Struct this1,Int minutes);
		static ::Dynamic withMinutes_dyn();

		static  ::cpp::Int64Struct withSeconds( ::cpp::Int64Struct this1,Int seconds);
		static ::Dynamic withSeconds_dyn();

		static  ::cpp::Int64Struct withMilliseconds( ::cpp::Int64Struct this1,Int milliseconds);
		static ::Dynamic withMilliseconds_dyn();

		static  ::cpp::Int64Struct negate( ::cpp::Int64Struct this1);
		static ::Dynamic negate_dyn();

		static  ::cpp::Int64Struct add( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic add_dyn();

		static  ::cpp::Int64Struct addTicks( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic addTicks_dyn();

		static  ::cpp::Int64Struct subtract( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic subtract_dyn();

		static Int compareTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic compareTo_dyn();

		static Bool equalsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic equalsTo_dyn();

		static Bool equals( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic equals_dyn();

		static Bool notEqualsTo( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic notEqualsTo_dyn();

		static Bool notEquals( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic notEquals_dyn();

		static Bool greaterThan( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic greaterThan_dyn();

		static Bool greater( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic greater_dyn();

		static Bool greaterEqualsTo( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic greaterEqualsTo_dyn();

		static Bool greaterEquals( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic greaterEquals_dyn();

		static Bool lessThan( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic lessThan_dyn();

		static Bool less( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic less_dyn();

		static Bool lessEqualsTo( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic lessEqualsTo_dyn();

		static Bool lessEquals( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic lessEquals_dyn();

		static  ::cpp::Int64Struct toDateTimeUtc( ::cpp::Int64Struct this1);
		static ::Dynamic toDateTimeUtc_dyn();

		static ::String toString( ::cpp::Int64Struct this1);
		static ::Dynamic toString_dyn();

		static ::String toGmtString( ::cpp::Int64Struct this1);
		static ::Dynamic toGmtString_dyn();

		static  ::cpp::Int64Struct get_ticks( ::cpp::Int64Struct this1);
		static ::Dynamic get_ticks_dyn();

		static Int get_days( ::cpp::Int64Struct this1);
		static ::Dynamic get_days_dyn();

		static Int get_hours( ::cpp::Int64Struct this1);
		static ::Dynamic get_hours_dyn();

		static Int get_minutes( ::cpp::Int64Struct this1);
		static ::Dynamic get_minutes_dyn();

		static Int get_seconds( ::cpp::Int64Struct this1);
		static ::Dynamic get_seconds_dyn();

		static Int get_milliseconds( ::cpp::Int64Struct this1);
		static ::Dynamic get_milliseconds_dyn();

		static Int get_microseconds( ::cpp::Int64Struct this1);
		static ::Dynamic get_microseconds_dyn();

		static Int get_ticksInSecond( ::cpp::Int64Struct this1);
		static ::Dynamic get_ticksInSecond_dyn();

		static  ::cpp::Int64Struct get_totalDays( ::cpp::Int64Struct this1);
		static ::Dynamic get_totalDays_dyn();

		static  ::cpp::Int64Struct get_totalHours( ::cpp::Int64Struct this1);
		static ::Dynamic get_totalHours_dyn();

		static  ::cpp::Int64Struct get_totalMinutes( ::cpp::Int64Struct this1);
		static ::Dynamic get_totalMinutes_dyn();

		static  ::cpp::Int64Struct get_totalSeconds( ::cpp::Int64Struct this1);
		static ::Dynamic get_totalSeconds_dyn();

		static  ::cpp::Int64Struct get_totalMilliseconds( ::cpp::Int64Struct this1);
		static ::Dynamic get_totalMilliseconds_dyn();

		static  ::cpp::Int64Struct get_totalMicroseconds( ::cpp::Int64Struct this1);
		static ::Dynamic get_totalMicroseconds_dyn();

		static Bool get_isNegative( ::cpp::Int64Struct this1);
		static ::Dynamic get_isNegative_dyn();

};

} // end namespace thx
} // end namespace _Time

#endif /* INCLUDED_thx__Time_Time_Impl_ */ 
