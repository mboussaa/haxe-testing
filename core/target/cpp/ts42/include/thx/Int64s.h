// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_Int64s
#define INCLUDED_thx_Int64s

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS1(thx,Int64s)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES Int64s_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Int64s_obj OBJ_;
		Int64s_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.Int64s")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.Int64s"); }
		static hx::ObjectPtr< Int64s_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Int64s_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Int64s","\x06","\x0e","\xf7","\xd2"); }

		static void __boot();
		static  ::cpp::Int64Struct one;
		static  ::cpp::Int64Struct two;
		static  ::cpp::Int64Struct zero;
		static  ::cpp::Int64Struct ten;
		static  ::cpp::Int64Struct maxValue;
		static  ::cpp::Int64Struct minValue;
		static  ::cpp::Int64Struct abs( ::cpp::Int64Struct value);
		static ::Dynamic abs_dyn();

		static Int compare( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic compare_dyn();

		static  ::cpp::Int64Struct parse(::String s);
		static ::Dynamic parse_dyn();

		static  ::cpp::Int64Struct toInt64(::String s);
		static ::Dynamic toInt64_dyn();

		static  ::cpp::Int64Struct divRound( ::cpp::Int64Struct num, ::cpp::Int64Struct div);
		static ::Dynamic divRound_dyn();

		static  ::cpp::Int64Struct divFloor( ::cpp::Int64Struct num, ::cpp::Int64Struct div);
		static ::Dynamic divFloor_dyn();

		static  ::cpp::Int64Struct divCeil( ::cpp::Int64Struct num, ::cpp::Int64Struct div);
		static ::Dynamic divCeil_dyn();

		static  ::cpp::Int64Struct min;
		static Float toFloat( ::cpp::Int64Struct i);
		static ::Dynamic toFloat_dyn();

		static  ::cpp::Int64Struct fromFloat(Float f);
		static ::Dynamic fromFloat_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_Int64s */ 
