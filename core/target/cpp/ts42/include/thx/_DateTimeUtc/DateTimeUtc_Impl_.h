// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_
#define INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS0(Date)
HX_DECLARE_CLASS1(thx,TimePeriod)
HX_DECLARE_CLASS2(thx,_DateTimeUtc,DateTimeUtc_Impl_)

namespace thx{
namespace _DateTimeUtc{


class HXCPP_CLASS_ATTRIBUTES DateTimeUtc_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef DateTimeUtc_Impl__obj OBJ_;
		DateTimeUtc_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._DateTimeUtc.DateTimeUtc_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._DateTimeUtc.DateTimeUtc_Impl_"); }
		static hx::ObjectPtr< DateTimeUtc_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DateTimeUtc_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("DateTimeUtc_Impl_","\xc9","\x7b","\x85","\x7f"); }

		static void __boot();
		static Int millisPerSecond;
		static Int millisPerMinute;
		static Int millisPerHour;
		static Int millisPerDay;
		static  ::cpp::Int64Struct tenI64;
		static  ::cpp::Int64Struct hundredI64;
		static  ::cpp::Int64Struct thousandI64;
		static  ::cpp::Int64Struct tenThousandI64;
		static  ::cpp::Int64Struct millionI64;
		static  ::cpp::Int64Struct ticksPerMicrosecondI64;
		static Int ticksPerMillisecond;
		static  ::cpp::Int64Struct ticksPerMillisecondI64;
		static  ::cpp::Int64Struct ticksPerSecondI64;
		static  ::cpp::Int64Struct ticksPerMinuteI64;
		static  ::cpp::Int64Struct ticksPerHourI64;
		static  ::cpp::Int64Struct ticksPerDayI64;
		static Int daysPerYear;
		static Int daysPer4Years;
		static Int daysPer100Years;
		static Int daysPer400Years;
		static Int daysTo1970;
		static  ::cpp::Int64Struct unixEpochTicks;
		static Int DATE_PART_YEAR;
		static Int DATE_PART_DAY_OF_YEAR;
		static Int DATE_PART_MONTH;
		static Int DATE_PART_DAY;
		static ::Array< Int > daysToMonth365;
		static ::Array< Int > daysToMonth366;
		static  ::cpp::Int64Struct now();
		static ::Dynamic now_dyn();

		static  ::cpp::Int64Struct fromInt64( ::cpp::Int64Struct ticks);
		static ::Dynamic fromInt64_dyn();

		static  ::cpp::Int64Struct fromDate( ::Date date);
		static ::Dynamic fromDate_dyn();

		static  ::cpp::Int64Struct fromTime(Float timestamp);
		static ::Dynamic fromTime_dyn();

		static  ::cpp::Int64Struct fromString(::String s);
		static ::Dynamic fromString_dyn();

		static Int compare( ::cpp::Int64Struct a, ::cpp::Int64Struct b);
		static ::Dynamic compare_dyn();

		static  ::cpp::Int64Struct create(Int year,Int month,Int day, ::Dynamic hour, ::Dynamic minute, ::Dynamic second, ::Dynamic millisecond);
		static ::Dynamic create_dyn();

		static Bool isLeapYear(Int year);
		static ::Dynamic isLeapYear_dyn();

		static  ::cpp::Int64Struct dateToTicks(Int year,Int month,Int day);
		static ::Dynamic dateToTicks_dyn();

		static  ::cpp::Int64Struct rawDateToTicks(Int year,Int month,Int day);
		static ::Dynamic rawDateToTicks_dyn();

		static Int daysInMonth(Int year,Int month);
		static ::Dynamic daysInMonth_dyn();

		static ::Array< ::Dynamic> daysRange( ::cpp::Int64Struct start, ::cpp::Int64Struct end);
		static ::Dynamic daysRange_dyn();

		static Int getDatePart( ::cpp::Int64Struct this1,Int part);
		static ::Dynamic getDatePart_dyn();

		static  ::cpp::Int64Struct _new( ::cpp::Int64Struct ticks);
		static ::Dynamic _new_dyn();

		static  ::cpp::Int64Struct min( ::cpp::Int64Struct this1, ::cpp::Int64Struct other);
		static ::Dynamic min_dyn();

		static  ::cpp::Int64Struct max( ::cpp::Int64Struct this1, ::cpp::Int64Struct other);
		static ::Dynamic max_dyn();

		static  ::cpp::Int64Struct jump( ::cpp::Int64Struct this1,::hx::EnumBase period,Int amount);
		static ::Dynamic jump_dyn();

		static Int daysInThisMonth( ::cpp::Int64Struct this1);
		static ::Dynamic daysInThisMonth_dyn();

		static  ::cpp::Int64Struct prevYear( ::cpp::Int64Struct this1);
		static ::Dynamic prevYear_dyn();

		static  ::cpp::Int64Struct nextYear( ::cpp::Int64Struct this1);
		static ::Dynamic nextYear_dyn();

		static  ::cpp::Int64Struct prevMonth( ::cpp::Int64Struct this1);
		static ::Dynamic prevMonth_dyn();

		static  ::cpp::Int64Struct nextMonth( ::cpp::Int64Struct this1);
		static ::Dynamic nextMonth_dyn();

		static  ::cpp::Int64Struct prevWeek( ::cpp::Int64Struct this1);
		static ::Dynamic prevWeek_dyn();

		static  ::cpp::Int64Struct nextWeek( ::cpp::Int64Struct this1);
		static ::Dynamic nextWeek_dyn();

		static  ::cpp::Int64Struct prevDay( ::cpp::Int64Struct this1);
		static ::Dynamic prevDay_dyn();

		static  ::cpp::Int64Struct nextDay( ::cpp::Int64Struct this1);
		static ::Dynamic nextDay_dyn();

		static  ::cpp::Int64Struct prevHour( ::cpp::Int64Struct this1);
		static ::Dynamic prevHour_dyn();

		static  ::cpp::Int64Struct nextHour( ::cpp::Int64Struct this1);
		static ::Dynamic nextHour_dyn();

		static  ::cpp::Int64Struct prevMinute( ::cpp::Int64Struct this1);
		static ::Dynamic prevMinute_dyn();

		static  ::cpp::Int64Struct nextMinute( ::cpp::Int64Struct this1);
		static ::Dynamic nextMinute_dyn();

		static  ::cpp::Int64Struct prevSecond( ::cpp::Int64Struct this1);
		static ::Dynamic prevSecond_dyn();

		static  ::cpp::Int64Struct nextSecond( ::cpp::Int64Struct this1);
		static ::Dynamic nextSecond_dyn();

		static  ::cpp::Int64Struct snapToWeekDay( ::cpp::Int64Struct this1,Int weekday, ::Dynamic firstDayOfWk);
		static ::Dynamic snapToWeekDay_dyn();

		static  ::cpp::Int64Struct snapNextWeekDay( ::cpp::Int64Struct this1,Int weekday);
		static ::Dynamic snapNextWeekDay_dyn();

		static  ::cpp::Int64Struct snapPrevWeekDay( ::cpp::Int64Struct this1,Int weekday);
		static ::Dynamic snapPrevWeekDay_dyn();

		static  ::cpp::Int64Struct snapNext( ::cpp::Int64Struct this1,::hx::EnumBase period);
		static ::Dynamic snapNext_dyn();

		static  ::cpp::Int64Struct snapPrev( ::cpp::Int64Struct this1,::hx::EnumBase period);
		static ::Dynamic snapPrev_dyn();

		static  ::cpp::Int64Struct snapTo( ::cpp::Int64Struct this1,::hx::EnumBase period);
		static ::Dynamic snapTo_dyn();

		static Bool sameYear( ::cpp::Int64Struct this1, ::cpp::Int64Struct other);
		static ::Dynamic sameYear_dyn();

		static Bool sameMonth( ::cpp::Int64Struct this1, ::cpp::Int64Struct other);
		static ::Dynamic sameMonth_dyn();

		static Bool sameDay( ::cpp::Int64Struct this1, ::cpp::Int64Struct other);
		static ::Dynamic sameDay_dyn();

		static Bool sameHour( ::cpp::Int64Struct this1, ::cpp::Int64Struct other);
		static ::Dynamic sameHour_dyn();

		static Bool sameMinute( ::cpp::Int64Struct this1, ::cpp::Int64Struct other);
		static ::Dynamic sameMinute_dyn();

		static Bool sameSecond( ::cpp::Int64Struct this1, ::cpp::Int64Struct other);
		static ::Dynamic sameSecond_dyn();

		static  ::cpp::Int64Struct withYear( ::cpp::Int64Struct this1,Int year);
		static ::Dynamic withYear_dyn();

		static  ::cpp::Int64Struct withMonth( ::cpp::Int64Struct this1,Int month);
		static ::Dynamic withMonth_dyn();

		static  ::cpp::Int64Struct withDay( ::cpp::Int64Struct this1,Int day);
		static ::Dynamic withDay_dyn();

		static  ::cpp::Int64Struct withHour( ::cpp::Int64Struct this1,Int hour);
		static ::Dynamic withHour_dyn();

		static  ::cpp::Int64Struct withMinute( ::cpp::Int64Struct this1,Int minute);
		static ::Dynamic withMinute_dyn();

		static  ::cpp::Int64Struct withSecond( ::cpp::Int64Struct this1,Int second);
		static ::Dynamic withSecond_dyn();

		static  ::cpp::Int64Struct withMillisecond( ::cpp::Int64Struct this1,Int millisecond);
		static ::Dynamic withMillisecond_dyn();

		static  ::cpp::Int64Struct add( ::cpp::Int64Struct this1, ::cpp::Int64Struct time);
		static ::Dynamic add_dyn();

		static  ::cpp::Int64Struct addTicks( ::cpp::Int64Struct this1, ::cpp::Int64Struct tickstoadd);
		static ::Dynamic addTicks_dyn();

		static  ::cpp::Int64Struct subtract( ::cpp::Int64Struct this1, ::cpp::Int64Struct time);
		static ::Dynamic subtract_dyn();

		static  ::cpp::Int64Struct subtractDate( ::cpp::Int64Struct this1, ::cpp::Int64Struct date);
		static ::Dynamic subtractDate_dyn();

		static  ::cpp::Int64Struct addScaled( ::cpp::Int64Struct this1,Float value,Int scale);
		static ::Dynamic addScaled_dyn();

		static  ::cpp::Int64Struct addDays( ::cpp::Int64Struct this1,Float days);
		static ::Dynamic addDays_dyn();

		static  ::cpp::Int64Struct addHours( ::cpp::Int64Struct this1,Float hours);
		static ::Dynamic addHours_dyn();

		static  ::cpp::Int64Struct addMilliseconds( ::cpp::Int64Struct this1,Int milliseconds);
		static ::Dynamic addMilliseconds_dyn();

		static  ::cpp::Int64Struct addMinutes( ::cpp::Int64Struct this1,Float minutes);
		static ::Dynamic addMinutes_dyn();

		static  ::cpp::Int64Struct addMonths( ::cpp::Int64Struct this1,Int months);
		static ::Dynamic addMonths_dyn();

		static  ::cpp::Int64Struct addSeconds( ::cpp::Int64Struct this1,Float seconds);
		static ::Dynamic addSeconds_dyn();

		static  ::cpp::Int64Struct addYears( ::cpp::Int64Struct this1,Int years);
		static ::Dynamic addYears_dyn();

		static Int compareTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct other);
		static ::Dynamic compareTo_dyn();

		static Bool equalsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic equalsTo_dyn();

		static Bool equals( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic equals_dyn();

		static Bool notEqualsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic notEqualsTo_dyn();

		static Bool notEquals( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic notEquals_dyn();

		static Bool nearEqualsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct other, ::cpp::Int64Struct span);
		static ::Dynamic nearEqualsTo_dyn();

		static Bool greaterThan( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic greaterThan_dyn();

		static Bool greater( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic greater_dyn();

		static Bool greaterEqualsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic greaterEqualsTo_dyn();

		static Bool greaterEquals( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic greaterEquals_dyn();

		static Bool lessThan( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic lessThan_dyn();

		static Bool less( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic less_dyn();

		static Bool lessEqualsTo( ::cpp::Int64Struct this1, ::cpp::Int64Struct that);
		static ::Dynamic lessEqualsTo_dyn();

		static Bool lessEquals( ::cpp::Int64Struct self, ::cpp::Int64Struct that);
		static ::Dynamic lessEquals_dyn();

		static Float toTime( ::cpp::Int64Struct this1);
		static ::Dynamic toTime_dyn();

		static  ::Date toDate( ::cpp::Int64Struct this1);
		static ::Dynamic toDate_dyn();

		static ::Array< ::Dynamic> toDateTime( ::cpp::Int64Struct this1, ::Dynamic offset);
		static ::Dynamic toDateTime_dyn();

		static ::Array< ::Dynamic> toLocalDateTime( ::cpp::Int64Struct this1);
		static ::Dynamic toLocalDateTime_dyn();

		static ::String toString( ::cpp::Int64Struct this1);
		static ::Dynamic toString_dyn();

		static  ::cpp::Int64Struct get_ticks( ::cpp::Int64Struct this1);
		static ::Dynamic get_ticks_dyn();

		static Int get_year( ::cpp::Int64Struct this1);
		static ::Dynamic get_year_dyn();

		static Int get_month( ::cpp::Int64Struct this1);
		static ::Dynamic get_month_dyn();

		static Int get_day( ::cpp::Int64Struct this1);
		static ::Dynamic get_day_dyn();

		static Int get_hour( ::cpp::Int64Struct this1);
		static ::Dynamic get_hour_dyn();

		static Int get_minute( ::cpp::Int64Struct this1);
		static ::Dynamic get_minute_dyn();

		static Int get_dayOfWeek( ::cpp::Int64Struct this1);
		static ::Dynamic get_dayOfWeek_dyn();

		static Int get_dayOfYear( ::cpp::Int64Struct this1);
		static ::Dynamic get_dayOfYear_dyn();

		static Int get_millisecond( ::cpp::Int64Struct this1);
		static ::Dynamic get_millisecond_dyn();

		static Int get_microsecond( ::cpp::Int64Struct this1);
		static ::Dynamic get_microsecond_dyn();

		static Int get_tickInSecond( ::cpp::Int64Struct this1);
		static ::Dynamic get_tickInSecond_dyn();

		static Int get_second( ::cpp::Int64Struct this1);
		static ::Dynamic get_second_dyn();

		static  ::cpp::Int64Struct get_timeOfDay( ::cpp::Int64Struct this1);
		static ::Dynamic get_timeOfDay_dyn();

		static Bool get_isInLeapYear( ::cpp::Int64Struct this1);
		static ::Dynamic get_isInLeapYear_dyn();

		static Int get_monthDays( ::cpp::Int64Struct this1);
		static ::Dynamic get_monthDays_dyn();

		static  ::cpp::Int64Struct self( ::cpp::Int64Struct this1);
		static ::Dynamic self_dyn();

};

} // end namespace thx
} // end namespace _DateTimeUtc

#endif /* INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_ */ 
