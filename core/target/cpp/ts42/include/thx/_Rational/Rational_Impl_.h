// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__Rational_Rational_Impl_
#define INCLUDED_thx__Rational_Rational_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,_Rational,Rational_Impl_)
HX_DECLARE_CLASS2(thx,bigint,BigIntImpl)
HX_DECLARE_CLASS2(thx,bigint,DecimalImpl)

namespace thx{
namespace _Rational{


class HXCPP_CLASS_ATTRIBUTES Rational_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Rational_Impl__obj OBJ_;
		Rational_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._Rational.Rational_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._Rational.Rational_Impl_"); }
		static hx::ObjectPtr< Rational_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Rational_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Rational_Impl_","\xee","\x97","\x25","\xf7"); }

		static void __boot();
		static  ::Dynamic zero;
		static  ::Dynamic fromString(::String s);
		static ::Dynamic fromString_dyn();

		static  ::Dynamic fromBigInt(::Dynamic i);
		static ::Dynamic fromBigInt_dyn();

		static  ::Dynamic fromInt(Int i);
		static ::Dynamic fromInt_dyn();

		static  ::Dynamic create(::Dynamic num,::Dynamic den);
		static ::Dynamic create_dyn();

		static  ::Dynamic _new(Int num,Int den);
		static ::Dynamic _new_dyn();

		static  ::Dynamic abs( ::Dynamic this1);
		static ::Dynamic abs_dyn();

		static  ::Dynamic negate( ::Dynamic this1);
		static ::Dynamic negate_dyn();

		static  ::Dynamic add( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic add_dyn();

		static  ::Dynamic subtract( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic subtract_dyn();

		static  ::Dynamic multiply( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic multiply_dyn();

		static  ::Dynamic divide( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic divide_dyn();

		static  ::Dynamic reciprocal( ::Dynamic this1);
		static ::Dynamic reciprocal_dyn();

		static Bool isZero( ::Dynamic this1);
		static ::Dynamic isZero_dyn();

		static Bool isNegative( ::Dynamic this1);
		static ::Dynamic isNegative_dyn();

		static Int compareTo( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic compareTo_dyn();

		static Bool greaterThan( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic greaterThan_dyn();

		static Bool greater( ::Dynamic self, ::Dynamic that);
		static ::Dynamic greater_dyn();

		static Bool greaterEqualsTo( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic greaterEqualsTo_dyn();

		static Bool greaterEquals( ::Dynamic self, ::Dynamic that);
		static ::Dynamic greaterEquals_dyn();

		static Bool lessThan( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic lessThan_dyn();

		static Bool less( ::Dynamic self, ::Dynamic that);
		static ::Dynamic less_dyn();

		static Bool lessEqualsTo( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic lessEqualsTo_dyn();

		static Bool lessEquals( ::Dynamic self, ::Dynamic that);
		static ::Dynamic lessEquals_dyn();

		static Bool equalsTo( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic equalsTo_dyn();

		static Bool equals( ::Dynamic self, ::Dynamic that);
		static ::Dynamic equals_dyn();

		static Bool notEqualsTo( ::Dynamic this1, ::Dynamic that);
		static ::Dynamic notEqualsTo_dyn();

		static Bool notEquals( ::Dynamic self, ::Dynamic that);
		static ::Dynamic notEquals_dyn();

		static Float toFloat( ::Dynamic this1);
		static ::Dynamic toFloat_dyn();

		static  ::thx::bigint::DecimalImpl toDecimal( ::Dynamic this1, ::Dynamic extraScale);
		static ::Dynamic toDecimal_dyn();

		static ::String toString( ::Dynamic this1);
		static ::Dynamic toString_dyn();

		static ::Dynamic get_num( ::Dynamic this1);
		static ::Dynamic get_num_dyn();

		static ::Dynamic get_den( ::Dynamic this1);
		static ::Dynamic get_den_dyn();

};

} // end namespace thx
} // end namespace _Rational

#endif /* INCLUDED_thx__Rational_Rational_Impl_ */ 
