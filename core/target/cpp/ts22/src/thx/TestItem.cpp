// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_TestItem
#include <thx/TestItem.h>
#endif

namespace thx{

void TestItem_obj::__construct(Int code){
            	HX_STACK_FRAME("thx.TestItem","new",0x5dd98841,"thx.TestItem.new","thx/TestHashSet.hx",172,0xd1666e47)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(code,"code")
HXLINE( 172)		this->code = code;
            	}

Dynamic TestItem_obj::__CreateEmpty() { return new TestItem_obj; }

hx::ObjectPtr< TestItem_obj > TestItem_obj::__new(Int code)
{
	hx::ObjectPtr< TestItem_obj > _hx_result = new TestItem_obj();
	_hx_result->__construct(code);
	return _hx_result;
}

Dynamic TestItem_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestItem_obj > _hx_result = new TestItem_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

Int TestItem_obj::hashCode(){
            	HX_STACK_FRAME("thx.TestItem","hashCode",0xcd24249a,"thx.TestItem.hashCode","thx/TestHashSet.hx",176,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 176)		return this->code;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestItem_obj,hashCode,return )

::String TestItem_obj::toString(){
            	HX_STACK_FRAME("thx.TestItem","toString",0xfe1de92b,"thx.TestItem.toString","thx/TestHashSet.hx",180,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 180)		return (HX_("TestItem ",db,c9,e1,2c) + this->code);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestItem_obj,toString,return )


TestItem_obj::TestItem_obj()
{
}

hx::Val TestItem_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hashCode") ) { return hx::Val( hashCode_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestItem_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestItem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestItem_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestItem_obj,code),HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestItem_obj_sStaticStorageInfo = 0;
#endif

static ::String TestItem_obj_sMemberFields[] = {
	HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"),
	HX_HCSTRING("hashCode","\x1b","\x0c","\x75","\x07"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void TestItem_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestItem_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestItem_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestItem_obj::__mClass,"__mClass");
};

#endif

hx::Class TestItem_obj::__mClass;

void TestItem_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestItem","\xcf","\x53","\x06","\x52");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestItem_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestItem_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestItem_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestItem_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestItem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestItem_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
