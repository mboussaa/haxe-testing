// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds__HashMap_HashMapData
#include <haxe/ds/_HashMap/HashMapData.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_TestHashSet
#include <thx/TestHashSet.h>
#endif
#ifndef INCLUDED_thx_TestItem
#include <thx/TestItem.h>
#endif
#ifndef INCLUDED_thx__HashSet_HashSet_Impl_
#include <thx/_HashSet/HashSet_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestHashSet_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestHashSet","new",0xa10e642a,"thx.TestHashSet.new","thx/TestHashSet.hx",10,0xd1666e47)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  10)		this->x = i;
            	}

Dynamic TestHashSet_obj::__CreateEmpty() { return new TestHashSet_obj; }

hx::ObjectPtr< TestHashSet_obj > TestHashSet_obj::__new(Int i)
{
	hx::ObjectPtr< TestHashSet_obj > _hx_result = new TestHashSet_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestHashSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestHashSet_obj > _hx_result = new TestHashSet_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestHashSet_obj::testCreate(){
            	HX_STACK_FRAME("thx.TestHashSet","testCreate",0xf8df8664,"thx.TestHashSet.testCreate","thx/TestHashSet.hx",14,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  14)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  14)		HX_VARI( Int,_g) = this->x;
HXDLIN(  14)		while((_g1 < _g)){
HXLINE(  14)			++_g1;
HXLINE(  15)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(5)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)3))->init(2, ::thx::TestItem_obj::__new((int)2))->init(3, ::thx::TestItem_obj::__new((int)3))->init(4, ::thx::TestItem_obj::__new((int)1)));
HXLINE(  16)			Int _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  16)			::utest::Assert_obj::same((int)3,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),16,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCreate",ee,ac,03,95)));
HXLINE(  17)			Int _hx_tmp1 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN(  17)			Bool _hx_tmp2 = s->values->exists(_hx_tmp1);
HXDLIN(  17)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),17,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCreate",ee,ac,03,95)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testCreate,(void))

void TestHashSet_obj::testEmpty(){
            	HX_STACK_FRAME("thx.TestHashSet","testEmpty",0xc4370025,"thx.TestHashSet.testEmpty","thx/TestHashSet.hx",21,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  21)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  21)		HX_VARI( Int,_g) = this->x;
HXDLIN(  21)		while((_g1 < _g)){
HXLINE(  21)			++_g1;
HXLINE(  22)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(1)->init(0, ::thx::TestItem_obj::__new((int)1)));
HXLINE(  23)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::empty(s1);
HXLINE(  24)			Int _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN(  24)			::utest::Assert_obj::same((int)1,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),24,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testEmpty",db,78,dc,38)));
HXLINE(  25)			Int _hx_tmp1 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN(  25)			::utest::Assert_obj::same((int)0,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),25,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testEmpty",db,78,dc,38)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testEmpty,(void))

void TestHashSet_obj::testExists(){
            	HX_STACK_FRAME("thx.TestHashSet","testExists",0x3cb03d44,"thx.TestHashSet.testExists","thx/TestHashSet.hx",29,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  29)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  29)		HX_VARI( Int,_g) = this->x;
HXDLIN(  29)		while((_g1 < _g)){
HXLINE(  29)			++_g1;
HXLINE(  30)			HX_VARI(  ::thx::TestItem,i1) =  ::thx::TestItem_obj::__new((int)1);
HXLINE(  31)			HX_VARI(  ::thx::TestItem,i2a) =  ::thx::TestItem_obj::__new((int)2);
HXLINE(  32)			HX_VARI(  ::thx::TestItem,i2b) =  ::thx::TestItem_obj::__new((int)2);
HXLINE(  33)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(3)->init(0,i1)->init(1,i2a)->init(2,i2b));
HXLINE(  34)			Int _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  34)			::utest::Assert_obj::same((int)2,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),34,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
HXLINE(  35)			Int _hx_tmp1 = i1->hashCode();
HXDLIN(  35)			Bool _hx_tmp2 = s->values->exists(_hx_tmp1);
HXDLIN(  35)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),35,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
HXLINE(  36)			Int _hx_tmp3 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN(  36)			Bool _hx_tmp4 = s->values->exists(_hx_tmp3);
HXDLIN(  36)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),36,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
HXLINE(  37)			Int _hx_tmp5 = i2a->hashCode();
HXDLIN(  37)			Bool _hx_tmp6 = s->values->exists(_hx_tmp5);
HXDLIN(  37)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),37,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
HXLINE(  38)			Int _hx_tmp7 = i2b->hashCode();
HXDLIN(  38)			Bool _hx_tmp8 = s->values->exists(_hx_tmp7);
HXDLIN(  38)			::utest::Assert_obj::isTrue(_hx_tmp8,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),38,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
HXLINE(  39)			Int _hx_tmp9 =  ::thx::TestItem_obj::__new((int)2)->hashCode();
HXDLIN(  39)			Bool _hx_tmp10 = s->values->exists(_hx_tmp9);
HXDLIN(  39)			::utest::Assert_obj::isTrue(_hx_tmp10,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),39,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testExists",ce,63,d4,d8)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testExists,(void))

void TestHashSet_obj::testAdd(){
            	HX_STACK_FRAME("thx.TestHashSet","testAdd",0x79a9a1b9,"thx.TestHashSet.testAdd","thx/TestHashSet.hx",43,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  43)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  43)		HX_VARI( Int,_g) = this->x;
HXDLIN(  43)		while((_g1 < _g)){
HXLINE(  43)			++_g1;
HXLINE(  44)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(null());
HXLINE(  45)			Bool _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)1));
HXDLIN(  45)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),45,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
HXLINE(  46)			Bool _hx_tmp1 = ::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)2));
HXDLIN(  46)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),46,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
HXLINE(  47)			Bool _hx_tmp2 = ::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)2));
HXDLIN(  47)			::utest::Assert_obj::isFalse(_hx_tmp2,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),47,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
HXLINE(  48)			Bool _hx_tmp3 = ::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)3));
HXDLIN(  48)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),48,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
HXLINE(  49)			Bool _hx_tmp4 = ::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)3));
HXDLIN(  49)			::utest::Assert_obj::isFalse(_hx_tmp4,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),49,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
HXLINE(  50)			Int _hx_tmp5 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  50)			::utest::Assert_obj::same((int)3,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),50,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testAdd",ef,60,b8,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testAdd,(void))

void TestHashSet_obj::testPush(){
            	HX_STACK_FRAME("thx.TestHashSet","testPush",0x04bb0742,"thx.TestHashSet.testPush","thx/TestHashSet.hx",54,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  54)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  54)		HX_VARI( Int,_g) = this->x;
HXDLIN(  54)		while((_g1 < _g)){
HXLINE(  54)			++_g1;
HXLINE(  55)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(null());
HXLINE(  56)			::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)1));
HXLINE(  57)			::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)2));
HXLINE(  58)			::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)2));
HXLINE(  59)			::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)3));
HXLINE(  60)			::thx::_HashSet::HashSet_Impl__obj::add(s, ::thx::TestItem_obj::__new((int)3));
HXLINE(  61)			Int _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  61)			::utest::Assert_obj::same((int)3,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),61,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testPush",4c,97,93,4d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testPush,(void))

void TestHashSet_obj::testRemove(){
            	HX_STACK_FRAME("thx.TestHashSet","testRemove",0x8158bbac,"thx.TestHashSet.testRemove","thx/TestHashSet.hx",65,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  65)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  65)		HX_VARI( Int,_g) = this->x;
HXDLIN(  65)		while((_g1 < _g)){
HXLINE(  65)			++_g1;
HXLINE(  66)			HX_VARI(  ::thx::TestItem,i1) =  ::thx::TestItem_obj::__new((int)1);
HXLINE(  68)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(2)->init(0,i1)->init(1, ::thx::TestItem_obj::__new((int)2)));
HXLINE(  69)			{
HXLINE(  69)				Int _hx_tmp = i1->hashCode();
HXDLIN(  69)				s->values->remove(_hx_tmp);
HXDLIN(  69)				Int _hx_tmp1 = i1->hashCode();
HXDLIN(  69)				s->keys->remove(_hx_tmp1);
            			}
HXLINE(  70)			Int _hx_tmp2 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  70)			::utest::Assert_obj::same((int)1,_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),70,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testRemove",36,e2,7c,1d)));
HXLINE(  71)			{
HXLINE(  71)				HX_VARI(  ::thx::TestItem,v) =  ::thx::TestItem_obj::__new((int)2);
HXDLIN(  71)				Int _hx_tmp3 = v->hashCode();
HXDLIN(  71)				s->values->remove(_hx_tmp3);
HXDLIN(  71)				Int _hx_tmp4 = v->hashCode();
HXDLIN(  71)				s->keys->remove(_hx_tmp4);
            			}
HXLINE(  72)			Int _hx_tmp5 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s);
HXDLIN(  72)			::utest::Assert_obj::same((int)0,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),72,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testRemove",36,e2,7c,1d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testRemove,(void))

void TestHashSet_obj::testCopy(){
            	HX_STACK_FRAME("thx.TestHashSet","testCopy",0xfc1eb11d,"thx.TestHashSet.testCopy","thx/TestHashSet.hx",76,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  76)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  76)		HX_VARI( Int,_g) = this->x;
HXDLIN(  76)		while((_g1 < _g)){
HXLINE(  76)			++_g1;
HXLINE(  77)			HX_VARI(  ::thx::TestItem,i1) =  ::thx::TestItem_obj::__new((int)1);
HXLINE(  79)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(2)->init(0,i1)->init(1, ::thx::TestItem_obj::__new((int)2)));
HXLINE(  80)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::copy(s1);
HXLINE(  81)			Int _hx_tmp = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN(  81)			::utest::Assert_obj::same((int)2,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),81,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  82)			Int _hx_tmp1 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN(  82)			::utest::Assert_obj::same((int)2,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),82,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  83)			Int _hx_tmp2 = i1->hashCode();
HXDLIN(  83)			Bool _hx_tmp3 = s1->values->exists(_hx_tmp2);
HXDLIN(  83)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),83,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  84)			Int _hx_tmp4 =  ::thx::TestItem_obj::__new((int)2)->hashCode();
HXDLIN(  84)			Bool _hx_tmp5 = s1->values->exists(_hx_tmp4);
HXDLIN(  84)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),84,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  85)			Int _hx_tmp6 = i1->hashCode();
HXDLIN(  85)			Bool _hx_tmp7 = s2->values->exists(_hx_tmp6);
HXDLIN(  85)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),85,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  86)			Int _hx_tmp8 =  ::thx::TestItem_obj::__new((int)2)->hashCode();
HXDLIN(  86)			Bool _hx_tmp9 = s2->values->exists(_hx_tmp8);
HXDLIN(  86)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),86,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  87)			::thx::_HashSet::HashSet_Impl__obj::add(s1, ::thx::TestItem_obj::__new((int)3));
HXLINE(  88)			Int _hx_tmp10 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN(  88)			::utest::Assert_obj::same((int)3,_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),88,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
HXLINE(  89)			Int _hx_tmp11 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN(  89)			::utest::Assert_obj::same((int)2,_hx_tmp11,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),89,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testCopy",27,41,f7,44)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testCopy,(void))

void TestHashSet_obj::testUnion(){
            	HX_STACK_FRAME("thx.TestHashSet","testUnion",0xfb442aa7,"thx.TestHashSet.testUnion","thx/TestHashSet.hx",93,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE(  93)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  93)		HX_VARI( Int,_g) = this->x;
HXDLIN(  93)		while((_g1 < _g)){
HXLINE(  93)			++_g1;
HXLINE(  94)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2))->init(2, ::thx::TestItem_obj::__new((int)3)));
HXLINE(  95)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(4)->init(0, ::thx::TestItem_obj::__new((int)2))->init(1, ::thx::TestItem_obj::__new((int)3))->init(2, ::thx::TestItem_obj::__new((int)4))->init(3, ::thx::TestItem_obj::__new((int)5)));
HXLINE(  96)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,newset) = ::thx::_HashSet::HashSet_Impl__obj::copy(s1);
HXDLIN(  96)			{
HXLINE(  96)				HX_VARI(  ::Dynamic,tmp) = ::thx::_HashSet::HashSet_Impl__obj::iterator(s2);
HXDLIN(  96)				while(true){
HXLINE(  96)					Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  96)					if (_hx_tmp) {
HXLINE(  96)						goto _hx_goto_8;
            					}
HXDLIN(  96)					HX_VARI(  ::thx::TestItem,k) = ( ( ::thx::TestItem)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN(  96)					Int _hx_tmp1 = k->hashCode();
HXDLIN(  96)					newset->keys->set(_hx_tmp1,k);
HXDLIN(  96)					Int _hx_tmp2 = k->hashCode();
HXDLIN(  96)					newset->values->set(_hx_tmp2,true);
            				}
            				_hx_goto_8:;
            			}
HXLINE(  97)			Int _hx_tmp3 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN(  97)			::utest::Assert_obj::same((int)3,_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),97,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE(  98)			Int _hx_tmp4 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN(  98)			::utest::Assert_obj::same((int)4,_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),98,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE(  99)			Int _hx_tmp5 = ::thx::_HashSet::HashSet_Impl__obj::get_length(newset);
HXDLIN(  99)			::utest::Assert_obj::same((int)5,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),99,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE( 100)			Int _hx_tmp6 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN( 100)			Bool _hx_tmp7 = newset->values->exists(_hx_tmp6);
HXDLIN( 100)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),100,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE( 101)			Int _hx_tmp8 =  ::thx::TestItem_obj::__new((int)2)->hashCode();
HXDLIN( 101)			Bool _hx_tmp9 = newset->values->exists(_hx_tmp8);
HXDLIN( 101)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),101,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE( 102)			Int _hx_tmp10 =  ::thx::TestItem_obj::__new((int)3)->hashCode();
HXDLIN( 102)			Bool _hx_tmp11 = newset->values->exists(_hx_tmp10);
HXDLIN( 102)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),102,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE( 103)			Int _hx_tmp12 =  ::thx::TestItem_obj::__new((int)4)->hashCode();
HXDLIN( 103)			Bool _hx_tmp13 = newset->values->exists(_hx_tmp12);
HXDLIN( 103)			::utest::Assert_obj::isTrue(_hx_tmp13,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),103,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
HXLINE( 104)			Int _hx_tmp14 =  ::thx::TestItem_obj::__new((int)5)->hashCode();
HXDLIN( 104)			Bool _hx_tmp15 = newset->values->exists(_hx_tmp14);
HXDLIN( 104)			::utest::Assert_obj::isTrue(_hx_tmp15,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),104,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testUnion",5d,a3,e9,6f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testUnion,(void))

void TestHashSet_obj::testIntersection(){
            	HX_STACK_FRAME("thx.TestHashSet","testIntersection",0x7f4b3fb1,"thx.TestHashSet.testIntersection","thx/TestHashSet.hx",108,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 108)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 108)		HX_VARI( Int,_g) = this->x;
HXDLIN( 108)		while((_g1 < _g)){
HXLINE( 108)			++_g1;
HXLINE( 109)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2))->init(2, ::thx::TestItem_obj::__new((int)3)));
HXLINE( 110)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(4)->init(0, ::thx::TestItem_obj::__new((int)2))->init(1, ::thx::TestItem_obj::__new((int)3))->init(2, ::thx::TestItem_obj::__new((int)4))->init(3, ::thx::TestItem_obj::__new((int)5)));
HXLINE( 111)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,result) = ::thx::_HashSet::HashSet_Impl__obj::empty(s1);
HXDLIN( 111)			{
HXLINE( 111)				HX_VARI(  ::Dynamic,tmp) = ::thx::_HashSet::HashSet_Impl__obj::iterator(s1);
HXDLIN( 111)				while(true){
HXLINE( 111)					Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 111)					if (_hx_tmp) {
HXLINE( 111)						goto _hx_goto_10;
            					}
HXDLIN( 111)					HX_VARI(  ::thx::TestItem,item) = ( ( ::thx::TestItem)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 111)					Int _hx_tmp1 = item->hashCode();
HXDLIN( 111)					Bool _hx_tmp2 = s2->values->exists(_hx_tmp1);
HXDLIN( 111)					if (_hx_tmp2) {
HXLINE( 111)						Int _hx_tmp3 = item->hashCode();
HXDLIN( 111)						result->keys->set(_hx_tmp3,item);
HXDLIN( 111)						Int _hx_tmp4 = item->hashCode();
HXDLIN( 111)						result->values->set(_hx_tmp4,true);
            					}
            				}
            				_hx_goto_10:;
            			}
HXLINE( 112)			Int _hx_tmp5 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN( 112)			::utest::Assert_obj::same((int)3,_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),112,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testIntersection",bb,e9,a1,68)));
HXLINE( 113)			Int _hx_tmp6 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN( 113)			::utest::Assert_obj::same((int)4,_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),113,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testIntersection",bb,e9,a1,68)));
HXLINE( 114)			Int _hx_tmp7 = ::thx::_HashSet::HashSet_Impl__obj::get_length(result);
HXDLIN( 114)			::utest::Assert_obj::same((int)2,_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),114,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testIntersection",bb,e9,a1,68)));
HXLINE( 115)			Int _hx_tmp8 =  ::thx::TestItem_obj::__new((int)2)->hashCode();
HXDLIN( 115)			Bool _hx_tmp9 = result->values->exists(_hx_tmp8);
HXDLIN( 115)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),115,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testIntersection",bb,e9,a1,68)));
HXLINE( 116)			Int _hx_tmp10 =  ::thx::TestItem_obj::__new((int)3)->hashCode();
HXDLIN( 116)			Bool _hx_tmp11 = result->values->exists(_hx_tmp10);
HXDLIN( 116)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),116,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testIntersection",bb,e9,a1,68)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testIntersection,(void))

void TestHashSet_obj::testDifference(){
            	HX_STACK_FRAME("thx.TestHashSet","testDifference",0xb9098f65,"thx.TestHashSet.testDifference","thx/TestHashSet.hx",120,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 120)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 120)		HX_VARI( Int,_g) = this->x;
HXDLIN( 120)		while((_g1 < _g)){
HXLINE( 120)			++_g1;
HXLINE( 121)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2))->init(2, ::thx::TestItem_obj::__new((int)3)));
HXLINE( 122)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(4)->init(0, ::thx::TestItem_obj::__new((int)2))->init(1, ::thx::TestItem_obj::__new((int)3))->init(2, ::thx::TestItem_obj::__new((int)4))->init(3, ::thx::TestItem_obj::__new((int)5)));
HXLINE( 123)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,result) = ::thx::_HashSet::HashSet_Impl__obj::copy(s1);
HXDLIN( 123)			{
HXLINE( 123)				HX_VARI(  ::Dynamic,tmp) = ::thx::_HashSet::HashSet_Impl__obj::iterator(s2);
HXDLIN( 123)				while(true){
HXLINE( 123)					Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 123)					if (_hx_tmp) {
HXLINE( 123)						goto _hx_goto_12;
            					}
HXDLIN( 123)					HX_VARI(  ::thx::TestItem,item) = ( ( ::thx::TestItem)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 123)					Int _hx_tmp1 = item->hashCode();
HXDLIN( 123)					result->values->remove(_hx_tmp1);
HXDLIN( 123)					Int _hx_tmp2 = item->hashCode();
HXDLIN( 123)					result->keys->remove(_hx_tmp2);
            				}
            				_hx_goto_12:;
            			}
HXLINE( 124)			HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,result1,"result") = ::thx::_HashSet::HashSet_Impl__obj::copy(s2);
HXDLIN( 124)			{
HXLINE( 124)				HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(s1);
HXDLIN( 124)				while(true){
HXLINE( 124)					Bool _hx_tmp3 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 124)					if (_hx_tmp3) {
HXLINE( 124)						goto _hx_goto_13;
            					}
HXDLIN( 124)					HX_VARI_NAME(  ::thx::TestItem,item1,"item") = ( ( ::thx::TestItem)( ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 124)					Int _hx_tmp4 = item1->hashCode();
HXDLIN( 124)					result1->values->remove(_hx_tmp4);
HXDLIN( 124)					Int _hx_tmp5 = item1->hashCode();
HXDLIN( 124)					result1->keys->remove(_hx_tmp5);
            				}
            				_hx_goto_13:;
            			}
HXLINE( 125)			Int _hx_tmp6 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN( 125)			::utest::Assert_obj::same((int)3,_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),125,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 126)			Int _hx_tmp7 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN( 126)			::utest::Assert_obj::same((int)4,_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),126,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 127)			Int _hx_tmp8 = ::thx::_HashSet::HashSet_Impl__obj::get_length(result);
HXDLIN( 127)			::utest::Assert_obj::same((int)1,_hx_tmp8,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),127,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 128)			Int _hx_tmp9 = ::thx::_HashSet::HashSet_Impl__obj::get_length(result1);
HXDLIN( 128)			::utest::Assert_obj::same((int)2,_hx_tmp9,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),128,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 129)			Int _hx_tmp10 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN( 129)			Bool _hx_tmp11 = result->values->exists(_hx_tmp10);
HXDLIN( 129)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),129,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 130)			Int _hx_tmp12 =  ::thx::TestItem_obj::__new((int)4)->hashCode();
HXDLIN( 130)			Bool _hx_tmp13 = result1->values->exists(_hx_tmp12);
HXDLIN( 130)			::utest::Assert_obj::isTrue(_hx_tmp13,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),130,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
HXLINE( 131)			Int _hx_tmp14 =  ::thx::TestItem_obj::__new((int)5)->hashCode();
HXDLIN( 131)			Bool _hx_tmp15 = result1->values->exists(_hx_tmp14);
HXDLIN( 131)			::utest::Assert_obj::isTrue(_hx_tmp15,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),131,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testDifference",ef,c2,84,e6)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testDifference,(void))

void TestHashSet_obj::testSymmetricDifference(){
            	HX_STACK_FRAME("thx.TestHashSet","testSymmetricDifference",0x74720eec,"thx.TestHashSet.testSymmetricDifference","thx/TestHashSet.hx",135,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 135)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 135)		HX_VARI( Int,_g) = this->x;
HXDLIN( 135)		while((_g1 < _g)){
HXLINE( 135)			++_g1;
HXLINE( 136)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s1) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(3)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2))->init(2, ::thx::TestItem_obj::__new((int)3)));
HXLINE( 137)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s2) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(4)->init(0, ::thx::TestItem_obj::__new((int)2))->init(1, ::thx::TestItem_obj::__new((int)3))->init(2, ::thx::TestItem_obj::__new((int)4))->init(3, ::thx::TestItem_obj::__new((int)5)));
HXLINE( 138)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,self) = ::thx::_HashSet::HashSet_Impl__obj::copy(s1);
HXDLIN( 138)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,newset) = ::thx::_HashSet::HashSet_Impl__obj::copy(self);
HXDLIN( 138)			{
HXLINE( 138)				HX_VARI(  ::Dynamic,tmp) = ::thx::_HashSet::HashSet_Impl__obj::iterator(s2);
HXDLIN( 138)				while(true){
HXLINE( 138)					Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 138)					if (_hx_tmp) {
HXLINE( 138)						goto _hx_goto_15;
            					}
HXDLIN( 138)					HX_VARI(  ::thx::TestItem,k) = ( ( ::thx::TestItem)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 138)					Int _hx_tmp1 = k->hashCode();
HXDLIN( 138)					newset->keys->set(_hx_tmp1,k);
HXDLIN( 138)					Int _hx_tmp2 = k->hashCode();
HXDLIN( 138)					newset->values->set(_hx_tmp2,true);
            				}
            				_hx_goto_15:;
            			}
HXDLIN( 138)			HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,this1,"this") = newset;
HXDLIN( 138)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,result) = ::thx::_HashSet::HashSet_Impl__obj::empty(self);
HXDLIN( 138)			{
HXLINE( 138)				HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(self);
HXDLIN( 138)				while(true){
HXLINE( 138)					Bool _hx_tmp3 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 138)					if (_hx_tmp3) {
HXLINE( 138)						goto _hx_goto_16;
            					}
HXDLIN( 138)					HX_VARI(  ::thx::TestItem,item) = ( ( ::thx::TestItem)( ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 138)					Int _hx_tmp4 = item->hashCode();
HXDLIN( 138)					Bool _hx_tmp5 = s2->values->exists(_hx_tmp4);
HXDLIN( 138)					if (_hx_tmp5) {
HXLINE( 138)						Int _hx_tmp6 = item->hashCode();
HXDLIN( 138)						result->keys->set(_hx_tmp6,item);
HXDLIN( 138)						Int _hx_tmp7 = item->hashCode();
HXDLIN( 138)						result->values->set(_hx_tmp7,true);
            					}
            				}
            				_hx_goto_16:;
            			}
HXDLIN( 138)			HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,result1,"result") = ::thx::_HashSet::HashSet_Impl__obj::copy(this1);
HXDLIN( 138)			{
HXLINE( 138)				HX_VARI_NAME(  ::Dynamic,tmp2,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(result);
HXDLIN( 138)				while(true){
HXLINE( 138)					Bool _hx_tmp8 = !(( (Bool)( ::Dynamic(tmp2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 138)					if (_hx_tmp8) {
HXLINE( 138)						goto _hx_goto_17;
            					}
HXDLIN( 138)					HX_VARI_NAME(  ::thx::TestItem,item1,"item") = ( ( ::thx::TestItem)( ::Dynamic(tmp2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 138)					Int _hx_tmp9 = item1->hashCode();
HXDLIN( 138)					result1->values->remove(_hx_tmp9);
HXDLIN( 138)					Int _hx_tmp10 = item1->hashCode();
HXDLIN( 138)					result1->keys->remove(_hx_tmp10);
            				}
            				_hx_goto_17:;
            			}
HXLINE( 139)			HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,self1,"self") = ::thx::_HashSet::HashSet_Impl__obj::copy(s2);
HXDLIN( 139)			HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,newset1,"newset") = ::thx::_HashSet::HashSet_Impl__obj::copy(self1);
HXDLIN( 139)			{
HXLINE( 139)				HX_VARI_NAME(  ::Dynamic,tmp3,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(s1);
HXDLIN( 139)				while(true){
HXLINE( 139)					Bool _hx_tmp11 = !(( (Bool)( ::Dynamic(tmp3->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 139)					if (_hx_tmp11) {
HXLINE( 139)						goto _hx_goto_18;
            					}
HXDLIN( 139)					HX_VARI_NAME(  ::thx::TestItem,k1,"k") = ( ( ::thx::TestItem)( ::Dynamic(tmp3->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 139)					Int _hx_tmp12 = k1->hashCode();
HXDLIN( 139)					newset1->keys->set(_hx_tmp12,k1);
HXDLIN( 139)					Int _hx_tmp13 = k1->hashCode();
HXDLIN( 139)					newset1->values->set(_hx_tmp13,true);
            				}
            				_hx_goto_18:;
            			}
HXDLIN( 139)			HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,this2,"this") = newset1;
HXDLIN( 139)			HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,result2,"result") = ::thx::_HashSet::HashSet_Impl__obj::empty(self1);
HXDLIN( 139)			{
HXLINE( 139)				HX_VARI_NAME(  ::Dynamic,tmp4,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(self1);
HXDLIN( 139)				while(true){
HXLINE( 139)					Bool _hx_tmp14 = !(( (Bool)( ::Dynamic(tmp4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 139)					if (_hx_tmp14) {
HXLINE( 139)						goto _hx_goto_19;
            					}
HXDLIN( 139)					HX_VARI_NAME(  ::thx::TestItem,item2,"item") = ( ( ::thx::TestItem)( ::Dynamic(tmp4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 139)					Int _hx_tmp15 = item2->hashCode();
HXDLIN( 139)					Bool _hx_tmp16 = s1->values->exists(_hx_tmp15);
HXDLIN( 139)					if (_hx_tmp16) {
HXLINE( 139)						Int _hx_tmp17 = item2->hashCode();
HXDLIN( 139)						result2->keys->set(_hx_tmp17,item2);
HXDLIN( 139)						Int _hx_tmp18 = item2->hashCode();
HXDLIN( 139)						result2->values->set(_hx_tmp18,true);
            					}
            				}
            				_hx_goto_19:;
            			}
HXDLIN( 139)			HX_VARI_NAME(  ::haxe::ds::_HashMap::HashMapData,result3,"result") = ::thx::_HashSet::HashSet_Impl__obj::copy(this2);
HXDLIN( 139)			{
HXLINE( 139)				HX_VARI_NAME(  ::Dynamic,tmp5,"tmp") = ::thx::_HashSet::HashSet_Impl__obj::iterator(result2);
HXDLIN( 139)				while(true){
HXLINE( 139)					Bool _hx_tmp19 = !(( (Bool)( ::Dynamic(tmp5->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 139)					if (_hx_tmp19) {
HXLINE( 139)						goto _hx_goto_20;
            					}
HXDLIN( 139)					HX_VARI_NAME(  ::thx::TestItem,item3,"item") = ( ( ::thx::TestItem)( ::Dynamic(tmp5->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 139)					Int _hx_tmp20 = item3->hashCode();
HXDLIN( 139)					result3->values->remove(_hx_tmp20);
HXDLIN( 139)					Int _hx_tmp21 = item3->hashCode();
HXDLIN( 139)					result3->keys->remove(_hx_tmp21);
            				}
            				_hx_goto_20:;
            			}
HXLINE( 140)			Int _hx_tmp22 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s1);
HXDLIN( 140)			::utest::Assert_obj::same((int)3,_hx_tmp22,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),140,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 141)			Int _hx_tmp23 = ::thx::_HashSet::HashSet_Impl__obj::get_length(s2);
HXDLIN( 141)			::utest::Assert_obj::same((int)4,_hx_tmp23,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),141,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 142)			Int _hx_tmp24 = ::thx::_HashSet::HashSet_Impl__obj::get_length(result1);
HXDLIN( 142)			::utest::Assert_obj::same((int)3,_hx_tmp24,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),142,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 143)			Int _hx_tmp25 = ::thx::_HashSet::HashSet_Impl__obj::get_length(result3);
HXDLIN( 143)			::utest::Assert_obj::same((int)3,_hx_tmp25,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),143,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 144)			Int _hx_tmp26 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN( 144)			Bool _hx_tmp27 = result1->values->exists(_hx_tmp26);
HXDLIN( 144)			::utest::Assert_obj::isTrue(_hx_tmp27,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),144,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 145)			Int _hx_tmp28 =  ::thx::TestItem_obj::__new((int)4)->hashCode();
HXDLIN( 145)			Bool _hx_tmp29 = result1->values->exists(_hx_tmp28);
HXDLIN( 145)			::utest::Assert_obj::isTrue(_hx_tmp29,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),145,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 146)			Int _hx_tmp30 =  ::thx::TestItem_obj::__new((int)5)->hashCode();
HXDLIN( 146)			Bool _hx_tmp31 = result1->values->exists(_hx_tmp30);
HXDLIN( 146)			::utest::Assert_obj::isTrue(_hx_tmp31,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),146,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 147)			Int _hx_tmp32 =  ::thx::TestItem_obj::__new((int)1)->hashCode();
HXDLIN( 147)			Bool _hx_tmp33 = result3->values->exists(_hx_tmp32);
HXDLIN( 147)			::utest::Assert_obj::isTrue(_hx_tmp33,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),147,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 148)			Int _hx_tmp34 =  ::thx::TestItem_obj::__new((int)4)->hashCode();
HXDLIN( 148)			Bool _hx_tmp35 = result3->values->exists(_hx_tmp34);
HXDLIN( 148)			::utest::Assert_obj::isTrue(_hx_tmp35,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),148,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
HXLINE( 149)			Int _hx_tmp36 =  ::thx::TestItem_obj::__new((int)5)->hashCode();
HXDLIN( 149)			Bool _hx_tmp37 = result3->values->exists(_hx_tmp36);
HXDLIN( 149)			::utest::Assert_obj::isTrue(_hx_tmp37,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),149,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testSymmetricDifference",22,1a,9d,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testSymmetricDifference,(void))

void TestHashSet_obj::testToArray(){
            	HX_STACK_FRAME("thx.TestHashSet","testToArray",0xab5f15b6,"thx.TestHashSet.testToArray","thx/TestHashSet.hx",153,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 153)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 153)		HX_VARI( Int,_g) = this->x;
HXDLIN( 153)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,_e) HXARGC(1)
            			 ::thx::TestItem _hx_run( ::Dynamic predicate){
            				HX_STACK_FRAME("thx.TestHashSet","testToArray",0xab5f15b6,"thx.TestHashSet.testToArray","thx/TestHashSet.hx",157,0xd1666e47)
            				HX_STACK_ARG(predicate,"predicate")
HXLINE( 157)				return ( ( ::thx::TestItem)(::thx::Arrays_obj::find(_e,predicate)) );
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			Bool _hx_run( ::thx::TestItem _){
            				HX_STACK_FRAME("thx.TestHashSet","testToArray",0xab5f15b6,"thx.TestHashSet.testToArray","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_,"_")
HXLINE(  86)				return (_->code == (int)1);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2,::Array< ::Dynamic>,_e1) HXARGC(1)
            			 ::thx::TestItem _hx_run( ::Dynamic predicate1){
            				HX_STACK_FRAME("thx.TestHashSet","testToArray",0xab5f15b6,"thx.TestHashSet.testToArray","thx/TestHashSet.hx",158,0xd1666e47)
            				HX_STACK_ARG(predicate1,"predicate1")
HXLINE( 158)				return ( ( ::thx::TestItem)(::thx::Arrays_obj::find(_e1,predicate1)) );
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            			Bool _hx_run( ::thx::TestItem _1){
            				HX_STACK_FRAME("thx.TestHashSet","testToArray",0xab5f15b6,"thx.TestHashSet.testToArray","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_1,"_1")
HXLINE(  86)				return (_1->code == (int)2);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 153)			++_g1;
HXLINE( 154)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(2)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2)));
HXLINE( 155)			HX_VARI( ::Array< ::Dynamic>,a) = ::thx::_HashSet::HashSet_Impl__obj::toArray(s);
HXLINE( 156)			::utest::Assert_obj::same((int)2,a->length,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),156,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testToArray",ec,a7,dc,ae)));
HXLINE( 157)			HX_VARI( ::Array< ::Dynamic>,_e) = a;
HXDLIN( 157)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_e));
HXDLIN( 157)			::utest::Assert_obj::same((int)1,( ( ::thx::TestItem)(_hx_tmp( ::Dynamic(new _hx_Closure_1()))) )->code,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),157,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testToArray",ec,a7,dc,ae)));
HXLINE( 158)			HX_VARI_NAME( ::Array< ::Dynamic>,_e1,"_e") = a;
HXDLIN( 158)			 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_2(_e1));
HXDLIN( 158)			::utest::Assert_obj::same((int)2,( ( ::thx::TestItem)(_hx_tmp1( ::Dynamic(new _hx_Closure_3()))) )->code,null(),null(),null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),158,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testToArray",ec,a7,dc,ae)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testToArray,(void))

void TestHashSet_obj::testToString(){
            	HX_STACK_FRAME("thx.TestHashSet","testToString",0xa1139a14,"thx.TestHashSet.testToString","thx/TestHashSet.hx",162,0xd1666e47)
            	HX_STACK_THIS(this)
HXLINE( 162)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 162)		HX_VARI( Int,_g) = this->x;
HXDLIN( 162)		while((_g1 < _g)){
HXLINE( 162)			++_g1;
HXLINE( 163)			HX_VARI(  ::haxe::ds::_HashMap::HashMapData,s) = ::thx::_HashSet::HashSet_Impl__obj::create(::Array_obj< ::Dynamic>::__new(2)->init(0, ::thx::TestItem_obj::__new((int)1))->init(1, ::thx::TestItem_obj::__new((int)2)));
HXLINE( 164)			 ::EReg _hx_tmp =  ::EReg_obj::__new(HX_("TestItem \\d, TestItem \\d}",d1,5a,75,ed),HX_("",00,00,00,00));
HXDLIN( 164)			::String _hx_tmp1 = ::thx::_HashSet::HashSet_Impl__obj::toString(s);
HXDLIN( 164)			Bool _hx_tmp2 = _hx_tmp->match(_hx_tmp1);
HXDLIN( 164)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestHashSet.hx",dc,45,4b,90),164,HX_("thx.TestHashSet",38,c7,72,e5),HX_("testToString",1e,f7,75,ab)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHashSet_obj,testToString,(void))


TestHashSet_obj::TestHashSet_obj()
{
}

hx::Val TestHashSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testAdd") ) { return hx::Val( testAdd_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testPush") ) { return hx::Val( testPush_dyn()); }
		if (HX_FIELD_EQ(inName,"testCopy") ) { return hx::Val( testCopy_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testEmpty") ) { return hx::Val( testEmpty_dyn()); }
		if (HX_FIELD_EQ(inName,"testUnion") ) { return hx::Val( testUnion_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testCreate") ) { return hx::Val( testCreate_dyn()); }
		if (HX_FIELD_EQ(inName,"testExists") ) { return hx::Val( testExists_dyn()); }
		if (HX_FIELD_EQ(inName,"testRemove") ) { return hx::Val( testRemove_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testToArray") ) { return hx::Val( testToArray_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testToString") ) { return hx::Val( testToString_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testDifference") ) { return hx::Val( testDifference_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testIntersection") ) { return hx::Val( testIntersection_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"testSymmetricDifference") ) { return hx::Val( testSymmetricDifference_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestHashSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestHashSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestHashSet_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestHashSet_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestHashSet_obj_sStaticStorageInfo = 0;
#endif

static ::String TestHashSet_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testCreate","\xee","\xac","\x03","\x95"),
	HX_HCSTRING("testEmpty","\xdb","\x78","\xdc","\x38"),
	HX_HCSTRING("testExists","\xce","\x63","\xd4","\xd8"),
	HX_HCSTRING("testAdd","\xef","\x60","\xb8","\xbd"),
	HX_HCSTRING("testPush","\x4c","\x97","\x93","\x4d"),
	HX_HCSTRING("testRemove","\x36","\xe2","\x7c","\x1d"),
	HX_HCSTRING("testCopy","\x27","\x41","\xf7","\x44"),
	HX_HCSTRING("testUnion","\x5d","\xa3","\xe9","\x6f"),
	HX_HCSTRING("testIntersection","\xbb","\xe9","\xa1","\x68"),
	HX_HCSTRING("testDifference","\xef","\xc2","\x84","\xe6"),
	HX_HCSTRING("testSymmetricDifference","\x22","\x1a","\x9d","\xbd"),
	HX_HCSTRING("testToArray","\xec","\xa7","\xdc","\xae"),
	HX_HCSTRING("testToString","\x1e","\xf7","\x75","\xab"),
	::String(null()) };

static void TestHashSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestHashSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestHashSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestHashSet_obj::__mClass,"__mClass");
};

#endif

hx::Class TestHashSet_obj::__mClass;

void TestHashSet_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestHashSet","\x38","\xc7","\x72","\xe5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestHashSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestHashSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestHashSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestHashSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestHashSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestHashSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
