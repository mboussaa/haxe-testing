// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__HashSet_HashSet_Impl_
#define INCLUDED_thx__HashSet_HashSet_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(haxe,ds,_HashMap,HashMapData)
HX_DECLARE_CLASS2(thx,_HashSet,HashSet_Impl_)

namespace thx{
namespace _HashSet{


class HXCPP_CLASS_ATTRIBUTES HashSet_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef HashSet_Impl__obj OBJ_;
		HashSet_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._HashSet.HashSet_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._HashSet.HashSet_Impl_"); }
		static hx::ObjectPtr< HashSet_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~HashSet_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("HashSet_Impl_","\xf4","\xd3","\x45","\xa3"); }

		static  ::haxe::ds::_HashMap::HashMapData _new( ::haxe::ds::_HashMap::HashMapData map);
		static ::Dynamic _new_dyn();

		static  ::haxe::ds::_HashMap::HashMapData create( ::Dynamic arr);
		static ::Dynamic create_dyn();

		static Bool add( ::haxe::ds::_HashMap::HashMapData this1, ::Dynamic v);
		static ::Dynamic add_dyn();

		static  ::haxe::ds::_HashMap::HashMapData copy( ::haxe::ds::_HashMap::HashMapData this1);
		static ::Dynamic copy_dyn();

		static  ::haxe::ds::_HashMap::HashMapData empty( ::haxe::ds::_HashMap::HashMapData this1);
		static ::Dynamic empty_dyn();

		static  ::haxe::ds::_HashMap::HashMapData difference( ::haxe::ds::_HashMap::HashMapData this1, ::haxe::ds::_HashMap::HashMapData set);
		static ::Dynamic difference_dyn();

		static  ::haxe::ds::_HashMap::HashMapData symmetricDifference( ::haxe::ds::_HashMap::HashMapData this1, ::haxe::ds::_HashMap::HashMapData set);
		static ::Dynamic symmetricDifference_dyn();

		static Bool exists( ::haxe::ds::_HashMap::HashMapData this1, ::Dynamic v);
		static ::Dynamic exists_dyn();

		static Bool remove( ::haxe::ds::_HashMap::HashMapData this1, ::Dynamic v);
		static ::Dynamic remove_dyn();

		static  ::haxe::ds::_HashMap::HashMapData intersection( ::haxe::ds::_HashMap::HashMapData this1, ::haxe::ds::_HashMap::HashMapData set);
		static ::Dynamic intersection_dyn();

		static void push( ::haxe::ds::_HashMap::HashMapData this1, ::Dynamic v);
		static ::Dynamic push_dyn();

		static void pushMany( ::haxe::ds::_HashMap::HashMapData this1, ::Dynamic values);
		static ::Dynamic pushMany_dyn();

		static  ::Dynamic iterator( ::haxe::ds::_HashMap::HashMapData this1);
		static ::Dynamic iterator_dyn();

		static  ::haxe::ds::_HashMap::HashMapData _hx_union( ::haxe::ds::_HashMap::HashMapData this1, ::haxe::ds::_HashMap::HashMapData set);
		static ::Dynamic _hx_union_dyn();

		static ::cpp::VirtualArray toArray( ::haxe::ds::_HashMap::HashMapData this1);
		static ::Dynamic toArray_dyn();

		static ::String toString( ::haxe::ds::_HashMap::HashMapData this1);
		static ::Dynamic toString_dyn();

		static Int get_length( ::haxe::ds::_HashMap::HashMapData this1);
		static ::Dynamic get_length_dyn();

};

} // end namespace thx
} // end namespace _HashSet

#endif /* INCLUDED_thx__HashSet_HashSet_Impl_ */ 
