// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Functions
#include <thx/Functions.h>
#endif

namespace thx{

void Functions_obj::__construct() { }

Dynamic Functions_obj::__CreateEmpty() { return new Functions_obj; }

hx::ObjectPtr< Functions_obj > Functions_obj::__new()
{
	hx::ObjectPtr< Functions_obj > _hx_result = new Functions_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Functions_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Functions_obj > _hx_result = new Functions_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool Functions_obj::equality( ::Dynamic a, ::Dynamic b){
            	HX_STACK_FRAME("thx.Functions","equality",0xef7c8537,"thx.Functions.equality","thx/Functions.hx",288,0xe7fcd70e)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 288)		return hx::IsEq( a,b );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Functions_obj,equality,return )

 ::Dynamic Functions_obj::identity( ::Dynamic value){
            	HX_STACK_FRAME("thx.Functions","identity",0xd378bf7b,"thx.Functions.identity","thx/Functions.hx",294,0xe7fcd70e)
            	HX_STACK_ARG(value,"value")
HXLINE( 294)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Functions_obj,identity,return )

void Functions_obj::noop(){
            	HX_STACK_FRAME("thx.Functions","noop",0xf1206b5f,"thx.Functions.noop","thx/Functions.hx",299,0xe7fcd70e)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Functions_obj,noop,(void))


Functions_obj::Functions_obj()
{
}

bool Functions_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"noop") ) { outValue = noop_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"equality") ) { outValue = equality_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"identity") ) { outValue = identity_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Functions_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Functions_obj_sStaticStorageInfo = 0;
#endif

static void Functions_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Functions_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Functions_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Functions_obj::__mClass,"__mClass");
};

#endif

hx::Class Functions_obj::__mClass;

static ::String Functions_obj_sStaticFields[] = {
	HX_HCSTRING("equality","\xfa","\x0a","\x33","\xd5"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("noop","\xa2","\x13","\x0a","\x49"),
	::String(null())
};

void Functions_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Functions","\xd1","\x21","\x77","\x9c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Functions_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Functions_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Functions_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Functions_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Functions_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Functions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Functions_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
