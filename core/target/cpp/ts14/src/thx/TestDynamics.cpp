// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_thx_Dynamics
#include <thx/Dynamics.h>
#endif
#ifndef INCLUDED_thx_Point
#include <thx/Point.h>
#endif
#ifndef INCLUDED_thx_TestDynamics
#include <thx/TestDynamics.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestDynamics_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestDynamics","new",0x0d1ad5c2,"thx.TestDynamics.new","thx/TestDynamics.hx",10,0xf2dec10d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  10)		this->x = i;
            	}

Dynamic TestDynamics_obj::__CreateEmpty() { return new TestDynamics_obj; }

hx::ObjectPtr< TestDynamics_obj > TestDynamics_obj::__new(Int i)
{
	hx::ObjectPtr< TestDynamics_obj > _hx_result = new TestDynamics_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestDynamics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestDynamics_obj > _hx_result = new TestDynamics_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestDynamics_obj::testDynamics(){
            	HX_STACK_FRAME("thx.TestDynamics","testDynamics",0x430f54e4,"thx.TestDynamics.testDynamics","thx/TestDynamics.hx",14,0xf2dec10d)
            	HX_STACK_THIS(this)
HXLINE(  14)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  14)		HX_VARI( Int,_g) = this->x;
HXDLIN(  14)		while((_g1 < _g)){
HXLINE(  14)			++_g1;
HXLINE(  15)			 ::Dynamic _hx_tmp = ::thx::Dynamics_obj::clone(null(),null());
HXDLIN(  15)			::utest::Assert_obj::equals(null(),_hx_tmp,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),15,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  16)			 ::Dynamic _hx_tmp1 = ::thx::Dynamics_obj::clone(true,null());
HXDLIN(  16)			::utest::Assert_obj::equals(true,_hx_tmp1,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),16,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  17)			 ::Dynamic _hx_tmp2 = ::thx::Dynamics_obj::clone(HX_("hello",12,33,c1,24),null());
HXDLIN(  17)			::utest::Assert_obj::equals(HX_("hello",12,33,c1,24),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),17,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  18)			 ::Dynamic _hx_tmp3 = ::thx::Dynamics_obj::clone((int)3,null());
HXDLIN(  18)			::utest::Assert_obj::equals((int)3,_hx_tmp3,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),18,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  19)			 ::Dynamic _hx_tmp4 = ::thx::Dynamics_obj::clone(((Float)3.14),null());
HXDLIN(  19)			::utest::Assert_obj::equals(((Float)3.14),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),19,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  20)			 ::Dynamic _hx_tmp5 = ::thx::Dynamics_obj::clone(::ValueType_obj::TBool_dyn(),null());
HXDLIN(  20)			::utest::Assert_obj::equals(::ValueType_obj::TBool_dyn(),_hx_tmp5,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),20,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  21)			::hx::EnumBase _hx_tmp6 = ::ValueType_obj::TClass(hx::ClassOf< ::thx::TestDynamics >());
HXDLIN(  21)			::hx::EnumBase _hx_tmp7 = ::ValueType_obj::TClass(hx::ClassOf< ::thx::TestDynamics >());
HXDLIN(  21)			 ::Dynamic _hx_tmp8 = ::thx::Dynamics_obj::clone(_hx_tmp7,null());
HXDLIN(  21)			::utest::Assert_obj::isTrue(::Type_obj::enumEq(_hx_tmp6,_hx_tmp8),null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),21,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  22)			HX_VARI(  ::Date,date) = ::Date_obj::now();
HXLINE(  23)			 ::Dynamic _hx_tmp9 = ::thx::Dynamics_obj::clone(date,null());
HXDLIN(  23)			::utest::Assert_obj::equals(date,_hx_tmp9,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),23,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  24)			 ::Dynamic _hx_tmp10 = ::thx::Dynamics_obj::clone(this->testDynamics_dyn(),null());
HXDLIN(  24)			::utest::Assert_obj::same(this->testDynamics_dyn(),_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),24,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  26)			HX_VARI( ::Array< Int >,arr1) = ::Array_obj< Int >::__new(3)->init(0,(int)0)->init(1,(int)1)->init(2,(int)2);
HXLINE(  27)			HX_VARI(  ::Dynamic,arr2) = ::thx::Dynamics_obj::clone(arr1,null());
HXLINE(  28)			::utest::Assert_obj::notEquals(arr1,arr2,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),28,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  29)			::utest::Assert_obj::same(arr1,arr2,null(),null(),null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),29,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  31)			HX_VARI(  ::Dynamic,obj1) =  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("number",c9,86,7a,a1),(int)0)
            				->setFixed(1,HX_("name",4b,72,ff,48),HX_("Franco",45,e4,1a,e1)));
HXLINE(  32)			HX_VARI(  ::Dynamic,obj2) = ::thx::Dynamics_obj::clone(obj1,null());
HXLINE(  33)			::utest::Assert_obj::notEquals(obj1,obj2,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),33,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  34)			::utest::Assert_obj::same(obj1,obj2,null(),null(),null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),34,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  36)			HX_VARI(  ::thx::Point,inst1) =  ::thx::Point_obj::__new((int)5,(int)6);
HXLINE(  37)			HX_VARI(  ::Dynamic,inst2) = ::thx::Dynamics_obj::clone(inst1,null());
HXLINE(  38)			::utest::Assert_obj::equals(inst1,inst2,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),38,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  39)			HX_VARI(  ::Dynamic,inst3) = ::thx::Dynamics_obj::clone(inst1,true);
HXLINE(  40)			::utest::Assert_obj::notEquals(inst1,inst3,null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),40,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
HXLINE(  41)			::utest::Assert_obj::same(inst1->x, ::Dynamic(inst3->__Field(HX_("x",78,00,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestDynamics.hx",d8,8b,36,3c),41,HX_("thx.TestDynamics",d0,8c,d0,e9),HX_("testDynamics",86,16,dd,8f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDynamics_obj,testDynamics,(void))


TestDynamics_obj::TestDynamics_obj()
{
}

hx::Val TestDynamics_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testDynamics") ) { return hx::Val( testDynamics_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestDynamics_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestDynamics_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestDynamics_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestDynamics_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestDynamics_obj_sStaticStorageInfo = 0;
#endif

static ::String TestDynamics_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testDynamics","\x86","\x16","\xdd","\x8f"),
	::String(null()) };

static void TestDynamics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestDynamics_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestDynamics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestDynamics_obj::__mClass,"__mClass");
};

#endif

hx::Class TestDynamics_obj::__mClass;

void TestDynamics_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestDynamics","\xd0","\x8c","\xd0","\xe9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestDynamics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestDynamics_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestDynamics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestDynamics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDynamics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDynamics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
