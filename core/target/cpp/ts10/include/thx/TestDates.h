// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestDates
#define INCLUDED_thx_TestDates

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,TestDates)
HX_DECLARE_CLASS1(thx,TimePeriod)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestDates_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestDates_obj OBJ_;
		TestDates_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.TestDates")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.TestDates"); }
		static hx::ObjectPtr< TestDates_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestDates_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestDates","\xb3","\x30","\x5d","\x3f"); }

		Int x;
		void testCreate();
		::Dynamic testCreate_dyn();

		void testSnapNext();
		::Dynamic testSnapNext_dyn();

		void testSnapPrev();
		::Dynamic testSnapPrev_dyn();

		void testSnapTo();
		::Dynamic testSnapTo_dyn();

		void assertSnapTo(::String expected,::String date,::hx::EnumBase period, ::Dynamic pos);
		::Dynamic assertSnapTo_dyn();

		void assertSnapPrev(::String expected,::String date,::hx::EnumBase period, ::Dynamic pos);
		::Dynamic assertSnapPrev_dyn();

		void assertSnapNext(::String expected,::String date,::hx::EnumBase period, ::Dynamic pos);
		::Dynamic assertSnapNext_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestDates */ 
