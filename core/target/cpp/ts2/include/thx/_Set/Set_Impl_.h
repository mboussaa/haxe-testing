// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__Set_Set_Impl_
#define INCLUDED_thx__Set_Set_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(thx,_Set,Set_Impl_)

namespace thx{
namespace _Set{


class HXCPP_CLASS_ATTRIBUTES Set_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Set_Impl__obj OBJ_;
		Set_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._Set.Set_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._Set.Set_Impl_"); }
		static hx::ObjectPtr< Set_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Set_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Set_Impl_","\xa2","\x1d","\x6f","\x19"); }

		static  ::haxe::ds::StringMap createString( ::Dynamic it);
		static ::Dynamic createString_dyn();

		static  ::haxe::ds::IntMap createInt( ::Dynamic it);
		static ::Dynamic createInt_dyn();

		static  ::haxe::ds::ObjectMap createObject( ::Dynamic it);
		static ::Dynamic createObject_dyn();

		static  ::haxe::ds::EnumValueMap createEnum( ::Dynamic arr);
		static ::Dynamic createEnum_dyn();

		static ::Dynamic _new(::Dynamic map);
		static ::Dynamic _new_dyn();

		static Bool add(::Dynamic this1, ::Dynamic v);
		static ::Dynamic add_dyn();

		static ::Dynamic copy(::Dynamic this1);
		static ::Dynamic copy_dyn();

		static ::Dynamic empty(::Dynamic this1);
		static ::Dynamic empty_dyn();

		static ::Dynamic difference(::Dynamic this1,::Dynamic set);
		static ::Dynamic difference_dyn();

		static ::Dynamic filter(::Dynamic this1, ::Dynamic predicate);
		static ::Dynamic filter_dyn();

		static ::cpp::VirtualArray map(::Dynamic this1, ::Dynamic f);
		static ::Dynamic map_dyn();

		static Bool exists(::Dynamic this1, ::Dynamic v);
		static ::Dynamic exists_dyn();

		static Bool remove(::Dynamic this1, ::Dynamic v);
		static ::Dynamic remove_dyn();

		static ::Dynamic intersection(::Dynamic this1,::Dynamic set);
		static ::Dynamic intersection_dyn();

		static void push(::Dynamic this1, ::Dynamic v);
		static ::Dynamic push_dyn();

		static void pushMany(::Dynamic this1, ::Dynamic values);
		static ::Dynamic pushMany_dyn();

		static  ::Dynamic reduce(::Dynamic this1, ::Dynamic handler, ::Dynamic acc);
		static ::Dynamic reduce_dyn();

		static  ::Dynamic iterator(::Dynamic this1);
		static ::Dynamic iterator_dyn();

		static ::Dynamic _hx_union(::Dynamic this1,::Dynamic set);
		static ::Dynamic _hx_union_dyn();

		static ::cpp::VirtualArray toArray(::Dynamic this1);
		static ::Dynamic toArray_dyn();

		static ::String toString(::Dynamic this1);
		static ::Dynamic toString_dyn();

		static Int get_length(::Dynamic this1);
		static ::Dynamic get_length_dyn();

};

} // end namespace thx
} // end namespace _Set

#endif /* INCLUDED_thx__Set_Set_Impl_ */ 
