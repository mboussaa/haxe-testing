// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_thx_ArrayStrings
#include <thx/ArrayStrings.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx__Path_Path_Impl_
#include <thx/_Path/Path_Impl_.h>
#endif

namespace thx{
namespace _Path{

void Path_Impl__obj::__construct() { }

Dynamic Path_Impl__obj::__CreateEmpty() { return new Path_Impl__obj; }

hx::ObjectPtr< Path_Impl__obj > Path_Impl__obj::__new()
{
	hx::ObjectPtr< Path_Impl__obj > _hx_result = new Path_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Path_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Path_Impl__obj > _hx_result = new Path_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::String Path_Impl__obj::nixSeparator;

::String Path_Impl__obj::win32Separator;

Bool Path_Impl__obj::isValidNix(::Array< ::String > path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Bool _hx_run(::String _){
            			HX_STACK_FRAME("thx._Path.Path_Impl_","isValidNix",0x2025d6c0,"thx._Path.Path_Impl_.isValidNix","thx/Path.hx",29,0xbb25524e)
            			HX_STACK_ARG(_,"_")
HXLINE(  29)			Int _hx_tmp1 = _.indexOf(HX_("/",2f,00,00,00),null());
HXDLIN(  29)			return (_hx_tmp1 < (int)0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx._Path.Path_Impl_","isValidNix",0x2025d6c0,"thx._Path.Path_Impl_.isValidNix","thx/Path.hx",29,0xbb25524e)
            	HX_STACK_ARG(path,"path")
HXLINE(  29)		::Array< ::String > _hx_tmp = path->slice((int)2,null());
HXDLIN(  29)		return ::thx::Arrays_obj::any(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,isValidNix,return )

Bool Path_Impl__obj::isValidWin32(::Array< ::String > path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Bool _hx_run(::String _){
            			HX_STACK_FRAME("thx._Path.Path_Impl_","isValidWin32",0x04ecd55e,"thx._Path.Path_Impl_.isValidWin32","thx/Path.hx",32,0xbb25524e)
            			HX_STACK_ARG(_,"_")
HXLINE(  32)			return !( ::EReg_obj::__new(HX_("[<>:/\\|?*\"]",78,dd,23,e7),HX_("g",67,00,00,00))->match(_));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx._Path.Path_Impl_","isValidWin32",0x04ecd55e,"thx._Path.Path_Impl_.isValidWin32","thx/Path.hx",32,0xbb25524e)
            	HX_STACK_ARG(path,"path")
HXLINE(  32)		::Array< ::String > _hx_tmp = path->slice((int)2,null());
HXDLIN(  32)		return ::thx::Arrays_obj::any(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,isValidWin32,return )

::Array< ::String > Path_Impl__obj::normalizeNix(::Array< ::String > path,::String __o_replacement){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,replacement) HXARGC(1)
            		::String _hx_run(::String _){
            			HX_STACK_FRAME("thx._Path.Path_Impl_","normalizeNix",0x614dfa05,"thx._Path.Path_Impl_.normalizeNix","thx/Path.hx",35,0xbb25524e)
            			HX_STACK_ARG(_,"_")
HXLINE(  35)			return ::StringTools_obj::replace(_,HX_("/",2f,00,00,00),replacement);
            		}
            		HX_END_LOCAL_FUNC1(return)

::String replacement = __o_replacement.Default(HX_HCSTRING("_","\x5f","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx._Path.Path_Impl_","normalizeNix",0x614dfa05,"thx._Path.Path_Impl_.normalizeNix","thx/Path.hx",35,0xbb25524e)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(replacement,"replacement")
HXLINE(  35)		return ::thx::_Path::Path_Impl__obj::map(path, ::Dynamic(new _hx_Closure_0(replacement)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,normalizeNix,return )

::Array< ::String > Path_Impl__obj::normalizeWin32(::Array< ::String > path,::String __o_replacement){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,replacement) HXARGC(1)
            		::String _hx_run(::String _){
            			HX_STACK_FRAME("thx._Path.Path_Impl_","normalizeWin32",0xfad813e3,"thx._Path.Path_Impl_.normalizeWin32","thx/Path.hx",38,0xbb25524e)
            			HX_STACK_ARG(_,"_")
HXLINE(  38)			return  ::EReg_obj::__new(HX_("[<>:\"/\\|?*]",08,03,0d,88),HX_("g",67,00,00,00))->replace(_,replacement);
            		}
            		HX_END_LOCAL_FUNC1(return)

::String replacement = __o_replacement.Default(HX_HCSTRING("_","\x5f","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx._Path.Path_Impl_","normalizeWin32",0xfad813e3,"thx._Path.Path_Impl_.normalizeWin32","thx/Path.hx",38,0xbb25524e)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(replacement,"replacement")
HXLINE(  38)		return ::thx::_Path::Path_Impl__obj::map(path, ::Dynamic(new _hx_Closure_0(replacement)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,normalizeWin32,return )

::Array< ::String > Path_Impl__obj::fromString(::String s){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","fromString",0xf5159650,"thx._Path.Path_Impl_.fromString","thx/Path.hx",45,0xbb25524e)
            	HX_STACK_ARG(s,"s")
HXLINE(  45)		Int _hx_tmp = s.indexOf(HX_("\\",5c,00,00,00),null());
HXDLIN(  45)		if ((_hx_tmp >= (int)0)) {
HXLINE(  46)			HX_VARI(  ::EReg,re) =  ::EReg_obj::__new(HX_("^([a-z]+[:][\\\\])",14,64,54,e1),HX_("i",69,00,00,00));
HXLINE(  47)			Bool _hx_tmp1 = re->match(s);
HXDLIN(  47)			if (_hx_tmp1) {
HXLINE(  48)				HX_VARI( ::String,root) = re->matched((int)1);
HXDLIN(  48)				HX_VARI( ::Array< ::String >,path) = re->matchedRight().split(HX_("\\",5c,00,00,00));
HXDLIN(  48)				::Array< ::String > _hx_tmp2 = ::thx::_Path::Path_Impl__obj::resolve(path,(root != HX_("",00,00,00,00)));
HXDLIN(  48)				HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,HX_("\\",5c,00,00,00))->init(1,root)->concat(_hx_tmp2);
HXDLIN(  48)				return parts;
            			}
            			else {
HXLINE(  53)				HX_VARI_NAME( ::Array< ::String >,path1,"path") = s.split(HX_("\\",5c,00,00,00));
HXDLIN(  53)				::Array< ::String > _hx_tmp3 = ::thx::_Path::Path_Impl__obj::resolve(path1,false);
HXDLIN(  53)				HX_VARI_NAME( ::Array< ::String >,parts1,"parts") = ::Array_obj< ::String >::__new(2)->init(0,HX_("\\",5c,00,00,00))->init(1,HX_("",00,00,00,00))->concat(_hx_tmp3);
HXDLIN(  53)				return parts1;
            			}
            		}
            		else {
HXLINE(  56)			HX_VAR_NAME( ::String,root1,"root");
HXLINE(  57)			Bool _hx_tmp4 = ::StringTools_obj::startsWith(s,HX_("/",2f,00,00,00));
HXDLIN(  57)			if (_hx_tmp4) {
HXLINE(  56)				root1 = HX_("/",2f,00,00,00);
            			}
            			else {
HXLINE(  56)				root1 = HX_("",00,00,00,00);
            			}
HXDLIN(  56)			HX_VARI_NAME( ::Array< ::String >,path2,"path") = s.split(HX_("/",2f,00,00,00));
HXDLIN(  56)			::Array< ::String > _hx_tmp5 = ::thx::_Path::Path_Impl__obj::resolve(path2,(root1 != HX_("",00,00,00,00)));
HXDLIN(  56)			HX_VARI_NAME( ::Array< ::String >,parts2,"parts") = ::Array_obj< ::String >::__new(2)->init(0,HX_("/",2f,00,00,00))->init(1,root1)->concat(_hx_tmp5);
HXDLIN(  56)			return parts2;
            		}
HXLINE(  45)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,fromString,return )

::Array< ::String > Path_Impl__obj::resolve(::Array< ::String > path,Bool isAbsolute){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Bool _hx_run(::String s){
            			HX_STACK_FRAME("thx._Path.Path_Impl_","resolve",0x01b3ff57,"thx._Path.Path_Impl_.resolve","thx/Path.hx",70,0xbb25524e)
            			HX_STACK_ARG(s,"s")
HXLINE(  70)			return (s != HX_(".",2e,00,00,00));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,Bool,isAbsolute) HXARGC(2)
            		::Array< ::String > _hx_run(::Array< ::String > acc,::String s1){
            			HX_STACK_FRAME("thx._Path.Path_Impl_","resolve",0x01b3ff57,"thx._Path.Path_Impl_.resolve","thx/Path.hx",73,0xbb25524e)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(s1,"s1")
HXLINE(  73)			Bool _hx_tmp;
HXDLIN(  73)			Bool _hx_tmp1;
HXDLIN(  73)			if ((s1 == HX_("..",40,28,00,00))) {
HXLINE(  73)				_hx_tmp1 = (acc->length > (int)0);
            			}
            			else {
HXLINE(  73)				_hx_tmp1 = false;
            			}
HXDLIN(  73)			if (_hx_tmp1) {
HXLINE(  73)				_hx_tmp = (acc->__get((acc->length - (int)1)) != HX_("..",40,28,00,00));
            			}
            			else {
HXLINE(  73)				_hx_tmp = false;
            			}
HXDLIN(  73)			if (_hx_tmp) {
HXLINE(  74)				Int _hx_tmp2 = (acc->length - (int)1);
HXDLIN(  74)				return acc->slice((int)0,_hx_tmp2);
            			}
            			else {
HXLINE(  75)				Bool _hx_tmp3;
HXDLIN(  75)				if ((s1 == HX_("..",40,28,00,00))) {
HXLINE(  75)					_hx_tmp3 = isAbsolute;
            				}
            				else {
HXLINE(  75)					_hx_tmp3 = false;
            				}
HXDLIN(  75)				if (_hx_tmp3) {
HXLINE(  76)					return acc;
            				}
            				else {
HXLINE(  78)					return acc->concat(::Array_obj< ::String >::__new(1)->init(0,s1));
            				}
            			}
HXLINE(  73)			return null();
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx._Path.Path_Impl_","resolve",0x01b3ff57,"thx._Path.Path_Impl_.resolve","thx/Path.hx",68,0xbb25524e)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(isAbsolute,"isAbsolute")
HXLINE(  70)		path = ::thx::ArrayStrings_obj::compact(path)->filter( ::Dynamic(new _hx_Closure_0()));
HXLINE(  72)		return ( (::Array< ::String >)(::thx::Arrays_obj::reduce(path, ::Dynamic(new _hx_Closure_1(isAbsolute)),::Array_obj< ::String >::__new(0))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,resolve,return )

::Array< ::String > Path_Impl__obj::create(::String root,::Array< ::String > path,::String sep){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","create",0xe2ec30f1,"thx._Path.Path_Impl_.create","thx/Path.hx",84,0xbb25524e)
            	HX_STACK_ARG(root,"root")
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(sep,"sep")
HXLINE(  84)		::Array< ::String > _hx_tmp = ::thx::_Path::Path_Impl__obj::resolve(path,(root != HX_("",00,00,00,00)));
HXDLIN(  84)		HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,sep)->init(1,root)->concat(_hx_tmp);
HXDLIN(  84)		return parts;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Path_Impl__obj,create,return )

::Array< ::String > Path_Impl__obj::raw(::Array< ::String > parts){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","raw",0x1c2b70d3,"thx._Path.Path_Impl_.raw","thx/Path.hx",87,0xbb25524e)
            	HX_STACK_ARG(parts,"parts")
HXLINE(  87)		return parts;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,raw,return )

::Array< ::String > Path_Impl__obj::_new(::Array< ::String > parts){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","_new",0x7d520816,"thx._Path.Path_Impl_._new","thx/Path.hx",89,0xbb25524e)
            	HX_STACK_ARG(parts,"parts")
HXLINE(  89)		return parts;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,_new,return )

::Array< ::String > Path_Impl__obj::asAbsolute(::Array< ::String > this1,::String __o_root){
::String root = __o_root.Default(HX_HCSTRING("C:\\","\xe5","\x09","\x33","\x00"));
            	HX_STACK_FRAME("thx._Path.Path_Impl_","asAbsolute",0xdc9289fe,"thx._Path.Path_Impl_.asAbsolute","thx/Path.hx",93,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(root,"root")
HXLINE(  93)		HX_VAR_NAME( ::String,root1,"root");
HXLINE(  94)		if ((this1->__get((int)0) == HX_("/",2f,00,00,00))) {
HXLINE(  93)			root1 = HX_("/",2f,00,00,00);
            		}
            		else {
HXLINE(  93)			root1 = root;
            		}
HXDLIN(  93)		HX_VARI( ::Array< ::String >,path) = this1->slice((int)2,null());
HXLINE(  96)		::String _hx_tmp = this1->__get((int)0);
HXLINE(  93)		::Array< ::String > _hx_tmp1 = ::thx::_Path::Path_Impl__obj::resolve(path,(root1 != HX_("",00,00,00,00)));
HXDLIN(  93)		HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp)->init(1,root1)->concat(_hx_tmp1);
HXDLIN(  93)		return parts;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,asAbsolute,return )

::Array< ::String > Path_Impl__obj::asRelative(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","asRelative",0x4ed17853,"thx._Path.Path_Impl_.asRelative","thx/Path.hx",100,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 100)		HX_VARI( ::Array< ::String >,path) = this1->slice((int)2,null());
HXDLIN( 100)		::String _hx_tmp = this1->__get((int)0);
HXDLIN( 100)		::Array< ::String > _hx_tmp1 = ::thx::_Path::Path_Impl__obj::resolve(path,false);
HXDLIN( 100)		HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp)->init(1,HX_("",00,00,00,00))->concat(_hx_tmp1);
HXDLIN( 100)		return parts;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,asRelative,return )

::Array< ::String > Path_Impl__obj::normalize(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","normalize",0x741954b8,"thx._Path.Path_Impl_.normalize","thx/Path.hx",103,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 103)		if ((this1->__get((int)0) == HX_("\\",5c,00,00,00))) {
HXLINE( 103)			return ::thx::_Path::Path_Impl__obj::normalizeWin32(this1,null());
            		}
            		else {
HXLINE( 103)			return ::thx::_Path::Path_Impl__obj::normalizeNix(this1,null());
            		}
HXDLIN( 103)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,normalize,return )

Bool Path_Impl__obj::isAbsolute(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","isAbsolute",0xdee648f6,"thx._Path.Path_Impl_.isAbsolute","thx/Path.hx",106,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 106)		return (this1->__get((int)1) != HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,isAbsolute,return )

Bool Path_Impl__obj::isRelative(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","isRelative",0x5125374b,"thx._Path.Path_Impl_.isRelative","thx/Path.hx",109,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 109)		return (this1->__get((int)1) == HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,isRelative,return )

Bool Path_Impl__obj::isRoot(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","isRoot",0xcff27d21,"thx._Path.Path_Impl_.isRoot","thx/Path.hx",112,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 112)		if ((this1->__get((int)1) != HX_("",00,00,00,00))) {
HXLINE( 112)			return (this1->slice((int)2,null())->length == (int)0);
            		}
            		else {
HXLINE( 112)			return false;
            		}
HXDLIN( 112)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,isRoot,return )

Bool Path_Impl__obj::isNix(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","isNix",0xefb369be,"thx._Path.Path_Impl_.isNix","thx/Path.hx",115,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 115)		return (this1->__get((int)0) == HX_("/",2f,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,isNix,return )

Bool Path_Impl__obj::isWin32(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","isWin32",0x0143a3dc,"thx._Path.Path_Impl_.isWin32","thx/Path.hx",118,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 118)		return (this1->__get((int)0) == HX_("\\",5c,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,isWin32,return )

Bool Path_Impl__obj::isValid(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","isValid",0x6892051d,"thx._Path.Path_Impl_.isValid","thx/Path.hx",121,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 121)		if ((this1->__get((int)0) == HX_("\\",5c,00,00,00))) {
HXLINE( 121)			return ::thx::_Path::Path_Impl__obj::isValidWin32(this1);
            		}
            		else {
HXLINE( 121)			return ::thx::_Path::Path_Impl__obj::isValidNix(this1);
            		}
HXDLIN( 121)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,isValid,return )

::String Path_Impl__obj::noext(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","noext",0xce20f6ab,"thx._Path.Path_Impl_.noext","thx/Path.hx",123,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 124)		HX_VARI( ::String,e) = ::thx::_Path::Path_Impl__obj::ext(this1);
HXLINE( 125)		if ((e == HX_("",00,00,00,00))) {
HXLINE( 126)			return ::thx::_Path::Path_Impl__obj::base(this1,null());
            		}
            		else {
HXLINE( 128)			return ::thx::_Path::Path_Impl__obj::base(this1,(HX_(".",2e,00,00,00) + e));
            		}
HXLINE( 125)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,noext,return )

::String Path_Impl__obj::base(::Array< ::String > this1,::String end){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","base",0x7f43dac6,"thx._Path.Path_Impl_.base","thx/Path.hx",131,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(end,"end")
HXLINE( 132)		Bool _hx_tmp = (this1->slice((int)2,null())->length == (int)0);
HXDLIN( 132)		if (_hx_tmp) {
HXLINE( 133)			return HX_("",00,00,00,00);
            		}
HXLINE( 134)		HX_VARI( ::Array< ::String >,array) = this1->slice((int)2,null());
HXDLIN( 134)		HX_VARI( ::String,name) = array->__get((array->length - (int)1));
HXLINE( 135)		Bool _hx_tmp1;
HXDLIN( 135)		if (hx::IsNotNull( end )) {
HXLINE( 135)			_hx_tmp1 = ::StringTools_obj::endsWith(name,end);
            		}
            		else {
HXLINE( 135)			_hx_tmp1 = false;
            		}
HXDLIN( 135)		if (_hx_tmp1) {
HXLINE( 136)			Int _hx_tmp2 = (name.length - end.length);
HXDLIN( 136)			return name.substring((int)0,_hx_tmp2);
            		}
HXLINE( 137)		return name;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,base,return )

::String Path_Impl__obj::ext(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","ext",0x1c21a78c,"thx._Path.Path_Impl_.ext","thx/Path.hx",140,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 141)		Bool _hx_tmp = (this1->slice((int)2,null())->length == (int)0);
HXDLIN( 141)		if (_hx_tmp) {
HXLINE( 142)			return HX_("",00,00,00,00);
            		}
HXLINE( 143)		HX_VARI( ::Array< ::String >,array) = this1->slice((int)2,null());
HXDLIN( 143)		::String _hx_tmp1 = array->__get((array->length - (int)1));
HXDLIN( 143)		return ::thx::Strings_obj::afterLast(_hx_tmp1,HX_(".",2e,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,ext,return )

::String Path_Impl__obj::dir(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","dir",0x1c20d838,"thx._Path.Path_Impl_.dir","thx/Path.hx",147,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 147)		::Array< ::String > _hx_tmp = ::thx::_Path::Path_Impl__obj::up(this1,null());
HXDLIN( 147)		return ::thx::_Path::Path_Impl__obj::toString(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,dir,return )

::Array< ::String > Path_Impl__obj::map(::Array< ::String > this1, ::Dynamic handler){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","map",0x1c27a587,"thx._Path.Path_Impl_.map","thx/Path.hx",150,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 150)		HX_VARI( ::String,root) = this1->__get((int)1);
HXDLIN( 150)		HX_VARI( ::Array< ::String >,path) = this1->slice((int)2,null())->map(handler);
HXLINE( 153)		::String _hx_tmp = this1->__get((int)0);
HXLINE( 150)		::Array< ::String > _hx_tmp1 = ::thx::_Path::Path_Impl__obj::resolve(path,(root != HX_("",00,00,00,00)));
HXDLIN( 150)		HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp)->init(1,root)->concat(_hx_tmp1);
HXDLIN( 150)		return parts;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,map,return )

::Array< ::Dynamic> Path_Impl__obj::hierarchy(::Array< ::String > this1){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,base,::Array< ::String >,this1) HXARGC(2)
            		::Array< ::Dynamic> _hx_run(::Array< ::Dynamic> acc,::String cur){
            			HX_STACK_FRAME("thx._Path.Path_Impl_","hierarchy",0x1266a2a0,"thx._Path.Path_Impl_.hierarchy","thx/Path.hx",158,0xbb25524e)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(cur,"cur")
HXLINE( 159)			base->push(cur);
HXLINE( 160)			HX_VARI( ::String,root) = this1->__get((int)1);
HXDLIN( 160)			HX_VARI( ::Array< ::String >,path) = base->copy();
HXDLIN( 160)			::String _hx_tmp1 = this1->__get((int)0);
HXDLIN( 160)			::Array< ::String > _hx_tmp2 = ::thx::_Path::Path_Impl__obj::resolve(path,(root != HX_("",00,00,00,00)));
HXDLIN( 160)			HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp1)->init(1,root)->concat(_hx_tmp2);
HXDLIN( 160)			acc->push(parts);
HXLINE( 161)			return acc;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx._Path.Path_Impl_","hierarchy",0x1266a2a0,"thx._Path.Path_Impl_.hierarchy","thx/Path.hx",156,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 157)		HX_VARI( ::Array< ::String >,base) = ::Array_obj< ::String >::__new(0);
HXLINE( 158)		::Array< ::String > _hx_tmp = this1->slice((int)2,null());
HXDLIN( 158)		return ( (::Array< ::Dynamic>)(::thx::Arrays_obj::reduce(_hx_tmp, ::Dynamic(new _hx_Closure_0(base,this1)),::Array_obj< ::Dynamic>::__new(0))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,hierarchy,return )

 ::Dynamic Path_Impl__obj::iterator(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","iterator",0x02b53b23,"thx._Path.Path_Impl_.iterator","thx/Path.hx",166,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 166)		return ::thx::_Path::Path_Impl__obj::hierarchy(this1)->iterator();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,iterator,return )

::Array< ::String > Path_Impl__obj::pathTo(::Array< ::String > this1,::Array< ::String > destination){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","pathTo",0x55af6c75,"thx._Path.Path_Impl_.pathTo","thx/Path.hx",169,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(destination,"destination")
HXLINE( 169)		HX_VARI( Bool,_g) = (destination->__get((int)1) != HX_("",00,00,00,00));
HXDLIN( 169)		switch((int)((this1->__get((int)1) != HX_("",00,00,00,00)))){
            			case (int)0: {
HXLINE( 169)				switch((int)(_g)){
            					case (int)0: {
HXLINE( 181)						return ::thx::_Path::Path_Impl__obj::join(this1,destination);
            					}
            					break;
            					case (int)1: {
HXLINE( 179)						return destination;
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 169)				switch((int)(_g)){
            					case (int)0: {
HXLINE( 181)						return ::thx::_Path::Path_Impl__obj::join(this1,destination);
            					}
            					break;
            					case (int)1: {
HXLINE( 170)						if ((this1->__get((int)1) == destination->__get((int)1))) {
            							HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            							::String _hx_run(::String _){
            								HX_STACK_FRAME("thx._Path.Path_Impl_","pathTo",0x55af6c75,"thx._Path.Path_Impl_.pathTo","thx/Path.hx",175,0xbb25524e)
            								HX_STACK_ARG(_,"_")
HXLINE( 175)								return HX_("..",40,28,00,00);
            							}
            							HX_END_LOCAL_FUNC1(return)

HXLINE( 171)							HX_VARI( ::Array< ::String >,opath) = destination->slice((int)2,null());
HXLINE( 172)							::Array< ::String > _hx_tmp = this1->slice((int)2,null());
HXLINE( 171)							HX_VARI( ::Array< ::String >,common) = ::thx::Arrays_obj::commonsFromStart(_hx_tmp,opath,null());
HXLINE( 174)							::Array< ::String > _hx_tmp1 = this1->slice((int)2,null());
HXDLIN( 174)							Int _hx_tmp2 = (this1->slice((int)2,null())->length - common->length);
HXDLIN( 174)							::Array< ::String > _hx_tmp3 = _hx_tmp1->slice((int)0,_hx_tmp2)->map( ::Dynamic(new _hx_Closure_0()));
HXLINE( 176)							::Array< ::String > _hx_tmp4 = opath->slice(common->length,null());
HXLINE( 173)							HX_VARI( ::Array< ::String >,path) = _hx_tmp3->concat(_hx_tmp4);
HXLINE( 177)							::String _hx_tmp5 = this1->__get((int)0);
HXLINE( 173)							::Array< ::String > _hx_tmp6 = ::thx::_Path::Path_Impl__obj::resolve(path,false);
HXDLIN( 173)							HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp5)->init(1,HX_("",00,00,00,00))->concat(_hx_tmp6);
HXDLIN( 173)							return parts;
            						}
            						else {
HXLINE( 179)							return destination;
            						}
            					}
            					break;
            				}
            			}
            			break;
            		}
HXLINE( 169)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,pathTo,return )

::Array< ::String > Path_Impl__obj::sibling(::Array< ::String > this1,::Array< ::String > path){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","sibling",0xf8e9196d,"thx._Path.Path_Impl_.sibling","thx/Path.hx",186,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(path,"path")
HXLINE( 186)		::Array< ::String > _hx_tmp = ::thx::_Path::Path_Impl__obj::up(this1,null());
HXDLIN( 186)		return ::thx::_Path::Path_Impl__obj::join(_hx_tmp,path);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,sibling,return )

::Array< ::String > Path_Impl__obj::toNix(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","toNix",0x4276f0cd,"thx._Path.Path_Impl_.toNix","thx/Path.hx",189,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 189)		if ((this1->__get((int)0) == HX_("/",2f,00,00,00))) {
HXLINE( 189)			return this1;
            		}
            		else {
HXLINE( 191)			::String _hx_tmp;
HXDLIN( 191)			if ((this1->__get((int)1) != HX_("",00,00,00,00))) {
HXLINE( 191)				_hx_tmp = HX_("/",2f,00,00,00);
            			}
            			else {
HXLINE( 191)				_hx_tmp = HX_("",00,00,00,00);
            			}
HXDLIN( 191)			::Array< ::String > _hx_tmp1 = this1->slice((int)2,null());
HXDLIN( 191)			HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,HX_("/",2f,00,00,00))->init(1,_hx_tmp)->concat(_hx_tmp1);
HXLINE( 189)			return parts;
            		}
HXDLIN( 189)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,toNix,return )

::Array< ::String > Path_Impl__obj::toWin32(::Array< ::String > this1,::String __o_root){
::String root = __o_root.Default(HX_HCSTRING("C:\\","\xe5","\x09","\x33","\x00"));
            	HX_STACK_FRAME("thx._Path.Path_Impl_","toWin32",0x31424cab,"thx._Path.Path_Impl_.toWin32","thx/Path.hx",194,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(root,"root")
HXLINE( 194)		if ((this1->__get((int)0) == HX_("\\",5c,00,00,00))) {
HXLINE( 194)			return this1;
            		}
            		else {
HXLINE( 196)			::String _hx_tmp;
HXDLIN( 196)			if ((this1->__get((int)1) != HX_("",00,00,00,00))) {
HXLINE( 196)				_hx_tmp = root;
            			}
            			else {
HXLINE( 196)				_hx_tmp = HX_("",00,00,00,00);
            			}
HXDLIN( 196)			::Array< ::String > _hx_tmp1 = this1->slice((int)2,null());
HXDLIN( 196)			HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,HX_("\\",5c,00,00,00))->init(1,_hx_tmp)->concat(_hx_tmp1);
HXLINE( 194)			return parts;
            		}
HXDLIN( 194)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,toWin32,return )

::Array< ::String > Path_Impl__obj::up(::Array< ::String > this1, ::Dynamic __o_n){
 ::Dynamic n = __o_n.Default(1);
            	HX_STACK_FRAME("thx._Path.Path_Impl_","up",0x4069d1d0,"thx._Path.Path_Impl_.up","thx/Path.hx",199,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(n,"n")
HXLINE( 199)		Bool _hx_tmp = ::thx::_Path::Path_Impl__obj::isRoot(this1);
HXDLIN( 199)		if (_hx_tmp) {
HXLINE( 199)			return this1;
            		}
            		else {
HXLINE( 201)			::String _hx_tmp1 = this1->__get((int)0);
HXDLIN( 201)			::String _hx_tmp2 = this1->__get((int)1);
HXDLIN( 201)			Int _hx_tmp3 = (this1->length - n);
HXDLIN( 201)			::Array< ::String > _hx_tmp4 = this1->slice((int)2,_hx_tmp3);
HXDLIN( 201)			HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp1)->init(1,_hx_tmp2)->concat(_hx_tmp4);
HXLINE( 199)			return parts;
            		}
HXDLIN( 199)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,up,return )

::Array< ::String > Path_Impl__obj::withExt(::Array< ::String > this1,::String newextension){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","withExt",0xf9b542a6,"thx._Path.Path_Impl_.withExt","thx/Path.hx",203,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newextension,"newextension")
HXLINE( 204)		HX_VARI( ::String,oext) = ::thx::_Path::Path_Impl__obj::ext(this1);
HXLINE( 205)		Bool _hx_tmp = (oext.length > (int)0);
HXDLIN( 205)		if (_hx_tmp) {
HXLINE( 206)			oext = (HX_(".",2e,00,00,00) + oext);
            		}
HXLINE( 207)		::String _hx_tmp1 = newextension.substring((int)0,(int)1);
HXDLIN( 207)		if ((_hx_tmp1 == HX_(".",2e,00,00,00))) {
HXLINE( 208)			newextension = newextension.substring((int)1,null());
            		}
HXLINE( 209)		::String _hx_tmp2 = ::thx::_Path::Path_Impl__obj::base(this1,oext);
HXDLIN( 209)		return ::thx::_Path::Path_Impl__obj::sibling(this1,::thx::_Path::Path_Impl__obj::fromString((((HX_("",00,00,00,00) + _hx_tmp2) + HX_(".",2e,00,00,00)) + newextension)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,withExt,return )

::Array< ::String > Path_Impl__obj::join(::Array< ::String > this1,::Array< ::String > other){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","join",0x8498269f,"thx._Path.Path_Impl_.join","thx/Path.hx",212,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 213)		if ((other->__get((int)1) != HX_("",00,00,00,00))) {
HXLINE( 214)			return other;
            		}
HXLINE( 215)		HX_VARI( ::String,root) = this1->__get((int)1);
HXDLIN( 215)		::Array< ::String > _hx_tmp = this1->slice((int)2,null());
HXDLIN( 215)		::Array< ::String > _hx_tmp1 = other->slice((int)2,null());
HXDLIN( 215)		HX_VARI( ::Array< ::String >,path) = _hx_tmp->concat(_hx_tmp1);
HXDLIN( 215)		::String _hx_tmp2 = this1->__get((int)0);
HXDLIN( 215)		::Array< ::String > _hx_tmp3 = ::thx::_Path::Path_Impl__obj::resolve(path,(root != HX_("",00,00,00,00)));
HXDLIN( 215)		HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp2)->init(1,root)->concat(_hx_tmp3);
HXDLIN( 215)		return parts;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Path_Impl__obj,join,return )

::String Path_Impl__obj::toString(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","toString",0xa789c1e1,"thx._Path.Path_Impl_.toString","thx/Path.hx",219,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 219)		Bool _hx_tmp;
HXDLIN( 219)		if ((this1->__get((int)1) == HX_("",00,00,00,00))) {
HXLINE( 219)			_hx_tmp = (this1->slice((int)2,null())->length == (int)0);
            		}
            		else {
HXLINE( 219)			_hx_tmp = false;
            		}
HXDLIN( 219)		if (_hx_tmp) {
HXLINE( 219)			return HX_(".",2e,00,00,00);
            		}
            		else {
HXLINE( 219)			::String _hx_tmp1 = this1->__get((int)1);
HXDLIN( 219)			::Array< ::String > _hx_tmp2 = this1->slice((int)2,null());
HXDLIN( 219)			::String _hx_tmp3 = _hx_tmp2->join(this1->__get((int)0));
HXDLIN( 219)			return (_hx_tmp1 + _hx_tmp3);
            		}
HXDLIN( 219)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,toString,return )

::Array< ::String > Path_Impl__obj::get_path(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","get_path",0x39279263,"thx._Path.Path_Impl_.get_path","thx/Path.hx",222,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 222)		return this1->slice((int)2,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,get_path,return )

::String Path_Impl__obj::get_root(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","get_root",0x3a849ae0,"thx._Path.Path_Impl_.get_root","thx/Path.hx",225,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 225)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,get_root,return )

::String Path_Impl__obj::get_sep(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","get_sep",0xc12050a0,"thx._Path.Path_Impl_.get_sep","thx/Path.hx",228,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 228)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,get_sep,return )

::Array< ::String > Path_Impl__obj::get_self(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._Path.Path_Impl_","get_self",0x3b26384a,"thx._Path.Path_Impl_.get_self","thx/Path.hx",231,0xbb25524e)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 231)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_Impl__obj,get_self,return )


Path_Impl__obj::Path_Impl__obj()
{
}

bool Path_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { outValue = up_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { outValue = raw_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ext") ) { outValue = ext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dir") ) { outValue = dir_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"base") ) { outValue = base_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"join") ) { outValue = join_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isNix") ) { outValue = isNix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"noext") ) { outValue = noext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toNix") ) { outValue = toNix_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isRoot") ) { outValue = isRoot_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pathTo") ) { outValue = pathTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { outValue = resolve_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isWin32") ) { outValue = isWin32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValid") ) { outValue = isValid_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sibling") ) { outValue = sibling_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toWin32") ) { outValue = toWin32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withExt") ) { outValue = withExt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_sep") ) { outValue = get_sep_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_path") ) { outValue = get_path_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_root") ) { outValue = get_root_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_self") ) { outValue = get_self_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hierarchy") ) { outValue = hierarchy_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isValidNix") ) { outValue = isValidNix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"asAbsolute") ) { outValue = asAbsolute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"asRelative") ) { outValue = asRelative_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isAbsolute") ) { outValue = isAbsolute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isRelative") ) { outValue = isRelative_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isValidWin32") ) { outValue = isValidWin32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalizeNix") ) { outValue = normalizeNix_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"normalizeWin32") ) { outValue = normalizeWin32_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Path_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Path_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Path_Impl__obj::nixSeparator,HX_HCSTRING("nixSeparator","\xc8","\x88","\xb5","\x11")},
	{hx::fsString,(void *) &Path_Impl__obj::win32Separator,HX_HCSTRING("win32Separator","\x2a","\x5d","\xf3","\x68")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Path_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Path_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Path_Impl__obj::nixSeparator,"nixSeparator");
	HX_MARK_MEMBER_NAME(Path_Impl__obj::win32Separator,"win32Separator");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Path_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Path_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Path_Impl__obj::nixSeparator,"nixSeparator");
	HX_VISIT_MEMBER_NAME(Path_Impl__obj::win32Separator,"win32Separator");
};

#endif

hx::Class Path_Impl__obj::__mClass;

static ::String Path_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("nixSeparator","\xc8","\x88","\xb5","\x11"),
	HX_HCSTRING("win32Separator","\x2a","\x5d","\xf3","\x68"),
	HX_HCSTRING("isValidNix","\x4b","\x6e","\x84","\x7f"),
	HX_HCSTRING("isValidWin32","\xa9","\xa5","\xc8","\xea"),
	HX_HCSTRING("normalizeNix","\x50","\xca","\x29","\x47"),
	HX_HCSTRING("normalizeWin32","\xee","\xcc","\x80","\xeb"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("resolve","\xec","\x12","\x60","\x67"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("raw","\xe8","\xd5","\x56","\x00"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("asAbsolute","\x89","\x21","\xf1","\x3b"),
	HX_HCSTRING("asRelative","\xde","\x0f","\x30","\xae"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("isAbsolute","\x81","\xe0","\x44","\x3e"),
	HX_HCSTRING("isRelative","\xd6","\xce","\x83","\xb0"),
	HX_HCSTRING("isRoot","\x2c","\xb3","\x15","\x69"),
	HX_HCSTRING("isNix","\x13","\xfe","\x51","\xc1"),
	HX_HCSTRING("isWin32","\x71","\xb7","\xef","\x66"),
	HX_HCSTRING("isValid","\xb2","\x18","\x3e","\xce"),
	HX_HCSTRING("noext","\x00","\x8b","\xbf","\x9f"),
	HX_HCSTRING("base","\x11","\xe8","\x10","\x41"),
	HX_HCSTRING("ext","\xa1","\x0c","\x4d","\x00"),
	HX_HCSTRING("dir","\x4d","\x3d","\x4c","\x00"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("hierarchy","\x75","\x85","\xee","\x49"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("pathTo","\x80","\xa2","\xd2","\xee"),
	HX_HCSTRING("sibling","\x02","\x2d","\x95","\x5e"),
	HX_HCSTRING("toNix","\x22","\x85","\x15","\x14"),
	HX_HCSTRING("toWin32","\x40","\x60","\xee","\x96"),
	HX_HCSTRING("up","\x5b","\x66","\x00","\x00"),
	HX_HCSTRING("withExt","\x3b","\x56","\x61","\x5f"),
	HX_HCSTRING("join","\xea","\x33","\x65","\x46"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_path","\x2e","\xa1","\x0c","\xca"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_sep","\x35","\x64","\xcc","\x26"),
	HX_HCSTRING("get_self","\x15","\x47","\x0b","\xcc"),
	::String(null())
};

void Path_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._Path.Path_Impl_","\xd9","\x69","\x90","\x70");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Path_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Path_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Path_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Path_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Path_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Path_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Path_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Path_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("thx._Path.Path_Impl_","boot",0x7f4e76e7,"thx._Path.Path_Impl_.boot","thx/Path.hx",25,0xbb25524e)
HXLINE(  25)		nixSeparator = HX_("/",2f,00,00,00);
            	}
{
            	HX_STACK_FRAME("thx._Path.Path_Impl_","boot",0x7f4e76e7,"thx._Path.Path_Impl_.boot","thx/Path.hx",26,0xbb25524e)
HXLINE(  26)		win32Separator = HX_("\\",5c,00,00,00);
            	}
}

} // end namespace thx
} // end namespace _Path
