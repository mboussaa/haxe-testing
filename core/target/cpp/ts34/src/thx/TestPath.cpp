// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_TestPath
#include <thx/TestPath.h>
#endif
#ifndef INCLUDED_thx__Path_Path_Impl_
#include <thx/_Path/Path_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestPath_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestPath","new",0xf67c59d3,"thx.TestPath.new","thx/TestPath.hx",10,0x07286e9c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  10)		this->x = i;
            	}

Dynamic TestPath_obj::__CreateEmpty() { return new TestPath_obj; }

hx::ObjectPtr< TestPath_obj > TestPath_obj::__new(Int i)
{
	hx::ObjectPtr< TestPath_obj > _hx_result = new TestPath_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestPath_obj > _hx_result = new TestPath_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestPath_obj::testIsRelativeAndIsAbsolute(){
            	HX_STACK_FRAME("thx.TestPath","testIsRelativeAndIsAbsolute",0xb2f0d9c3,"thx.TestPath.testIsRelativeAndIsAbsolute","thx/TestPath.hx",14,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE(  14)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  14)		HX_VARI( Int,_g) = this->x;
HXDLIN(  14)		while((_g1 < _g)){
HXLINE(  14)			++_g1;
HXLINE(  15)			HX_VARI( ::Array< ::String >,rel) = ::thx::_Path::Path_Impl__obj::fromString(HX_("a/b",f4,c3,49,00));
HXDLIN(  15)			HX_VARI( ::Array< ::String >,abs) = ::thx::_Path::Path_Impl__obj::fromString(HX_("/a/b",25,cb,5a,1f));
HXLINE(  17)			::utest::Assert_obj::isTrue((rel->__get((int)1) == HX_("",00,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),17,HX_("thx.TestPath",61,74,98,56),HX_("testIsRelativeAndIsAbsolute",50,cf,f5,97)));
HXLINE(  18)			::utest::Assert_obj::isFalse((rel->__get((int)1) != HX_("",00,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),18,HX_("thx.TestPath",61,74,98,56),HX_("testIsRelativeAndIsAbsolute",50,cf,f5,97)));
HXLINE(  19)			::utest::Assert_obj::isTrue((abs->__get((int)1) != HX_("",00,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),19,HX_("thx.TestPath",61,74,98,56),HX_("testIsRelativeAndIsAbsolute",50,cf,f5,97)));
HXLINE(  20)			::utest::Assert_obj::isFalse((abs->__get((int)1) == HX_("",00,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),20,HX_("thx.TestPath",61,74,98,56),HX_("testIsRelativeAndIsAbsolute",50,cf,f5,97)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testIsRelativeAndIsAbsolute,(void))

void TestPath_obj::testPathTo(){
            	HX_STACK_FRAME("thx.TestPath","testPathTo",0x575ac35f,"thx.TestPath.testPathTo","thx/TestPath.hx",24,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE(  24)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  24)		HX_VARI( Int,_g) = this->x;
HXDLIN(  24)		while((_g1 < _g)){
HXLINE(  24)			++_g1;
HXLINE(  25)			HX_VARI( ::Array< ::String >,path1) = ::thx::_Path::Path_Impl__obj::fromString(HX_("/a/b/c",b9,c7,ff,c3));
HXDLIN(  25)			HX_VARI( ::Array< ::String >,path2) = ::thx::_Path::Path_Impl__obj::fromString(HX_("/a/d",27,cb,5a,1f));
HXDLIN(  25)			HX_VARI( ::Array< ::String >,path3) = ::thx::_Path::Path_Impl__obj::fromString(HX_("/x/y/z",3e,93,48,02));
HXDLIN(  25)			HX_VARI( ::Array< ::String >,path4) = ::thx::_Path::Path_Impl__obj::fromString(HX_("a/b/c",48,d2,39,f9));
HXDLIN(  25)			HX_VARI( ::Array< ::String >,path5) = ::thx::_Path::Path_Impl__obj::fromString(HX_("x/y/z",cd,9d,82,37));
HXLINE(  30)			::Array< ::String > _hx_tmp = ::thx::_Path::Path_Impl__obj::pathTo(path1,path2);
HXDLIN(  30)			::String _hx_tmp1 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp);
HXDLIN(  30)			::utest::Assert_obj::equals(HX_("../../d",04,15,a6,0b),_hx_tmp1,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),30,HX_("thx.TestPath",61,74,98,56),HX_("testPathTo",72,e8,c6,07)));
HXLINE(  31)			::Array< ::String > _hx_tmp2 = ::thx::_Path::Path_Impl__obj::pathTo(path1,path3);
HXDLIN(  31)			::String _hx_tmp3 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp2);
HXDLIN(  31)			::utest::Assert_obj::equals(HX_("../../../x/y/z",de,2a,c0,c7),_hx_tmp3,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),31,HX_("thx.TestPath",61,74,98,56),HX_("testPathTo",72,e8,c6,07)));
HXLINE(  32)			::Array< ::String > _hx_tmp4 = ::thx::_Path::Path_Impl__obj::pathTo(path2,path1);
HXDLIN(  32)			::String _hx_tmp5 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp4);
HXDLIN(  32)			::utest::Assert_obj::equals(HX_("../b/c",a7,d5,34,00),_hx_tmp5,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),32,HX_("thx.TestPath",61,74,98,56),HX_("testPathTo",72,e8,c6,07)));
HXLINE(  34)			::Array< ::String > _hx_tmp6 = ::thx::_Path::Path_Impl__obj::pathTo(path1,path4);
HXDLIN(  34)			::String _hx_tmp7 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp6);
HXDLIN(  34)			::utest::Assert_obj::equals(HX_("/a/b/c/a/b/c",32,a0,91,4d),_hx_tmp7,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),34,HX_("thx.TestPath",61,74,98,56),HX_("testPathTo",72,e8,c6,07)));
HXLINE(  35)			::Array< ::String > _hx_tmp8 = ::thx::_Path::Path_Impl__obj::pathTo(path5,path2);
HXDLIN(  35)			::String _hx_tmp9 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp8);
HXDLIN(  35)			::utest::Assert_obj::equals(HX_("/a/d",27,cb,5a,1f),_hx_tmp9,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),35,HX_("thx.TestPath",61,74,98,56),HX_("testPathTo",72,e8,c6,07)));
HXLINE(  36)			::Array< ::String > _hx_tmp10 = ::thx::_Path::Path_Impl__obj::pathTo(path4,path5);
HXDLIN(  36)			::String _hx_tmp11 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp10);
HXDLIN(  36)			::utest::Assert_obj::equals(HX_("a/b/c/x/y/z",86,4b,b5,79),_hx_tmp11,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),36,HX_("thx.TestPath",61,74,98,56),HX_("testPathTo",72,e8,c6,07)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testPathTo,(void))

void TestPath_obj::testUp(){
            	HX_STACK_FRAME("thx.TestPath","testUp",0x0250ebba,"thx.TestPath.testUp","thx/TestPath.hx",40,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE(  40)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  40)		HX_VARI( Int,_g) = this->x;
HXDLIN(  40)		while((_g1 < _g)){
HXLINE(  40)			++_g1;
HXLINE(  41)			::Array< ::String > _hx_tmp = ::thx::_Path::Path_Impl__obj::up(::thx::_Path::Path_Impl__obj::fromString(HX_("/a/b/c/",56,fa,ce,bb)),null());
HXDLIN(  41)			::String _hx_tmp1 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp);
HXDLIN(  41)			::utest::Assert_obj::equals(HX_("/a/b",25,cb,5a,1f),_hx_tmp1,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),41,HX_("thx.TestPath",61,74,98,56),HX_("testUp",4d,4b,3a,d5)));
HXLINE(  42)			::Array< ::String > _hx_tmp2 = ::thx::_Path::Path_Impl__obj::up(::thx::_Path::Path_Impl__obj::fromString(HX_("/a",52,29,00,00)),(int)2);
HXDLIN(  42)			::String _hx_tmp3 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp2);
HXDLIN(  42)			::utest::Assert_obj::equals(HX_("/",2f,00,00,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),42,HX_("thx.TestPath",61,74,98,56),HX_("testUp",4d,4b,3a,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testUp,(void))

void TestPath_obj::testDir(){
            	HX_STACK_FRAME("thx.TestPath","testDir",0x04706b0e,"thx.TestPath.testDir","thx/TestPath.hx",46,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE(  46)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  46)		HX_VARI( Int,_g) = this->x;
HXDLIN(  46)		while((_g1 < _g)){
HXLINE(  46)			++_g1;
HXLINE(  47)			::String _hx_tmp = ::thx::_Path::Path_Impl__obj::dir(::thx::_Path::Path_Impl__obj::fromString(HX_("/a/b/c",b9,c7,ff,c3)));
HXDLIN(  47)			::utest::Assert_obj::equals(HX_("/a/b",25,cb,5a,1f),_hx_tmp,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),47,HX_("thx.TestPath",61,74,98,56),HX_("testDir",1b,ac,ba,bd)));
HXLINE(  48)			::String _hx_tmp1 = ::thx::_Path::Path_Impl__obj::dir(::thx::_Path::Path_Impl__obj::fromString(HX_("a/b/c",48,d2,39,f9)));
HXDLIN(  48)			::utest::Assert_obj::equals(HX_("a/b",f4,c3,49,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),48,HX_("thx.TestPath",61,74,98,56),HX_("testDir",1b,ac,ba,bd)));
HXLINE(  49)			::String _hx_tmp2 = ::thx::_Path::Path_Impl__obj::dir(::thx::_Path::Path_Impl__obj::fromString(HX_("a",61,00,00,00)));
HXDLIN(  49)			::utest::Assert_obj::equals(HX_(".",2e,00,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),49,HX_("thx.TestPath",61,74,98,56),HX_("testDir",1b,ac,ba,bd)));
HXLINE(  50)			::String _hx_tmp3 = ::thx::_Path::Path_Impl__obj::dir(::thx::_Path::Path_Impl__obj::fromString(HX_("..",40,28,00,00)));
HXDLIN(  50)			::utest::Assert_obj::equals(HX_(".",2e,00,00,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),50,HX_("thx.TestPath",61,74,98,56),HX_("testDir",1b,ac,ba,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testDir,(void))

void TestPath_obj::testBase(){
            	HX_STACK_FRAME("thx.TestPath","testBase",0xdc94c330,"thx.TestPath.testBase","thx/TestPath.hx",54,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE(  54)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  54)		HX_VARI( Int,_g) = this->x;
HXDLIN(  54)		while((_g1 < _g)){
HXLINE(  54)			++_g1;
HXLINE(  55)			HX_VARI( ::Array< ::String >,path) = ::thx::_Path::Path_Impl__obj::fromString(HX_("/a/b.c",da,c6,ff,c3));
HXLINE(  56)			::String _hx_tmp = ::thx::_Path::Path_Impl__obj::base(path,null());
HXDLIN(  56)			::utest::Assert_obj::equals(HX_("b.c",57,85,4a,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),56,HX_("thx.TestPath",61,74,98,56),HX_("testBase",83,6d,43,44)));
HXLINE(  57)			::String _hx_tmp1 = ::thx::_Path::Path_Impl__obj::base(path,HX_(".c",75,28,00,00));
HXDLIN(  57)			::utest::Assert_obj::equals(HX_("b",62,00,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),57,HX_("thx.TestPath",61,74,98,56),HX_("testBase",83,6d,43,44)));
HXLINE(  58)			::String _hx_tmp2 = ::thx::_Path::Path_Impl__obj::base(path,HX_("c",63,00,00,00));
HXDLIN(  58)			::utest::Assert_obj::equals(HX_("b.",8c,55,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),58,HX_("thx.TestPath",61,74,98,56),HX_("testBase",83,6d,43,44)));
HXLINE(  59)			::String _hx_tmp3 = ::thx::_Path::Path_Impl__obj::base(path,HX_(".d",76,28,00,00));
HXDLIN(  59)			::utest::Assert_obj::equals(HX_("b.c",57,85,4a,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),59,HX_("thx.TestPath",61,74,98,56),HX_("testBase",83,6d,43,44)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testBase,(void))

void TestPath_obj::testExt(){
            	HX_STACK_FRAME("thx.TestPath","testExt",0x04713a62,"thx.TestPath.testExt","thx/TestPath.hx",63,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE(  63)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  63)		HX_VARI( Int,_g) = this->x;
HXDLIN(  63)		while((_g1 < _g)){
HXLINE(  63)			++_g1;
HXLINE(  64)			::thx::_Path::Path_Impl__obj::fromString(HX_("",00,00,00,00));
HXLINE(  65)			::String _hx_tmp = ::thx::_Path::Path_Impl__obj::ext(::thx::_Path::Path_Impl__obj::fromString(HX_("/a/b.c",da,c6,ff,c3)));
HXDLIN(  65)			::utest::Assert_obj::equals(HX_("c",63,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),65,HX_("thx.TestPath",61,74,98,56),HX_("testExt",6f,7b,bb,bd)));
HXLINE(  66)			::String _hx_tmp1 = ::thx::_Path::Path_Impl__obj::ext(::thx::_Path::Path_Impl__obj::fromString(HX_("/a/b/c",b9,c7,ff,c3)));
HXDLIN(  66)			::utest::Assert_obj::equals(HX_("",00,00,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),66,HX_("thx.TestPath",61,74,98,56),HX_("testExt",6f,7b,bb,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testExt,(void))

void TestPath_obj::testSep(){
            	HX_STACK_FRAME("thx.TestPath","testSep",0x047bc95f,"thx.TestPath.testSep","thx/TestPath.hx",70,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE(  70)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  70)		HX_VARI( Int,_g) = this->x;
HXDLIN(  70)		while((_g1 < _g)){
HXLINE(  70)			++_g1;
HXLINE(  71)			HX_VARI( ::Array< ::String >,path) = ::thx::_Path::Path_Impl__obj::fromString(HX_("/path/to/file.png",90,bb,9b,0e));
HXDLIN(  71)			HX_VARI( ::Array< ::String >,win) = ::thx::_Path::Path_Impl__obj::toWin32(path,HX_("C:",97,3a,00,00));
HXLINE(  73)			::utest::Assert_obj::equals(HX_("/",2f,00,00,00),path->__get((int)0),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),73,HX_("thx.TestPath",61,74,98,56),HX_("testSep",6c,0a,c6,bd)));
HXLINE(  74)			::utest::Assert_obj::equals(HX_("\\",5c,00,00,00),win->__get((int)0),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),74,HX_("thx.TestPath",61,74,98,56),HX_("testSep",6c,0a,c6,bd)));
HXLINE(  75)			::utest::Assert_obj::isTrue((path->__get((int)0) == HX_("/",2f,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),75,HX_("thx.TestPath",61,74,98,56),HX_("testSep",6c,0a,c6,bd)));
HXLINE(  76)			::utest::Assert_obj::isFalse((path->__get((int)0) == HX_("\\",5c,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),76,HX_("thx.TestPath",61,74,98,56),HX_("testSep",6c,0a,c6,bd)));
HXLINE(  77)			::utest::Assert_obj::isTrue((win->__get((int)0) == HX_("\\",5c,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),77,HX_("thx.TestPath",61,74,98,56),HX_("testSep",6c,0a,c6,bd)));
HXLINE(  78)			::utest::Assert_obj::isFalse((win->__get((int)0) == HX_("/",2f,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),78,HX_("thx.TestPath",61,74,98,56),HX_("testSep",6c,0a,c6,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testSep,(void))

void TestPath_obj::testJoin(){
            	HX_STACK_FRAME("thx.TestPath","testJoin",0xe1e90f09,"thx.TestPath.testJoin","thx/TestPath.hx",82,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE(  82)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  82)		HX_VARI( Int,_g) = this->x;
HXDLIN(  82)		while((_g1 < _g)){
HXLINE(  82)			++_g1;
HXLINE(  83)			::Array< ::String > _hx_tmp = ::thx::_Path::Path_Impl__obj::fromString(HX_("/a/x",3b,cb,5a,1f));
HXDLIN(  83)			::Array< ::String > _hx_tmp1 = ::thx::_Path::Path_Impl__obj::join(_hx_tmp,::thx::_Path::Path_Impl__obj::fromString(HX_("../b/c",a7,d5,34,00)));
HXDLIN(  83)			::String _hx_tmp2 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp1);
HXDLIN(  83)			::utest::Assert_obj::equals(HX_("/a/b/c",b9,c7,ff,c3),_hx_tmp2,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),83,HX_("thx.TestPath",61,74,98,56),HX_("testJoin",5c,b9,97,49)));
HXLINE(  84)			::Array< ::String > _hx_tmp3 = ::thx::_Path::Path_Impl__obj::fromString(HX_("../x",a9,e1,8a,1e));
HXDLIN(  84)			::Array< ::String > _hx_tmp4 = ::thx::_Path::Path_Impl__obj::join(_hx_tmp3,::thx::_Path::Path_Impl__obj::fromString(HX_("../b/c",a7,d5,34,00)));
HXDLIN(  84)			::String _hx_tmp5 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp4);
HXDLIN(  84)			::utest::Assert_obj::equals(HX_("../b/c",a7,d5,34,00),_hx_tmp5,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),84,HX_("thx.TestPath",61,74,98,56),HX_("testJoin",5c,b9,97,49)));
HXLINE(  85)			::Array< ::String > _hx_tmp6 = ::thx::_Path::Path_Impl__obj::fromString(HX_("/a/x",3b,cb,5a,1f));
HXDLIN(  85)			::Array< ::String > _hx_tmp7 = ::thx::_Path::Path_Impl__obj::join(_hx_tmp6,::thx::_Path::Path_Impl__obj::fromString(HX_("/b/c",67,8d,5b,1f)));
HXDLIN(  85)			::String _hx_tmp8 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp7);
HXDLIN(  85)			::utest::Assert_obj::equals(HX_("/b/c",67,8d,5b,1f),_hx_tmp8,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),85,HX_("thx.TestPath",61,74,98,56),HX_("testJoin",5c,b9,97,49)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testJoin,(void))

void TestPath_obj::testJoinString(){
            	HX_STACK_FRAME("thx.TestPath","testJoinString",0x34a418ba,"thx.TestPath.testJoinString","thx/TestPath.hx",89,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE(  89)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  89)		HX_VARI( Int,_g) = this->x;
HXDLIN(  89)		while((_g1 < _g)){
HXLINE(  89)			++_g1;
HXLINE(  90)			::Array< ::String > _hx_tmp = ::thx::_Path::Path_Impl__obj::fromString(HX_("/a/b",25,cb,5a,1f));
HXDLIN(  90)			::Array< ::String > _hx_tmp1 = ::thx::_Path::Path_Impl__obj::join(_hx_tmp,::thx::_Path::Path_Impl__obj::fromString(HX_("c",63,00,00,00)));
HXDLIN(  90)			::String _hx_tmp2 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp1);
HXDLIN(  90)			::utest::Assert_obj::equals(HX_("/a/b/c",b9,c7,ff,c3),_hx_tmp2,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),90,HX_("thx.TestPath",61,74,98,56),HX_("testJoinString",4d,c3,23,4f)));
HXLINE(  91)			::Array< ::String > _hx_tmp3 = ::thx::_Path::Path_Impl__obj::fromString(HX_("../x",a9,e1,8a,1e));
HXDLIN(  91)			::Array< ::String > _hx_tmp4 = ::thx::_Path::Path_Impl__obj::join(_hx_tmp3,::thx::_Path::Path_Impl__obj::fromString(HX_("../d",95,e1,8a,1e)));
HXDLIN(  91)			::String _hx_tmp5 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp4);
HXDLIN(  91)			::utest::Assert_obj::equals(HX_("../d",95,e1,8a,1e),_hx_tmp5,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),91,HX_("thx.TestPath",61,74,98,56),HX_("testJoinString",4d,c3,23,4f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testJoinString,(void))

void TestPath_obj::testToWin32ToNix(){
            	HX_STACK_FRAME("thx.TestPath","testToWin32ToNix",0x71a23ee1,"thx.TestPath.testToWin32ToNix","thx/TestPath.hx",95,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE(  95)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  95)		HX_VARI( Int,_g) = this->x;
HXDLIN(  95)		while((_g1 < _g)){
HXLINE(  95)			++_g1;
HXLINE(  96)			HX_VARI( ::Array< ::String >,path) = ::thx::_Path::Path_Impl__obj::fromString(HX_("/path/to/file.png",90,bb,9b,0e));
HXDLIN(  96)			HX_VARI( ::Array< ::String >,win) = ::thx::_Path::Path_Impl__obj::toWin32(path,null());
HXLINE(  98)			::String _hx_tmp = ::thx::_Path::Path_Impl__obj::toString(win);
HXDLIN(  98)			::utest::Assert_obj::equals(HX_("C:\\path\\to\\file.png",66,cb,9d,33),_hx_tmp,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),98,HX_("thx.TestPath",61,74,98,56),HX_("testToWin32ToNix",34,f4,4f,eb)));
HXLINE(  99)			::Array< ::String > _hx_tmp1 = ::thx::_Path::Path_Impl__obj::toNix(win);
HXDLIN(  99)			::String _hx_tmp2 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp1);
HXDLIN(  99)			::utest::Assert_obj::equals(HX_("/path/to/file.png",90,bb,9b,0e),_hx_tmp2,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),99,HX_("thx.TestPath",61,74,98,56),HX_("testToWin32ToNix",34,f4,4f,eb)));
HXLINE( 101)			path = ::thx::_Path::Path_Impl__obj::fromString(HX_("path/to/file.png",61,2d,d8,03));
HXLINE( 102)			win = ::thx::_Path::Path_Impl__obj::toWin32(path,null());
HXLINE( 103)			::String _hx_tmp3 = ::thx::_Path::Path_Impl__obj::toString(win);
HXDLIN( 103)			::utest::Assert_obj::equals(HX_("path\\to\\file.png",81,e7,ed,a6),_hx_tmp3,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),103,HX_("thx.TestPath",61,74,98,56),HX_("testToWin32ToNix",34,f4,4f,eb)));
HXLINE( 104)			::Array< ::String > _hx_tmp4 = ::thx::_Path::Path_Impl__obj::toNix(win);
HXDLIN( 104)			::String _hx_tmp5 = ::thx::_Path::Path_Impl__obj::toString(_hx_tmp4);
HXDLIN( 104)			::utest::Assert_obj::equals(HX_("path/to/file.png",61,2d,d8,03),_hx_tmp5,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),104,HX_("thx.TestPath",61,74,98,56),HX_("testToWin32ToNix",34,f4,4f,eb)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testToWin32ToNix,(void))

void TestPath_obj::testNormalization(){
            	HX_STACK_FRAME("thx.TestPath","testNormalization",0x229846de,"thx.TestPath.testNormalization","thx/TestPath.hx",108,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE( 108)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 108)		HX_VARI( Int,_g) = this->x;
HXDLIN( 108)		while((_g1 < _g)){
HXLINE( 108)			++_g1;
HXLINE( 109)			::String _hx_tmp = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("a/.././b/../c/.",82,ad,a5,02)));
HXDLIN( 109)			::utest::Assert_obj::equals(HX_("c",63,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),109,HX_("thx.TestPath",61,74,98,56),HX_("testNormalization",2b,3a,e9,20)));
HXLINE( 110)			::String _hx_tmp1 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("a/./b/../c/.",6f,20,08,62)));
HXDLIN( 110)			::utest::Assert_obj::equals(HX_("a/c",f5,c3,49,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),110,HX_("thx.TestPath",61,74,98,56),HX_("testNormalization",2b,3a,e9,20)));
HXLINE( 111)			::String _hx_tmp2 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("/a/.././b/./c/.",21,2c,ab,eb)));
HXDLIN( 111)			::utest::Assert_obj::equals(HX_("/b/c",67,8d,5b,1f),_hx_tmp2,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),111,HX_("thx.TestPath",61,74,98,56),HX_("testNormalization",2b,3a,e9,20)));
HXLINE( 112)			::String _hx_tmp3 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("a/../../../b/../c/.",21,d0,78,84)));
HXDLIN( 112)			::utest::Assert_obj::equals(HX_("../../c",03,15,a6,0b),_hx_tmp3,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),112,HX_("thx.TestPath",61,74,98,56),HX_("testNormalization",2b,3a,e9,20)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testNormalization,(void))

void TestPath_obj::testToString(){
            	HX_STACK_FRAME("thx.TestPath","testToString",0xebe8274b,"thx.TestPath.testToString","thx/TestPath.hx",116,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE( 116)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 116)		HX_VARI( Int,_g) = this->x;
HXDLIN( 116)		while((_g1 < _g)){
HXLINE( 116)			++_g1;
HXLINE( 117)			::String _hx_tmp = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_(".",2e,00,00,00)));
HXDLIN( 117)			::utest::Assert_obj::equals(HX_(".",2e,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),117,HX_("thx.TestPath",61,74,98,56),HX_("testToString",1e,f7,75,ab)));
HXLINE( 118)			::String _hx_tmp1 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("..",40,28,00,00)));
HXDLIN( 118)			::utest::Assert_obj::equals(HX_("..",40,28,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),118,HX_("thx.TestPath",61,74,98,56),HX_("testToString",1e,f7,75,ab)));
HXLINE( 119)			::String _hx_tmp2 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("../",ef,0f,23,00)));
HXDLIN( 119)			::utest::Assert_obj::equals(HX_("..",40,28,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),119,HX_("thx.TestPath",61,74,98,56),HX_("testToString",1e,f7,75,ab)));
HXLINE( 120)			::String _hx_tmp3 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("/../",20,17,34,1f)));
HXDLIN( 120)			::utest::Assert_obj::equals(HX_("/",2f,00,00,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),120,HX_("thx.TestPath",61,74,98,56),HX_("testToString",1e,f7,75,ab)));
HXLINE( 121)			::String _hx_tmp4 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("/",2f,00,00,00)));
HXDLIN( 121)			::utest::Assert_obj::equals(HX_("/",2f,00,00,00),_hx_tmp4,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),121,HX_("thx.TestPath",61,74,98,56),HX_("testToString",1e,f7,75,ab)));
HXLINE( 122)			::String _hx_tmp5 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("/a///a",c4,14,d9,c3)));
HXDLIN( 122)			::utest::Assert_obj::equals(HX_("/a/a",24,cb,5a,1f),_hx_tmp5,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),122,HX_("thx.TestPath",61,74,98,56),HX_("testToString",1e,f7,75,ab)));
HXLINE( 123)			::String _hx_tmp6 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("/a/a/",8b,f4,16,50)));
HXDLIN( 123)			::utest::Assert_obj::equals(HX_("/a/a",24,cb,5a,1f),_hx_tmp6,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),123,HX_("thx.TestPath",61,74,98,56),HX_("testToString",1e,f7,75,ab)));
HXLINE( 124)			::String _hx_tmp7 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("a/..",6e,84,41,40)));
HXDLIN( 124)			::utest::Assert_obj::equals(HX_(".",2e,00,00,00),_hx_tmp7,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),124,HX_("thx.TestPath",61,74,98,56),HX_("testToString",1e,f7,75,ab)));
HXLINE( 125)			::String _hx_tmp8 = ::thx::_Path::Path_Impl__obj::toString(::thx::_Path::Path_Impl__obj::fromString(HX_("a",61,00,00,00)));
HXDLIN( 125)			::utest::Assert_obj::equals(HX_("a",61,00,00,00),_hx_tmp8,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),125,HX_("thx.TestPath",61,74,98,56),HX_("testToString",1e,f7,75,ab)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testToString,(void))

void TestPath_obj::testNormalize(){
            	HX_STACK_FRAME("thx.TestPath","testNormalize",0x0253ac0e,"thx.TestPath.testNormalize","thx/TestPath.hx",129,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE( 129)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 129)		HX_VARI( Int,_g) = this->x;
HXDLIN( 129)		while((_g1 < _g)){
HXLINE( 129)			++_g1;
HXLINE( 130)			HX_VARI( ::Array< ::String >,p) = ::Array_obj< ::String >::__new(3)->init(0,HX_("/",2f,00,00,00))->init(1,HX_("/",2f,00,00,00))->init(2,HX_("a/*>b",20,61,0f,f9));
HXLINE( 131)			Bool _hx_tmp = ::thx::_Path::Path_Impl__obj::isValid(p);
HXDLIN( 131)			::utest::Assert_obj::isFalse(_hx_tmp,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),131,HX_("thx.TestPath",61,74,98,56),HX_("testNormalize",db,b4,db,de)));
HXLINE( 132)			p = ::thx::_Path::Path_Impl__obj::normalize(p);
HXLINE( 133)			Bool _hx_tmp1 = ::thx::_Path::Path_Impl__obj::isValid(p);
HXDLIN( 133)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),133,HX_("thx.TestPath",61,74,98,56),HX_("testNormalize",db,b4,db,de)));
HXLINE( 134)			::String _hx_tmp2 = ::thx::_Path::Path_Impl__obj::toString(p);
HXDLIN( 134)			::utest::Assert_obj::equals(HX_("/a_*>b",61,94,8f,e3),_hx_tmp2,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),134,HX_("thx.TestPath",61,74,98,56),HX_("testNormalize",db,b4,db,de)));
HXLINE( 135)			p = ::thx::_Path::Path_Impl__obj::toWin32(p,null());
HXLINE( 136)			Bool _hx_tmp3 = ::thx::_Path::Path_Impl__obj::isValid(p);
HXDLIN( 136)			::utest::Assert_obj::isFalse(_hx_tmp3,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),136,HX_("thx.TestPath",61,74,98,56),HX_("testNormalize",db,b4,db,de)));
HXLINE( 137)			p = ::thx::_Path::Path_Impl__obj::normalize(p);
HXLINE( 138)			Bool _hx_tmp4 = ::thx::_Path::Path_Impl__obj::isValid(p);
HXDLIN( 138)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),138,HX_("thx.TestPath",61,74,98,56),HX_("testNormalize",db,b4,db,de)));
HXLINE( 139)			::String _hx_tmp5 = ::thx::_Path::Path_Impl__obj::toString(p);
HXDLIN( 139)			::utest::Assert_obj::equals(HX_("C:\\a___b",1f,eb,d7,45),_hx_tmp5,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),139,HX_("thx.TestPath",61,74,98,56),HX_("testNormalize",db,b4,db,de)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testNormalize,(void))

void TestPath_obj::testRoot(){
            	HX_STACK_FRAME("thx.TestPath","testRoot",0xe732c941,"thx.TestPath.testRoot","thx/TestPath.hx",143,0x07286e9c)
            	HX_STACK_THIS(this)
HXLINE( 143)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 143)		HX_VARI( Int,_g) = this->x;
HXDLIN( 143)		while((_g1 < _g)){
HXLINE( 143)			++_g1;
HXLINE( 144)			HX_VARI( ::Array< ::String >,root) = ::thx::_Path::Path_Impl__obj::fromString(HX_("C:\\",e5,09,33,00));
HXLINE( 145)			::utest::Assert_obj::isFalse((root->__get((int)0) == HX_("/",2f,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),145,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 146)			::utest::Assert_obj::isTrue((root->__get((int)0) == HX_("\\",5c,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),146,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 147)			::utest::Assert_obj::isTrue((root->__get((int)1) != HX_("",00,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),147,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 148)			::utest::Assert_obj::isFalse((root->__get((int)1) == HX_("",00,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),148,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 149)			Bool _hx_tmp = ::thx::_Path::Path_Impl__obj::isRoot(root);
HXDLIN( 149)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),149,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 150)			::String _hx_tmp1 = ::thx::_Path::Path_Impl__obj::toString(root);
HXDLIN( 150)			::utest::Assert_obj::equals(HX_("C:\\",e5,09,33,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),150,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 151)			HX_VARI( ::Array< ::String >,path) = root->slice((int)2,null());
HXDLIN( 151)			::String _hx_tmp2 = root->__get((int)0);
HXDLIN( 151)			::Array< ::String > _hx_tmp3 = ::thx::_Path::Path_Impl__obj::resolve(path,false);
HXDLIN( 151)			HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp2)->init(1,HX_("",00,00,00,00))->concat(_hx_tmp3);
HXDLIN( 151)			::String _hx_tmp4 = ::thx::_Path::Path_Impl__obj::toString(parts);
HXDLIN( 151)			::utest::Assert_obj::equals(HX_(".",2e,00,00,00),_hx_tmp4,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),151,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 153)			root = ::thx::_Path::Path_Impl__obj::fromString(HX_("/",2f,00,00,00));
HXLINE( 154)			::utest::Assert_obj::isTrue((root->__get((int)0) == HX_("/",2f,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),154,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 155)			::utest::Assert_obj::isFalse((root->__get((int)0) == HX_("\\",5c,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),155,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 156)			::utest::Assert_obj::isTrue((root->__get((int)1) != HX_("",00,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),156,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 157)			::utest::Assert_obj::isFalse((root->__get((int)1) == HX_("",00,00,00,00)),null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),157,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 158)			Bool _hx_tmp5 = ::thx::_Path::Path_Impl__obj::isRoot(root);
HXDLIN( 158)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),158,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 159)			::String _hx_tmp6 = ::thx::_Path::Path_Impl__obj::toString(root);
HXDLIN( 159)			::utest::Assert_obj::equals(HX_("/",2f,00,00,00),_hx_tmp6,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),159,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
HXLINE( 160)			HX_VARI_NAME( ::Array< ::String >,path1,"path") = root->slice((int)2,null());
HXDLIN( 160)			::String _hx_tmp7 = root->__get((int)0);
HXDLIN( 160)			::Array< ::String > _hx_tmp8 = ::thx::_Path::Path_Impl__obj::resolve(path1,false);
HXDLIN( 160)			HX_VARI_NAME( ::Array< ::String >,parts1,"parts") = ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp7)->init(1,HX_("",00,00,00,00))->concat(_hx_tmp8);
HXDLIN( 160)			::String _hx_tmp9 = ::thx::_Path::Path_Impl__obj::toString(parts1);
HXDLIN( 160)			::utest::Assert_obj::equals(HX_(".",2e,00,00,00),_hx_tmp9,null(),hx::SourceInfo(HX_("TestPath.hx",e7,37,5a,aa),160,HX_("thx.TestPath",61,74,98,56),HX_("testRoot",94,73,e1,4e)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPath_obj,testRoot,(void))


TestPath_obj::TestPath_obj()
{
}

hx::Val TestPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"testUp") ) { return hx::Val( testUp_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testDir") ) { return hx::Val( testDir_dyn()); }
		if (HX_FIELD_EQ(inName,"testExt") ) { return hx::Val( testExt_dyn()); }
		if (HX_FIELD_EQ(inName,"testSep") ) { return hx::Val( testSep_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testBase") ) { return hx::Val( testBase_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin") ) { return hx::Val( testJoin_dyn()); }
		if (HX_FIELD_EQ(inName,"testRoot") ) { return hx::Val( testRoot_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testPathTo") ) { return hx::Val( testPathTo_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testToString") ) { return hx::Val( testToString_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testNormalize") ) { return hx::Val( testNormalize_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testJoinString") ) { return hx::Val( testJoinString_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testToWin32ToNix") ) { return hx::Val( testToWin32ToNix_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testNormalization") ) { return hx::Val( testNormalization_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"testIsRelativeAndIsAbsolute") ) { return hx::Val( testIsRelativeAndIsAbsolute_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestPath_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestPath_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestPath_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestPath_obj_sStaticStorageInfo = 0;
#endif

static ::String TestPath_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testIsRelativeAndIsAbsolute","\x50","\xcf","\xf5","\x97"),
	HX_HCSTRING("testPathTo","\x72","\xe8","\xc6","\x07"),
	HX_HCSTRING("testUp","\x4d","\x4b","\x3a","\xd5"),
	HX_HCSTRING("testDir","\x1b","\xac","\xba","\xbd"),
	HX_HCSTRING("testBase","\x83","\x6d","\x43","\x44"),
	HX_HCSTRING("testExt","\x6f","\x7b","\xbb","\xbd"),
	HX_HCSTRING("testSep","\x6c","\x0a","\xc6","\xbd"),
	HX_HCSTRING("testJoin","\x5c","\xb9","\x97","\x49"),
	HX_HCSTRING("testJoinString","\x4d","\xc3","\x23","\x4f"),
	HX_HCSTRING("testToWin32ToNix","\x34","\xf4","\x4f","\xeb"),
	HX_HCSTRING("testNormalization","\x2b","\x3a","\xe9","\x20"),
	HX_HCSTRING("testToString","\x1e","\xf7","\x75","\xab"),
	HX_HCSTRING("testNormalize","\xdb","\xb4","\xdb","\xde"),
	HX_HCSTRING("testRoot","\x94","\x73","\xe1","\x4e"),
	::String(null()) };

static void TestPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestPath_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestPath_obj::__mClass,"__mClass");
};

#endif

hx::Class TestPath_obj::__mClass;

void TestPath_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestPath","\x61","\x74","\x98","\x56");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
