// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestPath
#define INCLUDED_thx_TestPath

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,TestPath)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestPath_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestPath_obj OBJ_;
		TestPath_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.TestPath")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.TestPath"); }
		static hx::ObjectPtr< TestPath_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestPath_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestPath","\x37","\x27","\x36","\x27"); }

		Int x;
		void testIsRelativeAndIsAbsolute();
		::Dynamic testIsRelativeAndIsAbsolute_dyn();

		void testPathTo();
		::Dynamic testPathTo_dyn();

		void testUp();
		::Dynamic testUp_dyn();

		void testDir();
		::Dynamic testDir_dyn();

		void testBase();
		::Dynamic testBase_dyn();

		void testExt();
		::Dynamic testExt_dyn();

		void testSep();
		::Dynamic testSep_dyn();

		void testJoin();
		::Dynamic testJoin_dyn();

		void testJoinString();
		::Dynamic testJoinString_dyn();

		void testToWin32ToNix();
		::Dynamic testToWin32ToNix_dyn();

		void testNormalization();
		::Dynamic testNormalization_dyn();

		void testToString();
		::Dynamic testToString_dyn();

		void testNormalize();
		::Dynamic testNormalize_dyn();

		void testRoot();
		::Dynamic testRoot_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestPath */ 
