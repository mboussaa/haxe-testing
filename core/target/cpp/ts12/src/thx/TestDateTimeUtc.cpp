// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_Int64s
#include <thx/Int64s.h>
#endif
#ifndef INCLUDED_thx_TestDateTimeUtc
#include <thx/TestDateTimeUtc.h>
#endif
#ifndef INCLUDED_thx_TimePeriod
#include <thx/TimePeriod.h>
#endif
#ifndef INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_
#include <thx/_DateTimeUtc/DateTimeUtc_Impl_.h>
#endif
#ifndef INCLUDED_thx__Time_Time_Impl_
#include <thx/_Time/Time_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestDateTimeUtc_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","new",0x3f373ebf,"thx.TestDateTimeUtc.new","thx/TestDateTimeUtc.hx",9,0xec1431d2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  11)		this->tomorrow = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2015,(int)7,(int)27,(int)21,(int)40,(int)30,(int)123);
HXLINE(  10)		this->date = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2015,(int)7,(int)26,(int)21,(int)40,(int)30,(int)0);
HXLINE(  15)		this->x = i;
            	}

Dynamic TestDateTimeUtc_obj::__CreateEmpty() { return new TestDateTimeUtc_obj; }

hx::ObjectPtr< TestDateTimeUtc_obj > TestDateTimeUtc_obj::__new(Int i)
{
	hx::ObjectPtr< TestDateTimeUtc_obj > _hx_result = new TestDateTimeUtc_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestDateTimeUtc_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestDateTimeUtc_obj > _hx_result = new TestDateTimeUtc_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestDateTimeUtc_obj::testCreate(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testCreate",0x2f42586f,"thx.TestDateTimeUtc.testCreate","thx/TestDateTimeUtc.hx",19,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE(  19)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  19)		HX_VARI( Int,_g) = this->x;
HXDLIN(  19)		while((_g1 < _g)){
HXLINE(  19)			++_g1;
HXLINE(  20)			Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this->date,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN(  20)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this->date,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN(  20)			::utest::Assert_obj::equals((int)2015,_hx_tmp,((HX_("expected 2015 but got ",a9,80,6a,5b) + _hx_tmp1) + HX_(" for year",54,92,de,81)),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),20,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCreate",ee,ac,03,95)));
HXLINE(  21)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this->date,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN(  21)			Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this->date,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN(  21)			::utest::Assert_obj::equals((int)7,_hx_tmp2,((HX_("expected 7 but got ",44,38,79,48) + _hx_tmp3) + HX_(" for month",c9,82,b8,3e)),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),21,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCreate",ee,ac,03,95)));
HXLINE(  22)			Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this->date,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN(  22)			Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(this->date,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN(  22)			::utest::Assert_obj::equals((int)26,_hx_tmp4,((HX_("expected 26 but got ",c7,0c,7a,5b) + _hx_tmp5) + HX_(" for day",a5,cd,99,d2)),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),22,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCreate",ee,ac,03,95)));
HXLINE(  24)			Int _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this->date);
HXDLIN(  24)			Int _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(this->date);
HXDLIN(  24)			::utest::Assert_obj::equals((int)21,_hx_tmp6,((HX_("expected 21 but got ",6c,b5,05,9a) + _hx_tmp7) + HX_(" for hour",bb,99,a9,76)),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),24,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCreate",ee,ac,03,95)));
HXLINE(  25)			Int _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(this->date);
HXDLIN(  25)			Int _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(this->date);
HXDLIN(  25)			::utest::Assert_obj::equals((int)40,_hx_tmp8,((HX_("expected 40 but got ",0f,14,78,db) + _hx_tmp9) + HX_(" for minute",2b,3f,53,2e)),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),25,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCreate",ee,ac,03,95)));
HXLINE(  26)			Int _hx_tmp10 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(this->date);
HXDLIN(  26)			Int _hx_tmp11 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(this->date);
HXDLIN(  26)			::utest::Assert_obj::equals((int)30,_hx_tmp10,((HX_("expected 30 but got ",ce,a8,99,5a) + _hx_tmp11) + HX_(" for second",cb,2b,93,3f)),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),26,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCreate",ee,ac,03,95)));
HXLINE(  28)			Int _hx_tmp12 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(this->tomorrow);
HXDLIN(  28)			Int _hx_tmp13 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_millisecond(this->tomorrow);
HXDLIN(  28)			::utest::Assert_obj::equals((int)123,_hx_tmp12,((HX_("expected 123 but got ",e9,c0,72,e7) + _hx_tmp13) + HX_(" for millisecond",8a,53,08,42)),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),28,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCreate",ee,ac,03,95)));
HXLINE(  29)			Int _hx_tmp14 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_microsecond(this->tomorrow);
HXDLIN(  29)			Int _hx_tmp15 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_microsecond(this->tomorrow);
HXDLIN(  29)			::utest::Assert_obj::equals((int)123000,_hx_tmp14,((HX_("expected 123 but got ",e9,c0,72,e7) + _hx_tmp15) + HX_(" for microsecond",c1,17,3b,28)),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),29,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCreate",ee,ac,03,95)));
HXLINE(  30)			Int _hx_tmp16 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_tickInSecond(this->tomorrow);
HXDLIN(  30)			Int _hx_tmp17 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_tickInSecond(this->tomorrow);
HXDLIN(  30)			::utest::Assert_obj::equals((int)1230000,_hx_tmp16,((HX_("expected 123 but got ",e9,c0,72,e7) + _hx_tmp17) + HX_(" for tickInSecond",4d,75,26,b2)),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),30,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCreate",ee,ac,03,95)));
HXLINE(  32)			Int _hx_tmp18 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(this->date);
HXDLIN(  32)			::utest::Assert_obj::equals((int)0,_hx_tmp18,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),32,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCreate",ee,ac,03,95)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testCreate,(void))

void TestDateTimeUtc_obj::testToString(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testToString",0x535744df,"thx.TestDateTimeUtc.testToString","thx/TestDateTimeUtc.hx",36,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE(  36)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  36)		HX_VARI( Int,_g) = this->x;
HXDLIN(  36)		while((_g1 < _g)){
HXLINE(  36)			++_g1;
HXLINE(  37)			::String _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(this->date);
HXDLIN(  37)			::utest::Assert_obj::equals(HX_("2015-07-26T21:40:30Z",45,c6,1f,e1),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),37,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testToString",1e,f7,75,ab)));
HXLINE(  38)			 ::cpp::Int64Struct _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(( ::cpp::Int64Struct((int)0)));
HXDLIN(  38)			::String _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp1);
HXDLIN(  38)			::utest::Assert_obj::equals(HX_("1-01-01T00:00:00Z",37,ee,a7,4d),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),38,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testToString",1e,f7,75,ab)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testToString,(void))

void TestDateTimeUtc_obj::testOverflowing(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testOverflowing",0xa1920c8d,"thx.TestDateTimeUtc.testOverflowing","thx/TestDateTimeUtc.hx",42,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE(  42)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  42)		HX_VARI( Int,_g) = this->x;
HXDLIN(  42)		while((_g1 < _g)){
HXLINE(  42)			++_g1;
HXLINE(  43)			 ::cpp::Int64Struct _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)12,(int)1,null(),null(),null(),null());
HXDLIN(  43)			::String _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp);
HXDLIN(  43)			::utest::Assert_obj::equals(HX_("2014-12-01T00:00:00Z",47,03,69,a5),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),43,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
HXLINE(  45)			 ::cpp::Int64Struct _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)16,(int)1,null(),null(),null(),null());
HXDLIN(  45)			::String _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp2);
HXDLIN(  45)			::utest::Assert_obj::equals(HX_("2015-04-01T00:00:00Z",45,dc,bb,18),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),45,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
HXLINE(  46)			 ::cpp::Int64Struct _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)-2,(int)1,null(),null(),null(),null());
HXDLIN(  46)			::String _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp4);
HXDLIN(  46)			::utest::Assert_obj::equals(HX_("2013-10-01T00:00:00Z",88,8a,1a,9d),_hx_tmp5,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),46,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
HXLINE(  49)			 ::cpp::Int64Struct _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)2,(int)32,null(),null(),null(),null());
HXDLIN(  49)			::String _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp6);
HXDLIN(  49)			::utest::Assert_obj::equals(HX_("2014-03-04T00:00:00Z",a8,f8,b5,55),_hx_tmp7,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),49,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
HXLINE(  50)			 ::cpp::Int64Struct _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)1,(int)0,null(),null(),null(),null());
HXDLIN(  50)			::String _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp8);
HXDLIN(  50)			::utest::Assert_obj::equals(HX_("2013-12-31T00:00:00Z",23,7a,b3,e7),_hx_tmp9,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),50,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
HXLINE(  53)			 ::cpp::Int64Struct _hx_tmp10 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)2,(int)1,(int)26,null(),null(),null());
HXDLIN(  53)			::String _hx_tmp11 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp10);
HXDLIN(  53)			::utest::Assert_obj::equals(HX_("2014-02-02T02:00:00Z",05,b3,b0,03),_hx_tmp11,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),53,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
HXLINE(  54)			 ::cpp::Int64Struct _hx_tmp12 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)1,(int)1,(int)-1,null(),null(),null());
HXDLIN(  54)			::String _hx_tmp13 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp12);
HXDLIN(  54)			::utest::Assert_obj::equals(HX_("2013-12-31T23:00:00Z",82,a2,2d,39),_hx_tmp13,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),54,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
HXLINE(  57)			 ::cpp::Int64Struct _hx_tmp14 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)2,(int)1,(int)0,(int)65,null(),null());
HXDLIN(  57)			::String _hx_tmp15 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp14);
HXDLIN(  57)			::utest::Assert_obj::equals(HX_("2014-02-01T01:05:00Z",2a,bc,a0,2a),_hx_tmp15,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),57,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
HXLINE(  58)			 ::cpp::Int64Struct _hx_tmp16 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)1,(int)1,(int)0,(int)-1,null(),null());
HXDLIN(  58)			::String _hx_tmp17 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp16);
HXDLIN(  58)			::utest::Assert_obj::equals(HX_("2013-12-31T23:59:00Z",e6,a8,91,67),_hx_tmp17,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),58,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
HXLINE(  61)			 ::cpp::Int64Struct _hx_tmp18 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)2,(int)1,(int)0,(int)0,(int)65,null());
HXDLIN(  61)			::String _hx_tmp19 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp18);
HXDLIN(  61)			::utest::Assert_obj::equals(HX_("2014-02-01T00:01:05Z",62,fc,d3,a3),_hx_tmp19,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),61,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
HXLINE(  62)			 ::cpp::Int64Struct _hx_tmp20 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2014,(int)1,(int)1,(int)0,(int)0,(int)-1,null());
HXDLIN(  62)			::String _hx_tmp21 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(_hx_tmp20);
HXDLIN(  62)			::utest::Assert_obj::equals(HX_("2013-12-31T23:59:59Z",02,7c,95,67),_hx_tmp21,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),62,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testOverflowing",ae,0b,d3,81)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testOverflowing,(void))

void TestDateTimeUtc_obj::testEquals(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testEquals",0x7325dfb2,"thx.TestDateTimeUtc.testEquals","thx/TestDateTimeUtc.hx",66,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE(  66)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  66)		HX_VARI( Int,_g) = this->x;
HXDLIN(  66)		while((_g1 < _g)){
HXLINE(  66)			++_g1;
HXLINE(  67)			Bool _hx_tmp = _hx_int64_eq(this->date,this->date);
HXDLIN(  67)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),67,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testEquals",31,34,e7,d8)));
HXLINE(  68)			Bool _hx_tmp1 = _hx_int64_neq(this->date,this->tomorrow);
HXDLIN(  68)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),68,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testEquals",31,34,e7,d8)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testEquals,(void))

void TestDateTimeUtc_obj::testCompare(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testCompare",0x9cc96bd2,"thx.TestDateTimeUtc.testCompare","thx/TestDateTimeUtc.hx",72,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE(  72)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  72)		HX_VARI( Int,_g) = this->x;
HXDLIN(  72)		while((_g1 < _g)){
HXLINE(  72)			++_g1;
HXLINE(  73)			Int _hx_tmp = _hx_int64_compare(this->date,this->date);
HXDLIN(  73)			::utest::Assert_obj::isFalse((_hx_tmp > (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),73,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  74)			Int _hx_tmp1 = _hx_int64_compare(this->date,this->date);
HXDLIN(  74)			::utest::Assert_obj::isTrue((_hx_tmp1 >= (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),74,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  75)			Int _hx_tmp2 = _hx_int64_compare(this->date,this->date);
HXDLIN(  75)			::utest::Assert_obj::isFalse((_hx_tmp2 < (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),75,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  76)			Int _hx_tmp3 = _hx_int64_compare(this->date,this->date);
HXDLIN(  76)			::utest::Assert_obj::isTrue((_hx_tmp3 <= (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),76,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  78)			Int _hx_tmp4 = _hx_int64_compare(this->date,this->tomorrow);
HXDLIN(  78)			::utest::Assert_obj::isFalse((_hx_tmp4 > (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),78,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  79)			Int _hx_tmp5 = _hx_int64_compare(this->date,this->tomorrow);
HXDLIN(  79)			::utest::Assert_obj::isFalse((_hx_tmp5 >= (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),79,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  80)			Int _hx_tmp6 = _hx_int64_compare(this->date,this->tomorrow);
HXDLIN(  80)			::utest::Assert_obj::isTrue((_hx_tmp6 < (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),80,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  81)			Int _hx_tmp7 = _hx_int64_compare(this->date,this->tomorrow);
HXDLIN(  81)			::utest::Assert_obj::isTrue((_hx_tmp7 <= (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),81,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  83)			Int _hx_tmp8 = _hx_int64_compare(this->tomorrow,this->date);
HXDLIN(  83)			::utest::Assert_obj::isTrue((_hx_tmp8 > (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),83,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  84)			Int _hx_tmp9 = _hx_int64_compare(this->tomorrow,this->date);
HXDLIN(  84)			::utest::Assert_obj::isTrue((_hx_tmp9 >= (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),84,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  85)			Int _hx_tmp10 = _hx_int64_compare(this->tomorrow,this->date);
HXDLIN(  85)			::utest::Assert_obj::isFalse((_hx_tmp10 < (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),85,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
HXLINE(  86)			Int _hx_tmp11 = _hx_int64_compare(this->tomorrow,this->date);
HXDLIN(  86)			::utest::Assert_obj::isFalse((_hx_tmp11 <= (int)0),null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),86,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testCompare",73,06,32,40)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testCompare,(void))

void TestDateTimeUtc_obj::testFromToDate(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testFromToDate",0xb874ed46,"thx.TestDateTimeUtc.testFromToDate","thx/TestDateTimeUtc.hx",90,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE(  90)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  90)		HX_VARI( Int,_g) = this->x;
HXDLIN(  90)		while((_g1 < _g)){
HXLINE(  90)			++_g1;
HXLINE(  91)			HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::unixEpochTicks;
HXDLIN(  91)			HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_sub(this->date,b);
HXDLIN(  91)			HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  91)			Bool _hx_tmp = _hx_int64_is_zero(a);
HXDLIN(  91)			if (_hx_tmp) {
HXLINE(  91)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN(  91)			 ::cpp::Int64Struct _hx_tmp1 = _hx_int64_div(a,b1);
HXDLIN(  91)			Float _hx_tmp2 = ::thx::Int64s_obj::toFloat(_hx_tmp1);
HXDLIN(  91)			HX_VARI(  ::Date,d) = ::Date_obj::fromTime(_hx_tmp2);
HXLINE(  92)			HX_VARI(  ::cpp::Int64Struct,that) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromDate(d);
HXDLIN(  92)			Bool _hx_tmp3 = _hx_int64_eq(this->date,that);
HXDLIN(  92)			::String _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(this->date);
HXDLIN(  92)			::String _hx_tmp5 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp4) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  92)			::String _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromDate(d));
HXDLIN(  92)			::utest::Assert_obj::isTrue(_hx_tmp3,(_hx_tmp5 + _hx_tmp6),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),92,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testFromToDate",45,ed,53,5b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testFromToDate,(void))

void TestDateTimeUtc_obj::testFromToTime(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testFromToTime",0xc30e6325,"thx.TestDateTimeUtc.testFromToTime","thx/TestDateTimeUtc.hx",96,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE(  96)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  96)		HX_VARI( Int,_g) = this->x;
HXDLIN(  96)		while((_g1 < _g)){
HXLINE(  96)			++_g1;
HXLINE(  97)			HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::unixEpochTicks;
HXDLIN(  97)			HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_sub(this->date,b);
HXDLIN(  97)			HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerMillisecondI64;
HXDLIN(  97)			Bool _hx_tmp = _hx_int64_is_zero(a);
HXDLIN(  97)			if (_hx_tmp) {
HXLINE(  97)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN(  97)			 ::cpp::Int64Struct _hx_tmp1 = _hx_int64_div(a,b1);
HXDLIN(  97)			HX_VARI( Float,d) = ::thx::Int64s_obj::toFloat(_hx_tmp1);
HXDLIN(  97)			HX_VARI(  ::cpp::Int64Struct,date2) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromTime(d);
HXLINE(  99)			Bool _hx_tmp2 = _hx_int64_eq(this->date,date2);
HXDLIN(  99)			::String _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(this->date);
HXDLIN(  99)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  99)			::String _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(date2);
HXDLIN(  99)			::utest::Assert_obj::isTrue(_hx_tmp2,(_hx_tmp4 + _hx_tmp5),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),99,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testFromToTime",24,63,ed,65)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testFromToTime,(void))

void TestDateTimeUtc_obj::testFromToString(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testFromToString",0x6027b5e9,"thx.TestDateTimeUtc.testFromToString","thx/TestDateTimeUtc.hx",103,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE( 103)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 103)		HX_VARI( Int,_g) = this->x;
HXDLIN( 103)		while((_g1 < _g)){
HXLINE( 103)			++_g1;
HXLINE( 104)			HX_VARI( ::String,d) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(this->date);
HXLINE( 105)			HX_VARI(  ::cpp::Int64Struct,that) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(d);
HXDLIN( 105)			Bool _hx_tmp = _hx_int64_eq(this->date,that);
HXDLIN( 105)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),105,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testFromToString",a8,f3,c5,b8)));
HXLINE( 107)			::String _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("0-06-07",11,2e,25,91)));
HXDLIN( 107)			::utest::Assert_obj::equals(HX_("-1-07-27T00:00:00Z",68,3e,fe,a1),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),107,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testFromToString",a8,f3,c5,b8)));
HXLINE( 108)			::String _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("-1-06-07",45,b4,98,c8)));
HXDLIN( 108)			::utest::Assert_obj::equals(HX_("-1-06-07T00:00:00Z",cb,0f,d2,5b),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),108,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testFromToString",a8,f3,c5,b8)));
HXLINE( 109)			::String _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("1-06-07",d2,a4,ba,ba)));
HXDLIN( 109)			::utest::Assert_obj::equals(HX_("1-06-07T00:00:00Z",98,12,41,20),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),109,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testFromToString",a8,f3,c5,b8)));
HXLINE( 110)			::String _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("-2014-01-01",0e,c4,bc,e9)));
HXDLIN( 110)			::utest::Assert_obj::equals(HX_("-2014-01-01T00:00:00Z",d4,14,e1,08),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),110,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testFromToString",a8,f3,c5,b8)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testFromToString,(void))

void TestDateTimeUtc_obj::testAdd(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testAdd",0x70fbeace,"thx.TestDateTimeUtc.testAdd","thx/TestDateTimeUtc.hx",114,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE( 114)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 114)		HX_VARI( Int,_g) = this->x;
HXDLIN( 114)		while((_g1 < _g)){
HXLINE( 114)			++_g1;
HXLINE( 115)			 ::cpp::Int64Struct _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addMonths(this->date,(int)24);
HXDLIN( 115)			HX_VARI_NAME(  ::cpp::Int64Struct,this1,"this") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addMonths(_hx_tmp,(int)9);
HXDLIN( 115)			HX_VARI_NAME(  ::cpp::Int64Struct,this2,"this") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this1,(int)10,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerDay);
HXDLIN( 115)			HX_VARI_NAME(  ::cpp::Int64Struct,this3,"this") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this2,(int)7,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerHour);
HXDLIN( 115)			HX_VARI_NAME(  ::cpp::Int64Struct,this4,"this") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this3,(int)10,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerMinute);
HXDLIN( 115)			HX_VARI_NAME(  ::cpp::Int64Struct,this5,"this") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this4,(int)7,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerSecond);
HXDLIN( 115)			HX_VARI(  ::cpp::Int64Struct,d) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this5,(int)7,(int)1);
HXLINE( 124)			HX_VARI(  ::cpp::Int64Struct,that) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2018-05-07 04:50:37.007",4f,a4,e9,c1));
HXDLIN( 124)			Bool _hx_tmp1 = _hx_int64_eq(d,that);
HXDLIN( 124)			::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + HX_("2018-05-07 04:50:37.007",4f,a4,e9,c1)) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 124)			::String _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(d);
HXDLIN( 124)			::utest::Assert_obj::isTrue(_hx_tmp1,(_hx_tmp2 + _hx_tmp3),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),124,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testAdd",ef,60,b8,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testAdd,(void))

void TestDateTimeUtc_obj::testNow(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testNow",0x7105d1c3,"thx.TestDateTimeUtc.testNow","thx/TestDateTimeUtc.hx",128,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE( 128)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 128)		HX_VARI( Int,_g) = this->x;
HXDLIN( 128)		while((_g1 < _g)){
HXLINE( 128)			++_g1;
HXLINE( 129)			HX_VARI(  ::cpp::Int64Struct,ref) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2016-06-06T10:37:41Z",d1,04,37,b3));
HXDLIN( 129)			HX_VARI(  ::cpp::Int64Struct,date) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::now();
HXLINE( 131)			 ::cpp::Int64Struct _hx_tmp = ::thx::_Time::Time_Impl__obj::create((int)0,(int)10,(int)0,(int)0);
HXDLIN( 131)			Bool _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::nearEqualsTo(date,ref,_hx_tmp);
HXDLIN( 131)			::String _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(ref);
HXDLIN( 131)			::String _hx_tmp3 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp2) + HX_(" but got ",b3,1a,6e,57));
HXDLIN( 131)			::String _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(date);
HXDLIN( 131)			::utest::Assert_obj::isTrue(_hx_tmp1,(_hx_tmp3 + _hx_tmp4),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),131,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testNow",e4,47,c2,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testNow,(void))

void TestDateTimeUtc_obj::testSnapNext(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testSnapNext",0x24256890,"thx.TestDateTimeUtc.testSnapNext","thx/TestDateTimeUtc.hx",135,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE( 135)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 135)		HX_VARI( Int,_g) = this->x;
HXDLIN( 135)		while((_g1 < _g)){
HXLINE( 135)			++_g1;
HXLINE( 136)			 ::cpp::Int64Struct _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:07:00",17,45,3d,9c));
HXDLIN( 136)			this->assertSnapNext(_hx_tmp,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:06:10",57,0f,94,9b)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),136,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 137)			 ::cpp::Int64Struct _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:06:00",78,0e,94,9b));
HXDLIN( 137)			this->assertSnapNext(_hx_tmp1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:05:50",34,dc,ea,9a)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),137,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 138)			 ::cpp::Int64Struct _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 11:00:00",7f,3d,32,c1));
HXDLIN( 138)			this->assertSnapNext(_hx_tmp2,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:10:10",1e,5c,03,2b)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),138,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 139)			 ::cpp::Int64Struct _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:00:00",be,c6,9c,97));
HXDLIN( 139)			this->assertSnapNext(_hx_tmp3,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 09:50:10",cc,68,ac,b5)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),139,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 140)			 ::cpp::Int64Struct _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-02 00:00:00",7e,cc,b4,1e));
HXDLIN( 140)			this->assertSnapNext(_hx_tmp4,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:00:00",be,c6,9c,97)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),140,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 141)			 ::cpp::Int64Struct _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 00:00:00",9f,54,6a,5e));
HXDLIN( 141)			this->assertSnapNext(_hx_tmp5,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2013-12-31 20:00:00",61,22,a8,94)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),141,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 142)			 ::cpp::Int64Struct _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-21 00:00:00",01,fc,94,68));
HXDLIN( 142)			this->assertSnapNext(_hx_tmp6,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-17 11:00:00",da,48,3d,cc)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),142,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 143)			 ::cpp::Int64Struct _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-21 00:00:00",01,fc,94,68));
HXDLIN( 143)			this->assertSnapNext(_hx_tmp7,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-18 00:00:00",d9,d7,bf,29)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),143,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 144)			 ::cpp::Int64Struct _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2015-01-01 00:00:00",be,7d,9a,25));
HXDLIN( 144)			this->assertSnapNext(_hx_tmp8,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-12 00:00:00",9f,08,01,a8)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),144,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 145)			 ::cpp::Int64Struct _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2015-01-01 00:00:00",be,7d,9a,25));
HXDLIN( 145)			this->assertSnapNext(_hx_tmp9,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-18 00:00:00",d9,d7,bf,29)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),145,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 146)			 ::cpp::Int64Struct _hx_tmp10 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2015-01-01 00:00:00",be,7d,9a,25));
HXDLIN( 146)			this->assertSnapNext(_hx_tmp10,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-05-12 00:00:00",c3,2d,95,b6)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),146,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 147)			 ::cpp::Int64Struct _hx_tmp11 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2015-01-01 00:00:00",be,7d,9a,25));
HXDLIN( 147)			this->assertSnapNext(_hx_tmp11,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-18 00:00:00",d9,d7,bf,29)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),147,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapNext",cf,1a,44,7c)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testSnapNext,(void))

void TestDateTimeUtc_obj::testSnapPrev(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testSnapPrev",0x2581a290,"thx.TestDateTimeUtc.testSnapPrev","thx/TestDateTimeUtc.hx",151,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE( 151)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 151)		HX_VARI( Int,_g) = this->x;
HXDLIN( 151)		while((_g1 < _g)){
HXLINE( 151)			++_g1;
HXLINE( 152)			 ::cpp::Int64Struct _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:06:00",78,0e,94,9b));
HXDLIN( 152)			this->assertSnapPrev(_hx_tmp,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:06:10",57,0f,94,9b)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),152,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 153)			 ::cpp::Int64Struct _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:05:00",d9,d7,ea,9a));
HXDLIN( 153)			this->assertSnapPrev(_hx_tmp1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:05:50",34,dc,ea,9a)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),153,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 154)			 ::cpp::Int64Struct _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:00:00",be,c6,9c,97));
HXDLIN( 154)			this->assertSnapPrev(_hx_tmp2,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:10:10",1e,5c,03,2b)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),154,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 155)			 ::cpp::Int64Struct _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 09:00:00",68,81,ab,d4));
HXDLIN( 155)			this->assertSnapPrev(_hx_tmp3,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 09:50:10",cc,68,ac,b5)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),155,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 156)			 ::cpp::Int64Struct _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 00:00:00",9f,54,6a,5e));
HXDLIN( 156)			this->assertSnapPrev(_hx_tmp4,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:00:00",be,c6,9c,97)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),156,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 157)			 ::cpp::Int64Struct _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2013-12-31 00:00:00",23,3e,43,22));
HXDLIN( 157)			this->assertSnapPrev(_hx_tmp5,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2013-12-31 20:00:00",61,22,a8,94)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),157,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 158)			 ::cpp::Int64Struct _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-14 00:00:00",5d,f8,95,28));
HXDLIN( 158)			this->assertSnapPrev(_hx_tmp6,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-17 11:00:00",da,48,3d,cc)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),158,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 159)			 ::cpp::Int64Struct _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-14 00:00:00",5d,f8,95,28));
HXDLIN( 159)			this->assertSnapPrev(_hx_tmp7,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-18 00:00:00",d9,d7,bf,29)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),159,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 160)			 ::cpp::Int64Struct _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-01 00:00:00",7f,25,d8,66));
HXDLIN( 160)			this->assertSnapPrev(_hx_tmp8,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-12 00:00:00",9f,08,01,a8)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),160,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 161)			 ::cpp::Int64Struct _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-01 00:00:00",7f,25,d8,66));
HXDLIN( 161)			this->assertSnapPrev(_hx_tmp9,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-18 00:00:00",d9,d7,bf,29)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),161,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 162)			 ::cpp::Int64Struct _hx_tmp10 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 00:00:00",9f,54,6a,5e));
HXDLIN( 162)			this->assertSnapPrev(_hx_tmp10,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-05-12 00:00:00",c3,2d,95,b6)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),162,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 163)			 ::cpp::Int64Struct _hx_tmp11 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 00:00:00",9f,54,6a,5e));
HXDLIN( 163)			this->assertSnapPrev(_hx_tmp11,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-18 00:00:00",d9,d7,bf,29)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),163,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapPrev",cf,54,a0,7d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testSnapPrev,(void))

void TestDateTimeUtc_obj::testSnapTo(){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","testSnapTo",0x44c437d8,"thx.TestDateTimeUtc.testSnapTo","thx/TestDateTimeUtc.hx",167,0xec1431d2)
            	HX_STACK_THIS(this)
HXLINE( 167)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 167)		HX_VARI( Int,_g) = this->x;
HXDLIN( 167)		while((_g1 < _g)){
HXLINE( 167)			++_g1;
HXLINE( 168)			 ::cpp::Int64Struct _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:06:00",78,0e,94,9b));
HXDLIN( 168)			this->assertSnapTo(_hx_tmp,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:06:10",57,0f,94,9b)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),168,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 169)			 ::cpp::Int64Struct _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:06:00",78,0e,94,9b));
HXDLIN( 169)			this->assertSnapTo(_hx_tmp1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:05:50",34,dc,ea,9a)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),169,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 170)			 ::cpp::Int64Struct _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:00:00",be,c6,9c,97));
HXDLIN( 170)			this->assertSnapTo(_hx_tmp2,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:10:10",1e,5c,03,2b)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),170,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 171)			 ::cpp::Int64Struct _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:00:00",be,c6,9c,97));
HXDLIN( 171)			this->assertSnapTo(_hx_tmp3,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 09:50:10",cc,68,ac,b5)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),171,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 172)			 ::cpp::Int64Struct _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 00:00:00",9f,54,6a,5e));
HXDLIN( 172)			this->assertSnapTo(_hx_tmp4,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 10:00:00",be,c6,9c,97)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),172,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 173)			 ::cpp::Int64Struct _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 00:00:00",9f,54,6a,5e));
HXDLIN( 173)			this->assertSnapTo(_hx_tmp5,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2013-12-31 20:00:00",61,22,a8,94)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),173,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 174)			 ::cpp::Int64Struct _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-14 00:00:00",5d,f8,95,28));
HXDLIN( 174)			this->assertSnapTo(_hx_tmp6,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-17 11:00:00",da,48,3d,cc)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),174,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 175)			 ::cpp::Int64Struct _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-21 00:00:00",01,fc,94,68));
HXDLIN( 175)			this->assertSnapTo(_hx_tmp7,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-18 00:00:00",d9,d7,bf,29)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),175,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 176)			 ::cpp::Int64Struct _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-01 00:00:00",7f,25,d8,66));
HXDLIN( 176)			this->assertSnapTo(_hx_tmp8,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-12 00:00:00",9f,08,01,a8)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),176,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 177)			 ::cpp::Int64Struct _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2015-01-01 00:00:00",be,7d,9a,25));
HXDLIN( 177)			this->assertSnapTo(_hx_tmp9,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-18 00:00:00",d9,d7,bf,29)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),177,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 178)			 ::cpp::Int64Struct _hx_tmp10 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-01-01 00:00:00",9f,54,6a,5e));
HXDLIN( 178)			this->assertSnapTo(_hx_tmp10,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-05-12 00:00:00",c3,2d,95,b6)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),178,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 179)			 ::cpp::Int64Struct _hx_tmp11 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2015-01-01 00:00:00",be,7d,9a,25));
HXDLIN( 179)			this->assertSnapTo(_hx_tmp11,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromString(HX_("2014-12-18 00:00:00",d9,d7,bf,29)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTimeUtc.hx",e7,f7,64,de),179,HX_("thx.TestDateTimeUtc",4d,73,6b,a4),HX_("testSnapTo",57,8c,85,aa)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTimeUtc_obj,testSnapTo,(void))

void TestDateTimeUtc_obj::assertSnapTo( ::cpp::Int64Struct expected, ::cpp::Int64Struct date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","assertSnapTo",0x265ca78c,"thx.TestDateTimeUtc.assertSnapTo","thx/TestDateTimeUtc.hx",182,0xec1431d2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 183)		HX_VARI(  ::cpp::Int64Struct,t) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::snapTo(date,period);
HXLINE( 185)		Bool _hx_tmp = _hx_int64_eq(expected,t);
HXLINE( 186)		::String _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(date);
HXDLIN( 186)		::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" to snap to ",94,e4,0d,46));
HXDLIN( 186)		::String _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(expected);
HXDLIN( 186)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" for ",17,f1,92,b0));
HXDLIN( 186)		::String _hx_tmp5 = ::Std_obj::string(period);
HXDLIN( 186)		::String _hx_tmp6 = ((_hx_tmp4 + _hx_tmp5) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 186)		::String _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(t);
HXLINE( 184)		::utest::Assert_obj::isTrue(_hx_tmp,(_hx_tmp6 + _hx_tmp7),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestDateTimeUtc_obj,assertSnapTo,(void))

void TestDateTimeUtc_obj::assertSnapPrev( ::cpp::Int64Struct expected, ::cpp::Int64Struct date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","assertSnapPrev",0xf1dc6744,"thx.TestDateTimeUtc.assertSnapPrev","thx/TestDateTimeUtc.hx",191,0xec1431d2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 192)		HX_VARI(  ::cpp::Int64Struct,t) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::snapPrev(date,period);
HXLINE( 194)		Bool _hx_tmp = _hx_int64_eq(expected,t);
HXLINE( 195)		::String _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(date);
HXDLIN( 195)		::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" to snap before ",90,ec,cb,0f));
HXDLIN( 195)		::String _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(expected);
HXDLIN( 195)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" for ",17,f1,92,b0));
HXDLIN( 195)		::String _hx_tmp5 = ::Std_obj::string(period);
HXDLIN( 195)		::String _hx_tmp6 = ((_hx_tmp4 + _hx_tmp5) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 195)		::String _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(t);
HXLINE( 193)		::utest::Assert_obj::isTrue(_hx_tmp,(_hx_tmp6 + _hx_tmp7),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestDateTimeUtc_obj,assertSnapPrev,(void))

void TestDateTimeUtc_obj::assertSnapNext( ::cpp::Int64Struct expected, ::cpp::Int64Struct date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestDateTimeUtc","assertSnapNext",0xf0802d44,"thx.TestDateTimeUtc.assertSnapNext","thx/TestDateTimeUtc.hx",200,0xec1431d2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 201)		HX_VARI(  ::cpp::Int64Struct,t) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::snapNext(date,period);
HXLINE( 203)		Bool _hx_tmp = _hx_int64_eq(expected,t);
HXLINE( 204)		::String _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(date);
HXDLIN( 204)		::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" to snap after ",95,0f,fc,c6));
HXDLIN( 204)		::String _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(expected);
HXDLIN( 204)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" for ",17,f1,92,b0));
HXDLIN( 204)		::String _hx_tmp5 = ::Std_obj::string(period);
HXDLIN( 204)		::String _hx_tmp6 = ((_hx_tmp4 + _hx_tmp5) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 204)		::String _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::toString(t);
HXLINE( 202)		::utest::Assert_obj::isTrue(_hx_tmp,(_hx_tmp6 + _hx_tmp7),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestDateTimeUtc_obj,assertSnapNext,(void))


TestDateTimeUtc_obj::TestDateTimeUtc_obj()
{
}

void TestDateTimeUtc_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestDateTimeUtc);
	HX_MARK_MEMBER_NAME(date,"date");
	HX_MARK_MEMBER_NAME(tomorrow,"tomorrow");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_END_CLASS();
}

void TestDateTimeUtc_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(date,"date");
	HX_VISIT_MEMBER_NAME(tomorrow,"tomorrow");
	HX_VISIT_MEMBER_NAME(x,"x");
}

hx::Val TestDateTimeUtc_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"date") ) { return hx::Val( date); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testAdd") ) { return hx::Val( testAdd_dyn()); }
		if (HX_FIELD_EQ(inName,"testNow") ) { return hx::Val( testNow_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tomorrow") ) { return hx::Val( tomorrow); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testCreate") ) { return hx::Val( testCreate_dyn()); }
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapTo") ) { return hx::Val( testSnapTo_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testCompare") ) { return hx::Val( testCompare_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testToString") ) { return hx::Val( testToString_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapNext") ) { return hx::Val( testSnapNext_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapPrev") ) { return hx::Val( testSnapPrev_dyn()); }
		if (HX_FIELD_EQ(inName,"assertSnapTo") ) { return hx::Val( assertSnapTo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromToDate") ) { return hx::Val( testFromToDate_dyn()); }
		if (HX_FIELD_EQ(inName,"testFromToTime") ) { return hx::Val( testFromToTime_dyn()); }
		if (HX_FIELD_EQ(inName,"assertSnapPrev") ) { return hx::Val( assertSnapPrev_dyn()); }
		if (HX_FIELD_EQ(inName,"assertSnapNext") ) { return hx::Val( assertSnapNext_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testOverflowing") ) { return hx::Val( testOverflowing_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testFromToString") ) { return hx::Val( testFromToString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestDateTimeUtc_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"date") ) { date=inValue.Cast<  ::cpp::Int64Struct >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tomorrow") ) { tomorrow=inValue.Cast<  ::cpp::Int64Struct >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestDateTimeUtc_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("date","\x2e","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("tomorrow","\x05","\x21","\xbc","\xbc"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestDateTimeUtc_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::Int64Struct*/ ,(int)offsetof(TestDateTimeUtc_obj,date),HX_HCSTRING("date","\x2e","\x56","\x63","\x42")},
	{hx::fsObject /*cpp::Int64Struct*/ ,(int)offsetof(TestDateTimeUtc_obj,tomorrow),HX_HCSTRING("tomorrow","\x05","\x21","\xbc","\xbc")},
	{hx::fsInt,(int)offsetof(TestDateTimeUtc_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestDateTimeUtc_obj_sStaticStorageInfo = 0;
#endif

static ::String TestDateTimeUtc_obj_sMemberFields[] = {
	HX_HCSTRING("date","\x2e","\x56","\x63","\x42"),
	HX_HCSTRING("tomorrow","\x05","\x21","\xbc","\xbc"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testCreate","\xee","\xac","\x03","\x95"),
	HX_HCSTRING("testToString","\x1e","\xf7","\x75","\xab"),
	HX_HCSTRING("testOverflowing","\xae","\x0b","\xd3","\x81"),
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testCompare","\x73","\x06","\x32","\x40"),
	HX_HCSTRING("testFromToDate","\x45","\xed","\x53","\x5b"),
	HX_HCSTRING("testFromToTime","\x24","\x63","\xed","\x65"),
	HX_HCSTRING("testFromToString","\xa8","\xf3","\xc5","\xb8"),
	HX_HCSTRING("testAdd","\xef","\x60","\xb8","\xbd"),
	HX_HCSTRING("testNow","\xe4","\x47","\xc2","\xbd"),
	HX_HCSTRING("testSnapNext","\xcf","\x1a","\x44","\x7c"),
	HX_HCSTRING("testSnapPrev","\xcf","\x54","\xa0","\x7d"),
	HX_HCSTRING("testSnapTo","\x57","\x8c","\x85","\xaa"),
	HX_HCSTRING("assertSnapTo","\xcb","\x59","\x7b","\x7e"),
	HX_HCSTRING("assertSnapPrev","\x43","\x67","\xbb","\x94"),
	HX_HCSTRING("assertSnapNext","\x43","\x2d","\x5f","\x93"),
	::String(null()) };

static void TestDateTimeUtc_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestDateTimeUtc_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestDateTimeUtc_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestDateTimeUtc_obj::__mClass,"__mClass");
};

#endif

hx::Class TestDateTimeUtc_obj::__mClass;

void TestDateTimeUtc_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestDateTimeUtc","\x4d","\x73","\x6b","\xa4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestDateTimeUtc_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestDateTimeUtc_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestDateTimeUtc_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestDateTimeUtc_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDateTimeUtc_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDateTimeUtc_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
