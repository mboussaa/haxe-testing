// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_TestDateTime
#include <thx/TestDateTime.h>
#endif
#ifndef INCLUDED_thx_TimePeriod
#include <thx/TimePeriod.h>
#endif
#ifndef INCLUDED_thx__DateTime_DateTime_Impl_
#include <thx/_DateTime/DateTime_Impl_.h>
#endif
#ifndef INCLUDED_thx__DateTimeUtc_DateTimeUtc_Impl_
#include <thx/_DateTimeUtc/DateTimeUtc_Impl_.h>
#endif
#ifndef INCLUDED_thx__Time_Time_Impl_
#include <thx/_Time/Time_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestDateTime_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestDateTime","new",0x1fcd9289,"thx.TestDateTime.new","thx/TestDateTime.hx",14,0x6b7dfa26)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  15)		this->x = i;
HXLINE(  17)		this->offset = ::thx::_Time::Time_Impl__obj::create((int)-6,(int)0,(int)0,(int)0);
HXLINE(  18)		HX_VARI(  ::cpp::Int64Struct,offset) = this->offset;
HXDLIN(  18)		HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2015,(int)7,(int)26,(int)21,(int)40,(int)30,(int)0);
HXDLIN(  18)		HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,offset);
HXDLIN(  18)		 ::cpp::Int64Struct _hx_tmp = _hx_int64_sub(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset);
HXDLIN(  18)		this->date = ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp))->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXLINE(  19)		HX_VARI_NAME(  ::cpp::Int64Struct,offset1,"offset") = this->offset;
HXDLIN(  19)		HX_VARI_NAME(  ::cpp::Int64Struct,dateTime1,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2015,(int)7,(int)27,(int)16,(int)40,(int)30,(int)0);
HXDLIN(  19)		HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime1)->init(1,offset1);
HXDLIN(  19)		 ::cpp::Int64Struct _hx_tmp1 = _hx_int64_sub(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset1);
HXDLIN(  19)		this->tomorrow = ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp1))->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXLINE(  20)		HX_VARI_NAME(  ::cpp::Int64Struct,offset2,"offset") = ::thx::_Time::Time_Impl__obj::zero;
HXDLIN(  20)		HX_VARI_NAME(  ::cpp::Int64Struct,dateTime2,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::create((int)2015,(int)7,(int)27,(int)3,(int)40,(int)30,(int)0);
HXDLIN(  20)		HX_VARI_NAME( ::Array< ::Dynamic>,this3,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime2)->init(1,offset2);
HXDLIN(  20)		 ::cpp::Int64Struct _hx_tmp2 = _hx_int64_sub(this3->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),offset2);
HXDLIN(  20)		this->dateutc = ::Array_obj< ::Dynamic>::__new(2)->init(0,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::fromInt64(_hx_tmp2))->init(1,this3->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
            	}

Dynamic TestDateTime_obj::__CreateEmpty() { return new TestDateTime_obj; }

hx::ObjectPtr< TestDateTime_obj > TestDateTime_obj::__new(Int i)
{
	hx::ObjectPtr< TestDateTime_obj > _hx_result = new TestDateTime_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestDateTime_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestDateTime_obj > _hx_result = new TestDateTime_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestDateTime_obj::testCreate(){
            	HX_STACK_FRAME("thx.TestDateTime","testCreate",0xaa3a71e5,"thx.TestDateTime.testCreate","thx/TestDateTime.hx",24,0x6b7dfa26)
            	HX_STACK_THIS(this)
HXLINE(  24)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  24)		HX_VARI( Int,_g) = this->x;
HXDLIN(  24)		while((_g1 < _g)){
HXLINE(  24)			++_g1;
HXLINE(  25)			HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = this->date;
HXDLIN(  25)			HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  25)			Int _hx_tmp = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN(  25)			HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = this->date;
HXDLIN(  25)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_add(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  25)			Int _hx_tmp1 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks1,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_YEAR);
HXDLIN(  25)			::utest::Assert_obj::equals((int)2015,_hx_tmp,((HX_("expected 2015 but got ",a9,80,6a,5b) + _hx_tmp1) + HX_(" for year",54,92,de,81)),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),25,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCreate",ee,ac,03,95)));
HXLINE(  26)			HX_VARI_NAME( ::Array< ::Dynamic>,this3,"this") = this->date;
HXDLIN(  26)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks2,"ticks") = _hx_int64_add(this3->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this3->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  26)			Int _hx_tmp2 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks2,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN(  26)			HX_VARI_NAME( ::Array< ::Dynamic>,this4,"this") = this->date;
HXDLIN(  26)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks3,"ticks") = _hx_int64_add(this4->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this4->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  26)			Int _hx_tmp3 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks3,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_MONTH);
HXDLIN(  26)			::utest::Assert_obj::equals((int)7,_hx_tmp2,((HX_("expected 7 but got ",44,38,79,48) + _hx_tmp3) + HX_(" for month",c9,82,b8,3e)),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),26,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCreate",ee,ac,03,95)));
HXLINE(  27)			HX_VARI_NAME( ::Array< ::Dynamic>,this5,"this") = this->date;
HXDLIN(  27)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks4,"ticks") = _hx_int64_add(this5->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this5->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  27)			Int _hx_tmp4 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks4,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN(  27)			HX_VARI_NAME( ::Array< ::Dynamic>,this6,"this") = this->date;
HXDLIN(  27)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks5,"ticks") = _hx_int64_add(this6->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this6->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  27)			Int _hx_tmp5 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::getDatePart(ticks5,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::DATE_PART_DAY);
HXDLIN(  27)			::utest::Assert_obj::equals((int)26,_hx_tmp4,((HX_("expected 26 but got ",c7,0c,7a,5b) + _hx_tmp5) + HX_(" for day",a5,cd,99,d2)),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),27,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCreate",ee,ac,03,95)));
HXLINE(  29)			HX_VARI_NAME( ::Array< ::Dynamic>,this7,"this") = this->date;
HXDLIN(  29)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks6,"ticks") = _hx_int64_add(this7->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this7->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  29)			Int _hx_tmp6 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks6);
HXDLIN(  29)			HX_VARI_NAME( ::Array< ::Dynamic>,this8,"this") = this->date;
HXDLIN(  29)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks7,"ticks") = _hx_int64_add(this8->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this8->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  29)			Int _hx_tmp7 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_hour(ticks7);
HXDLIN(  29)			::utest::Assert_obj::equals((int)21,_hx_tmp6,((HX_("expected 21 but got ",6c,b5,05,9a) + _hx_tmp7) + HX_(" for hour",bb,99,a9,76)),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),29,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCreate",ee,ac,03,95)));
HXLINE(  30)			HX_VARI_NAME( ::Array< ::Dynamic>,this9,"this") = this->date;
HXDLIN(  30)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks8,"ticks") = _hx_int64_add(this9->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this9->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  30)			Int _hx_tmp8 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks8);
HXDLIN(  30)			HX_VARI_NAME( ::Array< ::Dynamic>,this10,"this") = this->date;
HXDLIN(  30)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks9,"ticks") = _hx_int64_add(this10->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this10->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  30)			Int _hx_tmp9 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_minute(ticks9);
HXDLIN(  30)			::utest::Assert_obj::equals((int)40,_hx_tmp8,((HX_("expected 40 but got ",0f,14,78,db) + _hx_tmp9) + HX_(" for minute",2b,3f,53,2e)),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),30,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCreate",ee,ac,03,95)));
HXLINE(  31)			HX_VARI_NAME( ::Array< ::Dynamic>,this11,"this") = this->date;
HXDLIN(  31)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks10,"ticks") = _hx_int64_add(this11->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this11->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  31)			Int _hx_tmp10 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks10);
HXDLIN(  31)			HX_VARI_NAME( ::Array< ::Dynamic>,this12,"this") = this->date;
HXDLIN(  31)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks11,"ticks") = _hx_int64_add(this12->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this12->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  31)			Int _hx_tmp11 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_second(ticks11);
HXDLIN(  31)			::utest::Assert_obj::equals((int)30,_hx_tmp10,((HX_("expected 30 but got ",ce,a8,99,5a) + _hx_tmp11) + HX_(" for second",cb,2b,93,3f)),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),31,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCreate",ee,ac,03,95)));
HXLINE(  33)			HX_VARI_NAME( ::Array< ::Dynamic>,this13,"this") = this->date;
HXDLIN(  33)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks12,"ticks") = _hx_int64_add(this13->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this13->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  33)			Int _hx_tmp12 = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::get_dayOfWeek(ticks12);
HXDLIN(  33)			::utest::Assert_obj::equals((int)0,_hx_tmp12,null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),33,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCreate",ee,ac,03,95)));
HXLINE(  35)			HX_VARI_NAME(  ::cpp::Int64Struct,this14,"this") = this->date->__get((int)1).StaticCast<  ::cpp::Int64Struct >();
HXDLIN(  35)			HX_VARI(  ::cpp::Int64Struct,b) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::ticksPerHourI64;
HXDLIN(  35)			Bool _hx_tmp13 = _hx_int64_is_zero(this14);
HXDLIN(  35)			if (_hx_tmp13) {
HXLINE(  35)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN(  35)			HX_VARI(  ::cpp::Int64Struct,a) = _hx_int64_div(this14,b);
HXDLIN(  35)			HX_VARI_NAME(  ::cpp::Int64Struct,b1,"b") = ( ::cpp::Int64Struct((int)24));
HXDLIN(  35)			Bool _hx_tmp14 = _hx_int64_is_zero(a);
HXDLIN(  35)			if (_hx_tmp14) {
HXLINE(  35)				HX_STACK_DO_THROW(HX_("divide by zero",6a,d2,eb,57));
            			}
HXDLIN(  35)			HX_VARI(  ::cpp::Int64Struct,x) = _hx_int64_mod(a,b1);
HXDLIN(  35)			Int _hx_tmp15 = _hx_int64_high(x);
HXDLIN(  35)			Int _hx_tmp16 = _hx_int64_low(x);
HXDLIN(  35)			if ((_hx_tmp15 != ((int)_hx_tmp16 >> (int)(int)31))) {
HXLINE(  35)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN(  35)			Int _hx_tmp17 = _hx_int64_low(x);
HXDLIN(  35)			::utest::Assert_obj::equals((int)-6,_hx_tmp17,null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),35,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCreate",ee,ac,03,95)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTime_obj,testCreate,(void))

void TestDateTime_obj::testEquals(){
            	HX_STACK_FRAME("thx.TestDateTime","testEquals",0xee1df928,"thx.TestDateTime.testEquals","thx/TestDateTime.hx",39,0x6b7dfa26)
            	HX_STACK_THIS(this)
HXLINE(  39)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  39)		HX_VARI( Int,_g) = this->x;
HXDLIN(  39)		while((_g1 < _g)){
HXLINE(  39)			++_g1;
HXLINE(  40)			Bool _hx_tmp = _hx_int64_eq(this->date->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this->date->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  40)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),40,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testEquals",31,34,e7,d8)));
HXLINE(  41)			Bool _hx_tmp1 = _hx_int64_neq(this->date->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this->tomorrow->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  41)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),41,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testEquals",31,34,e7,d8)));
HXLINE(  42)			Bool _hx_tmp2 = _hx_int64_eq(this->date->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this->dateutc->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  42)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),42,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testEquals",31,34,e7,d8)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTime_obj,testEquals,(void))

void TestDateTime_obj::testCompare(){
            	HX_STACK_FRAME("thx.TestDateTime","testCompare",0xbae7999c,"thx.TestDateTime.testCompare","thx/TestDateTime.hx",46,0x6b7dfa26)
            	HX_STACK_THIS(this)
HXLINE(  46)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  46)		HX_VARI( Int,_g) = this->x;
HXDLIN(  46)		while((_g1 < _g)){
HXLINE(  46)			++_g1;
HXLINE(  47)			Int _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->date,this->date);
HXDLIN(  47)			::utest::Assert_obj::isFalse((_hx_tmp > (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),47,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  48)			Int _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->date,this->date);
HXDLIN(  48)			::utest::Assert_obj::isTrue((_hx_tmp1 >= (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),48,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  49)			Int _hx_tmp2 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->date,this->date);
HXDLIN(  49)			::utest::Assert_obj::isFalse((_hx_tmp2 < (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),49,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  50)			Int _hx_tmp3 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->date,this->date);
HXDLIN(  50)			::utest::Assert_obj::isTrue((_hx_tmp3 <= (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),50,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  52)			Int _hx_tmp4 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->date,this->tomorrow);
HXDLIN(  52)			::utest::Assert_obj::isFalse((_hx_tmp4 > (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),52,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  53)			Int _hx_tmp5 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->date,this->tomorrow);
HXDLIN(  53)			::utest::Assert_obj::isFalse((_hx_tmp5 >= (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),53,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  54)			Int _hx_tmp6 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->date,this->tomorrow);
HXDLIN(  54)			::utest::Assert_obj::isTrue((_hx_tmp6 < (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),54,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  55)			Int _hx_tmp7 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->date,this->tomorrow);
HXDLIN(  55)			::utest::Assert_obj::isTrue((_hx_tmp7 <= (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),55,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  57)			Int _hx_tmp8 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->tomorrow,this->date);
HXDLIN(  57)			::utest::Assert_obj::isTrue((_hx_tmp8 > (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),57,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  58)			Int _hx_tmp9 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->tomorrow,this->date);
HXDLIN(  58)			::utest::Assert_obj::isTrue((_hx_tmp9 >= (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),58,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  59)			Int _hx_tmp10 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->tomorrow,this->date);
HXDLIN(  59)			::utest::Assert_obj::isFalse((_hx_tmp10 < (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),59,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
HXLINE(  60)			Int _hx_tmp11 = ::thx::_DateTime::DateTime_Impl__obj::compareTo(this->tomorrow,this->date);
HXDLIN(  60)			::utest::Assert_obj::isFalse((_hx_tmp11 <= (int)0),null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),60,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testCompare",73,06,32,40)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTime_obj,testCompare,(void))

void TestDateTime_obj::testToString(){
            	HX_STACK_FRAME("thx.TestDateTime","testToString",0x8fa127d5,"thx.TestDateTime.testToString","thx/TestDateTime.hx",64,0x6b7dfa26)
            	HX_STACK_THIS(this)
HXLINE(  64)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  64)		HX_VARI( Int,_g) = this->x;
HXDLIN(  64)		while((_g1 < _g)){
HXLINE(  64)			++_g1;
HXLINE(  65)			HX_VARI( ::String,d) = ::thx::_DateTime::DateTime_Impl__obj::toString(this->date);
HXLINE(  66)			::utest::Assert_obj::equals(HX_("2015-07-26T21:40:30-06:00",5c,ad,9c,b7),d,null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),66,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testToString",1e,f7,75,ab)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTime_obj,testToString,(void))

void TestDateTime_obj::testAdd(){
            	HX_STACK_FRAME("thx.TestDateTime","testAdd",0xe5a8eb98,"thx.TestDateTime.testAdd","thx/TestDateTime.hx",70,0x6b7dfa26)
            	HX_STACK_THIS(this)
HXLINE(  70)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  70)		HX_VARI( Int,_g) = this->x;
HXDLIN(  70)		while((_g1 < _g)){
HXLINE(  70)			++_g1;
HXLINE(  71)			HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = this->date;
HXDLIN(  71)			HX_VARI(  ::cpp::Int64Struct,dateTime) = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addMonths(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),(int)24);
HXDLIN(  71)			HX_VARI_NAME( ::Array< ::Dynamic>,this2,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime)->init(1,this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  71)			HX_VARI_NAME(  ::cpp::Int64Struct,dateTime1,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addMonths(this2->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),(int)9);
HXDLIN(  71)			HX_VARI_NAME( ::Array< ::Dynamic>,this3,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime1)->init(1,this2->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  71)			HX_VARI_NAME(  ::cpp::Int64Struct,dateTime2,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this3->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),(int)10,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerDay);
HXDLIN(  71)			HX_VARI_NAME( ::Array< ::Dynamic>,this4,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime2)->init(1,this3->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  71)			HX_VARI_NAME(  ::cpp::Int64Struct,dateTime3,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this4->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),(int)7,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerHour);
HXDLIN(  71)			HX_VARI_NAME( ::Array< ::Dynamic>,this5,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime3)->init(1,this4->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  71)			HX_VARI_NAME(  ::cpp::Int64Struct,dateTime4,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this5->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),(int)10,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerMinute);
HXDLIN(  71)			HX_VARI_NAME( ::Array< ::Dynamic>,this6,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime4)->init(1,this5->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  71)			HX_VARI_NAME(  ::cpp::Int64Struct,dateTime5,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this6->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),(int)7,::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::millisPerSecond);
HXDLIN(  71)			HX_VARI_NAME( ::Array< ::Dynamic>,this7,"this") = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime5)->init(1,this6->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  71)			HX_VARI_NAME(  ::cpp::Int64Struct,dateTime6,"dateTime") = ::thx::_DateTimeUtc::DateTimeUtc_Impl__obj::addScaled(this7->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),(int)7,(int)1);
HXDLIN(  71)			HX_VARI( ::Array< ::Dynamic>,d) = ::Array_obj< ::Dynamic>::__new(2)->init(0,dateTime6)->init(1,this7->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXLINE(  80)			HX_VARI( ::Array< ::Dynamic>,that) = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2018-05-07T04:50:37.007-06:00",ea,2d,ad,f7));
HXDLIN(  80)			Bool _hx_tmp = _hx_int64_eq(d->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),that->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  80)			::String _hx_tmp1 = ((HX_("expected ",a8,7a,f8,e9) + HX_("2018-05-07T04:50:37.007-06:00",ea,2d,ad,f7)) + HX_(" but got ",b3,1a,6e,57));
HXDLIN(  80)			::String _hx_tmp2 = ::thx::_DateTime::DateTime_Impl__obj::toString(d);
HXDLIN(  80)			::utest::Assert_obj::isTrue(_hx_tmp,(_hx_tmp1 + _hx_tmp2),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),80,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testAdd",ef,60,b8,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTime_obj,testAdd,(void))

void TestDateTime_obj::testOffset(){
            	HX_STACK_FRAME("thx.TestDateTime","testOffset",0x8e6aa27c,"thx.TestDateTime.testOffset","thx/TestDateTime.hx",84,0x6b7dfa26)
            	HX_STACK_THIS(this)
HXLINE(  84)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  84)		HX_VARI( Int,_g) = this->x;
HXDLIN(  84)		while((_g1 < _g)){
HXLINE(  84)			++_g1;
HXLINE(  85)			HX_VARI(  ::cpp::Int64Struct,offset) = ::thx::_Time::Time_Impl__obj::create((int)-4,(int)0,(int)0,(int)0);
HXDLIN(  85)			HX_VARI( ::Array< ::Dynamic>,nyDate) = ::Array_obj< ::Dynamic>::__new(2)->init(0,this->date->__get((int)0).StaticCast<  ::cpp::Int64Struct >())->init(1,offset);
HXLINE(  86)			::String _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::toString(nyDate);
HXDLIN(  86)			::utest::Assert_obj::equals(HX_("2015-07-26T23:40:30-04:00",20,3b,cb,41),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),86,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testOffset",85,dd,33,79)));
HXLINE(  87)			HX_VARI_NAME( ::Array< ::Dynamic>,this1,"this") = this->date;
HXDLIN(  87)			HX_VARI(  ::cpp::Int64Struct,newoffset) = ::thx::_Time::Time_Impl__obj::create((int)-4,(int)0,(int)0,(int)0);
HXDLIN(  87)			HX_VARI(  ::cpp::Int64Struct,ticks) = _hx_int64_add(this1->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),this1->__get((int)1).StaticCast<  ::cpp::Int64Struct >());
HXDLIN(  87)			HX_VARI_NAME(  ::cpp::Int64Struct,ticks1,"ticks") = _hx_int64_sub(ticks,newoffset);
HXDLIN(  87)			nyDate = ::Array_obj< ::Dynamic>::__new(2)->init(0,ticks1)->init(1,newoffset);
HXLINE(  88)			::String _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::toString(nyDate);
HXDLIN(  88)			::utest::Assert_obj::equals(HX_("2015-07-26T21:40:30-04:00",1e,40,4a,b6),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),88,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testOffset",85,dd,33,79)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTime_obj,testOffset,(void))

void TestDateTime_obj::testSnapNext(){
            	HX_STACK_FRAME("thx.TestDateTime","testSnapNext",0x606f4b86,"thx.TestDateTime.testSnapNext","thx/TestDateTime.hx",92,0x6b7dfa26)
            	HX_STACK_THIS(this)
HXLINE(  92)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  92)		HX_VARI( Int,_g) = this->x;
HXDLIN(  92)		while((_g1 < _g)){
HXLINE(  92)			++_g1;
HXLINE(  93)			::Array< ::Dynamic> _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:07:00-06:00",7e,77,95,b2));
HXDLIN(  93)			this->assertSnapNext(_hx_tmp,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:06:10-06:00",be,71,7d,2b)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),93,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  94)			::Array< ::Dynamic> _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:06:00-06:00",9f,ff,4a,f2));
HXDLIN(  94)			this->assertSnapNext(_hx_tmp1,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:05:50-06:00",5b,c2,fc,4f)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),94,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  95)			::Array< ::Dynamic> _hx_tmp2 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 11:00:00-06:00",e6,ad,4c,b6));
HXDLIN(  95)			this->assertSnapNext(_hx_tmp2,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:10:10-06:00",c5,0d,9d,2a)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),95,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  96)			::Array< ::Dynamic> _hx_tmp3 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:00:00-06:00",65,30,8c,70));
HXDLIN(  96)			this->assertSnapNext(_hx_tmp3,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 09:50:10-06:00",f3,d0,2d,df)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),96,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  97)			::Array< ::Dynamic> _hx_tmp4 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-02 00:00:00-06:00",25,06,0f,75));
HXDLIN(  97)			this->assertSnapNext(_hx_tmp4,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:00:00-06:00",65,30,8c,70)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),97,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  98)			::Array< ::Dynamic> _hx_tmp5 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 00:00:00-06:00",06,dd,de,ad));
HXDLIN(  98)			this->assertSnapNext(_hx_tmp5,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2013-12-31 20:00:00-06:00",48,68,38,e3)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),98,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE(  99)			::Array< ::Dynamic> _hx_tmp6 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-21 00:00:00-06:00",e8,39,38,1f));
HXDLIN(  99)			this->assertSnapNext(_hx_tmp6,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-17 11:00:00-06:00",81,2f,d3,4f)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),99,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 100)			::Array< ::Dynamic> _hx_tmp7 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-21 00:00:00-06:00",e8,39,38,1f));
HXDLIN( 100)			this->assertSnapNext(_hx_tmp7,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-18 00:00:00-06:00",c0,87,95,0e)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),100,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 101)			::Array< ::Dynamic> _hx_tmp8 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2015-01-01 00:00:00-06:00",65,27,2d,f2));
HXDLIN( 101)			this->assertSnapNext(_hx_tmp8,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-12 00:00:00-06:00",06,91,74,63)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),101,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 102)			::Array< ::Dynamic> _hx_tmp9 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2015-01-01 00:00:00-06:00",65,27,2d,f2));
HXDLIN( 102)			this->assertSnapNext(_hx_tmp9,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-18 00:00:00-06:00",c0,87,95,0e)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),102,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 103)			::Array< ::Dynamic> _hx_tmp10 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2015-01-01 00:00:00-06:00",65,27,2d,f2));
HXDLIN( 103)			this->assertSnapNext(_hx_tmp10,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-05-12 00:00:00-06:00",2a,29,37,0c)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),103,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
HXLINE( 104)			::Array< ::Dynamic> _hx_tmp11 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2015-01-01 00:00:00-06:00",65,27,2d,f2));
HXDLIN( 104)			this->assertSnapNext(_hx_tmp11,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-18 00:00:00-06:00",c0,87,95,0e)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),104,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapNext",cf,1a,44,7c)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTime_obj,testSnapNext,(void))

void TestDateTime_obj::testSnapPrev(){
            	HX_STACK_FRAME("thx.TestDateTime","testSnapPrev",0x61cb8586,"thx.TestDateTime.testSnapPrev","thx/TestDateTime.hx",108,0x6b7dfa26)
            	HX_STACK_THIS(this)
HXLINE( 108)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 108)		HX_VARI( Int,_g) = this->x;
HXDLIN( 108)		while((_g1 < _g)){
HXLINE( 108)			++_g1;
HXLINE( 109)			::Array< ::Dynamic> _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:06:00-06:00",9f,ff,4a,f2));
HXDLIN( 109)			this->assertSnapPrev(_hx_tmp,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:06:10-06:00",be,71,7d,2b)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),109,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 110)			::Array< ::Dynamic> _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:05:00-06:00",c0,87,00,32));
HXDLIN( 110)			this->assertSnapPrev(_hx_tmp1,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:05:50-06:00",5b,c2,fc,4f)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),110,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 111)			::Array< ::Dynamic> _hx_tmp2 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:00:00-06:00",65,30,8c,70));
HXDLIN( 111)			this->assertSnapPrev(_hx_tmp2,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:10:10-06:00",c5,0d,9d,2a)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),111,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 112)			::Array< ::Dynamic> _hx_tmp3 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 09:00:00-06:00",8f,46,a3,21));
HXDLIN( 112)			this->assertSnapPrev(_hx_tmp3,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 09:50:10-06:00",f3,d0,2d,df)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),112,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 113)			::Array< ::Dynamic> _hx_tmp4 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 00:00:00-06:00",06,dd,de,ad));
HXDLIN( 113)			this->assertSnapPrev(_hx_tmp4,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:00:00-06:00",65,30,8c,70)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),113,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 114)			::Array< ::Dynamic> _hx_tmp5 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2013-12-31 00:00:00-06:00",8a,c1,dd,5d));
HXDLIN( 114)			this->assertSnapPrev(_hx_tmp5,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2013-12-31 20:00:00-06:00",48,68,38,e3)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),114,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 115)			::Array< ::Dynamic> _hx_tmp6 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-14 00:00:00-06:00",44,e3,d4,f1));
HXDLIN( 115)			this->assertSnapPrev(_hx_tmp6,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-17 11:00:00-06:00",81,2f,d3,4f)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),115,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 116)			::Array< ::Dynamic> _hx_tmp7 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-14 00:00:00-06:00",44,e3,d4,f1));
HXDLIN( 116)			this->assertSnapPrev(_hx_tmp7,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-18 00:00:00-06:00",c0,87,95,0e)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),116,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 117)			::Array< ::Dynamic> _hx_tmp8 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-01 00:00:00-06:00",e6,95,50,19));
HXDLIN( 117)			this->assertSnapPrev(_hx_tmp8,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-12 00:00:00-06:00",06,91,74,63)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),117,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 118)			::Array< ::Dynamic> _hx_tmp9 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-01 00:00:00-06:00",e6,95,50,19));
HXDLIN( 118)			this->assertSnapPrev(_hx_tmp9,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-18 00:00:00-06:00",c0,87,95,0e)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),118,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 119)			::Array< ::Dynamic> _hx_tmp10 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 00:00:00-06:00",06,dd,de,ad));
HXDLIN( 119)			this->assertSnapPrev(_hx_tmp10,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-05-12 00:00:00-06:00",2a,29,37,0c)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),119,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
HXLINE( 120)			::Array< ::Dynamic> _hx_tmp11 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 00:00:00-06:00",06,dd,de,ad));
HXDLIN( 120)			this->assertSnapPrev(_hx_tmp11,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-18 00:00:00-06:00",c0,87,95,0e)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),120,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapPrev",cf,54,a0,7d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTime_obj,testSnapPrev,(void))

void TestDateTime_obj::testSnapTo(){
            	HX_STACK_FRAME("thx.TestDateTime","testSnapTo",0xbfbc514e,"thx.TestDateTime.testSnapTo","thx/TestDateTime.hx",124,0x6b7dfa26)
            	HX_STACK_THIS(this)
HXLINE( 124)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 124)		HX_VARI( Int,_g) = this->x;
HXDLIN( 124)		while((_g1 < _g)){
HXLINE( 124)			++_g1;
HXLINE( 125)			::Array< ::Dynamic> _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:06:00-06:00",9f,ff,4a,f2));
HXDLIN( 125)			this->assertSnapTo(_hx_tmp,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:06:10-06:00",be,71,7d,2b)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),125,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 126)			::Array< ::Dynamic> _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:06:00-06:00",9f,ff,4a,f2));
HXDLIN( 126)			this->assertSnapTo(_hx_tmp1,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:05:50-06:00",5b,c2,fc,4f)),::thx::TimePeriod_obj::Minute_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),126,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 127)			::Array< ::Dynamic> _hx_tmp2 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:00:00-06:00",65,30,8c,70));
HXDLIN( 127)			this->assertSnapTo(_hx_tmp2,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:10:10-06:00",c5,0d,9d,2a)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),127,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 128)			::Array< ::Dynamic> _hx_tmp3 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:00:00-06:00",65,30,8c,70));
HXDLIN( 128)			this->assertSnapTo(_hx_tmp3,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 09:50:10-06:00",f3,d0,2d,df)),::thx::TimePeriod_obj::Hour_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),128,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 129)			::Array< ::Dynamic> _hx_tmp4 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 00:00:00-06:00",06,dd,de,ad));
HXDLIN( 129)			this->assertSnapTo(_hx_tmp4,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 10:00:00-06:00",65,30,8c,70)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),129,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 130)			::Array< ::Dynamic> _hx_tmp5 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 00:00:00-06:00",06,dd,de,ad));
HXDLIN( 130)			this->assertSnapTo(_hx_tmp5,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2013-12-31 20:00:00-06:00",48,68,38,e3)),::thx::TimePeriod_obj::Day_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),130,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 131)			::Array< ::Dynamic> _hx_tmp6 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-14 00:00:00-06:00",44,e3,d4,f1));
HXDLIN( 131)			this->assertSnapTo(_hx_tmp6,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-17 11:00:00-06:00",81,2f,d3,4f)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),131,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 132)			::Array< ::Dynamic> _hx_tmp7 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-21 00:00:00-06:00",e8,39,38,1f));
HXDLIN( 132)			this->assertSnapTo(_hx_tmp7,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-18 00:00:00-06:00",c0,87,95,0e)),::thx::TimePeriod_obj::Week_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),132,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 133)			::Array< ::Dynamic> _hx_tmp8 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-01 00:00:00-06:00",e6,95,50,19));
HXDLIN( 133)			this->assertSnapTo(_hx_tmp8,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-12 00:00:00-06:00",06,91,74,63)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),133,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 134)			::Array< ::Dynamic> _hx_tmp9 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2015-01-01 00:00:00-06:00",65,27,2d,f2));
HXDLIN( 134)			this->assertSnapTo(_hx_tmp9,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-18 00:00:00-06:00",c0,87,95,0e)),::thx::TimePeriod_obj::Month_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),134,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 135)			::Array< ::Dynamic> _hx_tmp10 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01 00:00:00-06:00",06,dd,de,ad));
HXDLIN( 135)			this->assertSnapTo(_hx_tmp10,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-05-12 00:00:00-06:00",2a,29,37,0c)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),135,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
HXLINE( 136)			::Array< ::Dynamic> _hx_tmp11 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2015-01-01 00:00:00-06:00",65,27,2d,f2));
HXDLIN( 136)			this->assertSnapTo(_hx_tmp11,::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-12-18 00:00:00-06:00",c0,87,95,0e)),::thx::TimePeriod_obj::Year_dyn(),hx::SourceInfo(HX_("TestDateTime.hx",f1,c4,d5,b4),136,HX_("thx.TestDateTime",17,9a,05,a7),HX_("testSnapTo",57,8c,85,aa)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateTime_obj,testSnapTo,(void))

void TestDateTime_obj::assertSnapTo(::Array< ::Dynamic> expected,::Array< ::Dynamic> date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestDateTime","assertSnapTo",0x62a68a82,"thx.TestDateTime.assertSnapTo","thx/TestDateTime.hx",139,0x6b7dfa26)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 140)		HX_VARI( ::Array< ::Dynamic>,t) = ::thx::_DateTime::DateTime_Impl__obj::snapTo(date,period);
HXLINE( 142)		Bool _hx_tmp = _hx_int64_eq(expected->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),t->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 143)		::String _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::toString(date);
HXDLIN( 143)		::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" to snap to ",94,e4,0d,46));
HXDLIN( 143)		::String _hx_tmp3 = ::thx::_DateTime::DateTime_Impl__obj::toString(expected);
HXDLIN( 143)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" for ",17,f1,92,b0));
HXDLIN( 143)		::String _hx_tmp5 = ::Std_obj::string(period);
HXDLIN( 143)		::String _hx_tmp6 = ((_hx_tmp4 + _hx_tmp5) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 143)		::String _hx_tmp7 = ::thx::_DateTime::DateTime_Impl__obj::toString(t);
HXLINE( 141)		::utest::Assert_obj::isTrue(_hx_tmp,(_hx_tmp6 + _hx_tmp7),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestDateTime_obj,assertSnapTo,(void))

void TestDateTime_obj::assertSnapPrev(::Array< ::Dynamic> expected,::Array< ::Dynamic> date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestDateTime","assertSnapPrev",0x3e9d73ba,"thx.TestDateTime.assertSnapPrev","thx/TestDateTime.hx",148,0x6b7dfa26)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 149)		HX_VARI( ::Array< ::Dynamic>,t) = ::thx::_DateTime::DateTime_Impl__obj::snapPrev(date,period);
HXLINE( 151)		Bool _hx_tmp = _hx_int64_eq(expected->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),t->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 152)		::String _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::toString(date);
HXDLIN( 152)		::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" to snap before ",90,ec,cb,0f));
HXDLIN( 152)		::String _hx_tmp3 = ::thx::_DateTime::DateTime_Impl__obj::toString(expected);
HXDLIN( 152)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" for ",17,f1,92,b0));
HXDLIN( 152)		::String _hx_tmp5 = ::Std_obj::string(period);
HXDLIN( 152)		::String _hx_tmp6 = ((_hx_tmp4 + _hx_tmp5) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 152)		::String _hx_tmp7 = ::thx::_DateTime::DateTime_Impl__obj::toString(t);
HXLINE( 150)		::utest::Assert_obj::isTrue(_hx_tmp,(_hx_tmp6 + _hx_tmp7),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestDateTime_obj,assertSnapPrev,(void))

void TestDateTime_obj::assertSnapNext(::Array< ::Dynamic> expected,::Array< ::Dynamic> date,::hx::EnumBase period, ::Dynamic pos){
            	HX_STACK_FRAME("thx.TestDateTime","assertSnapNext",0x3d4139ba,"thx.TestDateTime.assertSnapNext","thx/TestDateTime.hx",157,0x6b7dfa26)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(date,"date")
            	HX_STACK_ARG(period,"period")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 158)		HX_VARI( ::Array< ::Dynamic>,t) = ::thx::_DateTime::DateTime_Impl__obj::snapNext(date,period);
HXLINE( 160)		Bool _hx_tmp = _hx_int64_eq(expected->__get((int)0).StaticCast<  ::cpp::Int64Struct >(),t->__get((int)0).StaticCast<  ::cpp::Int64Struct >());
HXLINE( 161)		::String _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::toString(date);
HXDLIN( 161)		::String _hx_tmp2 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" to snap after ",95,0f,fc,c6));
HXDLIN( 161)		::String _hx_tmp3 = ::thx::_DateTime::DateTime_Impl__obj::toString(expected);
HXDLIN( 161)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_(" for ",17,f1,92,b0));
HXDLIN( 161)		::String _hx_tmp5 = ::Std_obj::string(period);
HXDLIN( 161)		::String _hx_tmp6 = ((_hx_tmp4 + _hx_tmp5) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 161)		::String _hx_tmp7 = ::thx::_DateTime::DateTime_Impl__obj::toString(t);
HXLINE( 159)		::utest::Assert_obj::isTrue(_hx_tmp,(_hx_tmp6 + _hx_tmp7),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestDateTime_obj,assertSnapNext,(void))


TestDateTime_obj::TestDateTime_obj()
{
}

void TestDateTime_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestDateTime);
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(date,"date");
	HX_MARK_MEMBER_NAME(tomorrow,"tomorrow");
	HX_MARK_MEMBER_NAME(dateutc,"dateutc");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_END_CLASS();
}

void TestDateTime_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(date,"date");
	HX_VISIT_MEMBER_NAME(tomorrow,"tomorrow");
	HX_VISIT_MEMBER_NAME(dateutc,"dateutc");
	HX_VISIT_MEMBER_NAME(x,"x");
}

hx::Val TestDateTime_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"date") ) { return hx::Val( date); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dateutc") ) { return hx::Val( dateutc); }
		if (HX_FIELD_EQ(inName,"testAdd") ) { return hx::Val( testAdd_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tomorrow") ) { return hx::Val( tomorrow); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testCreate") ) { return hx::Val( testCreate_dyn()); }
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"testOffset") ) { return hx::Val( testOffset_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapTo") ) { return hx::Val( testSnapTo_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testCompare") ) { return hx::Val( testCompare_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testToString") ) { return hx::Val( testToString_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapNext") ) { return hx::Val( testSnapNext_dyn()); }
		if (HX_FIELD_EQ(inName,"testSnapPrev") ) { return hx::Val( testSnapPrev_dyn()); }
		if (HX_FIELD_EQ(inName,"assertSnapTo") ) { return hx::Val( assertSnapTo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"assertSnapPrev") ) { return hx::Val( assertSnapPrev_dyn()); }
		if (HX_FIELD_EQ(inName,"assertSnapNext") ) { return hx::Val( assertSnapNext_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestDateTime_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"date") ) { date=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::cpp::Int64Struct >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dateutc") ) { dateutc=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tomorrow") ) { tomorrow=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestDateTime_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("date","\x2e","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("tomorrow","\x05","\x21","\xbc","\xbc"));
	outFields->push(HX_HCSTRING("dateutc","\xb6","\x67","\x97","\x14"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestDateTime_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::Int64Struct*/ ,(int)offsetof(TestDateTime_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsObject /*Array< cpp::Int64Struct >*/ ,(int)offsetof(TestDateTime_obj,date),HX_HCSTRING("date","\x2e","\x56","\x63","\x42")},
	{hx::fsObject /*Array< cpp::Int64Struct >*/ ,(int)offsetof(TestDateTime_obj,tomorrow),HX_HCSTRING("tomorrow","\x05","\x21","\xbc","\xbc")},
	{hx::fsObject /*Array< cpp::Int64Struct >*/ ,(int)offsetof(TestDateTime_obj,dateutc),HX_HCSTRING("dateutc","\xb6","\x67","\x97","\x14")},
	{hx::fsInt,(int)offsetof(TestDateTime_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestDateTime_obj_sStaticStorageInfo = 0;
#endif

static ::String TestDateTime_obj_sMemberFields[] = {
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("date","\x2e","\x56","\x63","\x42"),
	HX_HCSTRING("tomorrow","\x05","\x21","\xbc","\xbc"),
	HX_HCSTRING("dateutc","\xb6","\x67","\x97","\x14"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testCreate","\xee","\xac","\x03","\x95"),
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testCompare","\x73","\x06","\x32","\x40"),
	HX_HCSTRING("testToString","\x1e","\xf7","\x75","\xab"),
	HX_HCSTRING("testAdd","\xef","\x60","\xb8","\xbd"),
	HX_HCSTRING("testOffset","\x85","\xdd","\x33","\x79"),
	HX_HCSTRING("testSnapNext","\xcf","\x1a","\x44","\x7c"),
	HX_HCSTRING("testSnapPrev","\xcf","\x54","\xa0","\x7d"),
	HX_HCSTRING("testSnapTo","\x57","\x8c","\x85","\xaa"),
	HX_HCSTRING("assertSnapTo","\xcb","\x59","\x7b","\x7e"),
	HX_HCSTRING("assertSnapPrev","\x43","\x67","\xbb","\x94"),
	HX_HCSTRING("assertSnapNext","\x43","\x2d","\x5f","\x93"),
	::String(null()) };

static void TestDateTime_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestDateTime_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestDateTime_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestDateTime_obj::__mClass,"__mClass");
};

#endif

hx::Class TestDateTime_obj::__mClass;

void TestDateTime_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestDateTime","\x17","\x9a","\x05","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestDateTime_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestDateTime_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestDateTime_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestDateTime_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDateTime_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDateTime_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
