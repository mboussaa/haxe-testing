// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Functions
#include <thx/Functions.h>
#endif
#ifndef INCLUDED_thx_Iterators
#include <thx/Iterators.h>
#endif
#ifndef INCLUDED_thx_MapIIterator
#include <thx/MapIIterator.h>
#endif
#ifndef INCLUDED_thx_MapIterator
#include <thx/MapIterator.h>
#endif
#ifndef INCLUDED_thx__Monoid_Monoid_Impl_
#include <thx/_Monoid/Monoid_Impl_.h>
#endif

namespace thx{

void Iterators_obj::__construct() { }

Dynamic Iterators_obj::__CreateEmpty() { return new Iterators_obj; }

hx::ObjectPtr< Iterators_obj > Iterators_obj::__new()
{
	hx::ObjectPtr< Iterators_obj > _hx_result = new Iterators_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Iterators_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Iterators_obj > _hx_result = new Iterators_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool Iterators_obj::all( ::Dynamic it, ::Dynamic predicate){
            	HX_STACK_FRAME("thx.Iterators","all",0x0547816e,"thx.Iterators.all","thx/Iterators.hx",19,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(predicate,"predicate")
HXLINE(  20)		while(true){
HXLINE(  20)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  20)			if (_hx_tmp) {
HXLINE(  20)				goto _hx_goto_0;
            			}
HXDLIN(  20)			HX_VARI(  ::Dynamic,element) =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE(  21)			Bool _hx_tmp1 = !(( (Bool)(predicate(element)) ));
HXDLIN(  21)			if (_hx_tmp1) {
HXLINE(  22)				return false;
            			}
            		}
            		_hx_goto_0:;
HXLINE(  23)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,all,return )

Bool Iterators_obj::any( ::Dynamic it, ::Dynamic predicate){
            	HX_STACK_FRAME("thx.Iterators","any",0x05478339,"thx.Iterators.any","thx/Iterators.hx",29,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(predicate,"predicate")
HXLINE(  30)		while(true){
HXLINE(  30)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  30)			if (_hx_tmp) {
HXLINE(  30)				goto _hx_goto_1;
            			}
HXDLIN(  30)			HX_VARI(  ::Dynamic,element) =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE(  31)			Bool _hx_tmp1 = ( (Bool)(predicate(element)) );
HXDLIN(  31)			if (_hx_tmp1) {
HXLINE(  32)				return true;
            			}
            		}
            		_hx_goto_1:;
HXLINE(  33)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,any,return )

Bool Iterators_obj::equals( ::Dynamic a, ::Dynamic b, ::Dynamic equality){
            	HX_STACK_FRAME("thx.Iterators","equals",0x4effd412,"thx.Iterators.equals","thx/Iterators.hx",41,0x9e2b98e4)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(equality,"equality")
HXLINE(  42)		Bool _hx_tmp = hx::IsNull( equality );
HXDLIN(  42)		if (_hx_tmp) {
HXLINE(  42)			equality = ::thx::Functions_obj::equality_dyn();
            		}
HXLINE(  43)		HX_VAR( Bool,an);
HXDLIN(  43)		HX_VAR( Bool,bn);
HXLINE(  44)		while(true){
HXLINE(  45)			an = ( (Bool)( ::Dynamic(a->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
HXLINE(  46)			bn = ( (Bool)( ::Dynamic(b->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
HXLINE(  47)			Bool _hx_tmp1;
HXDLIN(  47)			if (!(an)) {
HXLINE(  47)				_hx_tmp1 = !(bn);
            			}
            			else {
HXLINE(  47)				_hx_tmp1 = false;
            			}
HXDLIN(  47)			if (_hx_tmp1) {
HXLINE(  48)				return true;
            			}
HXLINE(  49)			Bool _hx_tmp2;
HXDLIN(  49)			if (!(!(an))) {
HXLINE(  49)				_hx_tmp2 = !(bn);
            			}
            			else {
HXLINE(  49)				_hx_tmp2 = true;
            			}
HXDLIN(  49)			if (_hx_tmp2) {
HXLINE(  50)				return false;
            			}
HXLINE(  51)			 ::Dynamic _hx_tmp3 =  ::Dynamic(a->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN(  51)			 ::Dynamic _hx_tmp4 =  ::Dynamic(b->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN(  51)			Bool _hx_tmp5 = !(( (Bool)(equality(_hx_tmp3,_hx_tmp4)) ));
HXDLIN(  51)			if (_hx_tmp5) {
HXLINE(  52)				return false;
            			}
            		}
HXLINE(  44)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Iterators_obj,equals,return )

 ::Dynamic Iterators_obj::get( ::Dynamic it,Int index){
            	HX_STACK_FRAME("thx.Iterators","get",0x054c08e3,"thx.Iterators.get","thx/Iterators.hx",62,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(index,"index")
HXLINE(  63)		HX_VARI( Int,pos) = (int)0;
HXLINE(  64)		while(true){
HXLINE(  64)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  64)			if (_hx_tmp) {
HXLINE(  64)				goto _hx_goto_3;
            			}
HXDLIN(  64)			HX_VARI(  ::Dynamic,i) =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE(  65)			Int _hx_tmp1 = pos++;
HXDLIN(  65)			if ((_hx_tmp1 == index)) {
HXLINE(  66)				return i;
            			}
            		}
            		_hx_goto_3:;
HXLINE(  68)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,get,return )

::hx::EnumBase Iterators_obj::getOption( ::Dynamic it,Int index){
            	HX_STACK_FRAME("thx.Iterators","getOption",0xf1999cb8,"thx.Iterators.getOption","thx/Iterators.hx",75,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(index,"index")
HXLINE(  75)		HX_VARI(  ::Dynamic,value) = ::thx::Iterators_obj::get(it,index);
HXDLIN(  75)		if (hx::IsNull( value )) {
HXLINE(  75)			return ::haxe::ds::Option_obj::None_dyn();
            		}
            		else {
HXLINE(  75)			return ::haxe::ds::Option_obj::Some(value);
            		}
HXDLIN(  75)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,getOption,return )

void Iterators_obj::eachPair( ::Dynamic it, ::Dynamic handler){
            	HX_STACK_FRAME("thx.Iterators","eachPair",0x17255b4e,"thx.Iterators.eachPair","thx/Iterators.hx",81,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(handler,"handler")
HXLINE(  81)		::cpp::VirtualArray _hx_tmp = ::thx::Iterators_obj::toArray(it);
HXDLIN(  81)		::thx::Arrays_obj::eachPair(_hx_tmp,handler);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,eachPair,(void))

::cpp::VirtualArray Iterators_obj::filter( ::Dynamic it, ::Dynamic predicate){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,predicate) HXARGC(2)
            		::cpp::VirtualArray _hx_run(::cpp::VirtualArray acc, ::Dynamic element){
            			HX_STACK_FRAME("thx.Iterators","filter",0x1442058b,"thx.Iterators.filter","thx/Iterators.hx",87,0x9e2b98e4)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(element,"element")
HXLINE(  88)			Bool _hx_tmp = ( (Bool)(predicate(element)) );
HXDLIN(  88)			if (_hx_tmp) {
HXLINE(  89)				acc->push(element);
            			}
HXLINE(  90)			return acc;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.Iterators","filter",0x1442058b,"thx.Iterators.filter","thx/Iterators.hx",87,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(predicate,"predicate")
HXLINE(  87)		return ( (::cpp::VirtualArray)(::thx::Iterators_obj::reduce(it, ::Dynamic(new _hx_Closure_0(predicate)),::cpp::VirtualArray_obj::__new(0))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,filter,return )

 ::Dynamic Iterators_obj::find( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("thx.Iterators","find",0x9c958b4c,"thx.Iterators.find","thx/Iterators.hx",96,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE(  97)		while(true){
HXLINE(  97)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  97)			if (_hx_tmp) {
HXLINE(  97)				goto _hx_goto_4;
            			}
HXDLIN(  97)			HX_VARI(  ::Dynamic,element) =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE(  98)			Bool _hx_tmp1 = ( (Bool)(f(element)) );
HXDLIN(  98)			if (_hx_tmp1) {
HXLINE(  99)				return element;
            			}
            		}
            		_hx_goto_4:;
HXLINE( 100)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,find,return )

::hx::EnumBase Iterators_obj::findOption( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("thx.Iterators","findOption",0x9a3e53e1,"thx.Iterators.findOption","thx/Iterators.hx",107,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 107)		HX_VARI(  ::Dynamic,value) = ::thx::Iterators_obj::find(it,f);
HXDLIN( 107)		if (hx::IsNull( value )) {
HXLINE( 107)			return ::haxe::ds::Option_obj::None_dyn();
            		}
            		else {
HXLINE( 107)			return ::haxe::ds::Option_obj::Some(value);
            		}
HXDLIN( 107)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,findOption,return )

 ::Dynamic Iterators_obj::first( ::Dynamic it){
            	HX_STACK_FRAME("thx.Iterators","first",0x66476dbd,"thx.Iterators.first","thx/Iterators.hx",113,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
HXLINE( 113)		Bool _hx_tmp = ( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
HXDLIN( 113)		if (_hx_tmp) {
HXLINE( 113)			return  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
            		}
            		else {
HXLINE( 113)			return null();
            		}
HXDLIN( 113)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iterators_obj,first,return )

Bool Iterators_obj::hasElements( ::Dynamic it){
            	HX_STACK_FRAME("thx.Iterators","hasElements",0xd2dd38fe,"thx.Iterators.hasElements","thx/Iterators.hx",119,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
HXLINE( 119)		return ( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iterators_obj,hasElements,return )

Int Iterators_obj::indexOf( ::Dynamic it, ::Dynamic element){
            	HX_STACK_FRAME("thx.Iterators","indexOf",0x7cfb7b96,"thx.Iterators.indexOf","thx/Iterators.hx",124,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(element,"element")
HXLINE( 125)		HX_VARI( Int,pos) = (int)0;
HXLINE( 126)		while(true){
HXLINE( 126)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 126)			if (_hx_tmp) {
HXLINE( 126)				goto _hx_goto_5;
            			}
HXDLIN( 126)			HX_VARI(  ::Dynamic,v) =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 127)			if (hx::IsEq( element,v )) {
HXLINE( 128)				return pos;
            			}
HXLINE( 129)			++pos;
            		}
            		_hx_goto_5:;
HXLINE( 131)		return (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,indexOf,return )

Bool Iterators_obj::isEmpty( ::Dynamic it){
            	HX_STACK_FRAME("thx.Iterators","isEmpty",0xa89c1110,"thx.Iterators.isEmpty","thx/Iterators.hx",138,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
HXLINE( 138)		return !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iterators_obj,isEmpty,return )

Bool Iterators_obj::isIterator( ::Dynamic v){
            	HX_STACK_FRAME("thx.Iterators","isIterator",0x53b9274b,"thx.Iterators.isIterator","thx/Iterators.hx",146,0x9e2b98e4)
            	HX_STACK_ARG(v,"v")
HXLINE( 147)		HX_VAR( ::Array< ::String >,fields);
HXDLIN( 147)		Bool _hx_tmp;
HXDLIN( 147)		Bool _hx_tmp1 = ::Reflect_obj::isObject(v);
HXDLIN( 147)		if (_hx_tmp1) {
HXLINE( 147)			hx::Class _hx_tmp2 = ::Type_obj::getClass(v);
HXDLIN( 147)			_hx_tmp = hx::IsNull( _hx_tmp2 );
            		}
            		else {
HXLINE( 147)			_hx_tmp = false;
            		}
HXDLIN( 147)		if (_hx_tmp) {
HXLINE( 147)			fields = ::Reflect_obj::fields(v);
            		}
            		else {
HXLINE( 147)			hx::Class _hx_tmp3 = ::Type_obj::getClass(v);
HXDLIN( 147)			fields = ::Type_obj::getInstanceFields(_hx_tmp3);
            		}
HXLINE( 148)		Bool _hx_tmp4;
HXDLIN( 148)		Bool _hx_tmp5 = !(!(::Lambda_obj::has(fields,HX_("next",f3,84,02,49))));
HXDLIN( 148)		if (_hx_tmp5) {
HXLINE( 148)			_hx_tmp4 = !(::Lambda_obj::has(fields,HX_("hasNext",6d,a5,46,18)));
            		}
            		else {
HXLINE( 148)			_hx_tmp4 = true;
            		}
HXDLIN( 148)		if (_hx_tmp4) {
HXLINE( 148)			return false;
            		}
HXLINE( 149)		 ::Dynamic _hx_tmp6 = ::Reflect_obj::field(v,HX_("next",f3,84,02,49));
HXDLIN( 149)		Bool _hx_tmp7 = ::Reflect_obj::isFunction(_hx_tmp6);
HXDLIN( 149)		if (_hx_tmp7) {
HXLINE( 149)			 ::Dynamic _hx_tmp8 = ::Reflect_obj::field(v,HX_("hasNext",6d,a5,46,18));
HXDLIN( 149)			return ::Reflect_obj::isFunction(_hx_tmp8);
            		}
            		else {
HXLINE( 149)			return false;
            		}
HXDLIN( 149)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iterators_obj,isIterator,return )

 ::Dynamic Iterators_obj::last( ::Dynamic it){
            	HX_STACK_FRAME("thx.Iterators","last",0xa086c569,"thx.Iterators.last","thx/Iterators.hx",155,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
HXLINE( 156)		HX_VARI(  ::Dynamic,buf) = null();
HXLINE( 157)		while(true){
HXLINE( 157)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 157)			if (_hx_tmp) {
HXLINE( 157)				goto _hx_goto_6;
            			}
HXDLIN( 157)			buf =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
            		}
            		_hx_goto_6:;
HXLINE( 158)		return buf;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iterators_obj,last,return )

void Iterators_obj::forEach( ::Dynamic it, ::Dynamic proc){
            	HX_STACK_FRAME("thx.Iterators","forEach",0x60fa5c77,"thx.Iterators.forEach","thx/Iterators.hx",166,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(proc,"proc")
HXLINE( 166)		while(true){
HXLINE( 166)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 166)			if (_hx_tmp) {
HXLINE( 166)				goto _hx_goto_7;
            			}
HXLINE( 167)			 ::Dynamic _hx_tmp1 =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 167)			proc(_hx_tmp1);
            		}
            		_hx_goto_7:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,forEach,(void))

::cpp::VirtualArray Iterators_obj::map( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("thx.Iterators","map",0x055092e9,"thx.Iterators.map","thx/Iterators.hx",174,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 175)		HX_VARI( ::cpp::VirtualArray,acc) = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 176)		while(true){
HXLINE( 176)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 176)			if (_hx_tmp) {
HXLINE( 176)				goto _hx_goto_8;
            			}
HXDLIN( 176)			HX_VARI(  ::Dynamic,v) =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 177)			 ::Dynamic _hx_tmp1 = f(v);
HXDLIN( 177)			acc->push(_hx_tmp1);
            		}
            		_hx_goto_8:;
HXLINE( 178)		return acc;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,map,return )

 ::Dynamic Iterators_obj::fmap( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("thx.Iterators","fmap",0x9c988909,"thx.Iterators.fmap","thx/Iterators.hx",186,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 186)		return  ::thx::MapIterator_obj::__new(it,f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,fmap,return )

::cpp::VirtualArray Iterators_obj::mapi( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("thx.Iterators","mapi",0xa12ff960,"thx.Iterators.mapi","thx/Iterators.hx",191,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 192)		HX_VARI( ::cpp::VirtualArray,acc) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 192)		HX_VARI( Int,i) = (int)0;
HXLINE( 194)		while(true){
HXLINE( 194)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 194)			if (_hx_tmp) {
HXLINE( 194)				goto _hx_goto_9;
            			}
HXDLIN( 194)			HX_VARI(  ::Dynamic,v) =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 195)			Int _hx_tmp1 = i++;
HXDLIN( 195)			 ::Dynamic _hx_tmp2 = f(v,_hx_tmp1);
HXDLIN( 195)			acc->push(_hx_tmp2);
            		}
            		_hx_goto_9:;
HXLINE( 196)		return acc;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,mapi,return )

 ::Dynamic Iterators_obj::fmapi( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("thx.Iterators","fmapi",0x68df5f40,"thx.Iterators.fmapi","thx/Iterators.hx",205,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 205)		return  ::thx::MapIIterator_obj::__new(it,f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,fmapi,return )

::cpp::VirtualArray Iterators_obj::order( ::Dynamic it, ::Dynamic sort){
            	HX_STACK_FRAME("thx.Iterators","order",0x9acae61b,"thx.Iterators.order","thx/Iterators.hx",210,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(sort,"sort")
HXLINE( 211)		HX_VARI( ::cpp::VirtualArray,n) = ::thx::Iterators_obj::toArray(it);
HXLINE( 212)		n->sort(sort);
HXLINE( 213)		return n;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,order,return )

 ::Dynamic Iterators_obj::reduce( ::Dynamic it, ::Dynamic callback, ::Dynamic initial){
            	HX_STACK_FRAME("thx.Iterators","reduce",0x8da71379,"thx.Iterators.reduce","thx/Iterators.hx",219,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(initial,"initial")
HXLINE( 220)		HX_VARI(  ::Dynamic,result) = initial;
HXLINE( 221)		while(true){
HXLINE( 221)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 221)			if (_hx_tmp) {
HXLINE( 221)				goto _hx_goto_10;
            			}
HXLINE( 222)			 ::Dynamic _hx_tmp1 =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 222)			result = callback(result,_hx_tmp1);
            		}
            		_hx_goto_10:;
HXLINE( 224)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Iterators_obj,reduce,return )

 ::Dynamic Iterators_obj::reducei( ::Dynamic it, ::Dynamic callback, ::Dynamic initial){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,initial1, ::Dynamic,callback) HXARGC(2)
            		void _hx_run( ::Dynamic v,Int i){
            			HX_STACK_FRAME("thx.Iterators","reducei",0x6489f6d0,"thx.Iterators.reducei","thx/Iterators.hx",231,0x9e2b98e4)
            			HX_STACK_ARG(v,"v")
            			HX_STACK_ARG(i,"i")
HXLINE( 231)			 ::Dynamic _hx_tmp = callback(initial1->__get((int)0),v,i);
HXDLIN( 231)			initial1->set((int)0,_hx_tmp);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACK_FRAME("thx.Iterators","reducei",0x6489f6d0,"thx.Iterators.reducei","thx/Iterators.hx",230,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(callback,"callback")
            	HX_STACK_ARG(initial,"initial")
HXLINE( 230)		HX_VARI_NAME( ::cpp::VirtualArray,initial1,"initial") = ::cpp::VirtualArray_obj::__new(1)->init(0,initial);
HXLINE( 231)		::thx::Iterators_obj::mapi(it, ::Dynamic(new _hx_Closure_0(initial1,callback)));
HXLINE( 232)		return initial1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Iterators_obj,reducei,return )

 ::Dynamic Iterators_obj::foldLeft( ::Dynamic it, ::Dynamic zero, ::Dynamic f){
            	HX_STACK_FRAME("thx.Iterators","foldLeft",0xdf7e653b,"thx.Iterators.foldLeft","thx/Iterators.hx",236,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(zero,"zero")
            	HX_STACK_ARG(f,"f")
HXLINE( 236)		return ::thx::Iterators_obj::reduce(it,f,zero);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Iterators_obj,foldLeft,return )

 ::Dynamic Iterators_obj::foldMap( ::Dynamic it, ::Dynamic f, ::Dynamic m){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,_e) HXARGC(2)
            		 ::Dynamic _hx_run( ::Dynamic a0, ::Dynamic a1){
            			HX_STACK_FRAME("thx.Iterators","foldMap",0x01014fe8,"thx.Iterators.foldMap","thx/Iterators.hx",242,0x9e2b98e4)
            			HX_STACK_ARG(a0,"a0")
            			HX_STACK_ARG(a1,"a1")
HXLINE( 242)			return ::thx::_Monoid::Monoid_Impl__obj::append(_e,a0,a1);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.Iterators","foldMap",0x01014fe8,"thx.Iterators.foldMap","thx/Iterators.hx",242,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(m,"m")
HXLINE( 242)		 ::Dynamic _hx_tmp = ::thx::Iterators_obj::fmap(it,f);
HXDLIN( 242)		 ::Dynamic _hx_tmp1 = ::thx::_Monoid::Monoid_Impl__obj::get_zero(m);
HXDLIN( 242)		HX_VARI(  ::Dynamic,_e) = m;
HXDLIN( 242)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_0(_e));
HXDLIN( 242)		return ::thx::Iterators_obj::foldLeft(_hx_tmp,_hx_tmp1,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Iterators_obj,foldMap,return )

::cpp::VirtualArray Iterators_obj::toArray( ::Dynamic it){
            	HX_STACK_FRAME("thx.Iterators","toArray",0x8e4feceb,"thx.Iterators.toArray","thx/Iterators.hx",247,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
HXLINE( 248)		HX_VARI( ::cpp::VirtualArray,elements) = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 249)		while(true){
HXLINE( 249)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(it->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 249)			if (_hx_tmp) {
HXLINE( 249)				goto _hx_goto_11;
            			}
HXDLIN( 249)			HX_VARI(  ::Dynamic,element) =  ::Dynamic(it->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 250)			elements->push(element);
            		}
            		_hx_goto_11:;
HXLINE( 251)		return elements;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iterators_obj,toArray,return )

 ::Dynamic Iterators_obj::unzip( ::Dynamic it){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,a2,::cpp::VirtualArray,a1) HXARGC(1)
            		void _hx_run( ::Dynamic t){
            			HX_STACK_FRAME("thx.Iterators","unzip",0x0c9e3bb5,"thx.Iterators.unzip","thx/Iterators.hx",259,0x9e2b98e4)
            			HX_STACK_ARG(t,"t")
HXLINE( 260)			a1->push( ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)));
HXLINE( 261)			a2->push( ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.Iterators","unzip",0x0c9e3bb5,"thx.Iterators.unzip","thx/Iterators.hx",257,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
HXLINE( 258)		HX_VARI( ::cpp::VirtualArray,a1) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 258)		HX_VARI( ::cpp::VirtualArray,a2) = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 259)		::thx::Iterators_obj::forEach(it, ::Dynamic(new _hx_Closure_0(a2,a1)));
HXLINE( 263)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),a1)
            			->setFixed(1,HX_("_1",f2,52,00,00),a2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iterators_obj,unzip,return )

 ::Dynamic Iterators_obj::unzip3( ::Dynamic it){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,a2,::cpp::VirtualArray,a1,::cpp::VirtualArray,a3) HXARGC(1)
            		void _hx_run( ::Dynamic t){
            			HX_STACK_FRAME("thx.Iterators","unzip3",0xfdd602de,"thx.Iterators.unzip3","thx/Iterators.hx",271,0x9e2b98e4)
            			HX_STACK_ARG(t,"t")
HXLINE( 272)			a1->push( ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)));
HXLINE( 273)			a2->push( ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)));
HXLINE( 274)			a3->push( ::Dynamic(t->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.Iterators","unzip3",0xfdd602de,"thx.Iterators.unzip3","thx/Iterators.hx",269,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
HXLINE( 270)		HX_VARI( ::cpp::VirtualArray,a1) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 270)		HX_VARI( ::cpp::VirtualArray,a2) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 270)		HX_VARI( ::cpp::VirtualArray,a3) = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 271)		::thx::Iterators_obj::forEach(it, ::Dynamic(new _hx_Closure_0(a2,a1,a3)));
HXLINE( 276)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("_0",f1,52,00,00),a1)
            			->setFixed(1,HX_("_1",f2,52,00,00),a2)
            			->setFixed(2,HX_("_2",f3,52,00,00),a3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iterators_obj,unzip3,return )

 ::Dynamic Iterators_obj::unzip4( ::Dynamic it){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,a2,::cpp::VirtualArray,a1,::cpp::VirtualArray,a4,::cpp::VirtualArray,a3) HXARGC(1)
            		void _hx_run( ::Dynamic t){
            			HX_STACK_FRAME("thx.Iterators","unzip4",0xfdd602df,"thx.Iterators.unzip4","thx/Iterators.hx",284,0x9e2b98e4)
            			HX_STACK_ARG(t,"t")
HXLINE( 285)			a1->push( ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)));
HXLINE( 286)			a2->push( ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)));
HXLINE( 287)			a3->push( ::Dynamic(t->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)));
HXLINE( 288)			a4->push( ::Dynamic(t->__Field(HX_("_3",f4,52,00,00),hx::paccDynamic)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.Iterators","unzip4",0xfdd602df,"thx.Iterators.unzip4","thx/Iterators.hx",282,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
HXLINE( 283)		HX_VARI( ::cpp::VirtualArray,a1) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 283)		HX_VARI( ::cpp::VirtualArray,a2) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 283)		HX_VARI( ::cpp::VirtualArray,a3) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 283)		HX_VARI( ::cpp::VirtualArray,a4) = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 284)		::thx::Iterators_obj::forEach(it, ::Dynamic(new _hx_Closure_0(a2,a1,a4,a3)));
HXLINE( 290)		return  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("_0",f1,52,00,00),a1)
            			->setFixed(1,HX_("_1",f2,52,00,00),a2)
            			->setFixed(2,HX_("_2",f3,52,00,00),a3)
            			->setFixed(3,HX_("_3",f4,52,00,00),a4));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iterators_obj,unzip4,return )

 ::Dynamic Iterators_obj::unzip5( ::Dynamic it){
            		HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,a2,::cpp::VirtualArray,a5,::cpp::VirtualArray,a1,::cpp::VirtualArray,a4,::cpp::VirtualArray,a3) HXARGC(1)
            		void _hx_run( ::Dynamic t){
            			HX_STACK_FRAME("thx.Iterators","unzip5",0xfdd602e0,"thx.Iterators.unzip5","thx/Iterators.hx",298,0x9e2b98e4)
            			HX_STACK_ARG(t,"t")
HXLINE( 299)			a1->push( ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)));
HXLINE( 300)			a2->push( ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)));
HXLINE( 301)			a3->push( ::Dynamic(t->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)));
HXLINE( 302)			a4->push( ::Dynamic(t->__Field(HX_("_3",f4,52,00,00),hx::paccDynamic)));
HXLINE( 303)			a5->push( ::Dynamic(t->__Field(HX_("_4",f5,52,00,00),hx::paccDynamic)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.Iterators","unzip5",0xfdd602e0,"thx.Iterators.unzip5","thx/Iterators.hx",296,0x9e2b98e4)
            	HX_STACK_ARG(it,"it")
HXLINE( 297)		HX_VARI( ::cpp::VirtualArray,a1) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 297)		HX_VARI( ::cpp::VirtualArray,a2) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 297)		HX_VARI( ::cpp::VirtualArray,a3) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 297)		HX_VARI( ::cpp::VirtualArray,a4) = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 297)		HX_VARI( ::cpp::VirtualArray,a5) = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 298)		::thx::Iterators_obj::forEach(it, ::Dynamic(new _hx_Closure_0(a2,a5,a1,a4,a3)));
HXLINE( 305)		return  ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("_0",f1,52,00,00),a1)
            			->setFixed(1,HX_("_1",f2,52,00,00),a2)
            			->setFixed(2,HX_("_2",f3,52,00,00),a3)
            			->setFixed(3,HX_("_3",f4,52,00,00),a4)
            			->setFixed(4,HX_("_4",f5,52,00,00),a5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iterators_obj,unzip5,return )

::Array< ::Dynamic> Iterators_obj::zip( ::Dynamic it1, ::Dynamic it2){
            	HX_STACK_FRAME("thx.Iterators","zip",0x055a772e,"thx.Iterators.zip","thx/Iterators.hx",311,0x9e2b98e4)
            	HX_STACK_ARG(it1,"it1")
            	HX_STACK_ARG(it2,"it2")
HXLINE( 312)		HX_VARI( ::Array< ::Dynamic>,array) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 313)		while(true){
HXLINE( 313)			Bool _hx_tmp;
HXDLIN( 313)			Bool _hx_tmp1 = ( (Bool)( ::Dynamic(it1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
HXDLIN( 313)			if (_hx_tmp1) {
HXLINE( 313)				_hx_tmp = ( (Bool)( ::Dynamic(it2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 313)				_hx_tmp = false;
            			}
HXDLIN( 313)			if (!(_hx_tmp)) {
HXLINE( 313)				goto _hx_goto_12;
            			}
HXLINE( 314)			HX_VARI(  ::Dynamic,_0) =  ::Dynamic(it1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 314)			HX_VARI(  ::Dynamic,_1) =  ::Dynamic(it2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 314)			array->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("_0",f1,52,00,00),_0)
            				->setFixed(1,HX_("_1",f2,52,00,00),_1)));
            		}
            		_hx_goto_12:;
HXLINE( 315)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iterators_obj,zip,return )

::Array< ::Dynamic> Iterators_obj::zip3( ::Dynamic it1, ::Dynamic it2, ::Dynamic it3){
            	HX_STACK_FRAME("thx.Iterators","zip3",0xa9cdd145,"thx.Iterators.zip3","thx/Iterators.hx",321,0x9e2b98e4)
            	HX_STACK_ARG(it1,"it1")
            	HX_STACK_ARG(it2,"it2")
            	HX_STACK_ARG(it3,"it3")
HXLINE( 322)		HX_VARI( ::Array< ::Dynamic>,array) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 323)		while(true){
HXLINE( 323)			Bool _hx_tmp;
HXDLIN( 323)			Bool _hx_tmp1;
HXDLIN( 323)			Bool _hx_tmp2 = ( (Bool)( ::Dynamic(it1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
HXDLIN( 323)			if (_hx_tmp2) {
HXLINE( 323)				_hx_tmp1 = ( (Bool)( ::Dynamic(it2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 323)				_hx_tmp1 = false;
            			}
HXDLIN( 323)			if (_hx_tmp1) {
HXLINE( 323)				_hx_tmp = ( (Bool)( ::Dynamic(it3->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 323)				_hx_tmp = false;
            			}
HXDLIN( 323)			if (!(_hx_tmp)) {
HXLINE( 323)				goto _hx_goto_13;
            			}
HXLINE( 324)			HX_VARI(  ::Dynamic,_0) =  ::Dynamic(it1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 324)			HX_VARI(  ::Dynamic,_1) =  ::Dynamic(it2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 324)			HX_VARI(  ::Dynamic,_2) =  ::Dynamic(it3->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 324)			array->push( ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("_0",f1,52,00,00),_0)
            				->setFixed(1,HX_("_1",f2,52,00,00),_1)
            				->setFixed(2,HX_("_2",f3,52,00,00),_2)));
            		}
            		_hx_goto_13:;
HXLINE( 325)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Iterators_obj,zip3,return )

::Array< ::Dynamic> Iterators_obj::zip4( ::Dynamic it1, ::Dynamic it2, ::Dynamic it3, ::Dynamic it4){
            	HX_STACK_FRAME("thx.Iterators","zip4",0xa9cdd146,"thx.Iterators.zip4","thx/Iterators.hx",331,0x9e2b98e4)
            	HX_STACK_ARG(it1,"it1")
            	HX_STACK_ARG(it2,"it2")
            	HX_STACK_ARG(it3,"it3")
            	HX_STACK_ARG(it4,"it4")
HXLINE( 332)		HX_VARI( ::Array< ::Dynamic>,array) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 333)		while(true){
HXLINE( 333)			Bool _hx_tmp;
HXDLIN( 333)			Bool _hx_tmp1;
HXDLIN( 333)			Bool _hx_tmp2;
HXDLIN( 333)			Bool _hx_tmp3 = ( (Bool)( ::Dynamic(it1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
HXDLIN( 333)			if (_hx_tmp3) {
HXLINE( 333)				_hx_tmp2 = ( (Bool)( ::Dynamic(it2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 333)				_hx_tmp2 = false;
            			}
HXDLIN( 333)			if (_hx_tmp2) {
HXLINE( 333)				_hx_tmp1 = ( (Bool)( ::Dynamic(it3->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 333)				_hx_tmp1 = false;
            			}
HXDLIN( 333)			if (_hx_tmp1) {
HXLINE( 333)				_hx_tmp = ( (Bool)( ::Dynamic(it4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 333)				_hx_tmp = false;
            			}
HXDLIN( 333)			if (!(_hx_tmp)) {
HXLINE( 333)				goto _hx_goto_14;
            			}
HXLINE( 334)			HX_VARI(  ::Dynamic,_0) =  ::Dynamic(it1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 334)			HX_VARI(  ::Dynamic,_1) =  ::Dynamic(it2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 334)			HX_VARI(  ::Dynamic,_2) =  ::Dynamic(it3->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 334)			HX_VARI(  ::Dynamic,_3) =  ::Dynamic(it4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 334)			array->push( ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("_0",f1,52,00,00),_0)
            				->setFixed(1,HX_("_1",f2,52,00,00),_1)
            				->setFixed(2,HX_("_2",f3,52,00,00),_2)
            				->setFixed(3,HX_("_3",f4,52,00,00),_3)));
            		}
            		_hx_goto_14:;
HXLINE( 335)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Iterators_obj,zip4,return )

::Array< ::Dynamic> Iterators_obj::zip5( ::Dynamic it1, ::Dynamic it2, ::Dynamic it3, ::Dynamic it4, ::Dynamic it5){
            	HX_STACK_FRAME("thx.Iterators","zip5",0xa9cdd147,"thx.Iterators.zip5","thx/Iterators.hx",341,0x9e2b98e4)
            	HX_STACK_ARG(it1,"it1")
            	HX_STACK_ARG(it2,"it2")
            	HX_STACK_ARG(it3,"it3")
            	HX_STACK_ARG(it4,"it4")
            	HX_STACK_ARG(it5,"it5")
HXLINE( 342)		HX_VARI( ::Array< ::Dynamic>,array) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 343)		while(true){
HXLINE( 343)			Bool _hx_tmp;
HXDLIN( 343)			Bool _hx_tmp1;
HXDLIN( 343)			Bool _hx_tmp2;
HXDLIN( 343)			Bool _hx_tmp3;
HXDLIN( 343)			Bool _hx_tmp4 = ( (Bool)( ::Dynamic(it1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
HXDLIN( 343)			if (_hx_tmp4) {
HXLINE( 343)				_hx_tmp3 = ( (Bool)( ::Dynamic(it2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 343)				_hx_tmp3 = false;
            			}
HXDLIN( 343)			if (_hx_tmp3) {
HXLINE( 343)				_hx_tmp2 = ( (Bool)( ::Dynamic(it3->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 343)				_hx_tmp2 = false;
            			}
HXDLIN( 343)			if (_hx_tmp2) {
HXLINE( 343)				_hx_tmp1 = ( (Bool)( ::Dynamic(it4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 343)				_hx_tmp1 = false;
            			}
HXDLIN( 343)			if (_hx_tmp1) {
HXLINE( 343)				_hx_tmp = ( (Bool)( ::Dynamic(it5->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            			}
            			else {
HXLINE( 343)				_hx_tmp = false;
            			}
HXDLIN( 343)			if (!(_hx_tmp)) {
HXLINE( 343)				goto _hx_goto_15;
            			}
HXLINE( 344)			HX_VARI(  ::Dynamic,_0) =  ::Dynamic(it1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 344)			HX_VARI(  ::Dynamic,_1) =  ::Dynamic(it2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 344)			HX_VARI(  ::Dynamic,_2) =  ::Dynamic(it3->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 344)			HX_VARI(  ::Dynamic,_3) =  ::Dynamic(it4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 344)			HX_VARI(  ::Dynamic,_4) =  ::Dynamic(it5->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 344)			array->push( ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("_0",f1,52,00,00),_0)
            				->setFixed(1,HX_("_1",f2,52,00,00),_1)
            				->setFixed(2,HX_("_2",f3,52,00,00),_2)
            				->setFixed(3,HX_("_3",f4,52,00,00),_3)
            				->setFixed(4,HX_("_4",f5,52,00,00),_4)));
            		}
            		_hx_goto_15:;
HXLINE( 345)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Iterators_obj,zip5,return )


Iterators_obj::Iterators_obj()
{
}

bool Iterators_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { outValue = all_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"any") ) { outValue = any_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zip") ) { outValue = zip_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"find") ) { outValue = find_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"last") ) { outValue = last_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fmap") ) { outValue = fmap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mapi") ) { outValue = mapi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zip3") ) { outValue = zip3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zip4") ) { outValue = zip4_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zip5") ) { outValue = zip5_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"first") ) { outValue = first_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fmapi") ) { outValue = fmapi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"order") ) { outValue = order_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unzip") ) { outValue = unzip_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"filter") ) { outValue = filter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reduce") ) { outValue = reduce_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unzip3") ) { outValue = unzip3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unzip4") ) { outValue = unzip4_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unzip5") ) { outValue = unzip5_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indexOf") ) { outValue = indexOf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { outValue = isEmpty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"forEach") ) { outValue = forEach_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reducei") ) { outValue = reducei_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"foldMap") ) { outValue = foldMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"eachPair") ) { outValue = eachPair_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"foldLeft") ) { outValue = foldLeft_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getOption") ) { outValue = getOption_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"findOption") ) { outValue = findOption_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isIterator") ) { outValue = isIterator_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hasElements") ) { outValue = hasElements_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Iterators_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Iterators_obj_sStaticStorageInfo = 0;
#endif

static void Iterators_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Iterators_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Iterators_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Iterators_obj::__mClass,"__mClass");
};

#endif

hx::Class Iterators_obj::__mClass;

static ::String Iterators_obj_sStaticFields[] = {
	HX_HCSTRING("all","\x21","\xf9","\x49","\x00"),
	HX_HCSTRING("any","\xec","\xfa","\x49","\x00"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("getOption","\xab","\x5c","\xd1","\xa7"),
	HX_HCSTRING("eachPair","\xbb","\x1a","\xb5","\xfe"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("findOption","\x8e","\x88","\xce","\x54"),
	HX_HCSTRING("first","\x30","\x78","\x9d","\x00"),
	HX_HCSTRING("hasElements","\xb1","\x1b","\x7b","\x56"),
	HX_HCSTRING("indexOf","\xc9","\x48","\xbf","\xe0"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("isIterator","\xf8","\x5b","\x49","\x0e"),
	HX_HCSTRING("last","\x56","\x0a","\xad","\x47"),
	HX_HCSTRING("forEach","\xaa","\x29","\xbe","\xc4"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("fmap","\xf6","\xcd","\xbe","\x43"),
	HX_HCSTRING("mapi","\x4d","\x3e","\x56","\x48"),
	HX_HCSTRING("fmapi","\xb3","\x69","\x35","\x03"),
	HX_HCSTRING("order","\x8e","\xf0","\x20","\x35"),
	HX_HCSTRING("reduce","\xa6","\x2d","\x9a","\xfe"),
	HX_HCSTRING("reducei","\x03","\xc4","\x4d","\xc8"),
	HX_HCSTRING("foldLeft","\xa8","\x24","\x0e","\xc7"),
	HX_HCSTRING("foldMap","\x1b","\x1d","\xc5","\x64"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("unzip","\x28","\x46","\xf4","\xa6"),
	HX_HCSTRING("unzip3","\x0b","\x1d","\xc9","\x6e"),
	HX_HCSTRING("unzip4","\x0c","\x1d","\xc9","\x6e"),
	HX_HCSTRING("unzip5","\x0d","\x1d","\xc9","\x6e"),
	HX_HCSTRING("zip","\xe1","\xee","\x5c","\x00"),
	HX_HCSTRING("zip3","\x32","\x16","\xf4","\x50"),
	HX_HCSTRING("zip4","\x33","\x16","\xf4","\x50"),
	HX_HCSTRING("zip5","\x34","\x16","\xf4","\x50"),
	::String(null())
};

void Iterators_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Iterators","\x3b","\x7e","\xda","\x7b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Iterators_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Iterators_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Iterators_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Iterators_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Iterators_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Iterators_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Iterators_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
