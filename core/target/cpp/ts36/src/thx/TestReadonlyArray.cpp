// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_TestReadonlyArray
#include <thx/TestReadonlyArray.h>
#endif
#ifndef INCLUDED_thx__ReadonlyArray_ReadonlyArray_Impl_
#include <thx/_ReadonlyArray/ReadonlyArray_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestReadonlyArray_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestReadonlyArray","new",0xa0085ead,"thx.TestReadonlyArray.new","thx/TestReadonlyArray.hx",13,0x89a23be4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  13)		this->x = i;
            	}

Dynamic TestReadonlyArray_obj::__CreateEmpty() { return new TestReadonlyArray_obj; }

hx::ObjectPtr< TestReadonlyArray_obj > TestReadonlyArray_obj::__new(Int i)
{
	hx::ObjectPtr< TestReadonlyArray_obj > _hx_result = new TestReadonlyArray_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestReadonlyArray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestReadonlyArray_obj > _hx_result = new TestReadonlyArray_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestReadonlyArray_obj::testInsertAt(){
            	HX_STACK_FRAME("thx.TestReadonlyArray","testInsertAt",0x23d66311,"thx.TestReadonlyArray.testInsertAt","thx/TestReadonlyArray.hx",17,0x89a23be4)
            	HX_STACK_THIS(this)
HXLINE(  17)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  17)		HX_VARI( Int,_g) = this->x;
HXDLIN(  17)		while((_g1 < _g)){
HXLINE(  17)			++_g1;
HXLINE(  18)			HX_VARI( ::Array< Int >,a) = ::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)4);
HXLINE(  19)			::Array< Int > _hx_tmp = a->slice((int)0,(int)0)->concat(::Array_obj< Int >::__new(1)->init(0,(int)0));
HXDLIN(  19)			::Array< Int > _hx_tmp1 = a->slice((int)0,null());
HXLINE(  18)			HX_VARI( ::Array< Int >,b) = _hx_tmp->concat(_hx_tmp1);
HXLINE(  20)			::utest::Assert_obj::isTrue(hx::IsNotEq( a,b ),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),20,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testInsertAt",fe,a2,26,35)));
HXLINE(  21)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(4)->init(0,(int)0)->init(1,(int)1)->init(2,(int)2)->init(3,(int)4),b,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),21,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testInsertAt",fe,a2,26,35)));
HXLINE(  23)			::Array< Int > _hx_tmp2 = a->slice((int)0,(int)2)->concat(::Array_obj< Int >::__new(1)->init(0,(int)3));
HXDLIN(  23)			::Array< Int > _hx_tmp3 = a->slice((int)2,null());
HXDLIN(  23)			b = _hx_tmp2->concat(_hx_tmp3);
HXLINE(  24)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4),b,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),24,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testInsertAt",fe,a2,26,35)));
HXLINE(  26)			::Array< Int > _hx_tmp4 = a->slice((int)0,(int)10)->concat(::Array_obj< Int >::__new(1)->init(0,(int)5));
HXDLIN(  26)			::Array< Int > _hx_tmp5 = a->slice((int)10,null());
HXDLIN(  26)			b = _hx_tmp4->concat(_hx_tmp5);
HXLINE(  27)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,(int)2)->init(2,(int)4)->init(3,(int)5),b,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),27,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testInsertAt",fe,a2,26,35)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestReadonlyArray_obj,testInsertAt,(void))

void TestReadonlyArray_obj::testReplaceAt(){
            	HX_STACK_FRAME("thx.TestReadonlyArray","testReplaceAt",0x1a44c422,"thx.TestReadonlyArray.testReplaceAt","thx/TestReadonlyArray.hx",31,0x89a23be4)
            	HX_STACK_THIS(this)
HXLINE(  31)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  31)		HX_VARI( Int,_g) = this->x;
HXDLIN(  31)		while((_g1 < _g)){
HXLINE(  31)			++_g1;
HXLINE(  32)			HX_VARI( ::Array< Int >,a) = ::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)4);
HXLINE(  33)			::Array< Int > _hx_tmp = a->slice((int)0,(int)0)->concat(::Array_obj< Int >::__new(1)->init(0,(int)0));
HXDLIN(  33)			::Array< Int > _hx_tmp1 = a->slice((int)1,null());
HXLINE(  32)			HX_VARI( ::Array< Int >,b) = _hx_tmp->concat(_hx_tmp1);
HXLINE(  34)			::utest::Assert_obj::isTrue(hx::IsNotEq( a,b ),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),34,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testReplaceAt",95,73,2c,2f)));
HXLINE(  35)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)0)->init(1,(int)2)->init(2,(int)4),b,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),35,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testReplaceAt",95,73,2c,2f)));
HXLINE(  37)			::Array< Int > _hx_tmp2 = a->slice((int)0,(int)2)->concat(::Array_obj< Int >::__new(1)->init(0,(int)3));
HXDLIN(  37)			::Array< Int > _hx_tmp3 = a->slice((int)3,null());
HXDLIN(  37)			b = _hx_tmp2->concat(_hx_tmp3);
HXLINE(  38)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),b,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),38,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testReplaceAt",95,73,2c,2f)));
HXLINE(  40)			::Array< Int > _hx_tmp4 = a->slice((int)0,(int)10)->concat(::Array_obj< Int >::__new(1)->init(0,(int)5));
HXDLIN(  40)			::Array< Int > _hx_tmp5 = a->slice((int)11,null());
HXDLIN(  40)			b = _hx_tmp4->concat(_hx_tmp5);
HXLINE(  41)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,(int)2)->init(2,(int)4)->init(3,(int)5),b,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),41,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testReplaceAt",95,73,2c,2f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestReadonlyArray_obj,testReplaceAt,(void))

void TestReadonlyArray_obj::testPush(){
            	HX_STACK_FRAME("thx.TestReadonlyArray","testPush",0xb81711df,"thx.TestReadonlyArray.testPush","thx/TestReadonlyArray.hx",45,0x89a23be4)
            	HX_STACK_THIS(this)
HXLINE(  45)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  45)		HX_VARI( Int,_g) = this->x;
HXDLIN(  45)		while((_g1 < _g)){
HXLINE(  45)			++_g1;
HXLINE(  46)			HX_VARI( ::Array< Int >,a) = ::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3);
HXLINE(  47)			HX_VARI( ::Array< Int >,b) = a->concat(::Array_obj< Int >::__new(1)->init(0,(int)4));
HXLINE(  48)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),a,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),48,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testPush",4c,97,93,4d)));
HXLINE(  49)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->init(3,(int)4),b,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),49,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testPush",4c,97,93,4d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestReadonlyArray_obj,testPush,(void))

void TestReadonlyArray_obj::testPop(){
            	HX_STACK_FRAME("thx.TestReadonlyArray","testPop",0x83b2052c,"thx.TestReadonlyArray.testPop","thx/TestReadonlyArray.hx",53,0x89a23be4)
            	HX_STACK_THIS(this)
HXLINE(  53)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  53)		HX_VARI( Int,_g) = this->x;
HXDLIN(  53)		while((_g1 < _g)){
HXLINE(  53)			++_g1;
HXLINE(  54)			HX_VARI( ::Array< Int >,a) = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2);
HXLINE(  56)			 ::Dynamic _hx_tmp;
HXDLIN(  56)			Bool _hx_tmp1 = (a->length == (int)0);
HXDLIN(  56)			if (_hx_tmp1) {
HXLINE(  56)				_hx_tmp =  ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("_0",f1,52,00,00),null())
            					->setFixed(1,HX_("_1",f2,52,00,00),a));
            			}
            			else {
HXLINE(  56)				HX_VARI( Int,value) = a->__get((a->length - (int)1));
HXDLIN(  56)				HX_VARI( Int,pos) = (a->length - (int)1);
HXDLIN(  56)				::Array< Int > _hx_tmp2 = a->slice((int)0,pos);
HXDLIN(  56)				::Array< Int > _hx_tmp3 = a->slice((pos + (int)1),null());
HXDLIN(  56)				HX_VARI( ::Array< Int >,array) = _hx_tmp2->concat(_hx_tmp3);
HXDLIN(  56)				_hx_tmp =  ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("_0",f1,52,00,00),value)
            					->setFixed(1,HX_("_1",f2,52,00,00),array));
            			}
HXDLIN(  56)			HX_VARI(  ::Dynamic,result) = _hx_tmp;
HXLINE(  57)			::utest::Assert_obj::same((int)2, ::Dynamic(result->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),57,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testPop",5f,cc,c3,bd)));
HXLINE(  58)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)1), ::Dynamic(result->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),58,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testPop",5f,cc,c3,bd)));
HXLINE(  59)			HX_VARI( ::Array< Int >,b) = ( (::Array< Int >)(result->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)) );
HXLINE(  61)			 ::Dynamic _hx_tmp4;
HXDLIN(  61)			Bool _hx_tmp5 = (b->length == (int)0);
HXDLIN(  61)			if (_hx_tmp5) {
HXLINE(  61)				_hx_tmp4 =  ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("_0",f1,52,00,00),null())
            					->setFixed(1,HX_("_1",f2,52,00,00),b));
            			}
            			else {
HXLINE(  61)				HX_VARI_NAME( Int,value1,"value") = b->__get((b->length - (int)1));
HXDLIN(  61)				HX_VARI_NAME( Int,pos1,"pos") = (b->length - (int)1);
HXDLIN(  61)				::Array< Int > _hx_tmp6 = b->slice((int)0,pos1);
HXDLIN(  61)				::Array< Int > _hx_tmp7 = b->slice((pos1 + (int)1),null());
HXDLIN(  61)				HX_VARI_NAME( ::Array< Int >,array1,"array") = _hx_tmp6->concat(_hx_tmp7);
HXDLIN(  61)				_hx_tmp4 =  ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("_0",f1,52,00,00),value1)
            					->setFixed(1,HX_("_1",f2,52,00,00),array1));
            			}
HXDLIN(  61)			result = _hx_tmp4;
HXLINE(  62)			::utest::Assert_obj::same((int)1, ::Dynamic(result->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),62,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testPop",5f,cc,c3,bd)));
HXLINE(  63)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(0), ::Dynamic(result->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),63,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testPop",5f,cc,c3,bd)));
HXLINE(  64)			HX_VARI( ::Array< Int >,c) = ( (::Array< Int >)(result->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)) );
HXLINE(  66)			 ::Dynamic _hx_tmp8;
HXDLIN(  66)			Bool _hx_tmp9 = (c->length == (int)0);
HXDLIN(  66)			if (_hx_tmp9) {
HXLINE(  66)				_hx_tmp8 =  ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("_0",f1,52,00,00),null())
            					->setFixed(1,HX_("_1",f2,52,00,00),c));
            			}
            			else {
HXLINE(  66)				HX_VARI_NAME( Int,value2,"value") = c->__get((c->length - (int)1));
HXDLIN(  66)				HX_VARI_NAME( Int,pos2,"pos") = (c->length - (int)1);
HXDLIN(  66)				::Array< Int > _hx_tmp10 = c->slice((int)0,pos2);
HXDLIN(  66)				::Array< Int > _hx_tmp11 = c->slice((pos2 + (int)1),null());
HXDLIN(  66)				HX_VARI_NAME( ::Array< Int >,array2,"array") = _hx_tmp10->concat(_hx_tmp11);
HXDLIN(  66)				_hx_tmp8 =  ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("_0",f1,52,00,00),value2)
            					->setFixed(1,HX_("_1",f2,52,00,00),array2));
            			}
HXDLIN(  66)			result = _hx_tmp8;
HXLINE(  67)			::utest::Assert_obj::isNull( ::Dynamic(result->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),67,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testPop",5f,cc,c3,bd)));
HXLINE(  68)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(0), ::Dynamic(result->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),68,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testPop",5f,cc,c3,bd)));
HXLINE(  70)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),a,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),70,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testPop",5f,cc,c3,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestReadonlyArray_obj,testPop,(void))

void TestReadonlyArray_obj::testShift(){
            	HX_STACK_FRAME("thx.TestReadonlyArray","testShift",0x0dacf0dd,"thx.TestReadonlyArray.testShift","thx/TestReadonlyArray.hx",74,0x89a23be4)
            	HX_STACK_THIS(this)
HXLINE(  74)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  74)		HX_VARI( Int,_g) = this->x;
HXDLIN(  74)		while((_g1 < _g)){
HXLINE(  74)			++_g1;
HXLINE(  75)			HX_VARI( ::Array< Int >,a) = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2);
HXLINE(  77)			HX_VARI(  ::Dynamic,result) = ::thx::_ReadonlyArray::ReadonlyArray_Impl__obj::shift(a);
HXLINE(  78)			::utest::Assert_obj::same((int)1, ::Dynamic(result->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),78,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testShift",d0,2a,25,45)));
HXLINE(  79)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)2), ::Dynamic(result->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),79,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testShift",d0,2a,25,45)));
HXLINE(  82)			result = ::thx::_ReadonlyArray::ReadonlyArray_Impl__obj::shift( ::Dynamic(result->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)));
HXLINE(  83)			::utest::Assert_obj::same((int)2, ::Dynamic(result->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),83,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testShift",d0,2a,25,45)));
HXLINE(  84)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(0), ::Dynamic(result->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),84,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testShift",d0,2a,25,45)));
HXLINE(  87)			result = ::thx::_ReadonlyArray::ReadonlyArray_Impl__obj::shift( ::Dynamic(result->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)));
HXLINE(  88)			::utest::Assert_obj::isNull( ::Dynamic(result->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),88,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testShift",d0,2a,25,45)));
HXLINE(  89)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(0), ::Dynamic(result->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),89,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testShift",d0,2a,25,45)));
HXLINE(  91)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),a,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),91,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testShift",d0,2a,25,45)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestReadonlyArray_obj,testShift,(void))

void TestReadonlyArray_obj::testUnshift(){
            	HX_STACK_FRAME("thx.TestReadonlyArray","testUnshift",0x040bf4a4,"thx.TestReadonlyArray.testUnshift","thx/TestReadonlyArray.hx",95,0x89a23be4)
            	HX_STACK_THIS(this)
HXLINE(  95)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  95)		HX_VARI( Int,_g) = this->x;
HXDLIN(  95)		while((_g1 < _g)){
HXLINE(  95)			++_g1;
HXLINE(  96)			HX_VARI( ::Array< Int >,a) = ::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3);
HXLINE(  97)			HX_VARI( ::Array< Int >,b) = ::Array_obj< Int >::__new(1)->init(0,(int)4)->concat(a);
HXLINE(  98)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3),a,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),98,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testUnshift",57,d1,7c,35)));
HXLINE(  99)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(4)->init(0,(int)4)->init(1,(int)1)->init(2,(int)2)->init(3,(int)3),b,null(),null(),null(),hx::SourceInfo(HX_("TestReadonlyArray.hx",39,71,40,46),99,HX_("thx.TestReadonlyArray",3b,84,16,61),HX_("testUnshift",57,d1,7c,35)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestReadonlyArray_obj,testUnshift,(void))


TestReadonlyArray_obj::TestReadonlyArray_obj()
{
}

hx::Val TestReadonlyArray_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testPop") ) { return hx::Val( testPop_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testPush") ) { return hx::Val( testPush_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testShift") ) { return hx::Val( testShift_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testUnshift") ) { return hx::Val( testUnshift_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testInsertAt") ) { return hx::Val( testInsertAt_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testReplaceAt") ) { return hx::Val( testReplaceAt_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestReadonlyArray_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestReadonlyArray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestReadonlyArray_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestReadonlyArray_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestReadonlyArray_obj_sStaticStorageInfo = 0;
#endif

static ::String TestReadonlyArray_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testInsertAt","\xfe","\xa2","\x26","\x35"),
	HX_HCSTRING("testReplaceAt","\x95","\x73","\x2c","\x2f"),
	HX_HCSTRING("testPush","\x4c","\x97","\x93","\x4d"),
	HX_HCSTRING("testPop","\x5f","\xcc","\xc3","\xbd"),
	HX_HCSTRING("testShift","\xd0","\x2a","\x25","\x45"),
	HX_HCSTRING("testUnshift","\x57","\xd1","\x7c","\x35"),
	::String(null()) };

static void TestReadonlyArray_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestReadonlyArray_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestReadonlyArray_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestReadonlyArray_obj::__mClass,"__mClass");
};

#endif

hx::Class TestReadonlyArray_obj::__mClass;

void TestReadonlyArray_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestReadonlyArray","\x3b","\x84","\x16","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestReadonlyArray_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestReadonlyArray_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestReadonlyArray_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestReadonlyArray_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestReadonlyArray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestReadonlyArray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
