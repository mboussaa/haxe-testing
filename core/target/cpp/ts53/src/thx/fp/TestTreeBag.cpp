// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Functions
#include <thx/Functions.h>
#endif
#ifndef INCLUDED_thx_fp_TestTreeBag
#include <thx/fp/TestTreeBag.h>
#endif
#ifndef INCLUDED_thx_fp_TreeBagImpl
#include <thx/fp/TreeBagImpl.h>
#endif
#ifndef INCLUDED_thx_fp__TreeBag_TreeBag_Impl_
#include <thx/fp/_TreeBag/TreeBag_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace fp{

void TestTreeBag_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.fp.TestTreeBag","new",0xe560f830,"thx.fp.TestTreeBag.new","thx/fp/TestTreeBag.hx",11,0x5b7cabe0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  11)		this->x = i;
            	}

Dynamic TestTreeBag_obj::__CreateEmpty() { return new TestTreeBag_obj; }

hx::ObjectPtr< TestTreeBag_obj > TestTreeBag_obj::__new(Int i)
{
	hx::ObjectPtr< TestTreeBag_obj > _hx_result = new TestTreeBag_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestTreeBag_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestTreeBag_obj > _hx_result = new TestTreeBag_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

::hx::EnumBase TestTreeBag_obj::plusOneBag(Int i){
            	HX_STACK_FRAME("thx.fp.TestTreeBag","plusOneBag",0xcecbf82c,"thx.fp.TestTreeBag.plusOneBag","thx/fp/TestTreeBag.hx",19,0x5b7cabe0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  19)		return ::thx::fp::TreeBagImpl_obj::Cons((i + (int)1),::thx::fp::TestTreeBag_obj::t0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestTreeBag_obj,plusOneBag,return )

::hx::EnumBase TestTreeBag_obj::plusTwoBags(Int i){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,Int,i) HXARGC(1)
            		Int _hx_run(Int i0){
            			HX_STACK_FRAME("thx.fp.TestTreeBag","plusTwoBags",0x4ed08ced,"thx.fp.TestTreeBag.plusTwoBags","thx/fp/TestTreeBag.hx",23,0x5b7cabe0)
            			HX_STACK_ARG(i0,"i0")
HXLINE(  23)			return (i + i0);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.fp.TestTreeBag","plusTwoBags",0x4ed08ced,"thx.fp.TestTreeBag.plusTwoBags","thx/fp/TestTreeBag.hx",23,0x5b7cabe0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  23)		return ::thx::fp::_TreeBag::TreeBag_Impl__obj::map(::thx::fp::TestTreeBag_obj::t1, ::Dynamic(new _hx_Closure_0(i)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestTreeBag_obj,plusTwoBags,return )

void TestTreeBag_obj::testMap(){
            	HX_STACK_FRAME("thx.fp.TestTreeBag","testMap",0x1146c93a,"thx.fp.TestTreeBag.testMap","thx/fp/TestTreeBag.hx",27,0x5b7cabe0)
            	HX_STACK_THIS(this)
HXLINE(  27)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  27)		HX_VARI( Int,_g) = this->x;
HXDLIN(  27)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			Int _hx_run(Int i){
            				HX_STACK_FRAME("thx.fp.TestTreeBag","testMap",0x1146c93a,"thx.fp.TestTreeBag.testMap","thx/fp/TestTreeBag.hx",29,0x5b7cabe0)
            				HX_STACK_ARG(i,"i")
HXLINE(  29)				return (i + (int)1);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  27)			++_g1;
HXLINE(  28)			::hx::EnumBase _hx_tmp = ::thx::fp::_TreeBag::TreeBag_Impl__obj::map(::thx::fp::TestTreeBag_obj::t0,::thx::Functions_obj::identity_dyn());
HXDLIN(  28)			::utest::Assert_obj::same(::thx::fp::TestTreeBag_obj::t0,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestTreeBag.hx",06,01,0b,d6),28,HX_("thx.fp.TestTreeBag",3e,60,9d,09),HX_("testMap",6a,79,c1,bd)));
HXLINE(  29)			::hx::EnumBase _hx_tmp1 = ::thx::fp::_TreeBag::TreeBag_Impl__obj::map(::thx::fp::TestTreeBag_obj::t1, ::Dynamic(new _hx_Closure_0()));
HXDLIN(  29)			::utest::Assert_obj::same(::thx::fp::TestTreeBag_obj::t2,_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestTreeBag.hx",06,01,0b,d6),29,HX_("thx.fp.TestTreeBag",3e,60,9d,09),HX_("testMap",6a,79,c1,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTreeBag_obj,testMap,(void))

void TestTreeBag_obj::testToArray(){
            	HX_STACK_FRAME("thx.fp.TestTreeBag","testToArray",0x140e1fbc,"thx.fp.TestTreeBag.testToArray","thx/fp/TestTreeBag.hx",33,0x5b7cabe0)
            	HX_STACK_THIS(this)
HXLINE(  33)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  33)		HX_VARI( Int,_g) = this->x;
HXDLIN(  33)		while((_g1 < _g)){
HXLINE(  33)			++_g1;
HXLINE(  34)			::Array< Int > _hx_tmp = ::thx::fp::_TreeBag::TreeBag_Impl__obj::toArray(::thx::fp::TestTreeBag_obj::t1);
HXDLIN(  34)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)1)->init(1,(int)2),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestTreeBag.hx",06,01,0b,d6),34,HX_("thx.fp.TestTreeBag",3e,60,9d,09),HX_("testToArray",ec,a7,dc,ae)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTreeBag_obj,testToArray,(void))

void TestTreeBag_obj::testFlatMap(){
            	HX_STACK_FRAME("thx.fp.TestTreeBag","testFlatMap",0x08d87601,"thx.fp.TestTreeBag.testFlatMap","thx/fp/TestTreeBag.hx",38,0x5b7cabe0)
            	HX_STACK_THIS(this)
HXLINE(  38)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  38)		HX_VARI( Int,_g) = this->x;
HXDLIN(  38)		while((_g1 < _g)){
HXLINE(  38)			++_g1;
HXLINE(  39)			::Array< Int > _hx_tmp = ::thx::fp::_TreeBag::TreeBag_Impl__obj::toArray(::thx::fp::TestTreeBag_obj::t2);
HXDLIN(  39)			::hx::EnumBase _hx_tmp1 = ::thx::fp::_TreeBag::TreeBag_Impl__obj::flatMap(::thx::fp::TestTreeBag_obj::t1,this->plusOneBag_dyn());
HXDLIN(  39)			::Array< Int > _hx_tmp2 = ::thx::fp::_TreeBag::TreeBag_Impl__obj::toArray(_hx_tmp1);
HXDLIN(  39)			::utest::Assert_obj::same(_hx_tmp,_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestTreeBag.hx",06,01,0b,d6),39,HX_("thx.fp.TestTreeBag",3e,60,9d,09),HX_("testFlatMap",31,fe,a6,a3)));
HXLINE(  40)			HX_VARI( ::hx::EnumBase,xs) = ::thx::fp::TreeBagImpl_obj::Cons((int)3,::thx::fp::TestTreeBag_obj::t0);
HXDLIN(  40)			HX_VARI_NAME( ::hx::EnumBase,this1,"this") = ::thx::fp::TreeBagImpl_obj::Cons((int)2,xs);
HXDLIN(  40)			HX_VARI_NAME( ::hx::EnumBase,xs1,"xs") = ::thx::fp::TreeBagImpl_obj::Cons((int)4,::thx::fp::TestTreeBag_obj::t0);
HXDLIN(  40)			HX_VARI_NAME( ::hx::EnumBase,this2,"this") = ::thx::fp::TreeBagImpl_obj::Cons((int)3,xs1);
HXDLIN(  40)			HX_VARI( ::hx::EnumBase,other) = ::thx::fp::TestTreeBag_obj::t0;
HXDLIN(  40)			HX_VAR_NAME( ::hx::EnumBase,other1,"other");
HXDLIN(  40)			Int _hx_tmp3 = ( ( ::hx::EnumBase)(this2) )->_hx_getIndex();
HXDLIN(  40)			switch((int)(_hx_tmp3)){
            				case (int)0: {
HXLINE(  40)					Int _hx_tmp4 = ( ( ::hx::EnumBase)(other) )->_hx_getIndex();
HXDLIN(  40)					if ((_hx_tmp4 == (int)0)) {
HXLINE(  40)						other1 = ::thx::fp::TreeBagImpl_obj::Empty_dyn();
            					}
            					else {
HXLINE(  40)						other1 = other;
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(  40)					Int _hx_tmp5 = ( ( ::hx::EnumBase)(other) )->_hx_getIndex();
HXDLIN(  40)					if ((_hx_tmp5 == (int)0)) {
HXLINE(  40)						other1 = this2;
            					}
            					else {
HXLINE(  40)						Int _hx_tmp6 = ( ( ::hx::EnumBase)(this2->_hx_getObject(1).StaticCast< ::hx::EnumBase >()) )->_hx_getIndex();
HXDLIN(  40)						if ((_hx_tmp6 == (int)0)) {
HXLINE(  40)							other1 = ::thx::fp::TreeBagImpl_obj::Cons((int)3,other);
            						}
            						else {
HXLINE(  40)							other1 = ::thx::fp::TreeBagImpl_obj::Branch(this2,other);
            						}
            					}
            				}
            				break;
            				default:{
HXLINE(  40)					Int _hx_tmp7 = ( ( ::hx::EnumBase)(other) )->_hx_getIndex();
HXDLIN(  40)					if ((_hx_tmp7 == (int)0)) {
HXLINE(  40)						other1 = this2;
            					}
            					else {
HXLINE(  40)						other1 = ::thx::fp::TreeBagImpl_obj::Branch(this2,other);
            					}
            				}
            			}
HXDLIN(  40)			::hx::EnumBase _hx_tmp8;
HXDLIN(  40)			Int _hx_tmp9 = ( ( ::hx::EnumBase)(this1) )->_hx_getIndex();
HXDLIN(  40)			switch((int)(_hx_tmp9)){
            				case (int)0: {
HXLINE(  40)					Int _hx_tmp10 = ( ( ::hx::EnumBase)(other1) )->_hx_getIndex();
HXDLIN(  40)					if ((_hx_tmp10 == (int)0)) {
HXLINE(  40)						_hx_tmp8 = ::thx::fp::TreeBagImpl_obj::Empty_dyn();
            					}
            					else {
HXLINE(  40)						_hx_tmp8 = other1;
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(  40)					Int _hx_tmp11 = ( ( ::hx::EnumBase)(other1) )->_hx_getIndex();
HXDLIN(  40)					if ((_hx_tmp11 == (int)0)) {
HXLINE(  40)						_hx_tmp8 = this1;
            					}
            					else {
HXLINE(  40)						Int _hx_tmp12 = ( ( ::hx::EnumBase)(this1->_hx_getObject(1).StaticCast< ::hx::EnumBase >()) )->_hx_getIndex();
HXDLIN(  40)						if ((_hx_tmp12 == (int)0)) {
HXLINE(  40)							_hx_tmp8 = ::thx::fp::TreeBagImpl_obj::Cons((int)2,other1);
            						}
            						else {
HXLINE(  40)							_hx_tmp8 = ::thx::fp::TreeBagImpl_obj::Branch(this1,other1);
            						}
            					}
            				}
            				break;
            				default:{
HXLINE(  40)					Int _hx_tmp13 = ( ( ::hx::EnumBase)(other1) )->_hx_getIndex();
HXDLIN(  40)					if ((_hx_tmp13 == (int)0)) {
HXLINE(  40)						_hx_tmp8 = this1;
            					}
            					else {
HXLINE(  40)						_hx_tmp8 = ::thx::fp::TreeBagImpl_obj::Branch(this1,other1);
            					}
            				}
            			}
HXDLIN(  40)			::hx::EnumBase _hx_tmp14 = ::thx::fp::_TreeBag::TreeBag_Impl__obj::flatMap(::thx::fp::TestTreeBag_obj::t1,this->plusTwoBags_dyn());
HXDLIN(  40)			::utest::Assert_obj::same(_hx_tmp8,_hx_tmp14,null(),null(),null(),hx::SourceInfo(HX_("TestTreeBag.hx",06,01,0b,d6),40,HX_("thx.fp.TestTreeBag",3e,60,9d,09),HX_("testFlatMap",31,fe,a6,a3)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTreeBag_obj,testFlatMap,(void))

::hx::EnumBase TestTreeBag_obj::t0;

::hx::EnumBase TestTreeBag_obj::t1;

::hx::EnumBase TestTreeBag_obj::t2;


TestTreeBag_obj::TestTreeBag_obj()
{
}

hx::Val TestTreeBag_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testMap") ) { return hx::Val( testMap_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"plusOneBag") ) { return hx::Val( plusOneBag_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"plusTwoBags") ) { return hx::Val( plusTwoBags_dyn()); }
		if (HX_FIELD_EQ(inName,"testToArray") ) { return hx::Val( testToArray_dyn()); }
		if (HX_FIELD_EQ(inName,"testFlatMap") ) { return hx::Val( testFlatMap_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestTreeBag_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"t0") ) { outValue = t0; return true; }
		if (HX_FIELD_EQ(inName,"t1") ) { outValue = t1; return true; }
		if (HX_FIELD_EQ(inName,"t2") ) { outValue = t2; return true; }
	}
	return false;
}

hx::Val TestTreeBag_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TestTreeBag_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"t0") ) { t0=ioValue.Cast< ::hx::EnumBase >(); return true; }
		if (HX_FIELD_EQ(inName,"t1") ) { t1=ioValue.Cast< ::hx::EnumBase >(); return true; }
		if (HX_FIELD_EQ(inName,"t2") ) { t2=ioValue.Cast< ::hx::EnumBase >(); return true; }
	}
	return false;
}

void TestTreeBag_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestTreeBag_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestTreeBag_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TestTreeBag_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::fp::TreeBagImpl*/ ,(void *) &TestTreeBag_obj::t0,HX_HCSTRING("t0","\x3c","\x65","\x00","\x00")},
	{hx::fsObject /*::thx::fp::TreeBagImpl*/ ,(void *) &TestTreeBag_obj::t1,HX_HCSTRING("t1","\x3d","\x65","\x00","\x00")},
	{hx::fsObject /*::thx::fp::TreeBagImpl*/ ,(void *) &TestTreeBag_obj::t2,HX_HCSTRING("t2","\x3e","\x65","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TestTreeBag_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("plusOneBag","\xfc","\x85","\xd9","\x1f"),
	HX_HCSTRING("plusTwoBags","\x1d","\x15","\x9f","\xe9"),
	HX_HCSTRING("testMap","\x6a","\x79","\xc1","\xbd"),
	HX_HCSTRING("testToArray","\xec","\xa7","\xdc","\xae"),
	HX_HCSTRING("testFlatMap","\x31","\xfe","\xa6","\xa3"),
	::String(null()) };

static void TestTreeBag_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestTreeBag_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TestTreeBag_obj::t0,"t0");
	HX_MARK_MEMBER_NAME(TestTreeBag_obj::t1,"t1");
	HX_MARK_MEMBER_NAME(TestTreeBag_obj::t2,"t2");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestTreeBag_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestTreeBag_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TestTreeBag_obj::t0,"t0");
	HX_VISIT_MEMBER_NAME(TestTreeBag_obj::t1,"t1");
	HX_VISIT_MEMBER_NAME(TestTreeBag_obj::t2,"t2");
};

#endif

hx::Class TestTreeBag_obj::__mClass;

static ::String TestTreeBag_obj_sStaticFields[] = {
	HX_HCSTRING("t0","\x3c","\x65","\x00","\x00"),
	HX_HCSTRING("t1","\x3d","\x65","\x00","\x00"),
	HX_HCSTRING("t2","\x3e","\x65","\x00","\x00"),
	::String(null())
};

void TestTreeBag_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.fp.TestTreeBag","\x3e","\x60","\x9d","\x09");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestTreeBag_obj::__GetStatic;
	__mClass->mSetStaticField = &TestTreeBag_obj::__SetStatic;
	__mClass->mMarkFunc = TestTreeBag_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestTreeBag_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestTreeBag_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestTreeBag_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestTreeBag_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestTreeBag_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestTreeBag_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestTreeBag_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.fp.TestTreeBag","boot",0xc7913262,"thx.fp.TestTreeBag.boot","thx/fp/TestTreeBag.hx",14,0x5b7cabe0)
HXLINE(  14)		t0 = ::thx::fp::TreeBagImpl_obj::Empty_dyn();
            	}
{
            	HX_STACK_FRAME("thx.fp.TestTreeBag","boot",0xc7913262,"thx.fp.TestTreeBag.boot","thx/fp/TestTreeBag.hx",15,0x5b7cabe0)
HXLINE(  15)		HX_VARI( ::hx::EnumBase,xs) = ::thx::fp::TreeBagImpl_obj::Cons((int)2,::thx::fp::TestTreeBag_obj::t0);
HXDLIN(  15)		t1 = ::thx::fp::TreeBagImpl_obj::Cons((int)1,xs);
            	}
{
            	HX_STACK_FRAME("thx.fp.TestTreeBag","boot",0xc7913262,"thx.fp.TestTreeBag.boot","thx/fp/TestTreeBag.hx",16,0x5b7cabe0)
HXLINE(  16)		HX_VARI( ::hx::EnumBase,xs) = ::thx::fp::TreeBagImpl_obj::Cons((int)3,::thx::fp::TestTreeBag_obj::t0);
HXDLIN(  16)		t2 = ::thx::fp::TreeBagImpl_obj::Cons((int)2,xs);
            	}
}

} // end namespace thx
} // end namespace fp
