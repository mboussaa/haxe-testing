// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Assert
#include <thx/Assert.h>
#endif
#ifndef INCLUDED_thx_DefaultAssertBehavior
#include <thx/DefaultAssertBehavior.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_IAssertBehavior
#include <thx/IAssertBehavior.h>
#endif
#ifndef INCLUDED_thx_Iterables
#include <thx/Iterables.h>
#endif
#ifndef INCLUDED_thx_Iterators
#include <thx/Iterators.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx_Types
#include <thx/Types.h>
#endif

namespace thx{

void Assert_obj::__construct() { }

Dynamic Assert_obj::__CreateEmpty() { return new Assert_obj; }

hx::ObjectPtr< Assert_obj > Assert_obj::__new()
{
	hx::ObjectPtr< Assert_obj > _hx_result = new Assert_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Assert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assert_obj > _hx_result = new Assert_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Dynamic Assert_obj::behavior;

void Assert_obj::contains(::cpp::VirtualArray possibilities, ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","contains",0x15dcfcbd,"thx.Assert.contains","thx/Assert.hx",37,0x488e8b0d)
            	HX_STACK_ARG(possibilities,"possibilities")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  37)		Bool _hx_tmp = ::thx::Arrays_obj::contains(possibilities,value,null());
HXDLIN(  37)		if (_hx_tmp) {
HXLINE(  38)			::thx::Assert_obj::pass(msg,pos);
            		}
            		else {
HXLINE(  40)			::String _hx_tmp1;
HXDLIN(  40)			if (hx::IsNull( msg )) {
HXLINE(  40)				::String _hx_tmp2 = ::Std_obj::string(value);
HXDLIN(  40)				::String _hx_tmp3 = ((HX_("value ",8f,03,b7,4f) + _hx_tmp2) + HX_(" not found in the expected possibilities ",58,b2,ce,1c));
HXDLIN(  40)				::String _hx_tmp4 = ::Std_obj::string(possibilities);
HXDLIN(  40)				_hx_tmp1 = (_hx_tmp3 + _hx_tmp4);
            			}
            			else {
HXLINE(  40)				_hx_tmp1 = msg;
            			}
HXDLIN(  40)			::thx::Assert_obj::fail(_hx_tmp1,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,contains,(void))

void Assert_obj::equals( ::Dynamic expected, ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","equals",0x26780d5d,"thx.Assert.equals","thx/Assert.hx",57,0x488e8b0d)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  59)		if (hx::IsNull( msg )) {
HXLINE(  59)			::String _hx_tmp = ::Std_obj::string(expected);
HXDLIN(  59)			::String _hx_tmp1 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp) + HX_(" but it is ",60,e9,99,19));
HXDLIN(  59)			::String _hx_tmp2 = ::Std_obj::string(value);
HXDLIN(  59)			msg = (_hx_tmp1 + _hx_tmp2);
            		}
HXLINE(  60)		::thx::Assert_obj::isTrue(hx::IsEq( expected,value ),msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,equals,(void))

void Assert_obj::excludes( ::Dynamic match,::cpp::VirtualArray values,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","excludes",0x0a95e2f7,"thx.Assert.excludes","thx/Assert.hx",75,0x488e8b0d)
            	HX_STACK_ARG(match,"match")
            	HX_STACK_ARG(values,"values")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  75)		Bool _hx_tmp = !(::thx::Arrays_obj::contains(values,match,null()));
HXDLIN(  75)		if (_hx_tmp) {
HXLINE(  76)			::thx::Assert_obj::pass(msg,pos);
            		}
            		else {
HXLINE(  78)			::String _hx_tmp1;
HXDLIN(  78)			if (hx::IsNull( msg )) {
HXLINE(  78)				::String _hx_tmp2 = ::Std_obj::string(values);
HXDLIN(  78)				::String _hx_tmp3 = ((HX_("values ",fe,61,6c,70) + _hx_tmp2) + HX_(" do contain ",e1,0c,c2,79));
HXDLIN(  78)				::String _hx_tmp4 = ::Std_obj::string(match);
HXDLIN(  78)				_hx_tmp1 = (_hx_tmp3 + _hx_tmp4);
            			}
            			else {
HXLINE(  78)				_hx_tmp1 = msg;
            			}
HXDLIN(  78)			::thx::Assert_obj::fail(_hx_tmp1,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,excludes,(void))

void Assert_obj::fail(::String __o_msg, ::Dynamic pos){
::String msg = __o_msg.Default(HX_HCSTRING("failure expected","\x0e","\x85","\x1b","\x02"));
            	HX_STACK_FRAME("thx.Assert","fail",0x2e6e357c,"thx.Assert.fail","thx/Assert.hx",92,0x488e8b0d)
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  92)		::thx::Assert_obj::isTrue(false,msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assert_obj,fail,(void))

void Assert_obj::isContainedIn( ::Dynamic match,::cpp::VirtualArray values,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","isContainedIn",0x981c18d0,"thx.Assert.isContainedIn","thx/Assert.hx",107,0x488e8b0d)
            	HX_STACK_ARG(match,"match")
            	HX_STACK_ARG(values,"values")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 107)		Bool _hx_tmp = ::thx::Arrays_obj::contains(values,match,null());
HXDLIN( 107)		if (_hx_tmp) {
HXLINE( 108)			::thx::Assert_obj::pass(msg,pos);
            		}
            		else {
HXLINE( 110)			::String _hx_tmp1;
HXDLIN( 110)			if (hx::IsNull( msg )) {
HXLINE( 110)				::String _hx_tmp2 = ::Std_obj::string(values);
HXDLIN( 110)				::String _hx_tmp3 = ((HX_("values ",fe,61,6c,70) + _hx_tmp2) + HX_(" do not contain ",0e,c8,9e,06));
HXDLIN( 110)				::String _hx_tmp4 = ::Std_obj::string(match);
HXDLIN( 110)				_hx_tmp1 = (_hx_tmp3 + _hx_tmp4);
            			}
            			else {
HXLINE( 110)				_hx_tmp1 = msg;
            			}
HXDLIN( 110)			::thx::Assert_obj::fail(_hx_tmp1,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,isContainedIn,(void))

void Assert_obj::isFalse(Bool value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","isFalse",0xe5caf47b,"thx.Assert.isFalse","thx/Assert.hx",123,0x488e8b0d)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 125)		Bool _hx_tmp = hx::IsNull( msg );
HXDLIN( 125)		if (_hx_tmp) {
HXLINE( 126)			msg = HX_("expected false",fb,19,51,a4);
            		}
HXLINE( 127)		::thx::Assert_obj::isTrue((value == false),msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assert_obj,isFalse,(void))

void Assert_obj::is( ::Dynamic value, ::Dynamic type,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","is",0x88441408,"thx.Assert.is","thx/Assert.hx",140,0x488e8b0d)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 142)		if (hx::IsNull( msg )) {
HXLINE( 142)			::String _hx_tmp;
HXDLIN( 142)			Bool _hx_tmp1 = ::Std_obj::is(type,hx::ClassOf< ::ValueType >());
HXDLIN( 142)			if (_hx_tmp1) {
HXLINE( 142)				_hx_tmp = ::thx::Types_obj::toString(type);
            			}
            			else {
HXLINE( 142)				Bool _hx_tmp2 = ::Std_obj::is(type,hx::ClassOf< ::hx::Class >());
HXDLIN( 142)				if (_hx_tmp2) {
HXLINE( 142)					_hx_tmp = ::Type_obj::getClassName(type);
            				}
            				else {
HXLINE( 142)					Bool _hx_tmp3 = ::Std_obj::is(type,hx::ClassOf< ::Enum >());
HXDLIN( 142)					if (_hx_tmp3) {
HXLINE( 142)						_hx_tmp = ::Type_obj::getEnumName(type);
            					}
            					else {
HXLINE( 142)						::hx::EnumBase _hx_tmp4 = ::Type_obj::_hx_typeof(type);
HXDLIN( 142)						_hx_tmp = ::thx::Types_obj::toString(_hx_tmp4);
            					}
            				}
            			}
HXDLIN( 142)			::String _hx_tmp5 = ((HX_("expected type ",7e,54,cd,c3) + _hx_tmp) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 142)			::hx::EnumBase _hx_tmp6 = ::Type_obj::_hx_typeof(value);
HXDLIN( 142)			::String _hx_tmp7 = ::thx::Types_obj::toString(_hx_tmp6);
HXDLIN( 142)			msg = (_hx_tmp5 + _hx_tmp7);
            		}
HXLINE( 143)		Bool _hx_tmp8 = ::Std_obj::is(value,type);
HXDLIN( 143)		::thx::Assert_obj::isTrue(_hx_tmp8,msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,is,(void))

void Assert_obj::isNull( ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","isNull",0xccfa82af,"thx.Assert.isNull","thx/Assert.hx",155,0x488e8b0d)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 157)		if (hx::IsNull( msg )) {
HXLINE( 158)			::String _hx_tmp = ::Std_obj::string(value);
HXDLIN( 158)			msg = (HX_("expected null but it is ",91,9c,22,f9) + _hx_tmp);
            		}
HXLINE( 159)		::thx::Assert_obj::isTrue(hx::IsNull( value ),msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assert_obj,isNull,(void))

void Assert_obj::isTrue(Bool cond,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","isTrue",0xd0ef8b76,"thx.Assert.isTrue","thx/Assert.hx",173,0x488e8b0d)
            	HX_STACK_ARG(cond,"cond")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 173)		if (cond) {
HXLINE( 174)			::thx::IAssertBehavior_obj::success(::thx::Assert_obj::behavior,pos);
            		}
            		else {
HXLINE( 176)			::thx::IAssertBehavior_obj::fail(::thx::Assert_obj::behavior,msg,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assert_obj,isTrue,(void))

void Assert_obj::matches( ::EReg pattern, ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","matches",0xd7725815,"thx.Assert.matches","thx/Assert.hx",192,0x488e8b0d)
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 194)		if (hx::IsNull( msg )) {
HXLINE( 194)			::String _hx_tmp = ::Std_obj::string(value);
HXDLIN( 194)			msg = ((HX_("the value ",5e,db,1d,e7) + _hx_tmp) + HX_(" does not match the provided pattern",f1,6e,18,3f));
            		}
HXLINE( 195)		Bool _hx_tmp1 = pattern->match(value);
HXDLIN( 195)		::thx::Assert_obj::isTrue(_hx_tmp1,msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,matches,(void))

void Assert_obj::nearEquals(Float expected,Float value, ::Dynamic approx,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","nearEquals",0x3d777765,"thx.Assert.nearEquals","thx/Assert.hx",212,0x488e8b0d)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(approx,"approx")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 214)		Bool _hx_tmp = hx::IsNull( msg );
HXDLIN( 214)		if (_hx_tmp) {
HXLINE( 214)			msg = (((HX_("expected ",a8,7a,f8,e9) + expected) + HX_(" but it is ",60,e9,99,19)) + value);
            		}
HXLINE( 215)		Bool _hx_tmp1 = ::thx::Floats_obj::nearEquals(expected,value,approx);
HXDLIN( 215)		::thx::Assert_obj::isTrue(_hx_tmp1,msg,pos);
HXDLIN( 215)		return;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Assert_obj,nearEquals,(void))

void Assert_obj::notEquals( ::Dynamic expected, ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","notEquals",0x88e87354,"thx.Assert.notEquals","thx/Assert.hx",231,0x488e8b0d)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 233)		if (hx::IsNull( msg )) {
HXLINE( 233)			::String _hx_tmp = ::Std_obj::string(expected);
HXDLIN( 233)			::String _hx_tmp1 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp) + HX_(" and test value ",b4,da,d2,e8));
HXDLIN( 233)			::String _hx_tmp2 = ::Std_obj::string(value);
HXDLIN( 233)			msg = ((_hx_tmp1 + _hx_tmp2) + HX_(" should be different",c9,5a,1d,ae));
            		}
HXLINE( 234)		::thx::Assert_obj::isFalse(hx::IsEq( expected,value ),msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,notEquals,(void))

void Assert_obj::notNull( ::Dynamic value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","notNull",0x8c2f445c,"thx.Assert.notNull","thx/Assert.hx",246,0x488e8b0d)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 248)		Bool _hx_tmp = hx::IsNull( msg );
HXDLIN( 248)		if (_hx_tmp) {
HXLINE( 249)			msg = HX_("expected not null",5c,f3,31,cf);
            		}
HXLINE( 250)		::thx::Assert_obj::isTrue(hx::IsNotNull( value ),msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assert_obj,notNull,(void))

void Assert_obj::pass(::String __o_msg, ::Dynamic pos){
::String msg = __o_msg.Default(HX_HCSTRING("pass expected","\xa7","\xc7","\x7a","\x51"));
            	HX_STACK_FRAME("thx.Assert","pass",0x350a606f,"thx.Assert.pass","thx/Assert.hx",263,0x488e8b0d)
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 263)		::thx::Assert_obj::isTrue(true,msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assert_obj,pass,(void))

void Assert_obj::raises( ::Dynamic method, ::Dynamic type,::String msgNotThrown,::String msgWrongType, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","raises",0x1ad18925,"thx.Assert.raises","thx/Assert.hx",286,0x488e8b0d)
            	HX_STACK_ARG(method,"method")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(msgNotThrown,"msgNotThrown")
            	HX_STACK_ARG(msgWrongType,"msgWrongType")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 286)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 287)			method();
HXLINE( 288)			if (hx::IsNull( msgNotThrown )) {
HXLINE( 289)				HX_VAR( ::String,name);
HXDLIN( 289)				if (hx::IsNull( type )) {
HXLINE( 289)					name = HX_("Dynamic",5f,c7,66,03);
            				}
            				else {
HXLINE( 289)					Bool _hx_tmp = ::Std_obj::is(type,hx::ClassOf< ::ValueType >());
HXDLIN( 289)					if (_hx_tmp) {
HXLINE( 289)						name = ::thx::Types_obj::toString(type);
            					}
            					else {
HXLINE( 289)						Bool _hx_tmp1 = ::Std_obj::is(type,hx::ClassOf< ::hx::Class >());
HXDLIN( 289)						if (_hx_tmp1) {
HXLINE( 289)							name = ::Type_obj::getClassName(type);
            						}
            						else {
HXLINE( 289)							Bool _hx_tmp2 = ::Std_obj::is(type,hx::ClassOf< ::Enum >());
HXDLIN( 289)							if (_hx_tmp2) {
HXLINE( 289)								name = ::Type_obj::getEnumName(type);
            							}
            							else {
HXLINE( 289)								::hx::EnumBase _hx_tmp3 = ::Type_obj::_hx_typeof(type);
HXDLIN( 289)								name = ::thx::Types_obj::toString(_hx_tmp3);
            							}
            						}
            					}
            				}
HXLINE( 290)				msgNotThrown = ((HX_("exception of type ",4e,d6,6f,54) + name) + HX_(" not raised",85,69,50,04));
            			}
HXLINE( 292)			::thx::Assert_obj::fail(msgNotThrown,pos);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic ex = _hx_e;
HXLINE( 294)				if (hx::IsNull( type )) {
HXLINE( 295)					::thx::Assert_obj::pass(null(),pos);
            				}
            				else {
HXLINE( 297)					if (hx::IsNull( msgWrongType )) {
HXLINE( 298)						HX_VAR_NAME( ::String,name1,"name");
HXDLIN( 298)						Bool _hx_tmp4 = ::Std_obj::is(type,hx::ClassOf< ::ValueType >());
HXDLIN( 298)						if (_hx_tmp4) {
HXLINE( 298)							name1 = ::thx::Types_obj::toString(type);
            						}
            						else {
HXLINE( 298)							Bool _hx_tmp5 = ::Std_obj::is(type,hx::ClassOf< ::hx::Class >());
HXDLIN( 298)							if (_hx_tmp5) {
HXLINE( 298)								name1 = ::Type_obj::getClassName(type);
            							}
            							else {
HXLINE( 298)								Bool _hx_tmp6 = ::Std_obj::is(type,hx::ClassOf< ::Enum >());
HXDLIN( 298)								if (_hx_tmp6) {
HXLINE( 298)									name1 = ::Type_obj::getEnumName(type);
            								}
            								else {
HXLINE( 298)									::hx::EnumBase _hx_tmp7 = ::Type_obj::_hx_typeof(type);
HXDLIN( 298)									name1 = ::thx::Types_obj::toString(_hx_tmp7);
            								}
            							}
            						}
HXLINE( 299)						::String _hx_tmp8 = ((HX_("expected throw of type ",3f,87,15,d5) + name1) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 299)						::String _hx_tmp9 = ::Std_obj::string(ex);
HXDLIN( 299)						msgWrongType = (_hx_tmp8 + _hx_tmp9);
            					}
HXLINE( 301)					Bool _hx_tmp10 = ::Std_obj::is(ex,type);
HXDLIN( 301)					::thx::Assert_obj::isTrue(_hx_tmp10,msgWrongType,pos);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Assert_obj,raises,(void))

void Assert_obj::same( ::Dynamic expected, ::Dynamic value, ::Dynamic __o_recursive,::String msg, ::Dynamic pos){
 ::Dynamic recursive = __o_recursive.Default(true);
            	HX_STACK_FRAME("thx.Assert","same",0x3705ff04,"thx.Assert.same","thx/Assert.hx",322,0x488e8b0d)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(recursive,"recursive")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 324)		HX_VARI(  ::Dynamic,status) =  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("path",a5,e5,51,4a),HX_("",00,00,00,00))
            			->setFixed(1,HX_("recursive",72,ab,f7,4c),recursive)
            			->setFixed(2,HX_("error",c8,cb,29,73),null()));
HXLINE( 325)		Bool _hx_tmp = ::thx::Assert_obj::sameAs(expected,value,status);
HXDLIN( 325)		if (_hx_tmp) {
HXLINE( 326)			::thx::Assert_obj::pass(msg,pos);
            		}
            		else {
HXLINE( 328)			::String _hx_tmp1;
HXDLIN( 328)			if (hx::IsNull( msg )) {
HXLINE( 328)				_hx_tmp1 = ( (::String)(status->__Field(HX_("error",c8,cb,29,73),hx::paccDynamic)) );
            			}
            			else {
HXLINE( 328)				_hx_tmp1 = msg;
            			}
HXDLIN( 328)			::thx::Assert_obj::fail(_hx_tmp1,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Assert_obj,same,(void))

void Assert_obj::stringContains(::String match,::String value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","stringContains",0x9e62652e,"thx.Assert.stringContains","thx/Assert.hx",343,0x488e8b0d)
            	HX_STACK_ARG(match,"match")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 343)		Bool _hx_tmp;
HXDLIN( 343)		if (hx::IsNotNull( value )) {
HXLINE( 343)			Int _hx_tmp1 = value.indexOf(match,null());
HXDLIN( 343)			_hx_tmp = (_hx_tmp1 >= (int)0);
            		}
            		else {
HXLINE( 343)			_hx_tmp = false;
            		}
HXDLIN( 343)		if (_hx_tmp) {
HXLINE( 344)			::thx::Assert_obj::pass(msg,pos);
            		}
            		else {
HXLINE( 346)			::String _hx_tmp2;
HXDLIN( 346)			if (hx::IsNull( msg )) {
HXLINE( 346)				::String _hx_tmp3 = ::thx::Strings_obj::quote(value);
HXDLIN( 346)				::String _hx_tmp4 = ((HX_("value ",8f,03,b7,4f) + _hx_tmp3) + HX_(" does not contain ",20,4a,e8,91));
HXDLIN( 346)				::String _hx_tmp5 = ::thx::Strings_obj::quote(match);
HXDLIN( 346)				_hx_tmp2 = (_hx_tmp4 + _hx_tmp5);
            			}
            			else {
HXLINE( 346)				_hx_tmp2 = msg;
            			}
HXDLIN( 346)			::thx::Assert_obj::fail(_hx_tmp2,pos);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,stringContains,(void))

void Assert_obj::stringSequence(::Array< ::String > sequence,::String value,::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","stringSequence",0x5ad42950,"thx.Assert.stringSequence","thx/Assert.hx",360,0x488e8b0d)
            	HX_STACK_ARG(sequence,"sequence")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 362)		if (hx::IsNull( value )) {
HXLINE( 363)			::String _hx_tmp;
HXDLIN( 363)			if (hx::IsNull( msg )) {
HXLINE( 363)				_hx_tmp = HX_("null argument value",07,bf,7b,28);
            			}
            			else {
HXLINE( 363)				_hx_tmp = msg;
            			}
HXDLIN( 363)			::thx::Assert_obj::fail(_hx_tmp,pos);
HXLINE( 364)			return;
            		}
HXLINE( 366)		HX_VARI( Int,p) = (int)0;
HXLINE( 367)		{
HXLINE( 367)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 367)			while((_g < sequence->length)){
HXLINE( 367)				HX_VARI( ::String,s) = sequence->__get(_g);
HXDLIN( 367)				++_g;
HXLINE( 368)				HX_VARI( Int,p2) = value.indexOf(s,p);
HXLINE( 369)				if ((p2 < (int)0)) {
HXLINE( 370)					if (hx::IsNull( msg )) {
HXLINE( 371)						::String _hx_tmp1 = ::thx::Strings_obj::quote(s);
HXDLIN( 371)						msg = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp1) + HX_(" after ",a4,ca,25,03));
HXLINE( 372)						if ((p > (int)0)) {
HXLINE( 373)							::String _hx_tmp2 = ::thx::Strings_obj::ellipsis(value,(int)30,null());
HXDLIN( 373)							::String _hx_tmp3 = ::thx::Strings_obj::quote(_hx_tmp2);
HXDLIN( 373)							hx::AddEq(msg,(HX_(" ",20,00,00,00) + _hx_tmp3));
            						}
            						else {
HXLINE( 375)							hx::AddEq(msg,HX_(" begin",09,76,c1,7b));
            						}
            					}
HXLINE( 377)					::thx::Assert_obj::fail(msg,pos);
HXLINE( 378)					return;
            				}
HXLINE( 380)				p = (p2 + s.length);
            			}
            		}
HXLINE( 382)		::thx::Assert_obj::pass(msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assert_obj,stringSequence,(void))

void Assert_obj::warn(::String msg, ::Dynamic pos){
            	HX_STACK_FRAME("thx.Assert","warn",0x39aadde4,"thx.Assert.warn","thx/Assert.hx",395,0x488e8b0d)
            	HX_STACK_ARG(msg,"msg")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 395)		::thx::IAssertBehavior_obj::warn(::thx::Assert_obj::behavior,msg,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assert_obj,warn,(void))

Bool Assert_obj::sameAs( ::Dynamic expected, ::Dynamic value, ::Dynamic status){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,status) HXARGC(1)
            		::String _hx_run(::String msg){
            			HX_STACK_FRAME("thx.Assert","sameAs",0x83c70116,"thx.Assert.sameAs","thx/Assert.hx",402,0x488e8b0d)
            			HX_STACK_ARG(msg,"msg")
HXLINE( 402)			::String _hx_tmp;
HXDLIN( 402)			if (::thx::Strings_obj::isEmpty( ::Dynamic(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)))) {
HXLINE( 402)				_hx_tmp = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 402)				_hx_tmp = (HX_(" at ",ad,d3,70,15) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ));
            			}
HXDLIN( 402)			return (msg + _hx_tmp);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Assert","sameAs",0x83c70116,"thx.Assert.sameAs","thx/Assert.hx",400,0x488e8b0d)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(status,"status")
HXLINE( 401)		HX_VARI(  ::Dynamic,withPath) =  ::Dynamic(new _hx_Closure_0(status));
HXLINE( 404)		Bool _hx_tmp1 = !(::thx::Types_obj::sameType(expected,value));
HXDLIN( 404)		if (_hx_tmp1) {
HXLINE( 405)			::hx::EnumBase _hx_tmp2 = ::Type_obj::_hx_typeof(expected);
HXDLIN( 405)			HX_VARI( ::String,texpected) = ::thx::Types_obj::toString(_hx_tmp2);
HXLINE( 406)			::hx::EnumBase _hx_tmp3 = ::Type_obj::_hx_typeof(value);
HXLINE( 405)			HX_VARI( ::String,tvalue) = ::thx::Types_obj::toString(_hx_tmp3);
HXLINE( 407)			status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((((HX_("expected type ",7e,54,cd,c3) + texpected) + HX_(" but it is ",60,e9,99,19)) + tvalue))) ),hx::paccDynamic);
HXLINE( 408)			return false;
            		}
HXLINE( 410)		HX_VARI( ::hx::EnumBase,_g) = ::Type_obj::_hx_typeof(expected);
HXDLIN( 410)		Int _hx_tmp4 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 410)		switch((int)(_hx_tmp4)){
            			case (int)0: case (int)1: case (int)3: {
HXLINE( 418)				if (hx::IsNotEq( expected,value )) {
HXLINE( 419)					::String _hx_tmp5 = ::Std_obj::string(expected);
HXDLIN( 419)					::String _hx_tmp6 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp5) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 419)					::String _hx_tmp7 = ::Std_obj::string(value);
HXDLIN( 419)					status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp6 + _hx_tmp7))) ),hx::paccDynamic);
HXLINE( 420)					return false;
            				}
HXLINE( 422)				return true;
            			}
            			break;
            			case (int)2: {
HXLINE( 412)				Bool _hx_tmp8 = !(::thx::Floats_obj::nearEquals(expected,value,null()));
HXDLIN( 412)				if (_hx_tmp8) {
HXLINE( 413)					::String _hx_tmp9 = ::Std_obj::string(expected);
HXDLIN( 413)					::String _hx_tmp10 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp9) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 413)					::String _hx_tmp11 = ::Std_obj::string(value);
HXDLIN( 413)					status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp10 + _hx_tmp11))) ),hx::paccDynamic);
HXLINE( 414)					return false;
            				}
HXLINE( 416)				return true;
            			}
            			break;
            			case (int)4: {
HXLINE( 585)				Bool _hx_tmp12;
HXDLIN( 585)				if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 585)					_hx_tmp12 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 585)					_hx_tmp12 = true;
            				}
HXDLIN( 585)				if (_hx_tmp12) {
HXLINE( 586)					HX_VARI( ::Array< ::String >,tfields) = ::Reflect_obj::fields(value);
HXDLIN( 586)					HX_VARI( ::Array< ::String >,fields) = ::Reflect_obj::fields(expected);
HXDLIN( 586)					HX_VARI( ::String,path) = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 589)					{
HXLINE( 589)						HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 589)						while((_g1 < fields->length)){
HXLINE( 589)							HX_VARI( ::String,field) = fields->__get(_g1);
HXDLIN( 589)							++_g1;
HXLINE( 590)							tfields->remove(field);
HXLINE( 591)							::String _hx_tmp13;
HXDLIN( 591)							if ((path == HX_("",00,00,00,00))) {
HXLINE( 591)								_hx_tmp13 = field;
            							}
            							else {
HXLINE( 591)								_hx_tmp13 = (((HX_("",00,00,00,00) + path) + HX_(".",2e,00,00,00)) + field);
            							}
HXDLIN( 591)							status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp13,hx::paccDynamic);
HXLINE( 592)							Bool _hx_tmp14 = !(::Reflect_obj::hasField(value,field));
HXDLIN( 592)							if (_hx_tmp14) {
HXLINE( 593)								::String _hx_tmp15 = ((HX_("expected field ",ce,76,34,b9) + ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) )) + HX_(" does not exist in ",de,a3,13,4c));
HXDLIN( 593)								::String _hx_tmp16 = ::Std_obj::string(value);
HXDLIN( 593)								status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp15 + _hx_tmp16))) ),hx::paccDynamic);
HXLINE( 594)								return false;
            							}
HXLINE( 596)							HX_VARI(  ::Dynamic,e) = ::Reflect_obj::field(expected,field);
HXLINE( 597)							Bool _hx_tmp17 = ::Reflect_obj::isFunction(e);
HXDLIN( 597)							if (_hx_tmp17) {
HXLINE( 598)								continue;
            							}
HXLINE( 599)							HX_VARI(  ::Dynamic,v) = ::Reflect_obj::field(value,field);
HXLINE( 600)							Bool _hx_tmp18 = !(::thx::Assert_obj::sameAs(e,v,status));
HXDLIN( 600)							if (_hx_tmp18) {
HXLINE( 601)								return false;
            							}
            						}
            					}
HXLINE( 603)					Bool _hx_tmp19 = (tfields->length > (int)0);
HXDLIN( 603)					if (_hx_tmp19) {
HXLINE( 604)						::String _hx_tmp20 = tfields->join(HX_(", ",74,26,00,00));
HXDLIN( 604)						status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath(((HX_("the tested object has extra field(s) (",03,06,86,dc) + _hx_tmp20) + HX_(") not included in the expected ones",eb,3e,d1,60)))) ),hx::paccDynamic);
HXLINE( 605)						return false;
            					}
            				}
HXLINE( 610)				Bool _hx_tmp21 = ::thx::Iterators_obj::isIterator(expected);
HXDLIN( 610)				if (_hx_tmp21) {
HXLINE( 611)					Bool _hx_tmp22 = !(::thx::Iterators_obj::isIterator(value));
HXDLIN( 611)					if (_hx_tmp22) {
HXLINE( 612)						status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath(HX_("expected an Iterable",bd,56,97,88))) ),hx::paccDynamic);
HXLINE( 613)						return false;
            					}
HXLINE( 615)					Bool _hx_tmp23;
HXDLIN( 615)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 615)						_hx_tmp23 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 615)						_hx_tmp23 = true;
            					}
HXDLIN( 615)					if (_hx_tmp23) {
HXLINE( 616)						HX_VARI( ::cpp::VirtualArray,evalues) = ::thx::Iterators_obj::toArray(expected);
HXDLIN( 616)						HX_VARI( ::cpp::VirtualArray,vvalues) = ::thx::Iterators_obj::toArray(value);
HXLINE( 618)						Bool _hx_tmp24 = (evalues->get_length() != vvalues->get_length());
HXDLIN( 618)						if (_hx_tmp24) {
HXLINE( 619)							::String _hx_tmp25 = (((HX_("expected ",a8,7a,f8,e9) + evalues->get_length()) + HX_(" values in Iterator but they are ",90,a3,73,02)) + vvalues->get_length());
HXDLIN( 619)							status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath(_hx_tmp25)) ),hx::paccDynamic);
HXLINE( 620)							return false;
            						}
HXLINE( 622)						HX_VARI_NAME( ::String,path1,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 623)						{
HXLINE( 623)							HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 623)							HX_VARI_NAME( Int,_g2,"_g") = evalues->get_length();
HXDLIN( 623)							while((_g11 < _g2)){
HXLINE( 623)								HX_VARI( Int,i) = _g11++;
HXLINE( 624)								::String _hx_tmp26;
HXDLIN( 624)								if ((path1 == HX_("",00,00,00,00))) {
HXLINE( 624)									_hx_tmp26 = ((HX_("iterator[",ad,66,66,93) + i) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 624)									_hx_tmp26 = (path1 + ((HX_("[",5b,00,00,00) + i) + HX_("]",5d,00,00,00)));
            								}
HXDLIN( 624)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp26,hx::paccDynamic);
HXLINE( 625)								Bool _hx_tmp27 = !(::thx::Assert_obj::sameAs(evalues->__get(i),vvalues->__get(i),status));
HXDLIN( 625)								if (_hx_tmp27) {
HXLINE( 626)									::String _hx_tmp28 = ::Std_obj::string(expected);
HXDLIN( 626)									::String _hx_tmp29 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp28) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 626)									::String _hx_tmp30 = ::Std_obj::string(value);
HXDLIN( 626)									status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp29 + _hx_tmp30))) ),hx::paccDynamic);
HXLINE( 627)									return false;
            								}
            							}
            						}
            					}
HXLINE( 631)					return true;
            				}
HXLINE( 635)				Bool _hx_tmp31 = ::thx::Iterables_obj::isIterable(expected);
HXDLIN( 635)				if (_hx_tmp31) {
HXLINE( 636)					Bool _hx_tmp32 = !(::thx::Iterables_obj::isIterable(value));
HXDLIN( 636)					if (_hx_tmp32) {
HXLINE( 637)						status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath(HX_("expected an Iterator",f9,01,a5,88))) ),hx::paccDynamic);
HXLINE( 638)						return false;
            					}
HXLINE( 640)					Bool _hx_tmp33;
HXDLIN( 640)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 640)						_hx_tmp33 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 640)						_hx_tmp33 = true;
            					}
HXDLIN( 640)					if (_hx_tmp33) {
HXLINE( 641)						 ::Dynamic _hx_tmp34 =  ::Dynamic(expected->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 641)						HX_VARI_NAME( ::cpp::VirtualArray,evalues1,"evalues") = ::thx::Iterators_obj::toArray(_hx_tmp34);
HXLINE( 642)						 ::Dynamic _hx_tmp35 =  ::Dynamic(value->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXLINE( 641)						HX_VARI_NAME( ::cpp::VirtualArray,vvalues1,"vvalues") = ::thx::Iterators_obj::toArray(_hx_tmp35);
HXLINE( 643)						Bool _hx_tmp36 = (evalues1->get_length() != vvalues1->get_length());
HXDLIN( 643)						if (_hx_tmp36) {
HXLINE( 644)							::String _hx_tmp37 = (((HX_("expected ",a8,7a,f8,e9) + evalues1->get_length()) + HX_(" values in Iterable but they are ",54,47,f7,e6)) + vvalues1->get_length());
HXDLIN( 644)							status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath(_hx_tmp37)) ),hx::paccDynamic);
HXLINE( 645)							return false;
            						}
HXLINE( 647)						HX_VARI_NAME( ::String,path2,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 648)						{
HXLINE( 648)							HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 648)							HX_VARI_NAME( Int,_g3,"_g") = evalues1->get_length();
HXDLIN( 648)							while((_g12 < _g3)){
HXLINE( 648)								HX_VARI_NAME( Int,i1,"i") = _g12++;
HXLINE( 649)								::String _hx_tmp38;
HXDLIN( 649)								if ((path2 == HX_("",00,00,00,00))) {
HXLINE( 649)									_hx_tmp38 = ((HX_("iterable[",69,3d,7e,87) + i1) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 649)									_hx_tmp38 = (path2 + ((HX_("[",5b,00,00,00) + i1) + HX_("]",5d,00,00,00)));
            								}
HXDLIN( 649)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp38,hx::paccDynamic);
HXLINE( 650)								Bool _hx_tmp39 = !(::thx::Assert_obj::sameAs(evalues1->__get(i1),vvalues1->__get(i1),status));
HXDLIN( 650)								if (_hx_tmp39) {
HXLINE( 651)									return false;
            								}
            							}
            						}
            					}
HXLINE( 654)					return true;
            				}
HXLINE( 656)				return true;
            			}
            			break;
            			case (int)5: {
HXLINE( 424)				Bool _hx_tmp40 = !(::Reflect_obj::compareMethods(expected,value));
HXDLIN( 424)				if (_hx_tmp40) {
HXLINE( 425)					status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath(HX_("expected same function reference",95,d3,fa,7e))) ),hx::paccDynamic);
HXLINE( 426)					return false;
            				}
HXLINE( 428)				return true;
            			}
            			break;
            			case (int)6: {
HXLINE( 431)				Bool _hx_tmp41;
HXDLIN( 431)				Bool _hx_tmp42 = ::Std_obj::is(expected,hx::ClassOf< ::String >());
HXDLIN( 431)				if (_hx_tmp42) {
HXLINE( 431)					_hx_tmp41 = hx::IsNotEq( expected,value );
            				}
            				else {
HXLINE( 431)					_hx_tmp41 = false;
            				}
HXDLIN( 431)				if (_hx_tmp41) {
HXLINE( 432)					::String _hx_tmp43 = ::thx::Strings_obj::quote(expected);
HXDLIN( 432)					::String _hx_tmp44 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp43) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 432)					::String _hx_tmp45 = ::thx::Strings_obj::quote(value);
HXDLIN( 432)					status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp44 + _hx_tmp45))) ),hx::paccDynamic);
HXLINE( 433)					return false;
            				}
HXLINE( 437)				Bool _hx_tmp46 = ::Std_obj::is(expected,hx::ArrayBase::__mClass);
HXDLIN( 437)				if (_hx_tmp46) {
HXLINE( 438)					Bool _hx_tmp47;
HXDLIN( 438)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 438)						_hx_tmp47 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 438)						_hx_tmp47 = true;
            					}
HXDLIN( 438)					if (_hx_tmp47) {
HXLINE( 439)						Bool _hx_tmp48 = hx::IsNotEq(  ::Dynamic(expected->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN( 439)						if (_hx_tmp48) {
HXLINE( 440)							::String _hx_tmp49 = ::Std_obj::string( ::Dynamic(expected->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)));
HXDLIN( 440)							::String _hx_tmp50 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp49) + HX_(" elements but they are ",5c,d6,1d,fb));
HXDLIN( 440)							::String _hx_tmp51 = ::Std_obj::string( ::Dynamic(value->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)));
HXDLIN( 440)							status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp50 + _hx_tmp51))) ),hx::paccDynamic);
HXLINE( 441)							return false;
            						}
HXLINE( 443)						HX_VARI_NAME( ::String,path3,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 444)						{
HXLINE( 444)							HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 444)							HX_VARI_NAME( Int,_g4,"_g") = ( (Int)(expected->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN( 444)							while((_g13 < _g4)){
HXLINE( 444)								HX_VARI_NAME( Int,i2,"i") = _g13++;
HXLINE( 445)								::String _hx_tmp52;
HXDLIN( 445)								if ((path3 == HX_("",00,00,00,00))) {
HXLINE( 445)									_hx_tmp52 = ((HX_("array[",a2,78,f0,b7) + i2) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 445)									_hx_tmp52 = (path3 + ((HX_("[",5b,00,00,00) + i2) + HX_("]",5d,00,00,00)));
            								}
HXDLIN( 445)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp52,hx::paccDynamic);
HXLINE( 446)								Bool _hx_tmp53 = !(::thx::Assert_obj::sameAs(expected->__GetItem(i2),value->__GetItem(i2),status));
HXDLIN( 446)								if (_hx_tmp53) {
HXLINE( 448)									::String _hx_tmp54 = ::Std_obj::string(expected->__GetItem(i2));
HXDLIN( 448)									::String _hx_tmp55 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp54) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 448)									::String _hx_tmp56 = ::Std_obj::string(value->__GetItem(i2));
HXDLIN( 448)									status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp55 + _hx_tmp56))) ),hx::paccDynamic);
HXLINE( 449)									return false;
            								}
            							}
            						}
            					}
HXLINE( 453)					return true;
            				}
HXLINE( 457)				Bool _hx_tmp57 = ::Std_obj::is(expected,hx::ClassOf< ::Date >());
HXDLIN( 457)				if (_hx_tmp57) {
HXLINE( 458)					Float _hx_tmp58 = ( ( ::Date)(expected) )->getTime();
HXDLIN( 458)					Float _hx_tmp59 = ( ( ::Date)(value) )->getTime();
HXDLIN( 458)					if ((_hx_tmp58 != _hx_tmp59)) {
HXLINE( 459)						::String _hx_tmp60 = ::Std_obj::string(expected);
HXDLIN( 459)						::String _hx_tmp61 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp60) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 459)						::String _hx_tmp62 = ::Std_obj::string(value);
HXDLIN( 459)						status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp61 + _hx_tmp62))) ),hx::paccDynamic);
HXLINE( 460)						return false;
            					}
HXLINE( 462)					return true;
            				}
HXLINE( 466)				Bool _hx_tmp63 = ::Std_obj::is(expected,hx::ClassOf< ::haxe::io::Bytes >());
HXDLIN( 466)				if (_hx_tmp63) {
HXLINE( 467)					Bool _hx_tmp64;
HXDLIN( 467)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 467)						_hx_tmp64 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 467)						_hx_tmp64 = true;
            					}
HXDLIN( 467)					if (_hx_tmp64) {
HXLINE( 468)						HX_VARI(  ::haxe::io::Bytes,ebytes) = ( ( ::haxe::io::Bytes)(expected) );
HXDLIN( 468)						HX_VARI(  ::haxe::io::Bytes,vbytes) = ( ( ::haxe::io::Bytes)(value) );
HXLINE( 470)						if ((ebytes->length != vbytes->length)) {
HXLINE( 470)							return false;
            						}
HXLINE( 471)						{
HXLINE( 471)							HX_VARI_NAME( Int,_g14,"_g1") = (int)0;
HXDLIN( 471)							HX_VARI_NAME( Int,_g5,"_g") = ebytes->length;
HXDLIN( 471)							while((_g14 < _g5)){
HXLINE( 471)								HX_VARI_NAME( Int,i3,"i") = _g14++;
HXLINE( 472)								if ((ebytes->b->__get(i3) != vbytes->b->__get(i3))) {
HXLINE( 473)									status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((((HX_("expected byte ",70,ec,99,66) + ebytes->b->__get(i3)) + HX_(" but it is ",60,e9,99,19)) + vbytes->b->__get(i3)))) ),hx::paccDynamic);
HXLINE( 474)									return false;
            								}
            							}
            						}
            					}
HXLINE( 477)					return true;
            				}
HXLINE( 481)				Bool _hx_tmp65 = ::Std_obj::is(expected,hx::ClassOf< ::haxe::IMap >());
HXDLIN( 481)				if (_hx_tmp65) {
HXLINE( 482)					Bool _hx_tmp66;
HXDLIN( 482)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 482)						_hx_tmp66 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 482)						_hx_tmp66 = true;
            					}
HXDLIN( 482)					if (_hx_tmp66) {
HXLINE( 483)						HX_VARI( ::Dynamic,map) = expected;
HXDLIN( 483)						HX_VARI( ::Dynamic,vmap) = value;
HXLINE( 485)						HX_VARI_NAME( ::cpp::VirtualArray,_g6,"_g") = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 485)						{
HXLINE( 485)							HX_VARI(  ::Dynamic,tmp) = ::haxe::IMap_obj::keys(map);
HXDLIN( 485)							while(true){
HXLINE( 485)								Bool _hx_tmp67 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 485)								if (_hx_tmp67) {
HXLINE( 485)									goto _hx_goto_6;
            								}
HXDLIN( 485)								HX_VARI(  ::Dynamic,k) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 485)								_g6->push(k);
            							}
            							_hx_goto_6:;
            						}
HXLINE( 486)						HX_VARI_NAME( ::cpp::VirtualArray,_g15,"_g1") = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 486)						{
HXLINE( 486)							HX_VARI_NAME(  ::Dynamic,tmp1,"tmp") = ::haxe::IMap_obj::keys(vmap);
HXDLIN( 486)							while(true){
HXLINE( 486)								Bool _hx_tmp68 = !(( (Bool)( ::Dynamic(tmp1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 486)								if (_hx_tmp68) {
HXLINE( 486)									goto _hx_goto_7;
            								}
HXDLIN( 486)								HX_VARI_NAME(  ::Dynamic,k1,"k") =  ::Dynamic(tmp1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 486)								_g15->push(k1);
            							}
            							_hx_goto_7:;
            						}
HXLINE( 488)						Bool _hx_tmp69 = (_g6->get_length() != _g15->get_length());
HXDLIN( 488)						if (_hx_tmp69) {
HXLINE( 489)							::String _hx_tmp70 = (((HX_("expected ",a8,7a,f8,e9) + _g6->get_length()) + HX_(" keys but they are ",d9,22,a4,da)) + _g15->get_length());
HXDLIN( 489)							status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath(_hx_tmp70)) ),hx::paccDynamic);
HXLINE( 490)							return false;
            						}
HXLINE( 492)						HX_VARI_NAME( ::String,path4,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 493)						{
HXLINE( 493)							HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN( 493)							while((_g21 < _g6->get_length())){
HXLINE( 493)								HX_VARI(  ::Dynamic,key) = _g6->__get(_g21);
HXDLIN( 493)								++_g21;
HXLINE( 494)								::String _hx_tmp71;
HXDLIN( 494)								if ((path4 == HX_("",00,00,00,00))) {
HXLINE( 494)									::String _hx_tmp72 = ::Std_obj::string(key);
HXDLIN( 494)									_hx_tmp71 = ((HX_("hash[",cd,a4,21,22) + _hx_tmp72) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 494)									::String _hx_tmp73 = ::Std_obj::string(key);
HXDLIN( 494)									_hx_tmp71 = (path4 + ((HX_("[",5b,00,00,00) + _hx_tmp73) + HX_("]",5d,00,00,00)));
            								}
HXDLIN( 494)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp71,hx::paccDynamic);
HXLINE( 495)								 ::Dynamic _hx_tmp74 = ::haxe::IMap_obj::get(map,key);
HXDLIN( 495)								 ::Dynamic _hx_tmp75 = ::haxe::IMap_obj::get(vmap,key);
HXDLIN( 495)								Bool _hx_tmp76 = !(::thx::Assert_obj::sameAs(_hx_tmp74,_hx_tmp75,status));
HXDLIN( 495)								if (_hx_tmp76) {
HXLINE( 496)									::String _hx_tmp77 = ::Std_obj::string(expected);
HXDLIN( 496)									::String _hx_tmp78 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp77) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 496)									::String _hx_tmp79 = ::Std_obj::string(value);
HXDLIN( 496)									status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp78 + _hx_tmp79))) ),hx::paccDynamic);
HXLINE( 497)									return false;
            								}
            							}
            						}
            					}
HXLINE( 501)					return true;
            				}
HXLINE( 505)				Bool _hx_tmp80 = ::thx::Iterators_obj::isIterator(expected);
HXDLIN( 505)				if (_hx_tmp80) {
HXLINE( 506)					Bool _hx_tmp81;
HXDLIN( 506)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 506)						_hx_tmp81 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 506)						_hx_tmp81 = true;
            					}
HXDLIN( 506)					if (_hx_tmp81) {
HXLINE( 507)						HX_VARI_NAME( ::cpp::VirtualArray,evalues2,"evalues") = ::thx::Iterators_obj::toArray(expected);
HXDLIN( 507)						HX_VARI_NAME( ::cpp::VirtualArray,vvalues2,"vvalues") = ::thx::Iterators_obj::toArray(value);
HXLINE( 509)						Bool _hx_tmp82 = (evalues2->get_length() != vvalues2->get_length());
HXDLIN( 509)						if (_hx_tmp82) {
HXLINE( 510)							::String _hx_tmp83 = (((HX_("expected ",a8,7a,f8,e9) + evalues2->get_length()) + HX_(" values in Iterator but they are ",90,a3,73,02)) + vvalues2->get_length());
HXDLIN( 510)							status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath(_hx_tmp83)) ),hx::paccDynamic);
HXLINE( 511)							return false;
            						}
HXLINE( 513)						HX_VARI_NAME( ::String,path5,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 514)						{
HXLINE( 514)							HX_VARI_NAME( Int,_g16,"_g1") = (int)0;
HXDLIN( 514)							HX_VARI_NAME( Int,_g7,"_g") = evalues2->get_length();
HXDLIN( 514)							while((_g16 < _g7)){
HXLINE( 514)								HX_VARI_NAME( Int,i4,"i") = _g16++;
HXLINE( 515)								::String _hx_tmp84;
HXDLIN( 515)								if ((path5 == HX_("",00,00,00,00))) {
HXLINE( 515)									_hx_tmp84 = ((HX_("iterator[",ad,66,66,93) + i4) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 515)									_hx_tmp84 = (path5 + ((((HX_("",00,00,00,00) + path5) + HX_("[",5b,00,00,00)) + i4) + HX_("]",5d,00,00,00)));
            								}
HXDLIN( 515)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp84,hx::paccDynamic);
HXLINE( 516)								Bool _hx_tmp85 = !(::thx::Assert_obj::sameAs(evalues2->__get(i4),vvalues2->__get(i4),status));
HXDLIN( 516)								if (_hx_tmp85) {
HXLINE( 517)									::String _hx_tmp86 = ::Std_obj::string(expected);
HXDLIN( 517)									::String _hx_tmp87 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp86) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 517)									::String _hx_tmp88 = ::Std_obj::string(value);
HXDLIN( 517)									status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp87 + _hx_tmp88))) ),hx::paccDynamic);
HXLINE( 518)									return false;
            								}
            							}
            						}
            					}
HXLINE( 522)					return true;
            				}
HXLINE( 526)				Bool _hx_tmp89 = ::thx::Iterables_obj::isIterable(expected);
HXDLIN( 526)				if (_hx_tmp89) {
HXLINE( 527)					Bool _hx_tmp90;
HXDLIN( 527)					if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 527)						_hx_tmp90 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 527)						_hx_tmp90 = true;
            					}
HXDLIN( 527)					if (_hx_tmp90) {
HXLINE( 528)						 ::Dynamic _hx_tmp91 =  ::Dynamic(expected->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 528)						HX_VARI_NAME( ::cpp::VirtualArray,evalues3,"evalues") = ::thx::Iterators_obj::toArray(_hx_tmp91);
HXLINE( 529)						 ::Dynamic _hx_tmp92 =  ::Dynamic(value->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXLINE( 528)						HX_VARI_NAME( ::cpp::VirtualArray,vvalues3,"vvalues") = ::thx::Iterators_obj::toArray(_hx_tmp92);
HXLINE( 530)						Bool _hx_tmp93 = (evalues3->get_length() != vvalues3->get_length());
HXDLIN( 530)						if (_hx_tmp93) {
HXLINE( 531)							::String _hx_tmp94 = (((HX_("expected ",a8,7a,f8,e9) + evalues3->get_length()) + HX_(" values in Iterable but they are ",54,47,f7,e6)) + vvalues3->get_length());
HXDLIN( 531)							status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath(_hx_tmp94)) ),hx::paccDynamic);
HXLINE( 532)							return false;
            						}
HXLINE( 534)						HX_VARI_NAME( ::String,path6,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 535)						{
HXLINE( 535)							HX_VARI_NAME( Int,_g17,"_g1") = (int)0;
HXDLIN( 535)							HX_VARI_NAME( Int,_g8,"_g") = evalues3->get_length();
HXDLIN( 535)							while((_g17 < _g8)){
HXLINE( 535)								HX_VARI_NAME( Int,i5,"i") = _g17++;
HXLINE( 536)								::String _hx_tmp95;
HXDLIN( 536)								if ((path6 == HX_("",00,00,00,00))) {
HXLINE( 536)									_hx_tmp95 = ((HX_("iterable[",69,3d,7e,87) + i5) + HX_("]",5d,00,00,00));
            								}
            								else {
HXLINE( 536)									_hx_tmp95 = (path6 + ((HX_("[",5b,00,00,00) + i5) + HX_("]",5d,00,00,00)));
            								}
HXDLIN( 536)								status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp95,hx::paccDynamic);
HXLINE( 537)								Bool _hx_tmp96 = !(::thx::Assert_obj::sameAs(evalues3->__get(i5),vvalues3->__get(i5),status));
HXDLIN( 537)								if (_hx_tmp96) {
HXLINE( 538)									return false;
            								}
            							}
            						}
            					}
HXLINE( 541)					return true;
            				}
HXLINE( 545)				Bool _hx_tmp97;
HXDLIN( 545)				if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 545)					_hx_tmp97 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 545)					_hx_tmp97 = true;
            				}
HXDLIN( 545)				if (_hx_tmp97) {
HXLINE( 546)					hx::Class _hx_tmp98 = ::Type_obj::getClass(expected);
HXDLIN( 546)					HX_VARI_NAME( ::Array< ::String >,fields1,"fields") = ::Type_obj::getInstanceFields(_hx_tmp98);
HXDLIN( 546)					HX_VARI_NAME( ::String,path7,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 548)					{
HXLINE( 548)						HX_VARI_NAME( Int,_g9,"_g") = (int)0;
HXDLIN( 548)						while((_g9 < fields1->length)){
HXLINE( 548)							HX_VARI_NAME( ::String,field1,"field") = fields1->__get(_g9);
HXDLIN( 548)							++_g9;
HXLINE( 549)							::String _hx_tmp99;
HXDLIN( 549)							if ((path7 == HX_("",00,00,00,00))) {
HXLINE( 549)								_hx_tmp99 = field1;
            							}
            							else {
HXLINE( 549)								_hx_tmp99 = (((HX_("",00,00,00,00) + path7) + HX_(".",2e,00,00,00)) + field1);
            							}
HXDLIN( 549)							status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp99,hx::paccDynamic);
HXLINE( 550)							HX_VARI_NAME(  ::Dynamic,e1,"e") = ::Reflect_obj::field(expected,field1);
HXLINE( 551)							Bool _hx_tmp100 = ::Reflect_obj::isFunction(e1);
HXDLIN( 551)							if (_hx_tmp100) {
HXLINE( 551)								continue;
            							}
HXLINE( 552)							HX_VARI_NAME(  ::Dynamic,v1,"v") = ::Reflect_obj::field(value,field1);
HXLINE( 553)							Bool _hx_tmp101 = !(::thx::Assert_obj::sameAs(e1,v1,status));
HXDLIN( 553)							if (_hx_tmp101) {
HXLINE( 554)								return false;
            							}
            						}
            					}
            				}
HXLINE( 558)				return true;
            			}
            			break;
            			case (int)7: {
HXLINE( 560)				HX_VARI( ::String,eexpected) = ::Type_obj::getEnumName(_g->_hx_getObject(0).StaticCast< hx::Class >());
HXLINE( 561)				hx::Class _hx_tmp102 = ::Type_obj::getEnum(value);
HXLINE( 560)				HX_VARI( ::String,evalue) = ::Type_obj::getEnumName(_hx_tmp102);
HXLINE( 562)				if ((eexpected != evalue)) {
HXLINE( 563)					status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((((HX_("expected enumeration of ",28,cf,2e,32) + eexpected) + HX_(" but it is ",60,e9,99,19)) + evalue))) ),hx::paccDynamic);
HXLINE( 564)					return false;
            				}
HXLINE( 566)				Bool _hx_tmp103;
HXDLIN( 566)				if (!(( (Bool)(status->__Field(HX_("recursive",72,ab,f7,4c),hx::paccDynamic)) ))) {
HXLINE( 566)					_hx_tmp103 = (( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) ) == HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 566)					_hx_tmp103 = true;
            				}
HXDLIN( 566)				if (_hx_tmp103) {
HXLINE( 567)					Int _hx_tmp104 = ( ( ::hx::EnumBase)(expected) )->_hx_getIndex();
HXDLIN( 567)					Int _hx_tmp105 = ( ( ::hx::EnumBase)(value) )->_hx_getIndex();
HXDLIN( 567)					if ((_hx_tmp104 != _hx_tmp105)) {
HXLINE( 568)						::String _hx_tmp106 = ::Type_obj::enumConstructor(expected);
HXDLIN( 568)						::String _hx_tmp107 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp106) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 568)						::String _hx_tmp108 = ::Type_obj::enumConstructor(value);
HXDLIN( 568)						status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp107 + _hx_tmp108))) ),hx::paccDynamic);
HXLINE( 569)						return false;
            					}
HXLINE( 571)					HX_VARI( ::cpp::VirtualArray,eparams) = ::Type_obj::enumParameters(expected);
HXDLIN( 571)					HX_VARI( ::cpp::VirtualArray,vparams) = ::Type_obj::enumParameters(value);
HXDLIN( 571)					HX_VARI_NAME( ::String,path8,"path") = ( (::String)(status->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 574)					{
HXLINE( 574)						HX_VARI_NAME( Int,_g18,"_g1") = (int)0;
HXDLIN( 574)						HX_VARI_NAME( Int,_g10,"_g") = eparams->get_length();
HXDLIN( 574)						while((_g18 < _g10)){
HXLINE( 574)							HX_VARI_NAME( Int,i6,"i") = _g18++;
HXLINE( 575)							::String _hx_tmp109;
HXDLIN( 575)							if ((path8 == HX_("",00,00,00,00))) {
HXLINE( 575)								_hx_tmp109 = ((HX_("enum[",3a,36,87,70) + i6) + HX_("]",5d,00,00,00));
            							}
            							else {
HXLINE( 575)								_hx_tmp109 = (path8 + ((HX_("[",5b,00,00,00) + i6) + HX_("]",5d,00,00,00)));
            							}
HXDLIN( 575)							status->__SetField(HX_("path",a5,e5,51,4a),_hx_tmp109,hx::paccDynamic);
HXLINE( 576)							Bool _hx_tmp110 = !(::thx::Assert_obj::sameAs(eparams->__get(i6),vparams->__get(i6),status));
HXDLIN( 576)							if (_hx_tmp110) {
HXLINE( 577)								::String _hx_tmp111 = ::Std_obj::string(expected);
HXDLIN( 577)								::String _hx_tmp112 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp111) + HX_(" but it is ",60,e9,99,19));
HXDLIN( 577)								::String _hx_tmp113 = ::Std_obj::string(value);
HXDLIN( 577)								status->__SetField(HX_("error",c8,cb,29,73),( (::String)(withPath((_hx_tmp112 + _hx_tmp113))) ),hx::paccDynamic);
HXLINE( 578)								return false;
            							}
            						}
            					}
            				}
HXLINE( 582)				return true;
            			}
            			break;
            			case (int)8: {
HXLINE( 658)				HX_STACK_DO_THROW(HX_("Unable to compare two unknown types",5c,3c,2b,f7));
            			}
            			break;
            		}
HXLINE( 410)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assert_obj,sameAs,return )


Assert_obj::Assert_obj()
{
}

bool Assert_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"is") ) { outValue = is_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"fail") ) { outValue = fail_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pass") ) { outValue = pass_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"same") ) { outValue = same_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"warn") ) { outValue = warn_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNull") ) { outValue = isNull_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isTrue") ) { outValue = isTrue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"raises") ) { outValue = raises_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sameAs") ) { outValue = sameAs_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isFalse") ) { outValue = isFalse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"matches") ) { outValue = matches_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notNull") ) { outValue = notNull_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"behavior") ) { outValue = behavior; return true; }
		if (HX_FIELD_EQ(inName,"contains") ) { outValue = contains_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"excludes") ) { outValue = excludes_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"notEquals") ) { outValue = notEquals_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isContainedIn") ) { outValue = isContainedIn_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stringContains") ) { outValue = stringContains_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stringSequence") ) { outValue = stringSequence_dyn(); return true; }
	}
	return false;
}

bool Assert_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"behavior") ) { behavior=ioValue.Cast< ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assert_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assert_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::IAssertBehavior*/ ,(void *) &Assert_obj::behavior,HX_HCSTRING("behavior","\x92","\x90","\x92","\x0a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assert_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Assert_obj::behavior,"behavior");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assert_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Assert_obj::behavior,"behavior");
};

#endif

hx::Class Assert_obj::__mClass;

static ::String Assert_obj_sStaticFields[] = {
	HX_HCSTRING("behavior","\x92","\x90","\x92","\x0a"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("excludes","\x59","\x40","\x34","\x21"),
	HX_HCSTRING("fail","\xde","\xb9","\xb5","\x43"),
	HX_HCSTRING("isContainedIn","\x2e","\xf8","\x45","\x24"),
	HX_HCSTRING("isFalse","\x59","\xd9","\xd4","\x97"),
	HX_HCSTRING("is","\xea","\x5b","\x00","\x00"),
	HX_HCSTRING("isNull","\x91","\x63","\x75","\x66"),
	HX_HCSTRING("isTrue","\x58","\x6c","\x6a","\x6a"),
	HX_HCSTRING("matches","\xf3","\x3c","\x7c","\x89"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("notEquals","\xb2","\xcb","\xdb","\x3c"),
	HX_HCSTRING("notNull","\x3a","\x29","\x39","\x3e"),
	HX_HCSTRING("pass","\xd1","\xe4","\x51","\x4a"),
	HX_HCSTRING("raises","\x07","\x6a","\x4c","\xb4"),
	HX_HCSTRING("same","\x66","\x83","\x4d","\x4c"),
	HX_HCSTRING("stringContains","\x10","\xf8","\xdb","\xb6"),
	HX_HCSTRING("stringSequence","\x32","\xbc","\x4d","\x73"),
	HX_HCSTRING("warn","\x46","\x62","\xf2","\x4e"),
	HX_HCSTRING("sameAs","\xf8","\xe1","\x41","\x1d"),
	::String(null())
};

void Assert_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Assert","\x90","\x89","\xe9","\x9c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assert_obj::__GetStatic;
	__mClass->mSetStaticField = &Assert_obj::__SetStatic;
	__mClass->mMarkFunc = Assert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assert_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assert_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.Assert","boot",0x2bd3ffd0,"thx.Assert.boot","thx/Assert.hx",23,0x488e8b0d)
HXLINE(  23)		behavior =  ::thx::DefaultAssertBehavior_obj::__new();
            	}
}

} // end namespace thx
