// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_ResourceTest
#include <thx/ResourceTest.h>
#endif
#ifndef INCLUDED_thx_StaticResource
#include <thx/StaticResource.h>
#endif

namespace thx{

void ResourceTest_obj::__construct() { }

Dynamic ResourceTest_obj::__CreateEmpty() { return new ResourceTest_obj; }

hx::ObjectPtr< ResourceTest_obj > ResourceTest_obj::__new()
{
	hx::ObjectPtr< ResourceTest_obj > _hx_result = new ResourceTest_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ResourceTest_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ResourceTest_obj > _hx_result = new ResourceTest_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::thx::StaticResource_obj _hx_thx_ResourceTest__hx_thx_StaticResource= {
};

void *ResourceTest_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x6cb11300: return &_hx_thx_ResourceTest__hx_thx_StaticResource;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic ResourceTest_obj::fileJson;

::String ResourceTest_obj::fileText;

Int ResourceTest_obj::a;

 ::Dynamic ResourceTest_obj::b;

Bool ResourceTest_obj::c;

::String ResourceTest_obj::d;


ResourceTest_obj::ResourceTest_obj()
{
}

bool ResourceTest_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { outValue = a; return true; }
		if (HX_FIELD_EQ(inName,"b") ) { outValue = b; return true; }
		if (HX_FIELD_EQ(inName,"c") ) { outValue = c; return true; }
		if (HX_FIELD_EQ(inName,"d") ) { outValue = d; return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fileJson") ) { outValue = fileJson; return true; }
		if (HX_FIELD_EQ(inName,"fileText") ) { outValue = fileText; return true; }
	}
	return false;
}

bool ResourceTest_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"b") ) { b=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"c") ) { c=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"d") ) { d=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fileJson") ) { fileJson=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"fileText") ) { fileText=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ResourceTest_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ResourceTest_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &ResourceTest_obj::fileJson,HX_HCSTRING("fileJson","\xc4","\x2a","\xac","\x5f")},
	{hx::fsString,(void *) &ResourceTest_obj::fileText,HX_HCSTRING("fileText","\x49","\xb5","\x3d","\x66")},
	{hx::fsInt,(void *) &ResourceTest_obj::a,HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ResourceTest_obj::b,HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsBool,(void *) &ResourceTest_obj::c,HX_HCSTRING("c","\x63","\x00","\x00","\x00")},
	{hx::fsString,(void *) &ResourceTest_obj::d,HX_HCSTRING("d","\x64","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ResourceTest_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ResourceTest_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ResourceTest_obj::fileJson,"fileJson");
	HX_MARK_MEMBER_NAME(ResourceTest_obj::fileText,"fileText");
	HX_MARK_MEMBER_NAME(ResourceTest_obj::a,"a");
	HX_MARK_MEMBER_NAME(ResourceTest_obj::b,"b");
	HX_MARK_MEMBER_NAME(ResourceTest_obj::c,"c");
	HX_MARK_MEMBER_NAME(ResourceTest_obj::d,"d");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ResourceTest_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ResourceTest_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ResourceTest_obj::fileJson,"fileJson");
	HX_VISIT_MEMBER_NAME(ResourceTest_obj::fileText,"fileText");
	HX_VISIT_MEMBER_NAME(ResourceTest_obj::a,"a");
	HX_VISIT_MEMBER_NAME(ResourceTest_obj::b,"b");
	HX_VISIT_MEMBER_NAME(ResourceTest_obj::c,"c");
	HX_VISIT_MEMBER_NAME(ResourceTest_obj::d,"d");
};

#endif

hx::Class ResourceTest_obj::__mClass;

static ::String ResourceTest_obj_sStaticFields[] = {
	HX_HCSTRING("fileJson","\xc4","\x2a","\xac","\x5f"),
	HX_HCSTRING("fileText","\x49","\xb5","\x3d","\x66"),
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("c","\x63","\x00","\x00","\x00"),
	HX_HCSTRING("d","\x64","\x00","\x00","\x00"),
	::String(null())
};

void ResourceTest_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.ResourceTest","\x8a","\x46","\x50","\xee");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ResourceTest_obj::__GetStatic;
	__mClass->mSetStaticField = &ResourceTest_obj::__SetStatic;
	__mClass->mMarkFunc = ResourceTest_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ResourceTest_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ResourceTest_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ResourceTest_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ResourceTest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ResourceTest_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ResourceTest_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.ResourceTest","boot",0x15bbf896,"thx.ResourceTest.boot","thx/macro/BuildResource.hx",26,0xef86e250)
HXLINE(  26)		fileJson =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("some",f4,22,58,4c),HX_("value",71,7f,b8,31)));
            	}
{
            	HX_STACK_FRAME("thx.ResourceTest","boot",0x15bbf896,"thx.ResourceTest.boot","thx/macro/BuildResource.hx",26,0xef86e250)
HXLINE(  26)		fileText = HX_("some text\n",91,a8,97,73);
            	}
{
            	HX_STACK_FRAME("thx.ResourceTest","boot",0x15bbf896,"thx.ResourceTest.boot","thx/macro/BuildResource.hx",26,0xef86e250)
HXLINE(  26)		a = (int)1;
            	}
{
            	HX_STACK_FRAME("thx.ResourceTest","boot",0x15bbf896,"thx.ResourceTest.boot","thx/macro/BuildResource.hx",26,0xef86e250)
HXLINE(  26)		b =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("s",73,00,00,00),HX_("thx",84,60,58,00)));
            	}
{
            	HX_STACK_FRAME("thx.ResourceTest","boot",0x15bbf896,"thx.ResourceTest.boot","thx/macro/BuildResource.hx",26,0xef86e250)
HXLINE(  26)		c = true;
            	}
{
            	HX_STACK_FRAME("thx.ResourceTest","boot",0x15bbf896,"thx.ResourceTest.boot","thx/macro/BuildResource.hx",26,0xef86e250)
HXLINE(  26)		d = HX_("haxe",26,34,08,45);
            	}
}

} // end namespace thx
