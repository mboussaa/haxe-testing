// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Nil
#include <thx/Nil.h>
#endif
#ifndef INCLUDED_thx_TestTuple
#include <thx/TestTuple.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestTuple_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestTuple","new",0xede368be,"thx.TestTuple.new","thx/TestTuple.hx",10,0x390af5f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  10)		this->x = i;
            	}

Dynamic TestTuple_obj::__CreateEmpty() { return new TestTuple_obj; }

hx::ObjectPtr< TestTuple_obj > TestTuple_obj::__new(Int i)
{
	hx::ObjectPtr< TestTuple_obj > _hx_result = new TestTuple_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestTuple_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestTuple_obj > _hx_result = new TestTuple_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestTuple_obj::testTuple0(){
            	HX_STACK_FRAME("thx.TestTuple","testTuple0",0x892f807c,"thx.TestTuple.testTuple0","thx/TestTuple.hx",14,0x390af5f3)
            	HX_STACK_THIS(this)
HXLINE(  14)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  14)		HX_VARI( Int,_g) = this->x;
HXDLIN(  14)		while((_g1 < _g)){
HXLINE(  14)			++_g1;
HXLINE(  16)			::utest::Assert_obj::equals(::thx::Nil_obj::nil_dyn(),::thx::Nil_obj::nil_dyn(),null(),hx::SourceInfo(HX_("TestTuple.hx",48,4e,69,61),16,HX_("thx.TestTuple",cc,f1,9c,c9),HX_("testTuple0",1a,31,96,22)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTuple_obj,testTuple0,(void))

void TestTuple_obj::testTuple1(){
            	HX_STACK_FRAME("thx.TestTuple","testTuple1",0x892f807d,"thx.TestTuple.testTuple1","thx/TestTuple.hx",20,0x390af5f3)
            	HX_STACK_THIS(this)
HXLINE(  20)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  20)		HX_VARI( Int,_g) = this->x;
HXDLIN(  20)		while((_g1 < _g)){
HXLINE(  20)			++_g1;
HXLINE(  22)			::utest::Assert_obj::equals(HX_("thx",84,60,58,00),HX_("thx",84,60,58,00),null(),hx::SourceInfo(HX_("TestTuple.hx",48,4e,69,61),22,HX_("thx.TestTuple",cc,f1,9c,c9),HX_("testTuple1",1b,31,96,22)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTuple_obj,testTuple1,(void))

void TestTuple_obj::testTuple2(){
            	HX_STACK_FRAME("thx.TestTuple","testTuple2",0x892f807e,"thx.TestTuple.testTuple2","thx/TestTuple.hx",26,0x390af5f3)
            	HX_STACK_THIS(this)
HXLINE(  26)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  26)		HX_VARI( Int,_g) = this->x;
HXDLIN(  26)		while((_g1 < _g)){
HXLINE(  26)			++_g1;
HXLINE(  27)			HX_VARI(  ::Dynamic,t) =  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("_0",f1,52,00,00),HX_("thx",84,60,58,00))
            				->setFixed(1,HX_("_1",f2,52,00,00),(int)7));
HXLINE(  28)			::utest::Assert_obj::equals(HX_("thx",84,60,58,00), ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestTuple.hx",48,4e,69,61),28,HX_("thx.TestTuple",cc,f1,9c,c9),HX_("testTuple2",1c,31,96,22)));
HXLINE(  29)			::utest::Assert_obj::equals((int)7, ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestTuple.hx",48,4e,69,61),29,HX_("thx.TestTuple",cc,f1,9c,c9),HX_("testTuple2",1c,31,96,22)));
HXLINE(  30)			::utest::Assert_obj::equals(HX_("thx",84,60,58,00),( (::String)(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)) ),null(),hx::SourceInfo(HX_("TestTuple.hx",48,4e,69,61),30,HX_("thx.TestTuple",cc,f1,9c,c9),HX_("testTuple2",1c,31,96,22)));
HXLINE(  31)			::utest::Assert_obj::equals((int)7,( (Int)(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)) ),null(),hx::SourceInfo(HX_("TestTuple.hx",48,4e,69,61),31,HX_("thx.TestTuple",cc,f1,9c,c9),HX_("testTuple2",1c,31,96,22)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTuple_obj,testTuple2,(void))


TestTuple_obj::TestTuple_obj()
{
}

hx::Val TestTuple_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testTuple0") ) { return hx::Val( testTuple0_dyn()); }
		if (HX_FIELD_EQ(inName,"testTuple1") ) { return hx::Val( testTuple1_dyn()); }
		if (HX_FIELD_EQ(inName,"testTuple2") ) { return hx::Val( testTuple2_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestTuple_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestTuple_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestTuple_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestTuple_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestTuple_obj_sStaticStorageInfo = 0;
#endif

static ::String TestTuple_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testTuple0","\x1a","\x31","\x96","\x22"),
	HX_HCSTRING("testTuple1","\x1b","\x31","\x96","\x22"),
	HX_HCSTRING("testTuple2","\x1c","\x31","\x96","\x22"),
	::String(null()) };

static void TestTuple_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestTuple_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestTuple_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestTuple_obj::__mClass,"__mClass");
};

#endif

hx::Class TestTuple_obj::__mClass;

void TestTuple_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestTuple","\xcc","\xf1","\x9c","\xc9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestTuple_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestTuple_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestTuple_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestTuple_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestTuple_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestTuple_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
