// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Unit
#include <thx/Unit.h>
#endif
namespace thx{

::thx::Unit Unit_obj::unit;

bool Unit_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("unit",84,ca,a9,4d)) { outValue = Unit_obj::unit; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Unit_obj)

int Unit_obj::__FindIndex(::String inName)
{
	if (inName==HX_("unit",84,ca,a9,4d)) return 0;
	return super::__FindIndex(inName);
}

int Unit_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("unit",84,ca,a9,4d)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val Unit_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("unit",84,ca,a9,4d)) return unit;
	return super::__Field(inName,inCallProp);
}

static ::String Unit_obj_sStaticFields[] = {
	HX_("unit",84,ca,a9,4d),
	::String(null())
};

static void Unit_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Unit_obj::unit,"unit");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Unit_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Unit_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Unit_obj::unit,"unit");
};
#endif

hx::Class Unit_obj::__mClass;

Dynamic __Create_Unit_obj() { return new Unit_obj; }

void Unit_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("thx.Unit","\xce","\xe6","\x58","\x7f"), hx::TCanCast< Unit_obj >,Unit_obj_sStaticFields,0,
	&__Create_Unit_obj, &__Create,
	&super::__SGetClass(), &CreateUnit_obj, Unit_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , Unit_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Unit_obj::__GetStatic;
}

void Unit_obj::__boot()
{
unit = hx::CreateEnum< Unit_obj >(HX_HCSTRING("unit","\x84","\xca","\xa9","\x4d"),0,0);
}


} // end namespace thx
