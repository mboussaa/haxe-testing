// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_ERegs
#include <thx/ERegs.h>
#endif
#ifndef INCLUDED_thx_TestERegs
#include <thx/TestERegs.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestERegs_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestERegs","new",0x063fde5a,"thx.TestERegs.new","thx/TestERegs.hx",15,0xf1fa27d7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  15)		this->x = i;
            	}

Dynamic TestERegs_obj::__CreateEmpty() { return new TestERegs_obj; }

hx::ObjectPtr< TestERegs_obj > TestERegs_obj::__new(Int i)
{
	hx::ObjectPtr< TestERegs_obj > _hx_result = new TestERegs_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestERegs_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestERegs_obj > _hx_result = new TestERegs_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestERegs_obj::testEscape(){
            	HX_STACK_FRAME("thx.TestERegs","testEscape",0x2e718eb9,"thx.TestERegs.testEscape","thx/TestERegs.hx",20,0xf1fa27d7)
            	HX_STACK_THIS(this)
HXLINE(  20)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  20)		HX_VARI( Int,_g) = this->x;
HXDLIN(  20)		while((_g1 < _g)){
HXLINE(  20)			++_g1;
HXLINE(  21)			::String _hx_tmp = ::thx::ERegs_obj::escape(HX_("a.b",15,c3,49,00));
HXDLIN(  21)			::utest::Assert_obj::equals(HX_("a\\.b",0f,aa,63,40),_hx_tmp,null(),hx::SourceInfo(HX_("TestERegs.hx",2c,80,58,1a),21,HX_("thx.TestERegs",68,69,6f,0f),HX_("testEscape",73,89,ce,f3)));
HXLINE(  22)			::String _hx_tmp1 = ::thx::ERegs_obj::escape(HX_("a.b.c",ca,9a,90,f8));
HXDLIN(  22)			::utest::Assert_obj::equals(HX_("a\\.b\\.c",22,c1,f2,47),_hx_tmp1,null(),hx::SourceInfo(HX_("TestERegs.hx",2c,80,58,1a),22,HX_("thx.TestERegs",68,69,6f,0f),HX_("testEscape",73,89,ce,f3)));
HXLINE(  23)			::String _hx_tmp2 = ::thx::ERegs_obj::escape(HX_("([.].)",1d,c3,6b,82));
HXDLIN(  23)			::utest::Assert_obj::equals(HX_("\\(\\[\\.\\]\\.\\)",bd,e6,27,73),_hx_tmp2,null(),hx::SourceInfo(HX_("TestERegs.hx",2c,80,58,1a),23,HX_("thx.TestERegs",68,69,6f,0f),HX_("testEscape",73,89,ce,f3)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestERegs_obj,testEscape,(void))


TestERegs_obj::TestERegs_obj()
{
}

hx::Val TestERegs_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testEscape") ) { return hx::Val( testEscape_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestERegs_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestERegs_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestERegs_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestERegs_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestERegs_obj_sStaticStorageInfo = 0;
#endif

static ::String TestERegs_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testEscape","\x73","\x89","\xce","\xf3"),
	::String(null()) };

static void TestERegs_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestERegs_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestERegs_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestERegs_obj::__mClass,"__mClass");
};

#endif

hx::Class TestERegs_obj::__mClass;

void TestERegs_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestERegs","\x68","\x69","\x6f","\x0f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestERegs_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestERegs_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestERegs_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestERegs_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestERegs_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestERegs_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
