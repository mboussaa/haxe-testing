// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__Char_Char_Impl_
#define INCLUDED_thx__Char_Char_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,_Char,Char_Impl_)

namespace thx{
namespace _Char{


class HXCPP_CLASS_ATTRIBUTES Char_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Char_Impl__obj OBJ_;
		Char_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._Char.Char_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._Char.Char_Impl_"); }
		static hx::ObjectPtr< Char_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Char_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Char_Impl_","\x16","\x64","\xc5","\x82"); }

		static Int at(::String s,Int index);
		static ::Dynamic at_dyn();

		static Int fromInt(Int i);
		static ::Dynamic fromInt_dyn();

		static Int fromString(::String s);
		static ::Dynamic fromString_dyn();

		static Int compare(Int a,Int b);
		static ::Dynamic compare_dyn();

		static Int _new(Int i);
		static ::Dynamic _new_dyn();

		static Int compareTo(Int this1,Int other);
		static ::Dynamic compareTo_dyn();

		static Bool isBreakingWhitespace(Int this1);
		static ::Dynamic isBreakingWhitespace_dyn();

		static Bool isControl(Int this1);
		static ::Dynamic isControl_dyn();

		static Bool isUnicode(Int this1);
		static ::Dynamic isUnicode_dyn();

		static Int next(Int this1);
		static ::Dynamic next_dyn();

		static Int prev(Int this1);
		static ::Dynamic prev_dyn();

		static Int toUpperCase(Int this1);
		static ::Dynamic toUpperCase_dyn();

		static Int toLowerCase(Int this1);
		static ::Dynamic toLowerCase_dyn();

		static Bool equalsTo(Int this1,Int other);
		static ::Dynamic equalsTo_dyn();

		static Bool equals(Int self,Int other);
		static ::Dynamic equals_dyn();

		static Bool greaterThan(Int this1,Int other);
		static ::Dynamic greaterThan_dyn();

		static Bool greater(Int self,Int other);
		static ::Dynamic greater_dyn();

		static Bool greaterEqualsThan(Int this1,Int other);
		static ::Dynamic greaterEqualsThan_dyn();

		static Bool greaterEquals(Int self,Int other);
		static ::Dynamic greaterEquals_dyn();

		static Bool lessEqualsTo(Int this1,Int other);
		static ::Dynamic lessEqualsTo_dyn();

		static Bool lessEquals(Int self,Int other);
		static ::Dynamic lessEquals_dyn();

		static Bool lessThan(Int this1,Int other);
		static ::Dynamic lessThan_dyn();

		static Bool less(Int self,Int other);
		static ::Dynamic less_dyn();

		static Int toInt(Int this1);
		static ::Dynamic toInt_dyn();

		static ::String toString(Int this1);
		static ::Dynamic toString_dyn();

		static ::String arrayToString(::Array< Int > arr);
		static ::Dynamic arrayToString_dyn();

};

} // end namespace thx
} // end namespace _Char

#endif /* INCLUDED_thx__Char_Char_Impl_ */ 
