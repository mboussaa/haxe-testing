// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_thx_Assert
#include <thx/Assert.h>
#endif
#ifndef INCLUDED_thx__Char_Char_Impl_
#include <thx/_Char/Char_Impl_.h>
#endif

namespace thx{
namespace _Char{

void Char_Impl__obj::__construct() { }

Dynamic Char_Impl__obj::__CreateEmpty() { return new Char_Impl__obj; }

hx::ObjectPtr< Char_Impl__obj > Char_Impl__obj::__new()
{
	hx::ObjectPtr< Char_Impl__obj > _hx_result = new Char_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Char_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Char_Impl__obj > _hx_result = new Char_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Char_Impl__obj::at(::String s,Int index){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","at",0x231ee608,"thx._Char.Char_Impl_.at","thx/Char.hx",13,0x810cedbd)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(index,"index")
HXLINE(  13)		HX_VARI( Int,i) = ::haxe::Utf8_obj::charCodeAt(s,index);
HXDLIN(  13)		::thx::Assert_obj::isTrue((i >= (int)0),(HX_("Char value should be greater than zero: ",de,84,0e,b2) + i),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  13)		return i;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,at,return )

Int Char_Impl__obj::fromInt(Int i){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","fromInt",0x4ced4070,"thx._Char.Char_Impl_.fromInt","thx/Char.hx",18,0x810cedbd)
            	HX_STACK_ARG(i,"i")
HXLINE(  19)		::thx::Assert_obj::isTrue((i >= (int)0),(HX_("Char value should be greater than zero: ",de,84,0e,b2) + i),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXLINE(  20)		return i;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,fromInt,return )

Int Char_Impl__obj::fromString(::String s){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","fromString",0xcfd95bf0,"thx._Char.Char_Impl_.fromString","thx/Char.hx",28,0x810cedbd)
            	HX_STACK_ARG(s,"s")
HXLINE(  28)		HX_VARI( Int,i) = ::haxe::Utf8_obj::charCodeAt(s,(int)0);
HXDLIN(  28)		::thx::Assert_obj::isTrue((i >= (int)0),(HX_("Char value should be greater than zero: ",de,84,0e,b2) + i),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  28)		return i;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,fromString,return )

Int Char_Impl__obj::compare(Int a,Int b){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","compare",0x785b7b70,"thx._Char.Char_Impl_.compare","thx/Char.hx",31,0x810cedbd)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  31)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(a);
HXDLIN(  31)		return ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,compare,return )

Int Char_Impl__obj::_new(Int i){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","_new",0x53d3d5b6,"thx._Char.Char_Impl_._new","thx/Char.hx",33,0x810cedbd)
            	HX_STACK_ARG(i,"i")
HXLINE(  33)		return i;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,_new,return )

Int Char_Impl__obj::compareTo(Int this1,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","compareTo",0xe2c5810b,"thx._Char.Char_Impl_.compareTo","thx/Char.hx",40,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  40)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(this1);
HXDLIN(  40)		return ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,compareTo,return )

Bool Char_Impl__obj::isBreakingWhitespace(Int this1){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","isBreakingWhitespace",0xc16189bf,"thx._Char.Char_Impl_.isBreakingWhitespace","thx/Char.hx",46,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  46)		Bool _hx_tmp;
HXDLIN(  46)		Bool _hx_tmp1;
HXDLIN(  46)		if ((this1 != (int)32)) {
HXLINE(  46)			_hx_tmp1 = (this1 == (int)9);
            		}
            		else {
HXLINE(  46)			_hx_tmp1 = true;
            		}
HXDLIN(  46)		if (!(_hx_tmp1)) {
HXLINE(  46)			_hx_tmp = (this1 == (int)10);
            		}
            		else {
HXLINE(  46)			_hx_tmp = true;
            		}
HXDLIN(  46)		if (!(_hx_tmp)) {
HXLINE(  46)			return (this1 == (int)13);
            		}
            		else {
HXLINE(  46)			return true;
            		}
HXDLIN(  46)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isBreakingWhitespace,return )

Bool Char_Impl__obj::isControl(Int this1){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","isControl",0xfde8d41e,"thx._Char.Char_Impl_.isControl","thx/Char.hx",52,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  52)		Bool _hx_tmp;
HXDLIN(  52)		Bool _hx_tmp1;
HXDLIN(  52)		if ((this1 >= (int)0)) {
HXLINE(  52)			_hx_tmp1 = (this1 <= (int)31);
            		}
            		else {
HXLINE(  52)			_hx_tmp1 = false;
            		}
HXDLIN(  52)		if (!(_hx_tmp1)) {
HXLINE(  52)			_hx_tmp = (this1 == (int)127);
            		}
            		else {
HXLINE(  52)			_hx_tmp = true;
            		}
HXDLIN(  52)		if (!(_hx_tmp)) {
HXLINE(  52)			if ((this1 >= (int)128)) {
HXLINE(  52)				return (this1 <= (int)159);
            			}
            			else {
HXLINE(  52)				return false;
            			}
            		}
            		else {
HXLINE(  52)			return true;
            		}
HXDLIN(  52)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isControl,return )

Bool Char_Impl__obj::isUnicode(Int this1){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","isUnicode",0x97cff9de,"thx._Char.Char_Impl_.isUnicode","thx/Char.hx",58,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  58)		return (this1 <= (int)65533);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isUnicode,return )

Int Char_Impl__obj::next(Int this1){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","next",0x5db74548,"thx._Char.Char_Impl_.next","thx/Char.hx",64,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  64)		HX_VARI( Int,i) = (this1 + (int)1);
HXDLIN(  64)		::thx::Assert_obj::isTrue((i >= (int)0),(HX_("Char value should be greater than zero: ",de,84,0e,b2) + i),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  64)		return i;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,next,return )

Int Char_Impl__obj::prev(Int this1){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","prev",0x5f137f48,"thx._Char.Char_Impl_.prev","thx/Char.hx",70,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  70)		HX_VARI( Int,i) = (this1 - (int)1);
HXDLIN(  70)		::thx::Assert_obj::isTrue((i >= (int)0),(HX_("Char value should be greater than zero: ",de,84,0e,b2) + i),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  70)		return i;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,prev,return )

Int Char_Impl__obj::toUpperCase(Int this1){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","toUpperCase",0xb6205482,"thx._Char.Char_Impl_.toUpperCase","thx/Char.hx",76,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  76)		HX_VARI( ::String,s) = ::thx::_Char::Char_Impl__obj::toString(this1).toUpperCase();
HXDLIN(  76)		HX_VARI( Int,i) = ::haxe::Utf8_obj::charCodeAt(s,(int)0);
HXDLIN(  76)		::thx::Assert_obj::isTrue((i >= (int)0),(HX_("Char value should be greater than zero: ",de,84,0e,b2) + i),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  76)		return i;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,toUpperCase,return )

Int Char_Impl__obj::toLowerCase(Int this1){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","toLowerCase",0x358770a1,"thx._Char.Char_Impl_.toLowerCase","thx/Char.hx",82,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  82)		HX_VARI( ::String,s) = ::thx::_Char::Char_Impl__obj::toString(this1).toLowerCase();
HXDLIN(  82)		HX_VARI( Int,i) = ::haxe::Utf8_obj::charCodeAt(s,(int)0);
HXDLIN(  82)		::thx::Assert_obj::isTrue((i >= (int)0),(HX_("Char value should be greater than zero: ",de,84,0e,b2) + i),hx::SourceInfo(HX_("Char.hx",88,75,97,9c),19,HX_("thx._Char.Char_Impl_",39,80,a1,f8),HX_("fromInt",a5,dd,fa,57)));
HXDLIN(  82)		return i;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,toLowerCase,return )

Bool Char_Impl__obj::equalsTo(Int this1,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","equalsTo",0x345e946f,"thx._Char.Char_Impl_.equalsTo","thx/Char.hx",88,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  88)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(this1);
HXDLIN(  88)		Int _hx_tmp1 = ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
HXDLIN(  88)		return (_hx_tmp1 == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,equalsTo,return )

Bool Char_Impl__obj::equals(Int self,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","equals",0xfb982dd4,"thx._Char.Char_Impl_.equals","thx/Char.hx",92,0x810cedbd)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE(  92)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(self);
HXDLIN(  92)		Int _hx_tmp1 = ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
HXDLIN(  92)		return (_hx_tmp1 == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,equals,return )

Bool Char_Impl__obj::greaterThan(Int this1,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","greaterThan",0xf26de5c6,"thx._Char.Char_Impl_.greaterThan","thx/Char.hx",95,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  95)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(this1);
HXDLIN(  95)		Int _hx_tmp1 = ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
HXDLIN(  95)		return (_hx_tmp1 > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,greaterThan,return )

Bool Char_Impl__obj::greater(Int self,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","greater",0xacb2f3c5,"thx._Char.Char_Impl_.greater","thx/Char.hx",99,0x810cedbd)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE(  99)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(self);
HXDLIN(  99)		Int _hx_tmp1 = ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
HXDLIN(  99)		return (_hx_tmp1 > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,greater,return )

Bool Char_Impl__obj::greaterEqualsThan(Int this1,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","greaterEqualsThan",0xfdefe565,"thx._Char.Char_Impl_.greaterEqualsThan","thx/Char.hx",102,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 102)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(this1);
HXDLIN( 102)		Int _hx_tmp1 = ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
HXDLIN( 102)		return (_hx_tmp1 >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,greaterEqualsThan,return )

Bool Char_Impl__obj::greaterEquals(Int self,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","greaterEquals",0x1276f7e4,"thx._Char.Char_Impl_.greaterEquals","thx/Char.hx",106,0x810cedbd)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 106)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(self);
HXDLIN( 106)		Int _hx_tmp1 = ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
HXDLIN( 106)		return (_hx_tmp1 >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,greaterEquals,return )

Bool Char_Impl__obj::lessEqualsTo(Int this1,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","lessEqualsTo",0x68f17368,"thx._Char.Char_Impl_.lessEqualsTo","thx/Char.hx",109,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 109)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(this1);
HXDLIN( 109)		Int _hx_tmp1 = ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
HXDLIN( 109)		return (_hx_tmp1 <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,lessEqualsTo,return )

Bool Char_Impl__obj::lessEquals(Int self,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","lessEquals",0x28632c8d,"thx._Char.Char_Impl_.lessEquals","thx/Char.hx",113,0x810cedbd)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 113)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(self);
HXDLIN( 113)		Int _hx_tmp1 = ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
HXDLIN( 113)		return (_hx_tmp1 <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,lessEquals,return )

Bool Char_Impl__obj::lessThan(Int this1,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","lessThan",0x52586e2f,"thx._Char.Char_Impl_.lessThan","thx/Char.hx",116,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 116)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(this1);
HXDLIN( 116)		Int _hx_tmp1 = ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
HXDLIN( 116)		return (_hx_tmp1 < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,lessThan,return )

Bool Char_Impl__obj::less(Int self,Int other){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","less",0x5c64d3ae,"thx._Char.Char_Impl_.less","thx/Char.hx",120,0x810cedbd)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(other,"other")
HXLINE( 120)		::String _hx_tmp = ::thx::_Char::Char_Impl__obj::toString(self);
HXDLIN( 120)		Int _hx_tmp1 = ::haxe::Utf8_obj::compare(_hx_tmp,::thx::_Char::Char_Impl__obj::toString(other));
HXDLIN( 120)		return (_hx_tmp1 < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,less,return )

Int Char_Impl__obj::toInt(Int this1){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","toInt",0x1d85483f,"thx._Char.Char_Impl_.toInt","thx/Char.hx",127,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 127)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,toInt,return )

::String Char_Impl__obj::toString(Int this1){
            	HX_STACK_FRAME("thx._Char.Char_Impl_","toString",0x9792df81,"thx._Char.Char_Impl_.toString","thx/Char.hx",132,0x810cedbd)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 134)		HX_VARI(  ::haxe::Utf8,c) =  ::haxe::Utf8_obj::__new(null());
HXLINE( 135)		c->addChar(this1);
HXLINE( 136)		return c->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,toString,return )

::String Char_Impl__obj::arrayToString(::Array< Int > arr){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run(Int c){
            			HX_STACK_FRAME("thx._Char.Char_Impl_","arrayToString",0x2219c870,"thx._Char.Char_Impl_.arrayToString","thx/Char.hx",146,0x810cedbd)
            			HX_STACK_ARG(c,"c")
HXLINE( 146)			return ::thx::_Char::Char_Impl__obj::toString(c);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx._Char.Char_Impl_","arrayToString",0x2219c870,"thx._Char.Char_Impl_.arrayToString","thx/Char.hx",146,0x810cedbd)
            	HX_STACK_ARG(arr,"arr")
HXLINE( 146)		return arr->map( ::Dynamic(new _hx_Closure_0()))->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,arrayToString,return )


Char_Impl__obj::Char_Impl__obj()
{
}

bool Char_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { outValue = at_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prev") ) { outValue = prev_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"less") ) { outValue = less_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greater") ) { outValue = greater_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"equalsTo") ) { outValue = equalsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessThan") ) { outValue = lessThan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"compareTo") ) { outValue = compareTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isControl") ) { outValue = isControl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isUnicode") ) { outValue = isUnicode_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEquals") ) { outValue = lessEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toUpperCase") ) { outValue = toUpperCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLowerCase") ) { outValue = toLowerCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterThan") ) { outValue = greaterThan_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lessEqualsTo") ) { outValue = lessEqualsTo_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"greaterEquals") ) { outValue = greaterEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"arrayToString") ) { outValue = arrayToString_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"greaterEqualsThan") ) { outValue = greaterEqualsThan_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"isBreakingWhitespace") ) { outValue = isBreakingWhitespace_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Char_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Char_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Char_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Char_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Char_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Char_Impl__obj::__mClass;

static ::String Char_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	HX_HCSTRING("isBreakingWhitespace","\x6a","\x0f","\x38","\xac"),
	HX_HCSTRING("isControl","\x93","\xe8","\x7f","\x1d"),
	HX_HCSTRING("isUnicode","\x53","\x0e","\x67","\xb7"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("toUpperCase","\x37","\x30","\xfd","\x38"),
	HX_HCSTRING("toLowerCase","\x56","\x4c","\x64","\xb8"),
	HX_HCSTRING("equalsTo","\x9a","\x85","\x3a","\xd5"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("greaterThan","\x7b","\xc1","\x4a","\x75"),
	HX_HCSTRING("greater","\xfa","\x90","\xc0","\xb7"),
	HX_HCSTRING("greaterEqualsThan","\xda","\xf6","\x0f","\x51"),
	HX_HCSTRING("greaterEquals","\xd9","\xea","\x09","\xab"),
	HX_HCSTRING("lessEqualsTo","\x13","\xd6","\x54","\x67"),
	HX_HCSTRING("lessEquals","\x78","\xfe","\xfd","\xac"),
	HX_HCSTRING("lessThan","\x5a","\x5f","\x34","\xf3"),
	HX_HCSTRING("less","\x59","\x13","\xb0","\x47"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("arrayToString","\x65","\xbb","\xac","\xba"),
	::String(null())
};

void Char_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._Char.Char_Impl_","\x39","\x80","\xa1","\xf8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Char_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Char_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Char_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Char_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Char_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Char_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Char_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace _Char
