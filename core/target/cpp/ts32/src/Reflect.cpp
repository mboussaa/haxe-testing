// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif


void Reflect_obj::__construct() { }

Dynamic Reflect_obj::__CreateEmpty() { return new Reflect_obj; }

hx::ObjectPtr< Reflect_obj > Reflect_obj::__new()
{
	hx::ObjectPtr< Reflect_obj > _hx_result = new Reflect_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Reflect_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Reflect_obj > _hx_result = new Reflect_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool Reflect_obj::hasField( ::Dynamic o,::String field){
            	HX_STACK_FRAME("Reflect","hasField",0xef8c2571,"Reflect.hasField","/usr/lib/haxe/std/cpp/_std/Reflect.hx",30,0xe2153adf)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(field,"field")
HXLINE(  30)		return ((bool)hx::IsNotNull( o ) && (bool)o->__HasField(field));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,hasField,return )

 ::Dynamic Reflect_obj::field( ::Dynamic o,::String field){
            	HX_STACK_FRAME("Reflect","field",0x54b04da9,"Reflect.field","/usr/lib/haxe/std/cpp/_std/Reflect.hx",34,0xe2153adf)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(field,"field")
HXLINE(  34)		return hx::IsNull( o ) ? null() : o->__Field(field,hx::paccNever);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,field,return )

 ::Dynamic Reflect_obj::callMethod( ::Dynamic o, ::Dynamic func,::cpp::VirtualArray args){
            	HX_STACK_FRAME("Reflect","callMethod",0xb49e52d0,"Reflect.callMethod","/usr/lib/haxe/std/cpp/_std/Reflect.hx",51,0xe2153adf)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(args,"args")
HXLINE(  52)		if (((bool)hx::IsNotNull( func ) && (bool)(( (Int)(func->__GetType()) ) == (int)3))) {
HXLINE(  53)			func = o->__Field(func,hx::paccDynamic);
            		}
HXLINE(  54)		func->__SetThis(o);
HXLINE(  55)		return func->__Run(args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Reflect_obj,callMethod,return )

::Array< ::String > Reflect_obj::fields( ::Dynamic o){
            	HX_STACK_FRAME("Reflect","fields",0xc593a6aa,"Reflect.fields","/usr/lib/haxe/std/cpp/_std/Reflect.hx",58,0xe2153adf)
            	HX_STACK_ARG(o,"o")
HXLINE(  59)		if (hx::IsNull( o )) {
HXLINE(  59)			return ::Array_obj< ::String >::__new();
            		}
HXLINE(  60)		HX_VARI( ::Array< ::String >,a) = ::Array_obj< ::String >::__new(0);
HXLINE(  61)		o->__GetFields(a);
HXLINE(  62)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,fields,return )

Bool Reflect_obj::isFunction( ::Dynamic f){
            	HX_STACK_FRAME("Reflect","isFunction",0x0f1541d3,"Reflect.isFunction","/usr/lib/haxe/std/cpp/_std/Reflect.hx",66,0xe2153adf)
            	HX_STACK_ARG(f,"f")
HXLINE(  66)		return ((bool)hx::IsNotNull( f ) && (bool)hx::IsEq( f->__GetType(),(int)6 ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,isFunction,return )

Int Reflect_obj::compare( ::Dynamic a, ::Dynamic b){
            	HX_STACK_FRAME("Reflect","compare",0xa2d92b54,"Reflect.compare","/usr/lib/haxe/std/cpp/_std/Reflect.hx",70,0xe2153adf)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  70)		return hx::IsEq( a,b ) ? (int)0 : hx::IsGreater( a,b ) ? (int)1 : (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,compare,return )

Bool Reflect_obj::compareMethods( ::Dynamic f1, ::Dynamic f2){
            	HX_STACK_FRAME("Reflect","compareMethods",0x8b8ddd7e,"Reflect.compareMethods","/usr/lib/haxe/std/cpp/_std/Reflect.hx",73,0xe2153adf)
            	HX_STACK_ARG(f1,"f1")
            	HX_STACK_ARG(f2,"f2")
HXLINE(  74)		if (hx::IsEq( f1,f2 )) {
HXLINE(  75)			return true;
            		}
HXLINE(  76)		if (((bool)!(::Reflect_obj::isFunction(f1)) || (bool)!(::Reflect_obj::isFunction(f2)))) {
HXLINE(  77)			return false;
            		}
HXLINE(  78)		return ::__hxcpp_same_closure(f1,f2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Reflect_obj,compareMethods,return )

Bool Reflect_obj::isObject( ::Dynamic v){
            	HX_STACK_FRAME("Reflect","isObject",0xd04960ba,"Reflect.isObject","/usr/lib/haxe/std/cpp/_std/Reflect.hx",81,0xe2153adf)
            	HX_STACK_ARG(v,"v")
HXLINE(  82)		if (hx::IsNull( v )) {
HXLINE(  82)			return false;
            		}
HXLINE(  83)		HX_VARI( Int,t) = ( (Int)(v->__GetType()) );
HXLINE(  84)		return ((bool)((bool)((bool)(t == (int)4) || (bool)(t == (int)8)) || (bool)(t == (int)3)) || (bool)(t == (int)5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Reflect_obj,isObject,return )


Reflect_obj::Reflect_obj()
{
}

bool Reflect_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"field") ) { outValue = field_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fields") ) { outValue = fields_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasField") ) { outValue = hasField_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isObject") ) { outValue = isObject_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"callMethod") ) { outValue = callMethod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isFunction") ) { outValue = isFunction_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"compareMethods") ) { outValue = compareMethods_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Reflect_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Reflect_obj_sStaticStorageInfo = 0;
#endif

static void Reflect_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Reflect_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Reflect_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Reflect_obj::__mClass,"__mClass");
};

#endif

hx::Class Reflect_obj::__mClass;

static ::String Reflect_obj_sStaticFields[] = {
	HX_HCSTRING("hasField","\x00","\xdf","\xeb","\x8c"),
	HX_HCSTRING("field","\xba","\x94","\x93","\x00"),
	HX_HCSTRING("callMethod","\x1f","\xce","\x8a","\x34"),
	HX_HCSTRING("fields","\x79","\x8e","\x8e","\x80"),
	HX_HCSTRING("isFunction","\x22","\xbd","\x01","\x8f"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("compareMethods","\x4d","\xac","\x7b","\x37"),
	HX_HCSTRING("isObject","\x49","\x1a","\xa9","\x6d"),
	::String(null())
};

void Reflect_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Reflect","\x1d","\xac","\x7a","\xb6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Reflect_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Reflect_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Reflect_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Reflect_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Reflect_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Reflect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Reflect_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

