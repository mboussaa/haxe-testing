// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Iterators
#include <thx/Iterators.h>
#endif
#ifndef INCLUDED_thx_TestIterators
#include <thx/TestIterators.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestIterators_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestIterators","new",0x6a6507fb,"thx.TestIterators.new","thx/TestIterators.hx",14,0x153921d6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  14)		this->x = i;
            	}

Dynamic TestIterators_obj::__CreateEmpty() { return new TestIterators_obj; }

hx::ObjectPtr< TestIterators_obj > TestIterators_obj::__new(Int i)
{
	hx::ObjectPtr< TestIterators_obj > _hx_result = new TestIterators_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestIterators_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestIterators_obj > _hx_result = new TestIterators_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestIterators_obj::testEquals(){
            	HX_STACK_FRAME("thx.TestIterators","testEquals",0xbb05f5f6,"thx.TestIterators.testEquals","thx/TestIterators.hx",18,0x153921d6)
            	HX_STACK_THIS(this)
HXLINE(  18)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  18)		HX_VARI( Int,_g) = this->x;
HXDLIN(  18)		while((_g1 < _g)){
HXLINE(  18)			++_g1;
HXLINE(  19)			HX_VARI( ::Array< Int >,a) = ::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3);
HXDLIN(  19)			HX_VARI( ::Array< Int >,b) = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2);
HXDLIN(  19)			HX_VARI( ::Array< Int >,c) = ::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)4);
HXLINE(  23)			 ::Dynamic _hx_tmp = a->iterator();
HXDLIN(  23)			 ::Dynamic _hx_tmp1 = a->iterator();
HXDLIN(  23)			Bool _hx_tmp2 = ::thx::Iterators_obj::equals(_hx_tmp,_hx_tmp1,null());
HXDLIN(  23)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestIterators.hx",ab,c8,b2,f8),23,HX_("thx.TestIterators",89,ee,b4,21),HX_("testEquals",31,34,e7,d8)));
HXLINE(  24)			 ::Dynamic _hx_tmp3 = a->iterator();
HXDLIN(  24)			 ::Dynamic _hx_tmp4 = b->iterator();
HXDLIN(  24)			Bool _hx_tmp5 = ::thx::Iterators_obj::equals(_hx_tmp3,_hx_tmp4,null());
HXDLIN(  24)			::utest::Assert_obj::isFalse(_hx_tmp5,null(),hx::SourceInfo(HX_("TestIterators.hx",ab,c8,b2,f8),24,HX_("thx.TestIterators",89,ee,b4,21),HX_("testEquals",31,34,e7,d8)));
HXLINE(  25)			 ::Dynamic _hx_tmp6 = a->iterator();
HXDLIN(  25)			 ::Dynamic _hx_tmp7 = c->iterator();
HXDLIN(  25)			Bool _hx_tmp8 = ::thx::Iterators_obj::equals(_hx_tmp6,_hx_tmp7,null());
HXDLIN(  25)			::utest::Assert_obj::isFalse(_hx_tmp8,null(),hx::SourceInfo(HX_("TestIterators.hx",ab,c8,b2,f8),25,HX_("thx.TestIterators",89,ee,b4,21),HX_("testEquals",31,34,e7,d8)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestIterators_obj,testEquals,(void))

void TestIterators_obj::testReduce(){
            	HX_STACK_FRAME("thx.TestIterators","testReduce",0xf9ad355d,"thx.TestIterators.testReduce","thx/TestIterators.hx",29,0x153921d6)
            	HX_STACK_THIS(this)
HXLINE(  29)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  29)		HX_VARI( Int,_g) = this->x;
HXDLIN(  29)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			Int _hx_run(Int a,Int b){
            				HX_STACK_FRAME("thx.TestIterators","testReduce",0xf9ad355d,"thx.TestIterators.testReduce","thx/TestIterators.hx",31,0x153921d6)
            				HX_STACK_ARG(a,"a")
            				HX_STACK_ARG(b,"b")
HXLINE(  31)				return (a + b);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  29)			++_g1;
HXLINE(  31)			 ::Dynamic _hx_tmp = ::Array_obj< Int >::__new(4)->init(0,(int)2)->init(1,(int)3)->init(2,(int)5)->init(3,(int)7)->iterator();
HXDLIN(  31)			Int _hx_tmp1 = ( (Int)(::thx::Iterators_obj::reduce(_hx_tmp, ::Dynamic(new _hx_Closure_0()),(int)0)) );
HXDLIN(  31)			::utest::Assert_obj::equals((int)17,_hx_tmp1,null(),hx::SourceInfo(HX_("TestIterators.hx",ab,c8,b2,f8),31,HX_("thx.TestIterators",89,ee,b4,21),HX_("testReduce",98,73,8e,17)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestIterators_obj,testReduce,(void))


TestIterators_obj::TestIterators_obj()
{
}

hx::Val TestIterators_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testEquals") ) { return hx::Val( testEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"testReduce") ) { return hx::Val( testReduce_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestIterators_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestIterators_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestIterators_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestIterators_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestIterators_obj_sStaticStorageInfo = 0;
#endif

static ::String TestIterators_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testEquals","\x31","\x34","\xe7","\xd8"),
	HX_HCSTRING("testReduce","\x98","\x73","\x8e","\x17"),
	::String(null()) };

static void TestIterators_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestIterators_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestIterators_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestIterators_obj::__mClass,"__mClass");
};

#endif

hx::Class TestIterators_obj::__mClass;

void TestIterators_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestIterators","\x89","\xee","\xb4","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestIterators_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestIterators_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestIterators_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestIterators_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestIterators_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestIterators_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
