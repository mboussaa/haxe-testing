// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_TestEithers
#define INCLUDED_thx_TestEithers

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,TestEithers)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES TestEithers_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestEithers_obj OBJ_;
		TestEithers_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.TestEithers")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.TestEithers"); }
		static hx::ObjectPtr< TestEithers_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestEithers_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestEithers","\x3c","\xc5","\xf2","\x13"); }

		Int x;
		void testIsLeft();
		::Dynamic testIsLeft_dyn();

		void testIsRight();
		::Dynamic testIsRight_dyn();

		void testToLeft();
		::Dynamic testToLeft_dyn();

		void testToRight();
		::Dynamic testToRight_dyn();

		void testToLeftUnsafe();
		::Dynamic testToLeftUnsafe_dyn();

		void testToRightUnsafe();
		::Dynamic testToRightUnsafe_dyn();

		void testFlatMap();
		::Dynamic testFlatMap_dyn();

		void testLeftMap();
		::Dynamic testLeftMap_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_TestEithers */ 
