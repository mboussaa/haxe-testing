// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_Strings
#define INCLUDED_thx_Strings

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS1(thx,OrderingImpl)
HX_DECLARE_CLASS1(thx,Strings)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES Strings_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Strings_obj OBJ_;
		Strings_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.Strings")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.Strings"); }
		static hx::ObjectPtr< Strings_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Strings_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Strings","\x62","\xb6","\x44","\xc6"); }

		static void __boot();
		static ::String after(::String value,::String searchFor);
		static ::Dynamic after_dyn();

		static ::String afterLast(::String value,::String searchFor);
		static ::Dynamic afterLast_dyn();

		static ::String capitalize(::String s);
		static ::Dynamic capitalize_dyn();

		static ::String capitalizeWords(::String value, ::Dynamic whiteSpaceOnly);
		static ::Dynamic capitalizeWords_dyn();

		static ::String canonicalizeNewlines(::String value);
		static ::Dynamic canonicalizeNewlines_dyn();

		static Int caseInsensitiveCompare(::String a,::String b);
		static ::Dynamic caseInsensitiveCompare_dyn();

		static Bool caseInsensitiveEndsWith(::String s,::String end);
		static ::Dynamic caseInsensitiveEndsWith_dyn();

		static Bool caseInsensitiveEndsWithAny(::String s,::Array< ::String > values);
		static ::Dynamic caseInsensitiveEndsWithAny_dyn();

		static Bool caseInsensitiveStartsWith(::String s,::String start);
		static ::Dynamic caseInsensitiveStartsWith_dyn();

		static Bool caseInsensitiveStartsWithAny(::String s,::Array< ::String > values);
		static ::Dynamic caseInsensitiveStartsWithAny_dyn();

		static ::String collapse(::String value);
		static ::Dynamic collapse_dyn();

		static Int compare(::String a,::String b);
		static ::Dynamic compare_dyn();

		static  ::Dynamic order;
		static  ::Dynamic &order_dyn() { return order;}
		static Bool caseInsensitiveContains(::String s,::String test);
		static ::Dynamic caseInsensitiveContains_dyn();

		static Bool contains(::String s,::String test);
		static ::Dynamic contains_dyn();

		static Int count(::String s,::String test);
		static ::Dynamic count_dyn();

		static Bool caseInsensitiveContainsAny(::String s,::Array< ::String > tests);
		static ::Dynamic caseInsensitiveContainsAny_dyn();

		static Bool containsAny(::String s,::Array< ::String > tests);
		static ::Dynamic containsAny_dyn();

		static ::String dasherize(::String s);
		static ::Dynamic dasherize_dyn();

		static Int diffAt(::String a,::String b);
		static ::Dynamic diffAt_dyn();

		static ::String ellipsis(::String s, ::Dynamic maxlen,::String symbol);
		static ::Dynamic ellipsis_dyn();

		static ::String ellipsisMiddle(::String s, ::Dynamic maxlen,::String symbol);
		static ::Dynamic ellipsisMiddle_dyn();

		static Bool endsWithAny(::String s, ::Dynamic values);
		static ::Dynamic endsWithAny_dyn();

		static ::String filter(::String s, ::Dynamic predicate);
		static ::Dynamic filter_dyn();

		static ::String filterCharcode(::String s, ::Dynamic predicate);
		static ::Dynamic filterCharcode_dyn();

		static ::String from(::String value,::String searchFor);
		static ::Dynamic from_dyn();

		static Int HASCODE_MAX;
		static Int HASCODE_MUL;
		static Int hashCode(::String value);
		static ::Dynamic hashCode_dyn();

		static Bool hasContent(::String value);
		static ::Dynamic hasContent_dyn();

		static ::String humanize(::String s);
		static ::Dynamic humanize_dyn();

		static Bool isAlpha(::String s);
		static ::Dynamic isAlpha_dyn();

		static Bool isAlphaNum(::String value);
		static ::Dynamic isAlphaNum_dyn();

		static Bool isBreakingWhitespace(::String value);
		static ::Dynamic isBreakingWhitespace_dyn();

		static Bool isLowerCase(::String value);
		static ::Dynamic isLowerCase_dyn();

		static Bool isUpperCase(::String value);
		static ::Dynamic isUpperCase_dyn();

		static ::String ifEmpty(::String value,::String alt);
		static ::Dynamic ifEmpty_dyn();

		static Bool isDigitsOnly(::String value);
		static ::Dynamic isDigitsOnly_dyn();

		static Bool isEmpty(::String value);
		static ::Dynamic isEmpty_dyn();

		static ::String lowerCaseFirst(::String value);
		static ::Dynamic lowerCaseFirst_dyn();

		static ::String random(::String value,hx::Null< Int >  length);
		static ::Dynamic random_dyn();

		static ::String randomSequence(::String seed,Int length);
		static ::Dynamic randomSequence_dyn();

		static ::String randomSequence64(Int length);
		static ::Dynamic randomSequence64_dyn();

		static  ::Dynamic iterator(::String s);
		static ::Dynamic iterator_dyn();

		static ::cpp::VirtualArray map(::String value, ::Dynamic callback);
		static ::Dynamic map_dyn();

		static ::String remove(::String value,::String toremove);
		static ::Dynamic remove_dyn();

		static ::String removeAfter(::String value,::String toremove);
		static ::Dynamic removeAfter_dyn();

		static ::String removeAt(::String value,Int index,Int length);
		static ::Dynamic removeAt_dyn();

		static ::String removeBefore(::String value,::String toremove);
		static ::Dynamic removeBefore_dyn();

		static ::String removeOne(::String value,::String toremove);
		static ::Dynamic removeOne_dyn();

		static ::String repeat(::String s,Int times);
		static ::Dynamic repeat_dyn();

		static ::String reverse(::String s);
		static ::Dynamic reverse_dyn();

		static ::String quote(::String s);
		static ::Dynamic quote_dyn();

		static ::Array< ::String > splitOnce(::String s,::String separator);
		static ::Dynamic splitOnce_dyn();

		static Bool startsWithAny(::String s, ::Dynamic values);
		static ::Dynamic startsWithAny_dyn();

		static ::String stripTags(::String s);
		static ::Dynamic stripTags_dyn();

		static ::String surround(::String s,::String left,::String right);
		static ::Dynamic surround_dyn();

		static ::Array< ::String > toArray(::String s);
		static ::Dynamic toArray_dyn();

		static ::Array< Int > toCharcodes(::String s);
		static ::Dynamic toCharcodes_dyn();

		static ::Array< ::String > toChunks(::String s,Int len);
		static ::Dynamic toChunks_dyn();

		static ::Array< ::String > toLines(::String s);
		static ::Dynamic toLines_dyn();

		static ::String trimChars(::String value,::String charlist);
		static ::Dynamic trimChars_dyn();

		static ::String trimCharsLeft(::String value,::String charlist);
		static ::Dynamic trimCharsLeft_dyn();

		static ::String trimCharsRight(::String value,::String charlist);
		static ::Dynamic trimCharsRight_dyn();

		static ::String underscore(::String s);
		static ::Dynamic underscore_dyn();

		static ::String upperCaseFirst(::String value);
		static ::Dynamic upperCaseFirst_dyn();

		static ::String upTo(::String value,::String searchFor);
		static ::Dynamic upTo_dyn();

		static ::String wrapColumns(::String s,hx::Null< Int >  columns,::String indent,::String newline);
		static ::Dynamic wrapColumns_dyn();

		static ::String upperMatch( ::EReg re);
		static ::Dynamic upperMatch_dyn();

		static ::String wrapLine(::String s,Int columns,::String indent,::String newline);
		static ::Dynamic wrapLine_dyn();

		static ::String lpad(::String s,::String _hx_char,Int length);
		static ::Dynamic lpad_dyn();

		static ::String rpad(::String s,::String _hx_char,Int length);
		static ::Dynamic rpad_dyn();

		static  ::Dynamic monoid;
		static  ::EReg UCWORDS;
		static  ::EReg IS_BREAKINGWHITESPACE;
		static  ::EReg IS_ALPHA;
		static  ::EReg UCWORDSWS;
		static  ::EReg ALPHANUM;
		static  ::EReg DIGITS;
		static  ::EReg STRIPTAGS;
		static  ::EReg WSG;
		static  ::EReg SPLIT_LINES;
		static  ::EReg CANONICALIZE_LINES;
};

} // end namespace thx

#endif /* INCLUDED_thx_Strings */ 
