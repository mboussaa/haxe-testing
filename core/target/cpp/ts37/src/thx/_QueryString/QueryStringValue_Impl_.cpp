// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx__QueryString_QueryStringValue_Impl_
#include <thx/_QueryString/QueryStringValue_Impl_.h>
#endif

namespace thx{
namespace _QueryString{

void QueryStringValue_Impl__obj::__construct() { }

Dynamic QueryStringValue_Impl__obj::__CreateEmpty() { return new QueryStringValue_Impl__obj; }

hx::ObjectPtr< QueryStringValue_Impl__obj > QueryStringValue_Impl__obj::__new()
{
	hx::ObjectPtr< QueryStringValue_Impl__obj > _hx_result = new QueryStringValue_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic QueryStringValue_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< QueryStringValue_Impl__obj > _hx_result = new QueryStringValue_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::String QueryStringValue_Impl__obj::toString(::Array< ::String > this1){
            	HX_STACK_FRAME("thx._QueryString.QueryStringValue_Impl_","toString",0x73f42ff8,"thx._QueryString.QueryStringValue_Impl_.toString","thx/QueryString.hx",162,0x5b2522f0)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 162)		Bool _hx_tmp;
HXDLIN( 162)		if (hx::IsNotNull( this1 )) {
HXLINE( 162)			_hx_tmp = (this1->length == (int)0);
            		}
            		else {
HXLINE( 162)			_hx_tmp = true;
            		}
HXDLIN( 162)		if (_hx_tmp) {
HXLINE( 162)			return null();
            		}
            		else {
HXLINE( 162)			return this1->join(HX_(",",2c,00,00,00));
            		}
HXDLIN( 162)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(QueryStringValue_Impl__obj,toString,return )


QueryStringValue_Impl__obj::QueryStringValue_Impl__obj()
{
}

bool QueryStringValue_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *QueryStringValue_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *QueryStringValue_Impl__obj_sStaticStorageInfo = 0;
#endif

static void QueryStringValue_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(QueryStringValue_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void QueryStringValue_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(QueryStringValue_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class QueryStringValue_Impl__obj::__mClass;

static ::String QueryStringValue_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null())
};

void QueryStringValue_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._QueryString.QueryStringValue_Impl_","\xa2","\x1a","\x28","\xe6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &QueryStringValue_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = QueryStringValue_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(QueryStringValue_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< QueryStringValue_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = QueryStringValue_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QueryStringValue_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QueryStringValue_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace _QueryString
