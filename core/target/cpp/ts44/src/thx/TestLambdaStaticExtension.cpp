// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_TestLambdaStaticExtension
#include <thx/TestLambdaStaticExtension.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestLambdaStaticExtension_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestLambdaStaticExtension","new",0xb961f360,"thx.TestLambdaStaticExtension.new","thx/TestLambdaStaticExtension.hx",10,0xb56ee791)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  10)		this->x = i;
            	}

Dynamic TestLambdaStaticExtension_obj::__CreateEmpty() { return new TestLambdaStaticExtension_obj; }

hx::ObjectPtr< TestLambdaStaticExtension_obj > TestLambdaStaticExtension_obj::__new(Int i)
{
	hx::ObjectPtr< TestLambdaStaticExtension_obj > _hx_result = new TestLambdaStaticExtension_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestLambdaStaticExtension_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestLambdaStaticExtension_obj > _hx_result = new TestLambdaStaticExtension_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestLambdaStaticExtension_obj::testFunctions(){
            	HX_STACK_FRAME("thx.TestLambdaStaticExtension","testFunctions",0x26756aa9,"thx.TestLambdaStaticExtension.testFunctions","thx/TestLambdaStaticExtension.hx",14,0xb56ee791)
            	HX_STACK_THIS(this)
HXLINE(  14)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  14)		HX_VARI( Int,_g) = this->x;
HXDLIN(  14)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			Int _hx_run( ::Dynamic _){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testFunctions",0x26756aa9,"thx.TestLambdaStaticExtension.testFunctions","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_,"_")
HXLINE(  86)				return (_ + (int)1);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			Bool _hx_run( ::Dynamic _1){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testFunctions",0x26756aa9,"thx.TestLambdaStaticExtension.testFunctions","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_1,"_1")
HXLINE(  86)				return hx::IsGreater( _1,(int)1 );
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            			 ::Dynamic _hx_run( ::Dynamic _0, ::Dynamic _11){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testFunctions",0x26756aa9,"thx.TestLambdaStaticExtension.testFunctions","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_0,"_0")
            				HX_STACK_ARG(_11,"_11")
HXLINE(  86)				return (_0 + _11);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            			::String _hx_run( ::Dynamic _2){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testFunctions",0x26756aa9,"thx.TestLambdaStaticExtension.testFunctions","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_2,"_2")
HXLINE(  86)				return (HX_("Test ",6e,ef,c2,a0) + _2);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  14)			++_g1;
HXLINE(  15)			::Array< Int > _hx_tmp = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2)->map( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  15)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)2)->init(1,(int)3),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),15,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testFunctions",a9,87,3d,e7)));
HXLINE(  16)			::Array< Int > _hx_tmp1 = ::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3)->filter( ::Dynamic(new _hx_Closure_1()));
HXDLIN(  16)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,(int)2)->init(1,(int)3),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),16,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testFunctions",a9,87,3d,e7)));
HXLINE(  17)			 ::Dynamic _hx_tmp2 = ::thx::Arrays_obj::reduce(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3), ::Dynamic(new _hx_Closure_2()),(int)10);
HXDLIN(  17)			::utest::Assert_obj::equals((int)16,_hx_tmp2,null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),17,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testFunctions",a9,87,3d,e7)));
HXLINE(  18)			::Array< ::String > _hx_tmp3 = ::Array_obj< Int >::__new(1)->init(0,(int)1)->map( ::Dynamic(new _hx_Closure_3()));
HXDLIN(  18)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Test 1",03,91,ce,09)),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),18,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testFunctions",a9,87,3d,e7)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLambdaStaticExtension_obj,testFunctions,(void))

void TestLambdaStaticExtension_obj::testInStringInterpolation(){
            	HX_STACK_FRAME("thx.TestLambdaStaticExtension","testInStringInterpolation",0x307fc5fc,"thx.TestLambdaStaticExtension.testInStringInterpolation","thx/TestLambdaStaticExtension.hx",22,0xb56ee791)
            	HX_STACK_THIS(this)
HXLINE(  22)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  22)		HX_VARI( Int,_g) = this->x;
HXDLIN(  22)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			::String _hx_run( ::Dynamic _){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testInStringInterpolation",0x307fc5fc,"thx.TestLambdaStaticExtension.testInStringInterpolation","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_,"_")
HXLINE(  86)				return (HX_("",00,00,00,00) + _);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			::String _hx_run( ::Dynamic _1){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testInStringInterpolation",0x307fc5fc,"thx.TestLambdaStaticExtension.testInStringInterpolation","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_1,"_1")
HXLINE(  86)				return (HX_("",00,00,00,00) + _1);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			::String _hx_run( ::Dynamic _2){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testInStringInterpolation",0x307fc5fc,"thx.TestLambdaStaticExtension.testInStringInterpolation","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_2,"_2")
HXLINE(  86)				return (HX_("X",58,00,00,00) + _2);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            			::String _hx_run( ::Dynamic _3){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testInStringInterpolation",0x307fc5fc,"thx.TestLambdaStaticExtension.testInStringInterpolation","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_3,"_3")
HXLINE(  86)				return ((HX_("",00,00,00,00) + _3) + HX_("X",58,00,00,00));
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            			::String _hx_run( ::Dynamic _4){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testInStringInterpolation",0x307fc5fc,"thx.TestLambdaStaticExtension.testInStringInterpolation","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_4,"_4")
HXLINE(  86)				return ((HX_("X",58,00,00,00) + (_4 * (int)2)) + HX_("X",58,00,00,00));
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  22)			++_g1;
HXLINE(  23)			::Array< ::String > _hx_tmp = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2)->map( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  23)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,HX_("1",31,00,00,00))->init(1,HX_("2",32,00,00,00)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),23,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testInStringInterpolation",fc,62,7f,cb)));
HXLINE(  24)			::Array< ::String > _hx_tmp1 = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2)->map( ::Dynamic(new _hx_Closure_1()));
HXDLIN(  24)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,HX_("1",31,00,00,00))->init(1,HX_("2",32,00,00,00)),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),24,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testInStringInterpolation",fc,62,7f,cb)));
HXLINE(  25)			::Array< ::String > _hx_tmp2 = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2)->map( ::Dynamic(new _hx_Closure_2()));
HXDLIN(  25)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,HX_("X1",d9,4c,00,00))->init(1,HX_("X2",da,4c,00,00)),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),25,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testInStringInterpolation",fc,62,7f,cb)));
HXLINE(  26)			::Array< ::String > _hx_tmp3 = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2)->map( ::Dynamic(new _hx_Closure_3()));
HXDLIN(  26)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,HX_("1X",07,2b,00,00))->init(1,HX_("2X",e6,2b,00,00)),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),26,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testInStringInterpolation",fc,62,7f,cb)));
HXLINE(  27)			::Array< ::String > _hx_tmp4 = ::Array_obj< Int >::__new(2)->init(0,(int)1)->init(1,(int)2)->map( ::Dynamic(new _hx_Closure_4()));
HXDLIN(  27)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,HX_("X2X",3e,f2,42,00))->init(1,HX_("X4X",fc,f3,42,00)),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),27,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testInStringInterpolation",fc,62,7f,cb)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLambdaStaticExtension_obj,testInStringInterpolation,(void))

void TestLambdaStaticExtension_obj::testFillEmpty(){
            	HX_STACK_FRAME("thx.TestLambdaStaticExtension","testFillEmpty",0xb0f3c158,"thx.TestLambdaStaticExtension.testFillEmpty","thx/TestLambdaStaticExtension.hx",31,0xb56ee791)
            	HX_STACK_THIS(this)
HXLINE(  31)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  31)		HX_VARI( Int,_g) = this->x;
HXDLIN(  31)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			 ::Dynamic _hx_run( ::Dynamic _0, ::Dynamic _1){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testFillEmpty",0xb0f3c158,"thx.TestLambdaStaticExtension.testFillEmpty","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_0,"_0")
            				HX_STACK_ARG(_1,"_1")
HXLINE(  86)				return _1;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  31)			++_g1;
HXLINE(  32)			::Array< ::Dynamic> _hx_tmp = ::thx::Arrays_obj::mapi(::Array_obj< Int >::__new(3)->init(0,(int)1)->init(1,(int)2)->init(2,(int)3), ::Dynamic(new _hx_Closure_0()));
HXDLIN(  32)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,(int)0)->init(1,(int)1)->init(2,(int)2),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),32,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testFillEmpty",58,de,bb,71)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLambdaStaticExtension_obj,testFillEmpty,(void))

void TestLambdaStaticExtension_obj::testOptionalArgs(){
            	HX_STACK_FRAME("thx.TestLambdaStaticExtension","testOptionalArgs",0x2134fd8f,"thx.TestLambdaStaticExtension.testOptionalArgs","thx/TestLambdaStaticExtension.hx",36,0xb56ee791)
            	HX_STACK_THIS(this)
HXLINE(  36)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  36)		HX_VARI( Int,_g) = this->x;
HXDLIN(  36)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			Int _hx_run( ::Dynamic callback){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testOptionalArgs",0x2134fd8f,"thx.TestLambdaStaticExtension.testOptionalArgs","thx/TestLambdaStaticExtension.hx",38,0xb56ee791)
            				HX_STACK_ARG(callback,"callback")
HXLINE(  38)				return ( (Int)(callback((int)2,(int)3)) );
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            			Int _hx_run( ::Dynamic _0, ::Dynamic _1){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testOptionalArgs",0x2134fd8f,"thx.TestLambdaStaticExtension.testOptionalArgs","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_0,"_0")
            				HX_STACK_ARG(_1,"_1")
HXLINE(  86)				return (_0 * (int)3);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            			Int _hx_run( ::Dynamic _01, ::Dynamic _11){
            				HX_STACK_FRAME("thx.TestLambdaStaticExtension","testOptionalArgs",0x2134fd8f,"thx.TestLambdaStaticExtension.testOptionalArgs","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            				HX_STACK_ARG(_01,"_01")
            				HX_STACK_ARG(_11,"_11")
HXLINE(  86)				return (_01 * _11);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  36)			++_g1;
HXLINE(  37)			HX_VARI(  ::Dynamic,f) =  ::Dynamic(new _hx_Closure_0());
HXLINE(  41)			Int _hx_tmp = ( (Int)(f( ::Dynamic(new _hx_Closure_1()))) );
HXDLIN(  41)			::utest::Assert_obj::equals((int)6,_hx_tmp,null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),41,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testOptionalArgs",8f,00,9d,38)));
HXLINE(  42)			Int _hx_tmp1 = ( (Int)(f( ::Dynamic(new _hx_Closure_2()))) );
HXDLIN(  42)			::utest::Assert_obj::equals((int)6,_hx_tmp1,null(),hx::SourceInfo(HX_("TestLambdaStaticExtension.hx",e6,f9,f1,44),42,HX_("thx.TestLambdaStaticExtension",6e,03,55,c2),HX_("testOptionalArgs",8f,00,9d,38)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLambdaStaticExtension_obj,testOptionalArgs,(void))


TestLambdaStaticExtension_obj::TestLambdaStaticExtension_obj()
{
}

hx::Val TestLambdaStaticExtension_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testFunctions") ) { return hx::Val( testFunctions_dyn()); }
		if (HX_FIELD_EQ(inName,"testFillEmpty") ) { return hx::Val( testFillEmpty_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testOptionalArgs") ) { return hx::Val( testOptionalArgs_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"testInStringInterpolation") ) { return hx::Val( testInStringInterpolation_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestLambdaStaticExtension_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestLambdaStaticExtension_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestLambdaStaticExtension_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestLambdaStaticExtension_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestLambdaStaticExtension_obj_sStaticStorageInfo = 0;
#endif

static ::String TestLambdaStaticExtension_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testFunctions","\xa9","\x87","\x3d","\xe7"),
	HX_HCSTRING("testInStringInterpolation","\xfc","\x62","\x7f","\xcb"),
	HX_HCSTRING("testFillEmpty","\x58","\xde","\xbb","\x71"),
	HX_HCSTRING("testOptionalArgs","\x8f","\x00","\x9d","\x38"),
	::String(null()) };

static void TestLambdaStaticExtension_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestLambdaStaticExtension_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestLambdaStaticExtension_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestLambdaStaticExtension_obj::__mClass,"__mClass");
};

#endif

hx::Class TestLambdaStaticExtension_obj::__mClass;

void TestLambdaStaticExtension_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestLambdaStaticExtension","\x6e","\x03","\x55","\xc2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestLambdaStaticExtension_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestLambdaStaticExtension_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestLambdaStaticExtension_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestLambdaStaticExtension_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestLambdaStaticExtension_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestLambdaStaticExtension_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
