// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx_TestStrings
#include <thx/TestStrings.h>
#endif
#ifndef INCLUDED_thx__Ord_Ord_Impl_
#include <thx/_Ord/Ord_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{

void TestStrings_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.TestStrings","new",0x72789938,"thx.TestStrings.new","thx/TestStrings.hx",15,0x9eae14f9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  15)		this->x = i;
            	}

Dynamic TestStrings_obj::__CreateEmpty() { return new TestStrings_obj; }

hx::ObjectPtr< TestStrings_obj > TestStrings_obj::__new(Int i)
{
	hx::ObjectPtr< TestStrings_obj > _hx_result = new TestStrings_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestStrings_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestStrings_obj > _hx_result = new TestStrings_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestStrings_obj::testLowerUpperCaseFirst(){
            	HX_STACK_FRAME("thx.TestStrings","testLowerUpperCaseFirst",0x9ca57325,"thx.TestStrings.testLowerUpperCaseFirst","thx/TestStrings.hx",19,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE(  19)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  19)		HX_VARI( Int,_g) = this->x;
HXDLIN(  19)		while((_g1 < _g)){
HXLINE(  19)			++_g1;
HXLINE(  20)			::String _hx_tmp = ::thx::Strings_obj::lowerCaseFirst(HX_("ABC",42,8c,31,00));
HXDLIN(  20)			::utest::Assert_obj::equals(HX_("aBC",62,d4,49,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),20,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testLowerUpperCaseFirst",4d,2e,ce,ef)));
HXLINE(  21)			::String _hx_tmp1 = ::thx::Strings_obj::upperCaseFirst(HX_("abc",62,f0,49,00));
HXDLIN(  21)			::utest::Assert_obj::equals(HX_("Abc",42,a8,31,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),21,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testLowerUpperCaseFirst",4d,2e,ce,ef)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testLowerUpperCaseFirst,(void))

void TestStrings_obj::testContains(){
            	HX_STACK_FRAME("thx.TestStrings","testContains",0x3559dcb9,"thx.TestStrings.testContains","thx/TestStrings.hx",25,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE(  25)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  25)		HX_VARI( Int,_g) = this->x;
HXDLIN(  25)		while((_g1 < _g)){
HXLINE(  25)			++_g1;
HXLINE(  26)			Int _hx_tmp = HX_("test",52,c8,f9,4c).indexOf(HX_("",00,00,00,00),null());
HXDLIN(  26)			::utest::Assert_obj::isTrue((_hx_tmp >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),26,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
HXLINE(  27)			Int _hx_tmp1 = HX_("test",52,c8,f9,4c).indexOf(HX_("t",74,00,00,00),null());
HXDLIN(  27)			::utest::Assert_obj::isTrue((_hx_tmp1 >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),27,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
HXLINE(  28)			Int _hx_tmp2 = HX_("test",52,c8,f9,4c).indexOf(HX_("te",71,65,00,00),null());
HXDLIN(  28)			::utest::Assert_obj::isTrue((_hx_tmp2 >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),28,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
HXLINE(  29)			Int _hx_tmp3 = HX_("test",52,c8,f9,4c).indexOf(HX_("tes",e2,5d,58,00),null());
HXDLIN(  29)			::utest::Assert_obj::isTrue((_hx_tmp3 >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),29,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
HXLINE(  30)			Int _hx_tmp4 = HX_("test",52,c8,f9,4c).indexOf(HX_("test",52,c8,f9,4c),null());
HXDLIN(  30)			::utest::Assert_obj::isTrue((_hx_tmp4 >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),30,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
HXLINE(  31)			Int _hx_tmp5 = HX_("one two three",90,d0,67,6e).indexOf(HX_("one",66,9a,54,00),null());
HXDLIN(  31)			::utest::Assert_obj::isTrue((_hx_tmp5 >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),31,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
HXLINE(  32)			Int _hx_tmp6 = HX_("one two three",90,d0,67,6e).indexOf(HX_("two",8c,6d,58,00),null());
HXDLIN(  32)			::utest::Assert_obj::isTrue((_hx_tmp6 >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),32,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
HXLINE(  33)			Int _hx_tmp7 = HX_("one two three",90,d0,67,6e).indexOf(HX_("three",5e,54,90,0f),null());
HXDLIN(  33)			::utest::Assert_obj::isTrue((_hx_tmp7 >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),33,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
HXLINE(  34)			Int _hx_tmp8 = HX_("test",52,c8,f9,4c).indexOf(HX_("test ",8e,7f,95,0d),null());
HXDLIN(  34)			::utest::Assert_obj::isFalse((_hx_tmp8 >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),34,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
HXLINE(  35)			Int _hx_tmp9 = HX_("test",52,c8,f9,4c).indexOf(HX_(" test",72,58,cc,b9),null());
HXDLIN(  35)			::utest::Assert_obj::isFalse((_hx_tmp9 >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),35,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
HXLINE(  36)			Int _hx_tmp10 = HX_("test",52,c8,f9,4c).indexOf(HX_("tes ",fe,c7,f9,4c),null());
HXDLIN(  36)			::utest::Assert_obj::isFalse((_hx_tmp10 >= (int)0),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),36,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContains",91,80,82,9f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testContains,(void))

void TestStrings_obj::testCount(){
            	HX_STACK_FRAME("thx.TestStrings","testCount",0x936c7df5,"thx.TestStrings.testCount","thx/TestStrings.hx",40,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE(  40)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  40)		HX_VARI( Int,_g) = this->x;
HXDLIN(  40)		while((_g1 < _g)){
HXLINE(  40)			++_g1;
HXLINE(  41)			Int _hx_tmp = ::thx::Strings_obj::count(HX_("one two three four five six seven eight nine ten",d5,f2,bb,75),HX_("o",6f,00,00,00));
HXDLIN(  41)			::utest::Assert_obj::equals((int)3,_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),41,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testCount",1d,83,65,13)));
HXLINE(  42)			Int _hx_tmp1 = ::thx::Strings_obj::count(HX_("one two three four five six seven eight nine ten",d5,f2,bb,75),HX_("en",69,58,00,00));
HXDLIN(  42)			::utest::Assert_obj::equals((int)2,_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),42,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testCount",1d,83,65,13)));
HXLINE(  43)			Int _hx_tmp2 = ::thx::Strings_obj::count(HX_("one two three four five six seven eight nine ten",d5,f2,bb,75),HX_(" t",54,1c,00,00));
HXDLIN(  43)			::utest::Assert_obj::equals((int)3,_hx_tmp2,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),43,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testCount",1d,83,65,13)));
HXLINE(  44)			Int _hx_tmp3 = ::thx::Strings_obj::count(HX_("one two three four five six seven eight nine ten",d5,f2,bb,75),HX_("ve",2f,67,00,00));
HXDLIN(  44)			::utest::Assert_obj::equals((int)2,_hx_tmp3,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),44,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testCount",1d,83,65,13)));
HXLINE(  45)			Int _hx_tmp4 = ::thx::Strings_obj::count(HX_("xxxxxx",00,fb,95,62),HX_("y",79,00,00,00));
HXDLIN(  45)			::utest::Assert_obj::equals((int)0,_hx_tmp4,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),45,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testCount",1d,83,65,13)));
HXLINE(  46)			Int _hx_tmp5 = ::thx::Strings_obj::count(HX_("xxxxxx",00,fb,95,62),HX_("x",78,00,00,00));
HXDLIN(  46)			::utest::Assert_obj::equals((int)6,_hx_tmp5,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),46,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testCount",1d,83,65,13)));
HXLINE(  47)			Int _hx_tmp6 = ::thx::Strings_obj::count(HX_("xxxxxx",00,fb,95,62),HX_("xx",00,69,00,00));
HXDLIN(  47)			::utest::Assert_obj::equals((int)3,_hx_tmp6,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),47,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testCount",1d,83,65,13)));
HXLINE(  48)			Int _hx_tmp7 = ::thx::Strings_obj::count(HX_("xxxxxx",00,fb,95,62),HX_("xxx",78,77,5b,00));
HXDLIN(  48)			::utest::Assert_obj::equals((int)2,_hx_tmp7,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),48,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testCount",1d,83,65,13)));
HXLINE(  49)			Int _hx_tmp8 = ::thx::Strings_obj::count(HX_("xxxxxx",00,fb,95,62),HX_("xxxx",00,12,ad,4f));
HXDLIN(  49)			::utest::Assert_obj::equals((int)1,_hx_tmp8,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),49,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testCount",1d,83,65,13)));
HXLINE(  50)			Int _hx_tmp9 = ::thx::Strings_obj::count(HX_("x",78,00,00,00),HX_("xx",00,69,00,00));
HXDLIN(  50)			::utest::Assert_obj::equals((int)0,_hx_tmp9,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),50,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testCount",1d,83,65,13)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testCount,(void))

void TestStrings_obj::testContainsAny(){
            	HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",54,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE(  54)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  54)		HX_VARI( Int,_g) = this->x;
HXDLIN(  54)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			Bool _hx_run(::String a1){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",55,0x9eae14f9)
            				HX_STACK_ARG(a1,"a1")
HXLINE(  55)				return ::thx::Strings_obj::contains(HX_("test",52,c8,f9,4c),a1);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			Bool _hx_run(::String a11){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",56,0x9eae14f9)
            				HX_STACK_ARG(a11,"a11")
HXLINE(  56)				return ::thx::Strings_obj::contains(HX_("test",52,c8,f9,4c),a11);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			Bool _hx_run(::String a12){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",57,0x9eae14f9)
            				HX_STACK_ARG(a12,"a12")
HXLINE(  57)				return ::thx::Strings_obj::contains(HX_("test",52,c8,f9,4c),a12);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            			Bool _hx_run(::String a13){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",58,0x9eae14f9)
            				HX_STACK_ARG(a13,"a13")
HXLINE(  58)				return ::thx::Strings_obj::contains(HX_("test",52,c8,f9,4c),a13);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            			Bool _hx_run(::String a14){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",59,0x9eae14f9)
            				HX_STACK_ARG(a14,"a14")
HXLINE(  59)				return ::thx::Strings_obj::contains(HX_("test",52,c8,f9,4c),a14);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            			Bool _hx_run(::String a15){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",60,0x9eae14f9)
            				HX_STACK_ARG(a15,"a15")
HXLINE(  60)				return ::thx::Strings_obj::contains(HX_("test",52,c8,f9,4c),a15);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_6) HXARGC(1)
            			Bool _hx_run(::String a16){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",61,0x9eae14f9)
            				HX_STACK_ARG(a16,"a16")
HXLINE(  61)				return ::thx::Strings_obj::contains(HX_("test",52,c8,f9,4c),a16);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_7) HXARGC(1)
            			Bool _hx_run(::String a17){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",62,0x9eae14f9)
            				HX_STACK_ARG(a17,"a17")
HXLINE(  62)				return ::thx::Strings_obj::contains(HX_("test",52,c8,f9,4c),a17);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_8) HXARGC(1)
            			Bool _hx_run(::String a18){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",63,0x9eae14f9)
            				HX_STACK_ARG(a18,"a18")
HXLINE(  63)				return ::thx::Strings_obj::contains(HX_("test",52,c8,f9,4c),a18);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_9) HXARGC(1)
            			Bool _hx_run(::String a19){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",64,0x9eae14f9)
            				HX_STACK_ARG(a19,"a19")
HXLINE(  64)				return ::thx::Strings_obj::contains(HX_("one two three",90,d0,67,6e),a19);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_10) HXARGC(1)
            			Bool _hx_run(::String a110){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",65,0x9eae14f9)
            				HX_STACK_ARG(a110,"a110")
HXLINE(  65)				return ::thx::Strings_obj::contains(HX_("one two three",90,d0,67,6e),a110);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_11) HXARGC(1)
            			Bool _hx_run(::String a111){
            				HX_STACK_FRAME("thx.TestStrings","testContainsAny",0xcdb1cfb3,"thx.TestStrings.testContainsAny","thx/TestStrings.hx",66,0x9eae14f9)
            				HX_STACK_ARG(a111,"a111")
HXLINE(  66)				return ::thx::Strings_obj::contains(HX_("one two three",90,d0,67,6e),a111);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  54)			++_g1;
HXLINE(  55)			Bool _hx_tmp = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("t",74,00,00,00))->init(1,HX_("x",78,00,00,00))->init(2,HX_("y",79,00,00,00)), ::Dynamic(new _hx_Closure_0()));
HXDLIN(  55)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),55,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  56)			Bool _hx_tmp1 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("e",65,00,00,00))->init(1,HX_("x",78,00,00,00))->init(2,HX_("y",79,00,00,00)), ::Dynamic(new _hx_Closure_1()));
HXDLIN(  56)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),56,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  57)			Bool _hx_tmp2 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("s",73,00,00,00))->init(1,HX_("x",78,00,00,00))->init(2,HX_("y",79,00,00,00)), ::Dynamic(new _hx_Closure_2()));
HXDLIN(  57)			::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),57,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  58)			Bool _hx_tmp3 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("x",78,00,00,00))->init(1,HX_("t",74,00,00,00))->init(2,HX_("y",79,00,00,00)), ::Dynamic(new _hx_Closure_3()));
HXDLIN(  58)			::utest::Assert_obj::isTrue(_hx_tmp3,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),58,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  59)			Bool _hx_tmp4 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("x",78,00,00,00))->init(1,HX_("e",65,00,00,00))->init(2,HX_("y",79,00,00,00)), ::Dynamic(new _hx_Closure_4()));
HXDLIN(  59)			::utest::Assert_obj::isTrue(_hx_tmp4,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),59,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  60)			Bool _hx_tmp5 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("x",78,00,00,00))->init(1,HX_("s",73,00,00,00))->init(2,HX_("y",79,00,00,00)), ::Dynamic(new _hx_Closure_5()));
HXDLIN(  60)			::utest::Assert_obj::isTrue(_hx_tmp5,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),60,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  61)			Bool _hx_tmp6 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("x",78,00,00,00))->init(1,HX_("y",79,00,00,00))->init(2,HX_("t",74,00,00,00)), ::Dynamic(new _hx_Closure_6()));
HXDLIN(  61)			::utest::Assert_obj::isTrue(_hx_tmp6,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),61,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  62)			Bool _hx_tmp7 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("x",78,00,00,00))->init(1,HX_("y",79,00,00,00))->init(2,HX_("e",65,00,00,00)), ::Dynamic(new _hx_Closure_7()));
HXDLIN(  62)			::utest::Assert_obj::isTrue(_hx_tmp7,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),62,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  63)			Bool _hx_tmp8 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("x",78,00,00,00))->init(1,HX_("y",79,00,00,00))->init(2,HX_("s",73,00,00,00)), ::Dynamic(new _hx_Closure_8()));
HXDLIN(  63)			::utest::Assert_obj::isTrue(_hx_tmp8,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),63,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  64)			Bool _hx_tmp9 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("zero",28,0f,f1,50))->init(1,HX_("one",66,9a,54,00))->init(2,HX_("two",8c,6d,58,00)), ::Dynamic(new _hx_Closure_9()));
HXDLIN(  64)			::utest::Assert_obj::isTrue(_hx_tmp9,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),64,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  65)			Bool _hx_tmp10 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("one",66,9a,54,00))->init(1,HX_("two",8c,6d,58,00))->init(2,HX_("three",5e,54,90,0f)), ::Dynamic(new _hx_Closure_10()));
HXDLIN(  65)			::utest::Assert_obj::isTrue(_hx_tmp10,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),65,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
HXLINE(  66)			Bool _hx_tmp11 = ::thx::Arrays_obj::any(::Array_obj< ::String >::__new(3)->init(0,HX_("one two",d2,06,08,40))->init(1,HX_("x",78,00,00,00))->init(2,HX_("three",5e,54,90,0f)), ::Dynamic(new _hx_Closure_11()));
HXDLIN(  66)			::utest::Assert_obj::isTrue(_hx_tmp11,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),66,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testContainsAny",db,22,17,79)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testContainsAny,(void))

void TestStrings_obj::testHashCode(){
            	HX_STACK_FRAME("thx.TestStrings","testHashCode",0x10538eb5,"thx.TestStrings.testHashCode","thx/TestStrings.hx",70,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE(  70)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  70)		HX_VARI( Int,_g) = this->x;
HXDLIN(  70)		while((_g1 < _g)){
HXLINE(  70)			++_g1;
HXLINE(  71)			Int _hx_tmp = ::thx::Strings_obj::hashCode(HX_("a",61,00,00,00));
HXDLIN(  71)			::utest::Assert_obj::equals((int)97,_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),71,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testHashCode",8d,32,7c,7a)));
HXLINE(  72)			Int _hx_tmp1 = ::thx::Strings_obj::hashCode(HX_("abc",62,f0,49,00));
HXDLIN(  72)			::utest::Assert_obj::equals((int)96354,_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),72,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testHashCode",8d,32,7c,7a)));
HXLINE(  73)			Int _hx_tmp2 = ::thx::Strings_obj::hashCode(HX_("abcdefghijklm",67,1c,5f,9b));
HXDLIN(  73)			::utest::Assert_obj::equals((int)898829415,_hx_tmp2,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),73,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testHashCode",8d,32,7c,7a)));
HXLINE(  74)			Int _hx_tmp3 = ::thx::Strings_obj::hashCode(HX_("abcdefghijklmabcdefghijklmabcdefghijklmabcdefghijklmabcdefghijklm!!!",7a,24,59,f4));
HXDLIN(  74)			::utest::Assert_obj::equals((int)410520826,_hx_tmp3,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),74,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testHashCode",8d,32,7c,7a)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testHashCode,(void))

void TestStrings_obj::testUcwordsws(){
            	HX_STACK_FRAME("thx.TestStrings","testUcwordsws",0xdce1475d,"thx.TestStrings.testUcwordsws","thx/TestStrings.hx",78,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE(  78)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  78)		HX_VARI( Int,_g) = this->x;
HXDLIN(  78)		while((_g1 < _g)){
HXLINE(  78)			++_g1;
HXLINE(  79)			HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(5)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),HX_("Test",72,f4,d2,37))
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("test",52,c8,f9,4c))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),HX_("Test Test",e0,32,4d,7c))
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("test test",e0,26,a1,ef))))->init(2, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),HX_(" Test Test  Test ",ae,7c,18,3b))
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_(" test test  test ",ce,98,bd,a9))))->init(3, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),HX_("Test\nTest",ca,6f,7c,d1))
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("test\ntest",ca,63,d0,44))))->init(4, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),HX_("Test\tTest",49,db,15,3e))
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("test\ttest",49,cf,69,b1))));
HXLINE(  86)			{
HXLINE(  86)				HX_VARI( Int,_g2) = (int)0;
HXDLIN(  86)				while((_g2 < tests->length)){
HXLINE(  86)					HX_VARI(  ::Dynamic,item) = tests->__get(_g2);
HXDLIN(  86)					++_g2;
HXLINE(  87)					::String _hx_tmp = ::thx::Strings_obj::capitalizeWords( ::Dynamic(item->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)),true);
HXDLIN(  87)					::utest::Assert_obj::equals( ::Dynamic(item->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),87,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testUcwordsws",85,00,48,56)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testUcwordsws,(void))

void TestStrings_obj::testDifferAt(){
            	HX_STACK_FRAME("thx.TestStrings","testDifferAt",0x35400bdf,"thx.TestStrings.testDifferAt","thx/TestStrings.hx",91,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE(  91)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  91)		HX_VARI( Int,_g) = this->x;
HXDLIN(  91)		while((_g1 < _g)){
HXLINE(  91)			++_g1;
HXLINE(  92)			Int _hx_tmp = ::thx::Strings_obj::diffAt(HX_("abcdef",a3,32,9f,77),HX_("abc123",10,53,78,77));
HXDLIN(  92)			::utest::Assert_obj::equals((int)3,_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),92,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testDifferAt",b7,af,68,9f)));
HXLINE(  93)			Int _hx_tmp1 = ::thx::Strings_obj::diffAt(HX_("",00,00,00,00),HX_("abc123",10,53,78,77));
HXDLIN(  93)			::utest::Assert_obj::equals((int)0,_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),93,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testDifferAt",b7,af,68,9f)));
HXLINE(  94)			Int _hx_tmp2 = ::thx::Strings_obj::diffAt(HX_("a",61,00,00,00),HX_("abc123",10,53,78,77));
HXDLIN(  94)			::utest::Assert_obj::equals((int)1,_hx_tmp2,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),94,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testDifferAt",b7,af,68,9f)));
HXLINE(  95)			Int _hx_tmp3 = ::thx::Strings_obj::diffAt(HX_("abc123",10,53,78,77),HX_("",00,00,00,00));
HXDLIN(  95)			::utest::Assert_obj::equals((int)0,_hx_tmp3,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),95,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testDifferAt",b7,af,68,9f)));
HXLINE(  96)			Int _hx_tmp4 = ::thx::Strings_obj::diffAt(HX_("abc123",10,53,78,77),HX_("a",61,00,00,00));
HXDLIN(  96)			::utest::Assert_obj::equals((int)1,_hx_tmp4,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),96,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testDifferAt",b7,af,68,9f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testDifferAt,(void))

void TestStrings_obj::testEllipsis(){
            	HX_STACK_FRAME("thx.TestStrings","testEllipsis",0x12d107eb,"thx.TestStrings.testEllipsis","thx/TestStrings.hx",100,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 100)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 100)		HX_VARI( Int,_g) = this->x;
HXDLIN( 100)		while((_g1 < _g)){
HXLINE( 100)			++_g1;
HXLINE( 101)			HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(6)->init(0, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),null())
            				->setFixed(1,HX_("len",d5,4b,52,00),null())
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("abcdefghijkl",46,01,62,7a))))->init(1, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),null())
            				->setFixed(1,HX_("len",d5,4b,52,00),(int)100)
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("abcdefghijkl",46,01,62,7a))))->init(2, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),null())
            				->setFixed(1,HX_("len",d5,4b,52,00),(int)5)
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("abcd\xe2""\x80""\xa6""",06,0d,0c,34))))->init(3, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),HX_(" ...",ce,e3,49,15))
            				->setFixed(1,HX_("len",d5,4b,52,00),(int)5)
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("a ...",af,28,28,ef))))->init(4, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),HX_(" ...",ce,e3,49,15))
            				->setFixed(1,HX_("len",d5,4b,52,00),(int)2)
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("..",40,28,00,00))))->init(5, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),HX_(" ...",ce,e3,49,15))
            				->setFixed(1,HX_("len",d5,4b,52,00),(int)10)
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("abcdef ...",f1,a3,ba,2b))));
HXLINE( 110)			{
HXLINE( 110)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 110)				while((_g2 < tests->length)){
HXLINE( 110)					HX_VARI(  ::Dynamic,item) = tests->__get(_g2);
HXDLIN( 110)					++_g2;
HXLINE( 111)					::String _hx_tmp = ::thx::Strings_obj::ellipsis(HX_("abcdefghijkl",46,01,62,7a), ::Dynamic(item->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)), ::Dynamic(item->__Field(HX_("symbol",58,af,dd,ee),hx::paccDynamic)));
HXDLIN( 111)					::utest::Assert_obj::equals( ::Dynamic(item->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),111,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testEllipsis",c3,ab,f9,7c)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testEllipsis,(void))

void TestStrings_obj::testEllipsisMiddle(){
            	HX_STACK_FRAME("thx.TestStrings","testEllipsisMiddle",0x48f791a0,"thx.TestStrings.testEllipsisMiddle","thx/TestStrings.hx",115,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 115)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 115)		HX_VARI( Int,_g) = this->x;
HXDLIN( 115)		while((_g1 < _g)){
HXLINE( 115)			++_g1;
HXLINE( 116)			HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(6)->init(0, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),null())
            				->setFixed(1,HX_("len",d5,4b,52,00),null())
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("abcdefghijkl",46,01,62,7a))))->init(1, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),null())
            				->setFixed(1,HX_("len",d5,4b,52,00),(int)100)
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("abcdefghijkl",46,01,62,7a))))->init(2, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),null())
            				->setFixed(1,HX_("len",d5,4b,52,00),(int)5)
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("ab\xe2""\x80""\xa6""kl",a8,18,44,66))))->init(3, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),HX_(" ...",ce,e3,49,15))
            				->setFixed(1,HX_("len",d5,4b,52,00),(int)5)
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("a ...",af,28,28,ef))))->init(4, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),HX_(" ...",ce,e3,49,15))
            				->setFixed(1,HX_("len",d5,4b,52,00),(int)2)
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("..",40,28,00,00))))->init(5, ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("symbol",58,af,dd,ee),HX_(" ...",ce,e3,49,15))
            				->setFixed(1,HX_("len",d5,4b,52,00),(int)10)
            				->setFixed(2,HX_("expected",78,2e,30,40),HX_("abc ...jkl",5b,7d,64,ed))));
HXLINE( 125)			{
HXLINE( 125)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 125)				while((_g2 < tests->length)){
HXLINE( 125)					HX_VARI(  ::Dynamic,item) = tests->__get(_g2);
HXDLIN( 125)					++_g2;
HXLINE( 126)					::String _hx_tmp = ::thx::Strings_obj::ellipsisMiddle(HX_("abcdefghijkl",46,01,62,7a), ::Dynamic(item->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)), ::Dynamic(item->__Field(HX_("symbol",58,af,dd,ee),hx::paccDynamic)));
HXDLIN( 126)					::utest::Assert_obj::equals( ::Dynamic(item->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),126,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testEllipsisMiddle",78,a7,d8,01)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testEllipsisMiddle,(void))

void TestStrings_obj::testUcwords(){
            	HX_STACK_FRAME("thx.TestStrings","testUcwords",0xedaedd01,"thx.TestStrings.testUcwords","thx/TestStrings.hx",130,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 130)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 130)		HX_VARI( Int,_g) = this->x;
HXDLIN( 130)		while((_g1 < _g)){
HXLINE( 130)			++_g1;
HXLINE( 131)			HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(5)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),HX_("Test",72,f4,d2,37))
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("test",52,c8,f9,4c))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),HX_("Test Test",e0,32,4d,7c))
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("test test",e0,26,a1,ef))))->init(2, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),HX_(" Test-Test:Test_Test : Test ",9a,cb,0a,e1))
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_(" test-test:test_test : test ",ba,43,a6,1f))))->init(3, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),HX_("Test\nTest",ca,6f,7c,d1))
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("test\ntest",ca,63,d0,44))))->init(4, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),HX_("Test\tTest",49,db,15,3e))
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("test\ttest",49,cf,69,b1))));
HXLINE( 138)			{
HXLINE( 138)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 138)				while((_g2 < tests->length)){
HXLINE( 138)					HX_VARI(  ::Dynamic,item) = tests->__get(_g2);
HXDLIN( 138)					++_g2;
HXLINE( 139)					::String _hx_tmp = ::thx::Strings_obj::capitalizeWords( ::Dynamic(item->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)),null());
HXDLIN( 139)					::utest::Assert_obj::equals( ::Dynamic(item->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),139,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testUcwords",29,7c,d1,21)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testUcwords,(void))

void TestStrings_obj::testAlphaNum(){
            	HX_STACK_FRAME("thx.TestStrings","testAlphaNum",0x2a07e022,"thx.TestStrings.testAlphaNum","thx/TestStrings.hx",143,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 143)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 143)		HX_VARI( Int,_g) = this->x;
HXDLIN( 143)		while((_g1 < _g)){
HXLINE( 143)			++_g1;
HXLINE( 144)			HX_VARI( ::Array< ::Dynamic>,tests) = ::Array_obj< ::Dynamic>::__new(5)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),true)
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("a",61,00,00,00))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),true)
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("1a",10,2b,00,00))))->init(2, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),false)
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_(" a",41,1c,00,00))))->init(3, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),false)
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_(" ",20,00,00,00))))->init(4, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("expected",78,2e,30,40),false)
            				->setFixed(1,HX_("test",52,c8,f9,4c),HX_("",00,00,00,00))));
HXLINE( 151)			{
HXLINE( 151)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 151)				while((_g2 < tests->length)){
HXLINE( 151)					HX_VARI(  ::Dynamic,item) = tests->__get(_g2);
HXDLIN( 151)					++_g2;
HXLINE( 152)					Bool _hx_tmp = ( (Bool)(item->__Field(HX_("expected",78,2e,30,40),hx::paccDynamic)) );
HXDLIN( 152)					Bool _hx_tmp1 = ::thx::Strings_obj::ALPHANUM->match( ::Dynamic(item->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)));
HXDLIN( 152)					::utest::Assert_obj::equals(_hx_tmp,_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),152,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testAlphaNum",fa,83,30,94)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testAlphaNum,(void))

void TestStrings_obj::testHumanize(){
            	HX_STACK_FRAME("thx.TestStrings","testHumanize",0xfe764e61,"thx.TestStrings.testHumanize","thx/TestStrings.hx",156,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 156)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 156)		HX_VARI( Int,_g) = this->x;
HXDLIN( 156)		while((_g1 < _g)){
HXLINE( 156)			++_g1;
HXLINE( 157)			::String _hx_tmp = ::thx::Strings_obj::humanize(HX_("helloWorld",e0,71,04,c7));
HXDLIN( 157)			::utest::Assert_obj::equals(HX_("hello world",c4,ee,7b,f8),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),157,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testHumanize",39,f2,9e,68)));
HXLINE( 158)			::String _hx_tmp1 = ::thx::Strings_obj::humanize(HX_("my_long_string",e1,fb,9e,26));
HXDLIN( 158)			::utest::Assert_obj::equals(HX_("my long string",41,c8,ba,bc),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),158,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testHumanize",39,f2,9e,68)));
HXLINE( 159)			::String _hx_tmp2 = ::thx::Strings_obj::humanize(HX_("ignoreMANY",b1,ae,66,48));
HXDLIN( 159)			::utest::Assert_obj::equals(HX_("ignore many",6d,f2,8d,45),_hx_tmp2,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),159,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testHumanize",39,f2,9e,68)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testHumanize,(void))

void TestStrings_obj::testWrapColumn(){
            	HX_STACK_FRAME("thx.TestStrings","testWrapColumn",0x0a374d5a,"thx.TestStrings.testWrapColumn","thx/TestStrings.hx",163,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 163)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 163)		HX_VARI( Int,_g) = this->x;
HXDLIN( 163)		while((_g1 < _g)){
HXLINE( 163)			++_g1;
HXLINE( 181)			::String _hx_tmp = ::thx::Strings_obj::wrapColumns(HX_("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",0c,1b,8d,91),(int)20,null(),null());
HXLINE( 166)			::utest::Assert_obj::equals(HX_("Lorem ipsum dolor\nsit amet,\nconsectetur\nadipisicing elit,\nsed do eiusmod\ntempor incididunt ut\nlabore et dolore\nmagna aliqua. Ut\nenim ad minim\nveniam, quis nostrud\nexercitation ullamco\nlaboris nisi ut\naliquip ex ea\ncommodo consequat.",b2,05,9c,fb),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),166,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testWrapColumn",32,97,b2,ca)));
HXLINE( 201)			::String _hx_tmp1 = ::thx::Strings_obj::wrapColumns(HX_("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",0c,1b,8d,91),(int)20,HX_("    ",00,38,3f,15),null());
HXLINE( 183)			::utest::Assert_obj::equals(HX_("    Lorem ipsum\n    dolor sit amet,\n    consectetur\n    adipisicing\n    elit, sed do\n    eiusmod tempor\n    incididunt ut\n    labore et dolore\n    magna aliqua. Ut\n    enim ad minim\n    veniam, quis\n    nostrud\n    exercitation\n    ullamco laboris\n    nisi ut aliquip\n    ex ea commodo\n    consequat.",5c,6a,e4,42),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),183,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testWrapColumn",32,97,b2,ca)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testWrapColumn,(void))

void TestStrings_obj::testWrapColumnPreserveNewLines(){
            	HX_STACK_FRAME("thx.TestStrings","testWrapColumnPreserveNewLines",0xe42ef2e5,"thx.TestStrings.testWrapColumnPreserveNewLines","thx/TestStrings.hx",206,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 206)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 206)		HX_VARI( Int,_g) = this->x;
HXDLIN( 206)		while((_g1 < _g)){
HXLINE( 206)			++_g1;
HXLINE( 210)			::String _hx_tmp = ::thx::Strings_obj::wrapColumns(HX_("Lorem ipsum dolor sit amet,\n\nconsectetur adipisicing elit",5b,52,f8,d5),(int)18,null(),null());
HXLINE( 208)			::utest::Assert_obj::equals(HX_("Lorem ipsum dolor\nsit amet,\n\nconsectetur\nadipisicing elit",9b,8f,bb,8f),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),208,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testWrapColumnPreserveNewLines",bd,6c,45,8f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testWrapColumnPreserveNewLines,(void))

void TestStrings_obj::testWrapColumnLong(){
            	HX_STACK_FRAME("thx.TestStrings","testWrapColumnLong",0xd102d3f6,"thx.TestStrings.testWrapColumnLong","thx/TestStrings.hx",214,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 214)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 214)		HX_VARI( Int,_g) = this->x;
HXDLIN( 214)		while((_g1 < _g)){
HXLINE( 214)			++_g1;
HXLINE( 219)			::String _hx_tmp = ::thx::Strings_obj::wrapColumns(HX_("aaaaaaaaaa aaaa aaa aa",bf,9e,89,b5),(int)6,null(),null());
HXLINE( 216)			::utest::Assert_obj::equals(HX_("aaaaaaaaaa\naaaa\naaa aa",7f,fe,3d,7c),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),216,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testWrapColumnLong",ce,e9,e3,89)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testWrapColumnLong,(void))

void TestStrings_obj::testRepeat(){
            	HX_STACK_FRAME("thx.TestStrings","testRepeat",0xa5855f75,"thx.TestStrings.testRepeat","thx/TestStrings.hx",223,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 223)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 223)		HX_VARI( Int,_g) = this->x;
HXDLIN( 223)		while((_g1 < _g)){
HXLINE( 223)			++_g1;
HXLINE( 224)			::String _hx_tmp = ::thx::Strings_obj::repeat(HX_("Xy",21,4d,00,00),(int)3);
HXDLIN( 224)			::utest::Assert_obj::equals(HX_("XyXyXy",23,d6,6a,15),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),224,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testRepeat",4d,dd,70,1f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testRepeat,(void))

void TestStrings_obj::testUpTo(){
            	HX_STACK_FRAME("thx.TestStrings","testUpTo",0x5979ea50,"thx.TestStrings.testUpTo","thx/TestStrings.hx",228,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 228)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 228)		HX_VARI( Int,_g) = this->x;
HXDLIN( 228)		while((_g1 < _g)){
HXLINE( 228)			++_g1;
HXLINE( 229)			::String _hx_tmp = ::thx::Strings_obj::upTo(HX_("abcdef",a3,32,9f,77),HX_("x",78,00,00,00));
HXDLIN( 229)			::utest::Assert_obj::equals(HX_("abcdef",a3,32,9f,77),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),229,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testUpTo",28,c2,dd,50)));
HXLINE( 230)			::String _hx_tmp1 = ::thx::Strings_obj::upTo(HX_("abcdef",a3,32,9f,77),HX_("cd",a1,56,00,00));
HXDLIN( 230)			::utest::Assert_obj::equals(HX_("ab",e1,54,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),230,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testUpTo",28,c2,dd,50)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testUpTo,(void))

void TestStrings_obj::testFrom(){
            	HX_STACK_FRAME("thx.TestStrings","testFrom",0x4f915304,"thx.TestStrings.testFrom","thx/TestStrings.hx",234,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 234)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 234)		HX_VARI( Int,_g) = this->x;
HXDLIN( 234)		while((_g1 < _g)){
HXLINE( 234)			++_g1;
HXLINE( 235)			::String _hx_tmp = ::thx::Strings_obj::from(HX_("abcdef",a3,32,9f,77),HX_("x",78,00,00,00));
HXDLIN( 235)			::utest::Assert_obj::equals(HX_("",00,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),235,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testFrom",dc,2a,f5,46)));
HXLINE( 236)			::String _hx_tmp1 = ::thx::Strings_obj::from(HX_("abcdef",a3,32,9f,77),HX_("cd",a1,56,00,00));
HXDLIN( 236)			::utest::Assert_obj::equals(HX_("cdef",42,59,bc,41),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),236,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testFrom",dc,2a,f5,46)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testFrom,(void))

void TestStrings_obj::testAfter(){
            	HX_STACK_FRAME("thx.TestStrings","testAfter",0x66ab9f42,"thx.TestStrings.testAfter","thx/TestStrings.hx",240,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 240)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 240)		HX_VARI( Int,_g) = this->x;
HXDLIN( 240)		while((_g1 < _g)){
HXLINE( 240)			++_g1;
HXLINE( 241)			::String _hx_tmp = ::thx::Strings_obj::after(HX_("abcdef",a3,32,9f,77),HX_("x",78,00,00,00));
HXDLIN( 241)			::utest::Assert_obj::equals(HX_("",00,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),241,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testAfter",6a,a4,a4,e6)));
HXLINE( 242)			::String _hx_tmp1 = ::thx::Strings_obj::after(HX_("abcdef",a3,32,9f,77),HX_("cd",a1,56,00,00));
HXDLIN( 242)			::utest::Assert_obj::equals(HX_("ef",61,58,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),242,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testAfter",6a,a4,a4,e6)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testAfter,(void))

void TestStrings_obj::testStripTags(){
            	HX_STACK_FRAME("thx.TestStrings","testStripTags",0x9bda43f7,"thx.TestStrings.testStripTags","thx/TestStrings.hx",246,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 246)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 246)		HX_VARI( Int,_g) = this->x;
HXDLIN( 246)		while((_g1 < _g)){
HXLINE( 246)			++_g1;
HXLINE( 247)			::String _hx_tmp = ::thx::Strings_obj::stripTags(HX_("a<br/> <script src=\"aaa\">code;</script> x",9d,0f,21,f7));
HXDLIN( 247)			::utest::Assert_obj::equals(HX_("a code; x",87,77,32,61),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),247,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testStripTags",1f,fd,40,15)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testStripTags,(void))

void TestStrings_obj::testLtrim(){
            	HX_STACK_FRAME("thx.TestStrings","testLtrim",0xc5537c74,"thx.TestStrings.testLtrim","thx/TestStrings.hx",251,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 251)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 251)		HX_VARI( Int,_g) = this->x;
HXDLIN( 251)		while((_g1 < _g)){
HXLINE( 251)			++_g1;
HXLINE( 252)			::String _hx_tmp = ::thx::Strings_obj::trimCharsLeft(HX_("abcde",63,a4,f0,1a),HX_("x",78,00,00,00));
HXDLIN( 252)			::utest::Assert_obj::equals(HX_("abcde",63,a4,f0,1a),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),252,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testLtrim",9c,81,4c,45)));
HXLINE( 253)			::String _hx_tmp1 = ::thx::Strings_obj::trimCharsLeft(HX_("abcde",63,a4,f0,1a),HX_("cba",e2,74,4b,00));
HXDLIN( 253)			::utest::Assert_obj::equals(HX_("de",81,57,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),253,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testLtrim",9c,81,4c,45)));
HXLINE( 254)			::String _hx_tmp2 = ::thx::Strings_obj::trimCharsLeft(HX_("abcde",63,a4,f0,1a),HX_("b",62,00,00,00));
HXDLIN( 254)			::utest::Assert_obj::equals(HX_("abcde",63,a4,f0,1a),_hx_tmp2,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),254,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testLtrim",9c,81,4c,45)));
HXLINE( 256)			::String _hx_tmp3 = ::thx::Strings_obj::trimCharsLeft(HX_("/",2f,00,00,00),HX_("/",2f,00,00,00));
HXDLIN( 256)			::utest::Assert_obj::equals(HX_("",00,00,00,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),256,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testLtrim",9c,81,4c,45)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testLtrim,(void))

void TestStrings_obj::testRtrim(){
            	HX_STACK_FRAME("thx.TestStrings","testRtrim",0x39baf77a,"thx.TestStrings.testRtrim","thx/TestStrings.hx",260,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 260)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 260)		HX_VARI( Int,_g) = this->x;
HXDLIN( 260)		while((_g1 < _g)){
HXLINE( 260)			++_g1;
HXLINE( 261)			::String _hx_tmp = ::thx::Strings_obj::trimCharsRight(HX_("abcde",63,a4,f0,1a),HX_("x",78,00,00,00));
HXDLIN( 261)			::utest::Assert_obj::equals(HX_("abcde",63,a4,f0,1a),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),261,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testRtrim",a2,fc,b3,b9)));
HXLINE( 262)			::String _hx_tmp1 = ::thx::Strings_obj::trimCharsRight(HX_("abcde",63,a4,f0,1a),HX_("ced",82,77,4b,00));
HXDLIN( 262)			::utest::Assert_obj::equals(HX_("ab",e1,54,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),262,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testRtrim",a2,fc,b3,b9)));
HXLINE( 263)			::String _hx_tmp2 = ::thx::Strings_obj::trimCharsRight(HX_("abcde",63,a4,f0,1a),HX_("d",64,00,00,00));
HXDLIN( 263)			::utest::Assert_obj::equals(HX_("abcde",63,a4,f0,1a),_hx_tmp2,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),263,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testRtrim",a2,fc,b3,b9)));
HXLINE( 265)			::String _hx_tmp3 = ::thx::Strings_obj::trimCharsRight(HX_("/",2f,00,00,00),HX_("/",2f,00,00,00));
HXDLIN( 265)			::utest::Assert_obj::equals(HX_("",00,00,00,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),265,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testRtrim",a2,fc,b3,b9)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testRtrim,(void))

void TestStrings_obj::testTrim(){
            	HX_STACK_FRAME("thx.TestStrings","testTrim",0x58d24a7c,"thx.TestStrings.testTrim","thx/TestStrings.hx",269,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 269)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 269)		HX_VARI( Int,_g) = this->x;
HXDLIN( 269)		while((_g1 < _g)){
HXLINE( 269)			++_g1;
HXLINE( 270)			::String _hx_tmp = ::thx::Strings_obj::trimCharsLeft(HX_("abcde",63,a4,f0,1a),HX_("x",78,00,00,00));
HXDLIN( 270)			::String _hx_tmp1 = ::thx::Strings_obj::trimCharsRight(_hx_tmp,HX_("x",78,00,00,00));
HXDLIN( 270)			::utest::Assert_obj::equals(HX_("abcde",63,a4,f0,1a),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),270,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testTrim",54,22,36,50)));
HXLINE( 271)			::String _hx_tmp2 = ::thx::Strings_obj::trimCharsLeft(HX_("abcde",63,a4,f0,1a),HX_("abe",64,f0,49,00));
HXDLIN( 271)			::String _hx_tmp3 = ::thx::Strings_obj::trimCharsRight(_hx_tmp2,HX_("abe",64,f0,49,00));
HXDLIN( 271)			::utest::Assert_obj::equals(HX_("cd",a1,56,00,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),271,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testTrim",54,22,36,50)));
HXLINE( 272)			::String _hx_tmp4 = ::thx::Strings_obj::trimCharsLeft(HX_("abcde",63,a4,f0,1a),HX_("bd",c2,55,00,00));
HXDLIN( 272)			::String _hx_tmp5 = ::thx::Strings_obj::trimCharsRight(_hx_tmp4,HX_("bd",c2,55,00,00));
HXDLIN( 272)			::utest::Assert_obj::equals(HX_("abcde",63,a4,f0,1a),_hx_tmp5,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),272,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testTrim",54,22,36,50)));
HXLINE( 274)			::String _hx_tmp6 = ::thx::Strings_obj::trimCharsLeft(HX_("/",2f,00,00,00),HX_("/",2f,00,00,00));
HXDLIN( 274)			::String _hx_tmp7 = ::thx::Strings_obj::trimCharsRight(_hx_tmp6,HX_("/",2f,00,00,00));
HXDLIN( 274)			::utest::Assert_obj::equals(HX_("",00,00,00,00),_hx_tmp7,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),274,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testTrim",54,22,36,50)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testTrim,(void))

void TestStrings_obj::testToArray(){
            	HX_STACK_FRAME("thx.TestStrings","testToArray",0x7aba08c4,"thx.TestStrings.testToArray","thx/TestStrings.hx",278,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 278)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 278)		HX_VARI( Int,_g) = this->x;
HXDLIN( 278)		while((_g1 < _g)){
HXLINE( 278)			++_g1;
HXLINE( 279)			HX_VARI( ::Array< ::String >,e) = ::Array_obj< ::String >::__new(9)->init(0,HX_("a",61,00,00,00))->init(1,HX_("\xe2""\x98""\xba""",84,02,ac,00))->init(2,HX_("b",62,00,00,00))->init(3,HX_("\xe2""\x98""\xba""",84,02,ac,00))->init(4,HX_("\xe2""\x98""\xba""",84,02,ac,00))->init(5,HX_("c",63,00,00,00))->init(6,HX_("\xe2""\x98""\xba""",84,02,ac,00))->init(7,HX_("\xe2""\x98""\xba""",84,02,ac,00))->init(8,HX_("\xe2""\x98""\xba""",84,02,ac,00));
HXLINE( 281)			::Array< ::String > _hx_tmp = HX_("a\xe2""\x98""\xba""b\xe2""\x98""\xba""\xe2""\x98""\xba""c\xe2""\x98""\xba""\xe2""\x98""\xba""\xe2""\x98""\xba""",00,32,31,d3).split(HX_("",00,00,00,00));
HXDLIN( 281)			::utest::Assert_obj::same(e,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),281,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testToArray",ec,a7,dc,ae)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testToArray,(void))

void TestStrings_obj::testToLines(){
            	HX_STACK_FRAME("thx.TestStrings","testToLines",0xca2c792a,"thx.TestStrings.testToLines","thx/TestStrings.hx",285,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 285)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 285)		HX_VARI( Int,_g) = this->x;
HXDLIN( 285)		while((_g1 < _g)){
HXLINE( 285)			++_g1;
HXLINE( 289)			::Array< ::String > _hx_tmp = ::thx::Strings_obj::SPLIT_LINES->split(HX_("Split\nto\nlines",80,45,cf,00));
HXDLIN( 289)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Split",ba,5a,9c,14))->init(1,HX_("to",7b,65,00,00))->init(2,HX_("lines",ff,dd,01,75)),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),289,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testToLines",52,18,4f,fe)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testToLines,(void))

void TestStrings_obj::testReverse(){
            	HX_STACK_FRAME("thx.TestStrings","testReverse",0xa3a287c8,"thx.TestStrings.testReverse","thx/TestStrings.hx",293,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 293)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 293)		HX_VARI( Int,_g) = this->x;
HXDLIN( 293)		while((_g1 < _g)){
HXLINE( 293)			++_g1;
HXLINE( 296)			::String _hx_tmp = ::thx::Strings_obj::reverse(HX_("a\xe2""\x98""\xba""b\xe2""\x98""\xba""\xe2""\x98""\xba""c\xe2""\x98""\xba""\xe2""\x98""\xba""\xe2""\x98""\xba""",00,32,31,d3));
HXDLIN( 296)			::utest::Assert_obj::same(HX_("\xe2""\x98""\xba""\xe2""\x98""\xba""\xe2""\x98""\xba""c\xe2""\x98""\xba""\xe2""\x98""\xba""b\xe2""\x98""\xba""a",c0,12,39,03),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),296,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testReverse",f0,26,c5,d7)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testReverse,(void))

void TestStrings_obj::testOrder(){
            	HX_STACK_FRAME("thx.TestStrings","testOrder",0x7e2a29b4,"thx.TestStrings.testOrder","thx/TestStrings.hx",300,0x9eae14f9)
            	HX_STACK_THIS(this)
HXLINE( 300)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 300)		HX_VARI( Int,_g) = this->x;
HXDLIN( 300)		while((_g1 < _g)){
HXLINE( 300)			++_g1;
HXLINE( 301)			::hx::EnumBase _hx_tmp = ::thx::_Ord::Ord_Impl__obj::order(::thx::Strings_obj::order,HX_("companyId",78,de,c6,ff),HX_("companyId",78,de,c6,ff));
HXDLIN( 301)			::utest::Assert_obj::equals(::thx::OrderingImpl_obj::EQ_dyn(),_hx_tmp,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),301,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testOrder",dc,2e,23,fe)));
HXLINE( 302)			::hx::EnumBase _hx_tmp1 = ::thx::_Ord::Ord_Impl__obj::order(::thx::Strings_obj::order,HX_("companyIc",77,de,c6,ff),HX_("companyId",78,de,c6,ff));
HXDLIN( 302)			::utest::Assert_obj::equals(::thx::OrderingImpl_obj::LT_dyn(),_hx_tmp1,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),302,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testOrder",dc,2e,23,fe)));
HXLINE( 303)			::hx::EnumBase _hx_tmp2 = ::thx::_Ord::Ord_Impl__obj::order(::thx::Strings_obj::order,HX_("companyId",78,de,c6,ff),HX_("companyIc",77,de,c6,ff));
HXDLIN( 303)			::utest::Assert_obj::equals(::thx::OrderingImpl_obj::GT_dyn(),_hx_tmp2,null(),hx::SourceInfo(HX_("TestStrings.hx",8e,ec,92,5d),303,HX_("thx.TestStrings",46,dd,fd,b4),HX_("testOrder",dc,2e,23,fe)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestStrings_obj,testOrder,(void))


TestStrings_obj::TestStrings_obj()
{
}

hx::Val TestStrings_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testUpTo") ) { return hx::Val( testUpTo_dyn()); }
		if (HX_FIELD_EQ(inName,"testFrom") ) { return hx::Val( testFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"testTrim") ) { return hx::Val( testTrim_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testCount") ) { return hx::Val( testCount_dyn()); }
		if (HX_FIELD_EQ(inName,"testAfter") ) { return hx::Val( testAfter_dyn()); }
		if (HX_FIELD_EQ(inName,"testLtrim") ) { return hx::Val( testLtrim_dyn()); }
		if (HX_FIELD_EQ(inName,"testRtrim") ) { return hx::Val( testRtrim_dyn()); }
		if (HX_FIELD_EQ(inName,"testOrder") ) { return hx::Val( testOrder_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testRepeat") ) { return hx::Val( testRepeat_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testUcwords") ) { return hx::Val( testUcwords_dyn()); }
		if (HX_FIELD_EQ(inName,"testToArray") ) { return hx::Val( testToArray_dyn()); }
		if (HX_FIELD_EQ(inName,"testToLines") ) { return hx::Val( testToLines_dyn()); }
		if (HX_FIELD_EQ(inName,"testReverse") ) { return hx::Val( testReverse_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testContains") ) { return hx::Val( testContains_dyn()); }
		if (HX_FIELD_EQ(inName,"testHashCode") ) { return hx::Val( testHashCode_dyn()); }
		if (HX_FIELD_EQ(inName,"testDifferAt") ) { return hx::Val( testDifferAt_dyn()); }
		if (HX_FIELD_EQ(inName,"testEllipsis") ) { return hx::Val( testEllipsis_dyn()); }
		if (HX_FIELD_EQ(inName,"testAlphaNum") ) { return hx::Val( testAlphaNum_dyn()); }
		if (HX_FIELD_EQ(inName,"testHumanize") ) { return hx::Val( testHumanize_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testUcwordsws") ) { return hx::Val( testUcwordsws_dyn()); }
		if (HX_FIELD_EQ(inName,"testStripTags") ) { return hx::Val( testStripTags_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testWrapColumn") ) { return hx::Val( testWrapColumn_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testContainsAny") ) { return hx::Val( testContainsAny_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"testEllipsisMiddle") ) { return hx::Val( testEllipsisMiddle_dyn()); }
		if (HX_FIELD_EQ(inName,"testWrapColumnLong") ) { return hx::Val( testWrapColumnLong_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"testLowerUpperCaseFirst") ) { return hx::Val( testLowerUpperCaseFirst_dyn()); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"testWrapColumnPreserveNewLines") ) { return hx::Val( testWrapColumnPreserveNewLines_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestStrings_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestStrings_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestStrings_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestStrings_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestStrings_obj_sStaticStorageInfo = 0;
#endif

static ::String TestStrings_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testLowerUpperCaseFirst","\x4d","\x2e","\xce","\xef"),
	HX_HCSTRING("testContains","\x91","\x80","\x82","\x9f"),
	HX_HCSTRING("testCount","\x1d","\x83","\x65","\x13"),
	HX_HCSTRING("testContainsAny","\xdb","\x22","\x17","\x79"),
	HX_HCSTRING("testHashCode","\x8d","\x32","\x7c","\x7a"),
	HX_HCSTRING("testUcwordsws","\x85","\x00","\x48","\x56"),
	HX_HCSTRING("testDifferAt","\xb7","\xaf","\x68","\x9f"),
	HX_HCSTRING("testEllipsis","\xc3","\xab","\xf9","\x7c"),
	HX_HCSTRING("testEllipsisMiddle","\x78","\xa7","\xd8","\x01"),
	HX_HCSTRING("testUcwords","\x29","\x7c","\xd1","\x21"),
	HX_HCSTRING("testAlphaNum","\xfa","\x83","\x30","\x94"),
	HX_HCSTRING("testHumanize","\x39","\xf2","\x9e","\x68"),
	HX_HCSTRING("testWrapColumn","\x32","\x97","\xb2","\xca"),
	HX_HCSTRING("testWrapColumnPreserveNewLines","\xbd","\x6c","\x45","\x8f"),
	HX_HCSTRING("testWrapColumnLong","\xce","\xe9","\xe3","\x89"),
	HX_HCSTRING("testRepeat","\x4d","\xdd","\x70","\x1f"),
	HX_HCSTRING("testUpTo","\x28","\xc2","\xdd","\x50"),
	HX_HCSTRING("testFrom","\xdc","\x2a","\xf5","\x46"),
	HX_HCSTRING("testAfter","\x6a","\xa4","\xa4","\xe6"),
	HX_HCSTRING("testStripTags","\x1f","\xfd","\x40","\x15"),
	HX_HCSTRING("testLtrim","\x9c","\x81","\x4c","\x45"),
	HX_HCSTRING("testRtrim","\xa2","\xfc","\xb3","\xb9"),
	HX_HCSTRING("testTrim","\x54","\x22","\x36","\x50"),
	HX_HCSTRING("testToArray","\xec","\xa7","\xdc","\xae"),
	HX_HCSTRING("testToLines","\x52","\x18","\x4f","\xfe"),
	HX_HCSTRING("testReverse","\xf0","\x26","\xc5","\xd7"),
	HX_HCSTRING("testOrder","\xdc","\x2e","\x23","\xfe"),
	::String(null()) };

static void TestStrings_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestStrings_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestStrings_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestStrings_obj::__mClass,"__mClass");
};

#endif

hx::Class TestStrings_obj::__mClass;

void TestStrings_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.TestStrings","\x46","\xdd","\xfd","\xb4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestStrings_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestStrings_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestStrings_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestStrings_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestStrings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestStrings_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
