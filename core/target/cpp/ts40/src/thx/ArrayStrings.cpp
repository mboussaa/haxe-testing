// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_ArrayStrings
#include <thx/ArrayStrings.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Options
#include <thx/Options.h>
#endif
#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif

namespace thx{

void ArrayStrings_obj::__construct() { }

Dynamic ArrayStrings_obj::__CreateEmpty() { return new ArrayStrings_obj; }

hx::ObjectPtr< ArrayStrings_obj > ArrayStrings_obj::__new()
{
	hx::ObjectPtr< ArrayStrings_obj > _hx_result = new ArrayStrings_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ArrayStrings_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayStrings_obj > _hx_result = new ArrayStrings_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< ::String > ArrayStrings_obj::compact(::Array< ::String > arr){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Bool _hx_run(::String v){
            			HX_STACK_FRAME("thx.ArrayStrings","compact",0x1b8c0c68,"thx.ArrayStrings.compact","thx/Arrays.hx",1271,0x537e0999)
            			HX_STACK_ARG(v,"v")
HXLINE(1271)			return !(::thx::Strings_obj::isEmpty(v));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.ArrayStrings","compact",0x1b8c0c68,"thx.ArrayStrings.compact","thx/Arrays.hx",1271,0x537e0999)
            	HX_STACK_ARG(arr,"arr")
HXLINE(1271)		return arr->filter( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayStrings_obj,compact,return )

::String ArrayStrings_obj::max(::Array< ::String > arr){
            	HX_STACK_FRAME("thx.ArrayStrings","max",0x694b04e9,"thx.ArrayStrings.max","thx/Arrays.hx",1277,0x537e0999)
            	HX_STACK_ARG(arr,"arr")
HXLINE(1277)		::hx::EnumBase _hx_tmp = ::thx::Arrays_obj::maxBy(arr,::thx::Strings_obj::order);
HXDLIN(1277)		return ( (::String)(::thx::Options_obj::getOrElse(_hx_tmp,null())) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayStrings_obj,max,return )

::String ArrayStrings_obj::min(::Array< ::String > arr){
            	HX_STACK_FRAME("thx.ArrayStrings","min",0x694b0bd7,"thx.ArrayStrings.min","thx/Arrays.hx",1283,0x537e0999)
            	HX_STACK_ARG(arr,"arr")
HXLINE(1283)		::hx::EnumBase _hx_tmp = ::thx::Arrays_obj::minBy(arr,::thx::Strings_obj::order);
HXDLIN(1283)		return ( (::String)(::thx::Options_obj::getOrElse(_hx_tmp,null())) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayStrings_obj,min,return )


ArrayStrings_obj::ArrayStrings_obj()
{
}

bool ArrayStrings_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compact") ) { outValue = compact_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ArrayStrings_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ArrayStrings_obj_sStaticStorageInfo = 0;
#endif

static void ArrayStrings_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArrayStrings_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArrayStrings_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArrayStrings_obj::__mClass,"__mClass");
};

#endif

hx::Class ArrayStrings_obj::__mClass;

static ::String ArrayStrings_obj_sStaticFields[] = {
	HX_HCSTRING("compact","\xa3","\x0b","\x69","\x83"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	::String(null())
};

void ArrayStrings_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.ArrayStrings","\x33","\x94","\x46","\x04");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ArrayStrings_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArrayStrings_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ArrayStrings_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ArrayStrings_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArrayStrings_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayStrings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayStrings_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
