// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx__BigInt_BigInt_Impl_
#include <thx/_BigInt/BigInt_Impl_.h>
#endif
#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Bigs
#include <thx/bigint/Bigs.h>
#endif
#ifndef INCLUDED_thx_bigint_Small
#include <thx/bigint/Small.h>
#endif

namespace thx{
namespace _BigInt{

void BigInt_Impl__obj::__construct() { }

Dynamic BigInt_Impl__obj::__CreateEmpty() { return new BigInt_Impl__obj; }

hx::ObjectPtr< BigInt_Impl__obj > BigInt_Impl__obj::__new()
{
	hx::ObjectPtr< BigInt_Impl__obj > _hx_result = new BigInt_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic BigInt_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BigInt_Impl__obj > _hx_result = new BigInt_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Dynamic BigInt_Impl__obj::zero;

::Dynamic BigInt_Impl__obj::one;

::Dynamic BigInt_Impl__obj::two;

::Dynamic BigInt_Impl__obj::negativeOne;

::Dynamic BigInt_Impl__obj::fromInt(Int value){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","fromInt",0xe2dec110,"thx._BigInt.BigInt_Impl_.fromInt","thx/BigInt.hx",17,0x6ced8164)
            	HX_STACK_ARG(value,"value")
HXLINE(  17)		return ::thx::bigint::Bigs_obj::fromInt(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,fromInt,return )

::Dynamic BigInt_Impl__obj::fromFloat(Float value){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","fromFloat",0xad5383fd,"thx._BigInt.BigInt_Impl_.fromFloat","thx/BigInt.hx",20,0x6ced8164)
            	HX_STACK_ARG(value,"value")
HXLINE(  20)		return ::thx::bigint::Bigs_obj::fromFloat(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,fromFloat,return )

::Dynamic BigInt_Impl__obj::fromInt64( ::cpp::Int64Struct value){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","fromInt64",0x68dd544e,"thx._BigInt.BigInt_Impl_.fromInt64","thx/BigInt.hx",23,0x6ced8164)
            	HX_STACK_ARG(value,"value")
HXLINE(  23)		return ::thx::bigint::Bigs_obj::fromInt64(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,fromInt64,return )

::Dynamic BigInt_Impl__obj::fromString(::String value){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","fromString",0xcb99ff50,"thx._BigInt.BigInt_Impl_.fromString","thx/BigInt.hx",26,0x6ced8164)
            	HX_STACK_ARG(value,"value")
HXLINE(  26)		return ::thx::bigint::Bigs_obj::parseBase(value,(int)10);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,fromString,return )

::Dynamic BigInt_Impl__obj::fromStringWithBase(::String value,Int base){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","fromStringWithBase",0xdd1090a7,"thx._BigInt.BigInt_Impl_.fromStringWithBase","thx/BigInt.hx",29,0x6ced8164)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(base,"base")
HXLINE(  29)		return ::thx::bigint::Bigs_obj::parseBase(value,base);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,fromStringWithBase,return )

::Dynamic BigInt_Impl__obj::randomBetween(::Dynamic a,::Dynamic b){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","randomBetween",0xbbfdf3b0,"thx._BigInt.BigInt_Impl_.randomBetween","thx/BigInt.hx",31,0x6ced8164)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  32)		::Dynamic _hx_tmp;
HXDLIN(  32)		Bool _hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::less(a,b);
HXDLIN(  32)		if (_hx_tmp1) {
HXLINE(  32)			_hx_tmp = a;
            		}
            		else {
HXLINE(  32)			_hx_tmp = b;
            		}
HXDLIN(  32)		HX_VARI( ::Dynamic,low) = _hx_tmp;
HXLINE(  33)		::Dynamic _hx_tmp2;
HXDLIN(  33)		Bool _hx_tmp3 = ::thx::_BigInt::BigInt_Impl__obj::greater(a,b);
HXDLIN(  33)		if (_hx_tmp3) {
HXLINE(  33)			_hx_tmp2 = a;
            		}
            		else {
HXLINE(  33)			_hx_tmp2 = b;
            		}
HXLINE(  32)		HX_VARI( ::Dynamic,range) = ::thx::bigint::BigIntImpl_obj::subtract(_hx_tmp2,low);
HXLINE(  35)		HX_VARI( ::Dynamic,that) = ::thx::bigint::BigIntImpl_obj::random(range);
HXDLIN(  35)		return ::thx::bigint::BigIntImpl_obj::add(low,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,randomBetween,return )

Int BigInt_Impl__obj::compare(::Dynamic a,::Dynamic b){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","compare",0x0e4cfc10,"thx._BigInt.BigInt_Impl_.compare","thx/BigInt.hx",39,0x6ced8164)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  39)		return ::thx::bigint::BigIntImpl_obj::compareTo(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,compare,return )

Bool BigInt_Impl__obj::isZero(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","isZero",0xc5108727,"thx._BigInt.BigInt_Impl_.isZero","thx/BigInt.hx",42,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  42)		return ::thx::bigint::BigIntImpl_obj::isZero(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,isZero,return )

::Dynamic BigInt_Impl__obj::abs(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","abs",0xf9a7025d,"thx._BigInt.BigInt_Impl_.abs","thx/BigInt.hx",45,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  45)		return ::thx::bigint::BigIntImpl_obj::abs(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,abs,return )

Int BigInt_Impl__obj::compareTo(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","compareTo",0xf89069ab,"thx._BigInt.BigInt_Impl_.compareTo","thx/BigInt.hx",48,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE(  48)		return ::thx::bigint::BigIntImpl_obj::compareTo(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,compareTo,return )

Int BigInt_Impl__obj::compareToAbs(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","compareToAbs",0x9a105b87,"thx._BigInt.BigInt_Impl_.compareToAbs","thx/BigInt.hx",51,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE(  51)		return ::thx::bigint::BigIntImpl_obj::compareToAbs(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,compareToAbs,return )

::Dynamic BigInt_Impl__obj::next(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","next",0x811520a8,"thx._BigInt.BigInt_Impl_.next","thx/BigInt.hx",54,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  54)		return ::thx::bigint::BigIntImpl_obj::next(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,next,return )

::Dynamic BigInt_Impl__obj::prev(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","prev",0x82715aa8,"thx._BigInt.BigInt_Impl_.prev","thx/BigInt.hx",57,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  57)		return ::thx::bigint::BigIntImpl_obj::prev(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,prev,return )

::Dynamic BigInt_Impl__obj::square(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","square",0xafaab392,"thx._BigInt.BigInt_Impl_.square","thx/BigInt.hx",60,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  60)		return ::thx::bigint::BigIntImpl_obj::square(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,square,return )

::Dynamic BigInt_Impl__obj::pow(::Dynamic this1,::Dynamic exp){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","pow",0xf9b26f83,"thx._BigInt.BigInt_Impl_.pow","thx/BigInt.hx",63,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(exp,"exp")
HXLINE(  63)		return ::thx::bigint::BigIntImpl_obj::pow(this1,exp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,pow,return )

Bool BigInt_Impl__obj::isEven(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","isEven",0xb73be719,"thx._BigInt.BigInt_Impl_.isEven","thx/BigInt.hx",66,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  66)		return ::thx::bigint::BigIntImpl_obj::isEven(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,isEven,return )

Bool BigInt_Impl__obj::isOdd(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","isOdd",0x99885e90,"thx._BigInt.BigInt_Impl_.isOdd","thx/BigInt.hx",69,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  69)		return ::thx::bigint::BigIntImpl_obj::isOdd(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,isOdd,return )

Bool BigInt_Impl__obj::isNegative(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","isNegative",0x431709f4,"thx._BigInt.BigInt_Impl_.isNegative","thx/BigInt.hx",72,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  72)		return ( (Bool)(this1->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,isNegative,return )

Bool BigInt_Impl__obj::isPositive(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","isPositive",0xbccf8a38,"thx._BigInt.BigInt_Impl_.isPositive","thx/BigInt.hx",75,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  75)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(this1,::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN(  75)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,isPositive,return )

Bool BigInt_Impl__obj::isUnit(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","isUnit",0xc1c94283,"thx._BigInt.BigInt_Impl_.isUnit","thx/BigInt.hx",78,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  78)		return ::thx::bigint::BigIntImpl_obj::isUnit(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,isUnit,return )

Bool BigInt_Impl__obj::isDivisibleBy(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","isDivisibleBy",0x8f0358a5,"thx._BigInt.BigInt_Impl_.isDivisibleBy","thx/BigInt.hx",80,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE(  81)		Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(that);
HXDLIN(  81)		if (_hx_tmp) {
HXLINE(  82)			return false;
            		}
HXLINE(  83)		Bool _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::isUnit(that);
HXDLIN(  83)		if (_hx_tmp1) {
HXLINE(  84)			return true;
            		}
HXLINE(  85)		Bool _hx_tmp2 = ::thx::_BigInt::BigInt_Impl__obj::equals(that,::thx::_BigInt::BigInt_Impl__obj::two);
HXDLIN(  85)		if (_hx_tmp2) {
HXLINE(  86)			return ::thx::bigint::BigIntImpl_obj::isEven(this1);
            		}
HXLINE(  87)		HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::BigIntImpl_obj::modulo(this1,that);
HXDLIN(  87)		return ::thx::bigint::BigIntImpl_obj::isZero(this2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,isDivisibleBy,return )

Bool BigInt_Impl__obj::isPrime(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","isPrime",0xeff4de60,"thx._BigInt.BigInt_Impl_.isPrime","thx/BigInt.hx",90,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  91)		HX_VARI( ::Dynamic,n) = ::thx::bigint::BigIntImpl_obj::abs(this1);
HXDLIN(  91)		HX_VARI( ::Dynamic,nPrev) = ::thx::bigint::BigIntImpl_obj::prev(n);
HXLINE(  93)		Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isUnit(n);
HXDLIN(  93)		if (_hx_tmp) {
HXLINE(  94)			return false;
            		}
HXLINE(  95)		Bool _hx_tmp1;
HXDLIN(  95)		Bool _hx_tmp2;
HXDLIN(  95)		Bool _hx_tmp3 = !(::thx::_BigInt::BigInt_Impl__obj::equals(n,::thx::bigint::Bigs_obj::fromInt((int)2)));
HXDLIN(  95)		if (_hx_tmp3) {
HXLINE(  95)			_hx_tmp2 = ::thx::_BigInt::BigInt_Impl__obj::equals(n,::thx::bigint::Bigs_obj::fromInt((int)3));
            		}
            		else {
HXLINE(  95)			_hx_tmp2 = true;
            		}
HXDLIN(  95)		if (!(_hx_tmp2)) {
HXLINE(  95)			_hx_tmp1 = ::thx::_BigInt::BigInt_Impl__obj::equals(n,::thx::bigint::Bigs_obj::fromInt((int)5));
            		}
            		else {
HXLINE(  95)			_hx_tmp1 = true;
            		}
HXDLIN(  95)		if (_hx_tmp1) {
HXLINE(  96)			return true;
            		}
HXLINE(  97)		Bool _hx_tmp4;
HXDLIN(  97)		Bool _hx_tmp5;
HXDLIN(  97)		Bool _hx_tmp6 = !(::thx::bigint::BigIntImpl_obj::isEven(n));
HXDLIN(  97)		if (_hx_tmp6) {
HXLINE(  97)			_hx_tmp5 = ::thx::_BigInt::BigInt_Impl__obj::isDivisibleBy(n,::thx::bigint::Bigs_obj::fromInt((int)3));
            		}
            		else {
HXLINE(  97)			_hx_tmp5 = true;
            		}
HXDLIN(  97)		if (!(_hx_tmp5)) {
HXLINE(  97)			_hx_tmp4 = ::thx::_BigInt::BigInt_Impl__obj::isDivisibleBy(n,::thx::bigint::Bigs_obj::fromInt((int)5));
            		}
            		else {
HXLINE(  97)			_hx_tmp4 = true;
            		}
HXDLIN(  97)		if (_hx_tmp4) {
HXLINE(  98)			return false;
            		}
HXLINE(  99)		Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::less(n,::thx::bigint::Bigs_obj::fromInt((int)25));
HXDLIN(  99)		if (_hx_tmp7) {
HXLINE( 100)			return true;
            		}
HXLINE( 101)		HX_VARI( ::Array< Int >,a) = ::Array_obj< Int >::__new(8)->init(0,(int)2)->init(1,(int)3)->init(2,(int)5)->init(3,(int)7)->init(4,(int)11)->init(5,(int)13)->init(6,(int)17)->init(7,(int)19);
HXDLIN( 101)		HX_VARI( ::Dynamic,b) = nPrev;
HXDLIN( 101)		HX_VAR( ::Dynamic,d);
HXDLIN( 101)		HX_VAR( Bool,t);
HXDLIN( 101)		HX_VAR( ::Dynamic,x);
HXLINE( 104)		while(true){
HXLINE( 104)			Bool _hx_tmp8 = !(::thx::bigint::BigIntImpl_obj::isEven(b));
HXDLIN( 104)			if (_hx_tmp8) {
HXLINE( 104)				goto _hx_goto_0;
            			}
HXLINE( 105)			HX_VARI( ::Dynamic,that) = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 105)			b = ::thx::bigint::BigIntImpl_obj::divide(b,that);
            		}
            		_hx_goto_0:;
HXLINE( 106)		{
HXLINE( 106)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 106)			HX_VARI( Int,_g) = a->length;
HXDLIN( 106)			while((_g1 < _g)){
HXLINE( 106)				HX_VARI( Int,i) = _g1++;
HXLINE( 107)				x = ::thx::_BigInt::BigInt_Impl__obj::modPow(::thx::bigint::Bigs_obj::fromInt(a->__get(i)),b,n);
HXLINE( 108)				Bool _hx_tmp9;
HXDLIN( 108)				Bool _hx_tmp10 = !(::thx::_BigInt::BigInt_Impl__obj::equals(x,::thx::_BigInt::BigInt_Impl__obj::one));
HXDLIN( 108)				if (_hx_tmp10) {
HXLINE( 108)					_hx_tmp9 = ::thx::_BigInt::BigInt_Impl__obj::equals(x,nPrev);
            				}
            				else {
HXLINE( 108)					_hx_tmp9 = true;
            				}
HXDLIN( 108)				if (_hx_tmp9) {
HXLINE( 109)					continue;
            				}
HXLINE( 110)				t = true;
HXLINE( 111)				d = b;
HXLINE( 112)				while(true){
HXLINE( 112)					Bool _hx_tmp11;
HXDLIN( 112)					if (t) {
HXLINE( 112)						_hx_tmp11 = ::thx::_BigInt::BigInt_Impl__obj::less(d,nPrev);
            					}
            					else {
HXLINE( 112)						_hx_tmp11 = false;
            					}
HXDLIN( 112)					if (!(_hx_tmp11)) {
HXLINE( 112)						goto _hx_goto_2;
            					}
HXLINE( 113)					HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::BigIntImpl_obj::square(x);
HXDLIN( 113)					x = ::thx::bigint::BigIntImpl_obj::modulo(this2,n);
HXLINE( 114)					Bool _hx_tmp12 = ::thx::_BigInt::BigInt_Impl__obj::equals(x,nPrev);
HXDLIN( 114)					if (_hx_tmp12) {
HXLINE( 115)						t = false;
            					}
HXLINE( 116)					HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::bigint::Bigs_obj::fromInt((int)2);
HXDLIN( 116)					d = ::thx::bigint::BigIntImpl_obj::multiply(d,that1);
            				}
            				_hx_goto_2:;
HXLINE( 118)				if (t) {
HXLINE( 119)					return false;
            				}
            			}
            		}
HXLINE( 121)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,isPrime,return )

::Dynamic BigInt_Impl__obj::modPow(::Dynamic this1,::Dynamic exp,::Dynamic mod){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","modPow",0x176fd6eb,"thx._BigInt.BigInt_Impl_.modPow","thx/BigInt.hx",124,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(exp,"exp")
            	HX_STACK_ARG(mod,"mod")
HXLINE( 125)		Bool _hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(mod);
HXDLIN( 125)		if (_hx_tmp) {
HXLINE( 126)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("Cannot take modPow with modulus 0",9b,73,c9,93),null(),hx::SourceInfo(HX_("BigInt.hx",ef,d1,01,66),126,HX_("thx._BigInt.BigInt_Impl_",d9,60,d1,34),HX_("modPow",f6,23,b7,c0))));
            		}
HXLINE( 128)		HX_VARI( ::Dynamic,r) = ::thx::bigint::Small_obj::one;
HXDLIN( 128)		HX_VARI( ::Dynamic,base) = ::thx::bigint::BigIntImpl_obj::modulo(this1,mod);
HXLINE( 131)		Bool _hx_tmp1 = ::thx::bigint::BigIntImpl_obj::isZero(base);
HXDLIN( 131)		if (_hx_tmp1) {
HXLINE( 132)			return ::thx::bigint::Small_obj::zero;
            		}
HXLINE( 134)		while(true){
HXLINE( 134)			Int _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::compareTo(exp,::thx::_BigInt::BigInt_Impl__obj::zero);
HXDLIN( 134)			if (!((_hx_tmp2 > (int)0))) {
HXLINE( 134)				goto _hx_goto_3;
            			}
HXLINE( 135)			Bool _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::isOdd(exp);
HXDLIN( 135)			if (_hx_tmp3) {
HXLINE( 136)				r = ::thx::bigint::BigIntImpl_obj::modulo(::thx::bigint::BigIntImpl_obj::multiply(r,base),mod);
            			}
HXLINE( 137)			exp = ::thx::bigint::BigIntImpl_obj::divide(exp,::thx::bigint::Small_obj::two);
HXLINE( 138)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::BigIntImpl_obj::square(base);
HXDLIN( 138)			base = ::thx::bigint::BigIntImpl_obj::modulo(this2,mod);
            		}
            		_hx_goto_3:;
HXLINE( 140)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BigInt_Impl__obj,modPow,return )

::Dynamic BigInt_Impl__obj::euclideanModPow(::Dynamic this1,::Dynamic exp,::Dynamic mod){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","euclideanModPow",0x08c6cadf,"thx._BigInt.BigInt_Impl_.euclideanModPow","thx/BigInt.hx",143,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(exp,"exp")
            	HX_STACK_ARG(mod,"mod")
HXLINE( 144)		HX_VARI( ::Dynamic,x) = ::thx::_BigInt::BigInt_Impl__obj::modPow(this1,exp,mod);
HXLINE( 145)		Bool _hx_tmp = ( (Bool)(x->__Field(HX_("sign",3d,90,53,4c),hx::paccDynamic)) );
HXDLIN( 145)		if (_hx_tmp) {
HXLINE( 145)			return ::thx::bigint::BigIntImpl_obj::add(x,mod);
            		}
            		else {
HXLINE( 145)			return x;
            		}
HXDLIN( 145)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BigInt_Impl__obj,euclideanModPow,return )

::Dynamic BigInt_Impl__obj::max(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","max",0xf9b01c8f,"thx._BigInt.BigInt_Impl_.max","thx/BigInt.hx",149,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 149)		Bool _hx_tmp = ::thx::_BigInt::BigInt_Impl__obj::greater(this1,that);
HXDLIN( 149)		if (_hx_tmp) {
HXLINE( 149)			return this1;
            		}
            		else {
HXLINE( 149)			return that;
            		}
HXDLIN( 149)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,max,return )

::Dynamic BigInt_Impl__obj::min(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","min",0xf9b0237d,"thx._BigInt.BigInt_Impl_.min","thx/BigInt.hx",152,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 152)		Bool _hx_tmp = ::thx::_BigInt::BigInt_Impl__obj::less(this1,that);
HXDLIN( 152)		if (_hx_tmp) {
HXLINE( 152)			return this1;
            		}
            		else {
HXLINE( 152)			return that;
            		}
HXDLIN( 152)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,min,return )

::Dynamic BigInt_Impl__obj::gcd(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","gcd",0xf9ab90b3,"thx._BigInt.BigInt_Impl_.gcd","thx/BigInt.hx",154,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 155)		HX_VARI( ::Dynamic,a) = ::thx::bigint::BigIntImpl_obj::abs(this1);
HXDLIN( 155)		HX_VARI( ::Dynamic,b) = ::thx::bigint::BigIntImpl_obj::abs(that);
HXLINE( 157)		Bool _hx_tmp;
HXDLIN( 157)		Bool _hx_tmp1 = !(::thx::_BigInt::BigInt_Impl__obj::equals(a,b));
HXDLIN( 157)		if (_hx_tmp1) {
HXLINE( 157)			_hx_tmp = ::thx::bigint::BigIntImpl_obj::isZero(a);
            		}
            		else {
HXLINE( 157)			_hx_tmp = true;
            		}
HXDLIN( 157)		if (_hx_tmp) {
HXLINE( 158)			return b;
            		}
HXLINE( 159)		Bool _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::isZero(b);
HXDLIN( 159)		if (_hx_tmp2) {
HXLINE( 160)			return a;
            		}
HXLINE( 161)		Bool _hx_tmp3 = ::thx::bigint::BigIntImpl_obj::isEven(a);
HXDLIN( 161)		if (_hx_tmp3) {
HXLINE( 162)			Bool _hx_tmp4 = ::thx::bigint::BigIntImpl_obj::isOdd(b);
HXDLIN( 162)			if (_hx_tmp4) {
HXLINE( 163)				return ::thx::_BigInt::BigInt_Impl__obj::gcd(::thx::bigint::BigIntImpl_obj::divide(a,::thx::bigint::Small_obj::two),b);
            			}
HXLINE( 165)			::Dynamic _hx_tmp5 = ::thx::bigint::BigIntImpl_obj::divide(a,::thx::bigint::Small_obj::two);
HXDLIN( 165)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::_BigInt::BigInt_Impl__obj::gcd(_hx_tmp5,::thx::bigint::BigIntImpl_obj::divide(b,::thx::bigint::Small_obj::two));
HXDLIN( 165)			return ::thx::bigint::BigIntImpl_obj::multiply(this2,::thx::bigint::Small_obj::two);
            		}
HXLINE( 167)		Bool _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::isEven(b);
HXDLIN( 167)		if (_hx_tmp6) {
HXLINE( 168)			return ::thx::_BigInt::BigInt_Impl__obj::gcd(a,::thx::bigint::BigIntImpl_obj::divide(b,::thx::bigint::Small_obj::two));
            		}
HXLINE( 170)		Bool _hx_tmp7 = ::thx::_BigInt::BigInt_Impl__obj::greater(a,b);
HXDLIN( 170)		if (_hx_tmp7) {
HXLINE( 171)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::bigint::BigIntImpl_obj::subtract(a,b);
HXDLIN( 171)			::Dynamic _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::divide(this3,::thx::bigint::Small_obj::two);
HXDLIN( 171)			return ::thx::_BigInt::BigInt_Impl__obj::gcd(_hx_tmp8,b);
            		}
HXLINE( 173)		HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::bigint::BigIntImpl_obj::subtract(b,a);
HXDLIN( 173)		::Dynamic _hx_tmp9 = ::thx::bigint::BigIntImpl_obj::divide(this4,::thx::bigint::Small_obj::two);
HXDLIN( 173)		return ::thx::_BigInt::BigInt_Impl__obj::gcd(_hx_tmp9,a);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,gcd,return )

::Dynamic BigInt_Impl__obj::lcm(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","lcm",0xf9af5c01,"thx._BigInt.BigInt_Impl_.lcm","thx/BigInt.hx",176,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 177)		HX_VARI( ::Dynamic,a) = ::thx::bigint::BigIntImpl_obj::abs(this1);
HXDLIN( 177)		HX_VARI( ::Dynamic,b) = ::thx::bigint::BigIntImpl_obj::abs(that);
HXLINE( 179)		HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::bigint::BigIntImpl_obj::multiply(a,b);
HXDLIN( 179)		HX_VARI_NAME( ::Dynamic,that1,"that") = ::thx::_BigInt::BigInt_Impl__obj::gcd(a,b);
HXDLIN( 179)		return ::thx::bigint::BigIntImpl_obj::divide(this2,that1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,lcm,return )

Bool BigInt_Impl__obj::greaterThan(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","greaterThan",0x3f3c3666,"thx._BigInt.BigInt_Impl_.greaterThan","thx/BigInt.hx",183,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 183)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(this1,that);
HXDLIN( 183)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,greaterThan,return )

Bool BigInt_Impl__obj::greater(::Dynamic self,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","greater",0x42a47465,"thx._BigInt.BigInt_Impl_.greater","thx/BigInt.hx",187,0x6ced8164)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 187)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(self,that);
HXDLIN( 187)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,greater,return )

Bool BigInt_Impl__obj::greaterEqualsTo(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","greaterEqualsTo",0xd263231f,"thx._BigInt.BigInt_Impl_.greaterEqualsTo","thx/BigInt.hx",190,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 190)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(this1,that);
HXDLIN( 190)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,greaterEqualsTo,return )

Bool BigInt_Impl__obj::greaterEquals(::Dynamic self,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","greaterEquals",0xebf2b084,"thx._BigInt.BigInt_Impl_.greaterEquals","thx/BigInt.hx",194,0x6ced8164)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 194)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(self,that);
HXDLIN( 194)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,greaterEquals,return )

Bool BigInt_Impl__obj::lessThan(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","lessThan",0xefb7798f,"thx._BigInt.BigInt_Impl_.lessThan","thx/BigInt.hx",197,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 197)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(this1,that);
HXDLIN( 197)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,lessThan,return )

Bool BigInt_Impl__obj::less(::Dynamic self,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","less",0x7fc2af0e,"thx._BigInt.BigInt_Impl_.less","thx/BigInt.hx",201,0x6ced8164)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 201)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(self,that);
HXDLIN( 201)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,less,return )

Bool BigInt_Impl__obj::lessEqualsTo(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","lessEqualsTo",0x50a9aec8,"thx._BigInt.BigInt_Impl_.lessEqualsTo","thx/BigInt.hx",204,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 204)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(this1,that);
HXDLIN( 204)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,lessEqualsTo,return )

Bool BigInt_Impl__obj::lessEquals(::Dynamic self,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","lessEquals",0x2423cfed,"thx._BigInt.BigInt_Impl_.lessEquals","thx/BigInt.hx",208,0x6ced8164)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 208)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(self,that);
HXDLIN( 208)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,lessEquals,return )

Bool BigInt_Impl__obj::equalsTo(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","equalsTo",0xd1bd9fcf,"thx._BigInt.BigInt_Impl_.equalsTo","thx/BigInt.hx",211,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 211)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(this1,that);
HXDLIN( 211)		return (_hx_tmp == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,equalsTo,return )

Bool BigInt_Impl__obj::equals(::Dynamic self,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","equals",0x16aba134,"thx._BigInt.BigInt_Impl_.equals","thx/BigInt.hx",215,0x6ced8164)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 215)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(self,that);
HXDLIN( 215)		return (_hx_tmp == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,equals,return )

Bool BigInt_Impl__obj::notEqualsTo(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","notEqualsTo",0xce1d5ab8,"thx._BigInt.BigInt_Impl_.notEqualsTo","thx/BigInt.hx",218,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 218)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(this1,that);
HXDLIN( 218)		return (_hx_tmp != (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,notEqualsTo,return )

Bool BigInt_Impl__obj::notEquals(::Dynamic self,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","notEquals",0x330f9fdd,"thx._BigInt.BigInt_Impl_.notEquals","thx/BigInt.hx",222,0x6ced8164)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 222)		Int _hx_tmp = ::thx::bigint::BigIntImpl_obj::compareTo(self,that);
HXDLIN( 222)		return (_hx_tmp != (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,notEquals,return )

::Dynamic BigInt_Impl__obj::add(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","add",0xf9a7040c,"thx._BigInt.BigInt_Impl_.add","thx/BigInt.hx",226,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 226)		return ::thx::bigint::BigIntImpl_obj::add(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,add,return )

::Dynamic BigInt_Impl__obj::subtract(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","subtract",0xf4948f49,"thx._BigInt.BigInt_Impl_.subtract","thx/BigInt.hx",230,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 230)		return ::thx::bigint::BigIntImpl_obj::subtract(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,subtract,return )

::Dynamic BigInt_Impl__obj::preIncrement(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","preIncrement",0xc153c241,"thx._BigInt.BigInt_Impl_.preIncrement","thx/BigInt.hx",234,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 234)		this1 = ::thx::bigint::BigIntImpl_obj::add(this1,::thx::bigint::Small_obj::one);
HXDLIN( 234)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,preIncrement,return )

::Dynamic BigInt_Impl__obj::postIncrement(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","postIncrement",0x209a9b5a,"thx._BigInt.BigInt_Impl_.postIncrement","thx/BigInt.hx",237,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 238)		HX_VARI( ::Dynamic,v) = this1;
HXLINE( 239)		this1 = ::thx::bigint::BigIntImpl_obj::add(this1,::thx::bigint::Small_obj::one);
HXLINE( 240)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,postIncrement,return )

::Dynamic BigInt_Impl__obj::preDecrement(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","preDecrement",0x9fd6b225,"thx._BigInt.BigInt_Impl_.preDecrement","thx/BigInt.hx",245,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 245)		this1 = ::thx::bigint::BigIntImpl_obj::subtract(this1,::thx::bigint::Small_obj::one);
HXDLIN( 245)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,preDecrement,return )

::Dynamic BigInt_Impl__obj::postDecrement(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","postDecrement",0xff1d8b3e,"thx._BigInt.BigInt_Impl_.postDecrement","thx/BigInt.hx",248,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 249)		HX_VARI( ::Dynamic,v) = this1;
HXLINE( 250)		this1 = ::thx::bigint::BigIntImpl_obj::subtract(this1,::thx::bigint::Small_obj::one);
HXLINE( 251)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,postDecrement,return )

::Dynamic BigInt_Impl__obj::negate(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","negate",0xbdd1f4b7,"thx._BigInt.BigInt_Impl_.negate","thx/BigInt.hx",256,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 256)		return ::thx::bigint::BigIntImpl_obj::negate(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,negate,return )

::Dynamic BigInt_Impl__obj::multiply(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","multiply",0x970ffc59,"thx._BigInt.BigInt_Impl_.multiply","thx/BigInt.hx",260,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 260)		return ::thx::bigint::BigIntImpl_obj::multiply(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,multiply,return )

::Dynamic BigInt_Impl__obj::divide(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","divide",0x15cae26e,"thx._BigInt.BigInt_Impl_.divide","thx/BigInt.hx",264,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 264)		return ::thx::bigint::BigIntImpl_obj::divide(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,divide,return )

::Dynamic BigInt_Impl__obj::modulo(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","modulo",0x178be7ab,"thx._BigInt.BigInt_Impl_.modulo","thx/BigInt.hx",268,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 268)		return ::thx::bigint::BigIntImpl_obj::modulo(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,modulo,return )

::Dynamic BigInt_Impl__obj::shiftLeft(::Dynamic this1,Int that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","shiftLeft",0xc8dd5dd4,"thx._BigInt.BigInt_Impl_.shiftLeft","thx/BigInt.hx",272,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 272)		return ::thx::bigint::BigIntImpl_obj::shiftLeft(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,shiftLeft,return )

::Dynamic BigInt_Impl__obj::shiftRight(::Dynamic this1,Int that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","shiftRight",0x6fe1c96f,"thx._BigInt.BigInt_Impl_.shiftRight","thx/BigInt.hx",276,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 276)		return ::thx::bigint::BigIntImpl_obj::shiftRight(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,shiftRight,return )

::Dynamic BigInt_Impl__obj::_hx_not(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","not",0xf9b0eafe,"thx._BigInt.BigInt_Impl_.not","thx/BigInt.hx",280,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 280)		return ::thx::bigint::BigIntImpl_obj::_hx_not(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,_hx_not,return )

::Dynamic BigInt_Impl__obj::_hx_and(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","and",0xf9a70cc2,"thx._BigInt.BigInt_Impl_.and","thx/BigInt.hx",284,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 284)		return ::thx::bigint::BigIntImpl_obj::_hx_and(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,_hx_and,return )

::Dynamic BigInt_Impl__obj::_hx_or(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","or",0xe7dd3598,"thx._BigInt.BigInt_Impl_.or","thx/BigInt.hx",288,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 288)		return ::thx::bigint::BigIntImpl_obj::_hx_or(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,_hx_or,return )

::Dynamic BigInt_Impl__obj::_hx_xor(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","xor",0xf9b88186,"thx._BigInt.BigInt_Impl_.xor","thx/BigInt.hx",292,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 292)		return ::thx::bigint::BigIntImpl_obj::_hx_xor(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,_hx_xor,return )

 ::Dynamic BigInt_Impl__obj::divMod(::Dynamic this1,::Dynamic that){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","divMod",0x15b5ace6,"thx._BigInt.BigInt_Impl_.divMod","thx/BigInt.hx",295,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 295)		return ::thx::bigint::BigIntImpl_obj::divMod(this1,that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,divMod,return )

Int BigInt_Impl__obj::toInt(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","toInt",0xec4760df,"thx._BigInt.BigInt_Impl_.toInt","thx/BigInt.hx",298,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 298)		return ::thx::bigint::BigIntImpl_obj::toInt(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,toInt,return )

Float BigInt_Impl__obj::toFloat(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","toFloat",0x59fef58c,"thx._BigInt.BigInt_Impl_.toFloat","thx/BigInt.hx",301,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 301)		return ::thx::bigint::BigIntImpl_obj::toFloat(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,toFloat,return )

 ::cpp::Int64Struct BigInt_Impl__obj::toInt64(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","toInt64",0x1588c5dd,"thx._BigInt.BigInt_Impl_.toInt64","thx/BigInt.hx",304,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 304)		return ::thx::bigint::Bigs_obj::toInt64(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,toInt64,return )

::String BigInt_Impl__obj::toString(::Dynamic this1){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","toString",0x34f1eae1,"thx._BigInt.BigInt_Impl_.toString","thx/BigInt.hx",307,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 307)		return ::thx::bigint::BigIntImpl_obj::toString(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BigInt_Impl__obj,toString,return )

::String BigInt_Impl__obj::toStringWithBase(::Dynamic this1,Int base){
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","toStringWithBase",0x0b87f538,"thx._BigInt.BigInt_Impl_.toStringWithBase","thx/BigInt.hx",310,0x6ced8164)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(base,"base")
HXLINE( 310)		return ::thx::bigint::BigIntImpl_obj::toStringWithBase(this1,base);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BigInt_Impl__obj,toStringWithBase,return )


BigInt_Impl__obj::BigInt_Impl__obj()
{
}

bool BigInt_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"or") ) { outValue = _hx_or_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"abs") ) { outValue = abs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pow") ) { outValue = pow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gcd") ) { outValue = gcd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lcm") ) { outValue = lcm_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"not") ) { outValue = _hx_not_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"and") ) { outValue = _hx_and_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xor") ) { outValue = _hx_xor_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prev") ) { outValue = prev_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"less") ) { outValue = less_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isOdd") ) { outValue = isOdd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isZero") ) { outValue = isZero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"square") ) { outValue = square_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isEven") ) { outValue = isEven_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isUnit") ) { outValue = isUnit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modPow") ) { outValue = modPow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divide") ) { outValue = divide_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modulo") ) { outValue = modulo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divMod") ) { outValue = divMod_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isPrime") ) { outValue = isPrime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greater") ) { outValue = greater_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFloat") ) { outValue = toFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt64") ) { outValue = toInt64_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lessThan") ) { outValue = lessThan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equalsTo") ) { outValue = equalsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromInt64") ) { outValue = fromInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compareTo") ) { outValue = compareTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEquals") ) { outValue = notEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shiftLeft") ) { outValue = shiftLeft_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNegative") ) { outValue = isNegative_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isPositive") ) { outValue = isPositive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEquals") ) { outValue = lessEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shiftRight") ) { outValue = shiftRight_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"greaterThan") ) { outValue = greaterThan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEqualsTo") ) { outValue = notEqualsTo_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"compareToAbs") ) { outValue = compareToAbs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEqualsTo") ) { outValue = lessEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"preIncrement") ) { outValue = preIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"preDecrement") ) { outValue = preDecrement_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"randomBetween") ) { outValue = randomBetween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isDivisibleBy") ) { outValue = isDivisibleBy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterEquals") ) { outValue = greaterEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"postIncrement") ) { outValue = postIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"postDecrement") ) { outValue = postDecrement_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"euclideanModPow") ) { outValue = euclideanModPow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterEqualsTo") ) { outValue = greaterEqualsTo_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"toStringWithBase") ) { outValue = toStringWithBase_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"fromStringWithBase") ) { outValue = fromStringWithBase_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BigInt_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo BigInt_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::bigint::BigIntImpl*/ ,(void *) &BigInt_Impl__obj::zero,HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50")},
	{hx::fsObject /*::thx::bigint::BigIntImpl*/ ,(void *) &BigInt_Impl__obj::one,HX_HCSTRING("one","\x66","\x9a","\x54","\x00")},
	{hx::fsObject /*::thx::bigint::BigIntImpl*/ ,(void *) &BigInt_Impl__obj::two,HX_HCSTRING("two","\x8c","\x6d","\x58","\x00")},
	{hx::fsObject /*::thx::bigint::BigIntImpl*/ ,(void *) &BigInt_Impl__obj::negativeOne,HX_HCSTRING("negativeOne","\xf1","\xe2","\xab","\xcf")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void BigInt_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BigInt_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BigInt_Impl__obj::zero,"zero");
	HX_MARK_MEMBER_NAME(BigInt_Impl__obj::one,"one");
	HX_MARK_MEMBER_NAME(BigInt_Impl__obj::two,"two");
	HX_MARK_MEMBER_NAME(BigInt_Impl__obj::negativeOne,"negativeOne");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BigInt_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BigInt_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BigInt_Impl__obj::zero,"zero");
	HX_VISIT_MEMBER_NAME(BigInt_Impl__obj::one,"one");
	HX_VISIT_MEMBER_NAME(BigInt_Impl__obj::two,"two");
	HX_VISIT_MEMBER_NAME(BigInt_Impl__obj::negativeOne,"negativeOne");
};

#endif

hx::Class BigInt_Impl__obj::__mClass;

static ::String BigInt_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("one","\x66","\x9a","\x54","\x00"),
	HX_HCSTRING("two","\x8c","\x6d","\x58","\x00"),
	HX_HCSTRING("negativeOne","\xf1","\xe2","\xab","\xcf"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromFloat","\xd2","\xaf","\x1f","\xb7"),
	HX_HCSTRING("fromInt64","\x23","\x80","\xa9","\x72"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("fromStringWithBase","\x32","\xc2","\xdc","\xb9"),
	HX_HCSTRING("randomBetween","\x05","\x2e","\x15","\x7b"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("isZero","\x32","\xd4","\x57","\x6e"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	HX_HCSTRING("compareToAbs","\xd2","\x82","\xbb","\xb0"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("square","\x9d","\x00","\xf2","\x58"),
	HX_HCSTRING("pow","\x98","\x5d","\x55","\x00"),
	HX_HCSTRING("isEven","\x24","\x34","\x83","\x60"),
	HX_HCSTRING("isOdd","\xe5","\xbb","\x52","\xc1"),
	HX_HCSTRING("isNegative","\x7f","\x38","\xf1","\xcb"),
	HX_HCSTRING("isPositive","\xc3","\xb8","\xa9","\x45"),
	HX_HCSTRING("isUnit","\x8e","\x8f","\x10","\x6b"),
	HX_HCSTRING("isDivisibleBy","\xfa","\x92","\x1a","\x4e"),
	HX_HCSTRING("isPrime","\xf5","\xfa","\x10","\x65"),
	HX_HCSTRING("modPow","\xf6","\x23","\xb7","\xc0"),
	HX_HCSTRING("euclideanModPow","\x74","\x04","\xe1","\x27"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("gcd","\xc8","\x7e","\x4e","\x00"),
	HX_HCSTRING("lcm","\x16","\x4a","\x52","\x00"),
	HX_HCSTRING("greaterThan","\x7b","\xc1","\x4a","\x75"),
	HX_HCSTRING("greater","\xfa","\x90","\xc0","\xb7"),
	HX_HCSTRING("greaterEqualsTo","\xb4","\x5c","\x7d","\xf1"),
	HX_HCSTRING("greaterEquals","\xd9","\xea","\x09","\xab"),
	HX_HCSTRING("lessThan","\x5a","\x5f","\x34","\xf3"),
	HX_HCSTRING("less","\x59","\x13","\xb0","\x47"),
	HX_HCSTRING("lessEqualsTo","\x13","\xd6","\x54","\x67"),
	HX_HCSTRING("lessEquals","\x78","\xfe","\xfd","\xac"),
	HX_HCSTRING("equalsTo","\x9a","\x85","\x3a","\xd5"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("notEqualsTo","\xcd","\xe5","\x2b","\x04"),
	HX_HCSTRING("notEquals","\xb2","\xcb","\xdb","\x3c"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("preIncrement","\x8c","\xe9","\xfe","\xd7"),
	HX_HCSTRING("postIncrement","\xaf","\xd5","\xb1","\xdf"),
	HX_HCSTRING("preDecrement","\x70","\xd9","\x81","\xb6"),
	HX_HCSTRING("postDecrement","\x93","\xc5","\x34","\xbe"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("divide","\x79","\x2f","\x12","\xbf"),
	HX_HCSTRING("modulo","\xb6","\x34","\xd3","\xc0"),
	HX_HCSTRING("shiftLeft","\xa9","\x89","\xa9","\xd2"),
	HX_HCSTRING("shiftRight","\xfa","\xf7","\xbb","\xf8"),
	HX_HCSTRING("not","\x13","\xd9","\x53","\x00"),
	HX_HCSTRING("and","\xd7","\xfa","\x49","\x00"),
	HX_HCSTRING("or","\x23","\x61","\x00","\x00"),
	HX_HCSTRING("xor","\x9b","\x6f","\x5b","\x00"),
	HX_HCSTRING("divMod","\xf1","\xf9","\xfc","\xbe"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("toFloat","\x21","\x12","\x1b","\xcf"),
	HX_HCSTRING("toInt64","\x72","\xe2","\xa4","\x8a"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toStringWithBase","\x03","\x1e","\x60","\x23"),
	::String(null())
};

void BigInt_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._BigInt.BigInt_Impl_","\xd9","\x60","\xd1","\x34");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BigInt_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BigInt_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BigInt_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< BigInt_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BigInt_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BigInt_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BigInt_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BigInt_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","boot",0x792e1fe7,"thx._BigInt.BigInt_Impl_.boot","thx/BigInt.hx",11,0x6ced8164)
HXLINE(  11)		zero = ::thx::bigint::Small_obj::zero;
            	}
{
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","boot",0x792e1fe7,"thx._BigInt.BigInt_Impl_.boot","thx/BigInt.hx",12,0x6ced8164)
HXLINE(  12)		one = ::thx::bigint::Small_obj::one;
            	}
{
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","boot",0x792e1fe7,"thx._BigInt.BigInt_Impl_.boot","thx/BigInt.hx",13,0x6ced8164)
HXLINE(  13)		two = ::thx::bigint::Small_obj::two;
            	}
{
            	HX_STACK_FRAME("thx._BigInt.BigInt_Impl_","boot",0x792e1fe7,"thx._BigInt.BigInt_Impl_.boot","thx/BigInt.hx",14,0x6ced8164)
HXLINE(  14)		negativeOne = ::thx::bigint::Small_obj::negativeOne;
            	}
}

} // end namespace thx
} // end namespace _BigInt
