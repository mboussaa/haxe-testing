// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_thx__Decimal_Decimal_Impl_
#include <thx/_Decimal/Decimal_Impl_.h>
#endif
#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Bigs
#include <thx/bigint/Bigs.h>
#endif
#ifndef INCLUDED_thx_bigint_DecimalImpl
#include <thx/bigint/DecimalImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Decimals
#include <thx/bigint/Decimals.h>
#endif
#ifndef INCLUDED_thx_bigint_Small
#include <thx/bigint/Small.h>
#endif

namespace thx{
namespace _Decimal{

void Decimal_Impl__obj::__construct() { }

Dynamic Decimal_Impl__obj::__CreateEmpty() { return new Decimal_Impl__obj; }

hx::ObjectPtr< Decimal_Impl__obj > Decimal_Impl__obj::__new()
{
	hx::ObjectPtr< Decimal_Impl__obj > _hx_result = new Decimal_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Decimal_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Decimal_Impl__obj > _hx_result = new Decimal_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::zero;

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::one;

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::fromInt64( ::cpp::Int64Struct value){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","fromInt64",0x356219f4,"thx._Decimal.Decimal_Impl_.fromInt64","thx/Decimal.hx",12,0x376ed9d8)
            	HX_STACK_ARG(value,"value")
HXLINE(  12)		::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::fromInt64(value);
HXDLIN(  12)		return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,fromInt64,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::fromBigInt(::Dynamic value){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","fromBigInt",0xca6b0628,"thx._Decimal.Decimal_Impl_.fromBigInt","thx/Decimal.hx",15,0x376ed9d8)
            	HX_STACK_ARG(value,"value")
HXLINE(  15)		return  ::thx::bigint::DecimalImpl_obj::__new(value,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,fromBigInt,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::fromInt(Int value){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","fromInt",0x406ab136,"thx._Decimal.Decimal_Impl_.fromInt","thx/Decimal.hx",18,0x376ed9d8)
            	HX_STACK_ARG(value,"value")
HXLINE(  18)		return ::thx::bigint::Decimals_obj::fromInt(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,fromInt,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::fromFloat(Float value){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","fromFloat",0x79d849a3,"thx._Decimal.Decimal_Impl_.fromFloat","thx/Decimal.hx",21,0x376ed9d8)
            	HX_STACK_ARG(value,"value")
HXLINE(  21)		return ::thx::bigint::Decimals_obj::fromFloat(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,fromFloat,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::fromString(::String value){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","fromString",0xf3422aea,"thx._Decimal.Decimal_Impl_.fromString","thx/Decimal.hx",24,0x376ed9d8)
            	HX_STACK_ARG(value,"value")
HXLINE(  24)		return ::thx::bigint::Decimals_obj::parse(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,fromString,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::randomBetween( ::thx::bigint::DecimalImpl a, ::thx::bigint::DecimalImpl b){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","randomBetween",0x9f4d8456,"thx._Decimal.Decimal_Impl_.randomBetween","thx/Decimal.hx",27,0x376ed9d8)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  27)		return ::thx::bigint::DecimalImpl_obj::randomBetween(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,randomBetween,return )

Int Decimal_Impl__obj::compare( ::thx::bigint::DecimalImpl a, ::thx::bigint::DecimalImpl b){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","compare",0x6bd8ec36,"thx._Decimal.Decimal_Impl_.compare","thx/Decimal.hx",30,0x376ed9d8)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  30)		return a->compareTo(b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,compare,return )

Bool Decimal_Impl__obj::isZero( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","isZero",0xad605dc1,"thx._Decimal.Decimal_Impl_.isZero","thx/Decimal.hx",33,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  33)		return this1->isZero();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,isZero,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::abs( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","abs",0xc3e26783,"thx._Decimal.Decimal_Impl_.abs","thx/Decimal.hx",36,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  36)		return this1->abs();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,abs,return )

Int Decimal_Impl__obj::compareTo( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","compareTo",0xc5152f51,"thx._Decimal.Decimal_Impl_.compareTo","thx/Decimal.hx",39,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE(  39)		return this1->compareTo(that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,compareTo,return )

Int Decimal_Impl__obj::compareAbs( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","compareAbs",0xad65c1dc,"thx._Decimal.Decimal_Impl_.compareAbs","thx/Decimal.hx",42,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE(  42)		return this1->compareToAbs(that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,compareAbs,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::next( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","next",0xaad23cc2,"thx._Decimal.Decimal_Impl_.next","thx/Decimal.hx",45,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  45)		return this1->next();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,next,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::prev( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","prev",0xac2e76c2,"thx._Decimal.Decimal_Impl_.prev","thx/Decimal.hx",48,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  48)		return this1->prev();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,prev,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::square( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","square",0x97fa8a2c,"thx._Decimal.Decimal_Impl_.square","thx/Decimal.hx",51,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  51)		return this1->square();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,square,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::pow( ::thx::bigint::DecimalImpl this1,Int exp){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","pow",0xc3edd4a9,"thx._Decimal.Decimal_Impl_.pow","thx/Decimal.hx",54,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(exp,"exp")
HXLINE(  54)		return this1->pow(exp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,pow,return )

Bool Decimal_Impl__obj::isEven( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","isEven",0x9f8bbdb3,"thx._Decimal.Decimal_Impl_.isEven","thx/Decimal.hx",57,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  57)		return this1->isEven();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,isEven,return )

Bool Decimal_Impl__obj::isOdd( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","isOdd",0xf543d936,"thx._Decimal.Decimal_Impl_.isOdd","thx/Decimal.hx",60,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  60)		return this1->isOdd();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,isOdd,return )

Bool Decimal_Impl__obj::isNegative( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","isNegative",0x6abf358e,"thx._Decimal.Decimal_Impl_.isNegative","thx/Decimal.hx",63,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  63)		return this1->isNegative();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,isNegative,return )

Bool Decimal_Impl__obj::isPositive( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","isPositive",0xe477b5d2,"thx._Decimal.Decimal_Impl_.isPositive","thx/Decimal.hx",66,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  66)		Int _hx_tmp = this1->compareTo(::thx::_Decimal::Decimal_Impl__obj::zero);
HXDLIN(  66)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,isPositive,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::max( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","max",0xc3eb81b5,"thx._Decimal.Decimal_Impl_.max","thx/Decimal.hx",69,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE(  69)		Bool _hx_tmp = ::thx::_Decimal::Decimal_Impl__obj::greater(this1,that);
HXDLIN(  69)		if (_hx_tmp) {
HXLINE(  69)			return this1;
            		}
            		else {
HXLINE(  69)			return that;
            		}
HXDLIN(  69)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,max,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::min( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","min",0xc3eb88a3,"thx._Decimal.Decimal_Impl_.min","thx/Decimal.hx",72,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE(  72)		Bool _hx_tmp = ::thx::_Decimal::Decimal_Impl__obj::less(this1,that);
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  72)			return this1;
            		}
            		else {
HXLINE(  72)			return that;
            		}
HXDLIN(  72)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,min,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::ceil( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","ceil",0xa38cd6d4,"thx._Decimal.Decimal_Impl_.ceil","thx/Decimal.hx",75,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  75)		return this1->ceilTo((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,ceil,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::ceilTo( ::thx::bigint::DecimalImpl this1,Int decimals){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","ceilTo",0x418f7d6f,"thx._Decimal.Decimal_Impl_.ceilTo","thx/Decimal.hx",78,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE(  78)		return this1->ceilTo(decimals);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,ceilTo,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::floor( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","floor",0x3687ef1d,"thx._Decimal.Decimal_Impl_.floor","thx/Decimal.hx",81,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  81)		return this1->floorTo((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,floor,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::floorTo( ::thx::bigint::DecimalImpl this1,Int decimals){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","floorTo",0xdbb7f9f8,"thx._Decimal.Decimal_Impl_.floorTo","thx/Decimal.hx",84,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE(  84)		return this1->floorTo(decimals);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,floorTo,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::round( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","round",0x2157159f,"thx._Decimal.Decimal_Impl_.round","thx/Decimal.hx",87,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  87)		return this1->roundTo((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,round,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::roundTo( ::thx::bigint::DecimalImpl this1,Int decimals){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","roundTo",0x757f44fa,"thx._Decimal.Decimal_Impl_.roundTo","thx/Decimal.hx",90,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE(  90)		return this1->roundTo(decimals);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,roundTo,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::scaleTo( ::thx::bigint::DecimalImpl this1,Int decimals){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","scaleTo",0x4d772236,"thx._Decimal.Decimal_Impl_.scaleTo","thx/Decimal.hx",93,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE(  93)		return this1->scaleTo(decimals);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,scaleTo,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::trim( ::thx::bigint::DecimalImpl this1, ::Dynamic mindecimals){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","trim",0xaed354b1,"thx._Decimal.Decimal_Impl_.trim","thx/Decimal.hx",96,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(mindecimals,"mindecimals")
HXLINE(  96)		return this1->trim(mindecimals);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,trim,return )

Bool Decimal_Impl__obj::greaterThan( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","greaterThan",0xcaba318c,"thx._Decimal.Decimal_Impl_.greaterThan","thx/Decimal.hx",99,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE(  99)		Int _hx_tmp = this1->compareTo(that);
HXDLIN(  99)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,greaterThan,return )

Bool Decimal_Impl__obj::greater( ::thx::bigint::DecimalImpl self, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","greater",0xa030648b,"thx._Decimal.Decimal_Impl_.greater","thx/Decimal.hx",103,0x376ed9d8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 103)		Int _hx_tmp = self->compareTo(that);
HXDLIN( 103)		return (_hx_tmp > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,greater,return )

Bool Decimal_Impl__obj::greaterEqualsTo( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","greaterEqualsTo",0xd534a945,"thx._Decimal.Decimal_Impl_.greaterEqualsTo","thx/Decimal.hx",106,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 106)		Int _hx_tmp = this1->compareTo(that);
HXDLIN( 106)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,greaterEqualsTo,return )

Bool Decimal_Impl__obj::greaterEquals( ::thx::bigint::DecimalImpl self, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","greaterEquals",0xcf42412a,"thx._Decimal.Decimal_Impl_.greaterEquals","thx/Decimal.hx",110,0x376ed9d8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 110)		Int _hx_tmp = self->compareTo(that);
HXDLIN( 110)		return (_hx_tmp >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,greaterEquals,return )

Bool Decimal_Impl__obj::lessThan( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","lessThan",0x6c9daaa9,"thx._Decimal.Decimal_Impl_.lessThan","thx/Decimal.hx",113,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 113)		Int _hx_tmp = this1->compareTo(that);
HXDLIN( 113)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,lessThan,return )

Bool Decimal_Impl__obj::less( ::thx::bigint::DecimalImpl self, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","less",0xa97fcb28,"thx._Decimal.Decimal_Impl_.less","thx/Decimal.hx",117,0x376ed9d8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 117)		Int _hx_tmp = self->compareTo(that);
HXDLIN( 117)		return (_hx_tmp < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,less,return )

Bool Decimal_Impl__obj::lessEqualsTo( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","lessEqualsTo",0xd36774e2,"thx._Decimal.Decimal_Impl_.lessEqualsTo","thx/Decimal.hx",120,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 120)		Int _hx_tmp = this1->compareTo(that);
HXDLIN( 120)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,lessEqualsTo,return )

Bool Decimal_Impl__obj::lessEquals( ::thx::bigint::DecimalImpl self, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","lessEquals",0x4bcbfb87,"thx._Decimal.Decimal_Impl_.lessEquals","thx/Decimal.hx",124,0x376ed9d8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 124)		Int _hx_tmp = self->compareTo(that);
HXDLIN( 124)		return (_hx_tmp <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,lessEquals,return )

Bool Decimal_Impl__obj::equalsTo( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","equalsTo",0x4ea3d0e9,"thx._Decimal.Decimal_Impl_.equalsTo","thx/Decimal.hx",127,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 127)		Int _hx_tmp = this1->compareTo(that);
HXDLIN( 127)		return (_hx_tmp == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,equalsTo,return )

Bool Decimal_Impl__obj::equals( ::thx::bigint::DecimalImpl self, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","equals",0xfefb77ce,"thx._Decimal.Decimal_Impl_.equals","thx/Decimal.hx",131,0x376ed9d8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 131)		Int _hx_tmp = self->compareTo(that);
HXDLIN( 131)		return (_hx_tmp == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,equals,return )

Bool Decimal_Impl__obj::notEqualsTo( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","notEqualsTo",0x599b55de,"thx._Decimal.Decimal_Impl_.notEqualsTo","thx/Decimal.hx",134,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 134)		Int _hx_tmp = this1->compareTo(that);
HXDLIN( 134)		return (_hx_tmp != (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,notEqualsTo,return )

Bool Decimal_Impl__obj::notEquals( ::thx::bigint::DecimalImpl self, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","notEquals",0xff946583,"thx._Decimal.Decimal_Impl_.notEquals","thx/Decimal.hx",138,0x376ed9d8)
            	HX_STACK_ARG(self,"self")
            	HX_STACK_ARG(that,"that")
HXLINE( 138)		Int _hx_tmp = self->compareTo(that);
HXDLIN( 138)		return (_hx_tmp != (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,notEquals,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::add( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","add",0xc3e26932,"thx._Decimal.Decimal_Impl_.add","thx/Decimal.hx",142,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 142)		return this1->add(that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,add,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::subtract( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","subtract",0x717ac063,"thx._Decimal.Decimal_Impl_.subtract","thx/Decimal.hx",146,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 146)		return this1->subtract(that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,subtract,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::negate( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","negate",0xa621cb51,"thx._Decimal.Decimal_Impl_.negate","thx/Decimal.hx",150,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 150)		return this1->negate();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,negate,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::preIncrement( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","preIncrement",0x4411885b,"thx._Decimal.Decimal_Impl_.preIncrement","thx/Decimal.hx",154,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 154)		this1 = this1->add(::thx::_Decimal::Decimal_Impl__obj::one);
HXDLIN( 154)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,preIncrement,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::postIncrement( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","postIncrement",0x03ea2c00,"thx._Decimal.Decimal_Impl_.postIncrement","thx/Decimal.hx",157,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 158)		HX_VARI(  ::thx::bigint::DecimalImpl,v) = this1;
HXLINE( 159)		this1 = this1->add(::thx::_Decimal::Decimal_Impl__obj::one);
HXLINE( 160)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,postIncrement,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::preDecrement( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","preDecrement",0x2294783f,"thx._Decimal.Decimal_Impl_.preDecrement","thx/Decimal.hx",165,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 165)		this1 = this1->subtract(::thx::_Decimal::Decimal_Impl__obj::one);
HXDLIN( 165)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,preDecrement,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::postDecrement( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","postDecrement",0xe26d1be4,"thx._Decimal.Decimal_Impl_.postDecrement","thx/Decimal.hx",168,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 169)		HX_VARI(  ::thx::bigint::DecimalImpl,v) = this1;
HXLINE( 170)		this1 = this1->subtract(::thx::_Decimal::Decimal_Impl__obj::one);
HXLINE( 171)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,postDecrement,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::multiply( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","multiply",0x13f62d73,"thx._Decimal.Decimal_Impl_.multiply","thx/Decimal.hx",176,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 176)		return this1->multiply(that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,multiply,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::divide( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","divide",0xfe1ab908,"thx._Decimal.Decimal_Impl_.divide","thx/Decimal.hx",180,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 180)		return this1->divide(that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,divide,return )

 ::thx::bigint::DecimalImpl Decimal_Impl__obj::modulo( ::thx::bigint::DecimalImpl this1, ::thx::bigint::DecimalImpl that){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","modulo",0xffdbbe45,"thx._Decimal.Decimal_Impl_.modulo","thx/Decimal.hx",184,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE( 184)		return this1->modulo(that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Decimal_Impl__obj,modulo,return )

Int Decimal_Impl__obj::toInt( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","toInt",0x4802db85,"thx._Decimal.Decimal_Impl_.toInt","thx/Decimal.hx",187,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 187)		return this1->toInt();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,toInt,return )

 ::cpp::Int64Struct Decimal_Impl__obj::toInt64( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","toInt64",0x7314b603,"thx._Decimal.Decimal_Impl_.toInt64","thx/Decimal.hx",190,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 190)		HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(this1);
HXDLIN( 190)		return ::thx::bigint::Bigs_obj::toInt64(this2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,toInt64,return )

::Dynamic Decimal_Impl__obj::toBigInt( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","toBigInt",0x8900f739,"thx._Decimal.Decimal_Impl_.toBigInt","thx/Decimal.hx",193,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 193)		::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::fromInt(this1->scale);
HXDLIN( 193)		::Dynamic _hx_tmp1 = ::thx::bigint::Small_obj::ten->pow(_hx_tmp);
HXDLIN( 193)		return ::thx::bigint::BigIntImpl_obj::divide(this1->value,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,toBigInt,return )

Float Decimal_Impl__obj::toFloat( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","toFloat",0xb78ae5b2,"thx._Decimal.Decimal_Impl_.toFloat","thx/Decimal.hx",196,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 196)		return this1->toFloat();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,toFloat,return )

::String Decimal_Impl__obj::toString( ::thx::bigint::DecimalImpl this1){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","toString",0xb1d81bfb,"thx._Decimal.Decimal_Impl_.toString","thx/Decimal.hx",199,0x376ed9d8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 199)		return this1->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,toString,return )

Int Decimal_Impl__obj::get_divisionScale(){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","get_divisionScale",0x82f55c45,"thx._Decimal.Decimal_Impl_.get_divisionScale","thx/Decimal.hx",202,0x376ed9d8)
HXLINE( 202)		return ::thx::bigint::Decimals_obj::divisionExtraScale;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Decimal_Impl__obj,get_divisionScale,return )

Int Decimal_Impl__obj::set_divisionScale(Int v){
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","set_divisionScale",0xa6633451,"thx._Decimal.Decimal_Impl_.set_divisionScale","thx/Decimal.hx",205,0x376ed9d8)
            	HX_STACK_ARG(v,"v")
HXLINE( 205)		return (::thx::bigint::Decimals_obj::divisionExtraScale = v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimal_Impl__obj,set_divisionScale,return )


Decimal_Impl__obj::Decimal_Impl__obj()
{
}

bool Decimal_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"abs") ) { outValue = abs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pow") ) { outValue = pow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prev") ) { outValue = prev_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ceil") ) { outValue = ceil_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trim") ) { outValue = trim_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"less") ) { outValue = less_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isOdd") ) { outValue = isOdd_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floor") ) { outValue = floor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isZero") ) { outValue = isZero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"square") ) { outValue = square_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isEven") ) { outValue = isEven_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ceilTo") ) { outValue = ceilTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"divide") ) { outValue = divide_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modulo") ) { outValue = modulo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floorTo") ) { outValue = floorTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleTo") ) { outValue = scaleTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greater") ) { outValue = greater_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt64") ) { outValue = toInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFloat") ) { outValue = toFloat_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lessThan") ) { outValue = lessThan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equalsTo") ) { outValue = equalsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toBigInt") ) { outValue = toBigInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromInt64") ) { outValue = fromInt64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compareTo") ) { outValue = compareTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEquals") ) { outValue = notEquals_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBigInt") ) { outValue = fromBigInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compareAbs") ) { outValue = compareAbs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNegative") ) { outValue = isNegative_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isPositive") ) { outValue = isPositive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lessEquals") ) { outValue = lessEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"greaterThan") ) { outValue = greaterThan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEqualsTo") ) { outValue = notEqualsTo_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lessEqualsTo") ) { outValue = lessEqualsTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"preIncrement") ) { outValue = preIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"preDecrement") ) { outValue = preDecrement_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"randomBetween") ) { outValue = randomBetween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"greaterEquals") ) { outValue = greaterEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"postIncrement") ) { outValue = postIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"postDecrement") ) { outValue = postDecrement_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"greaterEqualsTo") ) { outValue = greaterEqualsTo_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_divisionScale") ) { outValue = get_divisionScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_divisionScale") ) { outValue = set_divisionScale_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Decimal_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Decimal_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::bigint::DecimalImpl*/ ,(void *) &Decimal_Impl__obj::zero,HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50")},
	{hx::fsObject /*::thx::bigint::DecimalImpl*/ ,(void *) &Decimal_Impl__obj::one,HX_HCSTRING("one","\x66","\x9a","\x54","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Decimal_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Decimal_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Decimal_Impl__obj::zero,"zero");
	HX_MARK_MEMBER_NAME(Decimal_Impl__obj::one,"one");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Decimal_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Decimal_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Decimal_Impl__obj::zero,"zero");
	HX_VISIT_MEMBER_NAME(Decimal_Impl__obj::one,"one");
};

#endif

hx::Class Decimal_Impl__obj::__mClass;

static ::String Decimal_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("one","\x66","\x9a","\x54","\x00"),
	HX_HCSTRING("fromInt64","\x23","\x80","\xa9","\x72"),
	HX_HCSTRING("fromBigInt","\x19","\x09","\x9d","\x2b"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromFloat","\xd2","\xaf","\x1f","\xb7"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("randomBetween","\x05","\x2e","\x15","\x7b"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("isZero","\x32","\xd4","\x57","\x6e"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("compareTo","\x80","\x95","\x5c","\x02"),
	HX_HCSTRING("compareAbs","\xcd","\xc4","\x97","\x0e"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("square","\x9d","\x00","\xf2","\x58"),
	HX_HCSTRING("pow","\x98","\x5d","\x55","\x00"),
	HX_HCSTRING("isEven","\x24","\x34","\x83","\x60"),
	HX_HCSTRING("isOdd","\xe5","\xbb","\x52","\xc1"),
	HX_HCSTRING("isNegative","\x7f","\x38","\xf1","\xcb"),
	HX_HCSTRING("isPositive","\xc3","\xb8","\xa9","\x45"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("ceil","\x05","\x1f","\xbd","\x41"),
	HX_HCSTRING("ceilTo","\xe0","\xf3","\x86","\x02"),
	HX_HCSTRING("floor","\xcc","\xd1","\x96","\x02"),
	HX_HCSTRING("floorTo","\x67","\x26","\x48","\xf3"),
	HX_HCSTRING("round","\x4e","\xf8","\x65","\xed"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("scaleTo","\xa5","\x4e","\x07","\x65"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	HX_HCSTRING("greaterThan","\x7b","\xc1","\x4a","\x75"),
	HX_HCSTRING("greater","\xfa","\x90","\xc0","\xb7"),
	HX_HCSTRING("greaterEqualsTo","\xb4","\x5c","\x7d","\xf1"),
	HX_HCSTRING("greaterEquals","\xd9","\xea","\x09","\xab"),
	HX_HCSTRING("lessThan","\x5a","\x5f","\x34","\xf3"),
	HX_HCSTRING("less","\x59","\x13","\xb0","\x47"),
	HX_HCSTRING("lessEqualsTo","\x13","\xd6","\x54","\x67"),
	HX_HCSTRING("lessEquals","\x78","\xfe","\xfd","\xac"),
	HX_HCSTRING("equalsTo","\x9a","\x85","\x3a","\xd5"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("notEqualsTo","\xcd","\xe5","\x2b","\x04"),
	HX_HCSTRING("notEquals","\xb2","\xcb","\xdb","\x3c"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("preIncrement","\x8c","\xe9","\xfe","\xd7"),
	HX_HCSTRING("postIncrement","\xaf","\xd5","\xb1","\xdf"),
	HX_HCSTRING("preDecrement","\x70","\xd9","\x81","\xb6"),
	HX_HCSTRING("postDecrement","\x93","\xc5","\x34","\xbe"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("divide","\x79","\x2f","\x12","\xbf"),
	HX_HCSTRING("modulo","\xb6","\x34","\xd3","\xc0"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("toInt64","\x72","\xe2","\xa4","\x8a"),
	HX_HCSTRING("toBigInt","\xea","\xab","\x97","\x0f"),
	HX_HCSTRING("toFloat","\x21","\x12","\x1b","\xcf"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_divisionScale","\x74","\x09","\x65","\xc9"),
	HX_HCSTRING("set_divisionScale","\x80","\xe1","\xd2","\xec"),
	::String(null())
};

void Decimal_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._Decimal.Decimal_Impl_","\xff","\xba","\x9d","\xb7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Decimal_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Decimal_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Decimal_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Decimal_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Decimal_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Decimal_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Decimal_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Decimal_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","boot",0xa2eb3c01,"thx._Decimal.Decimal_Impl_.boot","thx/Decimal.hx",8,0x376ed9d8)
HXLINE(   8)		zero = ::thx::bigint::DecimalImpl_obj::zero;
            	}
{
            	HX_STACK_FRAME("thx._Decimal.Decimal_Impl_","boot",0xa2eb3c01,"thx._Decimal.Decimal_Impl_.boot","thx/Decimal.hx",9,0x376ed9d8)
HXLINE(   9)		one = ::thx::bigint::DecimalImpl_obj::one;
            	}
}

} // end namespace thx
} // end namespace _Decimal
