// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx__Decimal_Decimal_Impl_
#include <thx/_Decimal/Decimal_Impl_.h>
#endif
#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Bigs
#include <thx/bigint/Bigs.h>
#endif
#ifndef INCLUDED_thx_bigint_DecimalImpl
#include <thx/bigint/DecimalImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Decimals
#include <thx/bigint/Decimals.h>
#endif
#ifndef INCLUDED_thx_bigint_Small
#include <thx/bigint/Small.h>
#endif

namespace thx{
namespace bigint{

void Decimals_obj::__construct() { }

Dynamic Decimals_obj::__CreateEmpty() { return new Decimals_obj; }

hx::ObjectPtr< Decimals_obj > Decimals_obj::__new()
{
	hx::ObjectPtr< Decimals_obj > _hx_result = new Decimals_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Decimals_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Decimals_obj > _hx_result = new Decimals_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Decimals_obj::divisionExtraScale;

 ::thx::bigint::DecimalImpl Decimals_obj::fromInt(Int value){
            	HX_STACK_FRAME("thx.bigint.Decimals","fromInt",0x9d60f54e,"thx.bigint.Decimals.fromInt","thx/bigint/Decimals.hx",9,0x7b8fe5e7)
            	HX_STACK_ARG(value,"value")
HXLINE(   9)		::Dynamic _hx_tmp = ::thx::bigint::Bigs_obj::fromInt(value);
HXDLIN(   9)		return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimals_obj,fromInt,return )

 ::thx::bigint::DecimalImpl Decimals_obj::fromFloat(Float value){
            	HX_STACK_FRAME("thx.bigint.Decimals","fromFloat",0xb3f9c3bb,"thx.bigint.Decimals.fromFloat","thx/bigint/Decimals.hx",12,0x7b8fe5e7)
            	HX_STACK_ARG(value,"value")
HXLINE(  13)		Bool _hx_tmp = !(::Math_obj::isFinite(value));
HXDLIN(  13)		if (_hx_tmp) {
HXLINE(  14)			HX_STACK_DO_THROW((HX_("Value is not a finite Float: ",e4,47,d0,a5) + value));
            		}
HXLINE(  15)		return ::thx::bigint::Decimals_obj::parse((HX_("",00,00,00,00) + value));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimals_obj,fromFloat,return )

 ::thx::bigint::DecimalImpl Decimals_obj::parse(::String value){
            	HX_STACK_FRAME("thx.bigint.Decimals","parse",0x916b3b9c,"thx.bigint.Decimals.parse","thx/bigint/Decimals.hx",18,0x7b8fe5e7)
            	HX_STACK_ARG(value,"value")
HXLINE(  19)		value = value.toLowerCase();
HXLINE(  20)		HX_VARI( Int,pose) = value.indexOf(HX_("e",65,00,00,00),null());
HXLINE(  21)		if ((pose > (int)0)) {
HXLINE(  22)			HX_VARI( Bool,isNeg) = false;
HXDLIN(  22)			HX_VARI( ::String,f) = value.substring((int)0,pose);
HXDLIN(  22)			HX_VARI( ::String,e) = value.substring((pose + (int)1),null());
HXLINE(  25)			::String _hx_tmp = e.substring((int)0,(int)1);
HXDLIN(  25)			if ((_hx_tmp == HX_("-",2d,00,00,00))) {
HXLINE(  26)				isNeg = true;
HXLINE(  27)				e = e.substring((int)1,null());
            			}
HXLINE(  29)			HX_VARI( ::Dynamic,p) = ::thx::bigint::Bigs_obj::parseBase(e,(int)10);
HXDLIN(  29)			HX_VARI( ::Dynamic,m) = ::thx::bigint::Small_obj::ten->pow(p);
HXLINE(  31)			if (isNeg) {
HXLINE(  32)				 ::thx::bigint::DecimalImpl _hx_tmp1 = ::thx::bigint::Decimals_obj::parse(f);
HXDLIN(  32)				 ::thx::bigint::DecimalImpl _hx_tmp2 = ::thx::_Decimal::Decimal_Impl__obj::fromBigInt(m);
HXDLIN(  32)				 ::Dynamic _hx_tmp3 = ::Std_obj::parseInt(e);
HXDLIN(  32)				return _hx_tmp1->divideWithScale(_hx_tmp2,_hx_tmp3);
            			}
            			else {
HXLINE(  34)				 ::thx::bigint::DecimalImpl _hx_tmp4 = ::thx::bigint::Decimals_obj::parse(f);
HXDLIN(  34)				return _hx_tmp4->multiply(::thx::_Decimal::Decimal_Impl__obj::fromBigInt(m));
            			}
            		}
HXLINE(  37)		HX_VARI( Int,pdec) = value.indexOf(HX_(".",2e,00,00,00),null());
HXLINE(  38)		if ((pdec < (int)0)) {
HXLINE(  39)			return  ::thx::bigint::DecimalImpl_obj::__new(::thx::bigint::Bigs_obj::parseBase(value,(int)10),(int)0);
            		}
HXLINE(  41)		::String _hx_tmp5 = value.substring((int)0,pdec);
HXDLIN(  41)		::String _hx_tmp6 = value.substring((pdec + (int)1),null());
HXLINE(  42)		::Dynamic _hx_tmp7 = ::thx::bigint::Bigs_obj::parseBase((_hx_tmp5 + _hx_tmp6),(int)10);
HXDLIN(  42)		return  ::thx::bigint::DecimalImpl_obj::__new(_hx_tmp7,((value.length - pdec) - (int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Decimals_obj,parse,return )


Decimals_obj::Decimals_obj()
{
}

bool Decimals_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"divisionExtraScale") ) { outValue = divisionExtraScale; return true; }
	}
	return false;
}

bool Decimals_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"divisionExtraScale") ) { divisionExtraScale=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Decimals_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Decimals_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Decimals_obj::divisionExtraScale,HX_HCSTRING("divisionExtraScale","\x67","\xd5","\x14","\xbb")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Decimals_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Decimals_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Decimals_obj::divisionExtraScale,"divisionExtraScale");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Decimals_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Decimals_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Decimals_obj::divisionExtraScale,"divisionExtraScale");
};

#endif

hx::Class Decimals_obj::__mClass;

static ::String Decimals_obj_sStaticFields[] = {
	HX_HCSTRING("divisionExtraScale","\x67","\xd5","\x14","\xbb"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromFloat","\xd2","\xaf","\x1f","\xb7"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	::String(null())
};

void Decimals_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.bigint.Decimals","\x17","\x27","\xa6","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Decimals_obj::__GetStatic;
	__mClass->mSetStaticField = &Decimals_obj::__SetStatic;
	__mClass->mMarkFunc = Decimals_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Decimals_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Decimals_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Decimals_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Decimals_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Decimals_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Decimals_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.bigint.Decimals","boot",0x736bf8e9,"thx.bigint.Decimals.boot","thx/bigint/Decimals.hx",6,0x7b8fe5e7)
HXLINE(   6)		divisionExtraScale = (int)4;
            	}
}

} // end namespace thx
} // end namespace bigint
