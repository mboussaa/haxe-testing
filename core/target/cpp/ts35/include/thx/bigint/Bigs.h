// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_bigint_Bigs
#define INCLUDED_thx_bigint_Bigs

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS2(thx,bigint,BigIntImpl)
HX_DECLARE_CLASS2(thx,bigint,Bigs)

namespace thx{
namespace bigint{


class HXCPP_CLASS_ATTRIBUTES Bigs_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Bigs_obj OBJ_;
		Bigs_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.bigint.Bigs")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.bigint.Bigs"); }
		static hx::ObjectPtr< Bigs_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Bigs_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Bigs","\xd3","\x1b","\xf0","\x2b"); }

		static void __boot();
		static Int BASE;
		static Float DOUBLE_BASE;
		static Int LOG_BASE;
		static Int MAX_INT;
		static ::Array< Int > MAX_INT_ARR;
		static Float LOG_MAX_INT;
		static ::Array< Int > powersOfTwo;
		static ::Array< ::Dynamic> bigPowersOfTwo;
		static Int powers2Length;
		static Int highestPower2;
		static ::Dynamic bigHighestPower2;
		static Bool isPrecise(Int value);
		static ::Dynamic isPrecise_dyn();

		static Bool canMultiply(Int a,Int b);
		static ::Dynamic canMultiply_dyn();

		static Bool canPower(Int a,Int b);
		static ::Dynamic canPower_dyn();

		static Bool canAdd(Int a,Int b);
		static ::Dynamic canAdd_dyn();

		static ::Array< Int > smallToArray(Int n);
		static ::Dynamic smallToArray_dyn();

		static  ::Dynamic arrayToSmall(::Array< Int > arr);
		static ::Dynamic arrayToSmall_dyn();

		static void trim(::Array< Int > v);
		static ::Dynamic trim_dyn();

		static ::Array< Int > createArray(Int length);
		static ::Dynamic createArray_dyn();

		static ::Array< Float > createFloatArray(Int length);
		static ::Dynamic createFloatArray_dyn();

		static ::Array< Int > add(::Array< Int > a,::Array< Int > b);
		static ::Dynamic add_dyn();

		static ::Array< Int > addAny(::Array< Int > a,::Array< Int > b);
		static ::Dynamic addAny_dyn();

		static ::Array< Int > addSmall(::Array< Int > a,Int carry);
		static ::Dynamic addSmall_dyn();

		static Int compareToAbs(::Array< Int > a,::Array< Int > b);
		static ::Dynamic compareToAbs_dyn();

		static ::Array< Int > subtract(::Array< Int > a,::Array< Int > b);
		static ::Dynamic subtract_dyn();

		static ::Dynamic subtractAny(::Array< Int > a,::Array< Int > b,Bool sign);
		static ::Dynamic subtractAny_dyn();

		static ::Dynamic subtractSmall(::Array< Int > a,Int b,Bool sign);
		static ::Dynamic subtractSmall_dyn();

		static ::Array< Int > multiplyLong(::Array< Int > a,::Array< Int > b);
		static ::Dynamic multiplyLong_dyn();

		static ::Array< Int > multiplySmall(::Array< Int > a,Int b);
		static ::Dynamic multiplySmall_dyn();

		static ::Array< Int > shiftLeft(::Array< Int > x,Int n);
		static ::Dynamic shiftLeft_dyn();

		static ::Array< Int > multiplyKaratsuba(::Array< Int > x,::Array< Int > y);
		static ::Dynamic multiplyKaratsuba_dyn();

		static ::Dynamic fromInt(Int value);
		static ::Dynamic fromInt_dyn();

		static ::Dynamic fromInt64( ::cpp::Int64Struct value);
		static ::Dynamic fromInt64_dyn();

		static  ::cpp::Int64Struct toInt64(::Dynamic value);
		static ::Dynamic toInt64_dyn();

		static ::Dynamic fromFloat(Float value);
		static ::Dynamic fromFloat_dyn();

		static ::Array< Int > square(::Array< Int > a);
		static ::Dynamic square_dyn();

		static ::Array< ::Dynamic> divMod1(::Array< Int > a,::Array< Int > b);
		static ::Dynamic divMod1_dyn();

		static ::Array< ::Dynamic> divMod2(::Array< Int > a,::Array< Int > b);
		static ::Dynamic divMod2_dyn();

		static  ::Dynamic divModSmall(::Array< Int > value,Int lambda);
		static ::Dynamic divModSmall_dyn();

		static ::Dynamic parseBase(::String text,Int base);
		static ::Dynamic parseBase_dyn();

		static ::Dynamic bitwise(::Dynamic x,::Dynamic y, ::Dynamic fn);
		static ::Dynamic bitwise_dyn();

};

} // end namespace thx
} // end namespace bigint

#endif /* INCLUDED_thx_bigint_Bigs */ 
