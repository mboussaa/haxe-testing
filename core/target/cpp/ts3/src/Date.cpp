// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif


void Date_obj::__construct(Int year,Int month,Int day,Int hour,Int min,Int sec){
            	HX_STACK_FRAME("Date","new",0x9aa26240,"Date.new","/usr/lib/haxe/std/cpp/_std/Date.hx",27,0x8e401252)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(year,"year")
            	HX_STACK_ARG(month,"month")
            	HX_STACK_ARG(day,"day")
            	HX_STACK_ARG(hour,"hour")
            	HX_STACK_ARG(min,"min")
            	HX_STACK_ARG(sec,"sec")
HXLINE(  27)		this->mSeconds = ::__hxcpp_new_date(year,month,day,hour,min,sec);
            	}

Dynamic Date_obj::__CreateEmpty() { return new Date_obj; }

hx::ObjectPtr< Date_obj > Date_obj::__new(Int year,Int month,Int day,Int hour,Int min,Int sec)
{
	hx::ObjectPtr< Date_obj > _hx_result = new Date_obj();
	_hx_result->__construct(year,month,day,hour,min,sec);
	return _hx_result;
}

Dynamic Date_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Date_obj > _hx_result = new Date_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

Float Date_obj::getTime(){
            	HX_STACK_FRAME("Date","getTime",0x0cac7da3,"Date.getTime","/usr/lib/haxe/std/cpp/_std/Date.hx",31,0x8e401252)
            	HX_STACK_THIS(this)
HXLINE(  31)		return (this->mSeconds * ((Float)1000.0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Date_obj,getTime,return )

Int Date_obj::getHours(){
            	HX_STACK_FRAME("Date","getHours",0x256fe079,"Date.getHours","/usr/lib/haxe/std/cpp/_std/Date.hx",34,0x8e401252)
            	HX_STACK_THIS(this)
HXLINE(  34)		return ::__hxcpp_get_hours(this->mSeconds);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Date_obj,getHours,return )

Int Date_obj::getMinutes(){
            	HX_STACK_FRAME("Date","getMinutes",0xad798749,"Date.getMinutes","/usr/lib/haxe/std/cpp/_std/Date.hx",36,0x8e401252)
            	HX_STACK_THIS(this)
HXLINE(  36)		return ::__hxcpp_get_minutes(this->mSeconds);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Date_obj,getMinutes,return )

Int Date_obj::getSeconds(){
            	HX_STACK_FRAME("Date","getSeconds",0xb428a6a9,"Date.getSeconds","/usr/lib/haxe/std/cpp/_std/Date.hx",38,0x8e401252)
            	HX_STACK_THIS(this)
HXLINE(  38)		return ::__hxcpp_get_seconds(this->mSeconds);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Date_obj,getSeconds,return )

Int Date_obj::getFullYear(){
            	HX_STACK_FRAME("Date","getFullYear",0x72528782,"Date.getFullYear","/usr/lib/haxe/std/cpp/_std/Date.hx",40,0x8e401252)
            	HX_STACK_THIS(this)
HXLINE(  40)		return ::__hxcpp_get_year(this->mSeconds);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Date_obj,getFullYear,return )

Int Date_obj::getMonth(){
            	HX_STACK_FRAME("Date","getMonth",0x066b78ea,"Date.getMonth","/usr/lib/haxe/std/cpp/_std/Date.hx",42,0x8e401252)
            	HX_STACK_THIS(this)
HXLINE(  42)		return ::__hxcpp_get_month(this->mSeconds);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Date_obj,getMonth,return )

Int Date_obj::getDate(){
            	HX_STACK_FRAME("Date","getDate",0x021307c4,"Date.getDate","/usr/lib/haxe/std/cpp/_std/Date.hx",44,0x8e401252)
            	HX_STACK_THIS(this)
HXLINE(  44)		return ::__hxcpp_get_date(this->mSeconds);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Date_obj,getDate,return )

Int Date_obj::getDay(){
            	HX_STACK_FRAME("Date","getDay",0x598d4986,"Date.getDay","/usr/lib/haxe/std/cpp/_std/Date.hx",46,0x8e401252)
            	HX_STACK_THIS(this)
HXLINE(  46)		return ::__hxcpp_get_day(this->mSeconds);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Date_obj,getDay,return )

::String Date_obj::toString(){
            	HX_STACK_FRAME("Date","toString",0xd2a372cc,"Date.toString","/usr/lib/haxe/std/cpp/_std/Date.hx",48,0x8e401252)
            	HX_STACK_THIS(this)
HXLINE(  48)		return ::__hxcpp_to_string(this->mSeconds);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Date_obj,toString,return )

 ::Date Date_obj::now(){
            	HX_STACK_FRAME("Date","now",0x9aa26af6,"Date.now","/usr/lib/haxe/std/cpp/_std/Date.hx",51,0x8e401252)
HXLINE(  51)		Int _hx_tmp = ::__hxcpp_date_now();
HXDLIN(  51)		return ::Date_obj::fromTime((_hx_tmp * ((Float)1000.0)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Date_obj,now,return )

 ::Date Date_obj::new1( ::Dynamic t){
            	HX_STACK_FRAME("Date","new1",0xb37395f1,"Date.new1","/usr/lib/haxe/std/cpp/_std/Date.hx",54,0x8e401252)
            	HX_STACK_ARG(t,"t")
HXLINE(  54)		return  ::Date_obj::__new((int)2005,(int)1,(int)1,(int)0,(int)0,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Date_obj,new1,return )

 ::Date Date_obj::fromTime(Float t){
            	HX_STACK_FRAME("Date","fromTime",0x44fd3cb7,"Date.fromTime","/usr/lib/haxe/std/cpp/_std/Date.hx",57,0x8e401252)
            	HX_STACK_ARG(t,"t")
HXLINE(  58)		HX_VARI(  ::Date,result) =  ::Date_obj::__new((int)0,(int)0,(int)0,(int)0,(int)0,(int)0);
HXLINE(  59)		result->mSeconds = (t * ((Float)0.001));
HXLINE(  60)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Date_obj,fromTime,return )

 ::Date Date_obj::fromString(::String s){
            	HX_STACK_FRAME("Date","fromString",0x5ead97fb,"Date.fromString","/usr/lib/haxe/std/cpp/_std/Date.hx",64,0x8e401252)
            	HX_STACK_ARG(s,"s")
HXLINE(  64)		HX_VARI( Int,_g) = s.length;
HXDLIN(  64)		switch((int)(_g)){
            			case (int)8: {
HXLINE(  66)				HX_VARI( ::Array< ::String >,k) = s.split(HX_(":",3a,00,00,00));
HXLINE(  67)				 ::Dynamic _hx_tmp = ::Std_obj::parseInt(k->__get((int)0));
HXDLIN(  67)				 ::Dynamic _hx_tmp1 = ::Std_obj::parseInt(k->__get((int)1));
HXDLIN(  67)				 ::Dynamic _hx_tmp2 = ::Std_obj::parseInt(k->__get((int)2));
HXDLIN(  67)				HX_VARI(  ::Date,d) =  ::Date_obj::__new((int)0,(int)0,(int)0,_hx_tmp,_hx_tmp1,_hx_tmp2);
HXLINE(  68)				return d;
            			}
            			break;
            			case (int)10: {
HXLINE(  70)				HX_VARI_NAME( ::Array< ::String >,k1,"k") = s.split(HX_("-",2d,00,00,00));
HXLINE(  71)				 ::Dynamic _hx_tmp3 = ::Std_obj::parseInt(k1->__get((int)0));
HXDLIN(  71)				 ::Dynamic _hx_tmp4 = ::Std_obj::parseInt(k1->__get((int)1));
HXDLIN(  71)				Int _hx_tmp5 = (_hx_tmp4 - (int)1);
HXDLIN(  71)				 ::Dynamic _hx_tmp6 = ::Std_obj::parseInt(k1->__get((int)2));
HXDLIN(  71)				return  ::Date_obj::__new(_hx_tmp3,_hx_tmp5,_hx_tmp6,(int)0,(int)0,(int)0);
            			}
            			break;
            			case (int)19: {
HXLINE(  73)				HX_VARI_NAME( ::Array< ::String >,k2,"k") = s.split(HX_(" ",20,00,00,00));
HXLINE(  74)				HX_VARI( ::Array< ::String >,y) = k2->__get((int)0).split(HX_("-",2d,00,00,00));
HXLINE(  75)				HX_VARI( ::Array< ::String >,t) = k2->__get((int)1).split(HX_(":",3a,00,00,00));
HXLINE(  76)				 ::Dynamic _hx_tmp7 = ::Std_obj::parseInt(y->__get((int)0));
HXDLIN(  76)				 ::Dynamic _hx_tmp8 = ::Std_obj::parseInt(y->__get((int)1));
HXDLIN(  76)				Int _hx_tmp9 = (_hx_tmp8 - (int)1);
HXDLIN(  76)				 ::Dynamic _hx_tmp10 = ::Std_obj::parseInt(y->__get((int)2));
HXLINE(  77)				 ::Dynamic _hx_tmp11 = ::Std_obj::parseInt(t->__get((int)0));
HXDLIN(  77)				 ::Dynamic _hx_tmp12 = ::Std_obj::parseInt(t->__get((int)1));
HXDLIN(  77)				 ::Dynamic _hx_tmp13 = ::Std_obj::parseInt(t->__get((int)2));
HXLINE(  76)				return  ::Date_obj::__new(_hx_tmp7,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13);
            			}
            			break;
            			default:{
HXLINE(  79)				HX_STACK_DO_THROW((HX_("Invalid date format : ",a6,de,58,13) + s));
            			}
            		}
HXLINE(  64)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Date_obj,fromString,return )


Date_obj::Date_obj()
{
}

hx::Val Date_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"getDay") ) { return hx::Val( getDay_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getTime") ) { return hx::Val( getTime_dyn()); }
		if (HX_FIELD_EQ(inName,"getDate") ) { return hx::Val( getDate_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mSeconds") ) { return hx::Val( mSeconds); }
		if (HX_FIELD_EQ(inName,"getHours") ) { return hx::Val( getHours_dyn()); }
		if (HX_FIELD_EQ(inName,"getMonth") ) { return hx::Val( getMonth_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getMinutes") ) { return hx::Val( getMinutes_dyn()); }
		if (HX_FIELD_EQ(inName,"getSeconds") ) { return hx::Val( getSeconds_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getFullYear") ) { return hx::Val( getFullYear_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Date_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"now") ) { outValue = now_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"new1") ) { outValue = new1_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromTime") ) { outValue = fromTime_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

hx::Val Date_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"mSeconds") ) { mSeconds=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Date_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mSeconds","\x92","\x75","\x59","\x82"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Date_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Date_obj,mSeconds),HX_HCSTRING("mSeconds","\x92","\x75","\x59","\x82")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Date_obj_sStaticStorageInfo = 0;
#endif

static ::String Date_obj_sMemberFields[] = {
	HX_HCSTRING("mSeconds","\x92","\x75","\x59","\x82"),
	HX_HCSTRING("getTime","\xc3","\x7b","\x7f","\x1f"),
	HX_HCSTRING("getHours","\x59","\x3e","\x3b","\x8b"),
	HX_HCSTRING("getMinutes","\x29","\x1d","\x40","\xa3"),
	HX_HCSTRING("getSeconds","\x89","\x3c","\xef","\xa9"),
	HX_HCSTRING("getFullYear","\xa2","\x15","\x4f","\x8a"),
	HX_HCSTRING("getMonth","\xca","\xd6","\x36","\x6c"),
	HX_HCSTRING("getDate","\xe4","\x05","\xe6","\x14"),
	HX_HCSTRING("getDay","\x66","\x6f","\x1b","\xa3"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Date_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Date_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Date_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Date_obj::__mClass,"__mClass");
};

#endif

hx::Class Date_obj::__mClass;

static ::String Date_obj_sStaticFields[] = {
	HX_HCSTRING("now","\x16","\xd9","\x53","\x00"),
	HX_HCSTRING("new1","\xd1","\x83","\x02","\x49"),
	HX_HCSTRING("fromTime","\x97","\x9a","\xc8","\xaa"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	::String(null())
};

void Date_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Date","\x4e","\x82","\x3c","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Date_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Date_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Date_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Date_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Date_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Date_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Date_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Date_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

