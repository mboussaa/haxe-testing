// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx__BitMatrix_BitMatrix_Impl_
#define INCLUDED_thx__BitMatrix_BitMatrix_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,_BitMatrix,BitMatrix_Impl_)

namespace thx{
namespace _BitMatrix{


class HXCPP_CLASS_ATTRIBUTES BitMatrix_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BitMatrix_Impl__obj OBJ_;
		BitMatrix_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx._BitMatrix.BitMatrix_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx._BitMatrix.BitMatrix_Impl_"); }
		static hx::ObjectPtr< BitMatrix_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BitMatrix_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("BitMatrix_Impl_","\xee","\xa5","\x92","\xc9"); }

		static ::Array< ::Dynamic> _new( ::Dynamic bitSetCount, ::Dynamic length);
		static ::Dynamic _new_dyn();

		static ::Array< ::Dynamic> empty( ::Dynamic bitSetCount, ::Dynamic length);
		static ::Dynamic empty_dyn();

		static ::Array< ::Dynamic> fromBitSets(::Array< ::Dynamic> bitSets);
		static ::Dynamic fromBitSets_dyn();

		static ::Array< ::Dynamic> fromBools(::Array< ::Dynamic> input);
		static ::Dynamic fromBools_dyn();

		static ::Array< ::Dynamic> fromString(::String input,::String delimiter);
		static ::Dynamic fromString_dyn();

		static ::Array< ::Dynamic> toBools(::Array< ::Dynamic> this1);
		static ::Dynamic toBools_dyn();

		static Bool bitAt(::Array< ::Dynamic> this1,Int bitSetIndex,Int bitIndex);
		static ::Dynamic bitAt_dyn();

		static Bool setBitAt(::Array< ::Dynamic> this1,Int bitSetIndex,Int bitIndex,Bool value);
		static ::Dynamic setBitAt_dyn();

		static ::Array< ::Dynamic> clone(::Array< ::Dynamic> this1);
		static ::Dynamic clone_dyn();

		static ::Array< ::Dynamic> concat(::Array< ::Dynamic> this1,::Array< ::Dynamic> right);
		static ::Dynamic concat_dyn();

		static ::Array< ::Dynamic> expand(::Array< ::Dynamic> this1,Int count);
		static ::Dynamic expand_dyn();

		static ::String toString(::Array< ::Dynamic> this1,::String delimiter);
		static ::Dynamic toString_dyn();

		static ::Array< ::Dynamic> _hx_and(::Array< ::Dynamic> this1,::Array< ::Dynamic> right);
		static ::Dynamic _hx_and_dyn();

		static ::Array< ::Dynamic> _hx_or(::Array< ::Dynamic> this1,::Array< ::Dynamic> right);
		static ::Dynamic _hx_or_dyn();

		static ::Array< ::Dynamic> _hx_xor(::Array< ::Dynamic> this1,::Array< ::Dynamic> right);
		static ::Dynamic _hx_xor_dyn();

		static ::Array< ::Dynamic> negate(::Array< ::Dynamic> this1);
		static ::Dynamic negate_dyn();

		static Bool equals(::Array< ::Dynamic> this1,::Array< ::Dynamic> right);
		static ::Dynamic equals_dyn();

		static Bool notEquals(::Array< ::Dynamic> this1,::Array< ::Dynamic> right);
		static ::Dynamic notEquals_dyn();

		static Int get_bitSetCount(::Array< ::Dynamic> this1);
		static ::Dynamic get_bitSetCount_dyn();

		static Int get_length(::Array< ::Dynamic> this1);
		static ::Dynamic get_length_dyn();

		static ::Array< Int > bitSetAt(::Array< ::Dynamic> this1,Int index);
		static ::Dynamic bitSetAt_dyn();

		static ::Array< Int > setBitSetAt(::Array< ::Dynamic> this1,Int index,::Array< Int > bitSet);
		static ::Dynamic setBitSetAt_dyn();

		static ::Array< ::Dynamic> combine(::Array< ::Dynamic> this1,::Array< ::Dynamic> right, ::Dynamic combiner);
		static ::Dynamic combine_dyn();

};

} // end namespace thx
} // end namespace _BitMatrix

#endif /* INCLUDED_thx__BitMatrix_BitMatrix_Impl_ */ 
