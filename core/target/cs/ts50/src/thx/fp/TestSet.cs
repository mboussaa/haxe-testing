// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestSet : global::haxe.lang.HxObject {
		
		public TestSet(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestSet(int i) {
			global::thx.fp.TestSet.__hx_ctor_thx_fp_TestSet(this, i);
		}
		
		
		public static void __hx_ctor_thx_fp_TestSet(global::thx.fp.TestSet __temp_me143, int i) {
			__temp_me143.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.fp.TestSet(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.fp.TestSet(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testEmpty() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.SetImpl @set = ((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Tip) );
					global::utest.Assert.isFalse(global::thx.fp._Set.Set_Impl_.member<object>(((global::thx.fp.SetImpl) (@set) ), ((object) ("some") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEmpty", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
					global::utest.Assert.@equals(0, global::thx.fp._Set.Set_Impl_.size<object>(((global::thx.fp.SetImpl) (@set) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEmpty", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
				}
				
			}
		}
		
		
		public virtual void testSizes() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(3, global::thx.fp._Set.Set_Impl_.size<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, "B", global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((object) ("A") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("C") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Set.Set_Impl_.size<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, "A", global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((object) ("B") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("C") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Set.Set_Impl_.size<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, "C", global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((object) ("B") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("A") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Set.Set_Impl_.size<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, "B", global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((object) ("C") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("A") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Set.Set_Impl_.size<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, "C", global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((object) ("A") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("B") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Set.Set_Impl_.size<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, "A", global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((object) ("C") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("B") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
					global::utest.Assert.@equals(1, global::thx.fp._Set.Set_Impl_.size<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, "A", global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((object) ("A") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("A") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
				}
				
			}
		}
		
		
		public virtual void testSet() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.SetImpl m = global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, "Y", global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((object) ("X") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("Y") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("Z") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("Z") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ));
					global::utest.Assert.isTrue(global::thx.fp._Set.Set_Impl_.member<object>(((global::thx.fp.SetImpl) (m) ), ((object) ("X") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSet", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
					global::utest.Assert.isTrue(global::thx.fp._Set.Set_Impl_.member<object>(((global::thx.fp.SetImpl) (m) ), ((object) ("Y") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSet", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
					global::utest.Assert.isTrue(global::thx.fp._Set.Set_Impl_.member<object>(((global::thx.fp.SetImpl) (m) ), ((object) ("Z") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSet", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
					global::utest.Assert.isFalse(global::thx.fp._Set.Set_Impl_.member<object>(((global::thx.fp.SetImpl) (m) ), ((object) ("W") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSet", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Set.Set_Impl_.size<object>(((global::thx.fp.SetImpl) (m) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSet", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
				}
				
			}
		}
		
		
		public virtual void testMapList() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(new global::Array<object>(new object[]{"x", "y", "z"}), global::thx.Arrays.order<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.fp._List.List_Impl_.foldLeft<object, object>(((global::thx.fp.ListImpl) (global::thx.fp._Set.Set_Impl_.mapList<object, object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, "Y", global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((object) ("X") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("Z") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestSet_testMapList_45__Fun.__hx_current != null )) ? (global::thx.fp.TestSet_testMapList_45__Fun.__hx_current) : (global::thx.fp.TestSet_testMapList_45__Fun.__hx_current = ((global::thx.fp.TestSet_testMapList_45__Fun) (new global::thx.fp.TestSet_testMapList_45__Fun()) )) )) ))) ), ((object) (new global::Array<object>(new object[]{})) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestSet_testMapList_47__Fun.__hx_current != null )) ? (global::thx.fp.TestSet_testMapList_47__Fun.__hx_current) : (global::thx.fp.TestSet_testMapList_47__Fun.__hx_current = ((global::thx.fp.TestSet_testMapList_47__Fun) (new global::thx.fp.TestSet_testMapList_47__Fun()) )) )) ))) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMapList", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
				}
				
			}
		}
		
		
		public virtual void testFoldLeft() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), global::thx.Arrays.order<int>(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::thx.fp._Set.Set_Impl_.foldLeft<object, int>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<int>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<int>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, 1, global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((int) (2) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<int>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Ints), "compare", 57219237)) ))) ))) ), ((int) (3) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<int>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Ints), "compare", 57219237)) ))) ))) ), ((object) (new global::Array<int>(new int[]{})) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestSet_testFoldLeft_53__Fun.__hx_current != null )) ? (global::thx.fp.TestSet_testFoldLeft_53__Fun.__hx_current) : (global::thx.fp.TestSet_testFoldLeft_53__Fun.__hx_current = ((global::thx.fp.TestSet_testFoldLeft_53__Fun) (new global::thx.fp.TestSet_testFoldLeft_53__Fun()) )) )) ))) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Ints), "compare", 57219237)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFoldLeft", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
				}
				
			}
		}
		
		
		public virtual void testToList() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(new global::Array<object>(new object[]{"X", "Y", "Z"}), global::thx.Arrays.order<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.fp._List.List_Impl_.foldLeft<object, object>(((global::thx.fp.ListImpl) (global::thx.fp._Set.Set_Impl_.toList<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp._Set.Set_Impl_.insert<object>(((global::thx.fp.SetImpl) (global::thx.fp.SetImpl.Bin(1, "Y", global::thx.fp.SetImpl.Tip, global::thx.fp.SetImpl.Tip)) ), ((object) ("X") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ), ((object) ("Z") ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ))) ))) ))) ), ((object) (new global::Array<object>(new object[]{})) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestSet_testToList_64__Fun.__hx_current != null )) ? (global::thx.fp.TestSet_testToList_64__Fun.__hx_current) : (global::thx.fp.TestSet_testToList_64__Fun.__hx_current = ((global::thx.fp.TestSet_testToList_64__Fun) (new global::thx.fp.TestSet_testToList_64__Fun()) )) )) ))) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToList", "thx.fp.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (64) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 375442795:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToList", 375442795)) );
					}
					
					
					case 974474010:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFoldLeft", 974474010)) );
					}
					
					
					case 1769455336:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMapList", 1769455336)) );
					}
					
					
					case 1036388976:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSet", 1036388976)) );
					}
					
					
					case 1171998432:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSizes", 1171998432)) );
					}
					
					
					case 953972955:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEmpty", 953972955)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 375442795:
					{
						this.testToList();
						break;
					}
					
					
					case 974474010:
					{
						this.testFoldLeft();
						break;
					}
					
					
					case 1769455336:
					{
						this.testMapList();
						break;
					}
					
					
					case 1036388976:
					{
						this.testSet();
						break;
					}
					
					
					case 1171998432:
					{
						this.testSizes();
						break;
					}
					
					
					case 953972955:
					{
						this.testEmpty();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestSet_testMapList_45__Fun : global::haxe.lang.Function {
		
		public TestSet_testMapList_45__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.fp.TestSet_testMapList_45__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return v.ToLowerInvariant();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestSet_testMapList_47__Fun : global::haxe.lang.Function {
		
		public TestSet_testMapList_47__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestSet_testMapList_47__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			string a = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) );
			global::Array<object> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
			acc.push(a);
			return acc;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestSet_testFoldLeft_53__Fun : global::haxe.lang.Function {
		
		public TestSet_testFoldLeft_53__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestSet_testFoldLeft_53__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int v = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			global::Array<int> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
			acc.push(v);
			return acc;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestSet_testToList_64__Fun : global::haxe.lang.Function {
		
		public TestSet_testToList_64__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestSet_testToList_64__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			string a = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) );
			global::Array<object> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
			acc.push(a);
			return acc;
		}
		
		
	}
}


