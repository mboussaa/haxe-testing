// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Path {
	public sealed class Path_Impl_ {
		
		static Path_Impl_() {
			global::thx._Path.Path_Impl_.nixSeparator = "/";
			global::thx._Path.Path_Impl_.win32Separator = "\\";
		}
		
		
		public static string nixSeparator;
		
		public static string win32Separator;
		
		public static bool isValidNix(global::Array<object> path) {
			unchecked {
				return global::thx.Arrays.any<object>(((global::Array<object>) (((global::Array<object>) (path) ).slice(2, default(global::haxe.lang.Null<int>))) ), ((global::haxe.lang.Function) (( (( global::thx._Path.Path_Impl__isValidNix_29__Fun.__hx_current != null )) ? (global::thx._Path.Path_Impl__isValidNix_29__Fun.__hx_current) : (global::thx._Path.Path_Impl__isValidNix_29__Fun.__hx_current = ((global::thx._Path.Path_Impl__isValidNix_29__Fun) (new global::thx._Path.Path_Impl__isValidNix_29__Fun()) )) )) ));
			}
		}
		
		
		public static bool isValidWin32(global::Array<object> path) {
			unchecked {
				return global::thx.Arrays.any<object>(((global::Array<object>) (((global::Array<object>) (path) ).slice(2, default(global::haxe.lang.Null<int>))) ), ((global::haxe.lang.Function) (( (( global::thx._Path.Path_Impl__isValidWin32_32__Fun.__hx_current != null )) ? (global::thx._Path.Path_Impl__isValidWin32_32__Fun.__hx_current) : (global::thx._Path.Path_Impl__isValidWin32_32__Fun.__hx_current = ((global::thx._Path.Path_Impl__isValidWin32_32__Fun) (new global::thx._Path.Path_Impl__isValidWin32_32__Fun()) )) )) ));
			}
		}
		
		
		public static global::Array<object> normalizeNix(global::Array<object> path, string replacement) {
			if (string.Equals(replacement, null)) {
				replacement = "_";
			}
			
			return global::thx._Path.Path_Impl_.map(path, new global::thx._Path.Path_Impl__normalizeNix_35__Fun(replacement));
		}
		
		
		public static global::Array<object> normalizeWin32(global::Array<object> path, string replacement) {
			if (string.Equals(replacement, null)) {
				replacement = "_";
			}
			
			return global::thx._Path.Path_Impl_.map(path, new global::thx._Path.Path_Impl__normalizeWin32_38__Fun(replacement));
		}
		
		
		public static global::Array<object> fromString(string s) {
			unchecked {
				if (( global::haxe.lang.StringExt.indexOf(s, "\\", default(global::haxe.lang.Null<int>)) >= 0 )) {
					global::EReg re = new global::EReg("^([a-z]+[:][\\\\])", "i");
					if (re.match(s)) {
						string root = re.matched(1);
						return ((global::Array<object>) (new global::Array<object>(new object[]{"\\", root}).concat(global::thx._Path.Path_Impl_.resolve(global::haxe.lang.StringExt.split(re.matchedRight(), "\\"),  ! (string.Equals(root, "")) ))) );
					}
					else {
						return ((global::Array<object>) (new global::Array<object>(new object[]{"\\", ""}).concat(global::thx._Path.Path_Impl_.resolve(global::haxe.lang.StringExt.split(s, "\\"), false))) );
					}
					
				}
				else {
					string root1 = ( (s.StartsWith("/")) ? ("/") : ("") );
					return ((global::Array<object>) (new global::Array<object>(new object[]{"/", root1}).concat(global::thx._Path.Path_Impl_.resolve(global::haxe.lang.StringExt.split(s, "/"),  ! (string.Equals(root1, "")) ))) );
				}
				
			}
		}
		
		
		
		
		
		
		
		
		public static global::Array<object> resolve(global::Array<object> path, bool isAbsolute) {
			path = global::thx.ArrayStrings.compact(path).filter(( (( global::thx._Path.Path_Impl__resolve_70__Fun.__hx_current != null )) ? (global::thx._Path.Path_Impl__resolve_70__Fun.__hx_current) : (global::thx._Path.Path_Impl__resolve_70__Fun.__hx_current = ((global::thx._Path.Path_Impl__resolve_70__Fun) (new global::thx._Path.Path_Impl__resolve_70__Fun()) )) ));
			return ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.Arrays.reduce<object, object>(((global::Array<object>) (path) ), ((global::haxe.lang.Function) (new global::thx._Path.Path_Impl__resolve_72__Fun(isAbsolute)) ), ((object) (new global::Array<object>(new object[]{})) ))) ))) );
		}
		
		
		public static global::Array<object> create(string root, global::Array<object> path, string sep) {
			return ((global::Array<object>) (new global::Array<object>(new object[]{sep, root}).concat(global::thx._Path.Path_Impl_.resolve(path,  ! (string.Equals(root, "")) ))) );
		}
		
		
		public static global::Array<object> raw(global::Array<object> parts) {
			return ((global::Array<object>) (parts) );
		}
		
		
		public static global::Array<object> _new(global::Array<object> parts) {
			return ((global::Array<object>) (parts) );
		}
		
		
		public static global::Array<object> asAbsolute(global::Array<object> this1, string root) {
			unchecked {
				if (string.Equals(root, null)) {
					root = "C:\\";
				}
				
				string root1 = ( (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), "/")) ? ("/") : (root) );
				return ((global::Array<object>) (new global::Array<object>(new object[]{global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), root1}).concat(global::thx._Path.Path_Impl_.resolve(((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)),  ! (string.Equals(root1, "")) ))) );
			}
		}
		
		
		public static global::Array<object> asRelative(global::Array<object> this1) {
			unchecked {
				return ((global::Array<object>) (new global::Array<object>(new object[]{global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), ""}).concat(global::thx._Path.Path_Impl_.resolve(((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)), false))) );
			}
		}
		
		
		public static global::Array<object> normalize(global::Array<object> this1) {
			if (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), "\\")) {
				return global::thx._Path.Path_Impl_.normalizeWin32(((global::Array<object>) (this1) ), null);
			}
			else {
				return global::thx._Path.Path_Impl_.normalizeNix(((global::Array<object>) (this1) ), null);
			}
			
		}
		
		
		public static bool isAbsolute(global::Array<object> this1) {
			unchecked {
				return  ! (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]), "")) ;
			}
		}
		
		
		public static bool isRelative(global::Array<object> this1) {
			unchecked {
				return string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]), "");
			}
		}
		
		
		public static bool isRoot(global::Array<object> this1) {
			unchecked {
				if ( ! (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]), "")) ) {
					return ( ((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)).length == 0 );
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static bool isNix(global::Array<object> this1) {
			return string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), "/");
		}
		
		
		public static bool isWin32(global::Array<object> this1) {
			return string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), "\\");
		}
		
		
		public static bool isValid(global::Array<object> this1) {
			if (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), "\\")) {
				return global::thx._Path.Path_Impl_.isValidWin32(((global::Array<object>) (this1) ));
			}
			else {
				return global::thx._Path.Path_Impl_.isValidNix(((global::Array<object>) (this1) ));
			}
			
		}
		
		
		public static string noext(global::Array<object> this1) {
			string e = global::thx._Path.Path_Impl_.ext(this1);
			if (string.Equals(e, "")) {
				return global::thx._Path.Path_Impl_.@base(this1, null);
			}
			else {
				return global::thx._Path.Path_Impl_.@base(this1, global::haxe.lang.Runtime.concat(".", e));
			}
			
		}
		
		
		public static string @base(global::Array<object> this1, string end) {
			unchecked {
				if (( ((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)).length == 0 )) {
					return "";
				}
				
				global::Array<object> array = ((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>));
				string name = global::haxe.lang.Runtime.toString(((global::Array<object>) (array) )[( array.length - 1 )]);
				if ((  ! (string.Equals(null, end))  && name.EndsWith(end) )) {
					return global::haxe.lang.StringExt.substring(name, 0, new global::haxe.lang.Null<int>(( name.Length - end.Length ), true));
				}
				
				return name;
			}
		}
		
		
		public static string ext(global::Array<object> this1) {
			unchecked {
				if (( ((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)).length == 0 )) {
					return "";
				}
				
				global::Array<object> array = ((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>));
				return global::thx.Strings.afterLast(global::haxe.lang.Runtime.toString(((global::Array<object>) (array) )[( array.length - 1 )]), ".");
			}
		}
		
		
		public static string dir(global::Array<object> this1) {
			return global::thx._Path.Path_Impl_.toString(global::thx._Path.Path_Impl_.up(this1, default(global::haxe.lang.Null<int>)));
		}
		
		
		public static global::Array<object> map(global::Array<object> this1, global::haxe.lang.Function handler) {
			unchecked {
				string root = global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]);
				return ((global::Array<object>) (new global::Array<object>(new object[]{global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), root}).concat(global::thx._Path.Path_Impl_.resolve(((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)).map<object>(((global::haxe.lang.Function) (handler) )),  ! (string.Equals(root, "")) ))) );
			}
		}
		
		
		public static global::Array<object> hierarchy(global::Array<object> this1) {
			unchecked {
				global::Array<object> @base = new global::Array<object>(new object[]{});
				return ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.Arrays.reduce<object, object>(((global::Array<object>) (((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>))) ), ((global::haxe.lang.Function) (new global::thx._Path.Path_Impl__hierarchy_158__Fun(this1, @base)) ), ((object) (new global::Array<object>(new object[]{})) ))) ))) );
			}
		}
		
		
		public static object iterator(global::Array<object> this1) {
			return new global::_Array.ArrayIterator<object>(((global::Array<object>) (global::thx._Path.Path_Impl_.hierarchy(this1)) ));
		}
		
		
		public static global::Array<object> pathTo(global::Array<object> this1, global::Array<object> destination) {
			unchecked {
				bool _g =  ! (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (destination) )[1]), "")) ;
				{
					bool __temp_switch1 = ( ! (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]), "")) );
					if (( __temp_switch1 == false )) {
						{
							bool __temp_switch3 = (_g);
							if (( __temp_switch3 == false )) {
								return global::thx._Path.Path_Impl_.@join(this1, destination);
							}
							else if (( __temp_switch3 == true )) {
								return destination;
							}
							
						}
						
					}
					else if (( __temp_switch1 == true )) {
						{
							bool __temp_switch2 = (_g);
							if (( __temp_switch2 == false )) {
								return global::thx._Path.Path_Impl_.@join(this1, destination);
							}
							else if (( __temp_switch2 == true )) {
								if (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]), global::haxe.lang.Runtime.toString(((global::Array<object>) (destination) )[1]))) {
									global::Array<object> opath = ((global::Array<object>) (destination) ).slice(2, default(global::haxe.lang.Null<int>));
									global::Array<object> common = global::thx.Arrays.commonsFromStart<object>(((global::Array<object>) (((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>))) ), ((global::Array<object>) (opath) ), ((global::haxe.lang.Function) (null) ));
									return ((global::Array<object>) (new global::Array<object>(new object[]{global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), ""}).concat(global::thx._Path.Path_Impl_.resolve(((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)).slice(0, new global::haxe.lang.Null<int>(( ((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)).length - common.length ), true)).map<object>(((global::haxe.lang.Function) (( (( global::thx._Path.Path_Impl__pathTo_175__Fun.__hx_current != null )) ? (global::thx._Path.Path_Impl__pathTo_175__Fun.__hx_current) : (global::thx._Path.Path_Impl__pathTo_175__Fun.__hx_current = ((global::thx._Path.Path_Impl__pathTo_175__Fun) (new global::thx._Path.Path_Impl__pathTo_175__Fun()) )) )) )).concat(opath.slice(common.length, default(global::haxe.lang.Null<int>))), false))) );
								}
								else {
									return destination;
								}
								
							}
							
						}
						
					}
					
				}
				
				return null;
			}
		}
		
		
		public static global::Array<object> sibling(global::Array<object> this1, global::Array<object> path) {
			return global::thx._Path.Path_Impl_.@join(global::thx._Path.Path_Impl_.up(this1, default(global::haxe.lang.Null<int>)), path);
		}
		
		
		public static global::Array<object> toNix(global::Array<object> this1) {
			unchecked {
				if (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), "/")) {
					return ((global::Array<object>) (this1) );
				}
				else {
					return ((global::Array<object>) (new global::Array<object>(new object[]{"/", ( ( ! (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]), "")) ) ? ("/") : ("") )}).concat(((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)))) );
				}
				
			}
		}
		
		
		public static global::Array<object> toWin32(global::Array<object> this1, string root) {
			unchecked {
				if (string.Equals(root, null)) {
					root = "C:\\";
				}
				
				if (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), "\\")) {
					return ((global::Array<object>) (this1) );
				}
				else {
					return ((global::Array<object>) (new global::Array<object>(new object[]{"\\", ( ( ! (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]), "")) ) ? (root) : ("") )}).concat(((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)))) );
				}
				
			}
		}
		
		
		public static global::Array<object> up(global::Array<object> this1, global::haxe.lang.Null<int> n) {
			unchecked {
				global::haxe.lang.Null<int> __temp_n125 = ( ( ! (n.hasValue) ) ? (new global::haxe.lang.Null<int>(1, true)) : (n) );
				if (global::thx._Path.Path_Impl_.isRoot(this1)) {
					return ((global::Array<object>) (this1) );
				}
				else {
					return ((global::Array<object>) (new global::Array<object>(new object[]{global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1])}).concat(this1.slice(2, new global::haxe.lang.Null<int>(( this1.length - (__temp_n125).@value ), true)))) );
				}
				
			}
		}
		
		
		public static global::Array<object> withExt(global::Array<object> this1, string newextension) {
			unchecked {
				string oext = global::thx._Path.Path_Impl_.ext(this1);
				if (( oext.Length > 0 )) {
					oext = global::haxe.lang.Runtime.concat(".", oext);
				}
				
				if (string.Equals(global::haxe.lang.StringExt.substring(newextension, 0, new global::haxe.lang.Null<int>(1, true)), ".")) {
					newextension = global::haxe.lang.StringExt.substring(newextension, 1, default(global::haxe.lang.Null<int>));
				}
				
				return global::thx._Path.Path_Impl_.sibling(this1, global::thx._Path.Path_Impl_.fromString(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", global::thx._Path.Path_Impl_.@base(this1, oext)), "."), newextension)));
			}
		}
		
		
		public static global::Array<object> @join(global::Array<object> this1, global::Array<object> other) {
			unchecked {
				if ( ! (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (other) )[1]), "")) ) {
					return other;
				}
				
				string root = global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]);
				return ((global::Array<object>) (new global::Array<object>(new object[]{global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0]), root}).concat(global::thx._Path.Path_Impl_.resolve(((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)).concat(((global::Array<object>) (other) ).slice(2, default(global::haxe.lang.Null<int>))),  ! (string.Equals(root, "")) ))) );
			}
		}
		
		
		public static string toString(global::Array<object> this1) {
			unchecked {
				if (( string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]), "") && ( ((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)).length == 0 ) )) {
					return ".";
				}
				else {
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[1]), ((global::Array<object>) (this1) ).slice(2, default(global::haxe.lang.Null<int>)).@join(global::haxe.lang.Runtime.toString(((global::Array<object>) (this1) )[0])));
				}
				
			}
		}
		
		
		public static global::Array<object> get_path(global::Array<object> this1) {
			unchecked {
				return this1.slice(2, default(global::haxe.lang.Null<int>));
			}
		}
		
		
		public static string get_root(global::Array<object> this1) {
			unchecked {
				return global::haxe.lang.Runtime.toString(this1[1]);
			}
		}
		
		
		public static string get_sep(global::Array<object> this1) {
			return global::haxe.lang.Runtime.toString(this1[0]);
		}
		
		
		public static global::Array<object> get_self(global::Array<object> this1) {
			return ((global::Array<object>) (this1) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Path {
	public class Path_Impl__isValidNix_29__Fun : global::haxe.lang.Function {
		
		public Path_Impl__isValidNix_29__Fun() : base(1, 0) {
		}
		
		
		public static global::thx._Path.Path_Impl__isValidNix_29__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return ( global::haxe.lang.StringExt.indexOf(_, "/", default(global::haxe.lang.Null<int>)) < 0 );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Path {
	public class Path_Impl__isValidWin32_32__Fun : global::haxe.lang.Function {
		
		public Path_Impl__isValidWin32_32__Fun() : base(1, 0) {
		}
		
		
		public static global::thx._Path.Path_Impl__isValidWin32_32__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return  ! (new global::EReg("[<>:/\\|?*\"]", "g").match(_)) ;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Path {
	public class Path_Impl__normalizeNix_35__Fun : global::haxe.lang.Function {
		
		public Path_Impl__normalizeNix_35__Fun(string replacement) : base(1, 0) {
			this.replacement = replacement;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::StringTools.replace(_, "/", this.replacement);
		}
		
		
		public string replacement;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Path {
	public class Path_Impl__normalizeWin32_38__Fun : global::haxe.lang.Function {
		
		public Path_Impl__normalizeWin32_38__Fun(string replacement) : base(1, 0) {
			this.replacement = replacement;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return new global::EReg("[<>:\"/\\|?*]", "g").replace(_, this.replacement);
		}
		
		
		public string replacement;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Path {
	public class Path_Impl__resolve_70__Fun : global::haxe.lang.Function {
		
		public Path_Impl__resolve_70__Fun() : base(1, 0) {
		}
		
		
		public static global::thx._Path.Path_Impl__resolve_70__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string s = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return  ! (string.Equals(s, ".")) ;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Path {
	public class Path_Impl__resolve_72__Fun : global::haxe.lang.Function {
		
		public Path_Impl__resolve_72__Fun(bool isAbsolute) : base(2, 0) {
			this.isAbsolute = isAbsolute;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				string s1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) );
				global::Array<object> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
				if (( ( string.Equals(s1, "..") && ( acc.length > 0 ) ) &&  ! (string.Equals(global::haxe.lang.Runtime.toString(((global::Array<object>) (acc) )[( acc.length - 1 )]), ".."))  )) {
					return acc.slice(0, new global::haxe.lang.Null<int>(( acc.length - 1 ), true));
				}
				else if (( string.Equals(s1, "..") && this.isAbsolute )) {
					return acc;
				}
				else {
					return acc.concat(new global::Array<object>(new object[]{s1}));
				}
				
			}
		}
		
		
		public bool isAbsolute;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Path {
	public class Path_Impl__hierarchy_158__Fun : global::haxe.lang.Function {
		
		public Path_Impl__hierarchy_158__Fun(global::Array<object> this1, global::Array<object> @base) : base(2, 0) {
			this.this1 = this1;
			this.@base = @base;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				string cur = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) );
				global::Array<object> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
				this.@base.push(cur);
				string root = global::haxe.lang.Runtime.toString(((global::Array<object>) (this.this1) )[1]);
				acc.push(((global::Array<object>) (new global::Array<object>(new object[]{global::haxe.lang.Runtime.toString(((global::Array<object>) (this.this1) )[0]), root}).concat(global::thx._Path.Path_Impl_.resolve(this.@base.copy(),  ! (string.Equals(root, "")) ))) ));
				return acc;
			}
		}
		
		
		public global::Array<object> this1;
		
		public global::Array<object> @base;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Path {
	public class Path_Impl__pathTo_175__Fun : global::haxe.lang.Function {
		
		public Path_Impl__pathTo_175__Fun() : base(1, 0) {
		}
		
		
		public static global::thx._Path.Path_Impl__pathTo_175__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return "..";
		}
		
		
	}
}


