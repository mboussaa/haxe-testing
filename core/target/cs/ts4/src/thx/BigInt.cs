// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BigInt {
	public sealed class BigInt_Impl_ {
		
		static BigInt_Impl_() {
			global::thx._BigInt.BigInt_Impl_.zero = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Small.zero) );
			global::thx._BigInt.BigInt_Impl_.one = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Small.one) );
			global::thx._BigInt.BigInt_Impl_.two = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Small.two) );
			global::thx._BigInt.BigInt_Impl_.negativeOne = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Small.negativeOne) );
		}
		
		
		public static global::thx.bigint.BigIntImpl zero;
		
		public static global::thx.bigint.BigIntImpl one;
		
		public static global::thx.bigint.BigIntImpl two;
		
		public static global::thx.bigint.BigIntImpl negativeOne;
		
		public static global::thx.bigint.BigIntImpl fromInt(int @value) {
			return global::thx.bigint.Bigs.fromInt(@value);
		}
		
		
		public static global::thx.bigint.BigIntImpl fromFloat(double @value) {
			return global::thx.bigint.Bigs.fromFloat(@value);
		}
		
		
		public static global::thx.bigint.BigIntImpl fromInt64(long @value) {
			return global::thx.bigint.Bigs.fromInt64(@value);
		}
		
		
		public static global::thx.bigint.BigIntImpl fromString(string @value) {
			unchecked {
				return global::thx.bigint.Bigs.parseBase(@value, 10);
			}
		}
		
		
		public static global::thx.bigint.BigIntImpl fromStringWithBase(string @value, int @base) {
			return global::thx.bigint.Bigs.parseBase(@value, @base);
		}
		
		
		public static global::thx.bigint.BigIntImpl randomBetween(global::thx.bigint.BigIntImpl a, global::thx.bigint.BigIntImpl b) {
			global::thx.bigint.BigIntImpl low = ((global::thx.bigint.BigIntImpl) (( (global::thx._BigInt.BigInt_Impl_.less(((global::thx.bigint.BigIntImpl) (a) ), b)) ? (((global::thx.bigint.BigIntImpl) (a) )) : (b) )) );
			global::thx.bigint.BigIntImpl range = ((global::thx.bigint.BigIntImpl) ((((global::thx.bigint.BigIntImpl) (( (global::thx._BigInt.BigInt_Impl_.greater(((global::thx.bigint.BigIntImpl) (a) ), b)) ? (((global::thx.bigint.BigIntImpl) (a) )) : (b) )) )).subtract(low)) );
			return ((global::thx.bigint.BigIntImpl) (low) ).@add(range.random());
		}
		
		
		public static int compare(global::thx.bigint.BigIntImpl a, global::thx.bigint.BigIntImpl b) {
			return ((global::thx.bigint.BigIntImpl) (a) ).compareTo(b);
		}
		
		
		public static bool isZero(global::thx.bigint.BigIntImpl this1) {
			return this1.isZero();
		}
		
		
		public static global::thx.bigint.BigIntImpl abs(global::thx.bigint.BigIntImpl this1) {
			return this1.abs();
		}
		
		
		public static int compareTo(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.compareTo(that);
		}
		
		
		public static int compareToAbs(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.compareToAbs(that);
		}
		
		
		public static global::thx.bigint.BigIntImpl next(global::thx.bigint.BigIntImpl this1) {
			return this1.next();
		}
		
		
		public static global::thx.bigint.BigIntImpl prev(global::thx.bigint.BigIntImpl this1) {
			return this1.prev();
		}
		
		
		public static global::thx.bigint.BigIntImpl square(global::thx.bigint.BigIntImpl this1) {
			return this1.square();
		}
		
		
		public static global::thx.bigint.BigIntImpl pow(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl exp) {
			return this1.pow(exp);
		}
		
		
		public static bool isEven(global::thx.bigint.BigIntImpl this1) {
			return this1.isEven();
		}
		
		
		public static bool isOdd(global::thx.bigint.BigIntImpl this1) {
			return this1.isOdd();
		}
		
		
		public static bool isNegative(global::thx.bigint.BigIntImpl this1) {
			return global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(this1, "sign", 1280544829, true));
		}
		
		
		public static bool isPositive(global::thx.bigint.BigIntImpl this1) {
			return ( this1.compareTo(global::thx._BigInt.BigInt_Impl_.zero) > 0 );
		}
		
		
		public static bool isUnit(global::thx.bigint.BigIntImpl this1) {
			return this1.isUnit();
		}
		
		
		public static bool isDivisibleBy(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			if (((global::thx.bigint.BigIntImpl) (that) ).isZero()) {
				return false;
			}
			
			if (((global::thx.bigint.BigIntImpl) (that) ).isUnit()) {
				return true;
			}
			
			if (global::thx._BigInt.BigInt_Impl_.@equals(that, global::thx._BigInt.BigInt_Impl_.two)) {
				return ((global::thx.bigint.BigIntImpl) (this1) ).isEven();
			}
			
			return ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (this1) ).modulo(that)) ).isZero();
		}
		
		
		public static bool isPrime(global::thx.bigint.BigIntImpl this1) {
			unchecked {
				global::thx.bigint.BigIntImpl n = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (this1) ).abs()) );
				global::thx.bigint.BigIntImpl nPrev = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).prev()) );
				if (((global::thx.bigint.BigIntImpl) (n) ).isUnit()) {
					return false;
				}
				
				if (( ( global::thx._BigInt.BigInt_Impl_.@equals(n, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) )) || global::thx._BigInt.BigInt_Impl_.@equals(n, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3)) )) ) || global::thx._BigInt.BigInt_Impl_.@equals(n, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(5)) )) )) {
					return true;
				}
				
				if (( ( ((global::thx.bigint.BigIntImpl) (n) ).isEven() || global::thx._BigInt.BigInt_Impl_.isDivisibleBy(n, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3)) )) ) || global::thx._BigInt.BigInt_Impl_.isDivisibleBy(n, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(5)) )) )) {
					return false;
				}
				
				if (global::thx._BigInt.BigInt_Impl_.less(n, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(25)) ))) {
					return true;
				}
				
				global::Array<int> a = new global::Array<int>(new int[]{2, 3, 5, 7, 11, 13, 17, 19});
				global::thx.bigint.BigIntImpl b = nPrev;
				global::thx.bigint.BigIntImpl d = null;
				bool t = default(bool);
				global::thx.bigint.BigIntImpl x = null;
				while (((global::thx.bigint.BigIntImpl) (b) ).isEven()) {
					b = ((global::thx.bigint.BigIntImpl) (b) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) ));
				}
				
				{
					int _g1 = 0;
					int _g = a.length;
					while (( _g1 < _g )) {
						x = global::thx._BigInt.BigInt_Impl_.modPow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(a[_g1++])) ), b, n);
						if (( global::thx._BigInt.BigInt_Impl_.@equals(x, global::thx._BigInt.BigInt_Impl_.one) || global::thx._BigInt.BigInt_Impl_.@equals(x, nPrev) )) {
							continue;
						}
						
						t = true;
						d = b;
						while (( t && global::thx._BigInt.BigInt_Impl_.less(d, nPrev) )) {
							x = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (x) ).square()) ).modulo(n);
							if (global::thx._BigInt.BigInt_Impl_.@equals(x, nPrev)) {
								t = false;
							}
							
							d = ((global::thx.bigint.BigIntImpl) (d) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) ));
						}
						
						if (t) {
							return false;
						}
						
					}
					
				}
				
				return false;
			}
		}
		
		
		public static global::thx.bigint.BigIntImpl modPow(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl exp, global::thx.bigint.BigIntImpl mod) {
			unchecked {
				if (((global::thx.bigint.BigIntImpl) (mod) ).isZero()) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("Cannot take modPow with modulus 0", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"modPow", "thx._BigInt.BigInt_Impl_", "BigInt.hx"}, new int[]{1981972957}, new double[]{((double) (126) )})));
				}
				
				global::thx.bigint.BigIntImpl r = global::thx.bigint.Small.one;
				global::thx.bigint.BigIntImpl @base = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (this1) ).modulo(mod)) );
				if (((global::thx.bigint.BigIntImpl) (@base) ).isZero()) {
					return global::thx.bigint.Small.zero;
				}
				
				while (( ((global::thx.bigint.BigIntImpl) (exp) ).compareTo(global::thx._BigInt.BigInt_Impl_.zero) > 0 )) {
					if (((global::thx.bigint.BigIntImpl) (exp) ).isOdd()) {
						r = r.multiply(@base).modulo(mod);
					}
					
					exp = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (exp) ).divide(global::thx.bigint.Small.two)) );
					@base = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (@base) ).square()) ).modulo(mod);
				}
				
				return r;
			}
		}
		
		
		public static global::thx.bigint.BigIntImpl euclideanModPow(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl exp, global::thx.bigint.BigIntImpl mod) {
			global::thx.bigint.BigIntImpl x = global::thx._BigInt.BigInt_Impl_.modPow(this1, exp, mod);
			if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (x) ), "sign", 1280544829, true))) {
				return ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (x) ).@add(mod)) );
			}
			else {
				return x;
			}
			
		}
		
		
		public static global::thx.bigint.BigIntImpl max(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			if (global::thx._BigInt.BigInt_Impl_.greater(this1, that)) {
				return this1;
			}
			else {
				return that;
			}
			
		}
		
		
		public static global::thx.bigint.BigIntImpl min(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			if (global::thx._BigInt.BigInt_Impl_.less(this1, that)) {
				return this1;
			}
			else {
				return that;
			}
			
		}
		
		
		public static global::thx.bigint.BigIntImpl gcd(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			global::thx.bigint.BigIntImpl a = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (this1) ).abs()) );
			global::thx.bigint.BigIntImpl b = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (that) ).abs()) );
			if (( global::thx._BigInt.BigInt_Impl_.@equals(a, b) || ((global::thx.bigint.BigIntImpl) (a) ).isZero() )) {
				return b;
			}
			
			if (((global::thx.bigint.BigIntImpl) (b) ).isZero()) {
				return a;
			}
			
			if (((global::thx.bigint.BigIntImpl) (a) ).isEven()) {
				if (((global::thx.bigint.BigIntImpl) (b) ).isOdd()) {
					return global::thx._BigInt.BigInt_Impl_.gcd(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).divide(global::thx.bigint.Small.two)) ), b);
				}
				
				return ((global::thx.bigint.BigIntImpl) (global::thx._BigInt.BigInt_Impl_.gcd(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).divide(global::thx.bigint.Small.two)) ), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (b) ).divide(global::thx.bigint.Small.two)) ))) ).multiply(global::thx.bigint.Small.two);
			}
			
			if (((global::thx.bigint.BigIntImpl) (b) ).isEven()) {
				return global::thx._BigInt.BigInt_Impl_.gcd(a, ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (b) ).divide(global::thx.bigint.Small.two)) ));
			}
			
			if (global::thx._BigInt.BigInt_Impl_.greater(a, b)) {
				return global::thx._BigInt.BigInt_Impl_.gcd(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).subtract(b)) ).divide(global::thx.bigint.Small.two), b);
			}
			
			return global::thx._BigInt.BigInt_Impl_.gcd(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (b) ).subtract(a)) ).divide(global::thx.bigint.Small.two), a);
		}
		
		
		public static global::thx.bigint.BigIntImpl lcm(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			global::thx.bigint.BigIntImpl a = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (this1) ).abs()) );
			global::thx.bigint.BigIntImpl b = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (that) ).abs()) );
			return ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).multiply(b)) ).divide(global::thx._BigInt.BigInt_Impl_.gcd(a, b));
		}
		
		
		public static bool greaterThan(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (this1) ).compareTo(that) > 0 );
		}
		
		
		public static bool greater(global::thx.bigint.BigIntImpl self, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (self) ).compareTo(that) > 0 );
		}
		
		
		public static bool greaterEqualsTo(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (this1) ).compareTo(that) >= 0 );
		}
		
		
		public static bool greaterEquals(global::thx.bigint.BigIntImpl self, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (self) ).compareTo(that) >= 0 );
		}
		
		
		public static bool lessThan(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (this1) ).compareTo(that) < 0 );
		}
		
		
		public static bool less(global::thx.bigint.BigIntImpl self, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (self) ).compareTo(that) < 0 );
		}
		
		
		public static bool lessEqualsTo(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (this1) ).compareTo(that) <= 0 );
		}
		
		
		public static bool lessEquals(global::thx.bigint.BigIntImpl self, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (self) ).compareTo(that) <= 0 );
		}
		
		
		public static bool equalsTo(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (this1) ).compareTo(that) == 0 );
		}
		
		
		public static bool @equals(global::thx.bigint.BigIntImpl self, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (self) ).compareTo(that) == 0 );
		}
		
		
		public static bool notEqualsTo(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (this1) ).compareTo(that) != 0 );
		}
		
		
		public static bool notEquals(global::thx.bigint.BigIntImpl self, global::thx.bigint.BigIntImpl that) {
			return ( ((global::thx.bigint.BigIntImpl) (self) ).compareTo(that) != 0 );
		}
		
		
		public static global::thx.bigint.BigIntImpl @add(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.@add(that);
		}
		
		
		public static global::thx.bigint.BigIntImpl subtract(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.subtract(that);
		}
		
		
		public static global::thx.bigint.BigIntImpl preIncrement(global::thx.bigint.BigIntImpl this1) {
			this1 = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (this1) ).@add(global::thx.bigint.Small.one)) );
			return this1;
		}
		
		
		public static global::thx.bigint.BigIntImpl postIncrement(global::thx.bigint.BigIntImpl this1) {
			global::thx.bigint.BigIntImpl v = this1;
			this1 = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (this1) ).@add(global::thx.bigint.Small.one)) );
			return v;
		}
		
		
		public static global::thx.bigint.BigIntImpl preDecrement(global::thx.bigint.BigIntImpl this1) {
			this1 = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (this1) ).subtract(global::thx.bigint.Small.one)) );
			return this1;
		}
		
		
		public static global::thx.bigint.BigIntImpl postDecrement(global::thx.bigint.BigIntImpl this1) {
			global::thx.bigint.BigIntImpl v = this1;
			this1 = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (this1) ).subtract(global::thx.bigint.Small.one)) );
			return v;
		}
		
		
		public static global::thx.bigint.BigIntImpl negate(global::thx.bigint.BigIntImpl this1) {
			return this1.negate();
		}
		
		
		public static global::thx.bigint.BigIntImpl multiply(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.multiply(that);
		}
		
		
		public static global::thx.bigint.BigIntImpl divide(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.divide(that);
		}
		
		
		public static global::thx.bigint.BigIntImpl modulo(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.modulo(that);
		}
		
		
		public static global::thx.bigint.BigIntImpl shiftLeft(global::thx.bigint.BigIntImpl this1, int that) {
			return this1.shiftLeft(that);
		}
		
		
		public static global::thx.bigint.BigIntImpl shiftRight(global::thx.bigint.BigIntImpl this1, int that) {
			return this1.shiftRight(that);
		}
		
		
		public static global::thx.bigint.BigIntImpl not(global::thx.bigint.BigIntImpl this1) {
			return this1.not();
		}
		
		
		public static global::thx.bigint.BigIntImpl and(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.and(that);
		}
		
		
		public static global::thx.bigint.BigIntImpl or(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.or(that);
		}
		
		
		public static global::thx.bigint.BigIntImpl xor(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.xor(that);
		}
		
		
		public static object divMod(global::thx.bigint.BigIntImpl this1, global::thx.bigint.BigIntImpl that) {
			return this1.divMod(that);
		}
		
		
		public static int toInt(global::thx.bigint.BigIntImpl this1) {
			return this1.toInt();
		}
		
		
		public static double toFloat(global::thx.bigint.BigIntImpl this1) {
			return this1.toFloat();
		}
		
		
		public static long toInt64(global::thx.bigint.BigIntImpl this1) {
			return global::thx.bigint.Bigs.toInt64(this1);
		}
		
		
		public static string toString(global::thx.bigint.BigIntImpl this1) {
			return this1.toString();
		}
		
		
		public static string toStringWithBase(global::thx.bigint.BigIntImpl this1, int @base) {
			return this1.toStringWithBase(@base);
		}
		
		
	}
}


