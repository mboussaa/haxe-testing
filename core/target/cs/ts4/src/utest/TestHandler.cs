// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestHandler<T> : global::haxe.lang.HxObject, global::utest.TestHandler {
		
		static TestHandler() {
			unchecked {
				global::utest.TestHandler<object>.POLLING_TIME = 10;
			}
		}
		
		
		public TestHandler(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestHandler(global::utest.TestFixture fixture) {
			global::utest.TestHandler<object>.__hx_ctor_utest_TestHandler<T>(((global::utest.TestHandler<T>) (this) ), ((global::utest.TestFixture) (fixture) ));
		}
		
		
		public static void __hx_ctor_utest_TestHandler<T_c>(global::utest.TestHandler<T_c> __temp_me151, global::utest.TestFixture fixture) {
			if (( fixture == null )) {
				throw global::haxe.lang.HaxeException.wrap("fixture argument is null");
			}
			
			__temp_me151.fixture = fixture;
			__temp_me151.results = new global::List<object>();
			__temp_me151.asyncStack = new global::List<object>();
			__temp_me151.onTested = new global::utest.Dispatcher<object>();
			__temp_me151.onTimeout = new global::utest.Dispatcher<object>();
			__temp_me151.onComplete = new global::utest.Dispatcher<object>();
			__temp_me151.onPrecheck = new global::utest.Dispatcher<object>();
		}
		
		
		public static object __hx_cast<T_c_c>(global::utest.TestHandler me) {
			return ( (( me != null )) ? (me.utest_TestHandler_cast<T_c_c>()) : (null) );
		}
		
		
		public static int POLLING_TIME;
		
		public static global::Array<object> exceptionStack(global::haxe.lang.Null<int> pops) {
			unchecked {
				int __temp_pops150 = ( ( ! (pops.hasValue) ) ? (2) : ((pops).@value) );
				global::Array<object> stack = global::haxe.CallStack.exceptionStack();
				while (( __temp_pops150-- > 0 )) {
					stack.pop();
				}
				
				return stack;
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::utest.TestHandler<object>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::utest.TestHandler<object>(((global::utest.TestFixture) (arr[0]) ));
		}
		
		
		public virtual object utest_TestHandler_cast<T_c>() {
			if (global::haxe.lang.Runtime.eq(typeof(T), typeof(T_c))) {
				return this;
			}
			
			global::utest.TestHandler<T_c> new_me = new global::utest.TestHandler<T_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public global::List<object> results;
		
		public global::utest.TestFixture fixture;
		
		public global::List asyncStack;
		
		public global::utest.Dispatcher<object> onTested;
		
		public global::utest.Dispatcher<object> onTimeout;
		
		public global::utest.Dispatcher<object> onComplete;
		
		public global::utest.Dispatcher<object> onPrecheck;
		
		public global::haxe.lang.Function precheck;
		
		public virtual void execute() {
			try {
				this.executeMethod(this.fixture.setup);
				try {
					this.executeMethod(this.fixture.method);
				}
				catch (global::System.Exception __temp_catchallException3){
					global::haxe.lang.Exceptions.exception = __temp_catchallException3;
					object __temp_catchall4 = __temp_catchallException3;
					if (( __temp_catchall4 is global::haxe.lang.HaxeException )) {
						__temp_catchall4 = ((global::haxe.lang.HaxeException) (__temp_catchallException3) ).obj;
					}
					
					{
						object e = __temp_catchall4;
						this.results.@add(global::utest.Assertation.Error(e, global::utest.TestHandler<object>.exceptionStack(default(global::haxe.lang.Null<int>))));
					}
					
				}
				
				
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				{
					object e1 = __temp_catchall2;
					this.results.@add(global::utest.Assertation.SetupError(e1, global::utest.TestHandler<object>.exceptionStack(default(global::haxe.lang.Null<int>))));
				}
				
			}
			
			
			this.onPrecheck.dispatch(this);
			this.checkTested();
		}
		
		
		public virtual void checkTested() {
			if (( ((int) (global::haxe.lang.Runtime.getField_f(this.asyncStack, "length", 520590566, true)) ) == 0 )) {
				this.tested();
			}
			else {
				this.timeout();
			}
			
		}
		
		
		public global::haxe.lang.Null<double> expireson;
		
		public virtual void setTimeout(int timeout) {
			unchecked {
				double newexpire = ( global::haxe.Timer.stamp() + ( ((double) (timeout) ) / 1000 ) );
				this.expireson = ( ( ! (this.expireson.hasValue) ) ? (new global::haxe.lang.Null<double>(newexpire, true)) : (( (( newexpire > (this.expireson).@value )) ? (new global::haxe.lang.Null<double>(newexpire, true)) : (this.expireson) )) );
			}
		}
		
		
		public virtual void bindHandler() {
			global::utest.Assert.results = this.results;
			global::utest.Assert.createAsync = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addAsync", 530261339)) );
			global::utest.Assert.createEvent = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addEvent", 1864494649)) );
		}
		
		
		public virtual void unbindHandler() {
			global::utest.Assert.results = null;
			global::utest.Assert.createAsync = ( (( global::utest.TestHandler_unbindHandler_85__Fun.__hx_current != null )) ? (global::utest.TestHandler_unbindHandler_85__Fun.__hx_current) : (global::utest.TestHandler_unbindHandler_85__Fun.__hx_current = ((global::utest.TestHandler_unbindHandler_85__Fun) (new global::utest.TestHandler_unbindHandler_85__Fun()) )) );
			global::utest.Assert.createEvent = ( (( global::utest.TestHandler_unbindHandler_86__Fun.__hx_current != null )) ? (global::utest.TestHandler_unbindHandler_86__Fun.__hx_current) : (global::utest.TestHandler_unbindHandler_86__Fun.__hx_current = ((global::utest.TestHandler_unbindHandler_86__Fun) (new global::utest.TestHandler_unbindHandler_86__Fun()) )) );
		}
		
		
		public virtual global::haxe.lang.Function addAsync(global::haxe.lang.Function f, global::haxe.lang.Null<int> timeout) {
			unchecked {
				int __temp_timeout148 = ( ( ! (timeout.hasValue) ) ? (250) : ((timeout).@value) );
				if (( null == f )) {
					f = ( (( global::utest.TestHandler_addAsync_115__Fun.__hx_current != null )) ? (global::utest.TestHandler_addAsync_115__Fun.__hx_current) : (global::utest.TestHandler_addAsync_115__Fun.__hx_current = ((global::utest.TestHandler_addAsync_115__Fun) (new global::utest.TestHandler_addAsync_115__Fun()) )) );
				}
				
				global::haxe.lang.Runtime.callField(this.asyncStack, "add", 4846113, new global::Array<object>(new object[]{f}));
				global::utest.TestHandler<T> handler = this;
				this.setTimeout(__temp_timeout148);
				return new global::utest.TestHandler_addAsync_119__Fun<T>(handler, f);
			}
		}
		
		
		public virtual global::haxe.lang.Function addEvent<EventArg>(global::haxe.lang.Function f, global::haxe.lang.Null<int> timeout) {
			unchecked {
				int __temp_timeout149 = ( ( ! (timeout.hasValue) ) ? (250) : ((timeout).@value) );
				global::haxe.lang.Runtime.callField(this.asyncStack, "add", 4846113, new global::Array<object>(new object[]{f}));
				global::utest.TestHandler<T> handler = this;
				this.setTimeout(__temp_timeout149);
				return new global::utest.TestHandler_addEvent_137__Fun<T, EventArg>(handler, f);
			}
		}
		
		
		public virtual void executeMethod(string name) {
			if (string.Equals(name, null)) {
				return;
			}
			
			this.bindHandler();
			global::Reflect.callMethod(this.fixture.target, global::Reflect.field(this.fixture.target, name), new global::Array<object>(new object[]{}));
		}
		
		
		public virtual void tested() {
			if (( this.results.length == 0 )) {
				this.results.@add(global::utest.Assertation.Warning("no assertions"));
			}
			
			this.onTested.dispatch(this);
			this.completed();
		}
		
		
		public virtual void timeout() {
			this.results.@add(global::utest.Assertation.TimeoutError(((int) (global::haxe.lang.Runtime.getField_f(this.asyncStack, "length", 520590566, true)) ), new global::Array<object>(new object[]{})));
			this.onTimeout.dispatch(this);
			this.completed();
		}
		
		
		public virtual void completed() {
			unchecked {
				try {
					this.executeMethod(this.fixture.teardown);
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						this.results.@add(global::utest.Assertation.TeardownError(e, global::utest.TestHandler<object>.exceptionStack(new global::haxe.lang.Null<int>(2, true))));
					}
					
				}
				
				
				this.unbindHandler();
				this.onComplete.dispatch(this);
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 478746067:
					{
						this.expireson = global::haxe.lang.Null<object>.ofDynamic<double>(@value);
						return @value;
					}
					
					
					case 845339077:
					{
						this.precheck = ((global::haxe.lang.Function) (@value) );
						return @value;
					}
					
					
					case 270118404:
					{
						this.onPrecheck = ((global::utest.Dispatcher<object>) (global::utest.Dispatcher<object>.__hx_cast<object>(((global::utest.Dispatcher) (@value) ))) );
						return @value;
					}
					
					
					case 1568593144:
					{
						this.onComplete = ((global::utest.Dispatcher<object>) (global::utest.Dispatcher<object>.__hx_cast<object>(((global::utest.Dispatcher) (@value) ))) );
						return @value;
					}
					
					
					case 815911746:
					{
						this.onTimeout = ((global::utest.Dispatcher<object>) (global::utest.Dispatcher<object>.__hx_cast<object>(((global::utest.Dispatcher) (@value) ))) );
						return @value;
					}
					
					
					case 887574448:
					{
						this.onTested = ((global::utest.Dispatcher<object>) (global::utest.Dispatcher<object>.__hx_cast<object>(((global::utest.Dispatcher) (@value) ))) );
						return @value;
					}
					
					
					case 843587180:
					{
						this.asyncStack = ((global::List) (@value) );
						return @value;
					}
					
					
					case 1914813385:
					{
						this.fixture = ((global::utest.TestFixture) (@value) );
						return @value;
					}
					
					
					case 1800886518:
					{
						this.results = ((global::List<object>) (global::List<object>.__hx_cast<object>(((global::List) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1329111435:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "completed", 1329111435)) );
					}
					
					
					case 1492589217:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "timeout", 1492589217)) );
					}
					
					
					case 1429887281:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "tested", 1429887281)) );
					}
					
					
					case 72452854:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "executeMethod", 72452854)) );
					}
					
					
					case 1864494649:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addEvent", 1864494649)) );
					}
					
					
					case 530261339:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addAsync", 530261339)) );
					}
					
					
					case 1669413332:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "unbindHandler", 1669413332)) );
					}
					
					
					case 1111933837:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "bindHandler", 1111933837)) );
					}
					
					
					case 735461151:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setTimeout", 735461151)) );
					}
					
					
					case 478746067:
					{
						return (this.expireson).toDynamic();
					}
					
					
					case 927738905:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "checkTested", 927738905)) );
					}
					
					
					case 1275922997:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "execute", 1275922997)) );
					}
					
					
					case 845339077:
					{
						return this.precheck;
					}
					
					
					case 270118404:
					{
						return this.onPrecheck;
					}
					
					
					case 1568593144:
					{
						return this.onComplete;
					}
					
					
					case 815911746:
					{
						return this.onTimeout;
					}
					
					
					case 887574448:
					{
						return this.onTested;
					}
					
					
					case 843587180:
					{
						return this.asyncStack;
					}
					
					
					case 1914813385:
					{
						return this.fixture;
					}
					
					
					case 1800886518:
					{
						return this.results;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1329111435:
					{
						this.completed();
						break;
					}
					
					
					case 1492589217:
					{
						this.timeout();
						break;
					}
					
					
					case 1429887281:
					{
						this.tested();
						break;
					}
					
					
					case 72452854:
					{
						this.executeMethod(global::haxe.lang.Runtime.toString(dynargs[0]));
						break;
					}
					
					
					case 1864494649:
					{
						return this.addEvent<object>(((global::haxe.lang.Function) (dynargs[0]) ), global::haxe.lang.Null<object>.ofDynamic<int>(dynargs[1]));
					}
					
					
					case 530261339:
					{
						return this.addAsync(((global::haxe.lang.Function) (dynargs[0]) ), global::haxe.lang.Null<object>.ofDynamic<int>(dynargs[1]));
					}
					
					
					case 1669413332:
					{
						this.unbindHandler();
						break;
					}
					
					
					case 1111933837:
					{
						this.bindHandler();
						break;
					}
					
					
					case 735461151:
					{
						this.setTimeout(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 927738905:
					{
						this.checkTested();
						break;
					}
					
					
					case 1275922997:
					{
						this.execute();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("expireson");
			baseArr.push("precheck");
			baseArr.push("onPrecheck");
			baseArr.push("onComplete");
			baseArr.push("onTimeout");
			baseArr.push("onTested");
			baseArr.push("asyncStack");
			baseArr.push("fixture");
			baseArr.push("results");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestHandler_unbindHandler_85__Fun_0 : global::haxe.lang.Function {
		
		public TestHandler_unbindHandler_85__Fun_0() : base(0, 0) {
		}
		
		
		public static global::utest.TestHandler_unbindHandler_85__Fun_0 __hx_current;
		
		public override object __hx_invoke0_o() {
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestHandler_unbindHandler_85__Fun : global::haxe.lang.Function {
		
		public TestHandler_unbindHandler_85__Fun() : base(2, 0) {
		}
		
		
		public static global::utest.TestHandler_unbindHandler_85__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::haxe.lang.Function f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::haxe.lang.Function) (__fn_dyn1) )) )) );
			return ( (( global::utest.TestHandler_unbindHandler_85__Fun_0.__hx_current != null )) ? (global::utest.TestHandler_unbindHandler_85__Fun_0.__hx_current) : (global::utest.TestHandler_unbindHandler_85__Fun_0.__hx_current = ((global::utest.TestHandler_unbindHandler_85__Fun_0) (new global::utest.TestHandler_unbindHandler_85__Fun_0()) )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestHandler_unbindHandler_86__Fun_0 : global::haxe.lang.Function {
		
		public TestHandler_unbindHandler_86__Fun_0() : base(1, 0) {
		}
		
		
		public static global::utest.TestHandler_unbindHandler_86__Fun_0 __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestHandler_unbindHandler_86__Fun : global::haxe.lang.Function {
		
		public TestHandler_unbindHandler_86__Fun() : base(2, 0) {
		}
		
		
		public static global::utest.TestHandler_unbindHandler_86__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> t1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::haxe.lang.Function f1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			return ( (( global::utest.TestHandler_unbindHandler_86__Fun_0.__hx_current != null )) ? (global::utest.TestHandler_unbindHandler_86__Fun_0.__hx_current) : (global::utest.TestHandler_unbindHandler_86__Fun_0.__hx_current = ((global::utest.TestHandler_unbindHandler_86__Fun_0) (new global::utest.TestHandler_unbindHandler_86__Fun_0()) )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestHandler_addAsync_115__Fun : global::haxe.lang.Function {
		
		public TestHandler_addAsync_115__Fun() : base(0, 0) {
		}
		
		
		public static global::utest.TestHandler_addAsync_115__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestHandler_addAsync_119__Fun<T> : global::haxe.lang.Function {
		
		public TestHandler_addAsync_119__Fun(global::utest.TestHandler<T> handler, global::haxe.lang.Function f) : base(0, 0) {
			this.handler = handler;
			this.f = f;
		}
		
		
		public override object __hx_invoke0_o() {
			if ( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(this.handler.asyncStack, "remove", 76061764, new global::Array<object>(new object[]{this.f})))) ) {
				this.handler.results.@add(global::utest.Assertation.AsyncError("async function already executed", new global::Array<object>(new object[]{})));
				return null;
			}
			
			try {
				this.handler.bindHandler();
				this.f.__hx_invoke0_o();
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				{
					object e = __temp_catchall2;
					this.handler.results.@add(global::utest.Assertation.AsyncError(e, global::utest.TestHandler<object>.exceptionStack(new global::haxe.lang.Null<int>(0, true))));
				}
				
			}
			
			
			return null;
		}
		
		
		public global::utest.TestHandler<T> handler;
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class TestHandler_addEvent_137__Fun<T, EventArg> : global::haxe.lang.Function {
		
		public TestHandler_addEvent_137__Fun(global::utest.TestHandler<T> handler, global::haxe.lang.Function f) : base(1, 0) {
			this.handler = handler;
			this.f = f;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			EventArg e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<EventArg>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<EventArg>(__fn_dyn1)) );
			if ( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(this.handler.asyncStack, "remove", 76061764, new global::Array<object>(new object[]{this.f})))) ) {
				this.handler.results.@add(global::utest.Assertation.AsyncError("event already executed", new global::Array<object>(new object[]{})));
				return null;
			}
			
			try {
				this.handler.bindHandler();
				this.f.__hx_invoke1_o(default(double), e);
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				{
					object e1 = __temp_catchall2;
					this.handler.results.@add(global::utest.Assertation.AsyncError(e1, global::utest.TestHandler<object>.exceptionStack(new global::haxe.lang.Null<int>(0, true))));
				}
				
			}
			
			
			return null;
		}
		
		
		public global::utest.TestHandler<T> handler;
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	[global::haxe.lang.GenericInterface(typeof(global::utest.TestHandler<object>))]
	public interface TestHandler : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
		
		object utest_TestHandler_cast<T_c>();
		
		void execute();
		
		void checkTested();
		
		void setTimeout(int timeout);
		
		void bindHandler();
		
		void unbindHandler();
		
		global::haxe.lang.Function addAsync(global::haxe.lang.Function f, global::haxe.lang.Null<int> timeout);
		
		void executeMethod(string name);
		
		void tested();
		
		void timeout();
		
		void completed();
		
	}
}


