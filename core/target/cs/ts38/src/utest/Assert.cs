// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert : global::haxe.lang.HxObject {
		
		static Assert() {
			global::utest.Assert.createAsync = ( (( global::utest.Assert_Anon_693__Fun.__hx_current != null )) ? (global::utest.Assert_Anon_693__Fun.__hx_current) : (global::utest.Assert_Anon_693__Fun.__hx_current = ((global::utest.Assert_Anon_693__Fun) (new global::utest.Assert_Anon_693__Fun()) )) );
			global::utest.Assert.createEvent = ( (( global::utest.Assert_Anon_705__Fun.__hx_current != null )) ? (global::utest.Assert_Anon_705__Fun.__hx_current) : (global::utest.Assert_Anon_705__Fun.__hx_current = ((global::utest.Assert_Anon_705__Fun) (new global::utest.Assert_Anon_705__Fun()) )) );
		}
		
		
		public Assert(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Assert() {
			global::utest.Assert.__hx_ctor_utest_Assert(this);
		}
		
		
		public static void __hx_ctor_utest_Assert(global::utest.Assert __temp_me135) {
		}
		
		
		public static global::List<object> results;
		
		public static void isTrue(bool cond, string msg, object pos) {
			if (( global::utest.Assert.results == null )) {
				throw global::haxe.lang.HaxeException.wrap("Assert.results is not currently bound to any assert context");
			}
			
			if (string.Equals(null, msg)) {
				msg = "expected true";
			}
			
			if (cond) {
				global::utest.Assert.results.@add(global::utest.Assertation.Success(pos));
			}
			else {
				global::utest.Assert.results.@add(global::utest.Assertation.Failure(msg, pos));
			}
			
		}
		
		
		public static void isFalse(bool @value, string msg, object pos) {
			if (string.Equals(null, msg)) {
				msg = "expected false";
			}
			
			global::utest.Assert.isTrue(( @value == false ), msg, pos);
		}
		
		
		public static void isNull(object @value, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat("expected null but it is ", global::utest.Assert.q(@value));
			}
			
			global::utest.Assert.isTrue(( @value == null ), msg, pos);
		}
		
		
		public static void notNull(object @value, string msg, object pos) {
			if (string.Equals(null, msg)) {
				msg = "expected not null";
			}
			
			global::utest.Assert.isTrue(( @value != null ), msg, pos);
		}
		
		
		public static void @is(object @value, object type, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected type ", global::utest.Assert.typeToString(type)), " but it is "), global::utest.Assert.typeToString(@value));
			}
			
			global::utest.Assert.isTrue(global::Std.@is(@value, type), msg, pos);
		}
		
		
		public static void notEquals(object expected, object @value, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(expected)), " and test value "), global::utest.Assert.q(@value)), " should be different");
			}
			
			global::utest.Assert.isFalse(global::haxe.lang.Runtime.eq(expected, @value), msg, pos);
		}
		
		
		public static void @equals(object expected, object @value, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(expected)), " but it is "), global::utest.Assert.q(@value));
			}
			
			global::utest.Assert.isTrue(global::haxe.lang.Runtime.eq(expected, @value), msg, pos);
		}
		
		
		public static void match(global::EReg pattern, object @value, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("the value ", global::utest.Assert.q(@value)), " does not match the provided pattern");
			}
			
			global::utest.Assert.isTrue(pattern.match(global::haxe.lang.Runtime.toString(@value)), msg, pos);
		}
		
		
		public static void floatEquals(double expected, double @value, global::haxe.lang.Null<double> approx, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(expected)), " but it is "), global::utest.Assert.q(@value));
			}
			
			global::utest.Assert.isTrue(global::utest.Assert._floatEquals(expected, @value, approx), msg, pos);
			return;
		}
		
		
		public static bool _floatEquals(double expected, double @value, global::haxe.lang.Null<double> approx) {
			if (global::System.Double.IsNaN(((double) (expected) ))) {
				return global::System.Double.IsNaN(((double) (@value) ));
			}
			else if (global::System.Double.IsNaN(((double) (@value) ))) {
				return false;
			}
			else if ((  ! (((  ! (global::System.Double.IsInfinity(((double) (expected) )))  &&  ! (global::System.Double.IsNaN(((double) (expected) )))  )))  &&  ! (((  ! (global::System.Double.IsInfinity(((double) (@value) )))  &&  ! (global::System.Double.IsNaN(((double) (@value) )))  )))  )) {
				return ( ( expected > 0 ) == ( @value > 0 ) );
			}
			
			if ( ! (approx.hasValue) ) {
				approx = new global::haxe.lang.Null<double>(1e-5, true);
			}
			
			return ( global::System.Math.Abs(((double) (( @value - expected )) )) <= (approx).@value );
		}
		
		
		public static string getTypeName(object v) {
			unchecked {
				global::ValueType _g = global::Type.@typeof(v);
				switch (_g.index) {
					case 0:
					{
						return "`null`";
					}
					
					
					case 1:
					{
						return "Int";
					}
					
					
					case 2:
					{
						return "Float";
					}
					
					
					case 3:
					{
						return "Bool";
					}
					
					
					case 4:
					{
						return "Object";
					}
					
					
					case 5:
					{
						return "function";
					}
					
					
					case 6:
					{
						return global::Type.getClassName(((global::System.Type) (_g.@params[0]) ));
					}
					
					
					case 7:
					{
						return global::Type.getEnumName(((global::System.Type) (_g.@params[0]) ));
					}
					
					
					case 8:
					{
						return "`Unknown`";
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static bool isIterable(object v, bool isAnonym) {
			if ( ! (global::Lambda.has<object>(((object) (( (isAnonym) ? (global::Reflect.fields(v)) : (global::Type.getInstanceFields(global::Type.getClass<object>(((object) (v) )))) )) ), ((object) ("iterator") ))) ) {
				return false;
			}
			
			return ( global::haxe.lang.Runtime.getField(v, "iterator", 328878574, false) is global::haxe.lang.Function );
		}
		
		
		public static bool isIterator(object v, bool isAnonym) {
			global::Array<object> fields = ( (isAnonym) ? (global::Reflect.fields(v)) : (global::Type.getInstanceFields(global::Type.getClass<object>(((object) (v) )))) );
			if ((  ! (global::Lambda.has<object>(((object) (fields) ), ((object) ("next") )))  ||  ! (global::Lambda.has<object>(((object) (fields) ), ((object) ("hasNext") )))  )) {
				return false;
			}
			
			if (( global::haxe.lang.Runtime.getField(v, "next", 1224901875, false) is global::haxe.lang.Function )) {
				return ( global::haxe.lang.Runtime.getField(v, "hasNext", 407283053, false) is global::haxe.lang.Function );
			}
			else {
				return false;
			}
			
		}
		
		
		public static bool sameAs(object expected, object @value, object status, double approx) {
			unchecked {
				string texpected = global::utest.Assert.getTypeName(expected);
				string tvalue = global::utest.Assert.getTypeName(@value);
				if ((  ! (string.Equals(texpected, tvalue))  &&  ! ((( ( string.Equals(texpected, "Int") && string.Equals(tvalue, "Float") ) || ( string.Equals(texpected, "Float") && string.Equals(tvalue, "Int") ) )))  )) {
					global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected type ", texpected), " but it is "), tvalue), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
					return false;
				}
				
				global::ValueType _g = global::Type.@typeof(expected);
				switch (_g.index) {
					case 0:
					case 3:
					{
						if (( ! (global::haxe.lang.Runtime.eq(expected, @value)) )) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(expected)), " but it is "), global::utest.Assert.q(@value)), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
							return false;
						}
						
						return true;
					}
					
					
					case 1:
					case 2:
					{
						if ( ! (global::utest.Assert._floatEquals(((double) (global::haxe.lang.Runtime.toDouble(expected)) ), ((double) (global::haxe.lang.Runtime.toDouble(@value)) ), new global::haxe.lang.Null<double>(approx, true))) ) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(expected)), " but it is "), global::utest.Assert.q(@value)), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
							return false;
						}
						
						return true;
					}
					
					
					case 4:
					{
						if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
							global::Array<object> tfields = global::Reflect.fields(@value);
							global::Array<object> fields = global::Reflect.fields(expected);
							string path = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
							{
								int _g1 = 0;
								while (( _g1 < fields.length )) {
									string field = global::haxe.lang.Runtime.toString(fields[_g1]);
									 ++ _g1;
									tfields.@remove(field);
									global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path, "")) ? (field) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(path, "."), field)) ));
									if ( ! (global::Reflect.hasField(@value, field)) ) {
										global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true))), " does not exist in "), global::utest.Assert.q(@value)));
										return false;
									}
									
									object e = global::Reflect.field(expected, field);
									if (( e is global::haxe.lang.Function )) {
										continue;
									}
									
									if ( ! (global::utest.Assert.sameAs(e, global::Reflect.field(@value, field), status, approx)) ) {
										return false;
									}
									
								}
								
							}
							
							if (( tfields.length > 0 )) {
								global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("the tested object has extra field(s) (", tfields.@join(", ")), ") not included in the expected ones"));
								return false;
							}
							
						}
						
						if (global::utest.Assert.isIterator(expected, true)) {
							if ( ! (global::utest.Assert.isIterator(@value, true)) ) {
								global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat("expected Iterable but it is not ", (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
								return false;
							}
							
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								object __temp_stmt5 = null;
								{
									global::haxe.lang.Function __temp_odecl1 = new global::utest.Assert_sameAs_431__Fun(expected);
									__temp_stmt5 = new global::haxe.lang.DynamicObject(new int[]{328878574}, new object[]{__temp_odecl1}, new int[]{}, new double[]{});
								}
								
								global::Array evalues = global::Lambda.array<object>(((object) (__temp_stmt5) ));
								object __temp_stmt6 = null;
								{
									global::haxe.lang.Function __temp_odecl2 = new global::utest.Assert_sameAs_432__Fun(@value);
									__temp_stmt6 = new global::haxe.lang.DynamicObject(new int[]{328878574}, new object[]{__temp_odecl2}, new int[]{}, new double[]{});
								}
								
								global::Array vvalues = global::Lambda.array<object>(((object) (__temp_stmt6) ));
								if (( ((int) (global::haxe.lang.Runtime.getField_f(evalues, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(vvalues, "length", 520590566, true)) ) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(evalues, "length", 520590566, true)) ))), " values in Iterator but they are "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(vvalues, "length", 520590566, true)) ))), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
									return false;
								}
								
								string path1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g11 = 0;
									int _g2 = ((int) (global::haxe.lang.Runtime.getField_f(evalues, "length", 520590566, true)) );
									while (( _g11 < _g2 )) {
										int i = _g11++;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path1, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("iterator[", global::haxe.lang.Runtime.toString(i)), "]")) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(path1, "["), global::haxe.lang.Runtime.toString(i)), "]")) ));
										if ( ! (global::utest.Assert.sameAs(evalues[i], vvalues[i], status, approx)) ) {
											global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(expected)), " but it is "), global::utest.Assert.q(@value)), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (global::utest.Assert.isIterable(expected, true)) {
							if ( ! (global::utest.Assert.isIterable(@value, true)) ) {
								global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat("expected Iterator but it is not ", (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
								return false;
							}
							
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								global::Array evalues1 = global::Lambda.array<object>(((object) (expected) ));
								global::Array vvalues1 = global::Lambda.array<object>(((object) (@value) ));
								if (( ((int) (global::haxe.lang.Runtime.getField_f(evalues1, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(vvalues1, "length", 520590566, true)) ) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(evalues1, "length", 520590566, true)) ))), " values in Iterable but they are "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(vvalues1, "length", 520590566, true)) ))), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
									return false;
								}
								
								string path2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g12 = 0;
									int _g3 = ((int) (global::haxe.lang.Runtime.getField_f(evalues1, "length", 520590566, true)) );
									while (( _g12 < _g3 )) {
										int i1 = _g12++;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path2, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("iterable[", global::haxe.lang.Runtime.toString(i1)), "]")) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(path2, "["), global::haxe.lang.Runtime.toString(i1)), "]")) ));
										if ( ! (global::utest.Assert.sameAs(evalues1[i1], vvalues1[i1], status, approx)) ) {
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						return true;
					}
					
					
					case 5:
					{
						if ( ! (global::Reflect.compareMethods(expected, @value)) ) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat("expected same function reference", (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
							return false;
						}
						
						return true;
					}
					
					
					case 6:
					{
						string cexpected = global::Type.getClassName(((global::System.Type) (_g.@params[0]) ));
						string cvalue = global::Type.getClassName(global::Type.getClass<object>(((object) (@value) )));
						if ( ! (string.Equals(cexpected, cvalue)) ) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected instance of ", global::utest.Assert.q(cexpected)), " but it is "), global::utest.Assert.q(cvalue)), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
							return false;
						}
						
						if (( ( expected is string ) && ( ! (global::haxe.lang.Runtime.eq(expected, @value)) ) )) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected \'", global::Std.@string(expected)), "\' but it is \'"), global::Std.@string(@value)), "\'"));
							return false;
						}
						
						if (( expected is global::Array )) {
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								if (( ! (global::haxe.lang.Runtime.eq(global::haxe.lang.Runtime.getField(expected, "length", 520590566, true), global::haxe.lang.Runtime.getField(@value, "length", 520590566, true))) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(global::haxe.lang.Runtime.getField(expected, "length", 520590566, true))), " elements but they are "), global::Std.@string(global::haxe.lang.Runtime.getField(@value, "length", 520590566, true))), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
									return false;
								}
								
								string path3 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g13 = 0;
									int _g4 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(expected, "length", 520590566, true))) );
									while (( _g13 < _g4 )) {
										int i2 = _g13++;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path3, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("array[", global::haxe.lang.Runtime.toString(i2)), "]")) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(path3, "["), global::haxe.lang.Runtime.toString(i2)), "]")) ));
										if ( ! (global::utest.Assert.sameAs(((object) (global::haxe.lang.Runtime.callField(expected, "__get", 1915412854, new global::Array<object>(new object[]{i2}))) ), ((object) (global::haxe.lang.Runtime.callField(@value, "__get", 1915412854, new global::Array<object>(new object[]{i2}))) ), status, approx)) ) {
											global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(((object) (global::haxe.lang.Runtime.callField(expected, "__get", 1915412854, new global::Array<object>(new object[]{i2}))) ))), " but it is "), global::utest.Assert.q(((object) (global::haxe.lang.Runtime.callField(@value, "__get", 1915412854, new global::Array<object>(new object[]{i2}))) ))), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (( expected is global::Date )) {
							if (( ! (global::haxe.lang.Runtime.eq(((object) (global::haxe.lang.Runtime.callField(expected, "getTime", 528448451, null)) ), ((object) (global::haxe.lang.Runtime.callField(@value, "getTime", 528448451, null)) ))) )) {
								global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(expected)), " but it is "), global::utest.Assert.q(@value)), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
								return false;
							}
							
							return true;
						}
						
						if (( expected is global::haxe.io.Bytes )) {
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								global::haxe.io.Bytes ebytes = ((global::haxe.io.Bytes) (expected) );
								global::haxe.io.Bytes vbytes = ((global::haxe.io.Bytes) (@value) );
								if (( ebytes.length != vbytes.length )) {
									return false;
								}
								
								{
									int _g14 = 0;
									int _g5 = ebytes.length;
									while (( _g14 < _g5 )) {
										int i3 = _g14++;
										if (( ((int) (ebytes.b[i3]) ) != ((int) (vbytes.b[i3]) ) )) {
											global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected byte ", global::haxe.lang.Runtime.toString(((int) (ebytes.b[i3]) ))), " but it is "), global::haxe.lang.Runtime.toString(((int) (vbytes.b[i3]) ))), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (( expected is global::haxe.IMap )) {
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								global::haxe.IMap map = ((global::haxe.IMap) (expected) );
								global::haxe.IMap vmap = ((global::haxe.IMap) (@value) );
								global::Array _g6 = new global::Array<object>(new object[]{});
								{
									object tmp = map.keys();
									while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
										global::haxe.lang.Runtime.callField(_g6, "push", 1247875546, new global::Array<object>(new object[]{((object) (global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)) )}));
									}
									
								}
								
								global::Array _g15 = new global::Array<object>(new object[]{});
								{
									object tmp1 = vmap.keys();
									while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp1, "hasNext", 407283053, null))) {
										global::haxe.lang.Runtime.callField(_g15, "push", 1247875546, new global::Array<object>(new object[]{((object) (global::haxe.lang.Runtime.callField(tmp1, "next", 1224901875, null)) )}));
									}
									
								}
								
								if (( ((int) (global::haxe.lang.Runtime.getField_f(_g6, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(_g15, "length", 520590566, true)) ) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(_g6, "length", 520590566, true)) ))), " keys but they are "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(_g15, "length", 520590566, true)) ))), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
									return false;
								}
								
								string path4 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g21 = 0;
									while (( global::haxe.lang.Runtime.compare(_g21, ((int) (global::haxe.lang.Runtime.getField_f(_g6, "length", 520590566, true)) )) < 0 )) {
										object key = _g6[_g21];
										 ++ _g21;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path4, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("hash[", global::Std.@string(key)), "]")) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(path4, "["), global::Std.@string(key)), "]")) ));
										if ( ! (global::utest.Assert.sameAs(((object) (global::haxe.lang.Runtime.callField(map, "get", 5144726, new global::Array<object>(new object[]{key}))) ), ((object) (global::haxe.lang.Runtime.callField(vmap, "get", 5144726, new global::Array<object>(new object[]{key}))) ), status, approx)) ) {
											global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(expected)), " but it is "), global::utest.Assert.q(@value)), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (global::utest.Assert.isIterator(expected, false)) {
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								object __temp_stmt7 = null;
								{
									global::haxe.lang.Function __temp_odecl3 = new global::utest.Assert_sameAs_315__Fun(expected);
									__temp_stmt7 = new global::haxe.lang.DynamicObject(new int[]{328878574}, new object[]{__temp_odecl3}, new int[]{}, new double[]{});
								}
								
								global::Array evalues2 = global::Lambda.array<object>(((object) (__temp_stmt7) ));
								object __temp_stmt8 = null;
								{
									global::haxe.lang.Function __temp_odecl4 = new global::utest.Assert_sameAs_316__Fun(@value);
									__temp_stmt8 = new global::haxe.lang.DynamicObject(new int[]{328878574}, new object[]{__temp_odecl4}, new int[]{}, new double[]{});
								}
								
								global::Array vvalues2 = global::Lambda.array<object>(((object) (__temp_stmt8) ));
								if (( ((int) (global::haxe.lang.Runtime.getField_f(evalues2, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(vvalues2, "length", 520590566, true)) ) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(evalues2, "length", 520590566, true)) ))), " values in Iterator but they are "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(vvalues2, "length", 520590566, true)) ))), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
									return false;
								}
								
								string path5 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g16 = 0;
									int _g7 = ((int) (global::haxe.lang.Runtime.getField_f(evalues2, "length", 520590566, true)) );
									while (( _g16 < _g7 )) {
										int i4 = _g16++;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path5, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("iterator[", global::haxe.lang.Runtime.toString(i4)), "]")) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(path5, "["), global::haxe.lang.Runtime.toString(i4)), "]")) ));
										if ( ! (global::utest.Assert.sameAs(evalues2[i4], vvalues2[i4], status, approx)) ) {
											global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(expected)), " but it is "), global::utest.Assert.q(@value)), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (global::utest.Assert.isIterable(expected, false)) {
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								global::Array evalues3 = global::Lambda.array<object>(((object) (expected) ));
								global::Array vvalues3 = global::Lambda.array<object>(((object) (@value) ));
								if (( ((int) (global::haxe.lang.Runtime.getField_f(evalues3, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(vvalues3, "length", 520590566, true)) ) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(evalues3, "length", 520590566, true)) ))), " values in Iterable but they are "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(vvalues3, "length", 520590566, true)) ))), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
									return false;
								}
								
								string path6 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g17 = 0;
									int _g8 = ((int) (global::haxe.lang.Runtime.getField_f(evalues3, "length", 520590566, true)) );
									while (( _g17 < _g8 )) {
										int i5 = _g17++;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path6, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("iterable[", global::haxe.lang.Runtime.toString(i5)), "]")) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(path6, "["), global::haxe.lang.Runtime.toString(i5)), "]")) ));
										if ( ! (global::utest.Assert.sameAs(evalues3[i5], vvalues3[i5], status, approx)) ) {
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
							global::Array<object> fields1 = global::Type.getInstanceFields(global::Type.getClass<object>(((object) (expected) )));
							string path7 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
							{
								int _g9 = 0;
								while (( _g9 < fields1.length )) {
									string field1 = global::haxe.lang.Runtime.toString(fields1[_g9]);
									 ++ _g9;
									global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path7, "")) ? (field1) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(path7, "."), field1)) ));
									object e1 = global::Reflect.field(expected, field1);
									if (( e1 is global::haxe.lang.Function )) {
										continue;
									}
									
									if ( ! (global::utest.Assert.sameAs(e1, global::Reflect.field(@value, field1), status, approx)) ) {
										return false;
									}
									
								}
								
							}
							
						}
						
						return true;
					}
					
					
					case 7:
					{
						string eexpected = global::Type.getEnumName(((global::System.Type) (_g.@params[0]) ));
						string evalue = global::Type.getEnumName(global::Type.getEnum(@value));
						if ( ! (string.Equals(eexpected, evalue)) ) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected enumeration of ", global::utest.Assert.q(eexpected)), " but it is "), global::utest.Assert.q(evalue)), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
							return false;
						}
						
						if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
							if (( global::Type.enumIndex(expected) != global::Type.enumIndex(@value) )) {
								global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(global::Type.enumConstructor(expected))), " but it is "), global::utest.Assert.q(global::Type.enumConstructor(@value))), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
								return false;
							}
							
							global::Array eparams = global::Type.enumParameters(expected);
							global::Array vparams = global::Type.enumParameters(@value);
							string path8 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
							{
								int _g18 = 0;
								int _g10 = ((int) (global::haxe.lang.Runtime.getField_f(eparams, "length", 520590566, true)) );
								while (( _g18 < _g10 )) {
									int i6 = _g18++;
									global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path8, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("enum[", global::haxe.lang.Runtime.toString(i6)), "]")) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(path8, "["), global::haxe.lang.Runtime.toString(i6)), "]")) ));
									if ( ! (global::utest.Assert.sameAs(eparams[i6], vparams[i6], status, approx)) ) {
										global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::utest.Assert.q(expected)), " but it is "), global::utest.Assert.q(@value)), (( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ? ("") : (global::haxe.lang.Runtime.concat(" for field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)))) ))));
										return false;
									}
									
								}
								
							}
							
						}
						
						return true;
					}
					
					
					case 8:
					{
						throw global::haxe.lang.HaxeException.wrap("Unable to compare two unknown types");
					}
					
					
				}
				
				return default(bool);
			}
		}
		
		
		public static string q(object v) {
			if (( v is string )) {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\"", global::StringTools.replace(global::haxe.lang.Runtime.toString(v), "\"", "\\\"")), "\"");
			}
			else {
				return global::Std.@string(v);
			}
			
		}
		
		
		public static void same(object expected, object @value, global::haxe.lang.Null<bool> recursive, string msg, global::haxe.lang.Null<double> approx, object pos) {
			if ( ! (approx.hasValue) ) {
				approx = new global::haxe.lang.Null<double>(1e-5, true);
			}
			
			object status = new global::haxe.lang.DynamicObject(new int[]{1246881189, 1291299698, 1932118984}, new object[]{"", (( ( ! (recursive.hasValue) ) ? (new global::haxe.lang.Null<bool>(true, true)) : (recursive) )).toDynamic(), null}, new int[]{}, new double[]{});
			if (global::utest.Assert.sameAs(expected, @value, status, (approx).@value)) {
				global::utest.Assert.pass(msg, pos);
			}
			else {
				global::utest.Assert.fail(( (string.Equals(msg, null)) ? (global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "error", 1932118984, true))) : (msg) ), pos);
			}
			
		}
		
		
		public static void raises(global::haxe.lang.Function method, global::System.Type type, string msgNotThrown, string msgWrongType, object pos) {
			try {
				method.__hx_invoke0_o();
				string name = global::Type.getClassName(type);
				if (string.Equals(name, null)) {
					name = "Dynamic";
				}
				
				if (string.Equals(null, msgNotThrown)) {
					msgNotThrown = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("exception of type ", name), " not raised");
				}
				
				global::utest.Assert.fail(msgNotThrown, pos);
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				{
					object ex = __temp_catchall2;
					if (global::haxe.lang.Runtime.typeEq(null, type)) {
						global::utest.Assert.pass(null, pos);
					}
					else {
						string name1 = global::Type.getClassName(type);
						if (string.Equals(null, msgWrongType)) {
							msgWrongType = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected throw of type ", name1), " but it is "), global::Std.@string(ex));
						}
						
						global::utest.Assert.isTrue(global::Std.@is(ex, type), msgWrongType, pos);
					}
					
				}
				
			}
			
			
		}
		
		
		public static void allows<T>(global::Array<T> possibilities, T @value, string msg, object pos) {
			if (global::Lambda.has<T>(((object) (possibilities) ), global::haxe.lang.Runtime.genericCast<T>(@value))) {
				global::utest.Assert.isTrue(true, msg, pos);
			}
			else {
				global::utest.Assert.fail(( (string.Equals(msg, null)) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("value ", global::utest.Assert.q(@value)), " not found in the expected possibilities "), global::Std.@string(possibilities))) : (msg) ), pos);
			}
			
		}
		
		
		public static void contains<T>(T match, global::Array<T> values, string msg, object pos) {
			if (global::Lambda.has<T>(((object) (values) ), global::haxe.lang.Runtime.genericCast<T>(match))) {
				global::utest.Assert.isTrue(true, msg, pos);
			}
			else {
				global::utest.Assert.fail(( (string.Equals(msg, null)) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("values ", global::utest.Assert.q(values)), " do not contain "), global::Std.@string(match))) : (msg) ), pos);
			}
			
		}
		
		
		public static void notContains<T>(T match, global::Array<T> values, string msg, object pos) {
			if ( ! (global::Lambda.has<T>(((object) (values) ), global::haxe.lang.Runtime.genericCast<T>(match))) ) {
				global::utest.Assert.isTrue(true, msg, pos);
			}
			else {
				global::utest.Assert.fail(( (string.Equals(msg, null)) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("values ", global::utest.Assert.q(values)), " do contain "), global::Std.@string(match))) : (msg) ), pos);
			}
			
		}
		
		
		public static void stringContains(string match, string @value, string msg, object pos) {
			if ((  ! (string.Equals(@value, null))  && ( global::haxe.lang.StringExt.indexOf(@value, match, default(global::haxe.lang.Null<int>)) >= 0 ) )) {
				global::utest.Assert.isTrue(true, msg, pos);
			}
			else {
				global::utest.Assert.fail(( (string.Equals(msg, null)) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("value ", global::utest.Assert.q(@value)), " does not contain "), global::utest.Assert.q(match))) : (msg) ), pos);
			}
			
		}
		
		
		public static void stringSequence(global::Array<object> sequence, string @value, string msg, object pos) {
			unchecked {
				if (string.Equals(null, @value)) {
					global::utest.Assert.fail(( (string.Equals(msg, null)) ? ("null argument value") : (msg) ), pos);
					return;
				}
				
				int p = 0;
				{
					int _g = 0;
					while (( _g < sequence.length )) {
						string s = global::haxe.lang.Runtime.toString(sequence[_g]);
						 ++ _g;
						int p2 = global::haxe.lang.StringExt.indexOf(@value, s, new global::haxe.lang.Null<int>(p, true));
						if (( p2 < 0 )) {
							if (string.Equals(msg, null)) {
								msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected \'", s), "\' after ");
								if (( p > 0 )) {
									string cut = global::haxe.lang.StringExt.substr(@value, 0, new global::haxe.lang.Null<int>(p, true));
									if (( cut.Length > 30 )) {
										cut = global::haxe.lang.Runtime.concat("...", global::haxe.lang.StringExt.substr(cut, -27, default(global::haxe.lang.Null<int>)));
									}
									
									msg = global::haxe.lang.Runtime.concat(msg, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" \'", cut), "\'"));
								}
								else {
									msg = global::haxe.lang.Runtime.concat(msg, " begin");
								}
								
							}
							
							global::utest.Assert.fail(msg, pos);
							return;
						}
						
						p = ( p2 + s.Length );
					}
					
				}
				
				global::utest.Assert.isTrue(true, msg, pos);
			}
		}
		
		
		public static void pass(string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = "pass expected";
			}
			
			global::utest.Assert.isTrue(true, msg, pos);
		}
		
		
		public static void fail(string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = "failure expected";
			}
			
			global::utest.Assert.isTrue(false, msg, pos);
		}
		
		
		public static void warn(string msg) {
			global::utest.Assert.results.@add(global::utest.Assertation.Warning(msg));
		}
		
		
		public static global::haxe.lang.Function createAsync;
		
		public static global::haxe.lang.Function createEvent;
		
		public static string typeToString(object t) {
			try {
				global::System.Type _t = global::Type.getClass<object>(((object) (t) ));
				if ( ! (global::haxe.lang.Runtime.typeEq(_t, null)) ) {
					t = _t;
				}
				
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				{
					object e = __temp_catchall2;
				}
				
			}
			
			
			try {
				return global::Type.getClassName(((global::System.Type) (t) ));
			}
			catch (global::System.Exception __temp_catchallException3){
				global::haxe.lang.Exceptions.exception = __temp_catchallException3;
				object __temp_catchall4 = __temp_catchallException3;
				if (( __temp_catchall4 is global::haxe.lang.HaxeException )) {
					__temp_catchall4 = ((global::haxe.lang.HaxeException) (__temp_catchallException3) ).obj;
				}
				
				{
					object e1 = __temp_catchall4;
				}
				
			}
			
			
			try {
				global::System.Type _t1 = global::Type.getEnum(t);
				if ( ! (global::haxe.lang.Runtime.typeEq(_t1, null)) ) {
					t = _t1;
				}
				
			}
			catch (global::System.Exception __temp_catchallException5){
				global::haxe.lang.Exceptions.exception = __temp_catchallException5;
				object __temp_catchall6 = __temp_catchallException5;
				if (( __temp_catchall6 is global::haxe.lang.HaxeException )) {
					__temp_catchall6 = ((global::haxe.lang.HaxeException) (__temp_catchallException5) ).obj;
				}
				
				{
					object e2 = __temp_catchall6;
				}
				
			}
			
			
			try {
				return global::Type.getEnumName(((global::System.Type) (t) ));
			}
			catch (global::System.Exception __temp_catchallException7){
				global::haxe.lang.Exceptions.exception = __temp_catchallException7;
				object __temp_catchall8 = __temp_catchallException7;
				if (( __temp_catchall8 is global::haxe.lang.HaxeException )) {
					__temp_catchall8 = ((global::haxe.lang.HaxeException) (__temp_catchallException7) ).obj;
				}
				
				{
					object e3 = __temp_catchall8;
				}
				
			}
			
			
			try {
				return global::Std.@string(global::Type.@typeof(t));
			}
			catch (global::System.Exception __temp_catchallException9){
				global::haxe.lang.Exceptions.exception = __temp_catchallException9;
				object __temp_catchall10 = __temp_catchallException9;
				if (( __temp_catchall10 is global::haxe.lang.HaxeException )) {
					__temp_catchall10 = ((global::haxe.lang.HaxeException) (__temp_catchallException9) ).obj;
				}
				
				{
					object e4 = __temp_catchall10;
				}
				
			}
			
			
			try {
				return global::Std.@string(t);
			}
			catch (global::System.Exception __temp_catchallException11){
				global::haxe.lang.Exceptions.exception = __temp_catchallException11;
				object __temp_catchall12 = __temp_catchallException11;
				if (( __temp_catchall12 is global::haxe.lang.HaxeException )) {
					__temp_catchall12 = ((global::haxe.lang.HaxeException) (__temp_catchallException11) ).obj;
				}
				
				{
					object e5 = __temp_catchall12;
				}
				
			}
			
			
			return "<unable to retrieve type name>";
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::utest.Assert(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::utest.Assert();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_sameAs_431__Fun : global::haxe.lang.Function {
		
		public Assert_sameAs_431__Fun(object expected) : base(0, 0) {
			this.expected = expected;
		}
		
		
		public override object __hx_invoke0_o() {
			return this.expected;
		}
		
		
		public object expected;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_sameAs_432__Fun : global::haxe.lang.Function {
		
		public Assert_sameAs_432__Fun(object @value) : base(0, 0) {
			this.@value = @value;
		}
		
		
		public override object __hx_invoke0_o() {
			return this.@value;
		}
		
		
		public object @value;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_sameAs_315__Fun : global::haxe.lang.Function {
		
		public Assert_sameAs_315__Fun(object expected) : base(0, 0) {
			this.expected = expected;
		}
		
		
		public override object __hx_invoke0_o() {
			return this.expected;
		}
		
		
		public object expected;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_sameAs_316__Fun : global::haxe.lang.Function {
		
		public Assert_sameAs_316__Fun(object @value) : base(0, 0) {
			this.@value = @value;
		}
		
		
		public override object __hx_invoke0_o() {
			return this.@value;
		}
		
		
		public object @value;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_Anon_694__Fun : global::haxe.lang.Function {
		
		public Assert_Anon_694__Fun() : base(0, 0) {
		}
		
		
		public static global::utest.Assert_Anon_694__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_Anon_693__Fun : global::haxe.lang.Function {
		
		public Assert_Anon_693__Fun() : base(2, 0) {
		}
		
		
		public static global::utest.Assert_Anon_693__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> timeout = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::haxe.lang.Function f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::haxe.lang.Function) (__fn_dyn1) )) )) );
			return ( (( global::utest.Assert_Anon_694__Fun.__hx_current != null )) ? (global::utest.Assert_Anon_694__Fun.__hx_current) : (global::utest.Assert_Anon_694__Fun.__hx_current = ((global::utest.Assert_Anon_694__Fun) (new global::utest.Assert_Anon_694__Fun()) )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_Anon_706__Fun : global::haxe.lang.Function {
		
		public Assert_Anon_706__Fun() : base(1, 0) {
		}
		
		
		public static global::utest.Assert_Anon_706__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_Anon_705__Fun : global::haxe.lang.Function {
		
		public Assert_Anon_705__Fun() : base(2, 0) {
		}
		
		
		public static global::utest.Assert_Anon_705__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> timeout = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::haxe.lang.Function f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			return ( (( global::utest.Assert_Anon_706__Fun.__hx_current != null )) ? (global::utest.Assert_Anon_706__Fun.__hx_current) : (global::utest.Assert_Anon_706__Fun.__hx_current = ((global::utest.Assert_Anon_706__Fun) (new global::utest.Assert_Anon_706__Fun()) )) );
		}
		
		
	}
}


