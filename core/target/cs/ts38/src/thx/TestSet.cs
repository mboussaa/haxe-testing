// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestSet : global::haxe.lang.HxObject {
		
		public TestSet(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestSet(int i) {
			global::thx.TestSet.__hx_ctor_thx_TestSet(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestSet(global::thx.TestSet __temp_me131, int i) {
			__temp_me131.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestSet(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestSet(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testCreate() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.IntMap<bool> @set = global::thx._Set.Set_Impl_.createInt(null);
					global::utest.Assert.@equals(0, global::thx._Set.Set_Impl_.get_length<int>(((global::haxe.IMap<int, bool>) (@set) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (15) )}));
					global::thx._Set.Set_Impl_.@add<int>(((global::haxe.IMap<int, bool>) (@set) ), ((int) (1) ));
					global::thx._Set.Set_Impl_.@add<int>(((global::haxe.IMap<int, bool>) (@set) ), ((int) (1) ));
					global::utest.Assert.@equals(1, global::thx._Set.Set_Impl_.get_length<int>(((global::haxe.IMap<int, bool>) (@set) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
				}
				
			}
		}
		
		
		public virtual void testSet() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), global::thx.Arrays.order<int>(((global::Array<int>) (global::thx._Set.Set_Impl_.toArray<int>(((global::haxe.IMap<int, bool>) (global::thx._Set.Set_Impl_.createInt(new global::Array<int>(new int[]{1, 2, 2, 2, 3}))) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Ints), "compare", 57219237)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSet", "thx.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
				}
				
			}
		}
		
		
		public virtual void testUnion() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.IntMap<bool> s1 = global::thx._Set.Set_Impl_.createInt(new global::Array<int>(new int[]{1, 2, 3}));
					global::haxe.ds.IntMap<bool> s2 = global::thx._Set.Set_Impl_.createInt(new global::Array<int>(new int[]{2, 2, 4}));
					global::haxe.ds.IntMap<bool> newset = ((global::haxe.ds.IntMap<bool>) (global::haxe.ds.IntMap<object>.__hx_cast<bool>(((global::haxe.ds.IntMap) (global::thx._Set.Set_Impl_.copy<int>(((global::haxe.ds.IntMap<bool>) (s1) ))) ))) );
					global::thx._Set.Set_Impl_.pushMany<int>(((global::haxe.IMap<int, bool>) (newset) ), ((object) (global::thx._Set.Set_Impl_.toArray<int>(((global::haxe.IMap<int, bool>) (s2) ))) ));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3, 4}), global::thx.Arrays.order<int>(((global::Array<int>) (global::thx._Set.Set_Impl_.toArray<int>(((global::haxe.IMap<int, bool>) (newset) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Ints), "compare", 57219237)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnion", "thx.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
				}
				
			}
		}
		
		
		public virtual void testDifference() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.IntMap<bool> s1 = global::thx._Set.Set_Impl_.createInt(new global::Array<int>(new int[]{1, 2, 3}));
					global::haxe.ds.IntMap<bool> s2 = global::thx._Set.Set_Impl_.createInt(new global::Array<int>(new int[]{2, 2, 4}));
					global::haxe.ds.IntMap<bool> result = ((global::haxe.ds.IntMap<bool>) (global::haxe.ds.IntMap<object>.__hx_cast<bool>(((global::haxe.ds.IntMap) (global::thx._Set.Set_Impl_.copy<int>(((global::haxe.ds.IntMap<bool>) (s1) ))) ))) );
					{
						object tmp = global::thx._Set.Set_Impl_.iterator<int>(((global::haxe.IMap<int, bool>) (s2) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
							((global::haxe.ds.IntMap<bool>) (result) ).@remove(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null))) ));
						}
						
					}
					
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 3}), global::thx.Arrays.order<int>(((global::Array<int>) (global::thx._Set.Set_Impl_.toArray<int>(((global::haxe.IMap<int, bool>) (result) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Ints), "compare", 57219237)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifference", "thx.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
				}
				
			}
		}
		
		
		public virtual void testBooleans() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.IntMap<bool> this1 = global::thx._Set.Set_Impl_.createInt(new global::Array<int>(new int[]{1, 2, 3}));
					global::haxe.ds.IntMap<bool> @set = global::thx._Set.Set_Impl_.createInt(new global::Array<int>(new int[]{2, 3, 4}));
					global::haxe.ds.IntMap<bool> newset = ((global::haxe.ds.IntMap<bool>) (global::haxe.ds.IntMap<object>.__hx_cast<bool>(((global::haxe.ds.IntMap) (global::thx._Set.Set_Impl_.copy<int>(((global::haxe.ds.IntMap<bool>) (this1) ))) ))) );
					global::thx._Set.Set_Impl_.pushMany<int>(((global::haxe.IMap<int, bool>) (newset) ), ((object) (global::thx._Set.Set_Impl_.toArray<int>(((global::haxe.IMap<int, bool>) (@set) ))) ));
					global::haxe.ds.IntMap<bool> this2 = newset;
					global::haxe.ds.IntMap<bool> set1 = global::thx._Set.Set_Impl_.createInt(new global::Array<int>(new int[]{2, 3}));
					global::haxe.ds.IntMap<bool> result = ((global::haxe.ds.IntMap<bool>) (global::haxe.ds.IntMap<object>.__hx_cast<bool>(((global::haxe.ds.IntMap) (global::thx._Set.Set_Impl_.copy<int>(((global::haxe.ds.IntMap<bool>) (this2) ))) ))) );
					{
						object tmp = global::thx._Set.Set_Impl_.iterator<int>(((global::haxe.IMap<int, bool>) (set1) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
							((global::haxe.ds.IntMap<bool>) (result) ).@remove(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null))) ));
						}
						
					}
					
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 4}), global::thx.Arrays.order<int>(((global::Array<int>) (global::thx._Set.Set_Impl_.toArray<int>(((global::haxe.IMap<int, bool>) (result) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Ints), "compare", 57219237)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBooleans", "thx.TestSet", "TestSet.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 873828157:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBooleans", 873828157)) );
					}
					
					
					case 1719976687:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDifference", 1719976687)) );
					}
					
					
					case 1877582685:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUnion", 1877582685)) );
					}
					
					
					case 1036388976:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSet", 1036388976)) );
					}
					
					
					case 352562414:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCreate", 352562414)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 873828157:
					{
						this.testBooleans();
						break;
					}
					
					
					case 1719976687:
					{
						this.testDifference();
						break;
					}
					
					
					case 1877582685:
					{
						this.testUnion();
						break;
					}
					
					
					case 1036388976:
					{
						this.testSet();
						break;
					}
					
					
					case 352562414:
					{
						this.testCreate();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


