// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.bigint {
	public class DecimalImpl : global::haxe.lang.HxObject {
		
		static DecimalImpl() {
			unchecked {
				global::thx.bigint.DecimalImpl.zero = global::thx.bigint.Decimals.fromInt(0);
				global::thx.bigint.DecimalImpl.one = global::thx.bigint.Decimals.fromInt(1);
				global::thx.bigint.DecimalImpl.ten = global::thx.bigint.Decimals.fromInt(10);
			}
		}
		
		
		public DecimalImpl(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public DecimalImpl(global::thx.bigint.BigIntImpl @value, int scale) {
			global::thx.bigint.DecimalImpl.__hx_ctor_thx_bigint_DecimalImpl(this, @value, scale);
		}
		
		
		public static void __hx_ctor_thx_bigint_DecimalImpl(global::thx.bigint.DecimalImpl __temp_me90, global::thx.bigint.BigIntImpl @value, int scale) {
			__temp_me90.@value = @value;
			__temp_me90.scale = scale;
		}
		
		
		public static global::thx.bigint.DecimalImpl zero;
		
		public static global::thx.bigint.DecimalImpl one;
		
		public static global::thx.bigint.DecimalImpl ten;
		
		public static global::thx.bigint.DecimalImpl randomBetween(global::thx.bigint.DecimalImpl a, global::thx.bigint.DecimalImpl b) {
			global::thx.bigint.DecimalImpl lhs = a.matchScale(b);
			return new global::thx.bigint.DecimalImpl(global::thx._BigInt.BigInt_Impl_.randomBetween(lhs.@value, b.matchScale(a).@value), lhs.scale);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.bigint.DecimalImpl(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::thx.bigint.DecimalImpl(((global::thx.bigint.BigIntImpl) (arr[0]) ), ((int) (global::haxe.lang.Runtime.toInt(arr[1])) ));
			}
		}
		
		
		public global::thx.bigint.BigIntImpl @value;
		
		public int scale;
		
		public virtual global::thx.bigint.DecimalImpl @add(global::thx.bigint.DecimalImpl that) {
			global::thx.bigint.DecimalImpl lhs = this.matchScale(that);
			return new global::thx.bigint.DecimalImpl(lhs.@value.@add(that.matchScale(this).@value), lhs.scale);
		}
		
		
		public virtual global::thx.bigint.DecimalImpl subtract(global::thx.bigint.DecimalImpl that) {
			global::thx.bigint.DecimalImpl lhs = this.matchScale(that);
			return new global::thx.bigint.DecimalImpl(lhs.@value.subtract(that.matchScale(this).@value), lhs.scale);
		}
		
		
		public virtual global::thx.bigint.DecimalImpl divide(global::thx.bigint.DecimalImpl that) {
			return this.divideWithScale(that, global::thx.bigint.Decimals.divisionExtraScale);
		}
		
		
		public virtual global::thx.bigint.DecimalImpl divideWithScale(global::thx.bigint.DecimalImpl that, int scale) {
			unchecked {
				if (that.isZero()) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("division by zero", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"divideWithScale", "thx.bigint.DecimalImpl", "DecimalImpl.hx"}, new int[]{1981972957}, new double[]{((double) (42) )})));
				}
				
				global::thx.bigint.DecimalImpl lhs = this.matchScale(that);
				global::thx.bigint.DecimalImpl rhs = that.matchScale(this);
				object qr = lhs.@value.multiply(global::thx.bigint.Small.ten.pow(global::thx.bigint.Bigs.fromInt(( rhs.scale + scale )))).divMod(rhs.@value);
				int nscale = ( rhs.scale + scale );
				return new global::thx.bigint.DecimalImpl(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(qr, "quotient", 845179051, true)) ), nscale).trim(new global::haxe.lang.Null<int>(nscale, true));
			}
		}
		
		
		public virtual global::thx.bigint.DecimalImpl moduloWithScale(global::thx.bigint.DecimalImpl that, int scale) {
			unchecked {
				if (that.isZero()) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("modulo by zero", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"moduloWithScale", "thx.bigint.DecimalImpl", "DecimalImpl.hx"}, new int[]{1981972957}, new double[]{((double) (53) )})));
				}
				
				global::thx.bigint.DecimalImpl lhs = this.matchScale(that);
				global::thx.bigint.DecimalImpl rhs = that.matchScale(this);
				global::thx.bigint.BigIntImpl pow = global::thx.bigint.Small.ten.pow(global::thx.bigint.Bigs.fromInt(scale));
				object qr = lhs.@value.multiply(pow).divMod(rhs.@value.multiply(pow));
				int nscale = ( lhs.scale + scale );
				return new global::thx.bigint.DecimalImpl(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(qr, "remainder", 1002304485, true)) ), nscale).trim(new global::haxe.lang.Null<int>(nscale, true));
			}
		}
		
		
		public virtual global::thx.bigint.DecimalImpl multiply(global::thx.bigint.DecimalImpl that) {
			return new global::thx.bigint.DecimalImpl(this.@value.multiply(that.@value), ( this.scale + that.scale ));
		}
		
		
		public virtual global::thx.bigint.DecimalImpl modulo(global::thx.bigint.DecimalImpl that) {
			return this.moduloWithScale(that, global::thx.bigint.Decimals.divisionExtraScale);
		}
		
		
		public virtual global::thx.bigint.DecimalImpl abs() {
			return new global::thx.bigint.DecimalImpl(this.@value.abs(), this.scale);
		}
		
		
		public virtual global::thx.bigint.DecimalImpl negate() {
			return new global::thx.bigint.DecimalImpl(this.@value.negate(), this.scale);
		}
		
		
		public virtual global::thx.bigint.DecimalImpl next() {
			return this.@add(global::thx.bigint.DecimalImpl.one);
		}
		
		
		public virtual global::thx.bigint.DecimalImpl prev() {
			return this.subtract(global::thx.bigint.DecimalImpl.one);
		}
		
		
		public virtual global::thx.bigint.DecimalImpl pow(int exp) {
			unchecked {
				if (( exp < 0 )) {
					return global::thx._Decimal.Decimal_Impl_.one.divideWithScale(global::thx._Decimal.Decimal_Impl_.fromBigInt(this.@value.pow(global::thx.bigint.Bigs.fromInt( - (exp) ))), ( (( this.scale + 1 )) *  - (exp)  ));
				}
				else {
					return new global::thx.bigint.DecimalImpl(this.@value.pow(global::thx.bigint.Bigs.fromInt(exp)), ( this.scale * exp ));
				}
				
			}
		}
		
		
		public virtual global::thx.bigint.DecimalImpl ceilTo(int newscale) {
			if (this.isZero()) {
				return this;
			}
			
			global::thx.bigint.DecimalImpl scaled = this.scaleTo(newscale);
			if (( (( (scaled.isZero()) ? (global::thx.bigint.DecimalImpl.one) : (this.modulo(scaled)) )).multiply(global::thx.bigint.DecimalImpl.ten.pow(newscale)).toFloat() <= 0 )) {
				return scaled;
			}
			else {
				return new global::thx.bigint.DecimalImpl(scaled.@value.@add(global::thx.bigint.Small.one), scaled.scale);
			}
			
		}
		
		
		public virtual global::thx.bigint.DecimalImpl floorTo(int newscale) {
			return this.scaleTo(newscale);
		}
		
		
		public virtual global::thx.bigint.DecimalImpl roundTo(int newscale) {
			if (this.isZero()) {
				return this;
			}
			
			global::thx.bigint.DecimalImpl scaled = this.scaleTo(newscale);
			if (( (( (scaled.isZero()) ? (global::thx.bigint.DecimalImpl.one) : (this.modulo(scaled)) )).multiply(global::thx.bigint.DecimalImpl.ten.pow(newscale)).toFloat() < 0.5 )) {
				return scaled;
			}
			else {
				return new global::thx.bigint.DecimalImpl(scaled.@value.@add(global::thx.bigint.Small.one), scaled.scale);
			}
			
		}
		
		
		public virtual global::thx.bigint.DecimalImpl scaleTo(int newscale) {
			if (( newscale == this.scale )) {
				return this;
			}
			
			if (( newscale > this.scale )) {
				return new global::thx.bigint.DecimalImpl(this.@value.multiply(global::thx.bigint.Small.ten.pow(global::thx.bigint.Bigs.fromInt(( newscale - this.scale )))), newscale);
			}
			else {
				return new global::thx.bigint.DecimalImpl(this.@value.divide(global::thx.bigint.Small.ten.pow(global::thx.bigint.Bigs.fromInt(( this.scale - newscale )))), newscale);
			}
			
		}
		
		
		public virtual global::thx.bigint.DecimalImpl square() {
			return this.multiply(this);
		}
		
		
		public virtual bool isNegative() {
			return global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(this.@value, "sign", 1280544829, true));
		}
		
		
		public virtual bool isEven() {
			return this.@value.isEven();
		}
		
		
		public virtual bool isOdd() {
			return this.@value.isOdd();
		}
		
		
		public virtual bool isZero() {
			return this.@value.isZero();
		}
		
		
		public virtual int compareTo(global::thx.bigint.DecimalImpl that) {
			return this.matchScale(that).@value.compareTo(that.matchScale(this).@value);
		}
		
		
		public virtual int compareToAbs(global::thx.bigint.DecimalImpl that) {
			return this.matchScale(that).@value.compareToAbs(that.matchScale(this).@value);
		}
		
		
		public virtual global::thx.bigint.DecimalImpl trim(global::haxe.lang.Null<int> min) {
			unchecked {
				global::haxe.lang.Null<int> __temp_min89 = ( ( ! (min.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (min) );
				if (( this.scale == 0 )) {
					return this;
				}
				
				string s = this.toString();
				global::Array<object> parts = global::haxe.lang.StringExt.split(s, ".");
				string dec = global::thx.Strings.rpad(global::thx.Strings.trimCharsRight(global::haxe.lang.Runtime.toString(parts[1]), "0"), "0", (__temp_min89).@value);
				if (( dec.Length > 0 )) {
					s = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(parts[0]), "."), dec);
				}
				else {
					s = global::haxe.lang.Runtime.toString(parts[0]);
				}
				
				return global::thx.bigint.Decimals.parse(s);
			}
		}
		
		
		public virtual double toFloat() {
			return global::Std.parseFloat(this.toString());
		}
		
		
		public virtual int toInt() {
			return this.@value.divide(global::thx.bigint.Small.ten.pow(global::thx.bigint.Bigs.fromInt(this.scale))).toInt();
		}
		
		
		public virtual string toString() {
			bool sign = global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(this.@value, "sign", 1280544829, true));
			string i = (( (sign) ? (this.@value.negate()) : (this.@value) )).toString();
			int l = i.Length;
			if (( this.scale == 0 )) {
				return global::haxe.lang.Runtime.concat((( (sign) ? ("-") : ("") )), i);
			}
			else if (( i.Length <= this.scale )) {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat((( (sign) ? ("-") : ("") )), "0."), global::thx.Strings.lpad(i, "0", this.scale));
			}
			else {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat((( (sign) ? ("-") : ("") )), global::haxe.lang.StringExt.substring(i, 0, new global::haxe.lang.Null<int>(( l - this.scale ), true))), "."), global::haxe.lang.StringExt.substring(i, ( l - this.scale ), default(global::haxe.lang.Null<int>)));
			}
			
		}
		
		
		public virtual global::thx.bigint.DecimalImpl matchScale(global::thx.bigint.DecimalImpl that) {
			if (( this.scale >= that.scale )) {
				return this;
			}
			
			return this.scaleTo(that.scale);
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2026819210:
					{
						this.scale = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2026819210:
					{
						this.scale = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 834174833:
					{
						this.@value = ((global::thx.bigint.BigIntImpl) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1844460293:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "matchScale", 1844460293)) );
					}
					
					
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 336707124:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toInt", 336707124)) );
					}
					
					
					case 1327174177:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toFloat", 1327174177)) );
					}
					
					
					case 1292082402:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "trim", 1292082402)) );
					}
					
					
					case 817595090:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compareToAbs", 817595090)) );
					}
					
					
					case 39622016:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compareTo", 39622016)) );
					}
					
					
					case 1851249714:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isZero", 1851249714)) );
					}
					
					
					case 1095941093:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isOdd", 1095941093)) );
					}
					
					
					case 1619211300:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isEven", 1619211300)) );
					}
					
					
					case 1274099839:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isNegative", 1274099839)) );
					}
					
					
					case 1492254877:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "square", 1492254877)) );
					}
					
					
					case 1694977701:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "scaleTo", 1694977701)) );
					}
					
					
					case 219115881:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "roundTo", 219115881)) );
					}
					
					
					case 1934108263:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "floorTo", 1934108263)) );
					}
					
					
					case 42398688:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ceilTo", 42398688)) );
					}
					
					
					case 5594520:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pow", 5594520)) );
					}
					
					
					case 1247723251:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "prev", 1247723251)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 1729708482:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "negate", 1729708482)) );
					}
					
					
					case 4845682:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "abs", 4845682)) );
					}
					
					
					case 1087583414:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "modulo", 1087583414)) );
					}
					
					
					case 445440548:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "multiply", 445440548)) );
					}
					
					
					case 10917646:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "moduloWithScale", 10917646)) );
					}
					
					
					case 2087824363:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "divideWithScale", 2087824363)) );
					}
					
					
					case 1058156409:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "divide", 1058156409)) );
					}
					
					
					case 2014410004:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "subtract", 2014410004)) );
					}
					
					
					case 4846113:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "add", 4846113)) );
					}
					
					
					case 2026819210:
					{
						return this.scale;
					}
					
					
					case 834174833:
					{
						return this.@value;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2026819210:
					{
						return ((double) (this.scale) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1844460293:
					{
						return this.matchScale(((global::thx.bigint.DecimalImpl) (dynargs[0]) ));
					}
					
					
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 336707124:
					{
						return this.toInt();
					}
					
					
					case 1327174177:
					{
						return this.toFloat();
					}
					
					
					case 1292082402:
					{
						return this.trim(global::haxe.lang.Null<object>.ofDynamic<int>(dynargs[0]));
					}
					
					
					case 817595090:
					{
						return this.compareToAbs(((global::thx.bigint.DecimalImpl) (dynargs[0]) ));
					}
					
					
					case 39622016:
					{
						return this.compareTo(((global::thx.bigint.DecimalImpl) (dynargs[0]) ));
					}
					
					
					case 1851249714:
					{
						return this.isZero();
					}
					
					
					case 1095941093:
					{
						return this.isOdd();
					}
					
					
					case 1619211300:
					{
						return this.isEven();
					}
					
					
					case 1274099839:
					{
						return this.isNegative();
					}
					
					
					case 1492254877:
					{
						return this.square();
					}
					
					
					case 1694977701:
					{
						return this.scaleTo(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 219115881:
					{
						return this.roundTo(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 1934108263:
					{
						return this.floorTo(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 42398688:
					{
						return this.ceilTo(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 5594520:
					{
						return this.pow(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 1247723251:
					{
						return this.prev();
					}
					
					
					case 1224901875:
					{
						return this.next();
					}
					
					
					case 1729708482:
					{
						return this.negate();
					}
					
					
					case 4845682:
					{
						return this.abs();
					}
					
					
					case 1087583414:
					{
						return this.modulo(((global::thx.bigint.DecimalImpl) (dynargs[0]) ));
					}
					
					
					case 445440548:
					{
						return this.multiply(((global::thx.bigint.DecimalImpl) (dynargs[0]) ));
					}
					
					
					case 10917646:
					{
						return this.moduloWithScale(((global::thx.bigint.DecimalImpl) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					}
					
					
					case 2087824363:
					{
						return this.divideWithScale(((global::thx.bigint.DecimalImpl) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					}
					
					
					case 1058156409:
					{
						return this.divide(((global::thx.bigint.DecimalImpl) (dynargs[0]) ));
					}
					
					
					case 2014410004:
					{
						return this.subtract(((global::thx.bigint.DecimalImpl) (dynargs[0]) ));
					}
					
					
					case 4846113:
					{
						return this.@add(((global::thx.bigint.DecimalImpl) (dynargs[0]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("scale");
			baseArr.push("value");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


