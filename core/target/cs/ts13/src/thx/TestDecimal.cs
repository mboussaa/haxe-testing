// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestDecimal : global::haxe.lang.HxObject {
		
		public TestDecimal(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestDecimal(int i) {
			global::thx.TestDecimal.__hx_ctor_thx_TestDecimal(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestDecimal(global::thx.TestDecimal __temp_me141, int i) {
			__temp_me141.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestDecimal(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestDecimal(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public int divisionSize;
		
		public virtual void setup() {
			unchecked {
				this.divisionSize = global::thx.bigint.Decimals.divisionExtraScale;
				global::thx.bigint.Decimals.divisionExtraScale = 16;
			}
		}
		
		
		public virtual void teardown() {
			global::thx.bigint.Decimals.divisionExtraScale = this.divisionSize;
		}
		
		
		public virtual void testToBigInt() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.bigint.DecimalImpl v = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("10234.0001040000")) );
					global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(global::thx._Decimal.Decimal_Impl_.toBigInt(v), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10234", 10)) )), global::haxe.lang.Runtime.concat("expected 10234 but got ", ((global::thx.bigint.BigIntImpl) (global::thx._Decimal.Decimal_Impl_.toBigInt(v)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToBigInt", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
				}
				
			}
		}
		
		
		public virtual void testTrim() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.bigint.DecimalImpl v = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("10234.0001040000")) );
					global::utest.Assert.isTrue(( v.scale == 10 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
					global::utest.Assert.isTrue(( ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(default(global::haxe.lang.Null<int>))) ).scale == 6 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
					global::utest.Assert.isTrue(( ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(new global::haxe.lang.Null<int>(8, true))) ).scale == 8 ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(new global::haxe.lang.Null<int>(8, true))) ).toString()), " to have a scale 8 but it is "), global::haxe.lang.Runtime.toString(((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(new global::haxe.lang.Null<int>(8, true))) ).scale)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (34) )}));
					global::utest.Assert.isTrue(( ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(new global::haxe.lang.Null<int>(2, true))) ).scale == 6 ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(new global::haxe.lang.Null<int>(2, true))) ).toString()), " to have a scale 6 but it is "), global::haxe.lang.Runtime.toString(((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(new global::haxe.lang.Null<int>(2, true))) ).scale)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
					v = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("10234.00000000")) );
					global::utest.Assert.isTrue(( ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(default(global::haxe.lang.Null<int>))) ).scale == 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
					global::utest.Assert.isTrue(( ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(new global::haxe.lang.Null<int>(2, true))) ).scale == 2 ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(new global::haxe.lang.Null<int>(2, true))) ).toString()), ".scale == 2 but is "), global::haxe.lang.Runtime.toString(((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(new global::haxe.lang.Null<int>(2, true))) ).scale)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					v = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.20000000")) );
					global::utest.Assert.isTrue(( ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(default(global::haxe.lang.Null<int>))) ).scale == 1 ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(default(global::haxe.lang.Null<int>))) ).toString()), ".scale == 1 but got "), global::haxe.lang.Runtime.toString(((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (v) ).trim(default(global::haxe.lang.Null<int>))) ).scale)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
				}
				
			}
		}
		
		
		public virtual void testStringExp() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.12345e-10")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.000000000112345")) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.000000000112345")) ).toString()), " but got "), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.12345e-10")) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStringExp", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.12345e+10")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("11234500000")) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("11234500000")) ).toString()), " but got "), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.12345e+10")) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStringExp", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1.12345e-10")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-0.000000000112345")) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-0.000000000112345")) ).toString()), " but got "), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1.12345e-10")) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStringExp", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1.12345e+10")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-11234500000")) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-11234500000")) ).toString()), " but got "), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1.12345e+10")) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStringExp", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0E7")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0")) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0")) ).toString()), " but got "), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0E7")) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStringExp", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.234e-50)) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.234000e-050")) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.234e-50)) ).toString()), " == "), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.234000e-050")) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStringExp", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				}
				
			}
		}
		
		
		public virtual void testModulo() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(10)) ).modulo(global::thx._Decimal.Decimal_Impl_.fromInt(3)), global::thx._Decimal.Decimal_Impl_.fromInt(1)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(10.2)) ).modulo(global::thx._Decimal.Decimal_Impl_.fromInt(3)), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("12345678900000000")) ).modulo(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.0000000012345678")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.0000000009832122")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(16.80)) ).modulo(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(4.10)) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.4")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (58) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(10)) ).modulo(global::thx._Decimal.Decimal_Impl_.fromInt(3)), global::thx._Decimal.Decimal_Impl_.fromInt(1)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(10.2)) ).modulo(global::thx._Decimal.Decimal_Impl_.fromInt(3)), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(10)) ).modulo(global::thx._Decimal.Decimal_Impl_.fromInt(-3)), global::thx._Decimal.Decimal_Impl_.fromInt(1)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (62) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(-10)) ).modulo(global::thx._Decimal.Decimal_Impl_.fromInt(-3)), global::thx._Decimal.Decimal_Impl_.fromInt(-1)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(-10)) ).modulo(global::thx._Decimal.Decimal_Impl_.fromInt(3)), global::thx._Decimal.Decimal_Impl_.fromInt(-1)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (64) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(0)) ).modulo(global::thx._Decimal.Decimal_Impl_.fromInt(3)), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.0")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (66) )}));
					global::utest.Assert.raises(( (( global::thx.TestDecimal_testModulo_68__Fun.__hx_current != null )) ? (global::thx.TestDecimal_testModulo_68__Fun.__hx_current) : (global::thx.TestDecimal_testModulo_68__Fun.__hx_current = ((global::thx.TestDecimal_testModulo_68__Fun) (new global::thx.TestDecimal_testModulo_68__Fun()) )) ), null, null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (68) )}));
				}
				
			}
		}
		
		
		public virtual void testDivision() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("12345678900000000")) ).divide(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.0000000012345678")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("10000000729000059778004901.79640194730495967900669367854888")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (73) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("12345678901234567890.12346789")) ).divide(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("987654321.987654321")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("12499999874.843750115314464248433558")) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("12345678901234567890.12346789")) ).toString()), " / "), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("987654321.987654321")) ).toString()), " == "), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("12499999874.843750115314464248433558")) ).toString()), " but got "), ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("12345678901234567890.12346789")) ).divide(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("987654321.987654321")) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (74) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("12345678901234567890.12346789")) ).divide(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-987654321.987654321")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-12499999874.843750115314464248433558")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (75) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-12345678901234567890.12346789")) ).divide(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-987654321.987654321")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("12499999874.843750115314464248433558")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (76) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-12345678901234567890.12346789")) ).divide(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("987654321.987654321")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-12499999874.843750115314464248433558")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-12345678901234567890.12346789")) ).divide(global::thx._Decimal.Decimal_Impl_.fromInt(1)), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-12345678901234567890.12346789")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-12345678901234567890.12346789")) ).divide(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-12345678901234567890.12346789")) )), global::thx._Decimal.Decimal_Impl_.fromInt(1)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (79) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(10)) ).divide(global::thx._Decimal.Decimal_Impl_.fromInt(2)), global::thx._Decimal.Decimal_Impl_.fromInt(5)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(10)) ).divide(global::thx._Decimal.Decimal_Impl_.fromInt(3)), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("3.3333333333333333")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(1)) ).divide(global::thx._Decimal.Decimal_Impl_.fromInt(2)), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.5)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (82) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(1)) ).divide(global::thx._Decimal.Decimal_Impl_.fromInt(3)), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.3333333333333333")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(0)) ).divide(global::thx._Decimal.Decimal_Impl_.fromInt(3)), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.0")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
					global::utest.Assert.raises(( (( global::thx.TestDecimal_testDivision_87__Fun.__hx_current != null )) ? (global::thx.TestDecimal_testDivision_87__Fun.__hx_current) : (global::thx.TestDecimal_testDivision_87__Fun.__hx_current = ((global::thx.TestDecimal_testDivision_87__Fun) (new global::thx.TestDecimal_testDivision_87__Fun()) )) ), null, null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (87) )}));
				}
				
			}
		}
		
		
		public virtual void testMultiply() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("12345678900000000")) ).multiply(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.0000000012345678")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("15241577.63907942")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiply", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (92) )}));
				}
				
			}
		}
		
		
		public virtual void testInts() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(global::thx._Decimal.Decimal_Impl_.fromInt(123), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInts", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (97) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(global::thx._Decimal.Decimal_Impl_.fromInt(-123), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-123")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInts", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (98) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(global::thx._Decimal.Decimal_Impl_.fromInt(1234567890), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInts", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
				}
				
			}
		}
		
		
		public virtual void testFloats() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(123.456)) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.456")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloats", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (104) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-123.456)) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-123.456")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloats", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (105) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.123456789)) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.123456789")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloats", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (106) )}));
				}
				
			}
		}
		
		
		public virtual void testEquality() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.456")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.4560000")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquality", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (111) )}));
				}
				
			}
		}
		
		
		public virtual void testAddition() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.456")) ).@add(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("76.544000")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("200")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (116) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.456")) ).@add(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.004")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.46")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (117) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.456")) ).@add(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-0.456")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (118) )}));
				}
				
			}
		}
		
		
		public virtual void testSubtraction() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.456")) ).subtract(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("76.544000")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("46.912000")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSubtraction", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (123) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.456")) ).subtract(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.004")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.452")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSubtraction", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (124) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.456")) ).subtract(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-0.456")) )), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("123.912")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSubtraction", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (125) )}));
				}
				
			}
		}
		
		
		public virtual void testComparison() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.greater(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.11111")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (130) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.greater(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1")) ), global::thx._Decimal.Decimal_Impl_.fromInt(-1)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
					global::utest.Assert.isFalse(global::thx._Decimal.Decimal_Impl_.greater(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1")) ), global::thx._Decimal.Decimal_Impl_.fromInt(1)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (132) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.greaterEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1")) ), global::thx._Decimal.Decimal_Impl_.fromInt(1)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (133) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1")) ), global::thx._Decimal.Decimal_Impl_.fromInt(1)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (134) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.01001")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.0100100")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (135) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (136) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("0.000")) ), global::thx._Decimal.Decimal_Impl_.fromInt(0)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (137) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.greaterEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1.12345e+10")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-11234500000")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (138) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.lessEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1.12345e+10")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-11234500000")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (139) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.greaterEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.12345e+10")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("11234500000")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (140) )}));
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.lessEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1.12345e+10")) ), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("11234500000")) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (141) )}));
				}
				
			}
		}
		
		
		public virtual void testString() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<object> tests = new global::Array<object>(new object[]{"0", "0.00000789", "0.001", "0.123", "1.0", "1", "1.1", "123456789.0123456789", "123456789.012345678900000"});
					global::thx.bigint.DecimalImpl dec = null;
					{
						int _g2 = 0;
						while (( _g2 < tests.length )) {
							string test = global::haxe.lang.Runtime.toString(tests[_g2]);
							 ++ _g2;
							dec = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse(test)) );
							global::utest.Assert.@equals(test, ((global::thx.bigint.DecimalImpl) (dec) ).toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testString", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (150) )}));
							if (string.Equals(test, "0")) {
								continue;
							}
							
							dec = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse(global::haxe.lang.Runtime.concat("-", test))) );
							global::utest.Assert.@equals(global::haxe.lang.Runtime.concat("-", test), ((global::thx.bigint.DecimalImpl) (dec) ).toString(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testString", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (155) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void assertDecimalEquals(global::thx.bigint.DecimalImpl test, global::thx.bigint.DecimalImpl expected, object pos) {
			global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(test, expected), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.DecimalImpl) (expected) ).toString()), " but got "), ((global::thx.bigint.DecimalImpl) (test) ).toString()), pos);
		}
		
		
		public virtual void testRound() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(0)) ).roundTo(0), global::thx._Decimal.Decimal_Impl_.fromInt(0), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (165) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(0)) ).ceilTo(0), global::thx._Decimal.Decimal_Impl_.fromInt(0), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (166) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(0)) ).floorTo(0), global::thx._Decimal.Decimal_Impl_.fromInt(0), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (167) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(1)) ).roundTo(0), global::thx._Decimal.Decimal_Impl_.fromInt(1), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (169) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(-1)) ).roundTo(0), global::thx._Decimal.Decimal_Impl_.fromInt(-1), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (170) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(1)) ).ceilTo(0), global::thx._Decimal.Decimal_Impl_.fromInt(1), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (171) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(-1)) ).ceilTo(0), global::thx._Decimal.Decimal_Impl_.fromInt(-1), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (172) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(1)) ).floorTo(0), global::thx._Decimal.Decimal_Impl_.fromInt(1), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (173) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(-1)) ).floorTo(0), global::thx._Decimal.Decimal_Impl_.fromInt(-1), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (174) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).roundTo(0), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (176) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).roundTo(3), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.123")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (177) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).roundTo(5), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.12346")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (178) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).roundTo(6), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.123457")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (179) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).roundTo(0), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (181) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).roundTo(3), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.123")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (182) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).roundTo(5), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.12345")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (183) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).roundTo(6), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.123456")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (184) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).ceilTo(0), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567891")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (186) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).ceilTo(3), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.124")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (187) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).ceilTo(5), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.12346")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (188) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).ceilTo(6), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.123457")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (189) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).ceilTo(0), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (191) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).ceilTo(3), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.123")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (192) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).ceilTo(5), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.12345")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (193) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).ceilTo(6), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.123456")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (194) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).floorTo(0), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (196) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).floorTo(3), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.123")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (197) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).floorTo(5), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.12345")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (198) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.1234567890")) ).floorTo(6), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.123456")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (199) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).floorTo(0), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (201) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).floorTo(3), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.123")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (202) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).floorTo(5), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.12345")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (203) )}));
					this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.1234567890")) ).floorTo(6), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("-1234567890.123456")) ), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRound", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (204) )}));
				}
				
			}
		}
		
		
		public virtual void testScaleTo() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{5049501, 5744356}, new object[]{"0", "0"}, new int[]{2026819210}, new double[]{((double) (0) )}), new global::haxe.lang.DynamicObject(new int[]{5049501, 5744356}, new object[]{"0.00000", "0"}, new int[]{2026819210}, new double[]{((double) (5) )}), new global::haxe.lang.DynamicObject(new int[]{5049501, 5744356}, new object[]{"0.100", "0.1"}, new int[]{2026819210}, new double[]{((double) (3) )}), new global::haxe.lang.DynamicObject(new int[]{5049501, 5744356}, new object[]{"0.012", "0.0123456"}, new int[]{2026819210}, new double[]{((double) (3) )}), new global::haxe.lang.DynamicObject(new int[]{5049501, 5744356}, new object[]{"1234567890.123", "1234567890.1234567890"}, new int[]{2026819210}, new double[]{((double) (3) )}), new global::haxe.lang.DynamicObject(new int[]{5049501, 5744356}, new object[]{"1234567890.1234567890", "1234567890.1234567890"}, new int[]{2026819210}, new double[]{((double) (10) )}), new global::haxe.lang.DynamicObject(new int[]{5049501, 5744356}, new object[]{"1234567890.123456789000", "1234567890.1234567890"}, new int[]{2026819210}, new double[]{((double) (12) )})});
					global::thx.bigint.DecimalImpl dec = null;
					{
						int _g2 = 0;
						while (( _g2 < tests.length )) {
							object test = tests[_g2];
							 ++ _g2;
							dec = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "src", 5744356, true)))) );
							global::utest.Assert.@equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "exp", 5049501, true)), ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (dec) ).scaleTo(((int) (global::haxe.lang.Runtime.getField_f(test, "scale", 2026819210, true)) ))) ).toString(), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "src", 5744356, true))), " to be "), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "exp", 5049501, true))), " when scaled to "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(test, "scale", 2026819210, true)) ))), " but got "), ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (dec) ).scaleTo(((int) (global::haxe.lang.Runtime.getField_f(test, "scale", 2026819210, true)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testScaleTo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (221) )}));
							if (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "src", 5744356, true)), "0")) {
								continue;
							}
							
							dec = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse(global::haxe.lang.Runtime.concat("-", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "src", 5744356, true))))) );
							global::utest.Assert.@equals(global::haxe.lang.Runtime.concat("-", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "exp", 5049501, true))), ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (dec) ).scaleTo(((int) (global::haxe.lang.Runtime.getField_f(test, "scale", 2026819210, true)) ))) ).toString(), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected -", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "src", 5744356, true))), " to be -"), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "exp", 5049501, true))), " when scaled to "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(test, "scale", 2026819210, true)) ))), " but got -"), ((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (dec) ).scaleTo(((int) (global::haxe.lang.Runtime.getField_f(test, "scale", 2026819210, true)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testScaleTo", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (226) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void testNegativePow() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx._Decimal.Decimal_Impl_.@equals(((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(10)) ).pow(-2), ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.01)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNegativePow", "thx.TestDecimal", "TestDecimal.hx"}, new int[]{1981972957}, new double[]{((double) (232) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1613546638:
					{
						this.divisionSize = ((int) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1613546638:
					{
						this.divisionSize = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 612078321:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNegativePow", 612078321)) );
					}
					
					
					case 567295091:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testScaleTo", 567295091)) );
					}
					
					
					case 912799388:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRound", 912799388)) );
					}
					
					
					case 1302994698:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertDecimalEquals", 1302994698)) );
					}
					
					
					case 707030723:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testString", 707030723)) );
					}
					
					
					case 827703867:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testComparison", 827703867)) );
					}
					
					
					case 1625090562:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSubtraction", 1625090562)) );
					}
					
					
					case 457610094:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAddition", 457610094)) );
					}
					
					
					case 1211773292:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEquality", 1211773292)) );
					}
					
					
					case 1514826057:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFloats", 1514826057)) );
					}
					
					
					case 1223543318:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testInts", 1223543318)) );
					}
					
					
					case 227805334:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMultiply", 227805334)) );
					}
					
					
					case 1217168287:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDivision", 1217168287)) );
					}
					
					
					case 1506245288:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testModulo", 1506245288)) );
					}
					
					
					case 2062397850:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testStringExp", 2062397850)) );
					}
					
					
					case 1345725012:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTrim", 1345725012)) );
					}
					
					
					case 43962972:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToBigInt", 43962972)) );
					}
					
					
					case 26061316:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "teardown", 26061316)) );
					}
					
					
					case 2049945213:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setup", 2049945213)) );
					}
					
					
					case 1613546638:
					{
						return this.divisionSize;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1613546638:
					{
						return ((double) (this.divisionSize) );
					}
					
					
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 612078321:
					{
						this.testNegativePow();
						break;
					}
					
					
					case 567295091:
					{
						this.testScaleTo();
						break;
					}
					
					
					case 912799388:
					{
						this.testRound();
						break;
					}
					
					
					case 1302994698:
					{
						this.assertDecimalEquals(((global::thx.bigint.DecimalImpl) (dynargs[0]) ), ((global::thx.bigint.DecimalImpl) (dynargs[1]) ), dynargs[2]);
						break;
					}
					
					
					case 707030723:
					{
						this.testString();
						break;
					}
					
					
					case 827703867:
					{
						this.testComparison();
						break;
					}
					
					
					case 1625090562:
					{
						this.testSubtraction();
						break;
					}
					
					
					case 457610094:
					{
						this.testAddition();
						break;
					}
					
					
					case 1211773292:
					{
						this.testEquality();
						break;
					}
					
					
					case 1514826057:
					{
						this.testFloats();
						break;
					}
					
					
					case 1223543318:
					{
						this.testInts();
						break;
					}
					
					
					case 227805334:
					{
						this.testMultiply();
						break;
					}
					
					
					case 1217168287:
					{
						this.testDivision();
						break;
					}
					
					
					case 1506245288:
					{
						this.testModulo();
						break;
					}
					
					
					case 2062397850:
					{
						this.testStringExp();
						break;
					}
					
					
					case 1345725012:
					{
						this.testTrim();
						break;
					}
					
					
					case 43962972:
					{
						this.testToBigInt();
						break;
					}
					
					
					case 26061316:
					{
						this.teardown();
						break;
					}
					
					
					case 2049945213:
					{
						this.setup();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("divisionSize");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestDecimal_testModulo_68__Fun : global::haxe.lang.Function {
		
		public TestDecimal_testModulo_68__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestDecimal_testModulo_68__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			unchecked {
				((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(1)) ).modulo(global::thx._Decimal.Decimal_Impl_.fromInt(0));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestDecimal_testDivision_87__Fun : global::haxe.lang.Function {
		
		public TestDecimal_testDivision_87__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestDecimal_testDivision_87__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			unchecked {
				((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(1)) ).divide(global::thx._Decimal.Decimal_Impl_.fromInt(0));
				return null;
			}
		}
		
		
	}
}


