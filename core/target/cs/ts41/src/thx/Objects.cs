// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Objects : global::haxe.lang.HxObject {
		
		public Objects(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Objects() {
			global::thx.Objects.__hx_ctor_thx_Objects(this);
		}
		
		
		public static void __hx_ctor_thx_Objects(global::thx.Objects __temp_me133) {
		}
		
		
		public static int compare(object a, object b) {
			int v = default(int);
			global::Array<object> fields = global::Reflect.fields(a);
			v = global::thx.Arrays.compare<object>(((global::Array<object>) (fields) ), ((global::Array<object>) (global::Reflect.fields(b)) ));
			if (( v != 0 )) {
				return v;
			}
			
			{
				int _g = 0;
				while (( _g < fields.length )) {
					string field = global::haxe.lang.Runtime.toString(fields[_g]);
					 ++ _g;
					v = global::thx.Dynamics.compare(global::Reflect.field(a, field), global::Reflect.field(b, field));
					if (( v != 0 )) {
						return v;
					}
					
				}
				
			}
			
			return 0;
		}
		
		
		public static bool isEmpty(object o) {
			return ( global::Reflect.fields(o).length == 0 );
		}
		
		
		public static bool exists(object o, string name) {
			return global::Reflect.hasField(o, name);
		}
		
		
		public static global::Array<object> fields(object o) {
			return global::Reflect.fields(o);
		}
		
		
		public static object combine(object first, object second) {
			object to = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{});
			{
				int _g = 0;
				global::Array<object> _g1 = global::Reflect.fields(first);
				while (( _g < _g1.length )) {
					string field = global::haxe.lang.Runtime.toString(_g1[_g]);
					 ++ _g;
					global::Reflect.setField(to, field, global::Reflect.field(first, field));
				}
				
			}
			
			{
				int _g2 = 0;
				global::Array<object> _g11 = global::Reflect.fields(second);
				while (( _g2 < _g11.length )) {
					string field1 = global::haxe.lang.Runtime.toString(_g11[_g2]);
					 ++ _g2;
					global::Reflect.setField(to, field1, global::Reflect.field(second, field1));
				}
				
			}
			
			return to;
		}
		
		
		public static object assign(object to, object @from, global::haxe.lang.Function replacef) {
			if (( null == replacef )) {
				replacef = ( (( global::thx.Objects_assign_82__Fun.__hx_current != null )) ? (global::thx.Objects_assign_82__Fun.__hx_current) : (global::thx.Objects_assign_82__Fun.__hx_current = ((global::thx.Objects_assign_82__Fun) (new global::thx.Objects_assign_82__Fun()) )) );
			}
			
			{
				int _g = 0;
				global::Array<object> _g1 = global::Reflect.fields(@from);
				while (( _g < _g1.length )) {
					string field1 = global::haxe.lang.Runtime.toString(_g1[_g]);
					 ++ _g;
					object newv1 = global::Reflect.field(@from, field1);
					if (global::Reflect.hasField(to, field1)) {
						global::Reflect.setField(to, field1, ((object) (replacef.__hx_invoke3_o(default(double), field1, default(double), global::Reflect.field(to, field1), default(double), newv1)) ));
					}
					else {
						global::Reflect.setField(to, field1, newv1);
					}
					
				}
				
			}
			
			return to;
		}
		
		
		public static object copyTo(object src, object dst, global::haxe.lang.Null<bool> cloneInstances) {
			bool __temp_cloneInstances131 = ( ( ! (cloneInstances.hasValue) ) ? (false) : ((cloneInstances).@value) );
			{
				int _g = 0;
				global::Array<object> _g1 = global::Reflect.fields(src);
				while (( _g < _g1.length )) {
					string field = global::haxe.lang.Runtime.toString(_g1[_g]);
					 ++ _g;
					object sv = global::thx.Dynamics.clone(global::Reflect.field(src, field), new global::haxe.lang.Null<bool>(__temp_cloneInstances131, true));
					object dv = global::Reflect.field(dst, field);
					if (( ( global::Reflect.isObject(sv) && global::haxe.lang.Runtime.typeEq(null, global::Type.getClass<object>(((object) (sv) ))) ) && (( global::Reflect.isObject(dv) && global::haxe.lang.Runtime.typeEq(null, global::Type.getClass<object>(((object) (dv) ))) )) )) {
						global::thx.Objects.copyTo(sv, dv, default(global::haxe.lang.Null<bool>));
					}
					else {
						global::Reflect.setField(dst, field, sv);
					}
					
				}
				
			}
			
			return dst;
		}
		
		
		public static T clone<T>(T src, global::haxe.lang.Null<bool> cloneInstances) {
			bool __temp_cloneInstances132 = ( ( ! (cloneInstances.hasValue) ) ? (false) : ((cloneInstances).@value) );
			return global::haxe.lang.Runtime.genericCast<T>(global::thx.Dynamics.clone(src, new global::haxe.lang.Null<bool>(__temp_cloneInstances132, true)));
		}
		
		
		public static global::haxe.ds.StringMap toMap(object o) {
			return ((global::haxe.ds.StringMap) (global::thx.Arrays.reduce<object, object>(((global::Array<object>) (global::thx.Objects.tuples(o)) ), ((global::haxe.lang.Function) (( (( global::thx.Objects_toMap_123__Fun.__hx_current != null )) ? (global::thx.Objects_toMap_123__Fun.__hx_current) : (global::thx.Objects_toMap_123__Fun.__hx_current = ((global::thx.Objects_toMap_123__Fun) (new global::thx.Objects_toMap_123__Fun()) )) )) ), ((object) (new global::haxe.ds.StringMap<object>()) ))) );
		}
		
		
		public static int size(object o) {
			return global::Reflect.fields(o).length;
		}
		
		
		public static string @string(object o) {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("{", global::Reflect.fields(o).map<object>(((global::haxe.lang.Function) (new global::thx.Objects_string_143__Fun(o)) )).@join(", ")), "}");
		}
		
		
		public static void stringImpl(object o, global::haxe.ds.ObjectMap<object, bool> cache) {
		}
		
		
		public static global::Array values(object o) {
			return global::Reflect.fields(o).map<object>(((global::haxe.lang.Function) (new global::thx.Objects_values_164__Fun(o)) ));
		}
		
		
		public static global::Array<object> tuples(object o) {
			return global::Reflect.fields(o).map<object>(((global::haxe.lang.Function) (new global::thx.Objects_tuples_171__Fun(o)) ));
		}
		
		
		public static bool hasPath(object o, string path) {
			global::Array<object> paths = global::haxe.lang.StringExt.split(path, ".");
			object current = o;
			{
				int _g = 0;
				while (( _g < paths.length )) {
					string currentPath = global::haxe.lang.Runtime.toString(paths[_g]);
					 ++ _g;
					if (global::thx.Strings.DIGITS.match(currentPath)) {
						global::haxe.lang.Null<int> index = global::Std.parseInt(currentPath);
						global::Array arr = ((global::Array) (( ((object) (current) ) as global::Array )) );
						if (( ( null == arr ) || ( global::haxe.lang.Runtime.compare(((int) (global::haxe.lang.Runtime.getField_f(arr, "length", 520590566, true)) ), (index).toDynamic()) <= 0 ) )) {
							return false;
						}
						
						current = arr[(index).@value];
					}
					else if (global::Reflect.hasField(current, currentPath)) {
						current = global::Reflect.field(current, currentPath);
					}
					else {
						return false;
					}
					
				}
				
			}
			
			return true;
		}
		
		
		public static bool hasPathValue(object o, string path) {
			return ( global::thx.Objects.getPath(o, path) != null );
		}
		
		
		public static object getPath(object o, string path) {
			global::Array<object> paths = global::haxe.lang.StringExt.split(path, ".");
			object current = o;
			{
				int _g = 0;
				while (( _g < paths.length )) {
					string currentPath = global::haxe.lang.Runtime.toString(paths[_g]);
					 ++ _g;
					if (global::thx.Strings.DIGITS.match(currentPath)) {
						global::haxe.lang.Null<int> index = global::Std.parseInt(currentPath);
						global::Array arr = ((global::Array) (( ((object) (current) ) as global::Array )) );
						if (( null == arr )) {
							return null;
						}
						
						current = arr[(index).@value];
					}
					else if (global::Reflect.hasField(current, currentPath)) {
						current = global::Reflect.field(current, currentPath);
					}
					else {
						return null;
					}
					
				}
				
			}
			
			return current;
		}
		
		
		public static global::haxe.ds.Option getPathOption(object o, string path) {
			object @value = ((object) (global::thx.Objects.getPath(o, path)) );
			if (( null == @value )) {
				return global::haxe.ds.Option.None;
			}
			else {
				return global::haxe.ds.Option.Some(@value);
			}
			
		}
		
		
		public static object getPathOr(object o, string path, object alt) {
			global::Array<object> paths = global::haxe.lang.StringExt.split(path, ".");
			object current = o;
			{
				int _g = 0;
				while (( _g < paths.length )) {
					string currentPath = global::haxe.lang.Runtime.toString(paths[_g]);
					 ++ _g;
					if (global::thx.Strings.DIGITS.match(currentPath)) {
						global::haxe.lang.Null<int> index = global::Std.parseInt(currentPath);
						global::Array arr = ((global::Array) (( ((object) (current) ) as global::Array )) );
						if (( null == arr )) {
							return null;
						}
						
						current = arr[(index).@value];
					}
					else if (global::Reflect.hasField(current, currentPath)) {
						current = global::Reflect.field(current, currentPath);
					}
					else {
						return alt;
					}
					
				}
				
			}
			
			return current;
		}
		
		
		public static object setPath<T>(object o, string path, T val) {
			unchecked {
				global::Array<object> paths = global::haxe.lang.StringExt.split(path, ".");
				object current = o;
				{
					int _g1 = 0;
					int _g = ( paths.length - 1 );
					while (( _g1 < _g )) {
						int i = _g1++;
						string currentPath = global::haxe.lang.Runtime.toString(paths[i]);
						string nextPath = global::haxe.lang.Runtime.toString(paths[( i + 1 )]);
						if (( global::thx.Strings.DIGITS.match(currentPath) || string.Equals(currentPath, "*") )) {
							global::haxe.lang.Null<int> index = ( (string.Equals(currentPath, "*")) ? (new global::haxe.lang.Null<int>(((int) (global::haxe.lang.Runtime.getField_f(((global::Array) (current) ), "length", 520590566, true)) ), true)) : (global::Std.parseInt(currentPath)) );
							if (( ((object) (global::haxe.lang.Runtime.callField(current, "__get", 1915412854, new global::Array<object>(new object[]{(index).toDynamic()}))) ) == null )) {
								if (( global::thx.Strings.DIGITS.match(nextPath) || string.Equals(nextPath, "*") )) {
									global::haxe.lang.Runtime.callField(current, "__set", 1916009602, new global::Array<object>(new object[]{(index).toDynamic(), new global::Array<object>(new object[]{})}));
								}
								else {
									global::haxe.lang.Runtime.callField(current, "__set", 1916009602, new global::Array<object>(new object[]{(index).toDynamic(), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{})}));
								}
								
							}
							
							current = ((object) (global::haxe.lang.Runtime.callField(current, "__get", 1915412854, new global::Array<object>(new object[]{(index).toDynamic()}))) );
						}
						else {
							if ( ! (global::Reflect.hasField(current, currentPath)) ) {
								if (( global::thx.Strings.DIGITS.match(nextPath) || string.Equals(nextPath, "*") )) {
									global::Reflect.setField(current, currentPath, new global::Array<object>(new object[]{}));
								}
								else {
									global::Reflect.setField(current, currentPath, new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}));
								}
								
							}
							
							current = global::Reflect.field(current, currentPath);
						}
						
					}
					
				}
				
				string tmp = global::haxe.lang.Runtime.toString(((global::Array<object>) (paths) )[( paths.length - 1 )]);
				if (global::thx.Strings.DIGITS.match(tmp)) {
					global::haxe.lang.Runtime.callField(current, "__set", 1916009602, new global::Array<object>(new object[]{(global::Std.parseInt(tmp)).toDynamic(), val}));
				}
				else if (string.Equals(tmp, "*")) {
					global::haxe.lang.Runtime.callField(((global::Array) (current) ), "push", 1247875546, new global::Array<object>(new object[]{val}));
				}
				else {
					global::Reflect.setField(current, tmp, val);
				}
				
				return o;
			}
		}
		
		
		public static object removePath(object o, string path) {
			global::Array<object> paths = global::haxe.lang.StringExt.split(path, ".");
			string target = global::haxe.lang.Runtime.toString((paths.pop()).toDynamic());
			try {
				object sub = global::thx.Arrays.reduce<object, object>(((global::Array<object>) (paths) ), ((global::haxe.lang.Function) (( (( global::thx.Objects_removePath_331__Fun.__hx_current != null )) ? (global::thx.Objects_removePath_331__Fun.__hx_current) : (global::thx.Objects_removePath_331__Fun.__hx_current = ((global::thx.Objects_removePath_331__Fun) (new global::thx.Objects_removePath_331__Fun()) )) )) ), ((object) (o) ));
				if (( null != sub )) {
					global::Reflect.deleteField(sub, target);
				}
				
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				{
					object e = __temp_catchall2;
				}
				
			}
			
			
			return o;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.Objects(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.Objects();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Objects_assign_82__Fun : global::haxe.lang.Function {
		
		public Objects_assign_82__Fun() : base(3, 0) {
		}
		
		
		public static global::thx.Objects_assign_82__Fun __hx_current;
		
		public override object __hx_invoke3_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3) {
			object newv = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float3) )) : (((object) (__fn_dyn3) )) );
			object oldv = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			string field = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return newv;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Objects_toMap_123__Fun : global::haxe.lang.Function {
		
		public Objects_toMap_123__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.Objects_toMap_123__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			global::haxe.ds.StringMap map = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.ds.StringMap) (((object) (__fn_float1) )) )) : (((global::haxe.ds.StringMap) (__fn_dyn1) )) );
			global::haxe.lang.Runtime.callField(map, "set", 5741474, new global::Array<object>(new object[]{global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(t, "_0", 21233, true)), ((object) (global::haxe.lang.Runtime.getField(t, "_1", 21234, true)) )}));
			return map;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Objects_string_143__Fun : global::haxe.lang.Function {
		
		public Objects_string_143__Fun(object o) : base(1, 0) {
			this.o = o;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string key = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			string v = global::haxe.lang.Runtime.toString(global::Reflect.field(this.o, key));
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", key), " : "), (( (( v is string )) ? (global::thx.Strings.quote(((string) (v) ))) : (global::thx.Dynamics.@string(v)) )));
		}
		
		
		public object o;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Objects_values_164__Fun : global::haxe.lang.Function {
		
		public Objects_values_164__Fun(object o) : base(1, 0) {
			this.o = o;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string key = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::Reflect.field(this.o, key);
		}
		
		
		public object o;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Objects_tuples_171__Fun : global::haxe.lang.Function {
		
		public Objects_tuples_171__Fun(object o) : base(1, 0) {
			this.o = o;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string key = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			object __temp_stmt2 = null;
			{
				object __temp_odecl1 = ((object) (global::Reflect.field(this.o, key)) );
				__temp_stmt2 = new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{key, __temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (__temp_stmt2) );
		}
		
		
		public object o;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Objects_removePath_331__Fun : global::haxe.lang.Function {
		
		public Objects_removePath_331__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.Objects_removePath_331__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			string nextPath = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) );
			object existing = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			if (string.Equals(nextPath, "*")) {
				return ((object) (global::haxe.lang.Runtime.callField(((global::Array) (existing) ), "pop", 5594513, null)) );
			}
			else if (global::thx.Strings.DIGITS.match(nextPath)) {
				return ((object) (global::haxe.lang.Runtime.callField(existing, "__get", 1915412854, new global::Array<object>(new object[]{(global::Std.parseInt(nextPath)).toDynamic()}))) );
			}
			else {
				return global::Reflect.field(existing, nextPath);
			}
			
		}
		
		
	}
}


