// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestTime : global::haxe.lang.HxObject {
		
		public TestTime(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestTime(int i) {
			global::thx.TestTime.__hx_ctor_thx_TestTime(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestTime(global::thx.TestTime __temp_me142, int i) {
			__temp_me142.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestTime(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestTime(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testBasics() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					long time = global::thx._Time.Time_Impl_.create(249, new global::haxe.lang.Null<int>(8, true), new global::haxe.lang.Null<int>(7, true), new global::haxe.lang.Null<int>(6, true));
					long x = ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
					if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(10, ((int) (((long) (x) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
					long x1 = ((long) (( ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
					if (( ((bool) (( ((long) (x1) ) < -2147483648 )) ) || ((bool) (( ((long) (x1) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(9, ((int) (((long) (x1) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
					long x2 = ((long) (( ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
					if (( ((bool) (( ((long) (x2) ) < -2147483648 )) ) || ((bool) (( ((long) (x2) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(8, ((int) (((long) (x2) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
					long x3 = ((long) (( ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
					if (( ((bool) (( ((long) (x3) ) < -2147483648 )) ) || ((bool) (( ((long) (x3) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(7, ((int) (((long) (x3) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					long x4 = ((long) (( ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64) ) )) );
					if (( ((bool) (( ((long) (x4) ) < -2147483648 )) ) || ((bool) (( ((long) (x4) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(6, ((int) (((long) (x4) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
					long x5 = ((long) (( ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMicrosecondI64) ) )) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.tenThousandI64) ) )) );
					if (( ((bool) (( ((long) (x5) ) < -2147483648 )) ) || ((bool) (( ((long) (x5) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(6000, ((int) (((long) (x5) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
					long x6 = ((long) (( ((long) (time) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
					if (( ((bool) (( ((long) (x6) ) < -2147483648 )) ) || ((bool) (( ((long) (x6) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(60000, ((int) (((long) (x6) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
					long x7 = ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
					if (( ((bool) (( ((long) (x7) ) < -2147483648 )) ) || ((bool) (( ((long) (x7) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(10, ((int) (((long) (x7) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
					long x8 = ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) );
					if (( ((bool) (( ((long) (x8) ) < -2147483648 )) ) || ((bool) (( ((long) (x8) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(249, ((int) (((long) (x8) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
					long x9 = ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) );
					if (( ((bool) (( ((long) (x9) ) < -2147483648 )) ) || ((bool) (( ((long) (x9) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(14948, ((int) (((long) (x9) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
					long x10 = ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
					if (( ((bool) (( ((long) (x10) ) < -2147483648 )) ) || ((bool) (( ((long) (x10) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(896887, ((int) (((long) (x10) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
					long x11 = ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) );
					if (( ((bool) (( ((long) (x11) ) < -2147483648 )) ) || ((bool) (( ((long) (x11) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(896887006, ((int) (((long) (x11) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
					global::utest.Assert.@equals("896887006000", global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMicrosecondI64) ) )) ))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
				}
				
			}
		}
		
		
		public virtual void testFromString() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					long time = global::thx._Time.Time_Impl_.fromString("125:55:45.123");
					long x = ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
					if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(5, ((int) (((long) (x) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
					global::utest.Assert.@equals("125", global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
					long x1 = ((long) (( ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
					if (( ((bool) (( ((long) (x1) ) < -2147483648 )) ) || ((bool) (( ((long) (x1) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(5, ((int) (((long) (x1) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
					long x2 = ((long) (( ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
					if (( ((bool) (( ((long) (x2) ) < -2147483648 )) ) || ((bool) (( ((long) (x2) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(55, ((int) (((long) (x2) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					long x3 = ((long) (( ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
					if (( ((bool) (( ((long) (x3) ) < -2147483648 )) ) || ((bool) (( ((long) (x3) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(45, ((int) (((long) (x3) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
					long x4 = ((long) (( ((long) (( ((long) (time) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64) ) )) );
					if (( ((bool) (( ((long) (x4) ) < -2147483648 )) ) || ((bool) (( ((long) (x4) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					global::utest.Assert.@equals(123, ((int) (((long) (x4) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					global::utest.Assert.@equals("125:55:45.123", global::thx._Time.Time_Impl_.toString(time), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
					global::utest.Assert.@equals("89:25:30.005", global::thx._Time.Time_Impl_.toString(global::thx._Time.Time_Impl_.fromString("3.17:25:30.005")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
					global::utest.Assert.@equals("-89:25:30.05", global::thx._Time.Time_Impl_.toString(global::thx._Time.Time_Impl_.fromString("-3.17:25:30.05")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestTime", "TestTime.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1952928973:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromString", 1952928973)) );
					}
					
					
					case 1847555063:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBasics", 1847555063)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1952928973:
					{
						this.testFromString();
						break;
					}
					
					
					case 1847555063:
					{
						this.testBasics();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


