// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Bools : global::haxe.lang.HxObject {
		
		public Bools(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Bools() {
			global::thx.Bools.__hx_ctor_thx_Bools(this);
		}
		
		
		public static void __hx_ctor_thx_Bools(global::thx.Bools __temp_me75) {
		}
		
		
		public static int compare(bool a, bool b) {
			unchecked {
				if (( a == b )) {
					return 0;
				}
				else if (a) {
					return -1;
				}
				else {
					return 1;
				}
				
			}
		}
		
		
		public static int toInt(bool v) {
			unchecked {
				if (v) {
					return 1;
				}
				else {
					return 0;
				}
				
			}
		}
		
		
		public static bool canParse(string v) {
			string _g = v.ToLowerInvariant();
			if (string.Equals(_g, null)) {
				return true;
			}
			else {
				switch (_g) {
					case "0":
					case "1":
					case "false":
					case "off":
					case "on":
					case "true":
					{
						return true;
					}
					
					
					default:
					{
						return false;
					}
					
				}
				
			}
			
		}
		
		
		public static bool parse(string v) {
			string _g = v.ToLowerInvariant();
			if (string.Equals(_g, null)) {
				return false;
			}
			else {
				switch (_g) {
					case "1":
					case "on":
					case "true":
					{
						return true;
					}
					
					
					case "0":
					case "false":
					case "off":
					{
						return false;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("unable to parse \"", _g), "\""));
					}
					
				}
				
			}
			
		}
		
		
		public static bool xor(bool a, bool b) {
			return ( a != b );
		}
		
		
		public static global::haxe.ds.Option option<A>(bool cond, A a) {
			if (cond) {
				return global::haxe.ds.Option.Some(a);
			}
			else {
				return global::haxe.ds.Option.None;
			}
			
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.Bools(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.Bools();
		}
		
		
	}
}


