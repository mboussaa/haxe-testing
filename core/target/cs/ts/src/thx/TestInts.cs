// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestInts : global::haxe.lang.HxObject {
		
		public TestInts(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestInts() {
			global::thx.TestInts.__hx_ctor_thx_TestInts(this);
		}
		
		
		public static void __hx_ctor_thx_TestInts(global::thx.TestInts __temp_me205) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestInts(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestInts();
		}
		
		
		public virtual void testRange() {
			unchecked {
				global::Array<int> range = global::thx.Ints.range(2, new global::haxe.lang.Null<int>(7, true), new global::haxe.lang.Null<int>(1, true));
				global::utest.Assert.same(new global::Array<object>(new object[]{2, 3, 4, 5, 6}), range, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRange", "thx.TestInts", "TestInts.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
				range = global::thx.Ints.range(2, new global::haxe.lang.Null<int>(7, true), new global::haxe.lang.Null<int>(2, true));
				global::utest.Assert.same(new global::Array<object>(new object[]{2, 4, 6}), range, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRange", "thx.TestInts", "TestInts.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
				range = global::thx.Ints.range(2, new global::haxe.lang.Null<int>(7, true), new global::haxe.lang.Null<int>(3, true));
				global::utest.Assert.same(new global::Array<object>(new object[]{2, 5}), range, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRange", "thx.TestInts", "TestInts.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
				range = global::thx.Ints.range(7, new global::haxe.lang.Null<int>(2, true), new global::haxe.lang.Null<int>(-2, true));
				global::utest.Assert.same(new global::Array<object>(new object[]{7, 5, 3}), range, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRange", "thx.TestInts", "TestInts.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
			}
		}
		
		
		public virtual void testParse() {
			unchecked {
				global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"-50"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (-50) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"50"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (50) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"1"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"+1"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"-1"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (-1) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{" 1 "}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{" 1,234"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{" 0xF"}, new int[]{98, 101}, new double[]{((double) (16) ), ((double) (15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"17"}, new int[]{98, 101}, new double[]{((double) (8) ), ((double) (15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"015"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"1111"}, new int[]{98, 101}, new double[]{((double) (2) ), ((double) (15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"15*3"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"15e2"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"15px"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"12"}, new int[]{98, 101}, new double[]{((double) (13) ), ((double) (15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"-0F"}, new int[]{98, 101}, new double[]{((double) (16) ), ((double) (-15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"-0XF"}, new int[]{98, 101}, new double[]{((double) (16) ), ((double) (-15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{" -17"}, new int[]{98, 101}, new double[]{((double) (8) ), ((double) (-15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{" -15"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (-15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"-1111"}, new int[]{98, 101}, new double[]{((double) (2) ), ((double) (-15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"-15e1"}, new int[]{98, 101}, new double[]{((double) (10) ), ((double) (-15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"-12"}, new int[]{98, 101}, new double[]{((double) (13) ), ((double) (-15) )}), new global::haxe.lang.DynamicObject(new int[]{116}, new object[]{"0e0"}, new int[]{98, 101}, new double[]{((double) (16) ), ((double) (224) )})});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						object test = tests[_g];
						 ++ _g;
						global::utest.Assert.isTrue(global::thx.Ints.canParse(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "t", 116, true))), global::haxe.lang.Runtime.concat("Ints.parse should not be able to parse ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "t", 116, true))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testParse", "thx.TestInts", "TestInts.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
						global::utest.Assert.@equals(((int) (global::haxe.lang.Runtime.getField_f(test, "e", 101, true)) ), (global::thx.Ints.parse(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "t", 116, true)), new global::haxe.lang.Null<int>(((int) (global::haxe.lang.Runtime.getField_f(test, "b", 98, true)) ), true))).toDynamic(), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(test, "e", 101, true)) ))), " converting \""), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "t", 116, true))), "\" with base "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(test, "b", 98, true)) ))), " but got "), global::haxe.lang.Runtime.toString((global::thx.Ints.parse(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "t", 116, true)), new global::haxe.lang.Null<int>(((int) (global::haxe.lang.Runtime.getField_f(test, "b", 98, true)) ), true))).toDynamic())), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testParse", "thx.TestInts", "TestInts.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testToString() {
			unchecked {
				global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{101}, new object[]{"1010"}, new int[]{98, 116}, new double[]{((double) (2) ), ((double) (10) )}), new global::haxe.lang.DynamicObject(new int[]{101}, new object[]{"12"}, new int[]{98, 116}, new double[]{((double) (8) ), ((double) (10) )}), new global::haxe.lang.DynamicObject(new int[]{101}, new object[]{"10"}, new int[]{98, 116}, new double[]{((double) (10) ), ((double) (10) )}), new global::haxe.lang.DynamicObject(new int[]{101}, new object[]{"a"}, new int[]{98, 116}, new double[]{((double) (16) ), ((double) (10) )})});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						object test = tests[_g];
						 ++ _g;
						global::utest.Assert.@equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(test, "e", 101, true)), global::thx.Ints.toString(((int) (global::haxe.lang.Runtime.getField_f(test, "t", 116, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(test, "b", 98, true)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToString", "thx.TestInts", "TestInts.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 729151262:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToString", 729151262)) );
					}
					
					
					case 106417793:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testParse", 106417793)) );
					}
					
					
					case 757195787:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRange", 757195787)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 729151262:
					{
						this.testToString();
						break;
					}
					
					
					case 106417793:
					{
						this.testParse();
						break;
					}
					
					
					case 757195787:
					{
						this.testRange();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


