// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestDateTimeUtc : global::haxe.lang.HxObject {
		
		public TestDateTimeUtc(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestDateTimeUtc() {
			global::thx.TestDateTimeUtc.__hx_ctor_thx_TestDateTimeUtc(this);
		}
		
		
		public static void __hx_ctor_thx_TestDateTimeUtc(global::thx.TestDateTimeUtc __temp_me190) {
			unchecked {
				__temp_me190.tomorrow = global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2015, 7, 27, new global::haxe.lang.Null<int>(21, true), new global::haxe.lang.Null<int>(40, true), new global::haxe.lang.Null<int>(30, true), new global::haxe.lang.Null<int>(123, true));
				__temp_me190.date = global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2015, 7, 26, new global::haxe.lang.Null<int>(21, true), new global::haxe.lang.Null<int>(40, true), new global::haxe.lang.Null<int>(30, true), new global::haxe.lang.Null<int>(0, true));
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestDateTimeUtc(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestDateTimeUtc();
		}
		
		
		public long date;
		
		public long tomorrow;
		
		public virtual void testCreate() {
			unchecked {
				global::utest.Assert.@equals(2015, global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 2015 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR))), " for year"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
				global::utest.Assert.@equals(7, global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 7 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH))), " for month"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
				global::utest.Assert.@equals(26, global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 26 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this.date) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY))), " for day"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
				global::utest.Assert.@equals(21, global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this.date), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 21 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this.date))), " for hour"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
				global::utest.Assert.@equals(40, global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this.date), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 40 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this.date))), " for minute"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
				global::utest.Assert.@equals(30, global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this.date), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 30 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this.date))), " for second"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
				global::utest.Assert.@equals(123, global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this.tomorrow), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 123 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this.tomorrow))), " for millisecond"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
				global::utest.Assert.@equals(123000, global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_microsecond(this.tomorrow), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 123 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_microsecond(this.tomorrow))), " for microsecond"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
				global::utest.Assert.@equals(1230000, global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(this.tomorrow), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 123 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(this.tomorrow))), " for tickInSecond"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
				global::utest.Assert.@equals(((int) (0) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this.date), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
			}
		}
		
		
		public virtual void testToString() {
			unchecked {
				global::utest.Assert.@equals("2015-07-26T21:40:30Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(this.date), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToString", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
				global::utest.Assert.@equals("1-01-01T00:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (0) ))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToString", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
			}
		}
		
		
		public virtual void testOverflowing() {
			unchecked {
				global::utest.Assert.@equals("2014-12-01T00:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 12, 1, default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
				global::utest.Assert.@equals("2015-04-01T00:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 16, 1, default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
				global::utest.Assert.@equals("2013-10-01T00:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, -2, 1, default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
				global::utest.Assert.@equals("2014-03-04T00:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 2, 32, default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
				global::utest.Assert.@equals("2013-12-31T00:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 1, 0, default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
				global::utest.Assert.@equals("2014-02-02T02:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 2, 1, new global::haxe.lang.Null<int>(26, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
				global::utest.Assert.@equals("2013-12-31T23:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 1, 1, new global::haxe.lang.Null<int>(-1, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
				global::utest.Assert.@equals("2014-02-01T01:05:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 2, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(65, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (51) )}));
				global::utest.Assert.@equals("2013-12-31T23:59:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 1, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(-1, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (52) )}));
				global::utest.Assert.@equals("2014-02-01T00:01:05Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 2, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(65, true), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
				global::utest.Assert.@equals("2013-12-31T23:59:59Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 1, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(-1, true), default(global::haxe.lang.Null<int>))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOverflowing", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
			}
		}
		
		
		public virtual void testEquals() {
			unchecked {
				global::utest.Assert.isTrue(( ((long) (this.date) ) == ((long) (this.date) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
				global::utest.Assert.isTrue(( ((long) (this.date) ) != ((long) (this.tomorrow) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
			}
		}
		
		
		public virtual void testCompare() {
			unchecked {
				long self = this.date;
				long that = this.date;
				long a = ((long) (self) );
				long b = ((long) (that) );
				global::utest.Assert.isFalse(( (( (((bool) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (65) )}));
				long self1 = this.date;
				long that1 = this.date;
				long a1 = ((long) (self1) );
				long b1 = ((long) (that1) );
				global::utest.Assert.isTrue(( (( (((bool) (( ((long) (a1) ) < ((long) (b1) ) )) )) ? (-1) : (( (((bool) (( ((long) (a1) ) > ((long) (b1) ) )) )) ? (1) : (0) )) )) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (66) )}));
				long self2 = this.date;
				long that2 = this.date;
				long a2 = ((long) (self2) );
				long b2 = ((long) (that2) );
				global::utest.Assert.isFalse(( (( (((bool) (( ((long) (a2) ) < ((long) (b2) ) )) )) ? (-1) : (( (((bool) (( ((long) (a2) ) > ((long) (b2) ) )) )) ? (1) : (0) )) )) < 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
				long self3 = this.date;
				long that3 = this.date;
				long a3 = ((long) (self3) );
				long b3 = ((long) (that3) );
				global::utest.Assert.isTrue(( (( (((bool) (( ((long) (a3) ) < ((long) (b3) ) )) )) ? (-1) : (( (((bool) (( ((long) (a3) ) > ((long) (b3) ) )) )) ? (1) : (0) )) )) <= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (68) )}));
				long self4 = this.date;
				long that4 = this.tomorrow;
				long a4 = ((long) (self4) );
				long b4 = ((long) (that4) );
				global::utest.Assert.isFalse(( (( (((bool) (( ((long) (a4) ) < ((long) (b4) ) )) )) ? (-1) : (( (((bool) (( ((long) (a4) ) > ((long) (b4) ) )) )) ? (1) : (0) )) )) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
				long self5 = this.date;
				long that5 = this.tomorrow;
				long a5 = ((long) (self5) );
				long b5 = ((long) (that5) );
				global::utest.Assert.isFalse(( (( (((bool) (( ((long) (a5) ) < ((long) (b5) ) )) )) ? (-1) : (( (((bool) (( ((long) (a5) ) > ((long) (b5) ) )) )) ? (1) : (0) )) )) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (71) )}));
				long self6 = this.date;
				long that6 = this.tomorrow;
				long a6 = ((long) (self6) );
				long b6 = ((long) (that6) );
				global::utest.Assert.isTrue(( (( (((bool) (( ((long) (a6) ) < ((long) (b6) ) )) )) ? (-1) : (( (((bool) (( ((long) (a6) ) > ((long) (b6) ) )) )) ? (1) : (0) )) )) < 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (72) )}));
				long self7 = this.date;
				long that7 = this.tomorrow;
				long a7 = ((long) (self7) );
				long b7 = ((long) (that7) );
				global::utest.Assert.isTrue(( (( (((bool) (( ((long) (a7) ) < ((long) (b7) ) )) )) ? (-1) : (( (((bool) (( ((long) (a7) ) > ((long) (b7) ) )) )) ? (1) : (0) )) )) <= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (73) )}));
				long self8 = this.tomorrow;
				long that8 = this.date;
				long a8 = ((long) (self8) );
				long b8 = ((long) (that8) );
				global::utest.Assert.isTrue(( (( (((bool) (( ((long) (a8) ) < ((long) (b8) ) )) )) ? (-1) : (( (((bool) (( ((long) (a8) ) > ((long) (b8) ) )) )) ? (1) : (0) )) )) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (75) )}));
				long self9 = this.tomorrow;
				long that9 = this.date;
				long a9 = ((long) (self9) );
				long b9 = ((long) (that9) );
				global::utest.Assert.isTrue(( (( (((bool) (( ((long) (a9) ) < ((long) (b9) ) )) )) ? (-1) : (( (((bool) (( ((long) (a9) ) > ((long) (b9) ) )) )) ? (1) : (0) )) )) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (76) )}));
				long self10 = this.tomorrow;
				long that10 = this.date;
				long a10 = ((long) (self10) );
				long b10 = ((long) (that10) );
				global::utest.Assert.isFalse(( (( (((bool) (( ((long) (a10) ) < ((long) (b10) ) )) )) ? (-1) : (( (((bool) (( ((long) (a10) ) > ((long) (b10) ) )) )) ? (1) : (0) )) )) < 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
				long self11 = this.tomorrow;
				long that11 = this.date;
				long a11 = ((long) (self11) );
				long b11 = ((long) (that11) );
				global::utest.Assert.isFalse(( (( (((bool) (( ((long) (a11) ) < ((long) (b11) ) )) )) ? (-1) : (( (((bool) (( ((long) (a11) ) > ((long) (b11) ) )) )) ? (1) : (0) )) )) <= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
			}
		}
		
		
		public virtual void testFromToDate() {
			unchecked {
				global::Date d = new global::Date(((global::System.DateTime) (new global::System.DateTime(((long) (this.date) ))) ));
				global::utest.Assert.isTrue(( ((long) (this.date) ) == ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromDate(d)) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(this.date)), " but got "), global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromDate(d))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToDate", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
			}
		}
		
		
		public virtual void testFromToTime() {
			unchecked {
				long date2 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromTime(global::thx.Int64s.toFloat(((long) (( (((long) (( ((long) (this.date) ) - ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks) ) )) )) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) )));
				global::utest.Assert.isTrue(( ((long) (this.date) ) == ((long) (date2) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(this.date)), " but got "), global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(date2)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToTime", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
			}
		}
		
		
		public virtual void testFromToString() {
			unchecked {
				string d = global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(this.date);
				global::utest.Assert.isTrue(( ((long) (this.date) ) == ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString(d)) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (94) )}));
				global::utest.Assert.@equals("-1-07-27T00:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("0-06-07")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (96) )}));
				global::utest.Assert.@equals("-1-06-07T00:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("-1-06-07")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (97) )}));
				global::utest.Assert.@equals("1-06-07T00:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("1-06-07")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (98) )}));
				global::utest.Assert.@equals("-2014-01-01T00:00:00Z", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("-2014-01-01")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
			}
		}
		
		
		public virtual void testAdd() {
			unchecked {
				long d = global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(global::thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(((long) (this.date) ), 24), 9)) ), ((double) (10) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerDay)) ), ((double) (7) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour)) ), ((double) (10) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute)) ), ((double) (7) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond)) ), ((double) (7) ), 1);
				global::utest.Assert.isTrue(( ((long) (d) ) == ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2018-05-07 04:50:37.007")) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", "2018-05-07 04:50:37.007"), " but got "), global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(d)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAdd", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (112) )}));
			}
		}
		
		
		public virtual void testNow() {
			unchecked {
				long @ref = global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2016-05-24T09:02:47Z");
				long date = global::thx._DateTimeUtc.DateTimeUtc_Impl_.now();
				global::utest.Assert.isTrue(global::thx._DateTimeUtc.DateTimeUtc_Impl_.nearEqualsTo(date, @ref, global::thx._Time.Time_Impl_.create(0, new global::haxe.lang.Null<int>(10, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(@ref)), " but got "), global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(date)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNow", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (118) )}));
			}
		}
		
		
		public virtual void testSnapNext() {
			unchecked {
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:07:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:10"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (122) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:05:50"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (123) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 11:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:10:10"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (124) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 09:50:10"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (125) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-02 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (126) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2013-12-31 20:00:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (127) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-21 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-17 11:00:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (128) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-21 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (129) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-12 00:00:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (130) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-05-12 00:00:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (132) )}));
				this.assertSnapNext(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (133) )}));
			}
		}
		
		
		public virtual void testSnapPrev() {
			unchecked {
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:10"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (137) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:05:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:05:50"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (138) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:10:10"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (139) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 09:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 09:50:10"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (140) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (141) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2013-12-31 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2013-12-31 20:00:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (142) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-14 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-17 11:00:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (143) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-14 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (144) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-12 00:00:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (145) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (146) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-05-12 00:00:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (147) )}));
				this.assertSnapPrev(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (148) )}));
			}
		}
		
		
		public virtual void testSnapTo() {
			unchecked {
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:10"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (152) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:06:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:05:50"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (153) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:10:10"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (154) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 09:50:10"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (155) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 10:00:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (156) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2013-12-31 20:00:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (157) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-14 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-17 11:00:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (158) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-21 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (159) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-12 00:00:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (160) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (161) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-05-12 00:00:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (162) )}));
				this.assertSnapTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2015-01-01 00:00:00"), global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromString("2014-12-18 00:00:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTimeUtc", "TestDateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (163) )}));
			}
		}
		
		
		public virtual void assertSnapTo(long expected, long date, global::thx.TimePeriod period, object pos) {
			long t = global::thx._DateTimeUtc.DateTimeUtc_Impl_.snapTo(date, period);
			global::utest.Assert.isTrue(( ((long) (expected) ) == ((long) (t) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(date)), " to snap to "), global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(expected)), " for "), global::Std.@string(period)), " but it is "), global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(t)), pos);
		}
		
		
		public virtual void assertSnapPrev(long expected, long date, global::thx.TimePeriod period, object pos) {
			long t = global::thx._DateTimeUtc.DateTimeUtc_Impl_.snapPrev(date, period);
			global::utest.Assert.isTrue(( ((long) (expected) ) == ((long) (t) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(date)), " to snap before "), global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(expected)), " for "), global::Std.@string(period)), " but it is "), global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(t)), pos);
		}
		
		
		public virtual void assertSnapNext(long expected, long date, global::thx.TimePeriod period, object pos) {
			long t = global::thx._DateTimeUtc.DateTimeUtc_Impl_.snapNext(date, period);
			global::utest.Assert.isTrue(( ((long) (expected) ) == ((long) (t) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(date)), " to snap after "), global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(expected)), " for "), global::Std.@string(period)), " but it is "), global::thx._DateTimeUtc.DateTimeUtc_Impl_.toString(t)), pos);
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1018962181:
					{
						this.tomorrow = ((long) (@value) );
						return @value;
					}
					
					
					case 1113806382:
					{
						this.date = ((long) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 325004611:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapNext", 325004611)) );
					}
					
					
					case 347825987:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapPrev", 347825987)) );
					}
					
					
					case 2122013131:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapTo", 2122013131)) );
					}
					
					
					case 713395287:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapTo", 713395287)) );
					}
					
					
					case 2107659471:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapPrev", 2107659471)) );
					}
					
					
					case 2084838095:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapNext", 2084838095)) );
					}
					
					
					case 1036142564:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNow", 1036142564)) );
					}
					
					
					case 1035493615:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAdd", 1035493615)) );
					}
					
					
					case 952497064:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromToString", 952497064)) );
					}
					
					
					case 1710056228:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromToTime", 1710056228)) );
					}
					
					
					case 1532226885:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromToDate", 1532226885)) );
					}
					
					
					case 1077020275:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCompare", 1077020275)) );
					}
					
					
					case 1491547185:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEquals", 1491547185)) );
					}
					
					
					case 30608302:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOverflowing", 30608302)) );
					}
					
					
					case 729151262:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToString", 729151262)) );
					}
					
					
					case 352562414:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCreate", 352562414)) );
					}
					
					
					case 1018962181:
					{
						return this.tomorrow;
					}
					
					
					case 1113806382:
					{
						return this.date;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 325004611:
					{
						this.assertSnapNext(((long) (dynargs[0]) ), ((long) (dynargs[1]) ), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 347825987:
					{
						this.assertSnapPrev(((long) (dynargs[0]) ), ((long) (dynargs[1]) ), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 2122013131:
					{
						this.assertSnapTo(((long) (dynargs[0]) ), ((long) (dynargs[1]) ), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 713395287:
					{
						this.testSnapTo();
						break;
					}
					
					
					case 2107659471:
					{
						this.testSnapPrev();
						break;
					}
					
					
					case 2084838095:
					{
						this.testSnapNext();
						break;
					}
					
					
					case 1036142564:
					{
						this.testNow();
						break;
					}
					
					
					case 1035493615:
					{
						this.testAdd();
						break;
					}
					
					
					case 952497064:
					{
						this.testFromToString();
						break;
					}
					
					
					case 1710056228:
					{
						this.testFromToTime();
						break;
					}
					
					
					case 1532226885:
					{
						this.testFromToDate();
						break;
					}
					
					
					case 1077020275:
					{
						this.testCompare();
						break;
					}
					
					
					case 1491547185:
					{
						this.testEquals();
						break;
					}
					
					
					case 30608302:
					{
						this.testOverflowing();
						break;
					}
					
					
					case 729151262:
					{
						this.testToString();
						break;
					}
					
					
					case 352562414:
					{
						this.testCreate();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("tomorrow");
			baseArr.push("date");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


