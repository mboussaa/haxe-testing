// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBigInt : global::haxe.lang.HxObject {
		
		public TestBigInt(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestBigInt() {
			global::thx.TestBigInt.__hx_ctor_thx_TestBigInt(this);
		}
		
		
		public static void __hx_ctor_thx_TestBigInt(global::thx.TestBigInt __temp_me183) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestBigInt(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestBigInt();
		}
		
		
		public virtual void testIssue82() {
			unchecked {
				global::thx.bigint.BigIntImpl s = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(101)) );
				global::thx.bigint.BigIntImpl b = new global::thx.bigint.Big(global::thx.bigint.Bigs.smallToArray(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("100", 10)) ).toInt()), false);
				global::thx.bigint.BigIntImpl r = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s) ).subtract(b)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s) ).subtract(b)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (s) ).toString()), " - "), ((global::thx.bigint.BigIntImpl) (b) ).toString()), " to be equal 1 but it is "), ((global::thx.bigint.BigIntImpl) (r) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIssue82", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (15) )}));
				global::thx.bigint.BigIntImpl s1 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(101)) );
				global::thx.bigint.BigIntImpl b1 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10)) );
				b1 = ((global::thx.bigint.BigIntImpl) (b1) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) ));
				global::thx.bigint.BigIntImpl r1 = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s1) ).subtract(b1)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s1) ).subtract(b1)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (s1) ).toString()), " - "), ((global::thx.bigint.BigIntImpl) (b1) ).toString()), " to be equal 1 but it is "), ((global::thx.bigint.BigIntImpl) (r1) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIssue82", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
			}
		}
		
		
		public virtual void testFromInt64() {
			unchecked {
				global::Array<long> values = new global::Array<long>(new long[]{global::thx.Int64s.minValue, ((long) (-1) ), ((long) (0) ), ((long) (1) ), global::thx.Int64s.maxValue});
				{
					int _g = 0;
					while (( _g < values.length )) {
						long @value = values[_g];
						 ++ _g;
						global::thx.bigint.BigIntImpl r = global::thx.bigint.Bigs.fromInt64(@value);
						long i = global::thx.bigint.Bigs.toInt64(((global::thx.bigint.BigIntImpl) (r) ));
						global::utest.Assert.isTrue(( ((long) (i) ) == ((long) (@value) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Int64 parsed as ", ((global::thx.bigint.BigIntImpl) (r) ).toString()), " and converted to "), (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (i) ))))), " but expected "), (global::haxe.lang.Runtime.concat("", global::Std.@string(((long) (@value) ))))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromInt64", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testLcmAndGcd() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(global::thx._BigInt.BigInt_Impl_.lcm(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(21)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(6)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(42)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLcmAndGcd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (34) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(global::thx._BigInt.BigInt_Impl_.gcd(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(42)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(56)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(14)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLcmAndGcd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(global::thx._BigInt.BigInt_Impl_.gcd(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(56)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(56)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLcmAndGcd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(global::thx._BigInt.BigInt_Impl_.gcd(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(42)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(42)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLcmAndGcd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(global::thx._BigInt.BigInt_Impl_.gcd(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(17)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(103)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLcmAndGcd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
			}
		}
		
		
		public virtual void testIncrements() {
			unchecked {
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx._BigInt.BigInt_Impl_.zero) ).isZero(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIncrements", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
				global::thx.bigint.BigIntImpl a = global::thx._BigInt.BigInt_Impl_.zero;
				a = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).@add(global::thx.bigint.Small.one)) );
				global::thx.bigint.BigIntImpl b = ((global::thx.bigint.BigIntImpl) (a) );
				global::thx.bigint.BigIntImpl v = ((global::thx.bigint.BigIntImpl) (a) );
				a = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).@add(global::thx.bigint.Small.one)) );
				global::thx.bigint.BigIntImpl c = ((global::thx.bigint.BigIntImpl) (v) );
				a = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).subtract(global::thx.bigint.Small.one)) );
				global::thx.bigint.BigIntImpl d = ((global::thx.bigint.BigIntImpl) (a) );
				global::thx.bigint.BigIntImpl v1 = ((global::thx.bigint.BigIntImpl) (a) );
				a = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).subtract(global::thx.bigint.Small.one)) );
				global::thx.bigint.BigIntImpl e = ((global::thx.bigint.BigIntImpl) (v1) );
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx._BigInt.BigInt_Impl_.zero) ).isZero(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIncrements", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(b, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIncrements", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(c, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIncrements", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(d, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIncrements", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (51) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(e, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIncrements", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (52) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(a, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIncrements", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
			}
		}
		
		
		public virtual void testCanHandleLargeNumbers() {
			unchecked {
				global::thx.bigint.BigIntImpl tenFactorial = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("3628800", 10)) );
				global::thx.bigint.BigIntImpl hundredFactorial = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000", 10)) );
				global::thx.bigint.BigIntImpl threeToTenThousand = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("16313501853426258743032567291811547168121324535825379939348203261918257308143190787480155630847848309673252045223235795433405582999177203852381479145368112501453192355166224391025423628843556686559659645012014177448275529990373274425446425751235537341867387607813619937225616872862016504805593174059909520461668500663118926911571773452255850626968526251879139867085080472539640933730243410152186914328917354576854457274195562218013337745628502470673059426999114202540773175988199842487276183685299388927825296786440252999444785694183675323521704432195785806270123388382931770198990841300861506996108944782065015163410344894945809337689156807686673462563038164792190665340124344133980763205594364754963451564072340502606377790585114123814919001637177034457385019939060232925194471114235892978565322415628344142184842892083466227875760501276009801530703037525839157893875741192497705300469691062454369926795975456340236777734354667139072601574969834312769653557184396147587071260443947944862235744459711204473062937764153770030210332183635531818173456618022745975055313212598514429587545547296534609597194836036546870491771927625214352957503454948403635822345728774885175809500158451837389413798095329711993092101417428406774326126450005467888736546254948658602484494535938888656542746977424368385335496083164921318601934977025095780370104307980276356857350349205866078371806065542393536101673402017980951598946980664330391505845803674248348878071010412918667335823849899623486215050304052577789848512410263834811719236949311423411823585316405085306164936671137456985394285677324771775046050970865520893596151687017153855755197348199659070192954771308347627111052471134476325986362838585959552209645382089055182871854866744633737533217524880118401787595094060855717010144087136495532418544241489437080074716158404895914136451802032446707961058757633345691696743293869623745410870051851590672859347061212573446572045088465460616826082579731686004585218284333452396157730036306379421822435818001505905203918209206969662326706952623512427380240468784114535101496733983401240219840048956733689309620321613793757156727562461651933397540266795963865921590913322060572673349849253303397874242381960775337182730037783698708748781738419747698880321601186310506332869704931303076839444790968339306301273371014087248060946851793697973114432706759288546077622831002526800554849696867710280945946603669593797354642136622231192695027321229511912952940320879763123151760555959496961163141455688278842949587288399100273691880018774147568892650186152065335219113072582417699616901995530249937735219099786758954892534365835235843156112799728164123461219817343904782402517111603206575330527850752564642995318064985900815557979945885931124351303252811255254295797082281946658798705979077492469849644183166585950844953164726896146168297808178398470451561320526180542310840744843107469368959707726836608471817060598771730170755446473440774031371227437651048421606224757527085958515947273151027400662948161111284777828103531499488913672800783167888051177155427285103861736658069404797695900758820465238673970882660162285107599221418743657006872537842677883708807515850397691812433880561772652364847297019508025848964833883225165668986935081274596293983121864046277268590401580209059988500511262470167150495261908136688693861324081559046336288963037090312033522400722360882494928182809075406914319957044927504420797278117837677431446979085756432990753582588102440240611039084516401089948868433353748444104639734074519165067632941419347985624435567342072815910754484123812917487312938280670403228188813003978384081332242484646571417574404852962675165616101527367425654869508712001788393846171780457455963045764943565964887518396481296159902471996735508854292964536796779404377230965723361625182030798297734785854606060323419091646711138678490928840107449923456834763763114226000770316931243666699425694828181155048843161380832067845480569758457751090640996007242018255400627276908188082601795520167054701327802366989747082835481105543878446889896230696091881643547476154998574015907396059478684978574180486798918438643164618541351689258379042326487669479733384712996754251703808037828636599654447727795924596382283226723503386540591321268603222892807562509801015765174359627788357881606366119032951829868274617539946921221330284257027058653162292482686679275266764009881985590648534544939224296689791195355783205968492422636277656735338488299104238060289209390654467316291591219712866052661347026855261289381236881063068219249064767086495184176816629077103667131505064964190910450196502178972477361881300608688593782509793781457170396897496908861893034634895715117114601514654381347139092345833472226493656930996045016355808162984965203661519182202145414866559662218796964329217241498105206552200001", 10)) );
				global::haxe.lang.Function[] factorial = new global::haxe.lang.Function[]{null};
				factorial[0] = new global::thx.TestBigInt_testCanHandleLargeNumbers_60__Fun(factorial);
				global::haxe.lang.Function factorial1 = factorial[0];
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (factorial1.__hx_invoke1_o(default(double), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10)) ))) ), tenFactorial), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCanHandleLargeNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (factorial1.__hx_invoke1_o(default(double), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(100)) ))) ), hundredFactorial), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCanHandleLargeNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (68) )}));
				global::thx.bigint.BigIntImpl pow = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10000)) ));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(pow, threeToTenThousand), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3)) ).toString()), ".pow(10000) == "), ((global::thx.bigint.BigIntImpl) (threeToTenThousand) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (pow) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCanHandleLargeNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (73) )}));
			}
		}
		
		
		public virtual void testIsImmutable() {
			unchecked {
				global::thx.bigint.BigIntImpl n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(14930352)) );
				((global::thx.bigint.BigIntImpl) (n) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(9227465)) ));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(n, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(14930352)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsImmutable", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
				((global::thx.bigint.BigIntImpl) (n) ).subtract(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(123456)) ));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(n, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(14930352)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsImmutable", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
			}
		}
		
		
		public virtual void testInts() {
			unchecked {
				global::Array<int> tests = new global::Array<int>(new int[]{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 10000, 100000, 1000000, 10000000});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						int test = tests[_g];
						 ++ _g;
						global::thx.bigint.BigIntImpl @out = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(test)) );
						global::utest.Assert.@equals(test, ((global::thx.bigint.BigIntImpl) (@out) ).toInt(), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(test)), " but got "), global::haxe.lang.Runtime.toString(((global::thx.bigint.BigIntImpl) (@out) ).toInt())), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInts", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (96) )}));
						global::thx.bigint.BigIntImpl out1 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt( - (test) )) );
						global::utest.Assert.@equals( - (test) , ((global::thx.bigint.BigIntImpl) (out1) ).toInt(), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString( - (test) )), " but got "), global::haxe.lang.Runtime.toString(((global::thx.bigint.BigIntImpl) (out1) ).toInt())), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInts", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testFloats() {
			unchecked {
				global::Array<double> tests = new global::Array<double>(new double[]{0.0, 1.0, 5.0, 1.2e20, 1.2e40, 1.234e63, 5.432e80, 0.00001, 1.2345e-50});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						double test = tests[_g];
						 ++ _g;
						global::thx.bigint.BigIntImpl @out = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromFloat(test)) );
						global::utest.Assert.floatEquals(global::thx.Floats.roundTo(test, 0), ((global::thx.bigint.BigIntImpl) (@out) ).toFloat(), default(global::haxe.lang.Null<double>), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(global::thx.Floats.roundTo(test, 0))), " but got "), global::haxe.lang.Runtime.toString(((global::thx.bigint.BigIntImpl) (@out) ).toFloat())), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloats", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (108) )}));
						global::thx.bigint.BigIntImpl out1 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromFloat( - (test) )) );
						global::utest.Assert.floatEquals(global::thx.Floats.roundTo( - (test) , 0), ((global::thx.bigint.BigIntImpl) (out1) ).toFloat(), default(global::haxe.lang.Null<double>), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(global::thx.Floats.roundTo( - (test) , 0))), " but got "), global::haxe.lang.Runtime.toString(((global::thx.bigint.BigIntImpl) (out1) ).toFloat())), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloats", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (111) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testStrings() {
			unchecked {
				global::Array<object> tests = new global::Array<object>(new object[]{"0", "3", "20", "12345678901234567890", "999999999999999999"});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						string test = global::haxe.lang.Runtime.toString(tests[_g]);
						 ++ _g;
						global::thx.bigint.BigIntImpl @out = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase(test, 10)) );
						global::utest.Assert.@equals(test, ((global::thx.bigint.BigIntImpl) (@out) ).toString(), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", test), " but got "), ((global::thx.bigint.BigIntImpl) (@out) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStrings", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (123) )}));
						if (string.Equals(test, "0")) {
							continue;
						}
						
						global::thx.bigint.BigIntImpl out1 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase(global::haxe.lang.Runtime.concat("-", test), 10)) );
						global::utest.Assert.@equals(global::haxe.lang.Runtime.concat("-", test), ((global::thx.bigint.BigIntImpl) (out1) ).toString(), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected -", test), " but got "), ((global::thx.bigint.BigIntImpl) (out1) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStrings", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (129) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testEquals() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (134) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (135) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345678901234567890", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345678901234567890", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (136) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (137) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (138) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (140) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (141) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345678901234567890", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345678901234567890", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (142) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (143) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (144) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345678901234567890", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (145) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (147) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (148) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345678901234567890", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345678901234567891", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (149) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (150) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-12345678901234567891", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (151) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (153) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (154) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345678901234567890", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345678901234567891", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (155) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (156) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (157) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (158) )}));
				global::utest.Assert.isFalse(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-12345678901234567890", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-12345678901234567891", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (159) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-0", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (161) )}));
			}
		}
		
		
		public virtual void testIgnoreLeadingZeros() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("0000000000", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("0", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIgnoreLeadingZeros", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (165) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("000000000000023", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(23)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIgnoreLeadingZeros", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (166) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-0000000000000000000000123", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-123)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-0000000000000000000000123", 10)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-123)) ).toString()), " to be true"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIgnoreLeadingZeros", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (167) )}));
			}
		}
		
		
		public virtual void testNumbersShouldBeTheSameWhenConstructedDifferently() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12e5", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromFloat(12e5)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12e5", 10)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromFloat(12e5)) ).toString()), " to be true"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumbersShouldBeTheSameWhenConstructedDifferently", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (171) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromFloat(12e5)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1200000", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromFloat(12e5)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1200000", 10)) ).toString()), " to be true"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumbersShouldBeTheSameWhenConstructedDifferently", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (172) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1", 10)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).toString()), " to be true"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumbersShouldBeTheSameWhenConstructedDifferently", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (173) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(12345)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(12345)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12345", 10)) ).toString()), " to be true"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumbersShouldBeTheSameWhenConstructedDifferently", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (174) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9876543210", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromFloat(9876543210.0)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9876543210", 10)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromFloat(9876543210.0)) ).toString()), " to be true"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumbersShouldBeTheSameWhenConstructedDifferently", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (175) )}));
			}
		}
		
		
		public virtual void testFibonacci() {
			unchecked {
				global::Array<object> fibs = new global::Array<object>(new object[]{((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("3", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("5", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("8", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("13", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("21", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("34", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("55", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("89", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("144", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("233", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("377", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("610", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("987", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1597", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2584", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("4181", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("6765", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10946", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("17711", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("28657", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("46368", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("75025", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("121393", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("196418", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("317811", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("514229", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("832040", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1346269", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2178309", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("3524578", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("5702887", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9227465", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("14930352", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("24157817", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("39088169", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("63245986", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("102334155", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("165580141", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("267914296", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("433494437", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("701408733", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1134903170", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1836311903", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2971215073", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("4807526976", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("7778742049", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12586269025", 10)) )});
				global::thx.bigint.BigIntImpl number = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) );
				global::thx.bigint.BigIntImpl last = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) );
				{
					int _g = 2;
					while (( _g < 50 )) {
						int i = _g++;
						number = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (number) ).@add(last)) );
						last = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (number) ).subtract(last)) );
						global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(number, ((global::thx.bigint.BigIntImpl) (fibs[i]) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFibonacci", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (186) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testCarriesOverCorrectly() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740991", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740992", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (191) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("999999999999999999999000000000000000000000", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1000000000000000000000", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1e42", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("999999999999999999999000000000000000000000", 10)) ).toString()), " + "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1000000000000000000000", 10)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1e42", 10)) ).toString()), " but is "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("999999999999999999999000000000000000000000", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1000000000000000000000", 10)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (192) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1e20", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740972", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("100009007199254740972", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (195) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9007199254740983", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9999999999999998", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-19007199254740981", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (196) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("100000000000000000000000000000000000", 10)) ).subtract(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("999999999999999999", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("99999999999999999000000000000000001", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (197) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("50000005000000", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000001", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("500000100000005000000", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (199) )}));
			}
		}
		
		
		public virtual void testMisc() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("20", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (203) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-10000000000000000", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("0", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-10000000000000000", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (204) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("0", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000000000000000", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000000000000000", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (205) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(9999999)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10000000)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(9999999)) ).toString()), " + "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10000000)) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(9999999)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (206) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10000000)) ).subtract(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(9999999)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (207) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1000000000000000000000000000000000001", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1000000000000000000000000000000000000", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (208) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("100000000000000000002222222222222222222", 10)) ).subtract(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("100000000000000000001111111111111111111", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1111111111111111111", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (209) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("0", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (210) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000000000000000", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000000000000010", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (211) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000000000000000", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000000000000010", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (212) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000000000000000", 10)) ).@add(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000000000000000", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("20000000000000000", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMisc", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (213) )}));
			}
		}
		
		
		public virtual void testMultiplyHandlesSignsCorectly() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(100)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(100)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10000)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (217) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(100)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-100)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-10000)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (218) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-100)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(100)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-10000)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (219) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-100)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-100)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10000)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (220) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(13579)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(13579)) ).toString()), " * "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(13579)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (222) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(13579)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-2220174289812686626814279831230549482", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (227) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-13579)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-2220174289812686626814279831230549482", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (228) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-13579)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (229) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(13579)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).toString()), " * 13579 == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(13579)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (230) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-13579)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-2220174289812686626814279831230549482", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (234) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(13579)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-2220174289812686626814279831230549482", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (235) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-13579)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2220174289812686626814279831230549482", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (236) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (237) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1234567890987654321", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("132435465768798", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (238) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1234567890987654321", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-132435465768798", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1234567890987654321", 10)) ).toString()), " * "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-132435465768798", 10)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1234567890987654321", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-132435465768798", 10)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (239) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("132435465768798", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).toString()), " * "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("132435465768798", 10)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-163500573666152634716420931676158", 10)) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("132435465768798", 10)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (240) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-132435465768798", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).toString()), " * "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-132435465768798", 10)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("163500573666152634716420931676158", 10)) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-132435465768798", 10)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplyHandlesSignsCorectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (241) )}));
			}
		}
		
		
		public virtual void testDivisionBy1IsTheIdentity() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBy1IsTheIdentity", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (245) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBy1IsTheIdentity", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (246) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBy1IsTheIdentity", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (247) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(153)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(153)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBy1IsTheIdentity", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (248) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-153)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-153)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBy1IsTheIdentity", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (249) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9844190321790980841789", 10)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9844190321790980841789", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBy1IsTheIdentity", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (250) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9844190321790980841789", 10)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9844190321790980841789", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBy1IsTheIdentity", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (251) )}));
			}
		}
		
		
		public virtual void testDivisionBySelfIs1() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(5)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(5)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBySelfIs1", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (255) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-5)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-5)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBySelfIs1", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (256) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("20194965098495006574", 10)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("20194965098495006574", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBySelfIs1", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (257) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-20194965098495006574", 10)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-20194965098495006574", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionBySelfIs1", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (258) )}));
			}
		}
		
		
		public virtual void testDivisionOf0Equals0() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionOf0Equals0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (262) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionOf0Equals0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (263) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1234567890987654321", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionOf0Equals0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (264) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1234567890987654321", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivisionOf0Equals0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (265) )}));
			}
		}
		
		
		public virtual void testModulo0ThrowsError() {
			unchecked {
				global::utest.Assert.raises(( (( global::thx.TestBigInt_testModulo0ThrowsError_269__Fun.__hx_current != null )) ? (global::thx.TestBigInt_testModulo0ThrowsError_269__Fun.__hx_current) : (global::thx.TestBigInt_testModulo0ThrowsError_269__Fun.__hx_current = ((global::thx.TestBigInt_testModulo0ThrowsError_269__Fun) (new global::thx.TestBigInt_testModulo0ThrowsError_269__Fun()) )) ), typeof(global::thx.Error), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo0ThrowsError", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (269) )}));
				global::utest.Assert.raises(( (( global::thx.TestBigInt_testModulo0ThrowsError_270__Fun.__hx_current != null )) ? (global::thx.TestBigInt_testModulo0ThrowsError_270__Fun.__hx_current) : (global::thx.TestBigInt_testModulo0ThrowsError_270__Fun.__hx_current = ((global::thx.TestBigInt_testModulo0ThrowsError_270__Fun) (new global::thx.TestBigInt_testModulo0ThrowsError_270__Fun()) )) ), typeof(global::thx.Error), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo0ThrowsError", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (270) )}));
				global::utest.Assert.raises(( (( global::thx.TestBigInt_testModulo0ThrowsError_271__Fun.__hx_current != null )) ? (global::thx.TestBigInt_testModulo0ThrowsError_271__Fun.__hx_current) : (global::thx.TestBigInt_testModulo0ThrowsError_271__Fun.__hx_current = ((global::thx.TestBigInt_testModulo0ThrowsError_271__Fun) (new global::thx.TestBigInt_testModulo0ThrowsError_271__Fun()) )) ), typeof(global::thx.Error), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo0ThrowsError", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (271) )}));
				global::utest.Assert.raises(( (( global::thx.TestBigInt_testModulo0ThrowsError_272__Fun.__hx_current != null )) ? (global::thx.TestBigInt_testModulo0ThrowsError_272__Fun.__hx_current) : (global::thx.TestBigInt_testModulo0ThrowsError_272__Fun.__hx_current = ((global::thx.TestBigInt_testModulo0ThrowsError_272__Fun) (new global::thx.TestBigInt_testModulo0ThrowsError_272__Fun()) )) ), typeof(global::thx.Error), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo0ThrowsError", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (272) )}));
				global::utest.Assert.raises(( (( global::thx.TestBigInt_testModulo0ThrowsError_273__Fun.__hx_current != null )) ? (global::thx.TestBigInt_testModulo0ThrowsError_273__Fun.__hx_current) : (global::thx.TestBigInt_testModulo0ThrowsError_273__Fun.__hx_current = ((global::thx.TestBigInt_testModulo0ThrowsError_273__Fun) (new global::thx.TestBigInt_testModulo0ThrowsError_273__Fun()) )) ), typeof(global::thx.Error), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo0ThrowsError", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (273) )}));
				global::utest.Assert.raises(( (( global::thx.TestBigInt_testModulo0ThrowsError_274__Fun.__hx_current != null )) ? (global::thx.TestBigInt_testModulo0ThrowsError_274__Fun.__hx_current) : (global::thx.TestBigInt_testModulo0ThrowsError_274__Fun.__hx_current = ((global::thx.TestBigInt_testModulo0ThrowsError_274__Fun) (new global::thx.TestBigInt_testModulo0ThrowsError_274__Fun()) )) ), typeof(global::thx.Error), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModulo0ThrowsError", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (274) )}));
			}
		}
		
		
		public virtual void testModuloHandlesSignsCorrectly() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(124234233)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModuloHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (278) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(124234233)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModuloHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (279) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-124234233)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModuloHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (280) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-124234233)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModuloHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (281) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1243233)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("excpected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) ).toString()), " % "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1243233)) ).toString()), " == 2 but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1243233)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModuloHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (282) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1243233)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("excpected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) ).toString()), " % "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1243233)) ).toString()), " == -2 but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1243233)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModuloHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (283) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("786456456335437356436", 10)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-5423424653", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2663036842", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("786456456335437356436", 10)) ).toString()), " % "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-5423424653", 10)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2663036842", 10)) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("786456456335437356436", 10)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-5423424653", 10)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModuloHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (284) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("93453764643534523", 10)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2342)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1119)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModuloHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (285) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-32542543)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(100000000)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-32542543)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testModuloHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (286) )}));
			}
		}
		
		
		public virtual void testPrevNext() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(546)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(545)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(546)) ).toString()), ".prev() == 545 but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(546)) ).prev()) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (290) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (291) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (292) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).toString()), ".prev() == -2 but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).prev()) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (293) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1987)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1988)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (294) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(546)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(547)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (296) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (297) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (298) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (299) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1987)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1986)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (300) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (302) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (303) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(34)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(35)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (304) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740992", 10)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740993", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (305) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9007199254740992", 10)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9007199254740991", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (306) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740992999", 10)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740993000", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (307) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740991", 10)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740992", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (308) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (310) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (311) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(34)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(33)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (312) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740992", 10)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740991", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (313) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9007199254740992", 10)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9007199254740993", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (314) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740992999", 10)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9007199254740992998", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (315) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9007199254740991", 10)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9007199254740992", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (316) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("109874981950949849811049", 10)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("109874981950949849811048", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("109874981950949849811049", 10)) ).prev()) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("109874981950949849811048", 10)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (318) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("109874981950949849811049", 10)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("109874981950949849811050", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("109874981950949849811049", 10)) ).next()) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("109874981950949849811050", 10)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (319) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-109874981950949849811049", 10)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-109874981950949849811050", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-109874981950949849811049", 10)) ).prev()) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-109874981950949849811050", 10)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (320) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-109874981950949849811049", 10)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-109874981950949849811048", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-109874981950949849811049", 10)) ).next()) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-109874981950949849811048", 10)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNext", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (321) )}));
			}
		}
		
		
		public virtual void testPrevNextCarriesOverCorrectly() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(9999999)) ).next(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10000000)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNextCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (325) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10000000)) ).prev(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(9999999)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrevNextCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (326) )}));
			}
		}
		
		
		public virtual void testAbs() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).abs(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAbs", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (330) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-0", 10)) ).abs(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAbs", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (331) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(54)) ).abs(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(54)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAbs", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (332) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-54)) ).abs(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(54)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAbs", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (333) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("13412564654613034984065434", 10)) ).abs(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("13412564654613034984065434", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAbs", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (334) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-13412564654613034984065434", 10)) ).abs(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("13412564654613034984065434", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAbs", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (335) )}));
			}
		}
		
		
		public virtual void testIsPositiveAndIsNegative() {
			unchecked {
				global::utest.Assert.isFalse(( ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).compareTo(global::thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegative", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (339) )}));
				global::utest.Assert.isFalse(global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ), "sign", 1280544829, true)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegative", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (340) )}));
				global::utest.Assert.isFalse(( ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).compareTo(global::thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegative", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (341) )}));
				global::utest.Assert.isFalse(global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ), "sign", 1280544829, true)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegative", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (342) )}));
			}
		}
		
		
		public virtual void testIsPositiveAndIsNegativeWorkForSmallNumbers() {
			unchecked {
				global::utest.Assert.isTrue(( ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).compareTo(global::thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegativeWorkForSmallNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (346) )}));
				global::utest.Assert.isFalse(global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(543)) ), "sign", 1280544829, true)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegativeWorkForSmallNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (347) )}));
				global::utest.Assert.isFalse(( ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).compareTo(global::thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegativeWorkForSmallNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (348) )}));
				global::utest.Assert.isTrue(global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-765)) ), "sign", 1280544829, true)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegativeWorkForSmallNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (349) )}));
			}
		}
		
		
		public virtual void testIsPositiveAndIsNegativeWorkForBigNumbers() {
			unchecked {
				global::utest.Assert.isTrue(( ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("651987498619879841", 10)) ).compareTo(global::thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegativeWorkForBigNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (353) )}));
				global::utest.Assert.isFalse(global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("0054984980098460", 10)) ), "sign", 1280544829, true)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegativeWorkForBigNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (354) )}));
				global::utest.Assert.isFalse(( ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1961987984109078496", 10)) ).compareTo(global::thx._BigInt.BigInt_Impl_.zero) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegativeWorkForBigNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (355) )}));
				global::utest.Assert.isTrue(global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-98800984196109540984", 10)) ), "sign", 1280544829, true)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsPositiveAndIsNegativeWorkForBigNumbers", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (356) )}));
			}
		}
		
		
		public virtual void testIsUnit() {
			unchecked {
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx._BigInt.BigInt_Impl_.one) ).isUnit(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsUnit", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (360) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx._BigInt.BigInt_Impl_.negativeOne) ).isUnit(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsUnit", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (361) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx._BigInt.BigInt_Impl_.zero) ).isUnit(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsUnit", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (362) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(5)) ).isUnit(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsUnit", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (363) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-5)) ).isUnit(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsUnit", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (364) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("654609649089416160", 10)) ).isUnit(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsUnit", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (365) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-98410980984981094", 10)) ).isUnit(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsUnit", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (366) )}));
			}
		}
		
		
		public virtual void testIsZero() {
			unchecked {
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx._BigInt.BigInt_Impl_.zero) ).isZero(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsZero", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (370) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).isZero(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsZero", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (371) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-0", 10)) ).isZero(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsZero", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (372) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(15)) ).isZero(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsZero", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (373) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-15)) ).isZero(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsZero", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (374) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("63213098189462109840", 10)) ).isZero(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsZero", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (375) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-64343745644564564563", 10)) ).isZero(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsZero", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (376) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).isZero(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsZero", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (377) )}));
			}
		}
		
		
		public virtual void testSquare() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).square(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSquare", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (381) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(16)) ).square(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(256)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSquare", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (382) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-16)) ).square(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(256)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSquare", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (383) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("65536", 10)) ).square(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("4294967296", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("65536", 10)) ).square()) ).toString()), " == 4294967296"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSquare", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (384) )}));
			}
		}
		
		
		public virtual void testPowerToNegativeNumbersIs0() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-298)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerToNegativeNumbersIs0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (388) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(543)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerToNegativeNumbersIs0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (389) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("323434643534523", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerToNegativeNumbersIs0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (390) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-54302)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-543624724341214223562", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerToNegativeNumbersIs0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (391) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-20199605604968", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-99)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerToNegativeNumbersIs0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (392) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerToNegativeNumbersIs0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (394) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerToNegativeNumbersIs0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (395) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerToNegativeNumbersIs0", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (396) )}));
			}
		}
		
		
		public virtual void testPowerHandlesSignsCorrectly() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(8)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (400) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-8)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3)) ))) ).toString()), " == -8"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (401) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1036350201654", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(4)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1153522698998527286707879497611725813209153232656", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1036350201654", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(4)) ))) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1153522698998527286707879497611725813209153232656", 10)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (402) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1036350201654", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(4)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1153522698998527286707879497611725813209153232656", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1036350201654", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(4)) ))) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1153522698998527286707879497611725813209153232656", 10)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (403) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-154654987", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-3699063497752861435082803", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-154654987", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3)) ))) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-3699063497752861435082803", 10)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (404) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (406) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (407) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (408) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1e100", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (410) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1e100", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (411) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1e100", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerHandlesSignsCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (412) )}));
			}
		}
		
		
		public virtual void testPower() {
			unchecked {
				global::thx.bigint.Bigs.parseBase("102340001040000", 10);
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000000000", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10)) ))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPower", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (417) )}));
			}
		}
		
		
		public virtual void testPowerOf0to0is1() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerOf0to0is1", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (421) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-0", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerOf0to0is1", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (422) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-0", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerOf0to0is1", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (423) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-0", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-0", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerOf0to0is1", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (424) )}));
			}
		}
		
		
		public virtual void testPowerCarriesOverCorrectly() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("16", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("13", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("4503599627370496", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (428) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("123456789123456789", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("822526267372365207989468699031914332476569003445489153619518989325083908083922133639704420166045905346960117046949453426283086050487204639652635846010822673782217799736601", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (429) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(63)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9223372036854775808", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 2.pow(63) == ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9223372036854775808", 10)) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2", 10)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(63)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (430) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.notEquals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(100)) ).pow(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(56)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPowerCarriesOverCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (431) )}));
			}
		}
		
		
		public virtual void testDivision() {
			unchecked {
				global::utest.Assert.raises(( (( global::thx.TestBigInt_testDivision_435__Fun.__hx_current != null )) ? (global::thx.TestBigInt_testDivision_435__Fun.__hx_current) : (global::thx.TestBigInt_testDivision_435__Fun.__hx_current = ((global::thx.TestBigInt_testDivision_435__Fun) (new global::thx.TestBigInt_testDivision_435__Fun()) )) ), typeof(global::thx.Error), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (435) )}));
				global::utest.Assert.raises(( (( global::thx.TestBigInt_testDivision_438__Fun.__hx_current != null )) ? (global::thx.TestBigInt_testDivision_438__Fun.__hx_current) : (global::thx.TestBigInt_testDivision_438__Fun.__hx_current = ((global::thx.TestBigInt_testDivision_438__Fun) (new global::thx.TestBigInt_testDivision_438__Fun()) )) ), typeof(global::thx.Error), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (438) )}));
				object __temp_stmt10 = null;
				{
					global::thx.bigint.BigIntImpl __temp_odecl1 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10)) );
					global::thx.bigint.BigIntImpl __temp_odecl2 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) );
					global::thx.bigint.BigIntImpl __temp_odecl3 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(5)) );
					__temp_stmt10 = new global::haxe.lang.DynamicObject(new int[]{4996433, 5496390, 5691744}, new object[]{__temp_odecl2, __temp_odecl1, __temp_odecl3}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt11 = null;
				{
					global::thx.bigint.BigIntImpl __temp_odecl4 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("102340001040000", 10)) );
					global::thx.bigint.BigIntImpl __temp_odecl5 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10000000000", 10)) );
					global::thx.bigint.BigIntImpl __temp_odecl6 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(10234)) );
					__temp_stmt11 = new global::haxe.lang.DynamicObject(new int[]{4996433, 5496390, 5691744}, new object[]{__temp_odecl5, __temp_odecl4, __temp_odecl6}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt12 = null;
				{
					global::thx.bigint.BigIntImpl __temp_odecl7 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1000000000000000000", 10)) );
					global::thx.bigint.BigIntImpl __temp_odecl8 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(50)) );
					global::thx.bigint.BigIntImpl __temp_odecl9 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("20000000000000000", 10)) );
					__temp_stmt12 = new global::haxe.lang.DynamicObject(new int[]{4996433, 5496390, 5691744}, new object[]{__temp_odecl8, __temp_odecl7, __temp_odecl9}, new int[]{}, new double[]{});
				}
				
				global::Array<object> tests = new global::Array<object>(new object[]{__temp_stmt10, __temp_stmt11, __temp_stmt12});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						object test = tests[_g];
						 ++ _g;
						global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(test, "num", 5496390, true)) ).divide(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(test, "div", 4996433, true)) ))) ), ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(test, "res", 5691744, true)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(test, "num", 5496390, true)) ).toString()), " / "), ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(test, "div", 4996433, true)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(test, "res", 5691744, true)) ).toString()), " and it was "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(test, "num", 5496390, true)) ).divide(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(test, "div", 4996433, true)) ))) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDivision", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (448) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testAddition() {
			unchecked {
				global::thx.bigint.BigIntImpl m = null;
				global::thx.bigint.BigIntImpl n = null;
				global::thx.bigint.BigIntImpl o = null;
				global::thx.bigint.BigIntImpl s = null;
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(123)) );
				n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(n)) ), m), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (460) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).@add(m)) ), m), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (461) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).subtract(n)) ), m), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (463) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).subtract(m)) ), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).negate()) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (464) )}));
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(123)) );
				n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(343)) );
				s = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(466)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(n)) ), s), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (468) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).@add(m)) ), s), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (469) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s) ).subtract(n)) ), m), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (471) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).subtract(s)) ), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).negate()) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (472) )}));
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-234356)) );
				n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(355321)) );
				o = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(234)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(n)) ).@add(o), ((global::thx.bigint.BigIntImpl) (m) ).@add(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).@add(o)) ))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (476) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).subtract(n)) ).@add(o), ((global::thx.bigint.BigIntImpl) (m) ).subtract(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).subtract(o)) ))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (478) )}));
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) );
				n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-9999)) );
				s = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-9998)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(n)) ), s), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (481) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s) ).subtract(n)) ), m), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (483) )}));
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("11111111111111111111110111111111111111111111111111", 10)) );
				n = m;
				s = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("22222222222222222222220222222222222222222222222222", 10)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(n)) ), s), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (m) ).toString()), " + "), ((global::thx.bigint.BigIntImpl) (n) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (s) ).toString()), " but is "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(n)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (488) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).subtract(n)) ).isZero(), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (m) ).toString()), "-"), ((global::thx.bigint.BigIntImpl) (n) ).toString()), "==0 but is "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).subtract(n)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (490) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).subtract(n)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (m) ).toString()), " - "), ((global::thx.bigint.BigIntImpl) (n) ).toString()), "==0 but is "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).subtract(n)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (491) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s) ).subtract(n)) ), m), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (s) ).toString()), " - "), ((global::thx.bigint.BigIntImpl) (n) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (m) ).toString()), " but is "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s) ).subtract(n)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (492) )}));
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("99499494949383948405", 10)) );
				n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-472435789789045237084578078029457809342597808204538970", 10)) );
				s = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-472435789789045237084578078029457709843102858820590565", 10)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(n)) ), s), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (m) ).toString()), " + "), ((global::thx.bigint.BigIntImpl) (n) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (s) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(n)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (498) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s) ).subtract(n)) ), m), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (s) ).toString()), " - "), ((global::thx.bigint.BigIntImpl) (n) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (m) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s) ).subtract(n)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (500) )}));
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1", 10)) );
				n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 10)) );
				s = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 10)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(n)) ), s), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (m) ).toString()), " + "), ((global::thx.bigint.BigIntImpl) (n) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (s) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(n)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (505) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s) ).subtract(n)) ), m), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (s) ).toString()), " - "), ((global::thx.bigint.BigIntImpl) (n) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (m) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (s) ).subtract(n)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (506) )}));
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1", 10)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(s)) ), n), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (m) ).toString()), " + "), ((global::thx.bigint.BigIntImpl) (s) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (n) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).@add(s)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (509) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).subtract(s)) ), m), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (n) ).toString()), " - "), ((global::thx.bigint.BigIntImpl) (s) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (m) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).subtract(s)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (510) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).subtract(m)) ), s), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (n) ).toString()), " - "), ((global::thx.bigint.BigIntImpl) (m) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (s) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).subtract(m)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddition", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (511) )}));
			}
		}
		
		
		public virtual void testMultiplication() {
			unchecked {
				global::thx.bigint.BigIntImpl a = null;
				global::thx.bigint.BigIntImpl b = null;
				global::thx.bigint.BigIntImpl m = null;
				a = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(12347)) );
				b = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).multiply(b)) ), b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplication", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (520) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (b) ).multiply(a)) ), b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplication", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (521) )}));
				a = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-99999)) );
				b = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).multiply(b)) ), a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplication", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (524) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (b) ).multiply(a)) ), a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplication", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (525) )}));
				a = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1235)) );
				b = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(44)) );
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(54340)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).multiply(b)) ), m), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplication", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (528) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (b) ).multiply(a)) ), m), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplication", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (529) )}));
				a = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-11)) );
				b = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-9)) );
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(99)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).multiply(b)) ), m), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplication", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (532) )}));
				a = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(55)) );
				b = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(200395)) );
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(11021725)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).multiply(b)) ), m), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplication", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (535) )}));
				a = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("111111111111111111111111111111111111111", 10)) );
				b = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-333333333333333333333", 10)) );
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-37037037037037037036999999999999999999962962962962962962963", 10)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).multiply(b)) ), m), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (a) ).toString()), " * "), ((global::thx.bigint.BigIntImpl) (b) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (m) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (a) ).multiply(b)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMultiplication", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (541) )}));
			}
		}
		
		
		public virtual void testComparison() {
			unchecked {
				global::thx.bigint.BigIntImpl a = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) );
				global::thx.bigint.BigIntImpl b = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.less(a, b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (547) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.lessEquals(a, b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (548) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.lessEquals(a, a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (549) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.greater(b, a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (551) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.greaterEquals(b, a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (552) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.greaterEquals(b, b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (553) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.lessEquals(b, b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (554) )}));
				global::utest.Assert.@equals(-1, ((global::thx.bigint.BigIntImpl) (a) ).compareTo(b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (556) )}));
				global::utest.Assert.@equals(1, ((global::thx.bigint.BigIntImpl) (b) ).compareTo(a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (557) )}));
				global::utest.Assert.@equals(0, ((global::thx.bigint.BigIntImpl) (b) ).compareTo(b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (558) )}));
				a = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-333333333333333333333", 10)) );
				b = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("111111111111111111111111111111111111111", 10)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.less(a, b), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (a) ).toString()), " < "), ((global::thx.bigint.BigIntImpl) (b) ).toString()), " == true but it is "), global::Std.@string(global::thx._BigInt.BigInt_Impl_.less(a, b))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (563) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.lessEquals(a, b), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (a) ).toString()), " <= "), ((global::thx.bigint.BigIntImpl) (b) ).toString()), " == true but it is "), global::Std.@string(global::thx._BigInt.BigInt_Impl_.lessEquals(a, b))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (564) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.lessEquals(a, a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (565) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.greater(b, a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (567) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.greaterEquals(b, a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (568) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.greaterEquals(b, b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (569) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.lessEquals(b, b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (570) )}));
				global::utest.Assert.@equals(-1, ((global::thx.bigint.BigIntImpl) (a) ).compareTo(b), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (a) ).toString()), ".compareTo("), ((global::thx.bigint.BigIntImpl) (b) ).toString()), ") t0 be -1 but it is "), global::haxe.lang.Runtime.toString(((global::thx.bigint.BigIntImpl) (a) ).compareTo(b))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (572) )}));
				global::utest.Assert.@equals(1, ((global::thx.bigint.BigIntImpl) (b) ).compareTo(a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (573) )}));
				global::utest.Assert.@equals(0, ((global::thx.bigint.BigIntImpl) (b) ).compareTo(b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (574) )}));
				a = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-37037037037037037036999999999999999999962962962962962962963", 10)) );
				b = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-333333333333333333333", 10)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.less(a, b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (579) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.lessEquals(a, b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (580) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.lessEquals(a, a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (581) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.greater(b, a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (583) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.greaterEquals(b, a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (584) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.greaterEquals(b, b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (585) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.lessEquals(b, b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (586) )}));
				global::utest.Assert.@equals(-1, ((global::thx.bigint.BigIntImpl) (a) ).compareTo(b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (588) )}));
				global::utest.Assert.@equals(1, ((global::thx.bigint.BigIntImpl) (b) ).compareTo(a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (589) )}));
				global::utest.Assert.@equals(0, ((global::thx.bigint.BigIntImpl) (a) ).compareTo(a), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (590) )}));
				global::utest.Assert.@equals(0, ((global::thx.bigint.BigIntImpl) (b) ).compareTo(b), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testComparison", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (591) )}));
			}
		}
		
		
		public virtual void testNegation() {
			unchecked {
				global::thx.bigint.BigIntImpl m = null;
				global::thx.bigint.BigIntImpl n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).negate()) ), n), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).negate()) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (n) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNegation", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (600) )}));
				n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).negate()) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNegation", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (603) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).negate()) ).negate(), n), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNegation", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (604) )}));
				n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1234)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).negate()) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1234)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNegation", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (607) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).negate()) ).negate(), n), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNegation", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (608) )}));
				m = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("192395858359234934684359234", 10)) );
				n = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-192395858359234934684359234", 10)) );
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (m) ).negate()) ), n), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNegation", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (612) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(m, ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).negate()) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNegation", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (613) )}));
			}
		}
		
		
		public virtual void testBigIntParsesNumbersCorrectly() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("10", 2)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntParsesNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (617) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("FF", 16)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(255)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntParsesNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (618) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("111100001111", 2)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3855)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("111100001111", 2)) ).toString()), " == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3855)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntParsesNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (619) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1", 16)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntParsesNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (621) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9822997e35bb99bcf103a64299aa92b8446ab93879fba53349f1626f3c8f78a4ee1d8d9e7562538f8e374fdf64c8eff7481c63cde5ca9821abfb3df6fb3e2489d2f85d34cf347f3e89191a19cc6b6b8072a976a8f1bcf68d20f18a1c0efb023252ba2d0961428a5c282d2645f3f7fa160f7f84aca88e40a74066c4a787bed7d0082f7e45b1ffee532715f56bd5f8168eaf7eaae112ed1316371f047692631e70e6b85b290ef063845b364dad7e10b9deb9fcfb708f83b7c3c6b82ce16eb0034c030b332a58d637a7b547fd0527051d7de9e5004db2ea2bd75f5c5a280a1a9b93c3c83373b6dcf1b65c01197096e97d13076b6613bc2ebf47c91fbe1aefeea966134bfbbf5f850320f0f0c2d88888bd82d118a6aaf8df2b092cf5456eff7e209feb476bf3c01d6d2e7ca0b9f40d83b107b4def92f2927cf0a1bb6190c67a4da91478709262ed1f1ecb77fbaf1197ac238c246a63a697f51e8d539f850e790137e7fce5f764896fdfb4fc3787520608f0400e72aeea5737c36304c6887ec1a174564ecec63a57b1e0946dc311dd3aea7bfae197ff9c7fcbf17c97d9db303d231702ef502dde1b53896196dc2e5d30b2b6ec58fc3744f4de08109eb99aa9f22ffe2f12f3953f516f91d35a8852aff4a19e250410fbd8dbcdae99f92f88e2f94341fc1ecdff32733d194c0541f708a72c5b4c03e5515e1086d0903addca0e172968ff1dee87bbd4fee679e2ee5a52975807ae7212cc2a33e0821e2d9b44eaa7dc29536a94c6597eda41bdd1e5e618e7b388b53d38ef9542523bce888738db46c6706c3ee82cbc3655408071e9e422a44d309e3cfd31ec2135ee0cba32b0c6721c8bee4d076543b71c35a06087a007c14e51d1f0c4d0aa9aa0751dfd3776d2357a010e6b147aca40c7b669291e6defbf5ca77505c960f14b330e6c90dc2539431329ef78a1e9f26b2ead7d28a622e6b586bcee22bd0a495442c6a1235588988252cbd4d36975560fb8e7e5c8cf06f29aeb68659c5cb4cf8d011375b00000000000000000000000000000000000000000000000000000000000000000000000000", 16)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntParsesNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (622) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9223372036854775808", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1000000000000000000000000000000000000000000000000000000000000000", 2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntParsesNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (623) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("324AFCCC342342333CCD239998881232324AFCCC342342333CCD239998881232", 16)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("22748133857356174891035811692236022265357659892433333914058690475216129757746", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntParsesNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (624) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("234345345345", 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("3690123141", 16)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntParsesNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (625) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-10", 16)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-16", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntParsesNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (626) )}));
			}
		}
		
		
		public virtual void testBigIntOutputsNumbersCorrectly() {
			unchecked {
				global::utest.Assert.isTrue(string.Equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("366900685503779409298642816707647664013657589336", 10)) ).toStringWithBase(16), "4044654fce69424a651af2825b37124c25094658"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntOutputsNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (630) )}));
				global::utest.Assert.isTrue(string.Equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("111111111111111111111111111111111111111111111111111111", 2)) ).toStringWithBase(2), "111111111111111111111111111111111111111111111111111111"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntOutputsNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (631) )}));
				global::utest.Assert.isTrue(string.Equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("secretmessage000", 36)) ).toStringWithBase(36), "secretmessage000"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntOutputsNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (632) )}));
				global::utest.Assert.isTrue(string.Equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-256)) ).toStringWithBase(16), "-100"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBigIntOutputsNumbersCorrectly", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (633) )}));
			}
		}
		
		
		public virtual void testShiftingLeftAndRight() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-5)) ).shiftRight(2), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-2)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShiftingLeftAndRight", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (637) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(5)) ).shiftRight(-2), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(20)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(5)) ).shiftRight(-2)) ).toString()), " == 20"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShiftingLeftAndRight", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (638) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(5)) ).shiftLeft(-2), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShiftingLeftAndRight", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (639) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1024)) ).shiftLeft(100), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1298074214633706907132624082305024", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1024)) ).toString()), ".shiftLeft(100) == "), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1298074214633706907132624082305024", 10)) ).toString()), " but got "), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1024)) ).shiftLeft(100)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShiftingLeftAndRight", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (640) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("2596148429267413814265248164610049", 10)) ).shiftRight(100), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2048)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShiftingLeftAndRight", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (641) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("8589934592", 10)) ).shiftRight(-50), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9671406556917033397649408", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShiftingLeftAndRight", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (642) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("38685626227668133590597632", 10)) ).shiftLeft(-50), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("34359738368", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShiftingLeftAndRight", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (643) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1", 10)) ).shiftRight(25), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-1)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShiftingLeftAndRight", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (644) )}));
			}
		}
		
		
		public virtual void testBitwiseOperations() {
			unchecked {
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("435783453", 10)) ).and(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("902345074", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("298352912", 10)) )), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("435783453", 10)) ).and(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("902345074", 10)) ))) ).toString()), " to be 298352912"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (648) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("435783453", 10)) ).or(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("902345074", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1039775615", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (649) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("435783453", 10)) ).xor(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("902345074", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("741422703", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (650) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("94981987261387596", 10)) ).not(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-94981987261387597", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (651) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-6931047708307681506", 10)) ).xor(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("25214903917", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-6931047723896018573", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (652) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-6931047723896018573", 10)) ).and(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("281474976710655", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("273577603885427", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (653) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-65", 10)) ).xor(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-42", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("105", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (654) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("6", 10)) ).and(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-3", 10)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("4", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (655) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("0", 10)) ).not(), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (656) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("13", 10)) ).or(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-8)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-3", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (657) )}));
				global::utest.Assert.isTrue(global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("12", 10)) ).xor(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-5)) )), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9", 10)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitwiseOperations", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (658) )}));
			}
		}
		
		
		public virtual void testIsEvenAndIsOdd() {
			unchecked {
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).isEven(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (662) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).isOdd(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (663) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(654)) ).isEven(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (665) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(654)) ).isOdd(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (666) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(653)) ).isOdd(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (668) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(653)) ).isEven(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (669) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-984)) ).isEven(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (671) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-984)) ).isOdd(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (672) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-987)) ).isOdd(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (674) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-987)) ).isEven(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (675) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9888651888888888", 10)) ).isEven(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (677) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9888651888888888", 10)) ).isOdd(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (678) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1026377777777777", 10)) ).isOdd(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (680) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("1026377777777777", 10)) ).isEven(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (681) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9888651888888888", 10)) ).isEven(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (683) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-9888651888888888", 10)) ).isOdd(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (684) )}));
				global::utest.Assert.isTrue(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1026377777777777", 10)) ).isOdd(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (686) )}));
				global::utest.Assert.isFalse(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-1026377777777777", 10)) ).isEven(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsEvenAndIsOdd", "thx.TestBigInt", "TestBigInt.hx"}, new int[]{1981972957}, new double[]{((double) (687) )}));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 695779780:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsEvenAndIsOdd", 695779780)) );
					}
					
					
					case 55643531:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBitwiseOperations", 55643531)) );
					}
					
					
					case 1214913502:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testShiftingLeftAndRight", 1214913502)) );
					}
					
					
					case 1929714430:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBigIntOutputsNumbersCorrectly", 1929714430)) );
					}
					
					
					case 118663790:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBigIntParsesNumbersCorrectly", 118663790)) );
					}
					
					
					case 1145652951:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNegation", 1145652951)) );
					}
					
					
					case 827703867:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testComparison", 827703867)) );
					}
					
					
					case 548797560:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMultiplication", 548797560)) );
					}
					
					
					case 457610094:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAddition", 457610094)) );
					}
					
					
					case 1217168287:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDivision", 1217168287)) );
					}
					
					
					case 2093796797:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPowerCarriesOverCorrectly", 2093796797)) );
					}
					
					
					case 858834168:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPowerOf0to0is1", 858834168)) );
					}
					
					
					case 261917267:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPower", 261917267)) );
					}
					
					
					case 285196505:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPowerHandlesSignsCorrectly", 285196505)) );
					}
					
					
					case 983881407:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPowerToNegativeNumbersIs0", 983881407)) );
					}
					
					
					case 1910916751:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSquare", 1910916751)) );
					}
					
					
					case 122427940:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsZero", 122427940)) );
					}
					
					
					case 67425664:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsUnit", 67425664)) );
					}
					
					
					case 1307539969:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsPositiveAndIsNegativeWorkForBigNumbers", 1307539969)) );
					}
					
					
					case 2038277274:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsPositiveAndIsNegativeWorkForSmallNumbers", 2038277274)) );
					}
					
					
					case 2025114945:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsPositiveAndIsNegative", 2025114945)) );
					}
					
					
					case 1035493184:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAbs", 1035493184)) );
					}
					
					
					case 1080516578:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPrevNextCarriesOverCorrectly", 1080516578)) );
					}
					
					
					case 81234936:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPrevNext", 81234936)) );
					}
					
					
					case 1313702500:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testModuloHandlesSignsCorrectly", 1313702500)) );
					}
					
					
					case 935687251:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testModulo0ThrowsError", 935687251)) );
					}
					
					
					case 1763822423:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDivisionOf0Equals0", 1763822423)) );
					}
					
					
					case 185317413:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDivisionBySelfIs1", 185317413)) );
					}
					
					
					case 1664441834:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDivisionBy1IsTheIdentity", 1664441834)) );
					}
					
					
					case 468296958:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMultiplyHandlesSignsCorectly", 468296958)) );
					}
					
					
					case 1267652702:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMisc", 1267652702)) );
					}
					
					
					case 1204921660:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCarriesOverCorrectly", 1204921660)) );
					}
					
					
					case 409771252:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFibonacci", 409771252)) );
					}
					
					
					case 1305902387:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNumbersShouldBeTheSameWhenConstructedDifferently", 1305902387)) );
					}
					
					
					case 1622172873:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIgnoreLeadingZeros", 1622172873)) );
					}
					
					
					case 1491547185:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEquals", 1491547185)) );
					}
					
					
					case 901545040:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testStrings", 901545040)) );
					}
					
					
					case 1514826057:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFloats", 1514826057)) );
					}
					
					
					case 1223543318:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testInts", 1223543318)) );
					}
					
					
					case 437701574:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsImmutable", 437701574)) );
					}
					
					
					case 672521557:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCanHandleLargeNumbers", 672521557)) );
					}
					
					
					case 756648534:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIncrements", 756648534)) );
					}
					
					
					case 432950325:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLcmAndGcd", 432950325)) );
					}
					
					
					case 635698545:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromInt64", 635698545)) );
					}
					
					
					case 1255711457:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIssue82", 1255711457)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 695779780:
					{
						this.testIsEvenAndIsOdd();
						break;
					}
					
					
					case 55643531:
					{
						this.testBitwiseOperations();
						break;
					}
					
					
					case 1214913502:
					{
						this.testShiftingLeftAndRight();
						break;
					}
					
					
					case 1929714430:
					{
						this.testBigIntOutputsNumbersCorrectly();
						break;
					}
					
					
					case 118663790:
					{
						this.testBigIntParsesNumbersCorrectly();
						break;
					}
					
					
					case 1145652951:
					{
						this.testNegation();
						break;
					}
					
					
					case 827703867:
					{
						this.testComparison();
						break;
					}
					
					
					case 548797560:
					{
						this.testMultiplication();
						break;
					}
					
					
					case 457610094:
					{
						this.testAddition();
						break;
					}
					
					
					case 1217168287:
					{
						this.testDivision();
						break;
					}
					
					
					case 2093796797:
					{
						this.testPowerCarriesOverCorrectly();
						break;
					}
					
					
					case 858834168:
					{
						this.testPowerOf0to0is1();
						break;
					}
					
					
					case 261917267:
					{
						this.testPower();
						break;
					}
					
					
					case 285196505:
					{
						this.testPowerHandlesSignsCorrectly();
						break;
					}
					
					
					case 983881407:
					{
						this.testPowerToNegativeNumbersIs0();
						break;
					}
					
					
					case 1910916751:
					{
						this.testSquare();
						break;
					}
					
					
					case 122427940:
					{
						this.testIsZero();
						break;
					}
					
					
					case 67425664:
					{
						this.testIsUnit();
						break;
					}
					
					
					case 1307539969:
					{
						this.testIsPositiveAndIsNegativeWorkForBigNumbers();
						break;
					}
					
					
					case 2038277274:
					{
						this.testIsPositiveAndIsNegativeWorkForSmallNumbers();
						break;
					}
					
					
					case 2025114945:
					{
						this.testIsPositiveAndIsNegative();
						break;
					}
					
					
					case 1035493184:
					{
						this.testAbs();
						break;
					}
					
					
					case 1080516578:
					{
						this.testPrevNextCarriesOverCorrectly();
						break;
					}
					
					
					case 81234936:
					{
						this.testPrevNext();
						break;
					}
					
					
					case 1313702500:
					{
						this.testModuloHandlesSignsCorrectly();
						break;
					}
					
					
					case 935687251:
					{
						this.testModulo0ThrowsError();
						break;
					}
					
					
					case 1763822423:
					{
						this.testDivisionOf0Equals0();
						break;
					}
					
					
					case 185317413:
					{
						this.testDivisionBySelfIs1();
						break;
					}
					
					
					case 1664441834:
					{
						this.testDivisionBy1IsTheIdentity();
						break;
					}
					
					
					case 468296958:
					{
						this.testMultiplyHandlesSignsCorectly();
						break;
					}
					
					
					case 1267652702:
					{
						this.testMisc();
						break;
					}
					
					
					case 1204921660:
					{
						this.testCarriesOverCorrectly();
						break;
					}
					
					
					case 409771252:
					{
						this.testFibonacci();
						break;
					}
					
					
					case 1305902387:
					{
						this.testNumbersShouldBeTheSameWhenConstructedDifferently();
						break;
					}
					
					
					case 1622172873:
					{
						this.testIgnoreLeadingZeros();
						break;
					}
					
					
					case 1491547185:
					{
						this.testEquals();
						break;
					}
					
					
					case 901545040:
					{
						this.testStrings();
						break;
					}
					
					
					case 1514826057:
					{
						this.testFloats();
						break;
					}
					
					
					case 1223543318:
					{
						this.testInts();
						break;
					}
					
					
					case 437701574:
					{
						this.testIsImmutable();
						break;
					}
					
					
					case 672521557:
					{
						this.testCanHandleLargeNumbers();
						break;
					}
					
					
					case 756648534:
					{
						this.testIncrements();
						break;
					}
					
					
					case 432950325:
					{
						this.testLcmAndGcd();
						break;
					}
					
					
					case 635698545:
					{
						this.testFromInt64();
						break;
					}
					
					
					case 1255711457:
					{
						this.testIssue82();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBigInt_testCanHandleLargeNumbers_60__Fun : global::haxe.lang.Function {
		
		public TestBigInt_testCanHandleLargeNumbers_60__Fun(global::haxe.lang.Function[] factorial) : base(1, 0) {
			this.factorial = factorial;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.bigint.BigIntImpl n = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.bigint.BigIntImpl) (((object) (__fn_float1) )) )) : (((global::thx.bigint.BigIntImpl) (__fn_dyn1) )) );
				if (( global::thx._BigInt.BigInt_Impl_.@equals(n, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) )) || global::thx._BigInt.BigInt_Impl_.@equals(n, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) )) )) {
					return ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) );
				}
				
				return ((global::thx.bigint.BigIntImpl) (this.factorial[0].__hx_invoke1_o(default(double), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (n) ).prev()) ))) ).multiply(n);
			}
		}
		
		
		public global::haxe.lang.Function[] factorial;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBigInt_testModulo0ThrowsError_269__Fun : global::haxe.lang.Function {
		
		public TestBigInt_testModulo0ThrowsError_269__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestBigInt_testModulo0ThrowsError_269__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ));
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBigInt_testModulo0ThrowsError_270__Fun : global::haxe.lang.Function {
		
		public TestBigInt_testModulo0ThrowsError_270__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestBigInt_testModulo0ThrowsError_270__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ));
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBigInt_testModulo0ThrowsError_271__Fun : global::haxe.lang.Function {
		
		public TestBigInt_testModulo0ThrowsError_271__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestBigInt_testModulo0ThrowsError_271__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			unchecked {
				((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(5)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBigInt_testModulo0ThrowsError_272__Fun : global::haxe.lang.Function {
		
		public TestBigInt_testModulo0ThrowsError_272__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestBigInt_testModulo0ThrowsError_272__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			unchecked {
				((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-5)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBigInt_testModulo0ThrowsError_273__Fun : global::haxe.lang.Function {
		
		public TestBigInt_testModulo0ThrowsError_273__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestBigInt_testModulo0ThrowsError_273__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			unchecked {
				((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("9549841598749874951041", 10)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBigInt_testModulo0ThrowsError_274__Fun : global::haxe.lang.Function {
		
		public TestBigInt_testModulo0ThrowsError_274__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestBigInt_testModulo0ThrowsError_274__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			unchecked {
				((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase("-20964918940987496110974948", 10)) ).modulo(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBigInt_testDivision_435__Fun : global::haxe.lang.Function {
		
		public TestBigInt_testDivision_435__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestBigInt_testDivision_435__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			unchecked {
				((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBigInt_testDivision_438__Fun : global::haxe.lang.Function {
		
		public TestBigInt_testDivision_438__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestBigInt_testDivision_438__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ));
			return null;
		}
		
		
	}
}


