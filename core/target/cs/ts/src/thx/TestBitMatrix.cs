// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBitMatrix : global::haxe.lang.HxObject {
		
		public TestBitMatrix(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestBitMatrix() {
			global::thx.TestBitMatrix.__hx_ctor_thx_TestBitMatrix(this);
		}
		
		
		public static void __hx_ctor_thx_TestBitMatrix(global::thx.TestBitMatrix __temp_me184) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestBitMatrix(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestBitMatrix();
		}
		
		
		public virtual void testNew() {
			unchecked {
				global::Array<object> bits = global::thx._BitMatrix.BitMatrix_Impl_._new(default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
				global::utest.Assert.same(0, global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(bits), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNew", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (10) )}));
				global::utest.Assert.same(0, global::thx._BitMatrix.BitMatrix_Impl_.get_length(bits), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNew", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (11) )}));
				bits = global::thx._BitMatrix.BitMatrix_Impl_._new(new global::haxe.lang.Null<int>(5, true), new global::haxe.lang.Null<int>(10, true));
				global::utest.Assert.same(5, global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(bits), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNew", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (14) )}));
				global::utest.Assert.same(10, global::thx._BitMatrix.BitMatrix_Impl_.get_length(bits), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNew", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (15) )}));
			}
		}
		
		
		public virtual void testBitMatrix() {
			unchecked {
				global::Array<object> bits = global::thx._BitMatrix.BitMatrix_Impl_._new(new global::haxe.lang.Null<int>(3, true), new global::haxe.lang.Null<int>(3, true));
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 0, true);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 1, true);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 2, true);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 0, false);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 1, false);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 2, false);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 2, 0, true);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 2, 1, false);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 2, 2, true);
				global::utest.Assert.@equals("111,000,101", global::thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitMatrix", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
				global::utest.Assert.raises(new global::thx.TestBitMatrix_testBitMatrix_32__Fun(bits), null, null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitMatrix", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 3, true);
				global::utest.Assert.@equals("1111,0000,1010", global::thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitMatrix", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
				global::utest.Assert.same(4, global::thx._BitMatrix.BitMatrix_Impl_.get_length(bits), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitMatrix", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 4, true);
				global::utest.Assert.@equals("11110,00001,10100", global::thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitMatrix", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
				global::utest.Assert.same(5, global::thx._BitMatrix.BitMatrix_Impl_.get_length(bits), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitMatrix", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 2, 5, true);
				global::utest.Assert.@equals("111100,000010,101001", global::thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitMatrix", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
				global::utest.Assert.same(6, global::thx._BitMatrix.BitMatrix_Impl_.get_length(bits), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBitMatrix", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
			}
		}
		
		
		public virtual void testClone() {
			unchecked {
				global::Array<object> bits = global::thx._BitMatrix.BitMatrix_Impl_._new(new global::haxe.lang.Null<int>(2, true), new global::haxe.lang.Null<int>(3, true));
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 0, true);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 1, true);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 0, 2, true);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 0, false);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 1, false);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(bits, 1, 2, false);
				global::Array<object> clone = global::thx._BitMatrix.BitMatrix_Impl_.clone(bits);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(clone, 0, 1, false);
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(clone, 1, 1, true);
				global::utest.Assert.same("111,000", global::thx._BitMatrix.BitMatrix_Impl_.toString(bits, null), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
				global::utest.Assert.same("101,010", global::thx._BitMatrix.BitMatrix_Impl_.toString(clone, null), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testClone", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
			}
		}
		
		
		public virtual void testFromToString() {
			unchecked {
				global::utest.Assert.same("000,111,101,010", global::thx._BitMatrix.BitMatrix_Impl_.toString(global::thx._BitMatrix.BitMatrix_Impl_.fromString("000,111,101,010", null), null), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (65) )}));
			}
		}
		
		
		public virtual void testFromToBools() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{true, true}), new global::Array<object>(new object[]{false, false}), new global::Array<object>(new object[]{true, false}), new global::Array<object>(new object[]{false, true})}), global::thx._BitMatrix.BitMatrix_Impl_.toBools(global::thx._BitMatrix.BitMatrix_Impl_.fromBools(new global::Array<object>(new object[]{new global::Array<bool>(new bool[]{true, true}), new global::Array<bool>(new bool[]{false, false}), new global::Array<bool>(new bool[]{true, false}), new global::Array<bool>(new bool[]{false, true})}))), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToBools", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
			}
		}
		
		
		public virtual void testConcat() {
			unchecked {
				global::Array<object> b1 = global::thx._BitMatrix.BitMatrix_Impl_.fromString("000,111,101,010", null);
				global::Array<object> b2 = global::thx._BitMatrix.BitMatrix_Impl_.fromString("111,000,111,000", null);
				global::Array<object> b3 = global::thx._BitMatrix.BitMatrix_Impl_.concat(b1, b2);
				global::utest.Assert.same("000,111,101,010", global::thx._BitMatrix.BitMatrix_Impl_.toString(b1, null), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
				global::utest.Assert.same("111,000,111,000", global::thx._BitMatrix.BitMatrix_Impl_.toString(b2, null), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
				global::utest.Assert.same("000111,111000,101111,010000", global::thx._BitMatrix.BitMatrix_Impl_.toString(b3, null), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (79) )}));
				global::utest.Assert.same(4, global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(b1), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
				global::utest.Assert.same(4, global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(b2), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
				global::utest.Assert.same(4, global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(b3), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (82) )}));
				global::utest.Assert.same(3, global::thx._BitMatrix.BitMatrix_Impl_.get_length(b1), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
				global::utest.Assert.same(3, global::thx._BitMatrix.BitMatrix_Impl_.get_length(b2), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (84) )}));
				global::utest.Assert.same(6, global::thx._BitMatrix.BitMatrix_Impl_.get_length(b3), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
				global::utest.Assert.raises(( (( global::thx.TestBitMatrix_testConcat_87__Fun.__hx_current != null )) ? (global::thx.TestBitMatrix_testConcat_87__Fun.__hx_current) : (global::thx.TestBitMatrix_testConcat_87__Fun.__hx_current = ((global::thx.TestBitMatrix_testConcat_87__Fun) (new global::thx.TestBitMatrix_testConcat_87__Fun()) )) ), null, null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (87) )}));
			}
		}
		
		
		public virtual void testExpand() {
			unchecked {
				global::Array<object> b1 = global::thx._BitMatrix.BitMatrix_Impl_.fromString("000,111,101,010", null);
				global::Array<object> b2 = global::thx._BitMatrix.BitMatrix_Impl_.expand(b1, 1);
				global::Array<object> b3 = global::thx._BitMatrix.BitMatrix_Impl_.expand(b1, 3);
				global::utest.Assert.same("000,111,101,010", global::thx._BitMatrix.BitMatrix_Impl_.toString(b1, null), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExpand", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (98) )}));
				global::utest.Assert.same("000000,111111,110011,001100", global::thx._BitMatrix.BitMatrix_Impl_.toString(b2, null), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExpand", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
				global::utest.Assert.same("000000000000,111111111111,111100001111,000011110000", global::thx._BitMatrix.BitMatrix_Impl_.toString(b3, null), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExpand", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
			}
		}
		
		
		public virtual void testAnd() {
			unchecked {
				global::Array<object> actual = global::thx._BitMatrix.BitMatrix_Impl_.and(global::thx._BitMatrix.BitMatrix_Impl_.fromString("11,00", null), global::thx._BitMatrix.BitMatrix_Impl_.fromString("10,10", null));
				global::utest.Assert.isTrue(global::thx._BitMatrix.BitMatrix_Impl_.@equals(global::thx._BitMatrix.BitMatrix_Impl_.fromString("10,00", null), actual), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAnd", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (108) )}));
			}
		}
		
		
		public virtual void testOr() {
			unchecked {
				global::Array<object> actual = global::thx._BitMatrix.BitMatrix_Impl_.or(global::thx._BitMatrix.BitMatrix_Impl_.fromString("11,00", null), global::thx._BitMatrix.BitMatrix_Impl_.fromString("10,10", null));
				global::utest.Assert.isTrue(global::thx._BitMatrix.BitMatrix_Impl_.@equals(global::thx._BitMatrix.BitMatrix_Impl_.fromString("11,10", null), actual), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOr", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (116) )}));
			}
		}
		
		
		public virtual void testXor() {
			unchecked {
				global::Array<object> actual = global::thx._BitMatrix.BitMatrix_Impl_.xor(global::thx._BitMatrix.BitMatrix_Impl_.fromString("11,00", null), global::thx._BitMatrix.BitMatrix_Impl_.fromString("10,10", null));
				global::utest.Assert.isTrue(global::thx._BitMatrix.BitMatrix_Impl_.@equals(global::thx._BitMatrix.BitMatrix_Impl_.fromString("01,10", null), actual), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testXor", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (124) )}));
			}
		}
		
		
		public virtual void testNegate() {
			unchecked {
				global::Array<object> actual = global::thx._BitMatrix.BitMatrix_Impl_.negate(global::thx._BitMatrix.BitMatrix_Impl_.fromString("11,00", null));
				global::utest.Assert.isTrue(global::thx._BitMatrix.BitMatrix_Impl_.@equals(global::thx._BitMatrix.BitMatrix_Impl_.fromString("00,11", null), actual), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNegate", "thx.TestBitMatrix", "TestBitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 886708:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNegate", 886708)) );
					}
					
					
					case 1036639849:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testXor", 1036639849)) );
					}
					
					
					case 1429882389:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOr", 1429882389)) );
					}
					
					
					case 1035495845:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAnd", 1035495845)) );
					}
					
					
					case 1567044684:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testExpand", 1567044684)) );
					}
					
					
					case 1623478022:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testConcat", 1623478022)) );
					}
					
					
					case 1888206354:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromToBools", 1888206354)) );
					}
					
					
					case 952497064:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromToString", 952497064)) );
					}
					
					
					case 291852715:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testClone", 291852715)) );
					}
					
					
					case 829159484:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBitMatrix", 829159484)) );
					}
					
					
					case 1036140334:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNew", 1036140334)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 886708:
					{
						this.testNegate();
						break;
					}
					
					
					case 1036639849:
					{
						this.testXor();
						break;
					}
					
					
					case 1429882389:
					{
						this.testOr();
						break;
					}
					
					
					case 1035495845:
					{
						this.testAnd();
						break;
					}
					
					
					case 1567044684:
					{
						this.testExpand();
						break;
					}
					
					
					case 1623478022:
					{
						this.testConcat();
						break;
					}
					
					
					case 1888206354:
					{
						this.testFromToBools();
						break;
					}
					
					
					case 952497064:
					{
						this.testFromToString();
						break;
					}
					
					
					case 291852715:
					{
						this.testClone();
						break;
					}
					
					
					case 829159484:
					{
						this.testBitMatrix();
						break;
					}
					
					
					case 1036140334:
					{
						this.testNew();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBitMatrix_testBitMatrix_32__Fun : global::haxe.lang.Function {
		
		public TestBitMatrix_testBitMatrix_32__Fun(global::Array<object> bits) : base(0, 0) {
			this.bits = bits;
		}
		
		
		public override object __hx_invoke0_o() {
			unchecked {
				global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(this.bits, 3, 0, true);
				return null;
			}
		}
		
		
		public global::Array<object> bits;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestBitMatrix_testConcat_87__Fun : global::haxe.lang.Function {
		
		public TestBitMatrix_testConcat_87__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestBitMatrix_testConcat_87__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			global::thx._BitMatrix.BitMatrix_Impl_.concat(global::thx._BitMatrix.BitMatrix_Impl_.fromString("000,111", null), global::thx._BitMatrix.BitMatrix_Impl_.fromString("000,111,000", null));
			return null;
		}
		
		
	}
}


