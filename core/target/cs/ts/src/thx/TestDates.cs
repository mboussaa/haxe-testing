// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestDates : global::haxe.lang.HxObject {
		
		public TestDates(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestDates() {
			global::thx.TestDates.__hx_ctor_thx_TestDates(this);
		}
		
		
		public static void __hx_ctor_thx_TestDates(global::thx.TestDates __temp_me191) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestDates(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestDates();
		}
		
		
		public virtual void testCreate() {
			unchecked {
				global::haxe.lang.Function __temp_stmt23 = ((global::haxe.lang.Function) (( (( global::thx.TestDates_testCreate_35__Fun.__hx_current != null )) ? (global::thx.TestDates_testCreate_35__Fun.__hx_current) : (global::thx.TestDates_testCreate_35__Fun.__hx_current = ((global::thx.TestDates_testCreate_35__Fun) (new global::thx.TestDates_testCreate_35__Fun()) )) )) );
				object __temp_stmt24 = null;
				{
					global::Date __temp_odecl1 = new global::Date(2014, 11, 1, 0, 0, 0);
					global::Date __temp_odecl2 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(11, true), new global::haxe.lang.Null<int>(1, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
					__temp_stmt24 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl1, __temp_odecl2}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt25 = null;
				{
					global::Date __temp_odecl3 = new global::Date(2015, 3, 1, 0, 0, 0);
					global::Date __temp_odecl4 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(15, true), new global::haxe.lang.Null<int>(1, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
					__temp_stmt25 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl3, __temp_odecl4}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt26 = null;
				{
					global::Date __temp_odecl5 = new global::Date(2013, 11, 1, 0, 0, 0);
					global::Date __temp_odecl6 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(-1, true), new global::haxe.lang.Null<int>(1, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
					__temp_stmt26 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl5, __temp_odecl6}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt27 = null;
				{
					global::Date __temp_odecl7 = new global::Date(2014, 2, 4, 0, 0, 0);
					global::Date __temp_odecl8 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(32, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
					__temp_stmt27 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl7, __temp_odecl8}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt28 = null;
				{
					global::Date __temp_odecl9 = new global::Date(2013, 11, 31, 0, 0, 0);
					global::Date __temp_odecl10 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
					__temp_stmt28 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl9, __temp_odecl10}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt29 = null;
				{
					global::Date __temp_odecl11 = new global::Date(2014, 1, 2, 2, 0, 0);
					global::Date __temp_odecl12 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(26, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
					__temp_stmt29 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl11, __temp_odecl12}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt30 = null;
				{
					global::Date __temp_odecl13 = new global::Date(2013, 11, 31, 23, 0, 0);
					global::Date __temp_odecl14 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(-1, true), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
					__temp_stmt30 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl13, __temp_odecl14}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt31 = null;
				{
					global::Date __temp_odecl15 = new global::Date(2014, 1, 1, 1, 5, 0);
					global::Date __temp_odecl16 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(65, true), default(global::haxe.lang.Null<int>));
					__temp_stmt31 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl15, __temp_odecl16}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt32 = null;
				{
					global::Date __temp_odecl17 = new global::Date(2013, 11, 31, 23, 59, 0);
					global::Date __temp_odecl18 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(-1, true), default(global::haxe.lang.Null<int>));
					__temp_stmt32 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl17, __temp_odecl18}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt33 = null;
				{
					global::Date __temp_odecl19 = new global::Date(2014, 1, 1, 0, 1, 5);
					global::Date __temp_odecl20 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(65, true));
					__temp_stmt33 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl19, __temp_odecl20}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt34 = null;
				{
					global::Date __temp_odecl21 = new global::Date(2013, 11, 31, 23, 59, 59);
					global::Date __temp_odecl22 = global::thx.Dates.create(2014, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(-1, true));
					__temp_stmt34 = new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{__temp_odecl21, __temp_odecl22}, new int[]{}, new double[]{});
				}
				
				new global::Array<object>(new object[]{__temp_stmt24, __temp_stmt25, __temp_stmt26, __temp_stmt27, __temp_stmt28, __temp_stmt29, __temp_stmt30, __temp_stmt31, __temp_stmt32, __temp_stmt33, __temp_stmt34}).map<object>(__temp_stmt23);
			}
		}
		
		
		public virtual void testSnapNext() {
			unchecked {
				this.assertSnapNext("2014-01-01 10:07:00", "2014-01-01 10:06:10", global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
				this.assertSnapNext("2014-01-01 10:06:00", "2014-01-01 10:05:50", global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
				this.assertSnapNext("2014-01-01 11:00:00", "2014-01-01 10:10:10", global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
				this.assertSnapNext("2014-01-01 10:00:00", "2014-01-01 09:50:10", global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
				this.assertSnapNext("2014-01-02 00:00:00", "2014-01-01 10:00:00", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
				this.assertSnapNext("2014-01-01 00:00:00", "2013-12-31 20:00:00", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
				this.assertSnapNext("2014-12-21 00:00:00", "2014-12-17 11:00:00", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
				this.assertSnapNext("2014-12-21 00:00:00", "2014-12-18 00:00:00", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
				this.assertSnapNext("2015-01-01 00:00:00", "2014-12-12 00:00:00", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
				this.assertSnapNext("2015-01-01 00:00:00", "2014-12-18 00:00:00", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				this.assertSnapNext("2015-01-01 00:00:00", "2014-05-12 00:00:00", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (51) )}));
				this.assertSnapNext("2015-01-01 00:00:00", "2014-12-18 00:00:00", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (52) )}));
			}
		}
		
		
		public virtual void testSnapPrev() {
			unchecked {
				this.assertSnapPrev("2014-01-01 10:06:00", "2014-01-01 10:06:10", global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
				this.assertSnapPrev("2014-01-01 10:05:00", "2014-01-01 10:05:50", global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
				this.assertSnapPrev("2014-01-01 10:00:00", "2014-01-01 10:10:10", global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (58) )}));
				this.assertSnapPrev("2014-01-01 09:00:00", "2014-01-01 09:50:10", global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
				this.assertSnapPrev("2014-01-01 00:00:00", "2014-01-01 10:00:00", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
				this.assertSnapPrev("2013-12-31 00:00:00", "2013-12-31 20:00:00", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
				this.assertSnapPrev("2014-12-14 00:00:00", "2014-12-17 11:00:00", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (62) )}));
				this.assertSnapPrev("2014-12-14 00:00:00", "2014-12-18 00:00:00", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
				this.assertSnapPrev("2014-12-01 00:00:00", "2014-12-12 00:00:00", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (64) )}));
				this.assertSnapPrev("2014-12-01 00:00:00", "2014-12-18 00:00:00", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (65) )}));
				this.assertSnapPrev("2014-01-01 00:00:00", "2014-05-12 00:00:00", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (66) )}));
				this.assertSnapPrev("2014-01-01 00:00:00", "2014-12-18 00:00:00", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
			}
		}
		
		
		public virtual void testSnapTo() {
			unchecked {
				this.assertSnapTo("2014-01-01 10:06:00", "2014-01-01 10:06:10", global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (71) )}));
				this.assertSnapTo("2014-01-01 10:06:00", "2014-01-01 10:05:50", global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (72) )}));
				this.assertSnapTo("2014-01-01 10:00:00", "2014-01-01 10:10:10", global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (73) )}));
				this.assertSnapTo("2014-01-01 10:00:00", "2014-01-01 09:50:10", global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (74) )}));
				this.assertSnapTo("2014-01-01 00:00:00", "2014-01-01 10:00:00", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (75) )}));
				this.assertSnapTo("2014-01-01 00:00:00", "2013-12-31 20:00:00", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (76) )}));
				this.assertSnapTo("2014-12-14 00:00:00", "2014-12-17 11:00:00", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
				this.assertSnapTo("2014-12-21 00:00:00", "2014-12-18 00:00:00", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
				this.assertSnapTo("2014-12-01 00:00:00", "2014-12-12 00:00:00", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (79) )}));
				this.assertSnapTo("2015-01-01 00:00:00", "2014-12-18 00:00:00", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
				this.assertSnapTo("2014-01-01 00:00:00", "2014-05-12 00:00:00", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
				this.assertSnapTo("2015-01-01 00:00:00", "2014-12-18 00:00:00", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (82) )}));
			}
		}
		
		
		public virtual void assertSnapTo(string expected, string date, global::thx.TimePeriod period, object pos) {
			global::Date date1 = global::Date.fromString(date);
			double this1 = global::thx._Timestamp.Timestamp_Impl_.snapTo(((double) (( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (date1.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ), period);
			global::Date t = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
			global::Date _this = global::Date.fromString(expected);
			global::utest.Assert.floatEquals(( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ), ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (t.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ), default(global::haxe.lang.Null<double>), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", date), " to snap to "), expected), " for "), global::Std.@string(period)), " but it is "), t.toString()), pos);
		}
		
		
		public virtual void assertSnapPrev(string expected, string date, global::thx.TimePeriod period, object pos) {
			global::Date date1 = global::Date.fromString(date);
			double this1 = global::thx._Timestamp.Timestamp_Impl_.snapPrev(((double) (( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (date1.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ), period);
			global::Date t = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
			global::Date _this = global::Date.fromString(expected);
			global::utest.Assert.floatEquals(( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ), ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (t.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ), default(global::haxe.lang.Null<double>), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", date), " to snap before "), expected), " for "), global::Std.@string(period)), " but it is "), t.toString()), pos);
		}
		
		
		public virtual void assertSnapNext(string expected, string date, global::thx.TimePeriod period, object pos) {
			global::Date date1 = global::Date.fromString(date);
			double this1 = global::thx._Timestamp.Timestamp_Impl_.snapNext(((double) (( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (date1.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ), period);
			global::Date t = new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( ((double) (this1) ) * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
			global::Date _this = global::Date.fromString(expected);
			global::utest.Assert.floatEquals(( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ), ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (t.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ), default(global::haxe.lang.Null<double>), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", date), " to snap after "), expected), " for "), global::Std.@string(period)), " but it is "), t.toString()), pos);
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 325004611:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapNext", 325004611)) );
					}
					
					
					case 347825987:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapPrev", 347825987)) );
					}
					
					
					case 2122013131:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapTo", 2122013131)) );
					}
					
					
					case 713395287:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapTo", 713395287)) );
					}
					
					
					case 2107659471:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapPrev", 2107659471)) );
					}
					
					
					case 2084838095:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapNext", 2084838095)) );
					}
					
					
					case 352562414:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCreate", 352562414)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 325004611:
					{
						this.assertSnapNext(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 347825987:
					{
						this.assertSnapPrev(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 2122013131:
					{
						this.assertSnapTo(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 713395287:
					{
						this.testSnapTo();
						break;
					}
					
					
					case 2107659471:
					{
						this.testSnapPrev();
						break;
					}
					
					
					case 2084838095:
					{
						this.testSnapNext();
						break;
					}
					
					
					case 352562414:
					{
						this.testCreate();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestDates_testCreate_35__Fun : global::haxe.lang.Function {
		
		public TestDates_testCreate_35__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestDates_testCreate_35__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				global::utest.Assert.floatEquals(( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (((global::Date) (global::haxe.lang.Runtime.getField(o, "expected", 1076899448, true)) ).date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ), ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (((global::Date) (global::haxe.lang.Runtime.getField(o, "test", 1291438162, true)) ).date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ), default(global::haxe.lang.Null<double>), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", ((global::Date) (global::haxe.lang.Runtime.getField(o, "expected", 1076899448, true)) ).toString()), " but was  "), ((global::Date) (global::haxe.lang.Runtime.getField(o, "test", 1291438162, true)) ).toString()), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDates", "TestDates.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
				return null;
			}
		}
		
		
	}
}


