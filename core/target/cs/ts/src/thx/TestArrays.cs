// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays : global::haxe.lang.HxObject {
		
		public TestArrays(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestArrays() {
			global::thx.TestArrays.__hx_ctor_thx_TestArrays(this);
		}
		
		
		public static void __hx_ctor_thx_TestArrays(global::thx.TestArrays __temp_me178) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestArrays(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestArrays();
		}
		
		
		public virtual void testApplyIndexes() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{"A", "B", "C"}), global::thx.Arrays.applyIndexes<object>(((global::Array<object>) (new global::Array<object>(new object[]{"B", "C", "A"})) ), ((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 0})) ), ((global::haxe.lang.Null<bool>) (default(global::haxe.lang.Null<bool>)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testApplyIndexes", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 1, 2, 2, 3}), global::thx.Arrays.applyIndexes<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 3, 2, 1, 2})) ), ((global::Array<int>) (new global::Array<int>(new int[]{0, 4, 2, 0, 2})) ), new global::haxe.lang.Null<bool>(true, true)), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testApplyIndexes", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
			}
		}
		
		
		public virtual void testRank() {
			unchecked {
				global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{new global::Array<int>(new int[]{1, 2, 3}), new global::Array<int>(new int[]{3, 1, 2})}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{new global::Array<int>(new int[]{1, 2, 3}), new global::Array<int>(new int[]{1, 2, 3})}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{new global::Array<int>(new int[]{1, 2, 3}), new global::Array<int>(new int[]{3, 2, 1})}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{new global::Array<int>(new int[]{1, 2}), new global::Array<int>(new int[]{2, 1})}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{new global::Array<int>(new int[]{1, 2}), new global::Array<int>(new int[]{1, 2})}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{new global::Array<int>(new int[]{2}), new global::Array<int>(new int[]{2})}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{new global::Array<int>(new int[]{}), new global::Array<int>(new int[]{})}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{new global::Array<int>(new int[]{1, 1, 2, 2, 3}), new global::Array<int>(new int[]{1, 3, 2, 1, 2})}, new int[]{}, new double[]{})});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						object item = tests[_g];
						 ++ _g;
						global::Array<int> ranks = global::thx.Arrays.rank<int>(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(item, "test", 1291438162, true)) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Ints), "compare", 57219237)) ), ((global::haxe.lang.Null<bool>) (default(global::haxe.lang.Null<bool>)) ));
						global::utest.Assert.same(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(item, "expected", 1076899448, true)) ))) ), global::thx.Arrays.applyIndexes<int>(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(item, "test", 1291438162, true)) ))) ), ((global::Array<int>) (ranks) ), ((global::haxe.lang.Null<bool>) (default(global::haxe.lang.Null<bool>)) )), default(global::haxe.lang.Null<bool>), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(item, "expected", 1076899448, true)) ))) ))), " but it is "), global::Std.@string(ranks)), default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRank", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
					}
					
				}
				
			}
		}
		
		
		public virtual void testWith() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{1});
				global::utest.Assert.isFalse(( arr == ((global::Array<int>) (((global::Array<int>) (arr) ).concat(((global::Array<int>) (new global::Array<int>(new int[]{2})) ))) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWith", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), ((global::Array<int>) (((global::Array<int>) (new global::Array<int>(new int[]{1, 2})) ).concat(((global::Array<int>) (new global::Array<int>(new int[]{3})) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWith", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), ((global::Array<int>) (new global::Array<int>(new int[]{1}).concat(((global::Array<int>) (new global::Array<int>(new int[]{2, 3})) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWith", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), global::thx.Arrays.withInsert<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 3})) ), ((int) (2) ), ((int) (1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWith", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3, 4, 5}), global::thx.Arrays.withSlice<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 3, 4, 5})) ), ((global::Array<int>) (new global::Array<int>(new int[]{3, 4})) ), ((int) (2) ), new global::haxe.lang.Null<int>(2, true)), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWith", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3, 4, 5}), global::thx.Arrays.withSlice<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 5})) ), ((global::Array<int>) (new global::Array<int>(new int[]{3, 4})) ), ((int) (2) ), ((global::haxe.lang.Null<int>) (default(global::haxe.lang.Null<int>)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWith", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
			}
		}
		
		
		public virtual void testCreate() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{2, 2, 2}), global::thx.Arrays.create<int>(((int) (3) ), ((int) (2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (54) )}));
			}
		}
		
		
		public virtual void testEach() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{4, 5, 6});
				int[] sum = new int[]{0};
				global::thx.Arrays.each<int>(((global::Array<int>) (arr) ), ((global::haxe.lang.Function) (new global::thx.TestArrays_testEach_60__Fun(sum)) ));
				global::utest.Assert.same(15, sum[0], default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEach", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
			}
		}
		
		
		public virtual void testEachi() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{4, 5, 6});
				int[] sum = new int[]{0};
				global::Array<int> indices = new global::Array<int>(new int[]{});
				global::thx.Arrays.eachi<int>(((global::Array<int>) (arr) ), ((global::haxe.lang.Function) (new global::thx.TestArrays_testEachi_70__Fun(sum, indices)) ));
				global::utest.Assert.same(15, sum[0], default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEachi", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (74) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{0, 1, 2}), indices, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEachi", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (75) )}));
			}
		}
		
		
		public virtual void testMap() {
		}
		
		
		public virtual void testMapi() {
			unchecked {
				global::Array<int> input = new global::Array<int>(new int[]{4, 5, 6});
				global::Array<int> @is = new global::Array<int>(new int[]{});
				global::utest.Assert.same(new global::Array<object>(new object[]{8, 10, 12}), global::thx.Arrays.mapi<int, int>(((global::Array<int>) (input) ), ((global::haxe.lang.Function) (new global::thx.TestArrays_testMapi_89__Fun(@is)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMapi", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (93) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{0, 1, 2}), @is, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMapi", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (94) )}));
			}
		}
		
		
		public virtual void testCrossMulti() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 3, 5}), new global::Array<object>(new object[]{2, 3, 5}), new global::Array<object>(new object[]{1, 4, 5}), new global::Array<object>(new object[]{2, 4, 5}), new global::Array<object>(new object[]{1, 3, 6}), new global::Array<object>(new object[]{2, 3, 6}), new global::Array<object>(new object[]{1, 4, 6}), new global::Array<object>(new object[]{2, 4, 6})}), global::thx.Arrays.crossMulti<int>(((global::Array<object>) (new global::Array<object>(new object[]{new global::Array<int>(new int[]{1, 2}), new global::Array<int>(new int[]{3, 4}), new global::Array<int>(new int[]{5, 6})})) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCrossMulti", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
			}
		}
		
		
		public virtual void testMapField() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97}, new double[]{((double) (2) )}), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97}, new double[]{((double) (3) )})}).map<int>(((global::haxe.lang.Function) (( (( global::thx.TestArrays_testMapField_104__Fun.__hx_current != null )) ? (global::thx.TestArrays_testMapField_104__Fun.__hx_current) : (global::thx.TestArrays_testMapField_104__Fun.__hx_current = ((global::thx.TestArrays_testMapField_104__Fun) (new global::thx.TestArrays_testMapField_104__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMapField", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (105) )}));
			}
		}
		
		
		public virtual void testMapFieldOnFunction() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{4, 6, 8}), new global::Array<object>(new object[]{new global::thx._TestArrays.Sample(((int) (2) )), new global::thx._TestArrays.Sample(((int) (3) )), new global::thx._TestArrays.Sample(((int) (4) ))}).map<int>(((global::haxe.lang.Function) (( (( global::thx.TestArrays_testMapFieldOnFunction_113__Fun.__hx_current != null )) ? (global::thx.TestArrays_testMapFieldOnFunction_113__Fun.__hx_current) : (global::thx.TestArrays_testMapFieldOnFunction_113__Fun.__hx_current = ((global::thx.TestArrays_testMapFieldOnFunction_113__Fun) (new global::thx.TestArrays_testMapFieldOnFunction_113__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMapFieldOnFunction", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (114) )}));
			}
		}
		
		
		public virtual void testUsingMapField() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97}, new double[]{((double) (2) )}), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97}, new double[]{((double) (3) )})}).map<int>(((global::haxe.lang.Function) (( (( global::thx.TestArrays_testUsingMapField_119__Fun.__hx_current != null )) ? (global::thx.TestArrays_testUsingMapField_119__Fun.__hx_current) : (global::thx.TestArrays_testUsingMapField_119__Fun.__hx_current = ((global::thx.TestArrays_testUsingMapField_119__Fun) (new global::thx.TestArrays_testUsingMapField_119__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUsingMapField", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (120) )}));
			}
		}
		
		
		public virtual void testUsingMapFieldiOnFunction() {
			unchecked {
				global::Array<object> _e = new global::Array<object>(new object[]{new global::thx._TestArrays.Sample(((int) (2) )), new global::thx._TestArrays.Sample(((int) (3) )), new global::thx._TestArrays.Sample(((int) (4) ))});
				global::utest.Assert.same(new global::Array<object>(new object[]{0, 3, 8}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) ((new global::thx.TestArrays_testUsingMapFieldiOnFunction_126__Fun(_e)).__hx_invoke1_o(default(double), ( (( global::thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun.__hx_current != null )) ? (global::thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun.__hx_current) : (global::thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun.__hx_current = ((global::thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun) (new global::thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun()) )) ))) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUsingMapFieldiOnFunction", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (124) )}));
			}
		}
		
		
		public virtual void testFilterFn() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 3, 5}), new global::Array<int>(new int[]{1, 2, 3, 4, 5, 6}).filter(( (( global::thx.TestArrays_testFilterFn_135__Fun.__hx_current != null )) ? (global::thx.TestArrays_testFilterFn_135__Fun.__hx_current) : (global::thx.TestArrays_testFilterFn_135__Fun.__hx_current = ((global::thx.TestArrays_testFilterFn_135__Fun) (new global::thx.TestArrays_testFilterFn_135__Fun()) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFilterFn", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (135) )}));
			}
		}
		
		
		public virtual void testFind() {
			unchecked {
				global::utest.Assert.@equals(3, (global::thx.Arrays.find<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 3, 5, 7, 9})) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testFind_139__Fun.__hx_current != null )) ? (global::thx.TestArrays_testFind_139__Fun.__hx_current) : (global::thx.TestArrays_testFind_139__Fun.__hx_current = ((global::thx.TestArrays_testFind_139__Fun) (new global::thx.TestArrays_testFind_139__Fun()) )) )) ))).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFind", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (139) )}));
			}
		}
		
		
		public virtual void testFindOption() {
			unchecked {
				global::utest.Assert.@equals(3, (global::thx.Arrays.findi<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 3, 5, 7, 9})) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testFindOption_143__Fun.__hx_current != null )) ? (global::thx.TestArrays_testFindOption_143__Fun.__hx_current) : (global::thx.TestArrays_testFindOption_143__Fun.__hx_current = ((global::thx.TestArrays_testFindOption_143__Fun) (new global::thx.TestArrays_testFindOption_143__Fun()) )) )) ))).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFindOption", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (143) )}));
			}
		}
		
		
		public virtual void testFindLast() {
			unchecked {
				global::utest.Assert.@equals(9, (global::thx.Arrays.findLast<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 3, 5, 7, 9})) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testFindLast_147__Fun.__hx_current != null )) ? (global::thx.TestArrays_testFindLast_147__Fun.__hx_current) : (global::thx.TestArrays_testFindLast_147__Fun.__hx_current = ((global::thx.TestArrays_testFindLast_147__Fun) (new global::thx.TestArrays_testFindLast_147__Fun()) )) )) ))).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFindLast", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (147) )}));
			}
		}
		
		
		public virtual void testFindFn() {
			unchecked {
				global::utest.Assert.@equals(3, (global::thx.Arrays.find<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 3, 5, 7, 9})) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testFindFn_151__Fun.__hx_current != null )) ? (global::thx.TestArrays_testFindFn_151__Fun.__hx_current) : (global::thx.TestArrays_testFindFn_151__Fun.__hx_current = ((global::thx.TestArrays_testFindFn_151__Fun) (new global::thx.TestArrays_testFindFn_151__Fun()) )) )) ))).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFindFn", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (151) )}));
			}
		}
		
		
		public virtual void testFindFnLast() {
			unchecked {
				global::utest.Assert.@equals(9, (global::thx.Arrays.findLast<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 3, 5, 7, 9})) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testFindFnLast_155__Fun.__hx_current != null )) ? (global::thx.TestArrays_testFindFnLast_155__Fun.__hx_current) : (global::thx.TestArrays_testFindFnLast_155__Fun.__hx_current = ((global::thx.TestArrays_testFindFnLast_155__Fun) (new global::thx.TestArrays_testFindFnLast_155__Fun()) )) )) ))).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFindFnLast", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (155) )}));
			}
		}
		
		
		public virtual void testIntersperse() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3, 2, 5}), global::thx.Arrays.intersperse<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 3, 5})) ), ((int) (2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntersperse", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (159) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1}), global::thx.Arrays.intersperse<int>(((global::Array<int>) (new global::Array<int>(new int[]{1})) ), ((int) (2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntersperse", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (160) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{}), global::thx.Arrays.intersperse<int>(((global::Array<int>) (new global::Array<int>(new int[]{})) ), ((int) (2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntersperse", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (161) )}));
			}
		}
		
		
		public virtual void testFn() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{2, 4, 8}), new global::Array<int>(new int[]{1, 2, 4}).map<int>(((global::haxe.lang.Function) (( (( global::thx.TestArrays_testFn_165__Fun.__hx_current != null )) ? (global::thx.TestArrays_testFn_165__Fun.__hx_current) : (global::thx.TestArrays_testFn_165__Fun.__hx_current = ((global::thx.TestArrays_testFn_165__Fun) (new global::thx.TestArrays_testFn_165__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFn", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (165) )}));
			}
		}
		
		
		public virtual void testMinFloats() {
			unchecked {
				global::utest.Assert.floatEquals(0.5, (global::thx.ArrayFloats.min(new global::Array<double>(new double[]{1.5, 0.5, 1.0}))).@value, default(global::haxe.lang.Null<double>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMinFloats", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (169) )}));
			}
		}
		
		
		public virtual void testMinInts() {
			unchecked {
				global::utest.Assert.@equals(1, (global::thx.ArrayInts.min(new global::Array<int>(new int[]{2, 5, 1}))).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMinInts", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (173) )}));
			}
		}
		
		
		public virtual void testMaxFloats() {
			unchecked {
				global::utest.Assert.floatEquals(1.5, (global::thx.ArrayFloats.max(new global::Array<double>(new double[]{1.5, 0.5, 1.0}))).@value, default(global::haxe.lang.Null<double>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMaxFloats", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (177) )}));
			}
		}
		
		
		public virtual void testMaxInts() {
			unchecked {
				global::utest.Assert.@equals(5, (global::thx.ArrayInts.max(new global::Array<int>(new int[]{2, 5, 1}))).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMaxInts", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (181) )}));
			}
		}
		
		
		public virtual void testAverageFloats() {
			unchecked {
				global::utest.Assert.floatEquals(1.0, global::thx.ArrayFloats.average(new global::Array<double>(new double[]{2.5, 0.5, 0.0})), default(global::haxe.lang.Null<double>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAverageFloats", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (185) )}));
			}
		}
		
		
		public virtual void testAverageInts() {
			unchecked {
				global::utest.Assert.@equals(3.0, (global::thx.ArrayInts.average(new global::Array<int>(new int[]{2, 6, 1}))).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAverageInts", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (189) )}));
			}
		}
		
		
		public virtual void testMinString() {
			unchecked {
				global::utest.Assert.@equals("A", global::thx.ArrayStrings.min(new global::Array<object>(new object[]{"B", "C", "A"})), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMinString", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (193) )}));
			}
		}
		
		
		public virtual void testMaxStrings() {
			unchecked {
				global::utest.Assert.@equals("C", global::thx.ArrayStrings.max(new global::Array<object>(new object[]{"B", "C", "A"})), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMaxStrings", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (197) )}));
			}
		}
		
		
		public virtual void testCompactFloats() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{1.5, 0.5, 1.0}), global::thx.ArrayFloats.compact(new global::Array<object>(new object[]{global::Math.NaN, 1.5, (default(global::haxe.lang.Null<double>)).toDynamic(), 0.5, 1.0})), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompactFloats", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (201) )}));
			}
		}
		
		
		public virtual void testCompactStrings() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{"B", "C", "A"}), global::thx.ArrayStrings.compact(new global::Array<object>(new object[]{"B", "", "C", null, "A", ""})), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompactStrings", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (205) )}));
			}
		}
		
		
		public virtual void testFilterNullInt() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 0, 2}), global::thx.Arrays.filterNull<int>(((global::Array<object>) (new global::Array<object>(new object[]{(default(global::haxe.lang.Null<int>)).toDynamic(), 1, (default(global::haxe.lang.Null<int>)).toDynamic(), 0, 2})) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFilterNullInt", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (209) )}));
			}
		}
		
		
		public virtual void testOrder() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{2, 3, 1});
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), global::thx.Arrays.order<int>(((global::Array<int>) (arr) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testOrder_214__Fun.__hx_current != null )) ? (global::thx.TestArrays_testOrder_214__Fun.__hx_current) : (global::thx.TestArrays_testOrder_214__Fun.__hx_current = ((global::thx.TestArrays_testOrder_214__Fun) (new global::thx.TestArrays_testOrder_214__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrder", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (214) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{2, 3, 1}), arr, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrder", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (215) )}));
			}
		}
		
		
		public virtual void testOrderFn() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{2, 3, 1});
				global::Array<int> _e = arr;
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) ((new global::thx.TestArrays_testOrderFn_220__Fun(_e)).__hx_invoke1_o(default(double), ( (( global::thx.TestArrays_testOrderFn_220__Fun_0.__hx_current != null )) ? (global::thx.TestArrays_testOrderFn_220__Fun_0.__hx_current) : (global::thx.TestArrays_testOrderFn_220__Fun_0.__hx_current = ((global::thx.TestArrays_testOrderFn_220__Fun_0) (new global::thx.TestArrays_testOrderFn_220__Fun_0()) )) ))) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrderFn", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (220) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{2, 3, 1}), arr, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrderFn", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (221) )}));
			}
		}
		
		
		public virtual void testOrderFnObjectOfInt() {
			unchecked {
				object obj1 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{5343647}, new double[]{((double) (1) )});
				object obj2 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{5343647}, new double[]{((double) (2) )});
				object obj3 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{5343647}, new double[]{((double) (3) )});
				global::Array<object> arr = new global::Array<object>(new object[]{obj2, obj3, obj1});
				global::Array<object> _e = arr;
				global::utest.Assert.same(new global::Array<object>(new object[]{obj1, obj2, obj3}), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) ((new global::thx.TestArrays_testOrderFnObjectOfInt_229__Fun(_e)).__hx_invoke1_o(default(double), ( (( global::thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0.__hx_current != null )) ? (global::thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0.__hx_current) : (global::thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0.__hx_current = ((global::thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0) (new global::thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0()) )) ))) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrderFnObjectOfInt", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (229) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{obj2, obj3, obj1}), arr, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrderFnObjectOfInt", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (230) )}));
			}
		}
		
		
		public virtual void testOrderFnObjectOfFloat() {
			unchecked {
				object obj1 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{5343647}, new double[]{1.0});
				object obj2 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{5343647}, new double[]{2.0});
				object obj3 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{5343647}, new double[]{3.0});
				global::Array<object> arr = new global::Array<object>(new object[]{obj2, obj3, obj1});
				global::Array<object> _e = arr;
				global::utest.Assert.same(new global::Array<object>(new object[]{obj1, obj2, obj3}), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) ((new global::thx.TestArrays_testOrderFnObjectOfFloat_238__Fun(_e)).__hx_invoke1_o(default(double), ( (( global::thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0.__hx_current != null )) ? (global::thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0.__hx_current) : (global::thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0.__hx_current = ((global::thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0) (new global::thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0()) )) ))) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrderFnObjectOfFloat", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (238) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{obj2, obj3, obj1}), arr, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrderFnObjectOfFloat", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (239) )}));
			}
		}
		
		
		public virtual void testSortFn() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{2, 3, 1});
				arr.sort(( (( global::thx.TestArrays_testSortFn_245__Fun.__hx_current != null )) ? (global::thx.TestArrays_testSortFn_245__Fun.__hx_current) : (global::thx.TestArrays_testSortFn_245__Fun.__hx_current = ((global::thx.TestArrays_testSortFn_245__Fun) (new global::thx.TestArrays_testSortFn_245__Fun()) )) ));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), arr, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSortFn", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (246) )}));
			}
		}
		
		
		public virtual void testContains() {
			unchecked {
				global::utest.Assert.isTrue(global::thx.Arrays.contains<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 3})) ), ((int) (2) ), ((global::haxe.lang.Function) (null) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (251) )}));
				global::utest.Assert.isFalse(global::thx.Arrays.contains<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 3})) ), ((int) (4) ), ((global::haxe.lang.Function) (null) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (252) )}));
			}
		}
		
		
		public virtual void testContainsAll() {
			unchecked {
				global::utest.Assert.isTrue(global::thx.Arrays.containsAll<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 3})) ), ((object) (new global::Array<int>(new int[]{3, 1, 2})) ), ((global::haxe.lang.Function) (null) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAll", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (256) )}));
				global::utest.Assert.isFalse(global::thx.Arrays.containsAll<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 3})) ), ((object) (new global::Array<int>(new int[]{3, 1, 2, 4})) ), ((global::haxe.lang.Function) (null) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAll", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (257) )}));
			}
		}
		
		
		public virtual void testContainsAny() {
			unchecked {
				global::utest.Assert.isTrue(global::thx.Arrays.containsAny<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 3})) ), ((object) (new global::Array<int>(new int[]{2, 3, 4})) ), ((global::haxe.lang.Function) (null) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (261) )}));
				global::utest.Assert.isFalse(global::thx.Arrays.containsAny<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 3})) ), ((object) (new global::Array<int>(new int[]{4, 5, 6})) ), ((global::haxe.lang.Function) (null) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (262) )}));
			}
		}
		
		
		public virtual void testCount() {
			unchecked {
				global::haxe.ds.IntMap<int> map = global::thx.Arrays.count_Int(new global::Array<int>(new int[]{2, 3, 2, 1, 4, 2, 3}));
				global::utest.Assert.@equals(3, (map.@get(2)).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (268) )}));
				global::utest.Assert.@equals(2, (map.@get(3)).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (269) )}));
				global::utest.Assert.@equals(1, (map.@get(1)).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (270) )}));
				global::utest.Assert.@equals(1, (map.@get(4)).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (271) )}));
			}
		}
		
		
		public virtual void testGroupBy() {
			unchecked {
				global::haxe.ds.IntMap<object> map = global::thx.Arrays.groupBy_Int_Float(new global::Array<double>(new double[]{2.1, 3.5, 2.0, 1.4, 2.7, 3.0}), ( (( global::thx.TestArrays_testGroupBy_276__Fun.__hx_current != null )) ? (global::thx.TestArrays_testGroupBy_276__Fun.__hx_current) : (global::thx.TestArrays_testGroupBy_276__Fun.__hx_current = ((global::thx.TestArrays_testGroupBy_276__Fun) (new global::thx.TestArrays_testGroupBy_276__Fun()) )) ));
				global::utest.Assert.same(new global::Array<object>(new object[]{2.1, 2.0, 2.7}), ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) ((map.@get(2)).@value) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testGroupBy", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (277) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{3.5, 3.0}), ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) ((map.@get(3)).@value) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testGroupBy", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (278) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1.4}), ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) ((map.@get(1)).@value) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testGroupBy", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (279) )}));
			}
		}
		
		
		public virtual void testGroupByArray() {
			unchecked {
				global::haxe.ds.IntMap<object> map = global::thx.Arrays.groupBy_Int_Array_Int(new global::Array<object>(new object[]{new global::Array<int>(new int[]{0, 1}), new global::Array<int>(new int[]{0, 2}), new global::Array<int>(new int[]{1, 1})}), ( (( global::thx.TestArrays_testGroupByArray_284__Fun.__hx_current != null )) ? (global::thx.TestArrays_testGroupByArray_284__Fun.__hx_current) : (global::thx.TestArrays_testGroupByArray_284__Fun.__hx_current = ((global::thx.TestArrays_testGroupByArray_284__Fun) (new global::thx.TestArrays_testGroupByArray_284__Fun()) )) ));
				global::haxe.ds.IntMap<object> _g = new global::haxe.ds.IntMap<object>();
				_g.@set(0, new global::Array<object>(new object[]{new global::Array<int>(new int[]{0, 1}), new global::Array<int>(new int[]{0, 2})}));
				_g.@set(1, new global::Array<object>(new object[]{new global::Array<int>(new int[]{1, 1})}));
				global::utest.Assert.same(_g, map, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testGroupByArray", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (285) )}));
			}
		}
		
		
		public virtual void testGroupByInstance() {
			unchecked {
				global::haxe.ds.IntMap<object> map = global::thx.Arrays.groupBy_Int_thx__TestArrays_Sample(new global::Array<object>(new object[]{new global::thx._TestArrays.Sample(((int) (1) )), new global::thx._TestArrays.Sample(((int) (1) )), new global::thx._TestArrays.Sample(((int) (2) ))}), ( (( global::thx.TestArrays_testGroupByInstance_293__Fun.__hx_current != null )) ? (global::thx.TestArrays_testGroupByInstance_293__Fun.__hx_current) : (global::thx.TestArrays_testGroupByInstance_293__Fun.__hx_current = ((global::thx.TestArrays_testGroupByInstance_293__Fun) (new global::thx.TestArrays_testGroupByInstance_293__Fun()) )) ));
				global::haxe.ds.IntMap<object> _g = new global::haxe.ds.IntMap<object>();
				_g.@set(1, new global::Array<object>(new object[]{new global::thx._TestArrays.Sample(((int) (1) )), new global::thx._TestArrays.Sample(((int) (1) ))}));
				_g.@set(2, new global::Array<object>(new object[]{new global::thx._TestArrays.Sample(((int) (2) ))}));
				global::utest.Assert.same(_g, map, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testGroupByInstance", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (294) )}));
			}
		}
		
		
		public virtual void testMapRight() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{6, 4, 2}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::thx.Arrays.mapRight<int, object>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 3})) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testMapRight_313__Fun.__hx_current != null )) ? (global::thx.TestArrays_testMapRight_313__Fun.__hx_current) : (global::thx.TestArrays_testMapRight_313__Fun.__hx_current = ((global::thx.TestArrays_testMapRight_313__Fun) (new global::thx.TestArrays_testMapRight_313__Fun()) )) )) ))) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMapRight", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (313) )}));
			}
		}
		
		
		public virtual void testFnRight() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{6, 4, 2}), global::thx.Arrays.mapRight<int, int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 3})) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testFnRight_317__Fun.__hx_current != null )) ? (global::thx.TestArrays_testFnRight_317__Fun.__hx_current) : (global::thx.TestArrays_testFnRight_317__Fun.__hx_current = ((global::thx.TestArrays_testFnRight_317__Fun) (new global::thx.TestArrays_testFnRight_317__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFnRight", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (317) )}));
			}
		}
		
		
		public virtual void testReduceRight() {
			unchecked {
				global::Array<object> array = new global::Array<object>(new object[]{"a", "b", "c"});
				string initial = "";
				int i = array.length;
				while ((  -- i >= 0 )) {
					initial = global::haxe.lang.Runtime.concat(initial, global::haxe.lang.Runtime.toString(((global::Array<object>) (array) )[i]).ToUpperInvariant());
				}
				
				global::utest.Assert.same("CBA", initial, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReduceRight", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (321) )}));
			}
		}
		
		
		public virtual void testRotate() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{"a0", "a1", "a2"}), new global::Array<object>(new object[]{"b0", "b1", "b2"})}), global::thx.Arrays.rotate<object>(((global::Array<object>) (new global::Array<object>(new object[]{new global::Array<object>(new object[]{"a0", "b0"}), new global::Array<object>(new object[]{"a1", "b1"}), new global::Array<object>(new object[]{"a2", "b2"})})) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRotate", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (325) )}));
			}
		}
		
		
		public virtual void testDistinct() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{}), global::thx.Arrays.distinct<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (new global::Array<object>(new object[]{})) ))) ), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (333) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1}), global::thx.Arrays.distinct<int>(((global::Array<int>) (new global::Array<int>(new int[]{1})) ), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (334) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{"one"}), global::thx.Arrays.distinct<object>(((global::Array<object>) (new global::Array<object>(new object[]{"one"})) ), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (335) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1}), global::thx.Arrays.distinct<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 1})) ), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (336) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2}), global::thx.Arrays.distinct<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2})) ), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (337) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{"one", "two"}), global::thx.Arrays.distinct<object>(((global::Array<object>) (new global::Array<object>(new object[]{"one", "two"})) ), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (338) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3, 4, 5, 6, 7, 8}), global::thx.Arrays.distinct<int>(((global::Array<int>) (new global::Array<int>(new int[]{1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8})) ), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (339) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{8, 1, 2, 7, 3, 4, 5, 6}), global::thx.Arrays.distinct<int>(((global::Array<int>) (new global::Array<int>(new int[]{8, 8, 1, 2, 7, 2, 3, 4, 5, 1, 5, 6, 7, 8, 2, 8})) ), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (340) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{"one", "two", "three"}), global::thx.Arrays.distinct<object>(((global::Array<object>) (new global::Array<object>(new object[]{"one", "two", "one", "two", "three", "one", "two"})) ), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (341) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{false, true}), global::thx.Arrays.distinct<bool>(((global::Array<bool>) (new global::Array<bool>(new bool[]{false, false, true, false, true, true})) ), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (342) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{5343647}, new object[]{"one"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{5343647}, new object[]{"two"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{5343647}, new object[]{"three"}, new int[]{}, new double[]{})}), global::thx.Arrays.distinct<object>(((global::Array<object>) (new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{5343647}, new object[]{"one"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{5343647}, new object[]{"two"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{5343647}, new object[]{"one"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{5343647}, new object[]{"three"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{5343647}, new object[]{"two"}, new int[]{}, new double[]{})})) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testDistinct_345__Fun.__hx_current != null )) ? (global::thx.TestArrays_testDistinct_345__Fun.__hx_current) : (global::thx.TestArrays_testDistinct_345__Fun.__hx_current = ((global::thx.TestArrays_testDistinct_345__Fun) (new global::thx.TestArrays_testDistinct_345__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistinct", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (348) )}));
			}
		}
		
		
		public virtual void testSplit() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0});
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0})}), global::thx.Arrays.split<int>(((global::Array<int>) (arr) ), ((int) (1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplit", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (353) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3, 4, 5}), new global::Array<object>(new object[]{6, 7, 8, 9, 0})}), global::thx.Arrays.split<int>(((global::Array<int>) (arr) ), ((int) (2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplit", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (354) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3, 4}), new global::Array<object>(new object[]{5, 6, 7, 8}), new global::Array<object>(new object[]{9, 0})}), global::thx.Arrays.split<int>(((global::Array<int>) (arr) ), ((int) (3) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplit", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (355) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3}), new global::Array<object>(new object[]{4, 5, 6}), new global::Array<object>(new object[]{7, 8, 9}), new global::Array<object>(new object[]{0})}), global::thx.Arrays.split<int>(((global::Array<int>) (arr) ), ((int) (4) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplit", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (356) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1}), new global::Array<object>(new object[]{2}), new global::Array<object>(new object[]{3}), new global::Array<object>(new object[]{4}), new global::Array<object>(new object[]{5}), new global::Array<object>(new object[]{6}), new global::Array<object>(new object[]{7}), new global::Array<object>(new object[]{8}), new global::Array<object>(new object[]{9}), new global::Array<object>(new object[]{0})}), global::thx.Arrays.split<int>(((global::Array<int>) (arr) ), ((int) (10) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplit", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (357) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1}), new global::Array<object>(new object[]{2}), new global::Array<object>(new object[]{3}), new global::Array<object>(new object[]{4}), new global::Array<object>(new object[]{5}), new global::Array<object>(new object[]{6}), new global::Array<object>(new object[]{7}), new global::Array<object>(new object[]{8}), new global::Array<object>(new object[]{9}), new global::Array<object>(new object[]{0})}), global::thx.Arrays.split<int>(((global::Array<int>) (arr) ), ((int) (20) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplit", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (358) )}));
			}
		}
		
		
		public virtual void testSplitBy() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0});
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1}), new global::Array<object>(new object[]{2}), new global::Array<object>(new object[]{3}), new global::Array<object>(new object[]{4}), new global::Array<object>(new object[]{5}), new global::Array<object>(new object[]{6}), new global::Array<object>(new object[]{7}), new global::Array<object>(new object[]{8}), new global::Array<object>(new object[]{9}), new global::Array<object>(new object[]{0})}), global::thx.Arrays.splitBy<int>(((global::Array<int>) (arr) ), ((int) (1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitBy", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (363) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2}), new global::Array<object>(new object[]{3, 4}), new global::Array<object>(new object[]{5, 6}), new global::Array<object>(new object[]{7, 8}), new global::Array<object>(new object[]{9, 0})}), global::thx.Arrays.splitBy<int>(((global::Array<int>) (arr) ), ((int) (2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitBy", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (364) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3}), new global::Array<object>(new object[]{4, 5, 6}), new global::Array<object>(new object[]{7, 8, 9}), new global::Array<object>(new object[]{0})}), global::thx.Arrays.splitBy<int>(((global::Array<int>) (arr) ), ((int) (3) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitBy", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (365) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3, 4}), new global::Array<object>(new object[]{5, 6, 7, 8}), new global::Array<object>(new object[]{9, 0})}), global::thx.Arrays.splitBy<int>(((global::Array<int>) (arr) ), ((int) (4) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitBy", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (366) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0})}), global::thx.Arrays.splitBy<int>(((global::Array<int>) (arr) ), ((int) (10) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitBy", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (367) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0})}), global::thx.Arrays.splitBy<int>(((global::Array<int>) (arr) ), ((int) (20) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitBy", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (368) )}));
			}
		}
		
		
		public virtual void testSplitByPad() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0});
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1}), new global::Array<object>(new object[]{2}), new global::Array<object>(new object[]{3}), new global::Array<object>(new object[]{4}), new global::Array<object>(new object[]{5}), new global::Array<object>(new object[]{6}), new global::Array<object>(new object[]{7}), new global::Array<object>(new object[]{8}), new global::Array<object>(new object[]{9}), new global::Array<object>(new object[]{0})}), global::thx.Arrays.splitByPad<int>(((global::Array<int>) (arr) ), ((int) (1) ), ((int) (0) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitByPad", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (373) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2}), new global::Array<object>(new object[]{3, 4}), new global::Array<object>(new object[]{5, 6}), new global::Array<object>(new object[]{7, 8}), new global::Array<object>(new object[]{9, 0})}), global::thx.Arrays.splitByPad<int>(((global::Array<int>) (arr) ), ((int) (2) ), ((int) (0) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitByPad", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (374) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3}), new global::Array<object>(new object[]{4, 5, 6}), new global::Array<object>(new object[]{7, 8, 9}), new global::Array<object>(new object[]{0, 0, 0})}), global::thx.Arrays.splitByPad<int>(((global::Array<int>) (arr) ), ((int) (3) ), ((int) (0) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitByPad", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (375) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3, 4}), new global::Array<object>(new object[]{5, 6, 7, 8}), new global::Array<object>(new object[]{9, 0, 0, 0})}), global::thx.Arrays.splitByPad<int>(((global::Array<int>) (arr) ), ((int) (4) ), ((int) (0) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitByPad", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (376) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0})}), global::thx.Arrays.splitByPad<int>(((global::Array<int>) (arr) ), ((int) (10) ), ((int) (0) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitByPad", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (377) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{new global::Array<object>(new object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})}), global::thx.Arrays.splitByPad<int>(((global::Array<int>) (arr) ), ((int) (20) ), ((int) (0) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSplitByPad", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (378) )}));
			}
		}
		
		
		public virtual void testTraverseOption() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{1, 2, 3, 4, 5});
				global::utest.Assert.same(global::haxe.ds.Option.None, global::thx.Arrays.traverseOption<int, object>(((global::Array<int>) (arr) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testTraverseOption_383__Fun.__hx_current != null )) ? (global::thx.TestArrays_testTraverseOption_383__Fun.__hx_current) : (global::thx.TestArrays_testTraverseOption_383__Fun.__hx_current = ((global::thx.TestArrays_testTraverseOption_383__Fun) (new global::thx.TestArrays_testTraverseOption_383__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTraverseOption", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (385) )}));
				global::utest.Assert.same(global::haxe.ds.Option.Some(arr), global::thx.Arrays.traverseOption<int, object>(((global::Array<int>) (arr) ), ((global::haxe.lang.Function) (( (( global::thx.TestArrays_testTraverseOption_386__Fun.__hx_current != null )) ? (global::thx.TestArrays_testTraverseOption_386__Fun.__hx_current) : (global::thx.TestArrays_testTraverseOption_386__Fun.__hx_current = ((global::thx.TestArrays_testTraverseOption_386__Fun) (new global::thx.TestArrays_testTraverseOption_386__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTraverseOption", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (386) )}));
			}
		}
		
		
		public virtual void testTraverseValidation() {
			unchecked {
				global::Array<int> arr = new global::Array<int>(new int[]{1, 2, 3, 4, 5});
				global::haxe.lang.Function ff = ( (( global::thx.TestArrays_testTraverseValidation_391__Fun.__hx_current != null )) ? (global::thx.TestArrays_testTraverseValidation_391__Fun.__hx_current) : (global::thx.TestArrays_testTraverseValidation_391__Fun.__hx_current = ((global::thx.TestArrays_testTraverseValidation_391__Fun) (new global::thx.TestArrays_testTraverseValidation_391__Fun()) )) );
				global::haxe.lang.Function fs = ( (( global::thx.TestArrays_testTraverseValidation_392__Fun.__hx_current != null )) ? (global::thx.TestArrays_testTraverseValidation_392__Fun.__hx_current) : (global::thx.TestArrays_testTraverseValidation_392__Fun.__hx_current = ((global::thx.TestArrays_testTraverseValidation_392__Fun) (new global::thx.TestArrays_testTraverseValidation_392__Fun()) )) );
				global::utest.Assert.same(global::thx.Either.Left(global::thx._Nel.Nel_Impl_.nel<object>(((object) ("oops: 5") ), ((global::Array<object>) (new global::Array<object>(new object[]{"oops: 3", "oops: 1"})) ))), global::thx.Arrays.traverseValidation<object, int, object>(((global::Array<int>) (arr) ), ((global::haxe.lang.Function) (ff) ), ((global::haxe.lang.Function) (global::thx._Nel.Nel_Impl_.semigroup<object>()) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTraverseValidation", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (394) )}));
				global::utest.Assert.same(((global::thx.Either) (global::thx.Either.Right(arr)) ), global::thx.Arrays.traverseValidation<object, int, object>(((global::Array<int>) (arr) ), ((global::haxe.lang.Function) (fs) ), ((global::haxe.lang.Function) (global::thx._Nel.Nel_Impl_.semigroup<object>()) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTraverseValidation", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (395) )}));
			}
		}
		
		
		public virtual void testZip5Ap() {
			unchecked {
				global::utest.Assert.same(new global::Array<object>(new object[]{"a1x3true", "b2y4false"}), global::thx.Arrays.zip5Ap<object, int, object, int, bool, object>(((global::haxe.lang.Function) (( (( global::thx.TestArrays_testZip5Ap_406__Fun.__hx_current != null )) ? (global::thx.TestArrays_testZip5Ap_406__Fun.__hx_current) : (global::thx.TestArrays_testZip5Ap_406__Fun.__hx_current = ((global::thx.TestArrays_testZip5Ap_406__Fun) (new global::thx.TestArrays_testZip5Ap_406__Fun()) )) )) ), ((global::Array<object>) (new global::Array<object>(new object[]{"a", "b", "c"})) ), ((global::Array<int>) (new global::Array<int>(new int[]{1, 2})) ), ((global::Array<object>) (new global::Array<object>(new object[]{"x", "y", "z"})) ), ((global::Array<int>) (new global::Array<int>(new int[]{3, 4})) ), ((global::Array<bool>) (new global::Array<bool>(new bool[]{true, false, true})) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testZip5Ap", "thx.TestArrays", "TestArrays.hx"}, new int[]{1981972957}, new double[]{((double) (406) )}));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 532777525:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testZip5Ap", 532777525)) );
					}
					
					
					case 1800128893:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTraverseValidation", 1800128893)) );
					}
					
					
					case 56139449:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTraverseOption", 56139449)) );
					}
					
					
					case 749390196:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSplitByPad", 749390196)) );
					}
					
					
					case 669777183:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSplitBy", 669777183)) );
					}
					
					
					case 1248930088:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSplit", 1248930088)) );
					}
					
					
					case 1682599598:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDistinct", 1682599598)) );
					}
					
					
					case 1679068237:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRotate", 1679068237)) );
					}
					
					
					case 318832932:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testReduceRight", 318832932)) );
					}
					
					
					case 1177119554:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFnRight", 1177119554)) );
					}
					
					
					case 1403888146:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMapRight", 1403888146)) );
					}
					
					
					case 1255123065:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testGroupByInstance", 1255123065)) );
					}
					
					
					case 1484140085:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testGroupByArray", 1484140085)) );
					}
					
					
					case 1136683204:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testGroupBy", 1136683204)) );
					}
					
					
					case 325419805:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCount", 325419805)) );
					}
					
					
					case 2031559387:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testContainsAny", 2031559387)) );
					}
					
					
					case 2031558928:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testContainsAll", 2031558928)) );
					}
					
					
					case 528646289:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testContains", 528646289)) );
					}
					
					
					case 1227603512:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSortFn", 1227603512)) );
					}
					
					
					case 905300514:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOrderFnObjectOfFloat", 905300514)) );
					}
					
					
					case 1833878517:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOrderFnObjectOfInt", 1833878517)) );
					}
					
					
					case 812768068:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOrderFn", 812768068)) );
					}
					
					
					case 2116234972:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOrder", 2116234972)) );
					}
					
					
					case 900325406:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFilterNullInt", 900325406)) );
					}
					
					
					case 779631889:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCompactStrings", 779631889)) );
					}
					
					
					case 743881640:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCompactFloats", 743881640)) );
					}
					
					
					case 51064624:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMaxStrings", 51064624)) );
					}
					
					
					case 498246993:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMinString", 498246993)) );
					}
					
					
					case 1167016303:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAverageInts", 1167016303)) );
					}
					
					
					case 1538992354:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAverageFloats", 1538992354)) );
					}
					
					
					case 45386550:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMaxInts", 45386550)) );
					}
					
					
					case 605794921:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMaxFloats", 605794921)) );
					}
					
					
					case 1938661668:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMinInts", 1938661668)) );
					}
					
					
					case 1306042327:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMinFloats", 1306042327)) );
					}
					
					
					case 1429880378:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFn", 1429880378)) );
					}
					
					
					case 904319558:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIntersperse", 904319558)) );
					}
					
					
					case 440905673:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFindFnLast", 440905673)) );
					}
					
					
					case 527406035:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFindFn", 527406035)) );
					}
					
					
					case 222838177:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFindLast", 222838177)) );
					}
					
					
					case 1958850432:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFindOption", 1958850432)) );
					}
					
					
					case 1190024619:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFind", 1190024619)) );
					}
					
					
					case 126738834:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFilterFn", 126738834)) );
					}
					
					
					case 399800560:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUsingMapFieldiOnFunction", 399800560)) );
					}
					
					
					case 1842894384:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUsingMapField", 1842894384)) );
					}
					
					
					case 938785383:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMapFieldOnFunction", 938785383)) );
					}
					
					
					case 1792879344:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMapField", 1792879344)) );
					}
					
					
					case 97620427:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCrossMulti", 97620427)) );
					}
					
					
					case 1267254207:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMapi", 1267254207)) );
					}
					
					
					case 1036089706:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMap", 1036089706)) );
					}
					
					
					case 820248982:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEachi", 820248982)) );
					}
					
					
					case 1178534771:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEach", 1178534771)) );
					}
					
					
					case 352562414:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCreate", 352562414)) );
					}
					
					
					case 1378548600:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testWith", 1378548600)) );
					}
					
					
					case 1322701598:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRank", 1322701598)) );
					}
					
					
					case 7139236:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testApplyIndexes", 7139236)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 532777525:
					{
						this.testZip5Ap();
						break;
					}
					
					
					case 1800128893:
					{
						this.testTraverseValidation();
						break;
					}
					
					
					case 56139449:
					{
						this.testTraverseOption();
						break;
					}
					
					
					case 749390196:
					{
						this.testSplitByPad();
						break;
					}
					
					
					case 669777183:
					{
						this.testSplitBy();
						break;
					}
					
					
					case 1248930088:
					{
						this.testSplit();
						break;
					}
					
					
					case 1682599598:
					{
						this.testDistinct();
						break;
					}
					
					
					case 1679068237:
					{
						this.testRotate();
						break;
					}
					
					
					case 318832932:
					{
						this.testReduceRight();
						break;
					}
					
					
					case 1177119554:
					{
						this.testFnRight();
						break;
					}
					
					
					case 1403888146:
					{
						this.testMapRight();
						break;
					}
					
					
					case 1255123065:
					{
						this.testGroupByInstance();
						break;
					}
					
					
					case 1484140085:
					{
						this.testGroupByArray();
						break;
					}
					
					
					case 1136683204:
					{
						this.testGroupBy();
						break;
					}
					
					
					case 325419805:
					{
						this.testCount();
						break;
					}
					
					
					case 2031559387:
					{
						this.testContainsAny();
						break;
					}
					
					
					case 2031558928:
					{
						this.testContainsAll();
						break;
					}
					
					
					case 528646289:
					{
						this.testContains();
						break;
					}
					
					
					case 1227603512:
					{
						this.testSortFn();
						break;
					}
					
					
					case 905300514:
					{
						this.testOrderFnObjectOfFloat();
						break;
					}
					
					
					case 1833878517:
					{
						this.testOrderFnObjectOfInt();
						break;
					}
					
					
					case 812768068:
					{
						this.testOrderFn();
						break;
					}
					
					
					case 2116234972:
					{
						this.testOrder();
						break;
					}
					
					
					case 900325406:
					{
						this.testFilterNullInt();
						break;
					}
					
					
					case 779631889:
					{
						this.testCompactStrings();
						break;
					}
					
					
					case 743881640:
					{
						this.testCompactFloats();
						break;
					}
					
					
					case 51064624:
					{
						this.testMaxStrings();
						break;
					}
					
					
					case 498246993:
					{
						this.testMinString();
						break;
					}
					
					
					case 1167016303:
					{
						this.testAverageInts();
						break;
					}
					
					
					case 1538992354:
					{
						this.testAverageFloats();
						break;
					}
					
					
					case 45386550:
					{
						this.testMaxInts();
						break;
					}
					
					
					case 605794921:
					{
						this.testMaxFloats();
						break;
					}
					
					
					case 1938661668:
					{
						this.testMinInts();
						break;
					}
					
					
					case 1306042327:
					{
						this.testMinFloats();
						break;
					}
					
					
					case 1429880378:
					{
						this.testFn();
						break;
					}
					
					
					case 904319558:
					{
						this.testIntersperse();
						break;
					}
					
					
					case 440905673:
					{
						this.testFindFnLast();
						break;
					}
					
					
					case 527406035:
					{
						this.testFindFn();
						break;
					}
					
					
					case 222838177:
					{
						this.testFindLast();
						break;
					}
					
					
					case 1958850432:
					{
						this.testFindOption();
						break;
					}
					
					
					case 1190024619:
					{
						this.testFind();
						break;
					}
					
					
					case 126738834:
					{
						this.testFilterFn();
						break;
					}
					
					
					case 399800560:
					{
						this.testUsingMapFieldiOnFunction();
						break;
					}
					
					
					case 1842894384:
					{
						this.testUsingMapField();
						break;
					}
					
					
					case 938785383:
					{
						this.testMapFieldOnFunction();
						break;
					}
					
					
					case 1792879344:
					{
						this.testMapField();
						break;
					}
					
					
					case 97620427:
					{
						this.testCrossMulti();
						break;
					}
					
					
					case 1267254207:
					{
						this.testMapi();
						break;
					}
					
					
					case 1036089706:
					{
						this.testMap();
						break;
					}
					
					
					case 820248982:
					{
						this.testEachi();
						break;
					}
					
					
					case 1178534771:
					{
						this.testEach();
						break;
					}
					
					
					case 352562414:
					{
						this.testCreate();
						break;
					}
					
					
					case 1378548600:
					{
						this.testWith();
						break;
					}
					
					
					case 1322701598:
					{
						this.testRank();
						break;
					}
					
					
					case 7139236:
					{
						this.testApplyIndexes();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testEach_60__Fun : global::haxe.lang.Function {
		
		public TestArrays_testEach_60__Fun(int[] sum) : base(1, 0) {
			this.sum = sum;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			int item = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			this.sum[0] += item;
			return null;
		}
		
		
		public int[] sum;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testEachi_70__Fun : global::haxe.lang.Function {
		
		public TestArrays_testEachi_70__Fun(int[] sum, global::Array<int> indices) : base(2, 0) {
			this.sum = sum;
			this.indices = indices;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int i = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			int item = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			this.sum[0] += item;
			this.indices.push(i);
			return null;
		}
		
		
		public int[] sum;
		
		public global::Array<int> indices;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testMapi_89__Fun : global::haxe.lang.Function {
		
		public TestArrays_testMapi_89__Fun(global::Array<int> @is) : base(2, 1) {
			this.@is = @is;
		}
		
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				int i = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
				int v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				this.@is.push(i);
				return ((double) (( v * 2 )) );
			}
		}
		
		
		public global::Array<int> @is;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testMapField_104__Fun : global::haxe.lang.Function {
		
		public TestArrays_testMapField_104__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestArrays_testMapField_104__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			object _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (( (( __fn_dyn1 == null )) ? (null) : (((object) (__fn_dyn1) )) )) );
			return ((double) (((int) (global::haxe.lang.Runtime.getField_f(_, "a", 97, true)) )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testMapFieldOnFunction_113__Fun : global::haxe.lang.Function {
		
		public TestArrays_testMapFieldOnFunction_113__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestArrays_testMapFieldOnFunction_113__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx._TestArrays.Sample _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx._TestArrays.Sample) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx._TestArrays.Sample) (__fn_dyn1) )) )) );
				return ((double) (_.multiply(2)) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testUsingMapField_119__Fun : global::haxe.lang.Function {
		
		public TestArrays_testUsingMapField_119__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestArrays_testUsingMapField_119__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			object _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (( (( __fn_dyn1 == null )) ? (null) : (((object) (__fn_dyn1) )) )) );
			return ((double) (((int) (global::haxe.lang.Runtime.getField_f(_, "a", 97, true)) )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testUsingMapFieldiOnFunction_130__Fun : global::haxe.lang.Function {
		
		public TestArrays_testUsingMapFieldiOnFunction_130__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.TestArrays_testUsingMapFieldiOnFunction_130__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> _1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::thx._TestArrays.Sample _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx._TestArrays.Sample) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx._TestArrays.Sample) (__fn_dyn1) )) )) );
			return ((double) (_.multiply((_1).@value)) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testUsingMapFieldiOnFunction_126__Fun : global::haxe.lang.Function {
		
		public TestArrays_testUsingMapFieldiOnFunction_126__Fun(global::Array<object> _e) : base(1, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function callback = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			return global::thx.Arrays.mapi<object, int>(((global::Array<object>) (this._e) ), ((global::haxe.lang.Function) (callback) ));
		}
		
		
		public global::Array<object> _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testFilterFn_135__Fun : global::haxe.lang.Function {
		
		public TestArrays_testFilterFn_135__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestArrays_testFilterFn_135__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::haxe.lang.Null<int> _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float1) ), true)) : (( (( __fn_dyn1 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn1)) )) );
				return ( ( (_).@value % 2 ) != 0 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testFind_139__Fun : global::haxe.lang.Function {
		
		public TestArrays_testFind_139__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestArrays_testFind_139__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int item = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return ( ( item % 3 ) == 0 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testFindOption_143__Fun : global::haxe.lang.Function {
		
		public TestArrays_testFindOption_143__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.TestArrays_testFindOption_143__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				int i = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
				int item = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return ( i == 1 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testFindLast_147__Fun : global::haxe.lang.Function {
		
		public TestArrays_testFindLast_147__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestArrays_testFindLast_147__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int item = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return ( ( item % 3 ) == 0 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testFindFn_151__Fun : global::haxe.lang.Function {
		
		public TestArrays_testFindFn_151__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestArrays_testFindFn_151__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::haxe.lang.Null<int> _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float1) ), true)) : (( (( __fn_dyn1 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn1)) )) );
				return ( ( (_).@value % 3 ) == 0 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testFindFnLast_155__Fun : global::haxe.lang.Function {
		
		public TestArrays_testFindFnLast_155__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestArrays_testFindFnLast_155__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::haxe.lang.Null<int> _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float1) ), true)) : (( (( __fn_dyn1 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn1)) )) );
				return ( ( (_).@value % 3 ) == 0 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testFn_165__Fun : global::haxe.lang.Function {
		
		public TestArrays_testFn_165__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestArrays_testFn_165__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::haxe.lang.Null<int> _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float1) ), true)) : (( (( __fn_dyn1 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn1)) )) );
				return ((double) (( (_).@value * 2 )) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testOrder_214__Fun : global::haxe.lang.Function {
		
		public TestArrays_testOrder_214__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.TestArrays_testOrder_214__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int _1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			int _0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			return ((double) (( _0 - _1 )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testOrderFn_220__Fun_0 : global::haxe.lang.Function {
		
		public TestArrays_testOrderFn_220__Fun_0() : base(2, 1) {
		}
		
		
		public static global::thx.TestArrays_testOrderFn_220__Fun_0 __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> _1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::haxe.lang.Null<int> _0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float1) ), true)) : (( (( __fn_dyn1 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn1)) )) );
			return ((double) (( (_0).@value - (_1).@value )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testOrderFn_220__Fun : global::haxe.lang.Function {
		
		public TestArrays_testOrderFn_220__Fun(global::Array<int> _e) : base(1, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function sort = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			return global::thx.Arrays.order<int>(((global::Array<int>) (this._e) ), ((global::haxe.lang.Function) (sort) ));
		}
		
		
		public global::Array<int> _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testOrderFnObjectOfInt_229__Fun_0 : global::haxe.lang.Function {
		
		public TestArrays_testOrderFnObjectOfInt_229__Fun_0() : base(2, 1) {
		}
		
		
		public static global::thx.TestArrays_testOrderFnObjectOfInt_229__Fun_0 __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object _1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (( (( __fn_dyn2 == null )) ? (null) : (((object) (__fn_dyn2) )) )) );
			object _0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (( (( __fn_dyn1 == null )) ? (null) : (((object) (__fn_dyn1) )) )) );
			return ((double) (( ((int) (global::haxe.lang.Runtime.getField_f(_0, "key", 5343647, true)) ) - ((int) (global::haxe.lang.Runtime.getField_f(_1, "key", 5343647, true)) ) )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testOrderFnObjectOfInt_229__Fun : global::haxe.lang.Function {
		
		public TestArrays_testOrderFnObjectOfInt_229__Fun(global::Array<object> _e) : base(1, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function sort = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			return global::thx.Arrays.order<object>(((global::Array<object>) (this._e) ), ((global::haxe.lang.Function) (sort) ));
		}
		
		
		public global::Array<object> _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testOrderFnObjectOfFloat_238__Fun_0 : global::haxe.lang.Function {
		
		public TestArrays_testOrderFnObjectOfFloat_238__Fun_0() : base(2, 1) {
		}
		
		
		public static global::thx.TestArrays_testOrderFnObjectOfFloat_238__Fun_0 __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				object _1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (( (( __fn_dyn2 == null )) ? (null) : (((object) (__fn_dyn2) )) )) );
				object _0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (( (( __fn_dyn1 == null )) ? (null) : (((object) (__fn_dyn1) )) )) );
				double a = global::haxe.lang.Runtime.getField_f(_0, "key", 5343647, true);
				double b = global::haxe.lang.Runtime.getField_f(_1, "key", 5343647, true);
				if (( a < b )) {
					return ((double) (-1) );
				}
				else if (( a > b )) {
					return ((double) (1) );
				}
				else {
					return ((double) (0) );
				}
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testOrderFnObjectOfFloat_238__Fun : global::haxe.lang.Function {
		
		public TestArrays_testOrderFnObjectOfFloat_238__Fun(global::Array<object> _e) : base(1, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function sort = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			return global::thx.Arrays.order<object>(((global::Array<object>) (this._e) ), ((global::haxe.lang.Function) (sort) ));
		}
		
		
		public global::Array<object> _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testSortFn_245__Fun : global::haxe.lang.Function {
		
		public TestArrays_testSortFn_245__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.TestArrays_testSortFn_245__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> _1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::haxe.lang.Null<int> _0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float1) ), true)) : (( (( __fn_dyn1 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn1)) )) );
			return ((double) (( (_0).@value - (_1).@value )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testGroupBy_276__Fun : global::haxe.lang.Function {
		
		public TestArrays_testGroupBy_276__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestArrays_testGroupBy_276__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			double f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((double) (__fn_float1) )) : (((double) (global::haxe.lang.Runtime.toDouble(__fn_dyn1)) )) );
			return ((double) (((int) (global::System.Math.Floor(((double) (f) ))) )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testGroupByArray_284__Fun : global::haxe.lang.Function {
		
		public TestArrays_testGroupByArray_284__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestArrays_testGroupByArray_284__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			global::Array<int> f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
			return ((double) (f[0]) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testGroupByInstance_293__Fun : global::haxe.lang.Function {
		
		public TestArrays_testGroupByInstance_293__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestArrays_testGroupByInstance_293__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			global::thx._TestArrays.Sample f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx._TestArrays.Sample) (((object) (__fn_float1) )) )) : (((global::thx._TestArrays.Sample) (__fn_dyn1) )) );
			return ((double) (f.v) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testMapRight_313__Fun : global::haxe.lang.Function {
		
		public TestArrays_testMapRight_313__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestArrays_testMapRight_313__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return ((double) (( v * 2 )) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testFnRight_317__Fun : global::haxe.lang.Function {
		
		public TestArrays_testFnRight_317__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestArrays_testFnRight_317__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::haxe.lang.Null<int> _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float1) ), true)) : (( (( __fn_dyn1 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn1)) )) );
				return ((double) (( (_).@value * 2 )) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testDistinct_345__Fun : global::haxe.lang.Function {
		
		public TestArrays_testDistinct_345__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.TestArrays_testDistinct_345__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			object a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			return string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a, "key", 5343647, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(b, "key", 5343647, true)));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testTraverseOption_383__Fun : global::haxe.lang.Function {
		
		public TestArrays_testTraverseOption_383__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestArrays_testTraverseOption_383__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				if (( ( i % 2 ) == 0 )) {
					return global::haxe.ds.Option.Some(i);
				}
				else {
					return global::haxe.ds.Option.None;
				}
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testTraverseOption_386__Fun : global::haxe.lang.Function {
		
		public TestArrays_testTraverseOption_386__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestArrays_testTraverseOption_386__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			int v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			return global::haxe.ds.Option.Some(v);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testTraverseValidation_391__Fun : global::haxe.lang.Function {
		
		public TestArrays_testTraverseValidation_391__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestArrays_testTraverseValidation_391__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				if (( ( i % 2 ) == 0 )) {
					return ((global::thx.Either) (global::thx.Either.Right(i)) );
				}
				else {
					return ((global::thx.Either) (global::thx.Either.Left(global::thx._Nel.Nel_Impl_.pure<object>(((object) (global::haxe.lang.Runtime.concat("oops: ", global::haxe.lang.Runtime.toString(i))) )))) );
				}
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testTraverseValidation_392__Fun : global::haxe.lang.Function {
		
		public TestArrays_testTraverseValidation_392__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestArrays_testTraverseValidation_392__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			int i1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			return ((global::thx.Either) (global::thx.Either.Right(i1)) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestArrays_testZip5Ap_406__Fun : global::haxe.lang.Function {
		
		public TestArrays_testZip5Ap_406__Fun() : base(5, 0) {
		}
		
		
		public static global::thx.TestArrays_testZip5Ap_406__Fun __hx_current;
		
		public override object __hx_invoke5_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3, double __fn_float4, object __fn_dyn4, double __fn_float5, object __fn_dyn5) {
			bool b = ( (( __fn_dyn5 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float5) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn5)) );
			int j = ( (( __fn_dyn4 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float4) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn4)) )) );
			string t = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float3)) : (global::haxe.lang.Runtime.toString(__fn_dyn3)) );
			int i = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			string s = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", s), global::haxe.lang.Runtime.toString(i)), t), global::haxe.lang.Runtime.toString(j)), global::Std.@string(b));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._TestArrays {
	public class Sample : global::haxe.lang.HxObject {
		
		public Sample(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Sample(int v) {
			global::thx._TestArrays.Sample.__hx_ctor_thx__TestArrays_Sample(this, v);
		}
		
		
		public static void __hx_ctor_thx__TestArrays_Sample(global::thx._TestArrays.Sample __temp_me179, int v) {
			__temp_me179.v = v;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx._TestArrays.Sample(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx._TestArrays.Sample(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int v;
		
		public virtual int multiply(int @by) {
			return ( this.v * @by );
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 118:
					{
						this.v = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 118:
					{
						this.v = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 445440548:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "multiply", 445440548)) );
					}
					
					
					case 118:
					{
						return this.v;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 118:
					{
						return ((double) (this.v) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 445440548:
					{
						return this.multiply(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("v");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


