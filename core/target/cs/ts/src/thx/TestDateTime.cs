// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestDateTime : global::haxe.lang.HxObject {
		
		public TestDateTime(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestDateTime() {
			global::thx.TestDateTime.__hx_ctor_thx_TestDateTime(this);
		}
		
		
		public static void __hx_ctor_thx_TestDateTime(global::thx.TestDateTime __temp_me189) {
			unchecked {
				__temp_me189.offset = global::thx._Time.Time_Impl_.create(-6, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
				long offset = __temp_me189.offset;
				global::Array<long> this1 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2015, 7, 26, new global::haxe.lang.Null<int>(21, true), new global::haxe.lang.Null<int>(40, true), new global::haxe.lang.Null<int>(30, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset) )});
				__temp_me189.date = ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
				long offset1 = __temp_me189.offset;
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2015, 7, 27, new global::haxe.lang.Null<int>(16, true), new global::haxe.lang.Null<int>(40, true), new global::haxe.lang.Null<int>(30, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset1) )});
				__temp_me189.tomorrow = ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset1) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
				long offset2 = global::thx._Time.Time_Impl_.zero;
				global::Array<long> this3 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2015, 7, 27, new global::haxe.lang.Null<int>(3, true), new global::haxe.lang.Null<int>(40, true), new global::haxe.lang.Null<int>(30, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset2) )});
				__temp_me189.dateutc = ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this3) )[0]) ) - ((long) (offset2) ) )) ))) ), ((long) (((global::Array<long>) (this3) )[1]) )})) );
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestDateTime(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestDateTime();
		}
		
		
		public long offset;
		
		public global::Array<long> date;
		
		public global::Array<long> tomorrow;
		
		public global::Array<long> dateutc;
		
		public virtual void testCreate() {
			unchecked {
				global::Array<long> this1 = this.date;
				int tmp = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
				global::Array<long> this2 = this.date;
				global::utest.Assert.@equals(2015, tmp, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 2015 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) + ((long) (((global::Array<long>) (this2) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR))), " for year"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
				global::Array<long> this3 = this.date;
				int tmp1 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this3) )[0]) ) + ((long) (((global::Array<long>) (this3) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
				global::Array<long> this4 = this.date;
				global::utest.Assert.@equals(7, tmp1, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 7 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this4) )[0]) ) + ((long) (((global::Array<long>) (this4) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH))), " for month"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
				global::Array<long> this5 = this.date;
				int tmp2 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this5) )[0]) ) + ((long) (((global::Array<long>) (this5) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
				global::Array<long> this6 = this.date;
				global::utest.Assert.@equals(26, tmp2, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 26 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this6) )[0]) ) + ((long) (((global::Array<long>) (this6) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY))), " for day"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
				global::Array<long> this7 = this.date;
				int tmp3 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this7) )[0]) ) + ((long) (((global::Array<long>) (this7) )[1]) ) )) ));
				global::Array<long> this8 = this.date;
				global::utest.Assert.@equals(21, tmp3, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 21 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this8) )[0]) ) + ((long) (((global::Array<long>) (this8) )[1]) ) )) )))), " for hour"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
				global::Array<long> this9 = this.date;
				int tmp4 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this9) )[0]) ) + ((long) (((global::Array<long>) (this9) )[1]) ) )) ));
				global::Array<long> this10 = this.date;
				global::utest.Assert.@equals(40, tmp4, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 40 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this10) )[0]) ) + ((long) (((global::Array<long>) (this10) )[1]) ) )) )))), " for minute"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
				global::Array<long> this11 = this.date;
				int tmp5 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this11) )[0]) ) + ((long) (((global::Array<long>) (this11) )[1]) ) )) ));
				global::Array<long> this12 = this.date;
				global::utest.Assert.@equals(30, tmp5, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 30 but got ", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this12) )[0]) ) + ((long) (((global::Array<long>) (this12) )[1]) ) )) )))), " for second"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
				global::Array<long> this13 = this.date;
				global::utest.Assert.@equals(((int) (0) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (this13) )[0]) ) + ((long) (((global::Array<long>) (this13) )[1]) ) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
				long x = ((long) (( ((long) (( ((long) (((global::Array<long>) (this.date) )[1]) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				global::utest.Assert.@equals(-6, ((int) (((long) (x) )) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
			}
		}
		
		
		public virtual void testEquals() {
			unchecked {
				global::utest.Assert.isTrue(( ((long) (((global::Array<long>) (this.date) )[0]) ) == ((long) (((global::Array<long>) (this.date) )[0]) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
				global::utest.Assert.isTrue(( ((long) (((global::Array<long>) (this.date) )[0]) ) != ((long) (((global::Array<long>) (this.tomorrow) )[0]) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
				global::utest.Assert.isTrue(( ((long) (((global::Array<long>) (this.date) )[0]) ) == ((long) (((global::Array<long>) (this.dateutc) )[0]) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
			}
		}
		
		
		public virtual void testCompare() {
			unchecked {
				global::utest.Assert.isFalse(( global::thx._DateTime.DateTime_Impl_.compareTo(this.date, this.date) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
				global::utest.Assert.isTrue(( global::thx._DateTime.DateTime_Impl_.compareTo(this.date, this.date) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
				global::utest.Assert.isFalse(( global::thx._DateTime.DateTime_Impl_.compareTo(this.date, this.date) < 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
				global::utest.Assert.isTrue(( global::thx._DateTime.DateTime_Impl_.compareTo(this.date, this.date) <= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
				global::utest.Assert.isFalse(( global::thx._DateTime.DateTime_Impl_.compareTo(this.date, this.tomorrow) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
				global::utest.Assert.isFalse(( global::thx._DateTime.DateTime_Impl_.compareTo(this.date, this.tomorrow) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
				global::utest.Assert.isTrue(( global::thx._DateTime.DateTime_Impl_.compareTo(this.date, this.tomorrow) < 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
				global::utest.Assert.isTrue(( global::thx._DateTime.DateTime_Impl_.compareTo(this.date, this.tomorrow) <= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				global::utest.Assert.isTrue(( global::thx._DateTime.DateTime_Impl_.compareTo(this.tomorrow, this.date) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (52) )}));
				global::utest.Assert.isTrue(( global::thx._DateTime.DateTime_Impl_.compareTo(this.tomorrow, this.date) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
				global::utest.Assert.isFalse(( global::thx._DateTime.DateTime_Impl_.compareTo(this.tomorrow, this.date) < 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (54) )}));
				global::utest.Assert.isFalse(( global::thx._DateTime.DateTime_Impl_.compareTo(this.tomorrow, this.date) <= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
			}
		}
		
		
		public virtual void testToString() {
			unchecked {
				global::utest.Assert.@equals("2015-07-26T21:40:30-06:00", global::thx._DateTime.DateTime_Impl_.toString(this.date), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToString", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
			}
		}
		
		
		public virtual void testAdd() {
			unchecked {
				global::Array<long> this1 = this.date;
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(((long) (((global::Array<long>) (this1) )[0]) ), 24)) ), ((long) (((global::Array<long>) (this1) )[1]) )});
				global::Array<long> this3 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(((long) (((global::Array<long>) (this2) )[0]) ), 9)) ), ((long) (((global::Array<long>) (this2) )[1]) )});
				global::Array<long> this4 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (((global::Array<long>) (this3) )[0]) ), ((double) (10) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerDay)) ), ((long) (((global::Array<long>) (this3) )[1]) )});
				global::Array<long> this5 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (((global::Array<long>) (this4) )[0]) ), ((double) (7) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour)) ), ((long) (((global::Array<long>) (this4) )[1]) )});
				global::Array<long> this6 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (((global::Array<long>) (this5) )[0]) ), ((double) (10) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute)) ), ((long) (((global::Array<long>) (this5) )[1]) )});
				global::Array<long> this7 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (((global::Array<long>) (this6) )[0]) ), ((double) (7) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond)) ), ((long) (((global::Array<long>) (this6) )[1]) )});
				global::Array<long> d = ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (((global::Array<long>) (this7) )[0]) ), ((double) (7) ), 1)) ), ((long) (((global::Array<long>) (this7) )[1]) )})) );
				global::utest.Assert.isTrue(( ((long) (((global::Array<long>) (d) )[0]) ) == ((long) (((global::Array<long>) (global::thx._DateTime.DateTime_Impl_.fromString("2018-05-07T04:50:37.007-06:00")) )[0]) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", "2018-05-07T04:50:37.007-06:00"), " but got "), global::thx._DateTime.DateTime_Impl_.toString(d)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAdd", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (73) )}));
			}
		}
		
		
		public virtual void testOffset() {
			unchecked {
				global::Array<long> nyDate = ((global::Array<long>) (new global::Array<long>(new long[]{((long) (((global::Array<long>) (this.date) )[0]) ), ((long) (global::thx._Time.Time_Impl_.create(-4, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) )})) );
				global::utest.Assert.@equals("2015-07-26T23:40:30-04:00", global::thx._DateTime.DateTime_Impl_.toString(nyDate), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOffset", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
				global::Array<long> this1 = this.date;
				long newoffset = global::thx._Time.Time_Impl_.create(-4, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true));
				nyDate = ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ) - ((long) (newoffset) ) )) ), ((long) (newoffset) )})) );
				global::utest.Assert.@equals("2015-07-26T21:40:30-04:00", global::thx._DateTime.DateTime_Impl_.toString(nyDate), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOffset", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
			}
		}
		
		
		public virtual void testFromString() {
			unchecked {
				global::utest.Assert.isTrue(( ((long) (((global::Array<long>) (this.date) )[0]) ) == ((long) (((global::Array<long>) (global::thx._DateTime.DateTime_Impl_.fromString("2015-07-26T21:40:30-06:00")) )[0]) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
				global::Array<long> d = global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01");
				long offset = global::thx._Time.Time_Impl_.zero;
				global::Array<long> this1 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(2014, 1, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset) )});
				global::utest.Assert.isTrue(( ((long) (((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this1) )[1]) )})) )[0]) ) == ((long) (((global::Array<long>) (d) )[0]) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (88) )}));
				global::utest.Assert.@equals("-1-07-27T00:00:00+00:00", global::thx._DateTime.DateTime_Impl_.toString(global::thx._DateTime.DateTime_Impl_.fromString("0-06-07")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (90) )}));
				global::utest.Assert.@equals("-1-06-07T00:00:00+00:00", global::thx._DateTime.DateTime_Impl_.toString(global::thx._DateTime.DateTime_Impl_.fromString("-1-06-07")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (91) )}));
				global::utest.Assert.@equals("1-06-07T00:00:00+00:00", global::thx._DateTime.DateTime_Impl_.toString(global::thx._DateTime.DateTime_Impl_.fromString("1-06-07")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (92) )}));
				global::utest.Assert.@equals("-2014-01-01T00:00:00+00:00", global::thx._DateTime.DateTime_Impl_.toString(global::thx._DateTime.DateTime_Impl_.fromString("-2014-01-01")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (93) )}));
			}
		}
		
		
		public virtual void testLocalOffset() {
			unchecked {
				long @ref = global::thx._Time.Time_Impl_.fromString("0:00:00");
				long delta = global::thx._DateTime.DateTime_Impl_.localOffset();
				global::utest.Assert.isTrue(( ((long) (@ref) ) == ((long) (delta) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._Time.Time_Impl_.toString(@ref)), " but got "), global::thx._Time.Time_Impl_.toString(delta)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLocalOffset", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
			}
		}
		
		
		public virtual void testNow() {
			unchecked {
				global::Array<long> @ref = global::thx._DateTime.DateTime_Impl_.fromString("2016-05-24T09:02:47+00:00");
				global::Array<long> date = ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.now()) ), ((long) (global::thx._DateTime.DateTime_Impl_.localOffset()) )})) );
				global::utest.Assert.isTrue(global::thx._DateTime.DateTime_Impl_.nearEqualsTo(date, @ref, global::thx._Time.Time_Impl_.create(0, new global::haxe.lang.Null<int>(10, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._DateTime.DateTime_Impl_.toString(@ref)), " but got "), global::thx._DateTime.DateTime_Impl_.toString(date)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNow", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (107) )}));
			}
		}
		
		
		public virtual void testSnapNext() {
			unchecked {
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:07:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:10-06:00"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (111) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:05:50-06:00"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (112) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 11:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:10:10-06:00"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (113) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 09:50:10-06:00"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (114) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-02 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (115) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2013-12-31 20:00:00-06:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (116) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2014-12-21 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-17 11:00:00-06:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (117) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2014-12-21 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (118) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-12 00:00:00-06:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (119) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (120) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-05-12 00:00:00-06:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (121) )}));
				this.assertSnapNext(global::thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (122) )}));
			}
		}
		
		
		public virtual void testSnapPrev() {
			unchecked {
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:10-06:00"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (126) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:05:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:05:50-06:00"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (127) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:10:10-06:00"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (128) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 09:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 09:50:10-06:00"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (129) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (130) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2013-12-31 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2013-12-31 20:00:00-06:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-12-14 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-17 11:00:00-06:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (132) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-12-14 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (133) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-12-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-12 00:00:00-06:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (134) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-12-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (135) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-05-12 00:00:00-06:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (136) )}));
				this.assertSnapPrev(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (137) )}));
			}
		}
		
		
		public virtual void testSnapTo() {
			unchecked {
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:10-06:00"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (141) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:06:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:05:50-06:00"), global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (142) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:10:10-06:00"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (143) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 09:50:10-06:00"), global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (144) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 10:00:00-06:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (145) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2013-12-31 20:00:00-06:00"), global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (146) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2014-12-14 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-17 11:00:00-06:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (147) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2014-12-21 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (148) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2014-12-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-12 00:00:00-06:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (149) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (150) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2014-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-05-12 00:00:00-06:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (151) )}));
				this.assertSnapTo(global::thx._DateTime.DateTime_Impl_.fromString("2015-01-01 00:00:00-06:00"), global::thx._DateTime.DateTime_Impl_.fromString("2014-12-18 00:00:00-06:00"), global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestDateTime", "TestDateTime.hx"}, new int[]{1981972957}, new double[]{((double) (152) )}));
			}
		}
		
		
		public virtual void assertSnapTo(global::Array<long> expected, global::Array<long> date, global::thx.TimePeriod period, object pos) {
			global::Array<long> t = global::thx._DateTime.DateTime_Impl_.snapTo(date, period);
			global::utest.Assert.isTrue(( ((long) (((global::Array<long>) (expected) )[0]) ) == ((long) (((global::Array<long>) (t) )[0]) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._DateTime.DateTime_Impl_.toString(date)), " to snap to "), global::thx._DateTime.DateTime_Impl_.toString(expected)), " for "), global::Std.@string(period)), " but it is "), global::thx._DateTime.DateTime_Impl_.toString(t)), pos);
		}
		
		
		public virtual void assertSnapPrev(global::Array<long> expected, global::Array<long> date, global::thx.TimePeriod period, object pos) {
			global::Array<long> t = global::thx._DateTime.DateTime_Impl_.snapPrev(date, period);
			global::utest.Assert.isTrue(( ((long) (((global::Array<long>) (expected) )[0]) ) == ((long) (((global::Array<long>) (t) )[0]) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._DateTime.DateTime_Impl_.toString(date)), " to snap before "), global::thx._DateTime.DateTime_Impl_.toString(expected)), " for "), global::Std.@string(period)), " but it is "), global::thx._DateTime.DateTime_Impl_.toString(t)), pos);
		}
		
		
		public virtual void assertSnapNext(global::Array<long> expected, global::Array<long> date, global::thx.TimePeriod period, object pos) {
			global::Array<long> t = global::thx._DateTime.DateTime_Impl_.snapNext(date, period);
			global::utest.Assert.isTrue(( ((long) (((global::Array<long>) (expected) )[0]) ) == ((long) (((global::Array<long>) (t) )[0]) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._DateTime.DateTime_Impl_.toString(date)), " to snap after "), global::thx._DateTime.DateTime_Impl_.toString(expected)), " for "), global::Std.@string(period)), " but it is "), global::thx._DateTime.DateTime_Impl_.toString(t)), pos);
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 345466806:
					{
						this.dateutc = ((global::Array<long>) (global::Array<object>.__hx_cast<long>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1018962181:
					{
						this.tomorrow = ((global::Array<long>) (global::Array<object>.__hx_cast<long>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1113806382:
					{
						this.date = ((global::Array<long>) (global::Array<object>.__hx_cast<long>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1614780307:
					{
						this.offset = ((long) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 325004611:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapNext", 325004611)) );
					}
					
					
					case 347825987:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapPrev", 347825987)) );
					}
					
					
					case 2122013131:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapTo", 2122013131)) );
					}
					
					
					case 713395287:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapTo", 713395287)) );
					}
					
					
					case 2107659471:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapPrev", 2107659471)) );
					}
					
					
					case 2084838095:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapNext", 2084838095)) );
					}
					
					
					case 1036142564:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNow", 1036142564)) );
					}
					
					
					case 1917396012:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLocalOffset", 1917396012)) );
					}
					
					
					case 1952928973:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromString", 1952928973)) );
					}
					
					
					case 2033442181:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOffset", 2033442181)) );
					}
					
					
					case 1035493615:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAdd", 1035493615)) );
					}
					
					
					case 729151262:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToString", 729151262)) );
					}
					
					
					case 1077020275:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCompare", 1077020275)) );
					}
					
					
					case 1491547185:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEquals", 1491547185)) );
					}
					
					
					case 352562414:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCreate", 352562414)) );
					}
					
					
					case 345466806:
					{
						return this.dateutc;
					}
					
					
					case 1018962181:
					{
						return this.tomorrow;
					}
					
					
					case 1113806382:
					{
						return this.date;
					}
					
					
					case 1614780307:
					{
						return this.offset;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 325004611:
					{
						this.assertSnapNext(((global::Array<long>) (global::Array<object>.__hx_cast<long>(((global::Array) (dynargs[0]) ))) ), ((global::Array<long>) (global::Array<object>.__hx_cast<long>(((global::Array) (dynargs[1]) ))) ), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 347825987:
					{
						this.assertSnapPrev(((global::Array<long>) (global::Array<object>.__hx_cast<long>(((global::Array) (dynargs[0]) ))) ), ((global::Array<long>) (global::Array<object>.__hx_cast<long>(((global::Array) (dynargs[1]) ))) ), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 2122013131:
					{
						this.assertSnapTo(((global::Array<long>) (global::Array<object>.__hx_cast<long>(((global::Array) (dynargs[0]) ))) ), ((global::Array<long>) (global::Array<object>.__hx_cast<long>(((global::Array) (dynargs[1]) ))) ), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 713395287:
					{
						this.testSnapTo();
						break;
					}
					
					
					case 2107659471:
					{
						this.testSnapPrev();
						break;
					}
					
					
					case 2084838095:
					{
						this.testSnapNext();
						break;
					}
					
					
					case 1036142564:
					{
						this.testNow();
						break;
					}
					
					
					case 1917396012:
					{
						this.testLocalOffset();
						break;
					}
					
					
					case 1952928973:
					{
						this.testFromString();
						break;
					}
					
					
					case 2033442181:
					{
						this.testOffset();
						break;
					}
					
					
					case 1035493615:
					{
						this.testAdd();
						break;
					}
					
					
					case 729151262:
					{
						this.testToString();
						break;
					}
					
					
					case 1077020275:
					{
						this.testCompare();
						break;
					}
					
					
					case 1491547185:
					{
						this.testEquals();
						break;
					}
					
					
					case 352562414:
					{
						this.testCreate();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("dateutc");
			baseArr.push("tomorrow");
			baseArr.push("date");
			baseArr.push("offset");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


