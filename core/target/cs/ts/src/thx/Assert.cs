// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public interface IAssertBehavior : global::haxe.lang.IHxObject {
		
		void success(object pos);
		
		void fail(string message, object pos);
		
		void warn(string message, object pos);
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class DefaultAssertBehavior : global::haxe.lang.HxObject, global::thx.IAssertBehavior {
		
		public DefaultAssertBehavior(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public DefaultAssertBehavior() {
			global::thx.DefaultAssertBehavior.__hx_ctor_thx_DefaultAssertBehavior(this);
		}
		
		
		public static void __hx_ctor_thx_DefaultAssertBehavior(global::thx.DefaultAssertBehavior __temp_me78) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.DefaultAssertBehavior(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.DefaultAssertBehavior();
		}
		
		
		public virtual void success(object pos) {
		}
		
		
		public virtual void warn(string message, object pos) {
			global::haxe.Log.trace.__hx_invoke2_o(default(double), message, default(double), pos);
		}
		
		
		public virtual void fail(string message, object pos) {
			throw global::haxe.lang.HaxeException.wrap(new global::thx.error.AssertError(message, pos));
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1135983070:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "fail", 1135983070)) );
					}
					
					
					case 1324507718:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "warn", 1324507718)) );
					}
					
					
					case 944645571:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "success", 944645571)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1135983070:
					{
						this.fail(global::haxe.lang.Runtime.toString(dynargs[0]), dynargs[1]);
						break;
					}
					
					
					case 1324507718:
					{
						this.warn(global::haxe.lang.Runtime.toString(dynargs[0]), dynargs[1]);
						break;
					}
					
					
					case 944645571:
					{
						this.success(dynargs[0]);
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Assert : global::haxe.lang.HxObject {
		
		static Assert() {
			global::thx.Assert.behavior = ((global::thx.IAssertBehavior) (new global::thx.DefaultAssertBehavior()) );
		}
		
		
		public Assert(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Assert() {
			global::thx.Assert.__hx_ctor_thx_Assert(this);
		}
		
		
		public static void __hx_ctor_thx_Assert(global::thx.Assert __temp_me80) {
		}
		
		
		public static global::thx.IAssertBehavior behavior;
		
		public static void contains<T>(global::Array<T> possibilities, T @value, string msg, object pos) {
			if (global::thx.Arrays.contains<T>(((global::Array<T>) (possibilities) ), global::haxe.lang.Runtime.genericCast<T>(@value), ((global::haxe.lang.Function) (null) ))) {
				global::thx.Assert.pass(msg, pos);
			}
			else {
				global::thx.Assert.fail(( (string.Equals(msg, null)) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("value ", global::Std.@string(@value)), " not found in the expected possibilities "), global::Std.@string(possibilities))) : (msg) ), pos);
			}
			
		}
		
		
		public static void @equals(object expected, object @value, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(expected)), " but it is "), global::Std.@string(@value));
			}
			
			global::thx.Assert.isTrue(global::haxe.lang.Runtime.eq(expected, @value), msg, pos);
		}
		
		
		public static void excludes<T>(T match, global::Array<T> values, string msg, object pos) {
			if ( ! (global::thx.Arrays.contains<T>(((global::Array<T>) (values) ), global::haxe.lang.Runtime.genericCast<T>(match), ((global::haxe.lang.Function) (null) ))) ) {
				global::thx.Assert.pass(msg, pos);
			}
			else {
				global::thx.Assert.fail(( (string.Equals(msg, null)) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("values ", global::Std.@string(values)), " do contain "), global::Std.@string(match))) : (msg) ), pos);
			}
			
		}
		
		
		public static void fail(string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = "failure expected";
			}
			
			global::thx.Assert.isTrue(false, msg, pos);
		}
		
		
		public static void isContainedIn<T>(T match, global::Array<T> values, string msg, object pos) {
			if (global::thx.Arrays.contains<T>(((global::Array<T>) (values) ), global::haxe.lang.Runtime.genericCast<T>(match), ((global::haxe.lang.Function) (null) ))) {
				global::thx.Assert.pass(msg, pos);
			}
			else {
				global::thx.Assert.fail(( (string.Equals(msg, null)) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("values ", global::Std.@string(values)), " do not contain "), global::Std.@string(match))) : (msg) ), pos);
			}
			
		}
		
		
		public static void isFalse(bool @value, string msg, object pos) {
			if (string.Equals(null, msg)) {
				msg = "expected false";
			}
			
			global::thx.Assert.isTrue(( @value == false ), msg, pos);
		}
		
		
		public static void @is(object @value, object type, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected type ", (( (( type is global::ValueType )) ? (global::thx.Types.toString(((global::ValueType) (type) ))) : (( (( type is global::System.Type )) ? (global::Type.getClassName(((global::System.Type) (type) ))) : (( (( type is global::System.Type )) ? (global::Type.getEnumName(((global::System.Type) (type) ))) : (global::thx.Types.toString(global::Type.@typeof(((object) (type) )))) )) )) ))), " but it is "), global::thx.Types.toString(global::Type.@typeof(((object) (@value) ))));
			}
			
			global::thx.Assert.isTrue(global::Std.@is(@value, type), msg, pos);
		}
		
		
		public static void isNull(object @value, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat("expected null but it is ", global::Std.@string(@value));
			}
			
			global::thx.Assert.isTrue(( @value == null ), msg, pos);
		}
		
		
		public static void isTrue(bool cond, string msg, object pos) {
			if (cond) {
				global::thx.Assert.behavior.success(pos);
			}
			else {
				global::thx.Assert.behavior.fail(msg, pos);
			}
			
		}
		
		
		public static void matches(global::EReg pattern, object @value, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("the value ", global::Std.@string(@value)), " does not match the provided pattern");
			}
			
			global::thx.Assert.isTrue(pattern.match(global::haxe.lang.Runtime.toString(@value)), msg, pos);
		}
		
		
		public static void nearEquals(double expected, double @value, global::haxe.lang.Null<double> approx, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(expected)), " but it is "), global::haxe.lang.Runtime.toString(@value));
			}
			
			global::thx.Assert.isTrue(global::thx.Floats.nearEquals(expected, @value, approx), msg, pos);
			return;
		}
		
		
		public static void notEquals(object expected, object @value, string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(expected)), " and test value "), global::Std.@string(@value)), " should be different");
			}
			
			global::thx.Assert.isFalse(global::haxe.lang.Runtime.eq(expected, @value), msg, pos);
		}
		
		
		public static void notNull(object @value, string msg, object pos) {
			if (string.Equals(null, msg)) {
				msg = "expected not null";
			}
			
			global::thx.Assert.isTrue(( @value != null ), msg, pos);
		}
		
		
		public static void pass(string msg, object pos) {
			if (string.Equals(msg, null)) {
				msg = "pass expected";
			}
			
			global::thx.Assert.isTrue(true, msg, pos);
		}
		
		
		public static void raises(global::haxe.lang.Function method, object type, string msgNotThrown, string msgWrongType, object pos) {
			try {
				method.__hx_invoke0_o();
				if (string.Equals(null, msgNotThrown)) {
					msgNotThrown = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("exception of type ", (( (( null == type )) ? ("Dynamic") : (( (( type is global::ValueType )) ? (global::thx.Types.toString(((global::ValueType) (type) ))) : (( (( type is global::System.Type )) ? (global::Type.getClassName(((global::System.Type) (type) ))) : (( (( type is global::System.Type )) ? (global::Type.getEnumName(((global::System.Type) (type) ))) : (global::thx.Types.toString(global::Type.@typeof(((object) (type) )))) )) )) )) ))), " not raised");
				}
				
				global::thx.Assert.fail(msgNotThrown, pos);
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				{
					object ex = __temp_catchall2;
					if (( null == type )) {
						global::thx.Assert.pass(null, pos);
					}
					else {
						if (string.Equals(null, msgWrongType)) {
							msgWrongType = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected throw of type ", (( (( type is global::ValueType )) ? (global::thx.Types.toString(((global::ValueType) (type) ))) : (( (( type is global::System.Type )) ? (global::Type.getClassName(((global::System.Type) (type) ))) : (( (( type is global::System.Type )) ? (global::Type.getEnumName(((global::System.Type) (type) ))) : (global::thx.Types.toString(global::Type.@typeof(((object) (type) )))) )) )) ))), " but it is "), global::Std.@string(ex));
						}
						
						global::thx.Assert.isTrue(global::Std.@is(ex, type), msgWrongType, pos);
					}
					
				}
				
			}
			
			
		}
		
		
		public static void same(object expected, object @value, global::haxe.lang.Null<bool> recursive, string msg, object pos) {
			global::haxe.lang.Null<bool> __temp_recursive79 = ( ( ! (recursive.hasValue) ) ? (new global::haxe.lang.Null<bool>(true, true)) : (recursive) );
			object status = new global::haxe.lang.DynamicObject(new int[]{1246881189, 1291299698, 1932118984}, new object[]{"", (__temp_recursive79).toDynamic(), null}, new int[]{}, new double[]{});
			if (global::thx.Assert.sameAs(expected, @value, status)) {
				global::thx.Assert.pass(msg, pos);
			}
			else {
				global::thx.Assert.fail(( (string.Equals(msg, null)) ? (global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "error", 1932118984, true))) : (msg) ), pos);
			}
			
		}
		
		
		public static void stringContains(string match, string @value, string msg, object pos) {
			if ((  ! (string.Equals(@value, null))  && ( global::haxe.lang.StringExt.indexOf(@value, match, default(global::haxe.lang.Null<int>)) >= 0 ) )) {
				global::thx.Assert.pass(msg, pos);
			}
			else {
				global::thx.Assert.fail(( (string.Equals(msg, null)) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("value ", global::thx.Strings.quote(@value)), " does not contain "), global::thx.Strings.quote(match))) : (msg) ), pos);
			}
			
		}
		
		
		public static void stringSequence(global::Array<object> sequence, string @value, string msg, object pos) {
			unchecked {
				if (string.Equals(null, @value)) {
					global::thx.Assert.fail(( (string.Equals(msg, null)) ? ("null argument value") : (msg) ), pos);
					return;
				}
				
				int p = 0;
				{
					int _g = 0;
					while (( _g < sequence.length )) {
						string s = global::haxe.lang.Runtime.toString(sequence[_g]);
						 ++ _g;
						int p2 = global::haxe.lang.StringExt.indexOf(@value, s, new global::haxe.lang.Null<int>(p, true));
						if (( p2 < 0 )) {
							if (string.Equals(msg, null)) {
								msg = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.Strings.quote(s)), " after ");
								if (( p > 0 )) {
									msg = global::haxe.lang.Runtime.concat(msg, global::haxe.lang.Runtime.concat(" ", global::thx.Strings.quote(global::thx.Strings.ellipsis(@value, new global::haxe.lang.Null<int>(30, true), null))));
								}
								else {
									msg = global::haxe.lang.Runtime.concat(msg, " begin");
								}
								
							}
							
							global::thx.Assert.fail(msg, pos);
							return;
						}
						
						p = ( p2 + s.Length );
					}
					
				}
				
				global::thx.Assert.pass(msg, pos);
			}
		}
		
		
		public static void warn(string msg, object pos) {
			global::thx.Assert.behavior.warn(msg, pos);
		}
		
		
		public static bool sameAs(object expected, object @value, object status) {
			unchecked {
				global::haxe.lang.Function withPath = new global::thx.Assert_sameAs_401__Fun(status);
				if ( ! (global::thx.Types.sameType<object, object>(((object) (expected) ), ((object) (@value) ))) ) {
					global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected type ", global::thx.Types.toString(global::Type.@typeof(((object) (expected) )))), " but it is "), global::thx.Types.toString(global::Type.@typeof(((object) (@value) )))))));
					return false;
				}
				
				global::ValueType _g = global::Type.@typeof(expected);
				switch (_g.index) {
					case 0:
					case 1:
					case 3:
					{
						if (( ! (global::haxe.lang.Runtime.eq(expected, @value)) )) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(expected)), " but it is "), global::Std.@string(@value)))));
							return false;
						}
						
						return true;
					}
					
					
					case 2:
					{
						if ( ! (global::thx.Floats.nearEquals(((double) (global::haxe.lang.Runtime.toDouble(expected)) ), ((double) (global::haxe.lang.Runtime.toDouble(@value)) ), default(global::haxe.lang.Null<double>))) ) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(expected)), " but it is "), global::Std.@string(@value)))));
							return false;
						}
						
						return true;
					}
					
					
					case 4:
					{
						if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
							global::Array<object> tfields = global::Reflect.fields(@value);
							global::Array<object> fields = global::Reflect.fields(expected);
							string path = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
							{
								int _g1 = 0;
								while (( _g1 < fields.length )) {
									string field = global::haxe.lang.Runtime.toString(fields[_g1]);
									 ++ _g1;
									tfields.@remove(field);
									global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path, "")) ? (field) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", path), "."), field)) ));
									if ( ! (global::Reflect.hasField(@value, field)) ) {
										global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected field ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true))), " does not exist in "), global::Std.@string(@value)))));
										return false;
									}
									
									object e = global::Reflect.field(expected, field);
									if (( e is global::haxe.lang.Function )) {
										continue;
									}
									
									if ( ! (global::thx.Assert.sameAs(e, global::Reflect.field(@value, field), status)) ) {
										return false;
									}
									
								}
								
							}
							
							if (( tfields.length > 0 )) {
								global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("the tested object has extra field(s) (", tfields.@join(", ")), ") not included in the expected ones"))));
								return false;
							}
							
						}
						
						if (global::thx.Iterators.isIterator(expected)) {
							if ( ! (global::thx.Iterators.isIterator(@value)) ) {
								global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), "expected an Iterable")));
								return false;
							}
							
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								global::Array evalues = global::thx.Iterators.toArray<object>(((object) (expected) ));
								global::Array vvalues = global::thx.Iterators.toArray<object>(((object) (@value) ));
								if (( ((int) (global::haxe.lang.Runtime.getField_f(evalues, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(vvalues, "length", 520590566, true)) ) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(evalues, "length", 520590566, true)) ))), " values in Iterator but they are "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(vvalues, "length", 520590566, true)) ))))));
									return false;
								}
								
								string path1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g11 = 0;
									int _g2 = ((int) (global::haxe.lang.Runtime.getField_f(evalues, "length", 520590566, true)) );
									while (( _g11 < _g2 )) {
										int i = _g11++;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path1, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("iterator[", global::haxe.lang.Runtime.toString(i)), "]")) : (global::haxe.lang.Runtime.concat(path1, (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", global::haxe.lang.Runtime.toString(i)), "]")))) ));
										if ( ! (global::thx.Assert.sameAs(evalues[i], vvalues[i], status)) ) {
											global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(expected)), " but it is "), global::Std.@string(@value)))));
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (global::thx.Iterables.isIterable(expected)) {
							if ( ! (global::thx.Iterables.isIterable(@value)) ) {
								global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), "expected an Iterator")));
								return false;
							}
							
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								global::Array evalues1 = global::thx.Iterators.toArray<object>(((object) (global::haxe.lang.Runtime.callField(((object) (expected) ), "iterator", 328878574, null)) ));
								global::Array vvalues1 = global::thx.Iterators.toArray<object>(((object) (global::haxe.lang.Runtime.callField(((object) (@value) ), "iterator", 328878574, null)) ));
								if (( ((int) (global::haxe.lang.Runtime.getField_f(evalues1, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(vvalues1, "length", 520590566, true)) ) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(evalues1, "length", 520590566, true)) ))), " values in Iterable but they are "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(vvalues1, "length", 520590566, true)) ))))));
									return false;
								}
								
								string path2 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g12 = 0;
									int _g3 = ((int) (global::haxe.lang.Runtime.getField_f(evalues1, "length", 520590566, true)) );
									while (( _g12 < _g3 )) {
										int i1 = _g12++;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path2, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("iterable[", global::haxe.lang.Runtime.toString(i1)), "]")) : (global::haxe.lang.Runtime.concat(path2, (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", global::haxe.lang.Runtime.toString(i1)), "]")))) ));
										if ( ! (global::thx.Assert.sameAs(evalues1[i1], vvalues1[i1], status)) ) {
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						return true;
					}
					
					
					case 5:
					{
						if ( ! (global::Reflect.compareMethods(expected, @value)) ) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), "expected same function reference")));
							return false;
						}
						
						return true;
					}
					
					
					case 6:
					{
						if (( ( expected is string ) && ( ! (global::haxe.lang.Runtime.eq(expected, @value)) ) )) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.Strings.quote(global::haxe.lang.Runtime.toString(expected))), " but it is "), global::thx.Strings.quote(global::haxe.lang.Runtime.toString(@value))))));
							return false;
						}
						
						if (( expected is global::Array )) {
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								if (( ! (global::haxe.lang.Runtime.eq(global::haxe.lang.Runtime.getField(expected, "length", 520590566, true), global::haxe.lang.Runtime.getField(@value, "length", 520590566, true))) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(global::haxe.lang.Runtime.getField(expected, "length", 520590566, true))), " elements but they are "), global::Std.@string(global::haxe.lang.Runtime.getField(@value, "length", 520590566, true))))));
									return false;
								}
								
								string path3 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g13 = 0;
									int _g4 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(expected, "length", 520590566, true))) );
									while (( _g13 < _g4 )) {
										int i2 = _g13++;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path3, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("array[", global::haxe.lang.Runtime.toString(i2)), "]")) : (global::haxe.lang.Runtime.concat(path3, (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", global::haxe.lang.Runtime.toString(i2)), "]")))) ));
										if ( ! (global::thx.Assert.sameAs(((object) (global::haxe.lang.Runtime.callField(expected, "__get", 1915412854, new global::Array<object>(new object[]{i2}))) ), ((object) (global::haxe.lang.Runtime.callField(@value, "__get", 1915412854, new global::Array<object>(new object[]{i2}))) ), status)) ) {
											global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(((object) (global::haxe.lang.Runtime.callField(expected, "__get", 1915412854, new global::Array<object>(new object[]{i2}))) ))), " but it is "), global::Std.@string(((object) (global::haxe.lang.Runtime.callField(@value, "__get", 1915412854, new global::Array<object>(new object[]{i2}))) ))))));
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (( expected is global::Date )) {
							if (( ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (((global::Date) (expected) ).date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ) != ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (((global::Date) (@value) ).date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ) )) {
								global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(expected)), " but it is "), global::Std.@string(@value)))));
								return false;
							}
							
							return true;
						}
						
						if (( expected is global::haxe.io.Bytes )) {
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								global::haxe.io.Bytes ebytes = ((global::haxe.io.Bytes) (expected) );
								global::haxe.io.Bytes vbytes = ((global::haxe.io.Bytes) (@value) );
								if (( ebytes.length != vbytes.length )) {
									return false;
								}
								
								{
									int _g14 = 0;
									int _g5 = ebytes.length;
									while (( _g14 < _g5 )) {
										int i3 = _g14++;
										if (( ((int) (ebytes.b[i3]) ) != ((int) (vbytes.b[i3]) ) )) {
											global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected byte ", global::haxe.lang.Runtime.toString(((int) (ebytes.b[i3]) ))), " but it is "), global::haxe.lang.Runtime.toString(((int) (vbytes.b[i3]) ))))));
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (( expected is global::haxe.IMap )) {
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								global::haxe.IMap map = ((global::haxe.IMap) (expected) );
								global::haxe.IMap vmap = ((global::haxe.IMap) (@value) );
								global::Array _g6 = new global::Array<object>(new object[]{});
								{
									object tmp = map.keys();
									while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
										global::haxe.lang.Runtime.callField(_g6, "push", 1247875546, new global::Array<object>(new object[]{((object) (global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)) )}));
									}
									
								}
								
								global::Array _g15 = new global::Array<object>(new object[]{});
								{
									object tmp1 = vmap.keys();
									while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp1, "hasNext", 407283053, null))) {
										global::haxe.lang.Runtime.callField(_g15, "push", 1247875546, new global::Array<object>(new object[]{((object) (global::haxe.lang.Runtime.callField(tmp1, "next", 1224901875, null)) )}));
									}
									
								}
								
								if (( ((int) (global::haxe.lang.Runtime.getField_f(_g6, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(_g15, "length", 520590566, true)) ) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(_g6, "length", 520590566, true)) ))), " keys but they are "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(_g15, "length", 520590566, true)) ))))));
									return false;
								}
								
								string path4 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g21 = 0;
									while (( global::haxe.lang.Runtime.compare(_g21, ((int) (global::haxe.lang.Runtime.getField_f(_g6, "length", 520590566, true)) )) < 0 )) {
										object key = _g6[_g21];
										 ++ _g21;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path4, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("hash[", global::Std.@string(key)), "]")) : (global::haxe.lang.Runtime.concat(path4, (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", global::Std.@string(key)), "]")))) ));
										if ( ! (global::thx.Assert.sameAs(((object) (global::haxe.lang.Runtime.callField(map, "get", 5144726, new global::Array<object>(new object[]{key}))) ), ((object) (global::haxe.lang.Runtime.callField(vmap, "get", 5144726, new global::Array<object>(new object[]{key}))) ), status)) ) {
											global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(expected)), " but it is "), global::Std.@string(@value)))));
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (global::thx.Iterators.isIterator(expected)) {
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								global::Array evalues2 = global::thx.Iterators.toArray<object>(((object) (expected) ));
								global::Array vvalues2 = global::thx.Iterators.toArray<object>(((object) (@value) ));
								if (( ((int) (global::haxe.lang.Runtime.getField_f(evalues2, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(vvalues2, "length", 520590566, true)) ) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(evalues2, "length", 520590566, true)) ))), " values in Iterator but they are "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(vvalues2, "length", 520590566, true)) ))))));
									return false;
								}
								
								string path5 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g16 = 0;
									int _g7 = ((int) (global::haxe.lang.Runtime.getField_f(evalues2, "length", 520590566, true)) );
									while (( _g16 < _g7 )) {
										int i4 = _g16++;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path5, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("iterator[", global::haxe.lang.Runtime.toString(i4)), "]")) : (global::haxe.lang.Runtime.concat(path5, (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", path5), "["), global::haxe.lang.Runtime.toString(i4)), "]")))) ));
										if ( ! (global::thx.Assert.sameAs(evalues2[i4], vvalues2[i4], status)) ) {
											global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(expected)), " but it is "), global::Std.@string(@value)))));
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (global::thx.Iterables.isIterable(expected)) {
							if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
								global::Array evalues3 = global::thx.Iterators.toArray<object>(((object) (global::haxe.lang.Runtime.callField(((object) (expected) ), "iterator", 328878574, null)) ));
								global::Array vvalues3 = global::thx.Iterators.toArray<object>(((object) (global::haxe.lang.Runtime.callField(((object) (@value) ), "iterator", 328878574, null)) ));
								if (( ((int) (global::haxe.lang.Runtime.getField_f(evalues3, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(vvalues3, "length", 520590566, true)) ) )) {
									global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(evalues3, "length", 520590566, true)) ))), " values in Iterable but they are "), global::haxe.lang.Runtime.toString(((int) (global::haxe.lang.Runtime.getField_f(vvalues3, "length", 520590566, true)) ))))));
									return false;
								}
								
								string path6 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
								{
									int _g17 = 0;
									int _g8 = ((int) (global::haxe.lang.Runtime.getField_f(evalues3, "length", 520590566, true)) );
									while (( _g17 < _g8 )) {
										int i5 = _g17++;
										global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path6, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("iterable[", global::haxe.lang.Runtime.toString(i5)), "]")) : (global::haxe.lang.Runtime.concat(path6, (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", global::haxe.lang.Runtime.toString(i5)), "]")))) ));
										if ( ! (global::thx.Assert.sameAs(evalues3[i5], vvalues3[i5], status)) ) {
											return false;
										}
										
									}
									
								}
								
							}
							
							return true;
						}
						
						if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
							global::Array<object> fields1 = global::Type.getInstanceFields(global::Type.getClass<object>(((object) (expected) )));
							string path7 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
							{
								int _g9 = 0;
								while (( _g9 < fields1.length )) {
									string field1 = global::haxe.lang.Runtime.toString(fields1[_g9]);
									 ++ _g9;
									global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path7, "")) ? (field1) : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", path7), "."), field1)) ));
									object e1 = global::Reflect.field(expected, field1);
									if (( e1 is global::haxe.lang.Function )) {
										continue;
									}
									
									if ( ! (global::thx.Assert.sameAs(e1, global::Reflect.field(@value, field1), status)) ) {
										return false;
									}
									
								}
								
							}
							
						}
						
						return true;
					}
					
					
					case 7:
					{
						string eexpected = global::Type.getEnumName(((global::System.Type) (_g.@params[0]) ));
						string evalue = global::Type.getEnumName(global::Type.getEnum(@value));
						if ( ! (string.Equals(eexpected, evalue)) ) {
							global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected enumeration of ", eexpected), " but it is "), evalue))));
							return false;
						}
						
						if (( global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(status, "recursive", 1291299698, true)) || ((bool) (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true)), "")) ) )) {
							if (( global::Type.enumIndex(expected) != global::Type.enumIndex(@value) )) {
								global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Type.enumConstructor(expected)), " but it is "), global::Type.enumConstructor(@value)))));
								return false;
							}
							
							global::Array eparams = global::Type.enumParameters(expected);
							global::Array vparams = global::Type.enumParameters(@value);
							string path8 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(status, "path", 1246881189, true));
							{
								int _g18 = 0;
								int _g10 = ((int) (global::haxe.lang.Runtime.getField_f(eparams, "length", 520590566, true)) );
								while (( _g18 < _g10 )) {
									int i6 = _g18++;
									global::haxe.lang.Runtime.setField(status, "path", 1246881189, ( (string.Equals(path8, "")) ? (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("enum[", global::haxe.lang.Runtime.toString(i6)), "]")) : (global::haxe.lang.Runtime.concat(path8, (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", global::haxe.lang.Runtime.toString(i6)), "]")))) ));
									if ( ! (global::thx.Assert.sameAs(eparams[i6], vparams[i6], status)) ) {
										global::haxe.lang.Runtime.setField(status, "error", 1932118984, global::haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::Std.@string(expected)), " but it is "), global::Std.@string(@value)))));
										return false;
									}
									
								}
								
							}
							
						}
						
						return true;
					}
					
					
					case 8:
					{
						throw global::haxe.lang.HaxeException.wrap("Unable to compare two unknown types");
					}
					
					
				}
				
				return default(bool);
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.Assert(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.Assert();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Assert_sameAs_401__Fun : global::haxe.lang.Function {
		
		public Assert_sameAs_401__Fun(object status) : base(1, 0) {
			this.status = status;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string msg = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::haxe.lang.Runtime.concat(msg, (( (global::thx.Strings.isEmpty(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.status, "path", 1246881189, true)))) ? ("") : (global::haxe.lang.Runtime.concat(" at ", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.status, "path", 1246881189, true)))) )));
		}
		
		
		public object status;
		
	}
}


