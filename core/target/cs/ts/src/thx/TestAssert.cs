// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestAssert : global::haxe.lang.HxObject {
		
		public TestAssert(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestAssert() {
			global::thx.TestAssert.__hx_ctor_thx_TestAssert(this);
		}
		
		
		public static void __hx_ctor_thx_TestAssert(global::thx.TestAssert __temp_me181) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestAssert(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestAssert();
		}
		
		
		public global::thx.IAssertBehavior orig;
		
		public global::thx.CollectBehavior behavior;
		
		public virtual void setup() {
			this.orig = global::thx.Assert.behavior;
			global::thx.Assert.behavior = this.behavior = new global::thx.CollectBehavior();
		}
		
		
		public virtual void teardown() {
			global::thx.Assert.behavior = this.orig;
		}
		
		
		public virtual void testIsBool() {
			unchecked {
				global::thx.Assert.isTrue(true, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsBool", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
				global::thx.Assert.isTrue(false, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsBool", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
				global::thx.Assert.isFalse(true, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsBool", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
				global::thx.Assert.isFalse(false, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsBool", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
				this.expect(2, 2, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsBool", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
			}
		}
		
		
		public virtual void testIsNull() {
			unchecked {
				global::thx.Assert.isNull(null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
				global::thx.Assert.isNull(0, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
				global::thx.Assert.isNull(0.0, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
				global::thx.Assert.isNull(0.1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (34) )}));
				global::thx.Assert.isNull(1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
				global::thx.Assert.isNull("", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
				global::thx.Assert.isNull("a", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
				global::thx.Assert.isNull(global::Math.NaN, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
				global::thx.Assert.isNull(global::Math.POSITIVE_INFINITY, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
				global::thx.Assert.isNull(true, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
				global::thx.Assert.isNull(false, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
				this.expect(1, 10, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
			}
		}
		
		
		public virtual void testNotNull() {
			unchecked {
				global::thx.Assert.notNull(null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
				global::thx.Assert.notNull(0, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
				global::thx.Assert.notNull(0.0, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
				global::thx.Assert.notNull(0.1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
				global::thx.Assert.notNull(1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				global::thx.Assert.notNull("", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (51) )}));
				global::thx.Assert.notNull("a", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (52) )}));
				global::thx.Assert.notNull(global::Math.NaN, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
				global::thx.Assert.notNull(global::Math.POSITIVE_INFINITY, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (54) )}));
				global::thx.Assert.notNull(true, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
				global::thx.Assert.notNull(false, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
				this.expect(10, 1, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNotNull", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
			}
		}
		
		
		public virtual void testRaisesSuccess() {
			unchecked {
				int counter = 0;
				object __temp_stmt7 = null;
				{
					global::Array __temp_odecl1 = ((global::Array) (new global::Array<object>(new object[]{typeof(string), typeof(object), null})) );
					__temp_stmt7 = new global::haxe.lang.DynamicObject(new int[]{1234833487, 1772460393}, new object[]{((object) ("e") ), __temp_odecl1}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt8 = null;
				{
					global::Array __temp_odecl2 = ((global::Array) (new global::Array<object>(new object[]{typeof(int), typeof(object), null})) );
					__temp_stmt8 = new global::haxe.lang.DynamicObject(new int[]{1234833487, 1772460393}, new object[]{((object) (1) ), __temp_odecl2}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt9 = null;
				{
					global::Array __temp_odecl3 = ((global::Array) (new global::Array<object>(new object[]{typeof(double), typeof(object), null})) );
					__temp_stmt9 = new global::haxe.lang.DynamicObject(new int[]{1234833487, 1772460393}, new object[]{((object) (0.1) ), __temp_odecl3}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt10 = null;
				{
					object __temp_odecl4 = ((object) (new global::thx.TestAssert()) );
					global::Array __temp_odecl5 = ((global::Array) (new global::Array<object>(new object[]{typeof(global::thx.TestAssert), typeof(object), null})) );
					__temp_stmt10 = new global::haxe.lang.DynamicObject(new int[]{1234833487, 1772460393}, new object[]{__temp_odecl4, __temp_odecl5}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt11 = null;
				{
					global::Array __temp_odecl6 = ((global::Array) (new global::Array<object>(new object[]{typeof(global::Array<object>), typeof(object), null})) );
					__temp_stmt11 = new global::haxe.lang.DynamicObject(new int[]{1234833487, 1772460393}, new object[]{((object) (new global::Array<object>(new object[]{1})) ), __temp_odecl6}, new int[]{}, new double[]{});
				}
				
				global::Array<object> tests = new global::Array<object>(new object[]{__temp_stmt7, __temp_stmt8, __temp_stmt9, __temp_stmt10, __temp_stmt11});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						object test = tests[_g];
						 ++ _g;
						{
							int _g1 = 0;
							global::Array _g2 = ((global::Array) (global::haxe.lang.Runtime.getField(test, "catches", 1772460393, true)) );
							while (( global::haxe.lang.Runtime.compare(_g1, ((int) (global::haxe.lang.Runtime.getField_f(_g2, "length", 520590566, true)) )) < 0 )) {
								object catcher = _g2[_g1];
								 ++ _g1;
								 ++ counter;
								global::thx.Assert.raises(new global::thx.TestAssert_testRaisesSuccess_72__Fun(test), catcher, null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRaisesSuccess", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (72) )}));
							}
							
						}
						
					}
					
				}
				
				this.expect(counter, 0, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRaisesSuccess", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (75) )}));
			}
		}
		
		
		public virtual void testRaisesFailure() {
			unchecked {
				int counter = 0;
				object __temp_stmt7 = null;
				{
					global::Array __temp_odecl1 = ((global::Array) (new global::Array<object>(new object[]{typeof(int), typeof(double), typeof(global::thx.TestAssert)})) );
					__temp_stmt7 = new global::haxe.lang.DynamicObject(new int[]{1234833487, 1772460393}, new object[]{((object) ("e") ), __temp_odecl1}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt8 = null;
				{
					global::Array __temp_odecl2 = ((global::Array) (new global::Array<object>(new object[]{typeof(string), typeof(global::thx.TestAssert)})) );
					__temp_stmt8 = new global::haxe.lang.DynamicObject(new int[]{1234833487, 1772460393}, new object[]{((object) (1) ), __temp_odecl2}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt9 = null;
				{
					global::Array __temp_odecl3 = ((global::Array) (new global::Array<object>(new object[]{typeof(string), typeof(int), typeof(global::thx.TestAssert)})) );
					__temp_stmt9 = new global::haxe.lang.DynamicObject(new int[]{1234833487, 1772460393}, new object[]{((object) (0.1) ), __temp_odecl3}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt10 = null;
				{
					object __temp_odecl4 = ((object) (new global::thx.TestAssert()) );
					global::Array __temp_odecl5 = ((global::Array) (new global::Array<object>(new object[]{typeof(int), typeof(double), typeof(string)})) );
					__temp_stmt10 = new global::haxe.lang.DynamicObject(new int[]{1234833487, 1772460393}, new object[]{__temp_odecl4, __temp_odecl5}, new int[]{}, new double[]{});
				}
				
				object __temp_stmt11 = null;
				{
					global::Array __temp_odecl6 = ((global::Array) (new global::Array<object>(new object[]{typeof(global::thx.TestAssert), typeof(int), typeof(double)})) );
					__temp_stmt11 = new global::haxe.lang.DynamicObject(new int[]{1234833487, 1772460393}, new object[]{((object) (new global::Array<object>(new object[]{1})) ), __temp_odecl6}, new int[]{}, new double[]{});
				}
				
				global::Array<object> tests = new global::Array<object>(new object[]{__temp_stmt7, __temp_stmt8, __temp_stmt9, __temp_stmt10, __temp_stmt11});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						object test = tests[_g];
						 ++ _g;
						{
							int _g1 = 0;
							global::Array _g2 = ((global::Array) (global::haxe.lang.Runtime.getField(test, "catches", 1772460393, true)) );
							while (( global::haxe.lang.Runtime.compare(_g1, ((int) (global::haxe.lang.Runtime.getField_f(_g2, "length", 520590566, true)) )) < 0 )) {
								object catcher = _g2[_g1];
								 ++ _g1;
								 ++ counter;
								global::thx.Assert.raises(new global::thx.TestAssert_testRaisesFailure_90__Fun(test), catcher, null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRaisesFailure", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (90) )}));
							}
							
						}
						
					}
					
				}
				
				this.expect(0, counter, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRaisesFailure", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (93) )}));
			}
		}
		
		
		public virtual void testIs() {
			unchecked {
				global::Array values = new global::Array<object>(new object[]{"e", 1, 0.1, new global::thx.TestAssert(), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), new global::Array<object>(new object[]{1})});
				global::Array types = new global::Array<object>(new object[]{typeof(string), typeof(int), typeof(double), typeof(global::thx.TestAssert), typeof(object), typeof(global::Array<object>)});
				int i = 0;
				{
					int _g = 0;
					while (( global::haxe.lang.Runtime.compare(_g, ((int) (global::haxe.lang.Runtime.getField_f(values, "length", 520590566, true)) )) < 0 )) {
						object @value = values[_g];
						 ++ _g;
						{
							int _g1 = 0;
							while (( global::haxe.lang.Runtime.compare(_g1, ((int) (global::haxe.lang.Runtime.getField_f(types, "length", 520590566, true)) )) < 0 )) {
								object type = types[_g1];
								 ++ _g1;
								 ++ i;
								global::thx.Assert.@is(@value, type, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIs", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (104) )}));
							}
							
						}
						
					}
					
				}
				
				this.expect(12, ( i - 12 ), default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIs", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (106) )}));
			}
		}
		
		
		public virtual void testSamePrimitive() {
			unchecked {
				global::thx.Assert.same(null, 1, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (110) )}));
				global::thx.Assert.same(1, 1, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (111) )}));
				global::thx.Assert.same(1, "1", default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (112) )}));
				global::thx.Assert.same("a", "a", default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (113) )}));
				global::thx.Assert.same(null, "", default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (114) )}));
				global::thx.Assert.same(new global::Date(2000, 0, 1, 0, 0, 0), null, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (115) )}));
				global::haxe.ds.IntMap<object> _g = new global::haxe.ds.IntMap<object>();
				_g.@set(1, "a");
				_g.@set(2, "b");
				global::haxe.ds.IntMap<object> _g1 = new global::haxe.ds.IntMap<object>();
				_g1.@set(1, "a");
				_g1.@set(2, "b");
				global::thx.Assert.same(_g, _g1, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (116) )}));
				global::haxe.ds.StringMap<int> _g2 = new global::haxe.ds.StringMap<int>();
				_g2.@set(((string) ("a") ), ((int) (1) ));
				global::haxe.ds.StringMap<int> _g3 = new global::haxe.ds.StringMap<int>();
				_g3.@set(((string) ("a") ), ((int) (1) ));
				global::thx.Assert.same(_g2, _g3, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (117) )}));
				global::haxe.ds.StringMap<int> _g4 = new global::haxe.ds.StringMap<int>();
				_g4.@set(((string) ("a") ), ((int) (1) ));
				global::haxe.ds.IntMap<int> _g5 = new global::haxe.ds.IntMap<int>();
				_g5.@set(1, 1);
				global::thx.Assert.same(_g4, _g5, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (118) )}));
				global::haxe.ds.IntMap<object> _g6 = new global::haxe.ds.IntMap<object>();
				_g6.@set(1, "a");
				global::haxe.ds.IntMap<object> _g7 = new global::haxe.ds.IntMap<object>();
				_g7.@set(1, "a");
				_g7.@set(2, "b");
				global::thx.Assert.same(_g6, _g7, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (119) )}));
				global::thx.Assert.same(new global::Date(2000, 0, 1, 0, 0, 0), new global::Date(2000, 0, 1, 0, 0, 0), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (120) )}));
				this.expect(5, 6, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSamePrimitive", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (122) )}));
			}
		}
		
		
		public virtual void testSameType() {
			unchecked {
				global::thx.Assert.same(null, new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (126) )}));
				global::thx.Assert.same(null, null, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (127) )}));
				global::thx.Assert.same(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), null, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (128) )}));
				global::thx.Assert.same(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), 1, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (129) )}));
				global::thx.Assert.same(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), new global::Array<object>(new object[]{}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (130) )}));
				global::thx.Assert.same(null, global::thx._TestAssert.Sample.None, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
				global::thx.Assert.same(global::thx._TestAssert.Sample.None, null, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (132) )}));
				this.expect(1, 6, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameType", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (134) )}));
			}
		}
		
		
		public virtual void testSameArray() {
			unchecked {
				global::thx.Assert.same(new global::Array<object>(new object[]{}), new global::Array<object>(new object[]{}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (138) )}));
				global::thx.Assert.same(new global::Array<object>(new object[]{1}), new global::Array<object>(new object[]{"1"}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (139) )}));
				global::thx.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), new global::Array<object>(new object[]{1, 2, 3}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (140) )}));
				global::thx.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), new global::Array<object>(new object[]{1, 2}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (141) )}));
				global::thx.Assert.same(new global::Array<object>(new object[]{1, 2}), new global::Array<object>(new object[]{1, 2, 3}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (142) )}));
				global::thx.Assert.same(new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{1, 2})}), new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{1, 2})}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (143) )}));
				global::thx.Assert.same(new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{1, 2})}), new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{})}), new global::haxe.lang.Null<bool>(false, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (144) )}));
				global::thx.Assert.same(new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{1, 2})}), new global::Array<object>(new object[]{1, new global::Array<object>(new object[]{})}), new global::haxe.lang.Null<bool>(true, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (145) )}));
				this.expect(4, 4, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameArray", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (147) )}));
			}
		}
		
		
		public virtual void testSameObject() {
			unchecked {
				global::thx.Assert.same(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (151) )}));
				global::thx.Assert.same(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{97}, new object[]{"1"}, new int[]{}, new double[]{}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (152) )}));
				global::thx.Assert.same(new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (153) )}));
				global::thx.Assert.same(new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{99}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (154) )}));
				global::thx.Assert.same(new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97}, new double[]{((double) (1) )}), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (155) )}));
				object __temp_stmt7 = null;
				{
					object __temp_odecl1 = new global::haxe.lang.DynamicObject(new int[]{99}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )});
					__temp_stmt7 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl1}, new int[]{97}, new double[]{((double) (1) )});
				}
				
				object __temp_stmt8 = null;
				{
					object __temp_odecl2 = new global::haxe.lang.DynamicObject(new int[]{99}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )});
					__temp_stmt8 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl2}, new int[]{97}, new double[]{((double) (1) )});
				}
				
				global::thx.Assert.same(__temp_stmt7, __temp_stmt8, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (156) )}));
				object __temp_stmt9 = null;
				{
					object __temp_odecl3 = new global::haxe.lang.DynamicObject(new int[]{99}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )});
					__temp_stmt9 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl3}, new int[]{97}, new double[]{((double) (1) )});
				}
				
				object __temp_stmt10 = null;
				{
					object __temp_odecl4 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{});
					__temp_stmt10 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl4}, new int[]{97}, new double[]{((double) (1) )});
				}
				
				global::thx.Assert.same(__temp_stmt9, __temp_stmt10, new global::haxe.lang.Null<bool>(false, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (157) )}));
				object __temp_stmt11 = null;
				{
					object __temp_odecl5 = new global::haxe.lang.DynamicObject(new int[]{99}, new object[]{"c"}, new int[]{97}, new double[]{((double) (1) )});
					__temp_stmt11 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl5}, new int[]{97}, new double[]{((double) (1) )});
				}
				
				object __temp_stmt12 = null;
				{
					object __temp_odecl6 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{});
					__temp_stmt12 = new global::haxe.lang.DynamicObject(new int[]{98}, new object[]{__temp_odecl6}, new int[]{97}, new double[]{((double) (1) )});
				}
				
				global::thx.Assert.same(__temp_stmt11, __temp_stmt12, new global::haxe.lang.Null<bool>(true, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (158) )}));
				this.expect(4, 4, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameObject", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (160) )}));
			}
		}
		
		
		public string @value;
		
		public global::thx.TestAssert sub;
		
		public virtual void testSameInstance() {
			unchecked {
				global::thx.TestAssert c1 = new global::thx.TestAssert();
				c1.@value = "a";
				global::thx.TestAssert c2 = new global::thx.TestAssert();
				c2.@value = "a";
				global::thx.TestAssert c3 = new global::thx.TestAssert();
				global::thx.TestAssert r1 = new global::thx.TestAssert();
				r1.sub = c1;
				global::thx.TestAssert r2 = new global::thx.TestAssert();
				r2.sub = c2;
				global::thx.TestAssert r3 = new global::thx.TestAssert();
				r3.sub = c3;
				global::thx.Assert.same(c1, c1, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (180) )}));
				global::thx.Assert.same(c1, c2, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (181) )}));
				global::thx.Assert.same(c1, c3, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (182) )}));
				global::thx.Assert.same(r1, r2, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (184) )}));
				global::thx.Assert.same(r1, r3, new global::haxe.lang.Null<bool>(false, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (185) )}));
				global::thx.Assert.same(r1, r3, new global::haxe.lang.Null<bool>(true, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (186) )}));
				this.expect(4, 2, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameInstance", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (188) )}));
			}
		}
		
		
		public virtual void testSameIterable() {
			unchecked {
				global::List list1 = new global::List<object>();
				global::haxe.lang.Runtime.callField(list1, "add", 4846113, new global::Array<object>(new object[]{"a"}));
				global::haxe.lang.Runtime.callField(list1, "add", 4846113, new global::Array<object>(new object[]{1}));
				global::List<int> s1 = new global::List<int>();
				s1.@add(2);
				global::haxe.lang.Runtime.callField(list1, "add", 4846113, new global::Array<object>(new object[]{s1}));
				global::List list2 = new global::List<object>();
				global::haxe.lang.Runtime.callField(list2, "add", 4846113, new global::Array<object>(new object[]{"a"}));
				global::haxe.lang.Runtime.callField(list2, "add", 4846113, new global::Array<object>(new object[]{1}));
				global::haxe.lang.Runtime.callField(list2, "add", 4846113, new global::Array<object>(new object[]{s1}));
				global::List list3 = new global::List<object>();
				global::haxe.lang.Runtime.callField(list3, "add", 4846113, new global::Array<object>(new object[]{"a"}));
				global::haxe.lang.Runtime.callField(list3, "add", 4846113, new global::Array<object>(new object[]{1}));
				global::haxe.lang.Runtime.callField(list3, "add", 4846113, new global::Array<object>(new object[]{new global::List<object>()}));
				global::thx.Assert.same(list1, list2, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (207) )}));
				global::thx.Assert.same(list1, list3, new global::haxe.lang.Null<bool>(false, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (208) )}));
				global::thx.Assert.same(list1, list3, new global::haxe.lang.Null<bool>(true, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (209) )}));
				global::thx.Assert.same(new global::IntIterator(0, 3), new global::IntIterator(0, 3), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (211) )}));
				global::thx.Assert.same(new global::IntIterator(0, 3), new global::IntIterator(0, 4), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (212) )}));
				this.expect(3, 2, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameIterable", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (214) )}));
			}
		}
		
		
		public virtual void testSameMap() {
			unchecked {
				global::haxe.ds.StringMap<object> h1 = new global::haxe.ds.StringMap<object>();
				h1.@set(((string) ("a") ), ((object) ("b") ));
				h1.@set(((string) ("c") ), ((object) ("d") ));
				global::haxe.ds.StringMap<object> h2 = new global::haxe.ds.StringMap<object>();
				h2.@set(((string) ("a") ), ((object) ("b") ));
				h2.@set(((string) ("c") ), ((object) ("d") ));
				global::haxe.ds.StringMap h3 = new global::haxe.ds.StringMap<object>();
				global::haxe.ds.StringMap<object> h4 = new global::haxe.ds.StringMap<object>();
				h4.@set(((string) ("c") ), ((object) ("d") ));
				global::haxe.ds.IntMap<object> i1 = new global::haxe.ds.IntMap<object>();
				i1.@set(2, "b");
				global::haxe.ds.IntMap<object> i2 = new global::haxe.ds.IntMap<object>();
				i2.@set(2, "b");
				global::thx.Assert.same(h1, h2, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameMap", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (233) )}));
				global::thx.Assert.same(h1, h3, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameMap", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (234) )}));
				global::thx.Assert.same(h1, h4, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameMap", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (235) )}));
				global::thx.Assert.same(i1, i2, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameMap", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (236) )}));
				this.expect(2, 2, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameMap", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (238) )}));
			}
		}
		
		
		public virtual void testSameEnums() {
			unchecked {
				global::thx.Assert.same(global::thx._TestAssert.Sample.None, global::thx._TestAssert.Sample.None, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (243) )}));
				global::thx.Assert.same(global::thx._TestAssert.Sample.Some("a"), global::thx._TestAssert.Sample.Some("a"), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (244) )}));
				global::thx.Assert.same(global::thx._TestAssert.Sample.Some("a"), global::thx._TestAssert.Sample.Some("b"), new global::haxe.lang.Null<bool>(true, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (245) )}));
				global::thx.Assert.same(global::thx._TestAssert.Sample.Some("a"), global::thx._TestAssert.Sample.Some("b"), new global::haxe.lang.Null<bool>(false, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (246) )}));
				global::thx.Assert.same(global::thx._TestAssert.Sample.Some("a"), global::thx._TestAssert.Sample.None, default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (247) )}));
				global::thx.Assert.same(global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.Some("a"))), global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.Some("a"))), default(global::haxe.lang.Null<bool>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (248) )}));
				global::thx.Assert.same(global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.Some("a"))), global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.None), new global::haxe.lang.Null<bool>(true, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (249) )}));
				global::thx.Assert.same(global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.Some("a"))), global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.Rec(global::thx._TestAssert.Sample.None)), new global::haxe.lang.Null<bool>(false, true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (250) )}));
				this.expect(4, 4, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSameEnums", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (252) )}));
			}
		}
		
		
		public virtual void testEquals() {
			unchecked {
				global::Array values = new global::Array<object>(new object[]{"e", 1, 0.1, new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{})});
				global::Array expecteds = new global::Array<object>(new object[]{"e", 1, 0.1, new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{})});
				int i = 0;
				{
					int _g = 0;
					while (( global::haxe.lang.Runtime.compare(_g, ((int) (global::haxe.lang.Runtime.getField_f(expecteds, "length", 520590566, true)) )) < 0 )) {
						object expected = expecteds[_g];
						 ++ _g;
						{
							int _g1 = 0;
							while (( global::haxe.lang.Runtime.compare(_g1, ((int) (global::haxe.lang.Runtime.getField_f(values, "length", 520590566, true)) )) < 0 )) {
								object @value = values[_g1];
								 ++ _g1;
								 ++ i;
								global::thx.Assert.@equals(expected, @value, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (263) )}));
							}
							
						}
						
					}
					
				}
				
				this.expect(3, ( i - 3 ), default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (265) )}));
			}
		}
		
		
		public virtual void testNearEqualsSuccess() {
			unchecked {
				int counter = 0;
				global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{227901409}, new object[]{new global::Array<double>(new double[]{0.1, 0.100000000000000000000000000001, 0.099999999999999999999999999999})}, new int[]{1076899448}, new double[]{0.1}), new global::haxe.lang.DynamicObject(new int[]{227901409}, new object[]{new global::Array<double>(new double[]{((double) (1) ), 1.000000000000000000000000000001, 0.999999999999999999999999999999})}, new int[]{1076899448}, new double[]{((double) (1) )}), new global::haxe.lang.DynamicObject(new int[]{227901409}, new object[]{new global::Array<double>(new double[]{global::Math.NaN})}, new int[]{1076899448}, new double[]{global::Math.NaN}), new global::haxe.lang.DynamicObject(new int[]{227901409}, new object[]{new global::Array<double>(new double[]{global::Math.NEGATIVE_INFINITY})}, new int[]{1076899448}, new double[]{global::Math.NEGATIVE_INFINITY}), new global::haxe.lang.DynamicObject(new int[]{227901409}, new object[]{new global::Array<double>(new double[]{global::Math.POSITIVE_INFINITY})}, new int[]{1076899448}, new double[]{global::Math.POSITIVE_INFINITY}), new global::haxe.lang.DynamicObject(new int[]{227901409}, new object[]{new global::Array<double>(new double[]{global::Math.PI})}, new int[]{1076899448}, new double[]{global::Math.PI})});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						object test = tests[_g];
						 ++ _g;
						{
							int _g1 = 0;
							global::Array<double> _g2 = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (global::haxe.lang.Runtime.getField(test, "tests", 227901409, true)) ))) );
							while (( _g1 < _g2.length )) {
								double @value = _g2[_g1];
								 ++ _g1;
								 ++ counter;
								global::thx.Assert.nearEquals(global::haxe.lang.Runtime.getField_f(test, "expected", 1076899448, true), @value, default(global::haxe.lang.Null<double>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNearEqualsSuccess", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (281) )}));
							}
							
						}
						
					}
					
				}
				
				this.expect(counter, 0, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNearEqualsSuccess", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (284) )}));
			}
		}
		
		
		public virtual void testNearEqualsFail() {
			unchecked {
				int counter = 0;
				global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{227901409}, new object[]{new global::Array<double>(new double[]{0.2, 0.10000001, 0.0999998, global::Math.NaN, global::Math.POSITIVE_INFINITY, global::Math.NEGATIVE_INFINITY})}, new int[]{1076899448}, new double[]{0.1}), new global::haxe.lang.DynamicObject(new int[]{227901409}, new object[]{new global::Array<double>(new double[]{((double) (2) ), 1.1, 0.9, global::Math.POSITIVE_INFINITY, global::Math.NEGATIVE_INFINITY})}, new int[]{1076899448}, new double[]{global::Math.NaN}), new global::haxe.lang.DynamicObject(new int[]{227901409}, new object[]{new global::Array<double>(new double[]{((double) (2) ), 1.1, 0.9, global::Math.NaN, global::Math.POSITIVE_INFINITY})}, new int[]{1076899448}, new double[]{global::Math.NEGATIVE_INFINITY}), new global::haxe.lang.DynamicObject(new int[]{227901409}, new object[]{new global::Array<double>(new double[]{((double) (2) ), 1.1, 0.9, global::Math.NaN, global::Math.NEGATIVE_INFINITY})}, new int[]{1076899448}, new double[]{global::Math.POSITIVE_INFINITY})});
				{
					int _g = 0;
					while (( _g < tests.length )) {
						object test = tests[_g];
						 ++ _g;
						{
							int _g1 = 0;
							global::Array<double> _g2 = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (global::haxe.lang.Runtime.getField(test, "tests", 227901409, true)) ))) );
							while (( _g1 < _g2.length )) {
								double @value = _g2[_g1];
								 ++ _g1;
								 ++ counter;
								global::thx.Assert.nearEquals(global::haxe.lang.Runtime.getField_f(test, "expected", 1076899448, true), @value, default(global::haxe.lang.Null<double>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNearEqualsFail", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (299) )}));
							}
							
						}
						
					}
					
				}
				
				this.expect(0, counter, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNearEqualsFail", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (302) )}));
			}
		}
		
		
		public virtual void testPass() {
			unchecked {
				global::thx.Assert.pass(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPass", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (306) )}));
				this.expect(1, 0, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPass", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (307) )}));
			}
		}
		
		
		public virtual void testFail() {
			unchecked {
				global::thx.Assert.fail(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFail", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (311) )}));
				this.expect(0, 1, default(global::haxe.lang.Null<int>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFail", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (312) )}));
			}
		}
		
		
		public virtual void testWarn() {
			unchecked {
				global::thx.Assert.warn("", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWarn", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (316) )}));
				this.expect(0, 0, new global::haxe.lang.Null<int>(1, true), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWarn", "thx.TestAssert", "TestAssert.hx"}, new int[]{1981972957}, new double[]{((double) (317) )}));
			}
		}
		
		
		public virtual void expect(int successes, int failures, global::haxe.lang.Null<int> warnings, object pos) {
			int __temp_warnings180 = ( ( ! (warnings.hasValue) ) ? (0) : ((warnings).@value) );
			global::utest.Assert.@equals(successes, this.behavior.successes, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(successes)), " successes but they are "), global::haxe.lang.Runtime.toString(this.behavior.successes)), pos);
			global::utest.Assert.@equals(failures, this.behavior.failures, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(failures)), " failures but they are "), global::haxe.lang.Runtime.toString(this.behavior.failures)), pos);
			global::utest.Assert.@equals(__temp_warnings180, this.behavior.warnings, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::haxe.lang.Runtime.toString(__temp_warnings180)), " warnings but they are "), global::haxe.lang.Runtime.toString(this.behavior.warnings)), pos);
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5745024:
					{
						this.sub = ((global::thx.TestAssert) (@value) );
						return @value;
					}
					
					
					case 834174833:
					{
						this.@value = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 177377426:
					{
						this.behavior = ((global::thx.CollectBehavior) (@value) );
						return @value;
					}
					
					
					case 1236634561:
					{
						this.orig = ((global::thx.IAssertBehavior) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1148579289:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "expect", 1148579289)) );
					}
					
					
					case 1378150328:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testWarn", 1378150328)) );
					}
					
					
					case 1189625680:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFail", 1189625680)) );
					}
					
					
					case 1300523587:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPass", 1300523587)) );
					}
					
					
					case 150376119:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNearEqualsFail", 150376119)) );
					}
					
					
					case 1807294090:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNearEqualsSuccess", 1807294090)) );
					}
					
					
					case 1491547185:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEquals", 1491547185)) );
					}
					
					
					case 1009618522:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameEnums", 1009618522)) );
					}
					
					
					case 959828132:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameMap", 959828132)) );
					}
					
					
					case 1136065450:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameIterable", 1136065450)) );
					}
					
					
					case 168524941:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameInstance", 168524941)) );
					}
					
					
					case 5745024:
					{
						return this.sub;
					}
					
					
					case 834174833:
					{
						return this.@value;
					}
					
					
					case 2066099639:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameObject", 2066099639)) );
					}
					
					
					case 1899349409:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameArray", 1899349409)) );
					}
					
					
					case 1519612850:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSameType", 1519612850)) );
					}
					
					
					case 473924783:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSamePrimitive", 473924783)) );
					}
					
					
					case 1429881052:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIs", 1429881052)) );
					}
					
					
					case 1562364241:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRaisesFailure", 1562364241)) );
					}
					
					
					case 2121498314:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRaisesSuccess", 2121498314)) );
					}
					
					
					case 2063734536:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNotNull", 2063734536)) );
					}
					
					
					case 2137631107:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsNull", 2137631107)) );
					}
					
					
					case 2004258598:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsBool", 2004258598)) );
					}
					
					
					case 26061316:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "teardown", 26061316)) );
					}
					
					
					case 2049945213:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setup", 2049945213)) );
					}
					
					
					case 177377426:
					{
						return this.behavior;
					}
					
					
					case 1236634561:
					{
						return this.orig;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1148579289:
					{
						this.expect(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), global::haxe.lang.Null<object>.ofDynamic<int>(dynargs[2]), dynargs[3]);
						break;
					}
					
					
					case 1378150328:
					{
						this.testWarn();
						break;
					}
					
					
					case 1189625680:
					{
						this.testFail();
						break;
					}
					
					
					case 1300523587:
					{
						this.testPass();
						break;
					}
					
					
					case 150376119:
					{
						this.testNearEqualsFail();
						break;
					}
					
					
					case 1807294090:
					{
						this.testNearEqualsSuccess();
						break;
					}
					
					
					case 1491547185:
					{
						this.testEquals();
						break;
					}
					
					
					case 1009618522:
					{
						this.testSameEnums();
						break;
					}
					
					
					case 959828132:
					{
						this.testSameMap();
						break;
					}
					
					
					case 1136065450:
					{
						this.testSameIterable();
						break;
					}
					
					
					case 168524941:
					{
						this.testSameInstance();
						break;
					}
					
					
					case 2066099639:
					{
						this.testSameObject();
						break;
					}
					
					
					case 1899349409:
					{
						this.testSameArray();
						break;
					}
					
					
					case 1519612850:
					{
						this.testSameType();
						break;
					}
					
					
					case 473924783:
					{
						this.testSamePrimitive();
						break;
					}
					
					
					case 1429881052:
					{
						this.testIs();
						break;
					}
					
					
					case 1562364241:
					{
						this.testRaisesFailure();
						break;
					}
					
					
					case 2121498314:
					{
						this.testRaisesSuccess();
						break;
					}
					
					
					case 2063734536:
					{
						this.testNotNull();
						break;
					}
					
					
					case 2137631107:
					{
						this.testIsNull();
						break;
					}
					
					
					case 2004258598:
					{
						this.testIsBool();
						break;
					}
					
					
					case 26061316:
					{
						this.teardown();
						break;
					}
					
					
					case 2049945213:
					{
						this.setup();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("sub");
			baseArr.push("value");
			baseArr.push("behavior");
			baseArr.push("orig");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestAssert_testRaisesSuccess_72__Fun : global::haxe.lang.Function {
		
		public TestAssert_testRaisesSuccess_72__Fun(object test) : base(0, 0) {
			this.test = test;
		}
		
		
		public override object __hx_invoke0_o() {
			throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.getField(this.test, "exception", 1234833487, true));
		}
		
		
		public object test;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestAssert_testRaisesFailure_90__Fun : global::haxe.lang.Function {
		
		public TestAssert_testRaisesFailure_90__Fun(object test) : base(0, 0) {
			this.test = test;
		}
		
		
		public override object __hx_invoke0_o() {
			throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.getField(this.test, "exception", 1234833487, true));
		}
		
		
		public object test;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class CollectBehavior : global::haxe.lang.HxObject, global::thx.IAssertBehavior {
		
		public CollectBehavior(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public CollectBehavior() {
			global::thx.CollectBehavior.__hx_ctor_thx_CollectBehavior(this);
		}
		
		
		public static void __hx_ctor_thx_CollectBehavior(global::thx.CollectBehavior __temp_me182) {
			__temp_me182.failures = 0;
			__temp_me182.warnings = 0;
			__temp_me182.successes = 0;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.CollectBehavior(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.CollectBehavior();
		}
		
		
		public int successes;
		
		public int warnings;
		
		public int failures;
		
		public virtual void success(object pos) {
			this.successes++;
		}
		
		
		public virtual void warn(string message, object pos) {
			this.warnings++;
		}
		
		
		public virtual void fail(string message, object pos) {
			this.failures++;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 69718249:
					{
						this.failures = ((int) (@value) );
						return @value;
					}
					
					
					case 143865495:
					{
						this.warnings = ((int) (@value) );
						return @value;
					}
					
					
					case 74822897:
					{
						this.successes = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 69718249:
					{
						this.failures = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 143865495:
					{
						this.warnings = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 74822897:
					{
						this.successes = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1135983070:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "fail", 1135983070)) );
					}
					
					
					case 1324507718:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "warn", 1324507718)) );
					}
					
					
					case 944645571:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "success", 944645571)) );
					}
					
					
					case 69718249:
					{
						return this.failures;
					}
					
					
					case 143865495:
					{
						return this.warnings;
					}
					
					
					case 74822897:
					{
						return this.successes;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 69718249:
					{
						return ((double) (this.failures) );
					}
					
					
					case 143865495:
					{
						return ((double) (this.warnings) );
					}
					
					
					case 74822897:
					{
						return ((double) (this.successes) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1135983070:
					{
						this.fail(global::haxe.lang.Runtime.toString(dynargs[0]), dynargs[1]);
						break;
					}
					
					
					case 1324507718:
					{
						this.warn(global::haxe.lang.Runtime.toString(dynargs[0]), dynargs[1]);
						break;
					}
					
					
					case 944645571:
					{
						this.success(dynargs[0]);
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("failures");
			baseArr.push("warnings");
			baseArr.push("successes");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._TestAssert {
	public class Sample : global::haxe.lang.ParamEnum {
		
		public Sample(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"None", "Some", "Rec"};
		
		public static readonly global::thx._TestAssert.Sample None = new global::thx._TestAssert.Sample(0, null);
		
		public static global::thx._TestAssert.Sample Some(string s) {
			unchecked {
				return new global::thx._TestAssert.Sample(1, new object[]{s});
			}
		}
		
		
		public static global::thx._TestAssert.Sample Rec(global::thx._TestAssert.Sample s) {
			unchecked {
				return new global::thx._TestAssert.Sample(2, new object[]{s});
			}
		}
		
		
		public override string getTag() {
			return global::thx._TestAssert.Sample.__hx_constructs[this.index];
		}
		
		
	}
}


