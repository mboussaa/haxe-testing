// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestReadonlyArray : global::haxe.lang.HxObject {
		
		public TestReadonlyArray(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestReadonlyArray() {
			global::thx.TestReadonlyArray.__hx_ctor_thx_TestReadonlyArray(this);
		}
		
		
		public static void __hx_ctor_thx_TestReadonlyArray(global::thx.TestReadonlyArray __temp_me219) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestReadonlyArray(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestReadonlyArray();
		}
		
		
		public virtual void testInsertAt() {
			unchecked {
				global::Array<int> a = new global::Array<int>(new int[]{1, 2, 4});
				global::Array<int> b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(0, true)).concat(new global::Array<int>(new int[]{0})).concat(((global::Array<int>) (a) ).slice(0, default(global::haxe.lang.Null<int>)))) );
				global::utest.Assert.isTrue(( a != b ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInsertAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{0, 1, 2, 4}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInsertAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
				b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(2, true)).concat(new global::Array<int>(new int[]{3})).concat(((global::Array<int>) (a) ).slice(2, default(global::haxe.lang.Null<int>)))) );
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3, 4}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInsertAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
				b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(10, true)).concat(new global::Array<int>(new int[]{5})).concat(((global::Array<int>) (a) ).slice(10, default(global::haxe.lang.Null<int>)))) );
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 4, 5}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInsertAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
			}
		}
		
		
		public virtual void testReplaceAt() {
			unchecked {
				global::Array<int> a = new global::Array<int>(new int[]{1, 2, 4});
				global::Array<int> b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(0, true)).concat(new global::Array<int>(new int[]{0})).concat(((global::Array<int>) (a) ).slice(1, default(global::haxe.lang.Null<int>)))) );
				global::utest.Assert.isTrue(( a != b ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReplaceAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{0, 2, 4}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReplaceAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
				b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(2, true)).concat(new global::Array<int>(new int[]{3})).concat(((global::Array<int>) (a) ).slice(3, default(global::haxe.lang.Null<int>)))) );
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReplaceAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
				b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(10, true)).concat(new global::Array<int>(new int[]{5})).concat(((global::Array<int>) (a) ).slice(11, default(global::haxe.lang.Null<int>)))) );
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 4, 5}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReplaceAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
			}
		}
		
		
		public virtual void testPush() {
			unchecked {
				global::Array<int> a = new global::Array<int>(new int[]{1, 2, 3});
				global::Array<int> b = ((global::Array<int>) (((global::Array<int>) (a) ).concat(new global::Array<int>(new int[]{4}))) );
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), a, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPush", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3, 4}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPush", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
			}
		}
		
		
		public virtual void testPop() {
			unchecked {
				global::Array<int> a = new global::Array<int>(new int[]{1, 2});
				object tmp = null;
				if (( ((global::Array<int>) (a) ).length == 0 )) {
					tmp = ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{(default(global::haxe.lang.Null<int>)).toDynamic(), ((global::Array<int>) (a) )}, new int[]{}, new double[]{})) );
				}
				else {
					int @value = ((global::Array<int>) (a) )[( ((global::Array<int>) (a) ).length - 1 )];
					int pos = ( ((global::Array<int>) (a) ).length - 1 );
					global::Array<int> array = ((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(pos, true)).concat(((global::Array<int>) (a) ).slice(( pos + 1 ), default(global::haxe.lang.Null<int>)));
					tmp = ((object) (new global::haxe.lang.DynamicObject(new int[]{21234}, new object[]{array}, new int[]{21233}, new double[]{((double) (@value) )})) );
				}
				
				object result = ((object) (tmp) );
				global::utest.Assert.same(2, ((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (51) )}));
				global::Array<int> b = ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) );
				object tmp1 = null;
				if (( ((global::Array<int>) (b) ).length == 0 )) {
					tmp1 = ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{(default(global::haxe.lang.Null<int>)).toDynamic(), ((global::Array<int>) (b) )}, new int[]{}, new double[]{})) );
				}
				else {
					int value1 = ((global::Array<int>) (b) )[( ((global::Array<int>) (b) ).length - 1 )];
					int pos1 = ( ((global::Array<int>) (b) ).length - 1 );
					global::Array<int> array1 = ((global::Array<int>) (b) ).slice(0, new global::haxe.lang.Null<int>(pos1, true)).concat(((global::Array<int>) (b) ).slice(( pos1 + 1 ), default(global::haxe.lang.Null<int>)));
					tmp1 = ((object) (new global::haxe.lang.DynamicObject(new int[]{21234}, new object[]{array1}, new int[]{21233}, new double[]{((double) (value1) )})) );
				}
				
				result = ((object) (tmp1) );
				global::utest.Assert.same(1, ((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
				global::Array<int> c = ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) );
				object tmp2 = null;
				if (( ((global::Array<int>) (c) ).length == 0 )) {
					tmp2 = ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{(default(global::haxe.lang.Null<int>)).toDynamic(), ((global::Array<int>) (c) )}, new int[]{}, new double[]{})) );
				}
				else {
					int value2 = ((global::Array<int>) (c) )[( ((global::Array<int>) (c) ).length - 1 )];
					int pos2 = ( ((global::Array<int>) (c) ).length - 1 );
					global::Array<int> array2 = ((global::Array<int>) (c) ).slice(0, new global::haxe.lang.Null<int>(pos2, true)).concat(((global::Array<int>) (c) ).slice(( pos2 + 1 ), default(global::haxe.lang.Null<int>)));
					tmp2 = ((object) (new global::haxe.lang.DynamicObject(new int[]{21234}, new object[]{array2}, new int[]{21233}, new double[]{((double) (value2) )})) );
				}
				
				result = ((object) (tmp2) );
				global::utest.Assert.isNull(((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2}), a, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
			}
		}
		
		
		public virtual void testShift() {
			unchecked {
				global::Array<int> a = new global::Array<int>(new int[]{1, 2});
				object result = global::thx._ReadonlyArray.ReadonlyArray_Impl_.shift<int>(((global::Array<int>) (a) ));
				global::utest.Assert.same(1, ((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{2}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (71) )}));
				result = global::thx._ReadonlyArray.ReadonlyArray_Impl_.shift<int>(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ));
				global::utest.Assert.same(2, ((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (75) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (76) )}));
				result = global::thx._ReadonlyArray.ReadonlyArray_Impl_.shift<int>(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ));
				global::utest.Assert.isNull(((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2}), a, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
			}
		}
		
		
		public virtual void testUnshift() {
			unchecked {
				global::Array<int> a = new global::Array<int>(new int[]{1, 2, 3});
				global::Array<int> b = ((global::Array<int>) (new global::Array<int>(new int[]{4}).concat(((global::Array<int>) (a) ))) );
				global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), a, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnshift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
				global::utest.Assert.same(new global::Array<object>(new object[]{4, 1, 2, 3}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnshift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (90) )}));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 897372503:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUnshift", 897372503)) );
					}
					
					
					case 1160063696:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testShift", 1160063696)) );
					}
					
					
					case 1036242015:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPop", 1036242015)) );
					}
					
					
					case 1301518156:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPush", 1301518156)) );
					}
					
					
					case 791442325:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testReplaceAt", 791442325)) );
					}
					
					
					case 891724542:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testInsertAt", 891724542)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 897372503:
					{
						this.testUnshift();
						break;
					}
					
					
					case 1160063696:
					{
						this.testShift();
						break;
					}
					
					
					case 1036242015:
					{
						this.testPop();
						break;
					}
					
					
					case 1301518156:
					{
						this.testPush();
						break;
					}
					
					
					case 791442325:
					{
						this.testReplaceAt();
						break;
					}
					
					
					case 891724542:
					{
						this.testInsertAt();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


