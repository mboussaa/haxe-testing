// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.bigint {
	public class Decimals : global::haxe.lang.HxObject {
		
		static Decimals() {
			unchecked {
				global::thx.bigint.Decimals.divisionExtraScale = 4;
			}
		}
		
		
		public Decimals(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Decimals() {
			global::thx.bigint.Decimals.__hx_ctor_thx_bigint_Decimals(this);
		}
		
		
		public static void __hx_ctor_thx_bigint_Decimals(global::thx.bigint.Decimals __temp_me110) {
		}
		
		
		public static int divisionExtraScale;
		
		public static global::thx.bigint.DecimalImpl fromInt(int @value) {
			return new global::thx.bigint.DecimalImpl(global::thx.bigint.Bigs.fromInt(@value), 0);
		}
		
		
		public static global::thx.bigint.DecimalImpl fromFloat(double @value) {
			if ( ! (((  ! (global::System.Double.IsInfinity(((double) (@value) )))  &&  ! (global::System.Double.IsNaN(((double) (@value) )))  ))) ) {
				throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Value is not a finite Float: ", global::haxe.lang.Runtime.toString(@value)));
			}
			
			return global::thx.bigint.Decimals.parse(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(@value)));
		}
		
		
		public static global::thx.bigint.DecimalImpl parse(string @value) {
			unchecked {
				@value = @value.ToLowerInvariant();
				int pose = global::haxe.lang.StringExt.indexOf(@value, "e", default(global::haxe.lang.Null<int>));
				if (( pose > 0 )) {
					bool isNeg = false;
					string f = global::haxe.lang.StringExt.substring(@value, 0, new global::haxe.lang.Null<int>(pose, true));
					string e = global::haxe.lang.StringExt.substring(@value, ( pose + 1 ), default(global::haxe.lang.Null<int>));
					if (string.Equals(global::haxe.lang.StringExt.substring(e, 0, new global::haxe.lang.Null<int>(1, true)), "-")) {
						isNeg = true;
						e = global::haxe.lang.StringExt.substring(e, 1, default(global::haxe.lang.Null<int>));
					}
					
					global::thx.bigint.BigIntImpl m = global::thx.bigint.Small.ten.pow(global::thx.bigint.Bigs.parseBase(e, 10));
					if (isNeg) {
						return global::thx.bigint.Decimals.parse(f).divideWithScale(global::thx._Decimal.Decimal_Impl_.fromBigInt(m), (global::Std.parseInt(e)).@value);
					}
					else {
						return global::thx.bigint.Decimals.parse(f).multiply(global::thx._Decimal.Decimal_Impl_.fromBigInt(m));
					}
					
				}
				
				int pdec = global::haxe.lang.StringExt.indexOf(@value, ".", default(global::haxe.lang.Null<int>));
				if (( pdec < 0 )) {
					return new global::thx.bigint.DecimalImpl(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase(@value, 10)) ), 0);
				}
				
				return new global::thx.bigint.DecimalImpl(global::thx.bigint.Bigs.parseBase(global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substring(@value, 0, new global::haxe.lang.Null<int>(pdec, true)), global::haxe.lang.StringExt.substring(@value, ( pdec + 1 ), default(global::haxe.lang.Null<int>))), 10), ( ( @value.Length - pdec ) - 1 ));
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.bigint.Decimals(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.bigint.Decimals();
		}
		
		
	}
}


