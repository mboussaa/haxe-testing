// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestConvert : global::haxe.lang.HxObject {
		
		public TestConvert(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestConvert(int i) {
			global::thx.TestConvert.__hx_ctor_thx_TestConvert(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestConvert(global::thx.TestConvert __temp_me145, int i) {
			__temp_me145.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestConvert(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestConvert(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testString() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("1", global::thx.Convert.toString(1), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testString", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (13) )}));
					global::utest.Assert.@equals("1", global::thx.Convert.toStringOr(null, "1"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testString", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (14) )}));
				}
				
			}
		}
		
		
		public virtual void testInt() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(1, global::thx.Convert.toInt("1"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInt", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					global::utest.Assert.@equals(1, global::thx.Convert.toInt(true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInt", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
					global::utest.Assert.@equals(0, global::thx.Convert.toInt(false), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInt", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
					global::utest.Assert.@equals(1, global::thx.Convert.toInt(1.1), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInt", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
					global::utest.Assert.@equals(1, global::thx.Convert.toIntOr("z", 1), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInt", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
				}
				
			}
		}
		
		
		public virtual void testFloat() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(1, global::thx.Convert.toFloat("1"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloat", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
					global::utest.Assert.@equals(1, global::thx.Convert.toFloat(true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloat", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
					global::utest.Assert.@equals(0, global::thx.Convert.toFloat(false), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloat", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
					global::utest.Assert.@equals(1.1, global::thx.Convert.toFloat(1.1), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloat", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
					global::utest.Assert.@equals(1.1, global::thx.Convert.toFloatOr("z", 1.1), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFloat", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (34) )}));
				}
				
			}
		}
		
		
		public virtual void testBool() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(true, global::thx.Convert.toBool("1"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBool", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
					global::utest.Assert.@equals(true, global::thx.Convert.toBool(true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBool", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					global::utest.Assert.@equals(false, global::thx.Convert.toBool(false), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBool", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
					global::utest.Assert.@equals(true, global::thx.Convert.toBool(1.1), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBool", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
					global::utest.Assert.@equals(false, global::thx.Convert.toBool(0), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBool", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
					global::utest.Assert.@equals(true, global::thx.Convert.toBoolOr("z", true), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBool", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
				}
				
			}
		}
		
		
		public virtual void testMap() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					object objOfArrays = new global::haxe.lang.DynamicObject(new int[]{4895195, 5097222}, new object[]{new global::Array<object>(new object[]{"qux"}), new global::Array<object>(new object[]{"bar"})}, new int[]{}, new double[]{});
					object objOfNumbers = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{97, 98, 99}, new double[]{((double) (1) ), ((double) (2) ), ((double) (3) )});
					global::utest.Assert.@equals("bar", global::haxe.lang.Runtime.toString(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) ((((global::haxe.IMap<object, object>) (global::haxe.IMap__Statics_.__hx_cast<object, object>(((global::haxe.IMap) (global::thx.Convert.toMap<object>(((object) (objOfArrays) ), ((global::haxe.lang.Function) (( (( global::thx.TestConvert_testMap_53__Fun.__hx_current != null )) ? (global::thx.TestConvert_testMap_53__Fun.__hx_current) : (global::thx.TestConvert_testMap_53__Fun.__hx_current = ((global::thx.TestConvert_testMap_53__Fun) (new global::thx.TestConvert_testMap_53__Fun()) )) )) ))) ))) ).@get("foo")).@value) ))) )[0]), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMap", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
					global::utest.Assert.@equals(2, (((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (global::thx.Convert.toMap<int>(((object) (objOfNumbers) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Convert), "toInt", 336707124)) ))) ))) ).@get("b")).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMap", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
					global::utest.Assert.raises(( (( global::thx.TestConvert_testMap_59__Fun.__hx_current != null )) ? (global::thx.TestConvert_testMap_59__Fun.__hx_current) : (global::thx.TestConvert_testMap_59__Fun.__hx_current = ((global::thx.TestConvert_testMap_59__Fun) (new global::thx.TestConvert_testMap_59__Fun()) )) ), null, null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMap", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
					global::utest.Assert.raises(new global::thx.TestConvert_testMap_60__Fun(objOfArrays), null, null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMap", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
				}
				
			}
		}
		
		
		public virtual void testDateTimeUtc() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					object @value = null;
					global::thx.Convert.toDateTimeUtc(@value);
					global::utest.Assert.isNull(@value, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDateTimeUtc", "thx.TestConvert", "TestConvert.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1416060759:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDateTimeUtc", 1416060759)) );
					}
					
					
					case 1036089706:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMap", 1036089706)) );
					}
					
					
					case 1145964956:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBool", 1145964956)) );
					}
					
					
					case 1268319210:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFloat", 1268319210)) );
					}
					
					
					case 1035893693:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testInt", 1035893693)) );
					}
					
					
					case 707030723:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testString", 707030723)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1416060759:
					{
						this.testDateTimeUtc();
						break;
					}
					
					
					case 1036089706:
					{
						this.testMap();
						break;
					}
					
					
					case 1145964956:
					{
						this.testBool();
						break;
					}
					
					
					case 1268319210:
					{
						this.testFloat();
						break;
					}
					
					
					case 1035893693:
					{
						this.testInt();
						break;
					}
					
					
					case 707030723:
					{
						this.testString();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestConvert_testMap_53__Fun : global::haxe.lang.Function {
		
		public TestConvert_testMap_53__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestConvert_testMap_53__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object val = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			return global::thx.Convert.toArray<object>(((object) (val) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Convert), "toString", 946786476)) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestConvert_testMap_59__Fun : global::haxe.lang.Function {
		
		public TestConvert_testMap_59__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.TestConvert_testMap_59__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			unchecked {
				global::thx.Convert.toMap<object>(((object) (3) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Convert), "toString", 946786476)) ));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestConvert_testMap_60__Fun : global::haxe.lang.Function {
		
		public TestConvert_testMap_60__Fun(object objOfArrays) : base(0, 0) {
			this.objOfArrays = objOfArrays;
		}
		
		
		public override object __hx_invoke0_o() {
			global::thx.Convert.toMap<object>(((object) (this.objOfArrays) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Convert), "toString", 946786476)) ));
			return null;
		}
		
		
		public object objOfArrays;
		
	}
}


