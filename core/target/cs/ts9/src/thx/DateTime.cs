// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._DateTime {
	public sealed class DateTime_Impl_ {
		
		public static long localOffset() {
			global::System.DateTime now = global::System.DateTime.Now;
			return ((long) (( ((long) (now.ToLocalTime().Ticks) ) - ((long) (now.ToUniversalTime().Ticks) ) )) );
		}
		
		
		public static global::Array<long> now() {
			return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.now()) ), ((long) (global::thx._DateTime.DateTime_Impl_.localOffset()) )})) );
		}
		
		
		public static global::Array<long> nowUtc() {
			return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.now()) ), ((long) (global::thx._Time.Time_Impl_.zero) )})) );
		}
		
		
		public static global::Array<long> fromDate(global::Date date) {
			return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromTime(( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (date.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ))) ), ((long) (global::thx._DateTime.DateTime_Impl_.localOffset()) )})) );
		}
		
		
		public static global::Array<long> fromDateWithOffset(global::Date date, long offset) {
			return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromTime(( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (date.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ))) ), ((long) (offset) )})) );
		}
		
		
		public static global::Array<long> fromTime(double timestamp) {
			return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromTime(timestamp)) ), ((long) (global::thx._Time.Time_Impl_.zero) )})) );
		}
		
		
		public static global::Array<long> fromString(string s) {
			unchecked {
				if (string.Equals(s, null)) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("null String cannot be parsed to DateTime", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromString", "thx._DateTime.DateTime_Impl_", "DateTime.hx"}, new int[]{1981972957}, new double[]{((double) (93) )})));
				}
				
				global::EReg pattern = new global::EReg("^([-])?(\\d+)[-](\\d{2})[-](\\d{2})(?:[T ](\\d{2})[:](\\d{2})[:](\\d{2})(?:\\.(\\d+))?(Z|([+-]\\d{2})[:](\\d{2}))?)?$", "");
				if ( ! (pattern.match(s)) ) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("unable to parse DateTime string: \"", s), "\""), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromString", "thx._DateTime.DateTime_Impl_", "DateTime.hx"}, new int[]{1981972957}, new double[]{((double) (96) )})));
				}
				
				string smticks = pattern.matched(8);
				int mticks = 0;
				if ( ! (string.Equals(null, smticks)) ) {
					smticks = global::haxe.lang.Runtime.concat("1", global::haxe.lang.StringExt.substring(global::thx.Strings.rpad(smticks, "0", 7), 0, new global::haxe.lang.Null<int>(7, true)));
					mticks = ( (global::Std.parseInt(smticks)).@value - 10000000 );
				}
				
				long time = global::thx._Time.Time_Impl_.zero;
				string timepart = pattern.matched(9);
				if ((  ! (string.Equals(null, timepart))  &&  ! (string.Equals("Z", timepart))  )) {
					string hours = pattern.matched(10);
					if (string.Equals(global::haxe.lang.StringExt.substring(hours, 0, new global::haxe.lang.Null<int>(1, true)), "+")) {
						hours = global::haxe.lang.StringExt.substring(hours, 1, default(global::haxe.lang.Null<int>));
					}
					
					time = global::thx._Time.Time_Impl_.create((global::Std.parseInt(hours)).@value, global::Std.parseInt(pattern.matched(11)), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
				}
				
				global::Array<long> this1 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create((global::Std.parseInt(pattern.matched(2))).@value, (global::Std.parseInt(pattern.matched(3))).@value, (global::Std.parseInt(pattern.matched(4))).@value, global::Std.parseInt(pattern.matched(5)), global::Std.parseInt(pattern.matched(6)), global::Std.parseInt(pattern.matched(7)), new global::haxe.lang.Null<int>(0, true))) ), ((long) (time) )});
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) - ((long) (time) ) )) ))) ), ((long) (((global::Array<long>) (this1) )[1]) )});
				global::Array<long> date = ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) + ((long) (mticks) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
				if (string.Equals(pattern.matched(1), "-")) {
					return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(global::haxe._Int64.Int64_Impl_.neg(((global::Array<long>) (date) )[0]))) ), ((long) (time) )})) );
				}
				
				return date;
			}
		}
		
		
		public static global::Array<object> daysRange(global::Array<long> start, global::Array<long> end) {
			unchecked {
				if (( global::thx._DateTime.DateTime_Impl_.compareTo(end, start) < 0 )) {
					return new global::Array<object>(new object[]{});
				}
				
				global::Array<object> days = new global::Array<object>(new object[]{});
				while ( ! (global::thx._DateTime.DateTime_Impl_.sameDay(start, end)) ) {
					days.push(start);
					start = global::thx._DateTime.DateTime_Impl_.jump(((global::Array<long>) (start) ), global::thx.TimePeriod.Day, 1);
				}
				
				days.push(end);
				return days;
			}
		}
		
		
		public static int compare(global::Array<long> a, global::Array<long> b) {
			return global::thx._DateTime.DateTime_Impl_.compareTo(a, b);
		}
		
		
		public static global::haxe.lang.Function ord() {
			return global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx._DateTime.DateTime_Impl_), "compare", 57219237)) ));
		}
		
		
		public static global::Array<long> create(int year, int month, int day, global::haxe.lang.Null<int> hour, global::haxe.lang.Null<int> minute, global::haxe.lang.Null<int> second, global::haxe.lang.Null<int> millisecond, long offset) {
			unchecked {
				global::haxe.lang.Null<int> __temp_millisecond80 = ( ( ! (millisecond.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (millisecond) );
				global::haxe.lang.Null<int> __temp_second79 = ( ( ! (second.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (second) );
				global::haxe.lang.Null<int> __temp_minute78 = ( ( ! (minute.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (minute) );
				global::haxe.lang.Null<int> __temp_hour77 = ( ( ! (hour.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (hour) );
				global::Array<long> this1 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, __temp_hour77, __temp_minute78, __temp_second79, __temp_millisecond80)) ), ((long) (offset) )});
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> _new(long dateTime, long offset) {
			return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (dateTime) ), ((long) (offset) )})) );
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		public static global::Array<long> min(global::Array<long> this1, global::Array<long> other) {
			if (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.compareTo(((long) (((global::Array<long>) (this1) )[0]) ), ((long) (((global::Array<long>) (other) )[0]) )) <= 0 )) {
				return ((global::Array<long>) (this1) );
			}
			else {
				return other;
			}
			
		}
		
		
		public static global::Array<long> max(global::Array<long> this1, global::Array<long> other) {
			if (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.compareTo(((long) (((global::Array<long>) (this1) )[0]) ), ((long) (((global::Array<long>) (other) )[0]) )) >= 0 )) {
				return ((global::Array<long>) (this1) );
			}
			else {
				return other;
			}
			
		}
		
		
		public static global::Array<long> jump(global::Array<long> this1, global::thx.TimePeriod period, int amount) {
			unchecked {
				int sec = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
				int min = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
				int hr = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
				int day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
				int mon = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
				int yr = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
				switch (period.index) {
					case 0:
					{
						sec += amount;
						break;
					}
					
					
					case 1:
					{
						min += amount;
						break;
					}
					
					
					case 2:
					{
						hr += amount;
						break;
					}
					
					
					case 3:
					{
						day += amount;
						break;
					}
					
					
					case 4:
					{
						day += ( amount * 7 );
						break;
					}
					
					
					case 5:
					{
						mon += amount;
						break;
					}
					
					
					case 6:
					{
						yr += amount;
						break;
					}
					
					
				}
				
				global::haxe.lang.Null<int> millisecond = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				long offset = ((long) (((global::Array<long>) (this1) )[1]) );
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(yr, mon, day, new global::haxe.lang.Null<int>(hr, true), new global::haxe.lang.Null<int>(min, true), new global::haxe.lang.Null<int>(sec, true), millisecond)) ), ((long) (offset) )});
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
			}
		}
		
		
		public static int daysInThisMonth(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH));
			}
		}
		
		
		public static global::Array<long> prevYear(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Year, -1);
			}
		}
		
		
		public static global::Array<long> nextYear(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Year, 1);
			}
		}
		
		
		public static global::Array<long> prevMonth(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Month, -1);
			}
		}
		
		
		public static global::Array<long> nextMonth(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Month, 1);
			}
		}
		
		
		public static global::Array<long> prevWeek(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Week, -1);
			}
		}
		
		
		public static global::Array<long> nextWeek(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Week, 1);
			}
		}
		
		
		public static global::Array<long> prevDay(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Day, -1);
			}
		}
		
		
		public static global::Array<long> nextDay(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Day, 1);
			}
		}
		
		
		public static global::Array<long> prevHour(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Hour, -1);
			}
		}
		
		
		public static global::Array<long> nextHour(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Hour, 1);
			}
		}
		
		
		public static global::Array<long> prevMinute(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Minute, -1);
			}
		}
		
		
		public static global::Array<long> nextMinute(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Minute, 1);
			}
		}
		
		
		public static global::Array<long> prevSecond(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Second, -1);
			}
		}
		
		
		public static global::Array<long> nextSecond(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Second, 1);
			}
		}
		
		
		public static global::Array<long> snapToWeekDay(global::Array<long> this1, int weekday, global::haxe.lang.Null<int> firstDayOfWk) {
			unchecked {
				global::haxe.lang.Null<int> __temp_firstDayOfWk81 = ( ( ! (firstDayOfWk.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (firstDayOfWk) );
				int d = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
				int s = weekday;
				if (( s < (__temp_firstDayOfWk81).@value )) {
					s += 7;
				}
				
				if (( d < (__temp_firstDayOfWk81).@value )) {
					d += 7;
				}
				
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Day, ( s - d ));
			}
		}
		
		
		public static global::Array<long> snapNextWeekDay(global::Array<long> this1, int weekday) {
			unchecked {
				int d = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
				int s = weekday;
				if (( s < d )) {
					s += 7;
				}
				
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Day, ( s - d ));
			}
		}
		
		
		public static global::Array<long> snapPrevWeekDay(global::Array<long> this1, int weekday) {
			unchecked {
				int d = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
				int s = weekday;
				if (( s > d )) {
					s -= 7;
				}
				
				return global::thx._DateTime.DateTime_Impl_.jump(this1, global::thx.TimePeriod.Day, ( s - d ));
			}
		}
		
		
		public static global::Array<long> snapNext(global::Array<long> this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					{
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (global::thx.Int64s.divCeil(((global::Array<long>) (this1) )[0], global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
					}
					
					
					case 1:
					{
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (global::thx.Int64s.divCeil(((global::Array<long>) (this1) )[0], global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
					}
					
					
					case 2:
					{
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (global::thx.Int64s.divCeil(((global::Array<long>) (this1) )[0], global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
					}
					
					
					case 3:
					{
						int year = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						int month = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
						int day = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + 1 );
						long offset = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
					}
					
					
					case 4:
					{
						int wd = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
						int year1 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						int month1 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
						int day1 = ( ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + 7 ) - wd );
						long offset1 = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this3 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year1, month1, day1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset1) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this3) )[0]) ) - ((long) (offset1) ) )) ))) ), ((long) (((global::Array<long>) (this3) )[1]) )})) );
					}
					
					
					case 5:
					{
						int year2 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						int month2 = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) + 1 );
						long offset2 = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this4 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year2, month2, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset2) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this4) )[0]) ) - ((long) (offset2) ) )) ))) ), ((long) (((global::Array<long>) (this4) )[1]) )})) );
					}
					
					
					case 6:
					{
						int year3 = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) + 1 );
						long offset3 = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this5 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year3, 1, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset3) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this5) )[0]) ) - ((long) (offset3) ) )) ))) ), ((long) (((global::Array<long>) (this5) )[1]) )})) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::Array<long> snapPrev(global::Array<long> this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					{
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (global::thx.Int64s.divFloor(((global::Array<long>) (this1) )[0], global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
					}
					
					
					case 1:
					{
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (global::thx.Int64s.divFloor(((global::Array<long>) (this1) )[0], global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
					}
					
					
					case 2:
					{
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (global::thx.Int64s.divFloor(((global::Array<long>) (this1) )[0], global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
					}
					
					
					case 3:
					{
						int year = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						int month = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
						int day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
						long offset = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
					}
					
					
					case 4:
					{
						int wd = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
						int year1 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						int month1 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
						int day1 = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) - wd );
						long offset1 = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this3 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year1, month1, day1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset1) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this3) )[0]) ) - ((long) (offset1) ) )) ))) ), ((long) (((global::Array<long>) (this3) )[1]) )})) );
					}
					
					
					case 5:
					{
						int year2 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						int month2 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
						long offset2 = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this4 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year2, month2, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset2) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this4) )[0]) ) - ((long) (offset2) ) )) ))) ), ((long) (((global::Array<long>) (this4) )[1]) )})) );
					}
					
					
					case 6:
					{
						int year3 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						long offset3 = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this5 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year3, 1, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset3) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this5) )[0]) ) - ((long) (offset3) ) )) ))) ), ((long) (((global::Array<long>) (this5) )[1]) )})) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::Array<long> snapTo(global::Array<long> this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					{
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (global::thx.Int64s.divRound(((global::Array<long>) (this1) )[0], global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
					}
					
					
					case 1:
					{
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (global::thx.Int64s.divRound(((global::Array<long>) (this1) )[0], global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
					}
					
					
					case 2:
					{
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (global::thx.Int64s.divRound(((global::Array<long>) (this1) )[0], global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
					}
					
					
					case 3:
					{
						int mod = ( (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )) >= 12 )) ? (1) : (0) );
						int year = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						int month = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
						int day = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + mod );
						long offset = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
					}
					
					
					case 4:
					{
						int wd = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
						int mod1 = ( (( wd < 3 )) ? ( - (wd) ) : (( (( wd > 3 )) ? (( 7 - wd )) : (( (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )) < 12 )) ? ( - (wd) ) : (( 7 - wd )) )) )) );
						int year1 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						int month1 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
						int day1 = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + mod1 );
						long offset1 = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this3 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year1, month1, day1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset1) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this3) )[0]) ) - ((long) (offset1) ) )) ))) ), ((long) (((global::Array<long>) (this3) )[1]) )})) );
					}
					
					
					case 5:
					{
						int mod2 = ( (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) > global::Math.round(( ((double) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH))) ) / 2 )) )) ? (1) : (0) );
						int year2 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						int month2 = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) + mod2 );
						long offset2 = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this4 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year2, month2, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset2) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this4) )[0]) ) - ((long) (offset2) ) )) ))) ), ((long) (((global::Array<long>) (this4) )[1]) )})) );
					}
					
					
					case 6:
					{
						int year3 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
						long offset3 = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this5 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year3, 6, 2, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset3) )});
						int year4 = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) + (( (( global::thx._DateTime.DateTime_Impl_.compareTo(((global::Array<long>) (this1) ), ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this5) )[0]) ) - ((long) (offset3) ) )) ))) ), ((long) (((global::Array<long>) (this5) )[1]) )})) )) > 0 )) ? (1) : (0) )) );
						long offset4 = ((long) (((global::Array<long>) (this1) )[1]) );
						global::Array<long> this6 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year4, 1, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true))) ), ((long) (offset4) )});
						return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this6) )[0]) ) - ((long) (offset4) ) )) ))) ), ((long) (((global::Array<long>) (this6) )[1]) )})) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static bool sameYear(global::Array<long> this1, global::Array<long> other) {
			unchecked {
				return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (other) )[0]) ) + ((long) (((global::Array<long>) (other) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) );
			}
		}
		
		
		public static bool sameMonth(global::Array<long> this1, global::Array<long> other) {
			unchecked {
				if (global::thx._DateTime.DateTime_Impl_.sameYear(this1, other)) {
					return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (other) )[0]) ) + ((long) (((global::Array<long>) (other) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) );
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static bool sameDay(global::Array<long> this1, global::Array<long> other) {
			unchecked {
				if (global::thx._DateTime.DateTime_Impl_.sameMonth(this1, other)) {
					return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (other) )[0]) ) + ((long) (((global::Array<long>) (other) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) );
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static bool sameHour(global::Array<long> this1, global::Array<long> other) {
			unchecked {
				if (global::thx._DateTime.DateTime_Impl_.sameDay(this1, other)) {
					return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (other) )[0]) ) + ((long) (((global::Array<long>) (other) )[1]) ) )) )) );
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static bool sameMinute(global::Array<long> this1, global::Array<long> other) {
			unchecked {
				if (global::thx._DateTime.DateTime_Impl_.sameHour(this1, other)) {
					return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (other) )[0]) ) + ((long) (((global::Array<long>) (other) )[1]) ) )) )) );
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static bool sameSecond(global::Array<long> this1, global::Array<long> other) {
			unchecked {
				if (global::thx._DateTime.DateTime_Impl_.sameMinute(this1, other)) {
					return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (other) )[0]) ) + ((long) (((global::Array<long>) (other) )[1]) ) )) )) );
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static global::Array<long> withYear(global::Array<long> this1, int year) {
			unchecked {
				int month = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
				int day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
				global::haxe.lang.Null<int> hour = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> minute = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> second = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> millisecond = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				long offset = ((long) (((global::Array<long>) (this1) )[1]) );
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, hour, minute, second, millisecond)) ), ((long) (offset) )});
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> withMonth(global::Array<long> this1, int month) {
			unchecked {
				int year = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
				int day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
				global::haxe.lang.Null<int> hour = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> minute = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> second = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> millisecond = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				long offset = ((long) (((global::Array<long>) (this1) )[1]) );
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, hour, minute, second, millisecond)) ), ((long) (offset) )});
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> withDay(global::Array<long> this1, int day) {
			unchecked {
				int year = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
				int month = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
				global::haxe.lang.Null<int> hour = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> minute = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> second = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> millisecond = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				long offset = ((long) (((global::Array<long>) (this1) )[1]) );
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, hour, minute, second, millisecond)) ), ((long) (offset) )});
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> withHour(global::Array<long> this1, int hour) {
			unchecked {
				int year = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
				int month = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
				int day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
				global::haxe.lang.Null<int> minute = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> second = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> millisecond = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				long offset = ((long) (((global::Array<long>) (this1) )[1]) );
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, new global::haxe.lang.Null<int>(hour, true), minute, second, millisecond)) ), ((long) (offset) )});
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> withMinute(global::Array<long> this1, int minute) {
			unchecked {
				int year = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
				int month = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
				int day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
				global::haxe.lang.Null<int> hour = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> second = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> millisecond = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				long offset = ((long) (((global::Array<long>) (this1) )[1]) );
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, hour, new global::haxe.lang.Null<int>(minute, true), second, millisecond)) ), ((long) (offset) )});
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> withSecond(global::Array<long> this1, int second) {
			unchecked {
				int year = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
				int month = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
				int day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
				global::haxe.lang.Null<int> hour = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> minute = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> millisecond = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				long offset = ((long) (((global::Array<long>) (this1) )[1]) );
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, hour, minute, new global::haxe.lang.Null<int>(second, true), millisecond)) ), ((long) (offset) )});
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> withMillisecond(global::Array<long> this1, int millisecond) {
			unchecked {
				int year = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
				int month = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
				int day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
				global::haxe.lang.Null<int> hour = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> minute = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				global::haxe.lang.Null<int> second = new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )), true);
				long offset = ((long) (((global::Array<long>) (this1) )[1]) );
				global::Array<long> this2 = new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, month, day, hour, minute, second, new global::haxe.lang.Null<int>(millisecond, true))) ), ((long) (offset) )});
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this2) )[0]) ) - ((long) (offset) ) )) ))) ), ((long) (((global::Array<long>) (this2) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> withOffset(global::Array<long> this1, long offset) {
			return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (((global::Array<long>) (this1) )[0]) ), ((long) (offset) )})) );
		}
		
		
		public static global::Array<long> @add(global::Array<long> this1, long time) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (time) ) )) ))) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> addTicks(global::Array<long> this1, long ticks) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (ticks) ) )) ))) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> subtract(global::Array<long> this1, long time) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) - ((long) (time) ) )) ))) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static long subtractDate(global::Array<long> this1, global::Array<long> date) {
			unchecked {
				return ((long) (((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (date) )[0]) ) )) ))) ), ((long) (((global::Array<long>) (this1) )[1]) )})) )[0]) );
			}
		}
		
		
		public static global::Array<long> addDays(global::Array<long> this1, double days) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (((global::Array<long>) (this1) )[0]) ), days, global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerDay)) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> addHours(global::Array<long> this1, double hours) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (((global::Array<long>) (this1) )[0]) ), hours, global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour)) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> addMilliseconds(global::Array<long> this1, int milliseconds) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (((global::Array<long>) (this1) )[0]) ), ((double) (milliseconds) ), 1)) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> addMinutes(global::Array<long> this1, double minutes) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (((global::Array<long>) (this1) )[0]) ), minutes, global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute)) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> addMonths(global::Array<long> this1, int months) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(((long) (((global::Array<long>) (this1) )[0]) ), months)) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> addSeconds(global::Array<long> this1, double seconds) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(((long) (((global::Array<long>) (this1) )[0]) ), seconds, global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond)) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static global::Array<long> addYears(global::Array<long> this1, int years) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(((long) (((global::Array<long>) (this1) )[0]) ), ( years * 12 ))) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
			}
		}
		
		
		public static int compareTo(global::Array<long> this1, global::Array<long> other) {
			unchecked {
				if (( ( null == other ) && ( this1 == null ) )) {
					return 0;
				}
				
				if (( null == this1 )) {
					return -1;
				}
				else if (( null == other )) {
					return 1;
				}
				
				return global::thx.Int64s.compare(((global::Array<long>) (this1) )[0], ((global::Array<long>) (other) )[0]);
			}
		}
		
		
		public static bool equalsTo(global::Array<long> this1, global::Array<long> that) {
			return ( ((long) (((global::Array<long>) (this1) )[0]) ) == ((long) (((global::Array<long>) (that) )[0]) ) );
		}
		
		
		public static bool @equals(global::Array<long> self, global::Array<long> that) {
			return ( ((long) (((global::Array<long>) (self) )[0]) ) == ((long) (((global::Array<long>) (that) )[0]) ) );
		}
		
		
		public static bool notEqualsTo(global::Array<long> this1, global::Array<long> that) {
			return ( ((long) (((global::Array<long>) (this1) )[0]) ) != ((long) (((global::Array<long>) (that) )[0]) ) );
		}
		
		
		public static bool notEquals(global::Array<long> self, global::Array<long> that) {
			return ( ((long) (((global::Array<long>) (self) )[0]) ) != ((long) (((global::Array<long>) (that) )[0]) ) );
		}
		
		
		public static bool nearEqualsTo(global::Array<long> this1, global::Array<long> other, long span) {
			return ((bool) (( ((long) (global::thx.Int64s.abs(((long) (( ((long) (((global::Array<long>) (other) )[0]) ) - ((long) (((global::Array<long>) (this1) )[0]) ) )) ))) ) <= ((long) (global::thx._Time.Time_Impl_.abs(span)) ) )) );
		}
		
		
		public static bool greaterThan(global::Array<long> this1, global::Array<long> that) {
			return ( global::thx._DateTime.DateTime_Impl_.compareTo(this1, that) > 0 );
		}
		
		
		public static bool greater(global::Array<long> self, global::Array<long> that) {
			return ( global::thx._DateTime.DateTime_Impl_.compareTo(self, that) > 0 );
		}
		
		
		public static bool greaterEqualsTo(global::Array<long> this1, global::Array<long> that) {
			return ( global::thx._DateTime.DateTime_Impl_.compareTo(this1, that) >= 0 );
		}
		
		
		public static bool greaterEquals(global::Array<long> self, global::Array<long> that) {
			return ( global::thx._DateTime.DateTime_Impl_.compareTo(self, that) >= 0 );
		}
		
		
		public static bool lessTo(global::Array<long> this1, global::Array<long> that) {
			return ( global::thx._DateTime.DateTime_Impl_.compareTo(this1, that) < 0 );
		}
		
		
		public static bool less(global::Array<long> self, global::Array<long> that) {
			return ( global::thx._DateTime.DateTime_Impl_.compareTo(self, that) < 0 );
		}
		
		
		public static bool lessEqualsTo(global::Array<long> this1, global::Array<long> that) {
			return ( global::thx._DateTime.DateTime_Impl_.compareTo(this1, that) <= 0 );
		}
		
		
		public static bool lessEquals(global::Array<long> self, global::Array<long> that) {
			return ( global::thx._DateTime.DateTime_Impl_.compareTo(self, that) <= 0 );
		}
		
		
		public static global::Array<long> changeOffset(global::Array<long> this1, long newoffset) {
			unchecked {
				return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (( ((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ) - ((long) (newoffset) ) )) ), ((long) (newoffset) )})) );
			}
		}
		
		
		public static long toUtc(global::Array<long> this1) {
			return ((long) (((global::Array<long>) (this1) )[0]) );
		}
		
		
		public static long clockDateTime(global::Array<long> this1) {
			unchecked {
				return ((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) );
			}
		}
		
		
		public static string toString(global::Array<long> this1) {
			unchecked {
				if (( null == this1 )) {
					return "";
				}
				
				global::Array<long> abs = ((global::Array<long>) (new global::Array<long>(new long[]{((long) (global::thx.Int64s.abs(((global::Array<long>) (this1) )[0])) ), ((long) (((global::Array<long>) (this1) )[1]) )})) );
				string decimals = ( (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (abs) )[0]) ) + ((long) (((global::Array<long>) (abs) )[1]) ) )) )) != 0 )) ? (global::haxe.lang.Runtime.concat(".", global::thx.Strings.trimCharsRight(global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (abs) )[0]) ) + ((long) (((global::Array<long>) (abs) )[1]) ) )) )), "0", 7), ")"))) : ("") );
				return global::haxe.lang.Runtime.concat((( (((bool) (( ((long) (((global::Array<long>) (this1) )[0]) ) < ((long) (global::thx.Int64s.zero) ) )) )) ? ("-") : ("") )), (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (abs) )[0]) ) + ((long) (((global::Array<long>) (abs) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR))), "-"), global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (abs) )[0]) ) + ((long) (((global::Array<long>) (abs) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), "0", 2)), "-"), global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (abs) )[0]) ) + ((long) (((global::Array<long>) (abs) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), "0", 2)), "T"), global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (abs) )[0]) ) + ((long) (((global::Array<long>) (abs) )[1]) ) )) )), "0", 2)), ":"), global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (abs) )[0]) ) + ((long) (((global::Array<long>) (abs) )[1]) ) )) )), "0", 2)), ":"), global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (abs) )[0]) ) + ((long) (((global::Array<long>) (abs) )[1]) ) )) )), "0", 2)), decimals), global::thx._Time.Time_Impl_.toGmtString(((long) (((global::Array<long>) (this1) )[1]) )))));
			}
		}
		
		
		public static long get_utc(global::Array<long> this1) {
			return ((long) (this1[0]) );
		}
		
		
		public static long get_offset(global::Array<long> this1) {
			unchecked {
				return ((long) (this1[1]) );
			}
		}
		
		
		public static int get_year(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
			}
		}
		
		
		public static int get_month(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
			}
		}
		
		
		public static int get_day(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
			}
		}
		
		
		public static int get_hour(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
			}
		}
		
		
		public static int get_minute(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
			}
		}
		
		
		public static int get_dayOfWeek(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
			}
		}
		
		
		public static int get_dayOfYear(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY_OF_YEAR);
			}
		}
		
		
		public static int get_millisecond(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
			}
		}
		
		
		public static int get_microsecond(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_microsecond(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
			}
		}
		
		
		public static int get_tickInSecond(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
			}
		}
		
		
		public static int get_second(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ));
			}
		}
		
		
		public static long get_timeOfDay(global::Array<long> this1) {
			unchecked {
				return ((long) (( (((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) )) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
			}
		}
		
		
		public static bool get_isInLeapYear(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR));
			}
		}
		
		
		public static int get_monthDays(global::Array<long> this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (this1) )[0]) ) + ((long) (((global::Array<long>) (this1) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH));
			}
		}
		
		
		public static global::Array<long> self(global::Array<long> this1) {
			return ((global::Array<long>) (this1) );
		}
		
		
	}
}


