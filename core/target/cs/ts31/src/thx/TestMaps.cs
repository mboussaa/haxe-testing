// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestMaps : global::haxe.lang.HxObject {
		
		public TestMaps(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestMaps(int i) {
			global::thx.TestMaps.__hx_ctor_thx_TestMaps(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestMaps(global::thx.TestMaps __temp_me131, int i) {
			__temp_me131.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestMaps(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestMaps(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testTuples() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.StringMap<int> _g2 = new global::haxe.ds.StringMap<int>();
					_g2.@set(((string) ("key1") ), ((int) (1) ));
					_g2.@set(((string) ("key2") ), ((int) (2) ));
					global::Array<object> tuples = global::thx.Maps.tuples<object, int>(((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g2) ))) ));
					tuples.sort(( (( global::thx.TestMaps_testTuples_22__Fun.__hx_current != null )) ? (global::thx.TestMaps_testTuples_22__Fun.__hx_current) : (global::thx.TestMaps_testTuples_22__Fun.__hx_current = ((global::thx.TestMaps_testTuples_22__Fun) (new global::thx.TestMaps_testTuples_22__Fun()) )) ));
					global::utest.Assert.@equals(2, tuples.length, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTuples", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
					global::utest.Assert.@equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tuples[0], "_0", 21233, true)), "key1", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTuples", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
					global::utest.Assert.@equals(((int) (global::haxe.lang.Runtime.getField_f(tuples[0], "_1", 21234, true)) ), 1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTuples", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
					global::utest.Assert.@equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(tuples[1], "_0", 21233, true)), "key2", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTuples", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
					global::utest.Assert.@equals(((int) (global::haxe.lang.Runtime.getField_f(tuples[1], "_1", 21234, true)) ), 2, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTuples", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
				}
				
			}
		}
		
		
		public virtual void testValues() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.StringMap<int> _g2 = new global::haxe.ds.StringMap<int>();
					_g2.@set(((string) ("key1") ), ((int) (1) ));
					_g2.@set(((string) ("key2") ), ((int) (2) ));
					_g2.@set(((string) ("key3") ), ((int) (3) ));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), global::thx.Arrays.order<int>(((global::Array<int>) (global::thx.Maps.values<object, int>(((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g2) ))) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Ints), "compare", 57219237)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testValues", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
				}
				
			}
		}
		
		
		public virtual void testGetOption() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.StringMap<int> _g2 = new global::haxe.ds.StringMap<int>();
					_g2.@set(((string) ("key1") ), ((int) (1) ));
					global::utest.Assert.same((global::thx.Options.@get<int>(((global::haxe.ds.Option) (global::thx.Maps.getOption<object, int>(((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g2) ))) ), ((object) ("key1") ))) ))).toDynamic(), 1, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testGetOption", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
					global::utest.Assert.same(global::thx.Options.toBool<int>(((global::haxe.ds.Option) (global::thx.Maps.getOption<object, int>(((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g2) ))) ), ((object) ("key2") ))) )), false, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testGetOption", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
				}
				
			}
		}
		
		
		public virtual void testMerge() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.StringMap<int> _g2 = new global::haxe.ds.StringMap<int>();
					_g2.@set(((string) ("key1") ), ((int) (1) ));
					_g2.@set(((string) ("key2") ), ((int) (1) ));
					_g2.@set(((string) ("key3") ), ((int) (1) ));
					global::haxe.ds.StringMap<int> _g3 = new global::haxe.ds.StringMap<int>();
					_g3.@set(((string) ("key2") ), ((int) (2) ));
					_g3.@set(((string) ("key3") ), ((int) (2) ));
					global::haxe.ds.StringMap<int> _g4 = new global::haxe.ds.StringMap<int>();
					_g4.@set(((string) ("key3") ), ((int) (3) ));
					global::haxe.IMap<object, int> result1 = global::thx.Maps.merge<object, int>(((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (((global::haxe.ds.StringMap<int>) (new global::haxe.ds.StringMap<int>()) )) ))) ), ((global::Array<object>) (new global::Array<object>(new object[]{((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g2) ))) ), ((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g3) ))) ), ((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g4) ))) )})) ));
					global::utest.Assert.same(3, global::thx.Iterators.toArray<object>(((object) (result1.keys()) )).length, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (66) )}));
					global::utest.Assert.same(1, (result1.@get("key1")).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
					global::utest.Assert.same(2, (result1.@get("key2")).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (68) )}));
					global::utest.Assert.same(3, (result1.@get("key3")).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
					global::haxe.ds.StringMap<int> _g5 = new global::haxe.ds.StringMap<int>();
					_g5.@set(((string) ("mykey") ), ((int) (5) ));
					global::haxe.IMap<object, int> result2 = global::thx.Maps.merge<object, int>(((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (((global::haxe.ds.StringMap<int>) (_g5) )) ))) ), ((global::Array<object>) (new global::Array<object>(new object[]{})) ));
					global::utest.Assert.same(1, global::thx.Iterators.toArray<object>(((object) (result2.keys()) )).length, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (73) )}));
					global::utest.Assert.same(5, (result2.@get("mykey")).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (74) )}));
					global::utest.Assert.same(3, global::thx.Iterators.toArray<object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (_g2) ))) )).length, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
					global::utest.Assert.same(1, (_g2.@get(((string) ("key1") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
					global::utest.Assert.same(1, (_g2.@get(((string) ("key2") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (79) )}));
					global::utest.Assert.same(1, (_g2.@get(((string) ("key3") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
					global::utest.Assert.same(2, global::thx.Iterators.toArray<object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (_g3) ))) )).length, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
					global::utest.Assert.same(2, (_g3.@get(((string) ("key2") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (82) )}));
					global::utest.Assert.same(2, (_g3.@get(((string) ("key3") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
					global::utest.Assert.same(1, global::thx.Iterators.toArray<object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (_g4) ))) )).length, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (84) )}));
					global::utest.Assert.same(3, (_g4.@get(((string) ("key3") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
					global::haxe.IMap<object, int> result3 = global::thx.Maps.merge<object, int>(((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g2) ))) ), ((global::Array<object>) (new global::Array<object>(new object[]{((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g3) ))) ), ((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g4) ))) )})) ));
					global::utest.Assert.same(3, global::thx.Iterators.toArray<object>(((object) (result3.keys()) )).length, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (90) )}));
					global::utest.Assert.same(1, (result3.@get("key1")).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (91) )}));
					global::utest.Assert.same(2, (result3.@get("key2")).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (92) )}));
					global::utest.Assert.same(3, (result3.@get("key3")).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (93) )}));
					global::utest.Assert.same(3, global::thx.Iterators.toArray<object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (_g2) ))) )).length, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (94) )}));
					global::utest.Assert.same(1, (_g2.@get(((string) ("key1") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (95) )}));
					global::utest.Assert.same(2, (_g2.@get(((string) ("key2") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (96) )}));
					global::utest.Assert.same(3, (_g2.@get(((string) ("key3") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (97) )}));
					global::utest.Assert.same(2, global::thx.Iterators.toArray<object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (_g3) ))) )).length, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (98) )}));
					global::utest.Assert.same(2, (_g3.@get(((string) ("key2") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
					global::utest.Assert.same(2, (_g3.@get(((string) ("key3") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
					global::utest.Assert.same(1, global::thx.Iterators.toArray<object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (_g4) ))) )).length, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (101) )}));
					global::utest.Assert.same(3, (_g4.@get(((string) ("key3") ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMerge", "thx.TestMaps", "TestMaps.hx"}, new int[]{1981972957}, new double[]{((double) (102) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1321787654:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMerge", 1321787654)) );
					}
					
					
					case 1527503353:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testGetOption", 1527503353)) );
					}
					
					
					case 1756056020:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testValues", 1756056020)) );
					}
					
					
					case 580268381:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTuples", 580268381)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1321787654:
					{
						this.testMerge();
						break;
					}
					
					
					case 1527503353:
					{
						this.testGetOption();
						break;
					}
					
					
					case 1756056020:
					{
						this.testValues();
						break;
					}
					
					
					case 580268381:
					{
						this.testTuples();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestMaps_testTuples_22__Fun : global::haxe.lang.Function {
		
		public TestMaps_testTuples_22__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.TestMaps_testTuples_22__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			object a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			return ((double) (global::haxe.Utf8.compare(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(a, "_0", 21233, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(b, "_0", 21233, true)))) );
		}
		
		
	}
}


