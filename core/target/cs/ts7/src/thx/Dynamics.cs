// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Dynamics : global::haxe.lang.HxObject {
		
		public Dynamics(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Dynamics() {
			global::thx.Dynamics.__hx_ctor_thx_Dynamics(this);
		}
		
		
		public static void __hx_ctor_thx_Dynamics(global::thx.Dynamics __temp_me86) {
		}
		
		
		public static bool @equals<T1, T2>(T1 a, T2 b) {
			unchecked {
				if ( ! (global::thx.Types.sameType<T1, T2>(global::haxe.lang.Runtime.genericCast<T1>(a), global::haxe.lang.Runtime.genericCast<T2>(b))) ) {
					return false;
				}
				
				if (global::haxe.lang.Runtime.eq(a, b)) {
					return true;
				}
				
				global::ValueType _g = global::Type.@typeof(a);
				switch (_g.index) {
					case 0:
					case 1:
					case 2:
					case 3:
					{
						return false;
					}
					
					
					case 4:
					{
						global::Array<object> fa = global::Reflect.fields(a);
						global::Array<object> fb = global::Reflect.fields(b);
						{
							int _g1 = 0;
							while (( _g1 < fa.length )) {
								string field = global::haxe.lang.Runtime.toString(fa[_g1]);
								 ++ _g1;
								fb.@remove(field);
								if ( ! (global::Reflect.hasField(b, field)) ) {
									return false;
								}
								
								object va = global::Reflect.field(a, field);
								if (( va is global::haxe.lang.Function )) {
									continue;
								}
								
								object vb = global::Reflect.field(b, field);
								if ( ! (global::thx.Dynamics.@equals<object, object>(((object) (va) ), ((object) (vb) ))) ) {
									return false;
								}
								
							}
							
						}
						
						if (( fb.length > 0 )) {
							return false;
						}
						
						bool t = false;
						bool tmp = default(bool);
						t = global::thx.Iterators.isIterator(a);
						if ( ! (t) ) {
							tmp = global::thx.Iterables.isIterable(a);
						}
						else {
							tmp = true;
						}
						
						if (tmp) {
							if (( t &&  ! (global::thx.Iterators.isIterator(b))  )) {
								return false;
							}
							
							if ((  ! (t)  &&  ! (global::thx.Iterables.isIterable(b))  )) {
								return false;
							}
							
							global::Array aa = ( (t) ? (global::thx.Iterators.toArray<object>(((object) (a) ))) : (global::thx.Iterators.toArray<object>(((object) (global::haxe.lang.Runtime.callField(((object) (a) ), "iterator", 328878574, null)) ))) );
							global::Array ab = ( (t) ? (global::thx.Iterators.toArray<object>(((object) (b) ))) : (global::thx.Iterators.toArray<object>(((object) (global::haxe.lang.Runtime.callField(((object) (b) ), "iterator", 328878574, null)) ))) );
							if (( ((int) (global::haxe.lang.Runtime.getField_f(aa, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(ab, "length", 520590566, true)) ) )) {
								return false;
							}
							
							{
								int _g11 = 0;
								int _g2 = ((int) (global::haxe.lang.Runtime.getField_f(aa, "length", 520590566, true)) );
								while (( _g11 < _g2 )) {
									int i = _g11++;
									if ( ! (global::thx.Dynamics.@equals<object, object>(((object) (aa[i]) ), ((object) (ab[i]) ))) ) {
										return false;
									}
									
								}
								
							}
							
							return true;
						}
						
						return true;
					}
					
					
					case 5:
					{
						return global::Reflect.compareMethods(a, b);
					}
					
					
					case 6:
					{
						global::System.Type c = ((global::System.Type) (_g.@params[0]) );
						string ca = global::Type.getClassName(c);
						string cb = global::Type.getClassName(global::Type.getClass<T2>(global::haxe.lang.Runtime.genericCast<T2>(b)));
						if ( ! (string.Equals(ca, cb)) ) {
							return false;
						}
						
						if (( a is string )) {
							return false;
						}
						
						if (( a is global::Array )) {
							global::Array aa1 = ((global::Array) (((object) (a) )) );
							global::Array ab1 = ((global::Array) (((object) (b) )) );
							if (( ((int) (global::haxe.lang.Runtime.getField_f(aa1, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(ab1, "length", 520590566, true)) ) )) {
								return false;
							}
							
							{
								int _g12 = 0;
								int _g3 = ((int) (global::haxe.lang.Runtime.getField_f(aa1, "length", 520590566, true)) );
								while (( _g12 < _g3 )) {
									int i1 = _g12++;
									if ( ! (global::thx.Dynamics.@equals<object, object>(((object) (aa1[i1]) ), ((object) (ab1[i1]) ))) ) {
										return false;
									}
									
								}
								
							}
							
							return true;
						}
						
						if (( a is global::Date )) {
							return global::haxe.lang.Runtime.eq(((object) (global::haxe.lang.Runtime.callField(a, "getTime", 528448451, null)) ), ((object) (global::haxe.lang.Runtime.callField(b, "getTime", 528448451, null)) ));
						}
						
						if (( a is global::haxe.IMap )) {
							global::haxe.IMap ha = ((global::haxe.IMap) (((object) (a) )) );
							global::haxe.IMap hb = ((global::haxe.IMap) (((object) (b) )) );
							global::Array ka = global::thx.Iterators.toArray<object>(((object) (ha.keys()) ));
							global::Array kb = global::thx.Iterators.toArray<object>(((object) (hb.keys()) ));
							if (( ((int) (global::haxe.lang.Runtime.getField_f(ka, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(kb, "length", 520590566, true)) ) )) {
								return false;
							}
							
							{
								int _g4 = 0;
								while (( global::haxe.lang.Runtime.compare(_g4, ((int) (global::haxe.lang.Runtime.getField_f(ka, "length", 520590566, true)) )) < 0 )) {
									object key = ka[_g4];
									 ++ _g4;
									if ((  ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(hb, "exists", 1071652316, new global::Array<object>(new object[]{key}))))  ||  ! (global::thx.Dynamics.@equals<object, object>(((object) (global::haxe.lang.Runtime.callField(ha, "get", 5144726, new global::Array<object>(new object[]{key}))) ), ((object) (global::haxe.lang.Runtime.callField(hb, "get", 5144726, new global::Array<object>(new object[]{key}))) )))  )) {
										return false;
									}
									
								}
								
							}
							
							return true;
						}
						
						bool t1 = false;
						bool tmp1 = default(bool);
						t1 = global::thx.Iterators.isIterator(a);
						if ( ! (t1) ) {
							tmp1 = global::thx.Iterables.isIterable(a);
						}
						else {
							tmp1 = true;
						}
						
						if (tmp1) {
							global::Array va1 = ( (t1) ? (global::thx.Iterators.toArray<object>(((object) (a) ))) : (global::thx.Iterators.toArray<object>(((object) (global::haxe.lang.Runtime.callField(((object) (a) ), "iterator", 328878574, null)) ))) );
							global::Array vb1 = ( (t1) ? (global::thx.Iterators.toArray<object>(((object) (b) ))) : (global::thx.Iterators.toArray<object>(((object) (global::haxe.lang.Runtime.callField(((object) (b) ), "iterator", 328878574, null)) ))) );
							if (( ((int) (global::haxe.lang.Runtime.getField_f(va1, "length", 520590566, true)) ) != ((int) (global::haxe.lang.Runtime.getField_f(vb1, "length", 520590566, true)) ) )) {
								return false;
							}
							
							{
								int _g13 = 0;
								int _g5 = ((int) (global::haxe.lang.Runtime.getField_f(va1, "length", 520590566, true)) );
								while (( _g13 < _g5 )) {
									int i2 = _g13++;
									if ( ! (global::thx.Dynamics.@equals<object, object>(((object) (va1[i2]) ), ((object) (vb1[i2]) ))) ) {
										return false;
									}
									
								}
								
							}
							
							return true;
						}
						
						object f = null;
						bool tmp2 = default(bool);
						if (global::Reflect.hasField(a, "equals")) {
							f = global::haxe.lang.Runtime.getField(a, "equals", 1072885311, false);
							tmp2 = ( f is global::haxe.lang.Function );
						}
						else {
							tmp2 = false;
						}
						
						if (tmp2) {
							return global::haxe.lang.Runtime.toBool(global::Reflect.callMethod(a, f, new global::Array<object>(new object[]{b})));
						}
						
						global::Array<object> fields = global::Type.getInstanceFields(global::Type.getClass<T1>(global::haxe.lang.Runtime.genericCast<T1>(a)));
						{
							int _g6 = 0;
							while (( _g6 < fields.length )) {
								string field1 = global::haxe.lang.Runtime.toString(fields[_g6]);
								 ++ _g6;
								object va2 = global::Reflect.field(a, field1);
								if (( va2 is global::haxe.lang.Function )) {
									continue;
								}
								
								object vb2 = global::Reflect.field(b, field1);
								if ( ! (global::thx.Dynamics.@equals<object, object>(((object) (va2) ), ((object) (vb2) ))) ) {
									return false;
								}
								
							}
							
						}
						
						return true;
					}
					
					
					case 7:
					{
						global::System.Type e = ((global::System.Type) (_g.@params[0]) );
						string ea = global::Type.getEnumName(e);
						global::System.Type teb = global::Type.getEnum(((object) (b) ));
						string eb = global::Type.getEnumName(teb);
						if ( ! (string.Equals(ea, eb)) ) {
							return false;
						}
						
						if (( global::Type.enumIndex(((object) (a) )) != global::Type.enumIndex(((object) (b) )) )) {
							return false;
						}
						
						global::Array pa = global::Type.enumParameters(((object) (a) ));
						global::Array pb = global::Type.enumParameters(((object) (b) ));
						{
							int _g14 = 0;
							int _g7 = ((int) (global::haxe.lang.Runtime.getField_f(pa, "length", 520590566, true)) );
							while (( _g14 < _g7 )) {
								int i3 = _g14++;
								if ( ! (global::thx.Dynamics.@equals<object, object>(((object) (pa[i3]) ), ((object) (pb[i3]) ))) ) {
									return false;
								}
								
							}
							
						}
						
						return true;
					}
					
					
					case 8:
					{
						throw global::haxe.lang.HaxeException.wrap("Unable to compare two unknown types");
					}
					
					
				}
				
				return default(bool);
			}
		}
		
		
		public static object clone(object v, global::haxe.lang.Null<bool> cloneInstances) {
			unchecked {
				global::haxe.lang.Null<bool> __temp_cloneInstances85 = ( ( ! (cloneInstances.hasValue) ) ? (new global::haxe.lang.Null<bool>(false, true)) : (cloneInstances) );
				global::ValueType _g = global::Type.@typeof(v);
				switch (_g.index) {
					case 0:
					{
						return null;
					}
					
					
					case 1:
					case 2:
					case 3:
					case 5:
					case 7:
					case 8:
					{
						return v;
					}
					
					
					case 4:
					{
						return global::thx.Objects.copyTo(v, new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{}), default(global::haxe.lang.Null<bool>));
					}
					
					
					case 6:
					{
						global::System.Type c = ((global::System.Type) (_g.@params[0]) );
						switch (global::Type.getClassName(c)) {
							case "Array":
							{
								return ((global::Array) (global::haxe.lang.Runtime.callField(((global::Array) (v) ), "map", 5442204, new global::Array<object>(new object[]{new global::thx.Dynamics_clone_179__Fun(__temp_cloneInstances85)}))) );
							}
							
							
							case "Date":
							case "String":
							{
								return v;
							}
							
							
							default:
							{
								if (((__temp_cloneInstances85)).@value) {
									object o = global::Type.createEmptyInstance<object>(((global::System.Type) (c) ));
									{
										int _g1 = 0;
										global::Array<object> _g11 = global::Type.getInstanceFields(c);
										while (( _g1 < _g11.length )) {
											string field = global::haxe.lang.Runtime.toString(_g11[_g1]);
											 ++ _g1;
											global::Reflect.setField(o, field, global::thx.Dynamics.clone(global::Reflect.field(v, field), __temp_cloneInstances85));
										}
										
									}
									
									return o;
								}
								else {
									return v;
								}
								
							}
							
						}
						
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static int compare(object a, object b) {
			unchecked {
				if (( ( null == a ) && ( null == b ) )) {
					return 0;
				}
				
				if (( null == a )) {
					return -1;
				}
				
				if (( null == b )) {
					return 1;
				}
				
				if ( ! (global::thx.Types.sameType<object, object>(((object) (a) ), ((object) (b) ))) ) {
					return global::haxe.Utf8.compare(global::thx.Types.toString(global::Type.@typeof(((object) (a) ))), global::thx.Types.toString(global::Type.@typeof(((object) (b) ))));
				}
				
				global::ValueType _g = global::Type.@typeof(a);
				switch (_g.index) {
					case 1:
					{
						return ( ((int) (global::haxe.lang.Runtime.toInt(a)) ) - ((int) (global::haxe.lang.Runtime.toInt(b)) ) );
					}
					
					
					case 2:
					{
						double a1 = ((double) (global::haxe.lang.Runtime.toDouble(a)) );
						double b1 = ((double) (global::haxe.lang.Runtime.toDouble(b)) );
						if (( a1 < b1 )) {
							return -1;
						}
						else if (( a1 > b1 )) {
							return 1;
						}
						else {
							return 0;
						}
						
					}
					
					
					case 3:
					{
						return global::thx.Bools.compare(global::haxe.lang.Runtime.toBool(a), global::haxe.lang.Runtime.toBool(b));
					}
					
					
					case 4:
					{
						return global::thx.Objects.compare(a, b);
					}
					
					
					case 6:
					{
						switch (global::Type.getClassName(((global::System.Type) (_g.@params[0]) ))) {
							case "Array":
							{
								return global::thx.Arrays.compare<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (a) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (b) ))) ));
							}
							
							
							case "Date":
							{
								return global::thx.Dates.compare(((global::Date) (a) ), ((global::Date) (b) ));
							}
							
							
							case "String":
							{
								return global::haxe.Utf8.compare(global::haxe.lang.Runtime.toString(a), global::haxe.lang.Runtime.toString(b));
							}
							
							
							default:
							{
								if (global::Reflect.hasField(a, "compare")) {
									return ((int) (global::haxe.lang.Runtime.toInt(global::Reflect.callMethod(a, global::haxe.lang.Runtime.getField(a, "compare", 57219237, false), new global::Array<object>(new object[]{b})))) );
								}
								else {
									return global::haxe.Utf8.compare(global::Std.@string(a), global::Std.@string(b));
								}
								
							}
							
						}
						
					}
					
					
					case 7:
					{
						return global::thx.Enums.compare<object>(((object) (a) ), ((object) (b) ));
					}
					
					
					default:
					{
						return 0;
					}
					
				}
				
			}
		}
		
		
		public static string @string(object v) {
			unchecked {
				global::ValueType _g = global::Type.@typeof(v);
				switch (_g.index) {
					case 0:
					{
						return "null";
					}
					
					
					case 1:
					case 2:
					case 3:
					{
						return global::haxe.lang.Runtime.concat("", global::Std.@string(v));
					}
					
					
					case 4:
					{
						return global::thx.Objects.@string(v);
					}
					
					
					case 5:
					{
						return "<function>";
					}
					
					
					case 6:
					{
						switch (global::Type.getClassName(((global::System.Type) (_g.@params[0]) ))) {
							case "Array":
							{
								return global::thx.Arrays.@string<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (v) ))) ));
							}
							
							
							case "Date":
							{
								return ((global::Date) (v) ).toString();
							}
							
							
							case "String":
							{
								return global::haxe.lang.Runtime.toString(v);
							}
							
							
							default:
							{
								if (( v is global::haxe.IMap )) {
									return global::thx.Maps.@string<object, object>(((global::haxe.IMap<object, object>) (global::haxe.IMap__Statics_.__hx_cast<object, object>(((global::haxe.IMap) (v) ))) ));
								}
								else {
									return global::Std.@string(v);
								}
								
							}
							
						}
						
					}
					
					
					case 7:
					{
						return global::thx.Enums.@string<object>(((object) (v) ));
					}
					
					
					case 8:
					{
						return "<unknown>";
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.Dynamics(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.Dynamics();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Dynamics_clone_179__Fun : global::haxe.lang.Function {
		
		public Dynamics_clone_179__Fun(global::haxe.lang.Null<bool> __temp_cloneInstances85) : base(1, 0) {
			this.__temp_cloneInstances85 = __temp_cloneInstances85;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object v1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			return global::thx.Dynamics.clone(v1, this.__temp_cloneInstances85);
		}
		
		
		public global::haxe.lang.Null<bool> __temp_cloneInstances85;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class DynamicsT : global::haxe.lang.HxObject {
		
		public DynamicsT(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public DynamicsT() {
			global::thx.DynamicsT.__hx_ctor_thx_DynamicsT(this);
		}
		
		
		public static void __hx_ctor_thx_DynamicsT(global::thx.DynamicsT __temp_me87) {
		}
		
		
		public static bool isEmpty<T>(object o) {
			return ( global::Reflect.fields(o).length == 0 );
		}
		
		
		public static bool exists<T>(object o, string name) {
			return global::Reflect.hasField(o, name);
		}
		
		
		public static global::Array<object> fields<T>(object o) {
			return global::Reflect.fields(o);
		}
		
		
		public static object merge<T>(object to, object @from, global::haxe.lang.Function replacef) {
			if (( null == replacef )) {
				replacef = ( (( global::thx.DynamicsT_merge_297__Fun.__hx_current != null )) ? (global::thx.DynamicsT_merge_297__Fun.__hx_current) : (global::thx.DynamicsT_merge_297__Fun.__hx_current = ((global::thx.DynamicsT_merge_297__Fun) (new global::thx.DynamicsT_merge_297__Fun()) )) );
			}
			
			{
				int _g = 0;
				global::Array<object> _g1 = global::Reflect.fields(@from);
				while (( _g < _g1.length )) {
					string field1 = global::haxe.lang.Runtime.toString(_g1[_g]);
					 ++ _g;
					object newv1 = global::Reflect.field(@from, field1);
					if (global::Reflect.hasField(to, field1)) {
						global::Reflect.setField(to, field1, ((object) (replacef.__hx_invoke3_o(default(double), field1, default(double), global::Reflect.field(to, field1), default(double), newv1)) ));
					}
					else {
						global::Reflect.setField(to, field1, newv1);
					}
					
				}
				
			}
			
			return to;
		}
		
		
		public static int size<T>(object o) {
			return global::Reflect.fields(o).length;
		}
		
		
		public static global::Array values<T>(object o) {
			return global::Reflect.fields(o).map<object>(((global::haxe.lang.Function) (new global::thx.DynamicsT_values_329__Fun<T>(o)) ));
		}
		
		
		public static global::Array<object> tuples<T>(object o) {
			return global::Reflect.fields(o).map<object>(((global::haxe.lang.Function) (new global::thx.DynamicsT_tuples_336__Fun<T>(o)) ));
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.DynamicsT(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.DynamicsT();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class DynamicsT_merge_297__Fun : global::haxe.lang.Function {
		
		public DynamicsT_merge_297__Fun() : base(3, 0) {
		}
		
		
		public static global::thx.DynamicsT_merge_297__Fun __hx_current;
		
		public override object __hx_invoke3_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3) {
			object newv = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float3) )) : (((object) (__fn_dyn3) )) );
			object oldv = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			string field = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return newv;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class DynamicsT_values_329__Fun<T> : global::haxe.lang.Function {
		
		public DynamicsT_values_329__Fun(object o) : base(1, 0) {
			this.o = o;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string key = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::Reflect.field(this.o, key);
		}
		
		
		public object o;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class DynamicsT_tuples_336__Fun<T> : global::haxe.lang.Function {
		
		public DynamicsT_tuples_336__Fun(object o) : base(1, 0) {
			this.o = o;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string key = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			object __temp_stmt2 = null;
			{
				T __temp_odecl1 = global::haxe.lang.Runtime.genericCast<T>(global::Reflect.field(this.o, key));
				__temp_stmt2 = new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{key, __temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (__temp_stmt2) );
		}
		
		
		public object o;
		
	}
}


