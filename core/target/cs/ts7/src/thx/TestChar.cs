// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestChar : global::haxe.lang.HxObject {
		
		public TestChar(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestChar(int i) {
			global::thx.TestChar.__hx_ctor_thx_TestChar(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestChar(global::thx.TestChar __temp_me134, int i) {
			__temp_me134.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestChar(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestChar(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testChar() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.Assert.isTrue(true, global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(120)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					int @char = ((int) (120) );
					global::utest.Assert.@equals(120, @char, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChar", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
					new string(((char) (((int) (@char) )) ), 1);
					global::utest.Assert.@equals("x", "x", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChar", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
					int i = (global::haxe.lang.StringExt.charCodeAt("y", 0)).@value;
					global::thx.Assert.isTrue(( i >= 0 ), global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					@char = ((int) (i) );
					global::utest.Assert.@equals(121, @char, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChar", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
					global::utest.Assert.@equals("y", new string(((char) (((int) (@char) )) ), 1), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChar", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
					global::utest.Assert.@equals(89, global::thx._Char.Char_Impl_.toUpperCase(@char), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChar", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
					global::utest.Assert.@equals("Y", new string(((char) (((int) (global::thx._Char.Char_Impl_.toUpperCase(@char)) )) ), 1), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChar", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
					@char = global::thx._Char.Char_Impl_.next(@char);
					global::utest.Assert.@equals(122, @char, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChar", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
					global::utest.Assert.@equals("z", new string(((char) (((int) (@char) )) ), 1), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChar", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
					global::utest.Assert.@equals(121, global::thx._Char.Char_Impl_.prev(@char), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChar", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
				}
				
			}
		}
		
		
		public virtual void testControl() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.Assert.isTrue(true, global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(7)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					global::utest.Assert.isTrue(global::thx._Char.Char_Impl_.isControl(((int) (7) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testControl", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					int i = (global::haxe.lang.StringExt.charCodeAt("x", 0)).@value;
					global::thx.Assert.isTrue(( i >= 0 ), global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					global::utest.Assert.isFalse(global::thx._Char.Char_Impl_.isControl(((int) (i) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testControl", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
				}
				
			}
		}
		
		
		public virtual void testUtf8() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					int i = (global::haxe.lang.StringExt.charCodeAt("\u263a", 0)).@value;
					global::thx.Assert.isTrue(( i >= 0 ), global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					global::utest.Assert.@equals(9786, ((int) (i) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUtf8", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
					global::thx.Assert.isTrue(true, global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(9786)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					global::utest.Assert.@equals("\u263a", new string(((char) (((int) (9786) )) ), 1), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUtf8", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
				}
				
			}
		}
		
		
		public virtual void testArrayToString() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.Assert.isTrue(true, global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(120)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					int tmp = ((int) (120) );
					global::thx.Assert.isTrue(true, global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(121)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					int tmp1 = ((int) (121) );
					global::thx.Assert.isTrue(true, global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(122)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					global::utest.Assert.@equals("xyz", global::thx._Char.Char_Impl_.arrayToString(new global::Array<int>(new int[]{tmp, tmp1, ((int) (122) )})), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testArrayToString", "thx.TestChar", "TestChar.hx"}, new int[]{1981972957}, new double[]{((double) (51) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 313194419:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testArrayToString", 313194419)) );
					}
					
					
					case 1356913315:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUtf8", 1356913315)) );
					}
					
					
					case 1447713067:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testControl", 1447713067)) );
					}
					
					
					case 1156703304:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testChar", 1156703304)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 313194419:
					{
						this.testArrayToString();
						break;
					}
					
					
					case 1356913315:
					{
						this.testUtf8();
						break;
					}
					
					
					case 1447713067:
					{
						this.testControl();
						break;
					}
					
					
					case 1156703304:
					{
						this.testChar();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


