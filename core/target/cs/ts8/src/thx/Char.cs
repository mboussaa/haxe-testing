// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Char {
	public sealed class Char_Impl_ {
		
		public static int at(string s, int index) {
			unchecked {
				int i = (global::haxe.lang.StringExt.charCodeAt(s, index)).@value;
				global::thx.Assert.isTrue(( i >= 0 ), global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
				return ((int) (i) );
			}
		}
		
		
		public static int fromInt(int i) {
			unchecked {
				global::thx.Assert.isTrue(( i >= 0 ), global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
				return ((int) (i) );
			}
		}
		
		
		public static int fromString(string s) {
			unchecked {
				int i = (global::haxe.lang.StringExt.charCodeAt(s, 0)).@value;
				global::thx.Assert.isTrue(( i >= 0 ), global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
				return ((int) (i) );
			}
		}
		
		
		public static int compare(int a, int b) {
			unchecked {
				return global::haxe.Utf8.compare(new string(((char) (((int) (a) )) ), 1), new string(((char) (((int) (b) )) ), 1));
			}
		}
		
		
		public static int _new(int i) {
			return ((int) (i) );
		}
		
		
		public static int compareTo(int this1, int other) {
			unchecked {
				return global::haxe.Utf8.compare(new string(((char) (((int) (this1) )) ), 1), new string(((char) (((int) (other) )) ), 1));
			}
		}
		
		
		public static bool isBreakingWhitespace(int this1) {
			unchecked {
				if ( ! ((( ( ( this1 == 32 ) || ( this1 == 9 ) ) || ( this1 == 10 ) ))) ) {
					return ( this1 == 13 );
				}
				else {
					return true;
				}
				
			}
		}
		
		
		public static bool isControl(int this1) {
			unchecked {
				if ( ! ((( ( ( this1 >= 0 ) && ( this1 <= 31 ) ) || ( this1 == 127 ) ))) ) {
					if (( this1 >= 128 )) {
						return ( this1 <= 159 );
					}
					else {
						return false;
					}
					
				}
				else {
					return true;
				}
				
			}
		}
		
		
		public static bool isUnicode(int this1) {
			unchecked {
				return ( this1 <= 65533 );
			}
		}
		
		
		public static int next(int this1) {
			unchecked {
				int i = ( this1 + 1 );
				global::thx.Assert.isTrue(( i >= 0 ), global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
				return ((int) (i) );
			}
		}
		
		
		public static int prev(int this1) {
			unchecked {
				int i = ( this1 - 1 );
				global::thx.Assert.isTrue(( i >= 0 ), global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
				return ((int) (i) );
			}
		}
		
		
		public static int toUpperCase(int this1) {
			unchecked {
				int i = (global::haxe.lang.StringExt.charCodeAt(new string(((char) (((int) (this1) )) ), 1).ToUpperInvariant(), 0)).@value;
				global::thx.Assert.isTrue(( i >= 0 ), global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
				return ((int) (i) );
			}
		}
		
		
		public static int toLowerCase(int this1) {
			unchecked {
				int i = (global::haxe.lang.StringExt.charCodeAt(new string(((char) (((int) (this1) )) ), 1).ToLowerInvariant(), 0)).@value;
				global::thx.Assert.isTrue(( i >= 0 ), global::haxe.lang.Runtime.concat("Char value should be greater than zero: ", global::haxe.lang.Runtime.toString(i)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromInt", "thx._Char.Char_Impl_", "Char.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
				return ((int) (i) );
			}
		}
		
		
		public static bool equalsTo(int this1, int other) {
			unchecked {
				return ( global::haxe.Utf8.compare(new string(((char) (((int) (this1) )) ), 1), new string(((char) (((int) (other) )) ), 1)) == 0 );
			}
		}
		
		
		public static bool @equals(int self, int other) {
			unchecked {
				return ( global::haxe.Utf8.compare(new string(((char) (((int) (self) )) ), 1), new string(((char) (((int) (other) )) ), 1)) == 0 );
			}
		}
		
		
		public static bool greaterThan(int this1, int other) {
			unchecked {
				return ( global::haxe.Utf8.compare(new string(((char) (((int) (this1) )) ), 1), new string(((char) (((int) (other) )) ), 1)) > 0 );
			}
		}
		
		
		public static bool greater(int self, int other) {
			unchecked {
				return ( global::haxe.Utf8.compare(new string(((char) (((int) (self) )) ), 1), new string(((char) (((int) (other) )) ), 1)) > 0 );
			}
		}
		
		
		public static bool greaterEqualsThan(int this1, int other) {
			unchecked {
				return ( global::haxe.Utf8.compare(new string(((char) (((int) (this1) )) ), 1), new string(((char) (((int) (other) )) ), 1)) >= 0 );
			}
		}
		
		
		public static bool greaterEquals(int self, int other) {
			unchecked {
				return ( global::haxe.Utf8.compare(new string(((char) (((int) (self) )) ), 1), new string(((char) (((int) (other) )) ), 1)) >= 0 );
			}
		}
		
		
		public static bool lessEqualsTo(int this1, int other) {
			unchecked {
				return ( global::haxe.Utf8.compare(new string(((char) (((int) (this1) )) ), 1), new string(((char) (((int) (other) )) ), 1)) <= 0 );
			}
		}
		
		
		public static bool lessEquals(int self, int other) {
			unchecked {
				return ( global::haxe.Utf8.compare(new string(((char) (((int) (self) )) ), 1), new string(((char) (((int) (other) )) ), 1)) <= 0 );
			}
		}
		
		
		public static bool lessThan(int this1, int other) {
			unchecked {
				return ( global::haxe.Utf8.compare(new string(((char) (((int) (this1) )) ), 1), new string(((char) (((int) (other) )) ), 1)) < 0 );
			}
		}
		
		
		public static bool less(int self, int other) {
			unchecked {
				return ( global::haxe.Utf8.compare(new string(((char) (((int) (self) )) ), 1), new string(((char) (((int) (other) )) ), 1)) < 0 );
			}
		}
		
		
		public static int toInt(int this1) {
			return this1;
		}
		
		
		public static string toString(int this1) {
			unchecked {
				return new string(((char) (this1) ), 1);
			}
		}
		
		
		public static string arrayToString(global::Array<int> arr) {
			return arr.map<object>(((global::haxe.lang.Function) (( (( global::thx._Char.Char_Impl__arrayToString_146__Fun.__hx_current != null )) ? (global::thx._Char.Char_Impl__arrayToString_146__Fun.__hx_current) : (global::thx._Char.Char_Impl__arrayToString_146__Fun.__hx_current = ((global::thx._Char.Char_Impl__arrayToString_146__Fun) (new global::thx._Char.Char_Impl__arrayToString_146__Fun()) )) )) )).@join("");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Char {
	public class Char_Impl__arrayToString_146__Fun : global::haxe.lang.Function {
		
		public Char_Impl__arrayToString_146__Fun() : base(1, 0) {
		}
		
		
		public static global::thx._Char.Char_Impl__arrayToString_146__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int c = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return new string(((char) (((int) (c) )) ), 1);
			}
		}
		
		
	}
}


