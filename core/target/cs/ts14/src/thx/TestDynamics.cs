// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestDynamics : global::haxe.lang.HxObject {
		
		public TestDynamics(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestDynamics(int i) {
			global::thx.TestDynamics.__hx_ctor_thx_TestDynamics(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestDynamics(global::thx.TestDynamics __temp_me131, int i) {
			__temp_me131.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestDynamics(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestDynamics(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testDynamics() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(null, global::thx.Dynamics.clone(null, default(global::haxe.lang.Null<bool>)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (15) )}));
					global::utest.Assert.@equals(true, global::thx.Dynamics.clone(true, default(global::haxe.lang.Null<bool>)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
					global::utest.Assert.@equals("hello", global::thx.Dynamics.clone("hello", default(global::haxe.lang.Null<bool>)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
					global::utest.Assert.@equals(3, global::thx.Dynamics.clone(3, default(global::haxe.lang.Null<bool>)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
					global::utest.Assert.@equals(3.14, global::thx.Dynamics.clone(3.14, default(global::haxe.lang.Null<bool>)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					global::utest.Assert.@equals(global::ValueType.TBool, global::thx.Dynamics.clone(global::ValueType.TBool, default(global::haxe.lang.Null<bool>)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
					global::utest.Assert.isTrue(global::Type.enumEq<object>(((object) (global::ValueType.TClass(typeof(global::thx.TestDynamics))) ), ((object) (global::thx.Dynamics.clone(global::ValueType.TClass(typeof(global::thx.TestDynamics)), default(global::haxe.lang.Null<bool>))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
					global::Date date = new global::Date(((global::System.DateTime) (global::System.DateTime.Now) ));
					global::utest.Assert.@equals(date, global::thx.Dynamics.clone(date, default(global::haxe.lang.Null<bool>)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
					global::utest.Assert.same(((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDynamics", 266147462)) ), global::thx.Dynamics.clone(((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDynamics", 266147462)) ), default(global::haxe.lang.Null<bool>)), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
					global::Array<int> arr1 = new global::Array<int>(new int[]{0, 1, 2});
					object arr2 = global::thx.Dynamics.clone(arr1, default(global::haxe.lang.Null<bool>));
					global::utest.Assert.notEquals(arr1, arr2, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
					global::utest.Assert.same(arr1, arr2, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
					object obj1 = new global::haxe.lang.DynamicObject(new int[]{1224700491}, new object[]{"Franco"}, new int[]{561678025}, new double[]{((double) (0) )});
					object obj2 = global::thx.Dynamics.clone(obj1, default(global::haxe.lang.Null<bool>));
					global::utest.Assert.notEquals(obj1, obj2, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
					global::utest.Assert.same(obj1, obj2, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (34) )}));
					global::thx.Point inst1 = new global::thx.Point(5, 6);
					global::utest.Assert.@equals(inst1, global::thx.Dynamics.clone(inst1, default(global::haxe.lang.Null<bool>)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					object inst3 = global::thx.Dynamics.clone(inst1, new global::haxe.lang.Null<bool>(true, true));
					global::utest.Assert.notEquals(inst1, inst3, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					global::utest.Assert.same(inst1.x, global::haxe.lang.Runtime.getField(inst3, "x", 120, true), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDynamics", "thx.TestDynamics", "TestDynamics.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 266147462:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDynamics", 266147462)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 266147462:
					{
						this.testDynamics();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Point : global::haxe.lang.HxObject {
		
		public Point(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Point(int x, int y) {
			global::thx.Point.__hx_ctor_thx_Point(this, x, y);
		}
		
		
		public static void __hx_ctor_thx_Point(global::thx.Point __temp_me132, int x, int y) {
			__temp_me132.x = x;
			__temp_me132.y = y;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.Point(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::thx.Point(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ), ((int) (global::haxe.lang.Runtime.toInt(arr[1])) ));
			}
		}
		
		
		public int x;
		
		public int y;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						this.y = ((int) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						this.y = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 121:
					{
						return ((double) (this.y) );
					}
					
					
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("y");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


