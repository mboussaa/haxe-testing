// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestRational : global::haxe.lang.HxObject {
		
		public TestRational(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestRational(int i) {
			global::thx.TestRational.__hx_ctor_thx_TestRational(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestRational(global::thx.TestRational __temp_me142, int i) {
			__temp_me142.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestRational(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestRational(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testOperations() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					object x = null;
					object y = null;
					x = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(2)) ));
					y = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3)) ));
					global::utest.Assert.@equals("5/6", global::thx._Rational.Rational_Impl_.toString(global::thx._Rational.Rational_Impl_.@add(x, y)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOperations", "thx.TestRational", "TestRational.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
					x = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(8)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(9)) ));
					y = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(9)) ));
					global::utest.Assert.@equals("1", global::thx._Rational.Rational_Impl_.toString(global::thx._Rational.Rational_Impl_.@add(x, y)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOperations", "thx.TestRational", "TestRational.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
					x = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(200000000)) ));
					y = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(300000000)) ));
					global::utest.Assert.@equals("1/120000000", global::thx._Rational.Rational_Impl_.toString(global::thx._Rational.Rational_Impl_.@add(x, y)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOperations", "thx.TestRational", "TestRational.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
					x = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1073741789)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(20)) ));
					y = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1073741789)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(30)) ));
					global::utest.Assert.@equals("1073741789/12", global::thx._Rational.Rational_Impl_.toString(global::thx._Rational.Rational_Impl_.@add(x, y)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOperations", "thx.TestRational", "TestRational.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
					x = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(4)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(17)) ));
					y = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(17)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(4)) ));
					global::utest.Assert.@equals("1", global::thx._Rational.Rational_Impl_.toString(global::thx._Rational.Rational_Impl_.multiply(x, y)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOperations", "thx.TestRational", "TestRational.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					x = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3037141)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3247033)) ));
					y = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3037547)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(3246599)) ));
					global::utest.Assert.@equals("841/961", global::thx._Rational.Rational_Impl_.toString(global::thx._Rational.Rational_Impl_.multiply(x, y)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOperations", "thx.TestRational", "TestRational.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
					global::utest.Assert.floatEquals(0.87513007284079, global::thx._Rational.Rational_Impl_.toFloat(global::thx._Rational.Rational_Impl_.multiply(x, y)), default(global::haxe.lang.Null<double>), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOperations", "thx.TestRational", "TestRational.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
					x = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(6)) ));
					y = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-4)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(-8)) ));
					global::utest.Assert.@equals("-1/3", global::thx._Rational.Rational_Impl_.toString(global::thx._Rational.Rational_Impl_.subtract(x, y)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOperations", "thx.TestRational", "TestRational.hx"}, new int[]{1981972957}, new double[]{((double) (51) )}));
				}
				
			}
		}
		
		
		public virtual void testFromInt() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					object r = global::thx._Rational.Rational_Impl_.fromInt(3);
					global::utest.Assert.@equals("3", global::thx._Rational.Rational_Impl_.toString(r), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromInt", "thx.TestRational", "TestRational.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
					r = global::thx._Rational.Rational_Impl_.divide(r, global::thx._Rational.Rational_Impl_.fromInt(2));
					global::utest.Assert.@equals("3/2", global::thx._Rational.Rational_Impl_.toString(r), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromInt", "thx.TestRational", "TestRational.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 348375923:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromInt", 348375923)) );
					}
					
					
					case 942032222:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOperations", 942032222)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 348375923:
					{
						this.testFromInt();
						break;
					}
					
					
					case 942032222:
					{
						this.testOperations();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


