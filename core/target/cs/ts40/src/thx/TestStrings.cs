// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings : global::haxe.lang.HxObject {
		
		public TestStrings(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestStrings(int i) {
			global::thx.TestStrings.__hx_ctor_thx_TestStrings(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestStrings(global::thx.TestStrings __temp_me131, int i) {
			__temp_me131.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestStrings(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestStrings(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testLowerUpperCaseFirst() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("aBC", global::thx.Strings.lowerCaseFirst("ABC"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLowerUpperCaseFirst", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
					global::utest.Assert.@equals("Abc", global::thx.Strings.upperCaseFirst("abc"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLowerUpperCaseFirst", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
				}
				
			}
		}
		
		
		public virtual void testContains() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(( global::haxe.lang.StringExt.indexOf("test", "", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
					global::utest.Assert.isTrue(( global::haxe.lang.StringExt.indexOf("test", "t", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
					global::utest.Assert.isTrue(( global::haxe.lang.StringExt.indexOf("test", "te", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
					global::utest.Assert.isTrue(( global::haxe.lang.StringExt.indexOf("test", "tes", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
					global::utest.Assert.isTrue(( global::haxe.lang.StringExt.indexOf("test", "test", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
					global::utest.Assert.isTrue(( global::haxe.lang.StringExt.indexOf("one two three", "one", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
					global::utest.Assert.isTrue(( global::haxe.lang.StringExt.indexOf("one two three", "two", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
					global::utest.Assert.isTrue(( global::haxe.lang.StringExt.indexOf("one two three", "three", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
					global::utest.Assert.isFalse(( global::haxe.lang.StringExt.indexOf("test", "test ", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (34) )}));
					global::utest.Assert.isFalse(( global::haxe.lang.StringExt.indexOf("test", " test", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
					global::utest.Assert.isFalse(( global::haxe.lang.StringExt.indexOf("test", "tes ", default(global::haxe.lang.Null<int>)) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContains", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
				}
				
			}
		}
		
		
		public virtual void testCount() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(3, global::thx.Strings.count("one two three four five six seven eight nine ten", "o"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
					global::utest.Assert.@equals(2, global::thx.Strings.count("one two three four five six seven eight nine ten", "en"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
					global::utest.Assert.@equals(3, global::thx.Strings.count("one two three four five six seven eight nine ten", " t"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
					global::utest.Assert.@equals(2, global::thx.Strings.count("one two three four five six seven eight nine ten", "ve"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
					global::utest.Assert.@equals(0, global::thx.Strings.count("xxxxxx", "y"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
					global::utest.Assert.@equals(6, global::thx.Strings.count("xxxxxx", "x"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
					global::utest.Assert.@equals(3, global::thx.Strings.count("xxxxxx", "xx"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
					global::utest.Assert.@equals(2, global::thx.Strings.count("xxxxxx", "xxx"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
					global::utest.Assert.@equals(1, global::thx.Strings.count("xxxxxx", "xxxx"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
					global::utest.Assert.@equals(0, global::thx.Strings.count("x", "xx"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCount", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				}
				
			}
		}
		
		
		public virtual void testContainsAny() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"t", "x", "y"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_55__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_55__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_55__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_55__Fun) (new global::thx.TestStrings_testContainsAny_55__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"e", "x", "y"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_56__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_56__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_56__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_56__Fun) (new global::thx.TestStrings_testContainsAny_56__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"s", "x", "y"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_57__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_57__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_57__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_57__Fun) (new global::thx.TestStrings_testContainsAny_57__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"x", "t", "y"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_58__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_58__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_58__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_58__Fun) (new global::thx.TestStrings_testContainsAny_58__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (58) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"x", "e", "y"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_59__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_59__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_59__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_59__Fun) (new global::thx.TestStrings_testContainsAny_59__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"x", "s", "y"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_60__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_60__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_60__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_60__Fun) (new global::thx.TestStrings_testContainsAny_60__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"x", "y", "t"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_61__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_61__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_61__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_61__Fun) (new global::thx.TestStrings_testContainsAny_61__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"x", "y", "e"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_62__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_62__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_62__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_62__Fun) (new global::thx.TestStrings_testContainsAny_62__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (62) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"x", "y", "s"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_63__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_63__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_63__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_63__Fun) (new global::thx.TestStrings_testContainsAny_63__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"zero", "one", "two"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_64__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_64__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_64__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_64__Fun) (new global::thx.TestStrings_testContainsAny_64__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (64) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"one", "two", "three"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_65__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_65__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_65__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_65__Fun) (new global::thx.TestStrings_testContainsAny_65__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (65) )}));
					global::utest.Assert.isTrue(global::thx.Arrays.any<object>(((global::Array<object>) (new global::Array<object>(new object[]{"one two", "x", "three"})) ), ((global::haxe.lang.Function) (( (( global::thx.TestStrings_testContainsAny_66__Fun.__hx_current != null )) ? (global::thx.TestStrings_testContainsAny_66__Fun.__hx_current) : (global::thx.TestStrings_testContainsAny_66__Fun.__hx_current = ((global::thx.TestStrings_testContainsAny_66__Fun) (new global::thx.TestStrings_testContainsAny_66__Fun()) )) )) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testContainsAny", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (66) )}));
				}
				
			}
		}
		
		
		public virtual void testHashCode() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(97, global::thx.Strings.hashCode("a"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHashCode", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (71) )}));
					global::utest.Assert.@equals(96354, global::thx.Strings.hashCode("abc"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHashCode", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (72) )}));
					global::utest.Assert.@equals(898829415, global::thx.Strings.hashCode("abcdefghijklm"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHashCode", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (73) )}));
					global::utest.Assert.@equals(410520826, global::thx.Strings.hashCode("abcdefghijklmabcdefghijklmabcdefghijklmabcdefghijklmabcdefghijklm!!!"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHashCode", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (74) )}));
				}
				
			}
		}
		
		
		public virtual void testUcwordsws() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{"Test", "test"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{"Test Test", "test test"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{" Test Test  Test ", " test test  test "}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{"Test\nTest", "test\ntest"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{"Test\tTest", "test\ttest"}, new int[]{}, new double[]{})});
					{
						int _g2 = 0;
						while (( _g2 < tests.length )) {
							object item = tests[_g2];
							 ++ _g2;
							global::utest.Assert.@equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(item, "expected", 1076899448, true)), global::thx.Strings.capitalizeWords(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(item, "test", 1291438162, true)), new global::haxe.lang.Null<bool>(true, true)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUcwordsws", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (87) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void testDifferAt() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(3, global::thx.Strings.diffAt("abcdef", "abc123"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifferAt", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (92) )}));
					global::utest.Assert.@equals(0, global::thx.Strings.diffAt("", "abc123"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifferAt", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (93) )}));
					global::utest.Assert.@equals(1, global::thx.Strings.diffAt("a", "abc123"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifferAt", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (94) )}));
					global::utest.Assert.@equals(0, global::thx.Strings.diffAt("abc123", ""), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifferAt", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (95) )}));
					global::utest.Assert.@equals(1, global::thx.Strings.diffAt("abc123", "a"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifferAt", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (96) )}));
				}
				
			}
		}
		
		
		public virtual void testEllipsis() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{5393365, 1076899448, 1860022104}, new object[]{(default(global::haxe.lang.Null<int>)).toDynamic(), "abcdefghijkl", null}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1860022104}, new object[]{"abcdefghijkl", null}, new int[]{5393365}, new double[]{((double) (100) )}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1860022104}, new object[]{"abcd\u2026", null}, new int[]{5393365}, new double[]{((double) (5) )}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1860022104}, new object[]{"a ...", " ..."}, new int[]{5393365}, new double[]{((double) (5) )}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1860022104}, new object[]{"..", " ..."}, new int[]{5393365}, new double[]{((double) (2) )}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1860022104}, new object[]{"abcdef ...", " ..."}, new int[]{5393365}, new double[]{((double) (10) )})});
					{
						int _g2 = 0;
						while (( _g2 < tests.length )) {
							object item = tests[_g2];
							 ++ _g2;
							global::utest.Assert.@equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(item, "expected", 1076899448, true)), global::thx.Strings.ellipsis("abcdefghijkl", global::haxe.lang.Null<object>.ofDynamic<int>(global::haxe.lang.Runtime.getField(item, "len", 5393365, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(item, "symbol", 1860022104, true))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEllipsis", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (111) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void testEllipsisMiddle() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{5393365, 1076899448, 1860022104}, new object[]{(default(global::haxe.lang.Null<int>)).toDynamic(), "abcdefghijkl", null}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1860022104}, new object[]{"abcdefghijkl", null}, new int[]{5393365}, new double[]{((double) (100) )}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1860022104}, new object[]{"ab\u2026kl", null}, new int[]{5393365}, new double[]{((double) (5) )}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1860022104}, new object[]{"a ...", " ..."}, new int[]{5393365}, new double[]{((double) (5) )}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1860022104}, new object[]{"..", " ..."}, new int[]{5393365}, new double[]{((double) (2) )}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1860022104}, new object[]{"abc ...jkl", " ..."}, new int[]{5393365}, new double[]{((double) (10) )})});
					{
						int _g2 = 0;
						while (( _g2 < tests.length )) {
							object item = tests[_g2];
							 ++ _g2;
							global::utest.Assert.@equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(item, "expected", 1076899448, true)), global::thx.Strings.ellipsisMiddle("abcdefghijkl", global::haxe.lang.Null<object>.ofDynamic<int>(global::haxe.lang.Runtime.getField(item, "len", 5393365, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(item, "symbol", 1860022104, true))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEllipsisMiddle", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (126) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void testUcwords() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{"Test", "test"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{"Test Test", "test test"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{" Test-Test:Test_Test : Test ", " test-test:test_test : test "}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{"Test\nTest", "test\ntest"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{"Test\tTest", "test\ttest"}, new int[]{}, new double[]{})});
					{
						int _g2 = 0;
						while (( _g2 < tests.length )) {
							object item = tests[_g2];
							 ++ _g2;
							global::utest.Assert.@equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(item, "expected", 1076899448, true)), global::thx.Strings.capitalizeWords(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(item, "test", 1291438162, true)), default(global::haxe.lang.Null<bool>)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUcwords", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (139) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void testAlphaNum() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<object> tests = new global::Array<object>(new object[]{new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{true, "a"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{true, "1a"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{false, " a"}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{false, " "}, new int[]{}, new double[]{}), new global::haxe.lang.DynamicObject(new int[]{1076899448, 1291438162}, new object[]{false, ""}, new int[]{}, new double[]{})});
					{
						int _g2 = 0;
						while (( _g2 < tests.length )) {
							object item = tests[_g2];
							 ++ _g2;
							global::utest.Assert.@equals(global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(item, "expected", 1076899448, true)), global::thx.Strings.ALPHANUM.match(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(item, "test", 1291438162, true))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAlphaNum", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (152) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void testHumanize() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("hello world", global::thx.Strings.humanize("helloWorld"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHumanize", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (157) )}));
					global::utest.Assert.@equals("my long string", global::thx.Strings.humanize("my_long_string"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHumanize", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (158) )}));
					global::utest.Assert.@equals("ignore many", global::thx.Strings.humanize("ignoreMANY"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHumanize", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (159) )}));
				}
				
			}
		}
		
		
		public virtual void testWrapColumn() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("Lorem ipsum dolor\nsit amet,\nconsectetur\nadipisicing elit,\nsed do eiusmod\ntempor incididunt ut\nlabore et dolore\nmagna aliqua. Ut\nenim ad minim\nveniam, quis nostrud\nexercitation ullamco\nlaboris nisi ut\naliquip ex ea\ncommodo consequat.", global::thx.Strings.wrapColumns("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.", new global::haxe.lang.Null<int>(20, true), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWrapColumn", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (166) )}));
					global::utest.Assert.@equals("    Lorem ipsum\n    dolor sit amet,\n    consectetur\n    adipisicing\n    elit, sed do\n    eiusmod tempor\n    incididunt ut\n    labore et dolore\n    magna aliqua. Ut\n    enim ad minim\n    veniam, quis\n    nostrud\n    exercitation\n    ullamco laboris\n    nisi ut aliquip\n    ex ea commodo\n    consequat.", global::thx.Strings.wrapColumns("Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.", new global::haxe.lang.Null<int>(20, true), "    ", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWrapColumn", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (183) )}));
				}
				
			}
		}
		
		
		public virtual void testWrapColumnPreserveNewLines() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("Lorem ipsum dolor\nsit amet,\n\nconsectetur\nadipisicing elit", global::thx.Strings.wrapColumns("Lorem ipsum dolor sit amet,\n\nconsectetur adipisicing elit", new global::haxe.lang.Null<int>(18, true), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWrapColumnPreserveNewLines", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (208) )}));
				}
				
			}
		}
		
		
		public virtual void testWrapColumnLong() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("aaaaaaaaaa\naaaa\naaa aa", global::thx.Strings.wrapColumns("aaaaaaaaaa aaaa aaa aa", new global::haxe.lang.Null<int>(6, true), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testWrapColumnLong", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (216) )}));
				}
				
			}
		}
		
		
		public virtual void testRepeat() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("XyXyXy", global::thx.Strings.repeat("Xy", 3), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRepeat", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (224) )}));
				}
				
			}
		}
		
		
		public virtual void testUpTo() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("abcdef", global::thx.Strings.upTo("abcdef", "x"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUpTo", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (229) )}));
					global::utest.Assert.@equals("ab", global::thx.Strings.upTo("abcdef", "cd"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUpTo", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (230) )}));
				}
				
			}
		}
		
		
		public virtual void testFrom() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("", global::thx.Strings.@from("abcdef", "x"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrom", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (235) )}));
					global::utest.Assert.@equals("cdef", global::thx.Strings.@from("abcdef", "cd"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFrom", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (236) )}));
				}
				
			}
		}
		
		
		public virtual void testAfter() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("", global::thx.Strings.after("abcdef", "x"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAfter", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (241) )}));
					global::utest.Assert.@equals("ef", global::thx.Strings.after("abcdef", "cd"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAfter", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (242) )}));
				}
				
			}
		}
		
		
		public virtual void testStripTags() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("a code; x", global::thx.Strings.stripTags("a<br/> <script src=\"aaa\">code;</script> x"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStripTags", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (247) )}));
				}
				
			}
		}
		
		
		public virtual void testLtrim() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("abcde", global::thx.Strings.trimCharsLeft("abcde", "x"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLtrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (252) )}));
					global::utest.Assert.@equals("de", global::thx.Strings.trimCharsLeft("abcde", "cba"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLtrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (253) )}));
					global::utest.Assert.@equals("abcde", global::thx.Strings.trimCharsLeft("abcde", "b"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLtrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (254) )}));
					global::utest.Assert.@equals("", global::thx.Strings.trimCharsLeft("/", "/"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLtrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (256) )}));
				}
				
			}
		}
		
		
		public virtual void testRtrim() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("abcde", global::thx.Strings.trimCharsRight("abcde", "x"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRtrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (261) )}));
					global::utest.Assert.@equals("ab", global::thx.Strings.trimCharsRight("abcde", "ced"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRtrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (262) )}));
					global::utest.Assert.@equals("abcde", global::thx.Strings.trimCharsRight("abcde", "d"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRtrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (263) )}));
					global::utest.Assert.@equals("", global::thx.Strings.trimCharsRight("/", "/"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRtrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (265) )}));
				}
				
			}
		}
		
		
		public virtual void testTrim() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("abcde", global::thx.Strings.trimCharsRight(global::thx.Strings.trimCharsLeft("abcde", "x"), "x"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (270) )}));
					global::utest.Assert.@equals("cd", global::thx.Strings.trimCharsRight(global::thx.Strings.trimCharsLeft("abcde", "abe"), "abe"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (271) )}));
					global::utest.Assert.@equals("abcde", global::thx.Strings.trimCharsRight(global::thx.Strings.trimCharsLeft("abcde", "bd"), "bd"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (272) )}));
					global::utest.Assert.@equals("", global::thx.Strings.trimCharsRight(global::thx.Strings.trimCharsLeft("/", "/"), "/"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrim", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (274) )}));
				}
				
			}
		}
		
		
		public virtual void testToArray() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(new global::Array<object>(new object[]{"a", "\u263a", "b", "\u263a", "\u263a", "c", "\u263a", "\u263a", "\u263a"}), global::haxe.lang.StringExt.split("a\u263ab\u263a\u263ac\u263a\u263a\u263a", ""), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToArray", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (281) )}));
				}
				
			}
		}
		
		
		public virtual void testToLines() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(new global::Array<object>(new object[]{"Split", "to", "lines"}), global::thx.Strings.SPLIT_LINES.split("Split\nto\nlines"), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToLines", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (289) )}));
				}
				
			}
		}
		
		
		public virtual void testReverse() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same("\u263a\u263a\u263ac\u263a\u263ab\u263aa", global::thx.Strings.reverse("a\u263ab\u263a\u263ac\u263a\u263a\u263a"), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReverse", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (296) )}));
				}
				
			}
		}
		
		
		public virtual void testOrder() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(global::thx.OrderingImpl.EQ, global::thx._Ord.Ord_Impl_.order<object>(((global::haxe.lang.Function) (global::thx.Strings.order) ), ((object) ("companyId") ), ((object) ("companyId") )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrder", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (301) )}));
					global::utest.Assert.@equals(global::thx.OrderingImpl.LT, global::thx._Ord.Ord_Impl_.order<object>(((global::haxe.lang.Function) (global::thx.Strings.order) ), ((object) ("companyIc") ), ((object) ("companyId") )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrder", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (302) )}));
					global::utest.Assert.@equals(global::thx.OrderingImpl.GT, global::thx._Ord.Ord_Impl_.order<object>(((global::haxe.lang.Function) (global::thx.Strings.order) ), ((object) ("companyId") ), ((object) ("companyIc") )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testOrder", "thx.TestStrings", "TestStrings.hx"}, new int[]{1981972957}, new double[]{((double) (303) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2116234972:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testOrder", 2116234972)) );
					}
					
					
					case 1472538352:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testReverse", 1472538352)) );
					}
					
					
					case 2119112786:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToLines", 2119112786)) );
					}
					
					
					case 786212844:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToArray", 786212844)) );
					}
					
					
					case 1345725012:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTrim", 1345725012)) );
					}
					
					
					case 968096930:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRtrim", 968096930)) );
					}
					
					
					case 1162641820:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLtrim", 1162641820)) );
					}
					
					
					case 356580639:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testStripTags", 356580639)) );
					}
					
					
					case 1722066026:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAfter", 1722066026)) );
					}
					
					
					case 1190472412:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFrom", 1190472412)) );
					}
					
					
					case 1356710440:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUpTo", 1356710440)) );
					}
					
					
					case 527490381:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRepeat", 527490381)) );
					}
					
					
					case 165931470:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testWrapColumnLong", 165931470)) );
					}
					
					
					case 256208061:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testWrapColumnPreserveNewLines", 256208061)) );
					}
					
					
					case 1253218098:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testWrapColumn", 1253218098)) );
					}
					
					
					case 1755247161:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testHumanize", 1755247161)) );
					}
					
					
					case 338723834:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAlphaNum", 338723834)) );
					}
					
					
					case 567376937:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUcwords", 567376937)) );
					}
					
					
					case 30975864:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEllipsisMiddle", 30975864)) );
					}
					
					
					case 2096737219:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEllipsis", 2096737219)) );
					}
					
					
					case 526954423:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDifferAt", 526954423)) );
					}
					
					
					case 1447559301:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUcwordsws", 1447559301)) );
					}
					
					
					case 2054959757:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testHashCode", 2054959757)) );
					}
					
					
					case 2031559387:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testContainsAny", 2031559387)) );
					}
					
					
					case 325419805:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCount", 325419805)) );
					}
					
					
					case 528646289:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testContains", 528646289)) );
					}
					
					
					case 1875783245:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLowerUpperCaseFirst", 1875783245)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 2116234972:
					{
						this.testOrder();
						break;
					}
					
					
					case 1472538352:
					{
						this.testReverse();
						break;
					}
					
					
					case 2119112786:
					{
						this.testToLines();
						break;
					}
					
					
					case 786212844:
					{
						this.testToArray();
						break;
					}
					
					
					case 1345725012:
					{
						this.testTrim();
						break;
					}
					
					
					case 968096930:
					{
						this.testRtrim();
						break;
					}
					
					
					case 1162641820:
					{
						this.testLtrim();
						break;
					}
					
					
					case 356580639:
					{
						this.testStripTags();
						break;
					}
					
					
					case 1722066026:
					{
						this.testAfter();
						break;
					}
					
					
					case 1190472412:
					{
						this.testFrom();
						break;
					}
					
					
					case 1356710440:
					{
						this.testUpTo();
						break;
					}
					
					
					case 527490381:
					{
						this.testRepeat();
						break;
					}
					
					
					case 165931470:
					{
						this.testWrapColumnLong();
						break;
					}
					
					
					case 256208061:
					{
						this.testWrapColumnPreserveNewLines();
						break;
					}
					
					
					case 1253218098:
					{
						this.testWrapColumn();
						break;
					}
					
					
					case 1755247161:
					{
						this.testHumanize();
						break;
					}
					
					
					case 338723834:
					{
						this.testAlphaNum();
						break;
					}
					
					
					case 567376937:
					{
						this.testUcwords();
						break;
					}
					
					
					case 30975864:
					{
						this.testEllipsisMiddle();
						break;
					}
					
					
					case 2096737219:
					{
						this.testEllipsis();
						break;
					}
					
					
					case 526954423:
					{
						this.testDifferAt();
						break;
					}
					
					
					case 1447559301:
					{
						this.testUcwordsws();
						break;
					}
					
					
					case 2054959757:
					{
						this.testHashCode();
						break;
					}
					
					
					case 2031559387:
					{
						this.testContainsAny();
						break;
					}
					
					
					case 325419805:
					{
						this.testCount();
						break;
					}
					
					
					case 528646289:
					{
						this.testContains();
						break;
					}
					
					
					case 1875783245:
					{
						this.testLowerUpperCaseFirst();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_55__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_55__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_55__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("test", a1);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_56__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_56__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_56__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a11 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("test", a11);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_57__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_57__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_57__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a12 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("test", a12);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_58__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_58__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_58__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a13 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("test", a13);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_59__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_59__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_59__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a14 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("test", a14);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_60__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_60__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_60__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a15 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("test", a15);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_61__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_61__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_61__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a16 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("test", a16);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_62__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_62__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_62__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a17 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("test", a17);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_63__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_63__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_63__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a18 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("test", a18);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_64__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_64__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_64__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a19 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("one two three", a19);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_65__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_65__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_65__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a110 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("one two three", a110);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestStrings_testContainsAny_66__Fun : global::haxe.lang.Function {
		
		public TestStrings_testContainsAny_66__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestStrings_testContainsAny_66__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a111 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains("one two three", a111);
		}
		
		
	}
}


