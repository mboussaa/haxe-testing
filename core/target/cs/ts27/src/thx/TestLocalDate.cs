// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestLocalDate : global::haxe.lang.HxObject {
		
		public TestLocalDate(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestLocalDate(int i) {
			global::thx.TestLocalDate.__hx_ctor_thx_TestLocalDate(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestLocalDate(global::thx.TestLocalDate __temp_me143, int i) {
			unchecked {
				__temp_me143.tomorrow = global::thx._LocalDate.LocalDate_Impl_.create(2015, 7, 27);
				__temp_me143.date = global::thx._LocalDate.LocalDate_Impl_.create(2015, 7, 26);
				__temp_me143.x = i;
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestLocalDate(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestLocalDate(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public int date;
		
		public int tomorrow;
		
		public virtual void testCreate() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(2015, global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 2015 but got ", global::haxe.lang.Runtime.toString(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR))), " for year"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
					global::utest.Assert.@equals(7, global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 7 but got ", global::haxe.lang.Runtime.toString(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH))), " for month"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					global::utest.Assert.@equals(26, global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected 26 but got ", global::haxe.lang.Runtime.toString(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this.date) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY))), " for day"), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
					global::utest.Assert.@equals(((int) (0) ), global::thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this.date), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
					global::haxe.lang.Function __temp_stmt11 = ((global::haxe.lang.Function) (( (( global::thx.TestLocalDate_testCreate_36__Fun.__hx_current != null )) ? (global::thx.TestLocalDate_testCreate_36__Fun.__hx_current) : (global::thx.TestLocalDate_testCreate_36__Fun.__hx_current = ((global::thx.TestLocalDate_testCreate_36__Fun) (new global::thx.TestLocalDate_testCreate_36__Fun()) )) )) );
					object __temp_stmt12 = null;
					{
						int __temp_odecl1 = global::thx._LocalDate.LocalDate_Impl_.fromString("2014-12-01");
						int __temp_odecl2 = global::thx._LocalDate.LocalDate_Impl_.create(2014, 12, 1);
						__temp_stmt12 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{1076899448, 1291438162}, new double[]{((double) (__temp_odecl1) ), ((double) (__temp_odecl2) )});
					}
					
					object __temp_stmt13 = null;
					{
						int __temp_odecl3 = global::thx._LocalDate.LocalDate_Impl_.fromString("2015-03-01");
						int __temp_odecl4 = global::thx._LocalDate.LocalDate_Impl_.create(2014, 15, 1);
						__temp_stmt13 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{1076899448, 1291438162}, new double[]{((double) (__temp_odecl3) ), ((double) (__temp_odecl4) )});
					}
					
					object __temp_stmt14 = null;
					{
						int __temp_odecl5 = global::thx._LocalDate.LocalDate_Impl_.fromString("2013-11-01");
						int __temp_odecl6 = global::thx._LocalDate.LocalDate_Impl_.create(2014, -1, 1);
						__temp_stmt14 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{1076899448, 1291438162}, new double[]{((double) (__temp_odecl5) ), ((double) (__temp_odecl6) )});
					}
					
					object __temp_stmt15 = null;
					{
						int __temp_odecl7 = global::thx._LocalDate.LocalDate_Impl_.fromString("2014-03-04");
						int __temp_odecl8 = global::thx._LocalDate.LocalDate_Impl_.create(2014, 2, 32);
						__temp_stmt15 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{1076899448, 1291438162}, new double[]{((double) (__temp_odecl7) ), ((double) (__temp_odecl8) )});
					}
					
					object __temp_stmt16 = null;
					{
						int __temp_odecl9 = global::thx._LocalDate.LocalDate_Impl_.fromString("2013-12-31");
						int __temp_odecl10 = global::thx._LocalDate.LocalDate_Impl_.create(2014, 1, 0);
						__temp_stmt16 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{1076899448, 1291438162}, new double[]{((double) (__temp_odecl9) ), ((double) (__temp_odecl10) )});
					}
					
					new global::Array<object>(new object[]{__temp_stmt12, __temp_stmt13, __temp_stmt14, __temp_stmt15, __temp_stmt16}).map<object>(__temp_stmt11);
				}
				
			}
		}
		
		
		public virtual void testToString() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("2015-07-26", global::thx._LocalDate.LocalDate_Impl_.toString(this.date), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToString", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
					global::utest.Assert.@equals("1-01-01", global::thx._LocalDate.LocalDate_Impl_.toString(((int) (0) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToString", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
				}
				
			}
		}
		
		
		public virtual void testEquals() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(( ((int) (this.date) ) == ((int) (this.date) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
					global::utest.Assert.isTrue(( ((int) (this.date) ) != ((int) (this.tomorrow) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEquals", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				}
				
			}
		}
		
		
		public virtual void testCompare() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isFalse(( ( ((int) (this.date) ) - ((int) (this.date) ) ) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
					global::utest.Assert.isTrue(( ( ((int) (this.date) ) - ((int) (this.date) ) ) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
					global::utest.Assert.isFalse(( ( ((int) (this.date) ) - ((int) (this.date) ) ) < 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
					global::utest.Assert.isTrue(( ( ((int) (this.date) ) - ((int) (this.date) ) ) <= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (58) )}));
					global::utest.Assert.isFalse(( ( ((int) (this.date) ) - ((int) (this.tomorrow) ) ) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
					global::utest.Assert.isFalse(( ( ((int) (this.date) ) - ((int) (this.tomorrow) ) ) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
					global::utest.Assert.isTrue(( ( ((int) (this.date) ) - ((int) (this.tomorrow) ) ) < 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (62) )}));
					global::utest.Assert.isTrue(( ( ((int) (this.date) ) - ((int) (this.tomorrow) ) ) <= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
					global::utest.Assert.isTrue(( ( ((int) (this.tomorrow) ) - ((int) (this.date) ) ) > 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (65) )}));
					global::utest.Assert.isTrue(( ( ((int) (this.tomorrow) ) - ((int) (this.date) ) ) >= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (66) )}));
					global::utest.Assert.isFalse(( ( ((int) (this.tomorrow) ) - ((int) (this.date) ) ) < 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
					global::utest.Assert.isFalse(( ( ((int) (this.tomorrow) ) - ((int) (this.date) ) ) <= 0 ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCompare", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (68) )}));
				}
				
			}
		}
		
		
		public virtual void testFromToDate() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					int this1 = this.date;
					int d = global::thx._LocalDate.LocalDate_Impl_.fromDate(new global::Date(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) - 1 ), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY), 0, 0, 0));
					global::utest.Assert.isTrue(( ((int) (this.date) ) == ((int) (d) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._LocalDate.LocalDate_Impl_.toString(this.date)), " but got "), global::thx._LocalDate.LocalDate_Impl_.toString(((int) (d) ))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToDate", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (76) )}));
				}
				
			}
		}
		
		
		public virtual void testFromToTime() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					int this1 = this.date;
					global::Date _this = new global::Date(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) - 1 ), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY), 0, 0, 0);
					int date2 = global::thx._LocalDate.LocalDate_Impl_.fromTime(( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ));
					global::utest.Assert.isTrue(( ((int) (this.date) ) == ((int) (date2) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._LocalDate.LocalDate_Impl_.toString(this.date)), " but got "), global::thx._LocalDate.LocalDate_Impl_.toString(date2)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToTime", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
				}
				
			}
		}
		
		
		public virtual void testFromToString() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(( ((int) (this.date) ) == ((int) (global::thx._LocalDate.LocalDate_Impl_.fromString(global::thx._LocalDate.LocalDate_Impl_.toString(this.date))) ) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
					global::utest.Assert.@equals("-1-07-27", global::thx._LocalDate.LocalDate_Impl_.toString(global::thx._LocalDate.LocalDate_Impl_.fromString("0-06-07")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (91) )}));
					global::utest.Assert.@equals("-1-06-07", global::thx._LocalDate.LocalDate_Impl_.toString(global::thx._LocalDate.LocalDate_Impl_.fromString("-1-06-07")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (92) )}));
					global::utest.Assert.@equals("1-06-07", global::thx._LocalDate.LocalDate_Impl_.toString(global::thx._LocalDate.LocalDate_Impl_.fromString("1-06-07")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (93) )}));
					global::utest.Assert.@equals("-2014-01-01", global::thx._LocalDate.LocalDate_Impl_.toString(global::thx._LocalDate.LocalDate_Impl_.fromString("-2014-01-01")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromToString", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (94) )}));
				}
				
			}
		}
		
		
		public virtual void testAdd() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					int d = ((int) (( ((int) (global::thx._LocalDate.LocalDate_Impl_.addMonths(global::thx._LocalDate.LocalDate_Impl_.addMonths(((int) (this.date) ), 24), 9)) ) + 10 )) );
					global::utest.Assert.isTrue(( ((int) (d) ) == ((int) (global::thx._LocalDate.LocalDate_Impl_.fromString("2018-05-06")) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", "2018-05-06"), " but got "), global::thx._LocalDate.LocalDate_Impl_.toString(d)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAdd", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (104) )}));
				}
				
			}
		}
		
		
		public virtual void testAddMonth() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					object __temp_stmt15 = null;
					{
						int __temp_odecl1 = global::thx._LocalDate.LocalDate_Impl_.addMonths(this.date, 1);
						int __temp_odecl2 = global::thx._LocalDate.LocalDate_Impl_.fromString("2015-08-26");
						__temp_stmt15 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{101, 116}, new double[]{((double) (__temp_odecl2) ), ((double) (__temp_odecl1) )});
					}
					
					object __temp_stmt16 = null;
					{
						int __temp_odecl3 = global::thx._LocalDate.LocalDate_Impl_.addMonths(this.date, 0);
						int __temp_odecl4 = global::thx._LocalDate.LocalDate_Impl_.fromString("2015-07-26");
						__temp_stmt16 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{101, 116}, new double[]{((double) (__temp_odecl4) ), ((double) (__temp_odecl3) )});
					}
					
					object __temp_stmt17 = null;
					{
						int __temp_odecl5 = global::thx._LocalDate.LocalDate_Impl_.addMonths(this.date, -1);
						int __temp_odecl6 = global::thx._LocalDate.LocalDate_Impl_.fromString("2015-06-26");
						__temp_stmt17 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{101, 116}, new double[]{((double) (__temp_odecl6) ), ((double) (__temp_odecl5) )});
					}
					
					object __temp_stmt18 = null;
					{
						int __temp_odecl7 = global::thx._LocalDate.LocalDate_Impl_.addMonths(this.date, 7);
						int __temp_odecl8 = global::thx._LocalDate.LocalDate_Impl_.fromString("2016-02-26");
						__temp_stmt18 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{101, 116}, new double[]{((double) (__temp_odecl8) ), ((double) (__temp_odecl7) )});
					}
					
					object __temp_stmt19 = null;
					{
						int __temp_odecl9 = global::thx._LocalDate.LocalDate_Impl_.addMonths(this.date, -7);
						int __temp_odecl10 = global::thx._LocalDate.LocalDate_Impl_.fromString("2014-12-26");
						__temp_stmt19 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{101, 116}, new double[]{((double) (__temp_odecl10) ), ((double) (__temp_odecl9) )});
					}
					
					object __temp_stmt20 = null;
					{
						int __temp_odecl11 = global::thx._LocalDate.LocalDate_Impl_.addMonths(this.date, 14);
						int __temp_odecl12 = global::thx._LocalDate.LocalDate_Impl_.fromString("2016-09-26");
						__temp_stmt20 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{101, 116}, new double[]{((double) (__temp_odecl12) ), ((double) (__temp_odecl11) )});
					}
					
					object __temp_stmt21 = null;
					{
						int __temp_odecl13 = global::thx._LocalDate.LocalDate_Impl_.addMonths(this.date, -14);
						int __temp_odecl14 = global::thx._LocalDate.LocalDate_Impl_.fromString("2014-05-26");
						__temp_stmt21 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{101, 116}, new double[]{((double) (__temp_odecl14) ), ((double) (__temp_odecl13) )});
					}
					
					global::Array<object> tests = new global::Array<object>(new object[]{__temp_stmt15, __temp_stmt16, __temp_stmt17, __temp_stmt18, __temp_stmt19, __temp_stmt20, __temp_stmt21});
					{
						int _g2 = 0;
						while (( _g2 < tests.length )) {
							object test = tests[_g2];
							 ++ _g2;
							global::utest.Assert.isTrue(( ((int) (global::haxe.lang.Runtime.getField_f(test, "t", 116, true)) ) == ((int) (global::haxe.lang.Runtime.getField_f(test, "e", 101, true)) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expexted ", global::thx._LocalDate.LocalDate_Impl_.toString(((int) (global::haxe.lang.Runtime.getField_f(test, "e", 101, true)) ))), " but got "), global::thx._LocalDate.LocalDate_Impl_.toString(((int) (global::haxe.lang.Runtime.getField_f(test, "t", 116, true)) ))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAddMonth", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (121) )}));
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void testSnapNext() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.assertSnapNext("2014-01-01", "2014-01-01", global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (127) )}));
					this.assertSnapNext("2014-01-01", "2014-01-01", global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (128) )}));
					this.assertSnapNext("2014-01-02", "2014-01-01", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (129) )}));
					this.assertSnapNext("2014-01-01", "2013-12-31", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (130) )}));
					this.assertSnapNext("2014-12-21", "2014-12-17", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
					this.assertSnapNext("2014-12-21", "2014-12-18", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (132) )}));
					this.assertSnapNext("2015-01-01", "2014-12-12", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (133) )}));
					this.assertSnapNext("2015-01-01", "2014-12-18", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (134) )}));
					this.assertSnapNext("2015-01-01", "2014-05-12", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (135) )}));
					this.assertSnapNext("2015-01-01", "2014-12-18", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapNext", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (136) )}));
				}
				
			}
		}
		
		
		public virtual void testSnapPrev() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.assertSnapPrev("2013-12-31", "2014-01-01", global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (141) )}));
					this.assertSnapPrev("2013-12-31", "2014-01-01", global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (142) )}));
					this.assertSnapPrev("2013-12-31", "2014-01-01", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (143) )}));
					this.assertSnapPrev("2013-12-30", "2013-12-31", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (144) )}));
					this.assertSnapPrev("2014-12-14", "2014-12-17", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (145) )}));
					this.assertSnapPrev("2014-12-14", "2014-12-18", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (146) )}));
					this.assertSnapPrev("2014-12-01", "2014-12-12", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (147) )}));
					this.assertSnapPrev("2014-12-01", "2014-12-01", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (148) )}));
					this.assertSnapPrev("2014-12-01", "2014-12-18", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (149) )}));
					this.assertSnapPrev("2014-01-01", "2014-05-12", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (150) )}));
					this.assertSnapPrev("2014-01-01", "2014-12-18", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapPrev", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (151) )}));
				}
				
			}
		}
		
		
		public virtual void testSnapTo() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.assertSnapTo("2014-01-01", "2014-01-01", global::thx.TimePeriod.Minute, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (156) )}));
					this.assertSnapTo("2014-01-01", "2014-01-01", global::thx.TimePeriod.Hour, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (157) )}));
					this.assertSnapTo("2014-01-01", "2014-01-01", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (158) )}));
					this.assertSnapTo("2013-12-31", "2013-12-31", global::thx.TimePeriod.Day, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (159) )}));
					this.assertSnapTo("2014-12-14", "2014-12-17", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (160) )}));
					this.assertSnapTo("2014-12-21", "2014-12-18", global::thx.TimePeriod.Week, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (161) )}));
					this.assertSnapTo("2014-12-01", "2014-12-12", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (162) )}));
					this.assertSnapTo("2015-01-01", "2014-12-18", global::thx.TimePeriod.Month, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (163) )}));
					this.assertSnapTo("2014-01-01", "2014-05-12", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (164) )}));
					this.assertSnapTo("2015-01-01", "2014-12-18", global::thx.TimePeriod.Year, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSnapTo", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (165) )}));
				}
				
			}
		}
		
		
		public virtual void assertSnapTo(string expected, string date, global::thx.TimePeriod period, object pos) {
			int t = global::thx._LocalDate.LocalDate_Impl_.snapTo(global::thx._LocalDate.LocalDate_Impl_.fromString(date), period);
			global::utest.Assert.isTrue(( ((int) (global::thx._LocalDate.LocalDate_Impl_.fromString(expected)) ) == ((int) (t) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", date), " to snap to "), expected), " for "), global::Std.@string(period)), " but it is "), global::thx._LocalDate.LocalDate_Impl_.toString(t)), pos);
		}
		
		
		public virtual void assertSnapPrev(string expected, string date, global::thx.TimePeriod period, object pos) {
			int t = global::thx._LocalDate.LocalDate_Impl_.snapPrev(global::thx._LocalDate.LocalDate_Impl_.fromString(date), period);
			global::utest.Assert.isTrue(( ((int) (global::thx._LocalDate.LocalDate_Impl_.fromString(expected)) ) == ((int) (t) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", date), " to snap before "), expected), " for "), global::Std.@string(period)), " but it is "), global::thx._LocalDate.LocalDate_Impl_.toString(t)), pos);
		}
		
		
		public virtual void assertSnapNext(string expected, string date, global::thx.TimePeriod period, object pos) {
			int t = global::thx._LocalDate.LocalDate_Impl_.snapNext(global::thx._LocalDate.LocalDate_Impl_.fromString(date), period);
			global::utest.Assert.isTrue(( ((int) (global::thx._LocalDate.LocalDate_Impl_.fromString(expected)) ) == ((int) (t) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", date), " to snap after "), expected), " for "), global::Std.@string(period)), " but it is "), global::thx._LocalDate.LocalDate_Impl_.toString(t)), pos);
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1018962181:
					{
						this.tomorrow = ((int) (@value) );
						return @value;
					}
					
					
					case 1113806382:
					{
						this.date = ((int) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1018962181:
					{
						this.tomorrow = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1113806382:
					{
						this.date = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 325004611:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapNext", 325004611)) );
					}
					
					
					case 347825987:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapPrev", 347825987)) );
					}
					
					
					case 2122013131:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertSnapTo", 2122013131)) );
					}
					
					
					case 713395287:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapTo", 713395287)) );
					}
					
					
					case 2107659471:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapPrev", 2107659471)) );
					}
					
					
					case 2084838095:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSnapNext", 2084838095)) );
					}
					
					
					case 2026116049:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAddMonth", 2026116049)) );
					}
					
					
					case 1035493615:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAdd", 1035493615)) );
					}
					
					
					case 952497064:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromToString", 952497064)) );
					}
					
					
					case 1710056228:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromToTime", 1710056228)) );
					}
					
					
					case 1532226885:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromToDate", 1532226885)) );
					}
					
					
					case 1077020275:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCompare", 1077020275)) );
					}
					
					
					case 1491547185:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEquals", 1491547185)) );
					}
					
					
					case 729151262:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToString", 729151262)) );
					}
					
					
					case 352562414:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCreate", 352562414)) );
					}
					
					
					case 1018962181:
					{
						return this.tomorrow;
					}
					
					
					case 1113806382:
					{
						return this.date;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1018962181:
					{
						return ((double) (this.tomorrow) );
					}
					
					
					case 1113806382:
					{
						return ((double) (this.date) );
					}
					
					
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 325004611:
					{
						this.assertSnapNext(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 347825987:
					{
						this.assertSnapPrev(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 2122013131:
					{
						this.assertSnapTo(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]), ((global::thx.TimePeriod) (dynargs[2]) ), dynargs[3]);
						break;
					}
					
					
					case 713395287:
					{
						this.testSnapTo();
						break;
					}
					
					
					case 2107659471:
					{
						this.testSnapPrev();
						break;
					}
					
					
					case 2084838095:
					{
						this.testSnapNext();
						break;
					}
					
					
					case 2026116049:
					{
						this.testAddMonth();
						break;
					}
					
					
					case 1035493615:
					{
						this.testAdd();
						break;
					}
					
					
					case 952497064:
					{
						this.testFromToString();
						break;
					}
					
					
					case 1710056228:
					{
						this.testFromToTime();
						break;
					}
					
					
					case 1532226885:
					{
						this.testFromToDate();
						break;
					}
					
					
					case 1077020275:
					{
						this.testCompare();
						break;
					}
					
					
					case 1491547185:
					{
						this.testEquals();
						break;
					}
					
					
					case 729151262:
					{
						this.testToString();
						break;
					}
					
					
					case 352562414:
					{
						this.testCreate();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("tomorrow");
			baseArr.push("date");
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestLocalDate_testCreate_36__Fun : global::haxe.lang.Function {
		
		public TestLocalDate_testCreate_36__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestLocalDate_testCreate_36__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object o = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				global::utest.Assert.isTrue(( ((int) (global::haxe.lang.Runtime.getField_f(o, "expected", 1076899448, true)) ) == ((int) (global::haxe.lang.Runtime.getField_f(o, "test", 1291438162, true)) ) ), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx._LocalDate.LocalDate_Impl_.toString(((int) (global::haxe.lang.Runtime.getField_f(o, "expected", 1076899448, true)) ))), " but was  "), global::thx._LocalDate.LocalDate_Impl_.toString(((int) (global::haxe.lang.Runtime.getField_f(o, "test", 1291438162, true)) ))), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestLocalDate", "TestLocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
				return null;
			}
		}
		
		
	}
}


