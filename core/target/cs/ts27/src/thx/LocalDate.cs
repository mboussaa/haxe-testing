// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._LocalDate {
	public sealed class LocalDate_Impl_ {
		
		static LocalDate_Impl_() {
			unchecked {
				global::thx._LocalDate.LocalDate_Impl_.millisPerSecond = ((double) (((int) (1000) )) );
				global::thx._LocalDate.LocalDate_Impl_.millisPerMinute = ( global::thx._LocalDate.LocalDate_Impl_.millisPerSecond * 60 );
				global::thx._LocalDate.LocalDate_Impl_.millisPerHour = ( global::thx._LocalDate.LocalDate_Impl_.millisPerMinute * 60 );
				global::thx._LocalDate.LocalDate_Impl_.millisPerDay = ( global::thx._LocalDate.LocalDate_Impl_.millisPerHour * 24 );
				global::thx._LocalDate.LocalDate_Impl_.daysPerYear = 365;
				global::thx._LocalDate.LocalDate_Impl_.daysPer4Years = ( ( global::thx._LocalDate.LocalDate_Impl_.daysPerYear * 4 ) + 1 );
				global::thx._LocalDate.LocalDate_Impl_.daysPer100Years = ( ( global::thx._LocalDate.LocalDate_Impl_.daysPer4Years * 25 ) - 1 );
				global::thx._LocalDate.LocalDate_Impl_.daysPer400Years = ( ( global::thx._LocalDate.LocalDate_Impl_.daysPer100Years * 4 ) + 1 );
				global::thx._LocalDate.LocalDate_Impl_.unixEpochDays = ( ( ( ( global::thx._LocalDate.LocalDate_Impl_.daysPer400Years * 4 ) + ( global::thx._LocalDate.LocalDate_Impl_.daysPer100Years * 3 ) ) + ( global::thx._LocalDate.LocalDate_Impl_.daysPer4Years * 17 ) ) + global::thx._LocalDate.LocalDate_Impl_.daysPerYear );
				global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR = 0;
				global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY_OF_YEAR = 1;
				global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH = 2;
				global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY = 3;
				global::thx._LocalDate.LocalDate_Impl_.daysToMonth365 = new global::Array<int>(new int[]{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365});
				global::thx._LocalDate.LocalDate_Impl_.daysToMonth366 = new global::Array<int>(new int[]{0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366});
			}
		}
		
		
		public static double millisPerSecond;
		
		public static double millisPerMinute;
		
		public static double millisPerHour;
		
		public static double millisPerDay;
		
		public static int daysPerYear;
		
		public static int daysPer4Years;
		
		public static int daysPer100Years;
		
		public static int daysPer400Years;
		
		public static int unixEpochDays;
		
		public static int DATE_PART_YEAR;
		
		public static int DATE_PART_DAY_OF_YEAR;
		
		public static int DATE_PART_MONTH;
		
		public static int DATE_PART_DAY;
		
		public static global::Array<int> daysToMonth365;
		
		public static global::Array<int> daysToMonth366;
		
		public static int now() {
			return global::thx._LocalDate.LocalDate_Impl_.fromDate(new global::Date(((global::System.DateTime) (global::System.DateTime.Now) )));
		}
		
		
		public static int fromInt(int days) {
			return ((int) (days) );
		}
		
		
		public static int fromDate(global::Date date) {
			return global::thx._LocalDate.LocalDate_Impl_.fromTime(( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (date.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ));
		}
		
		
		public static int fromTime(double timestamp) {
			return ((int) (( ((int) (( timestamp / global::thx._LocalDate.LocalDate_Impl_.millisPerDay )) ) + global::thx._LocalDate.LocalDate_Impl_.unixEpochDays )) );
		}
		
		
		public static int fromString(string s) {
			unchecked {
				if (string.Equals(s, null)) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("null String cannot be parsed to LocalDate", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromString", "thx._LocalDate.LocalDate_Impl_", "LocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (66) )})));
				}
				
				global::EReg pattern = new global::EReg("^([-])?(\\d+)[-](\\d{2})[-](\\d{2})$", "");
				if ( ! (pattern.match(s)) ) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("unable to parse DateTime string: \"", s), "\""), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromString", "thx._LocalDate.LocalDate_Impl_", "LocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (69) )})));
				}
				
				int date = global::thx._LocalDate.LocalDate_Impl_.create((global::Std.parseInt(pattern.matched(2))).@value, (global::Std.parseInt(pattern.matched(3))).@value, (global::Std.parseInt(pattern.matched(4))).@value);
				if (string.Equals(pattern.matched(1), "-")) {
					return ((int) ( - (((int) (date) )) ) );
				}
				
				return date;
			}
		}
		
		
		public static int compare(int a, int b) {
			return ( ((int) (a) ) - ((int) (b) ) );
		}
		
		
		public static int create(int year, int month, int day) {
			return ((int) (global::thx._LocalDate.LocalDate_Impl_.dateToDays(year, month, day)) );
		}
		
		
		public static int dateToDays(int year, int month, int day) {
			unchecked {
				int[] month1 = new int[]{month};
				int[] year1 = new int[]{year};
				global::haxe.lang.Function fixMonthYear = new global::thx._LocalDate.LocalDate_Impl__dateToDays_93__Fun(year1, month1);
				while (( day < 0 )) {
					month1[0]--;
					fixMonthYear.__hx_invoke0_o();
					day += global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
				}
				
				fixMonthYear.__hx_invoke0_o();
				int days = default(int);
				while (true) {
					days = global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
					if ( ! ((( day > days ))) ) {
						break;
					}
					
					month1[0]++;
					fixMonthYear.__hx_invoke0_o();
					day -= days;
				}
				
				if (( day == 0 )) {
					month1[0] -= 1;
					fixMonthYear.__hx_invoke0_o();
					day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
				}
				
				fixMonthYear.__hx_invoke0_o();
				return global::thx._LocalDate.LocalDate_Impl_.rawDateToDays(year1[0], month1[0], day);
			}
		}
		
		
		public static int rawDateToDays(int year, int month, int day) {
			unchecked {
				global::Array<int> days = ( (global::thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(year)) ? (global::thx._LocalDate.LocalDate_Impl_.daysToMonth366) : (global::thx._LocalDate.LocalDate_Impl_.daysToMonth365) );
				if (( ( day >= 1 ) && ( day <= ( days[month] - days[( month - 1 )] ) ) )) {
					int y = ( year - 1 );
					return ( ( ( ( ( ( ( y * 365 ) + ((int) (( y / 4 )) ) ) - ((int) (( y / 100 )) ) ) + ((int) (( y / 400 )) ) ) + days[( month - 1 )] ) + day ) - 1 );
				}
				
				throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("bad year-month-day ", global::haxe.lang.Runtime.toString(year)), "-"), global::haxe.lang.Runtime.toString(month)), "-"), global::haxe.lang.Runtime.toString(day)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"rawDateToDays", "thx._LocalDate.LocalDate_Impl_", "LocalDate.hx"}, new int[]{1981972957}, new double[]{((double) (141) )})));
			}
		}
		
		
		public static global::Array<int> daysRange(int start, int end) {
			unchecked {
				if (( ( ((int) (end) ) - ((int) (start) ) ) < 0 )) {
					return new global::Array<int>(new int[]{});
				}
				
				global::Array<int> days = new global::Array<int>(new int[]{});
				while (( ((int) (start) ) != ((int) (end) ) )) {
					days.push(start);
					start = global::thx._LocalDate.LocalDate_Impl_.jump(((int) (start) ), global::thx.TimePeriod.Day, 1);
				}
				
				days.push(end);
				return days;
			}
		}
		
		
		public static int getDatePart(int this1, int part) {
			unchecked {
				int n = ((int) (this1) );
				int y400 = ((int) (( this1 / global::thx._LocalDate.LocalDate_Impl_.daysPer400Years )) );
				n = ( this1 - ( y400 * global::thx._LocalDate.LocalDate_Impl_.daysPer400Years ) );
				int y100 = ((int) (( n / global::thx._LocalDate.LocalDate_Impl_.daysPer100Years )) );
				if (( y100 == 4 )) {
					y100 = 3;
				}
				
				n -= ( y100 * global::thx._LocalDate.LocalDate_Impl_.daysPer100Years );
				int y4 = ((int) (( n / global::thx._LocalDate.LocalDate_Impl_.daysPer4Years )) );
				n -= ( y4 * global::thx._LocalDate.LocalDate_Impl_.daysPer4Years );
				int y1 = ((int) (( n / global::thx._LocalDate.LocalDate_Impl_.daysPerYear )) );
				if (( y1 == 4 )) {
					y1 = 3;
				}
				
				if (( part == global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR )) {
					return ( ( ( ( ( y400 * 400 ) + ( y100 * 100 ) ) + ( y4 * 4 ) ) + y1 ) + 1 );
				}
				
				n -= ( y1 * global::thx._LocalDate.LocalDate_Impl_.daysPerYear );
				if (( part == global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY_OF_YEAR )) {
					return ( n + 1 );
				}
				
				global::Array<int> adays = ( (( ( y1 == 3 ) && (( ( y4 != 24 ) || ( y100 == 3 ) )) )) ? (global::thx._LocalDate.LocalDate_Impl_.daysToMonth366) : (global::thx._LocalDate.LocalDate_Impl_.daysToMonth365) );
				int m = ( n >> 6 );
				while (( n >= adays[m] )) {
					 ++ m;
				}
				
				if (( part == global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH )) {
					return m;
				}
				
				return ( ( n - adays[( m - 1 )] ) + 1 );
			}
		}
		
		
		public static int _new(int days) {
			return ((int) (days) );
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		public static int min(int this1, int other) {
			if (( global::thx._LocalDate.LocalDate_Impl_.compareTo(this1, other) <= 0 )) {
				return ((int) (this1) );
			}
			else {
				return other;
			}
			
		}
		
		
		public static int max(int this1, int other) {
			if (( global::thx._LocalDate.LocalDate_Impl_.compareTo(this1, other) >= 0 )) {
				return ((int) (this1) );
			}
			else {
				return other;
			}
			
		}
		
		
		public static int jump(int this1, global::thx.TimePeriod period, int amount) {
			unchecked {
				int sec = 0;
				int min = 0;
				int hr = 0;
				int day = global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY);
				int mon = global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH);
				int yr = global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR);
				switch (period.index) {
					case 0:
					{
						sec = amount;
						break;
					}
					
					
					case 1:
					{
						min = amount;
						break;
					}
					
					
					case 2:
					{
						hr = amount;
						break;
					}
					
					
					case 3:
					{
						day += amount;
						break;
					}
					
					
					case 4:
					{
						day += ( amount * 7 );
						break;
					}
					
					
					case 5:
					{
						mon += amount;
						break;
					}
					
					
					case 6:
					{
						yr += amount;
						break;
					}
					
					
				}
				
				long x = ((long) (( ((long) (global::thx._Time.Time_Impl_.create(hr, new global::haxe.lang.Null<int>(min, true), new global::haxe.lang.Null<int>(sec, true), default(global::haxe.lang.Null<int>))) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return global::thx._LocalDate.LocalDate_Impl_.create(yr, mon, ( day + ((int) (global::System.Math.Floor(((double) (( ((double) (((int) (((long) (x) )) )) ) / 7 )) ))) ) ));
			}
		}
		
		
		public static int daysInThisMonth(int this1) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH));
		}
		
		
		public static int prevYear(int this1) {
			unchecked {
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Year, -1);
			}
		}
		
		
		public static int nextYear(int this1) {
			unchecked {
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Year, 1);
			}
		}
		
		
		public static int prevMonth(int this1) {
			unchecked {
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Month, -1);
			}
		}
		
		
		public static int nextMonth(int this1) {
			unchecked {
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Month, 1);
			}
		}
		
		
		public static int prevWeek(int this1) {
			unchecked {
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Week, -1);
			}
		}
		
		
		public static int nextWeek(int this1) {
			unchecked {
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Week, 1);
			}
		}
		
		
		public static int prevDay(int this1) {
			unchecked {
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Day, -1);
			}
		}
		
		
		public static int nextDay(int this1) {
			unchecked {
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Day, 1);
			}
		}
		
		
		public static int snapToWeekDay(int this1, int weekday, global::haxe.lang.Null<int> firstDayOfWk) {
			unchecked {
				global::haxe.lang.Null<int> __temp_firstDayOfWk130 = ( ( ! (firstDayOfWk.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (firstDayOfWk) );
				int d = global::thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
				int s = weekday;
				if (( s < (__temp_firstDayOfWk130).@value )) {
					s += 7;
				}
				
				if (( d < (__temp_firstDayOfWk130).@value )) {
					d += 7;
				}
				
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Day, ( s - d ));
			}
		}
		
		
		public static int snapNextWeekDay(int this1, int weekday) {
			unchecked {
				int d = global::thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
				int s = weekday;
				if (( s < d )) {
					s += 7;
				}
				
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Day, ( s - d ));
			}
		}
		
		
		public static int snapPrevWeekDay(int this1, int weekday) {
			unchecked {
				int d = global::thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
				int s = weekday;
				if (( s > d )) {
					s -= 7;
				}
				
				return global::thx._LocalDate.LocalDate_Impl_.jump(this1, global::thx.TimePeriod.Day, ( s - d ));
			}
		}
		
		
		public static int snapNext(int this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					case 1:
					case 2:
					{
						return ((int) (this1) );
					}
					
					
					case 3:
					{
						return ((int) (( ((int) (this1) ) + 1 )) );
					}
					
					
					case 4:
					{
						int wd = global::thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
						return ((int) (( ( ((int) (this1) ) + 7 ) - wd )) );
					}
					
					
					case 5:
					{
						return global::thx._LocalDate.LocalDate_Impl_.create(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) + 1 ), 1);
					}
					
					
					case 6:
					{
						return global::thx._LocalDate.LocalDate_Impl_.create(( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR) + 1 ), 1, 1);
					}
					
					
				}
				
				return default(int);
			}
		}
		
		
		public static int snapPrev(int this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					case 1:
					case 2:
					case 3:
					{
						return ((int) (( ((int) (this1) ) - 1 )) );
					}
					
					
					case 4:
					{
						int wd = global::thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
						return ((int) (( ((int) (this1) ) - wd )) );
					}
					
					
					case 5:
					{
						return global::thx._LocalDate.LocalDate_Impl_.create(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), 1);
					}
					
					
					case 6:
					{
						return global::thx._LocalDate.LocalDate_Impl_.create(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), 1, 1);
					}
					
					
				}
				
				return default(int);
			}
		}
		
		
		public static int snapTo(int this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					case 1:
					case 2:
					case 3:
					{
						return ((int) (this1) );
					}
					
					
					case 4:
					{
						int wd = global::thx._LocalDate.LocalDate_Impl_.get_dayOfWeek(this1);
						return global::thx._LocalDate.LocalDate_Impl_.create(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), ( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY) + (( (( wd <= 3 )) ? ( - (wd) ) : (( 7 - wd )) )) ));
					}
					
					
					case 5:
					{
						return global::thx._LocalDate.LocalDate_Impl_.create(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) + (( (( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY) > global::Math.round(( ((double) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH))) ) / 2 )) )) ? (1) : (0) )) ), 1);
					}
					
					
					case 6:
					{
						int mod = ( (( ( ((int) (this1) ) - ((int) (global::thx._LocalDate.LocalDate_Impl_.create(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), 6, 2)) ) ) > 0 )) ? (1) : (0) );
						return global::thx._LocalDate.LocalDate_Impl_.create(( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR) + mod ), 1, 1);
					}
					
					
				}
				
				return default(int);
			}
		}
		
		
		public static bool sameYear(int this1, int other) {
			return ( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR) == global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (other) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR) );
		}
		
		
		public static bool sameMonth(int this1, int other) {
			if (global::thx._LocalDate.LocalDate_Impl_.sameYear(this1, other)) {
				return ( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) == global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (other) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) );
			}
			else {
				return false;
			}
			
		}
		
		
		public static int withYear(int this1, int year) {
			return global::thx._LocalDate.LocalDate_Impl_.create(year, global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY));
		}
		
		
		public static int withMonth(int this1, int month) {
			return global::thx._LocalDate.LocalDate_Impl_.create(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), month, global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY));
		}
		
		
		public static int withDay(int this1, int day) {
			return global::thx._LocalDate.LocalDate_Impl_.create(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), day);
		}
		
		
		public static int @add(int this1, int days) {
			return ((int) (( this1 + days )) );
		}
		
		
		public static int subtract(int this1, int days) {
			return ((int) (( this1 - days )) );
		}
		
		
		public static int subtractDate(int this1, int date) {
			return ( ((int) (this1) ) - ((int) (date) ) );
		}
		
		
		public static int addDays(int this1, int days) {
			return ((int) (( this1 + days )) );
		}
		
		
		public static int addMonths(int this1, int months) {
			return global::thx._LocalDate.LocalDate_Impl_.create(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) + months ), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY));
		}
		
		
		public static int addYears(int this1, int years) {
			unchecked {
				return global::thx._LocalDate.LocalDate_Impl_.addMonths(this1, ( years * 12 ));
			}
		}
		
		
		public static int compareTo(int this1, int other) {
			return ( ((int) (this1) ) - ((int) (other) ) );
		}
		
		
		public static bool equalsTo(int this1, int that) {
			return ( ((int) (this1) ) == ((int) (that) ) );
		}
		
		
		public static bool @equals(int self, int that) {
			return ( ((int) (self) ) == ((int) (that) ) );
		}
		
		
		public static bool notEqualsTo(int this1, int that) {
			return ( ((int) (this1) ) != ((int) (that) ) );
		}
		
		
		public static bool notEquals(int self, int that) {
			return ( ((int) (self) ) != ((int) (that) ) );
		}
		
		
		public static bool nearEqualsTo(int this1, int other, long span) {
			unchecked {
				int v = ( ((int) (other) ) - ((int) (this1) ) );
				int days = ( (( v < 0 )) ? ( - (v) ) : (v) );
				long x = ((long) (( ((long) (global::thx._Time.Time_Impl_.abs(span)) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return ( days <= ((int) (((long) (x) )) ) );
			}
		}
		
		
		public static bool greaterThan(int this1, int that) {
			return ( ( ((int) (this1) ) - ((int) (that) ) ) > 0 );
		}
		
		
		public static bool greater(int self, int that) {
			return ( ( ((int) (self) ) - ((int) (that) ) ) > 0 );
		}
		
		
		public static bool greaterEqualsTo(int this1, int that) {
			return ( ( ((int) (this1) ) - ((int) (that) ) ) >= 0 );
		}
		
		
		public static bool greaterEquals(int self, int that) {
			return ( ( ((int) (self) ) - ((int) (that) ) ) >= 0 );
		}
		
		
		public static bool lessThan(int this1, int that) {
			return ( ( ((int) (this1) ) - ((int) (that) ) ) < 0 );
		}
		
		
		public static bool less(int self, int that) {
			return ( ( ((int) (self) ) - ((int) (that) ) ) < 0 );
		}
		
		
		public static bool lessEqualsTo(int this1, int that) {
			return ( ( ((int) (this1) ) - ((int) (that) ) ) <= 0 );
		}
		
		
		public static bool lessEquals(int self, int that) {
			return ( ( ((int) (self) ) - ((int) (that) ) ) <= 0 );
		}
		
		
		public static global::Date toDate(int this1) {
			unchecked {
				return new global::Date(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), ( global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH) - 1 ), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY), 0, 0, 0);
			}
		}
		
		
		public static string toString(int this1) {
			unchecked {
				int abs = ((int) (( (( this1 < 0 )) ? ( - (this1) ) : (this1) )) );
				return global::haxe.lang.Runtime.concat((( (( ((int) (this1) ) < 0 )) ? ("-") : ("") )), (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (abs) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR))), "-"), global::thx.Ints.lpad(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (abs) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH), "0", 2)), "-"), global::thx.Ints.lpad(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (abs) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY), "0", 2))));
			}
		}
		
		
		public static int get_days(int this1) {
			return this1;
		}
		
		
		public static int get_year(int this1) {
			return global::thx._LocalDate.LocalDate_Impl_.getDatePart(this1, global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR);
		}
		
		
		public static int get_month(int this1) {
			return global::thx._LocalDate.LocalDate_Impl_.getDatePart(this1, global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH);
		}
		
		
		public static int get_day(int this1) {
			return global::thx._LocalDate.LocalDate_Impl_.getDatePart(this1, global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY);
		}
		
		
		public static int get_dayOfWeek(int this1) {
			unchecked {
				return ( (( ((int) (this1) ) + 1 )) % 7 );
			}
		}
		
		
		public static int get_dayOfYear(int this1) {
			return global::thx._LocalDate.LocalDate_Impl_.getDatePart(this1, global::thx._LocalDate.LocalDate_Impl_.DATE_PART_DAY_OF_YEAR);
		}
		
		
		public static bool get_isInLeapYear(int this1) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR));
		}
		
		
		public static int get_monthDays(int this1) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_YEAR), global::thx._LocalDate.LocalDate_Impl_.getDatePart(((int) (this1) ), global::thx._LocalDate.LocalDate_Impl_.DATE_PART_MONTH));
		}
		
		
		public static int self(int this1) {
			return ((int) (this1) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._LocalDate {
	public class LocalDate_Impl__dateToDays_93__Fun : global::haxe.lang.Function {
		
		public LocalDate_Impl__dateToDays_93__Fun(int[] year1, int[] month1) : base(0, 0) {
			this.year1 = year1;
			this.month1 = month1;
		}
		
		
		public override object __hx_invoke0_o() {
			unchecked {
				if (( this.month1[0] == 0 )) {
					this.year1[0]--;
					this.month1[0] = 12;
				}
				else if (( this.month1[0] < 0 )) {
					this.month1[0] =  - (this.month1[0]) ;
					int years = ((int) (global::System.Math.Ceiling(((double) (( ((double) (this.month1[0]) ) / 12 )) ))) );
					this.year1[0] -= years;
					this.month1[0] = ( ( years * 12 ) - this.month1[0] );
				}
				else if (( this.month1[0] > 12 )) {
					int years1 = ((int) (global::System.Math.Floor(((double) (( ((double) (this.month1[0]) ) / 12 )) ))) );
					this.year1[0] += years1;
					this.month1[0] = ( this.month1[0] - ( years1 * 12 ) );
				}
				
				return null;
			}
		}
		
		
		public int[] year1;
		
		public int[] month1;
		
	}
}


