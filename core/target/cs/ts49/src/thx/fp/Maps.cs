// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class StringMap : global::haxe.lang.HxObject {
		
		public StringMap(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public StringMap() {
			global::thx.fp.StringMap.__hx_ctor_thx_fp_StringMap(this);
		}
		
		
		public static void __hx_ctor_thx_fp_StringMap(global::thx.fp.StringMap __temp_me134) {
		}
		
		
		public static bool exists<V>(global::thx.fp.MapImpl map, string key) {
			return global::thx.Options.toBool<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<object, V>(((global::thx.fp.MapImpl) (map) ), ((object) (key) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ));
		}
		
		
		public static global::haxe.ds.Option @get<V>(global::thx.fp.MapImpl map, string key) {
			return global::thx.fp._Map.Map_Impl_.lookup<object, V>(((global::thx.fp.MapImpl) (map) ), ((object) (key) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ));
		}
		
		
		public static V getAlt<V>(global::thx.fp.MapImpl map, string key, V alt) {
			return global::thx.Options.getOrElse<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<object, V>(((global::thx.fp.MapImpl) (map) ), ((object) (key) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), global::haxe.lang.Runtime.genericCast<V>(alt));
		}
		
		
		public static global::thx.fp.MapImpl @set<V>(global::thx.fp.MapImpl map, string key, V @value) {
			return global::thx.fp._Map.Map_Impl_.insert<object, V>(((global::thx.fp.MapImpl) (map) ), ((object) (key) ), global::haxe.lang.Runtime.genericCast<V>(@value), ((global::haxe.lang.Function) (global::thx.Strings.order) ));
		}
		
		
		public static global::thx.fp.MapImpl @remove<V>(global::thx.fp.MapImpl map, string key) {
			return global::thx.fp._Map.Map_Impl_.delete<object, V>(((global::thx.fp.MapImpl) (map) ), ((object) (key) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ));
		}
		
		
		public static global::thx.fp.MapImpl fromNative<V>(global::haxe.IMap<object, V> map) {
			return global::thx.fp._Map.Map_Impl_.fromNative<object, V>(((global::haxe.IMap<object, V>) (map) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ));
		}
		
		
		public static global::haxe.ds.StringMap<V> toNative<V>(global::thx.fp.MapImpl map) {
			return ((global::haxe.ds.StringMap<V>) (global::haxe.ds.StringMap<object>.__hx_cast<V>(((global::haxe.ds.StringMap) (global::thx.fp._Map.Map_Impl_.foldLeftTuples<object, object, V>(((global::thx.fp.MapImpl) (map) ), ((object) (new global::haxe.ds.StringMap<V>()) ), ((global::haxe.lang.Function) (new global::thx.fp.StringMap_toNative_33__Fun<V>()) ))) ))) );
		}
		
		
		public static global::thx.fp.MapImpl merge<V>(global::thx.fp.MapImpl a, global::thx.fp.MapImpl b) {
			return ((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.foldLeftTuples<object, object, V>(((global::thx.fp.MapImpl) (b) ), ((object) (a) ), ((global::haxe.lang.Function) (new global::thx.fp.StringMap_merge_39__Fun<V>()) ))) );
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.fp.StringMap(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.fp.StringMap();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class StringMap_toNative_33__Fun<V> : global::haxe.lang.Function {
		
		public StringMap_toNative_33__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			global::haxe.ds.StringMap<V> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.ds.StringMap<V>) (global::haxe.ds.StringMap<object>.__hx_cast<V>(((global::haxe.ds.StringMap) (((object) (__fn_float1) )) ))) )) : (((global::haxe.ds.StringMap<V>) (global::haxe.ds.StringMap<object>.__hx_cast<V>(((global::haxe.ds.StringMap) (__fn_dyn1) ))) )) );
			acc.@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(((object) (t) ), "_0", 21233, true)), global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(((object) (t) ), "_1", 21234, true)));
			return acc;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class StringMap_merge_39__Fun<V> : global::haxe.lang.Function {
		
		public StringMap_merge_39__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			global::thx.fp.MapImpl acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.MapImpl) (((object) (__fn_float1) )) )) : (((global::thx.fp.MapImpl) (__fn_dyn1) )) );
			return global::thx.fp._Map.Map_Impl_.insert<object, V>(((global::thx.fp.MapImpl) (acc) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(t, "_0", 21233, true)), global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(t, "_1", 21234, true)), ((global::haxe.lang.Function) (global::thx.Strings.order) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class FloatMap : global::haxe.lang.HxObject {
		
		public FloatMap(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public FloatMap() {
			global::thx.fp.FloatMap.__hx_ctor_thx_fp_FloatMap(this);
		}
		
		
		public static void __hx_ctor_thx_fp_FloatMap(global::thx.fp.FloatMap __temp_me135) {
		}
		
		
		public static bool exists<V>(global::thx.fp.MapImpl map, double key) {
			return global::thx.Options.toBool<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<double, V>(((global::thx.fp.MapImpl) (map) ), ((double) (key) ), ((global::haxe.lang.Function) (global::thx.Floats.order) ))) ));
		}
		
		
		public static global::haxe.ds.Option @get<V>(global::thx.fp.MapImpl map, double key) {
			return global::thx.fp._Map.Map_Impl_.lookup<double, V>(((global::thx.fp.MapImpl) (map) ), ((double) (key) ), ((global::haxe.lang.Function) (global::thx.Floats.order) ));
		}
		
		
		public static V getAlt<V>(global::thx.fp.MapImpl map, double key, V alt) {
			return global::thx.Options.getOrElse<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<double, V>(((global::thx.fp.MapImpl) (map) ), ((double) (key) ), ((global::haxe.lang.Function) (global::thx.Floats.order) ))) ), global::haxe.lang.Runtime.genericCast<V>(alt));
		}
		
		
		public static global::thx.fp.MapImpl @set<V>(global::thx.fp.MapImpl map, double key, V @value) {
			return global::thx.fp._Map.Map_Impl_.insert<double, V>(((global::thx.fp.MapImpl) (map) ), ((double) (key) ), global::haxe.lang.Runtime.genericCast<V>(@value), ((global::haxe.lang.Function) (global::thx.Floats.order) ));
		}
		
		
		public static global::thx.fp.MapImpl @remove<V>(global::thx.fp.MapImpl map, double key) {
			return global::thx.fp._Map.Map_Impl_.delete<double, V>(((global::thx.fp.MapImpl) (map) ), ((double) (key) ), ((global::haxe.lang.Function) (global::thx.Floats.order) ));
		}
		
		
		public static global::thx.fp.MapImpl merge<V>(global::thx.fp.MapImpl a, global::thx.fp.MapImpl b) {
			return ((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.foldLeftTuples<object, double, V>(((global::thx.fp.MapImpl) (b) ), ((object) (a) ), ((global::haxe.lang.Function) (new global::thx.fp.FloatMap_merge_59__Fun<V>()) ))) );
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.fp.FloatMap(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.fp.FloatMap();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class FloatMap_merge_59__Fun<V> : global::haxe.lang.Function {
		
		public FloatMap_merge_59__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			global::thx.fp.MapImpl acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.MapImpl) (((object) (__fn_float1) )) )) : (((global::thx.fp.MapImpl) (__fn_dyn1) )) );
			return global::thx.fp._Map.Map_Impl_.insert<double, V>(((global::thx.fp.MapImpl) (acc) ), ((double) (global::haxe.lang.Runtime.getField_f(t, "_0", 21233, true)) ), global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(t, "_1", 21234, true)), ((global::haxe.lang.Function) (global::thx.Floats.order) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class IntMap : global::haxe.lang.HxObject {
		
		public IntMap(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public IntMap() {
			global::thx.fp.IntMap.__hx_ctor_thx_fp_IntMap(this);
		}
		
		
		public static void __hx_ctor_thx_fp_IntMap(global::thx.fp.IntMap __temp_me136) {
		}
		
		
		public static bool exists<V>(global::thx.fp.MapImpl map, int key) {
			return global::thx.Options.toBool<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<int, V>(((global::thx.fp.MapImpl) (map) ), ((int) (key) ), ((global::haxe.lang.Function) (global::thx.Ints.order) ))) ));
		}
		
		
		public static global::haxe.ds.Option @get<V>(global::thx.fp.MapImpl map, int key) {
			return global::thx.fp._Map.Map_Impl_.lookup<int, V>(((global::thx.fp.MapImpl) (map) ), ((int) (key) ), ((global::haxe.lang.Function) (global::thx.Ints.order) ));
		}
		
		
		public static V getAlt<V>(global::thx.fp.MapImpl map, int key, V alt) {
			return global::thx.Options.getOrElse<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<int, V>(((global::thx.fp.MapImpl) (map) ), ((int) (key) ), ((global::haxe.lang.Function) (global::thx.Ints.order) ))) ), global::haxe.lang.Runtime.genericCast<V>(alt));
		}
		
		
		public static global::thx.fp.MapImpl @set<V>(global::thx.fp.MapImpl map, int key, V @value) {
			return global::thx.fp._Map.Map_Impl_.insert<int, V>(((global::thx.fp.MapImpl) (map) ), ((int) (key) ), global::haxe.lang.Runtime.genericCast<V>(@value), ((global::haxe.lang.Function) (global::thx.Ints.order) ));
		}
		
		
		public static global::thx.fp.MapImpl @remove<V>(global::thx.fp.MapImpl map, int key) {
			return global::thx.fp._Map.Map_Impl_.delete<int, V>(((global::thx.fp.MapImpl) (map) ), ((int) (key) ), ((global::haxe.lang.Function) (global::thx.Ints.order) ));
		}
		
		
		public static global::thx.fp.MapImpl fromNative<V>(global::haxe.IMap<int, V> map) {
			return global::thx.fp._Map.Map_Impl_.fromNative<int, V>(((global::haxe.IMap<int, V>) (map) ), ((global::haxe.lang.Function) (global::thx.Ints.order) ));
		}
		
		
		public static global::haxe.ds.IntMap<V> toNative<V>(global::thx.fp.MapImpl map) {
			return ((global::haxe.ds.IntMap<V>) (global::haxe.ds.IntMap<object>.__hx_cast<V>(((global::haxe.ds.IntMap) (global::thx.fp._Map.Map_Impl_.foldLeftTuples<object, int, V>(((global::thx.fp.MapImpl) (map) ), ((object) (new global::haxe.ds.IntMap<V>()) ), ((global::haxe.lang.Function) (new global::thx.fp.IntMap_toNative_82__Fun<V>()) ))) ))) );
		}
		
		
		public static global::thx.fp.MapImpl merge<V>(global::thx.fp.MapImpl a, global::thx.fp.MapImpl b) {
			return ((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.foldLeftTuples<object, int, V>(((global::thx.fp.MapImpl) (b) ), ((object) (a) ), ((global::haxe.lang.Function) (new global::thx.fp.IntMap_merge_88__Fun<V>()) ))) );
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.fp.IntMap(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.fp.IntMap();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class IntMap_toNative_82__Fun<V> : global::haxe.lang.Function {
		
		public IntMap_toNative_82__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			global::haxe.ds.IntMap<V> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.ds.IntMap<V>) (global::haxe.ds.IntMap<object>.__hx_cast<V>(((global::haxe.ds.IntMap) (((object) (__fn_float1) )) ))) )) : (((global::haxe.ds.IntMap<V>) (global::haxe.ds.IntMap<object>.__hx_cast<V>(((global::haxe.ds.IntMap) (__fn_dyn1) ))) )) );
			acc.@set(((int) (global::haxe.lang.Runtime.getField_f(((object) (t) ), "_0", 21233, true)) ), global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(((object) (t) ), "_1", 21234, true)));
			return acc;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class IntMap_merge_88__Fun<V> : global::haxe.lang.Function {
		
		public IntMap_merge_88__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			global::thx.fp.MapImpl acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.MapImpl) (((object) (__fn_float1) )) )) : (((global::thx.fp.MapImpl) (__fn_dyn1) )) );
			return global::thx.fp._Map.Map_Impl_.insert<int, V>(((global::thx.fp.MapImpl) (acc) ), ((int) (global::haxe.lang.Runtime.getField_f(t, "_0", 21233, true)) ), global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(t, "_1", 21234, true)), ((global::haxe.lang.Function) (global::thx.Ints.order) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class ComparableOrdMap : global::haxe.lang.HxObject {
		
		public ComparableOrdMap(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ComparableOrdMap() {
			global::thx.fp.ComparableOrdMap.__hx_ctor_thx_fp_ComparableOrdMap(this);
		}
		
		
		public static void __hx_ctor_thx_fp_ComparableOrdMap(global::thx.fp.ComparableOrdMap __temp_me137) {
		}
		
		
		public static bool exists<V, T>(global::thx.fp.MapImpl map, T key) {
			return global::thx.Options.toBool<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<T, V>(((global::thx.fp.MapImpl) (map) ), global::haxe.lang.Runtime.genericCast<T>(key), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<T>()) ))) ));
		}
		
		
		public static global::haxe.ds.Option @get<V, T>(global::thx.fp.MapImpl map, T key) {
			return global::thx.fp._Map.Map_Impl_.lookup<T, V>(((global::thx.fp.MapImpl) (map) ), global::haxe.lang.Runtime.genericCast<T>(key), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<T>()) ));
		}
		
		
		public static V getAlt<V, T>(global::thx.fp.MapImpl map, T key, V alt) {
			return global::thx.Options.getOrElse<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<T, V>(((global::thx.fp.MapImpl) (map) ), global::haxe.lang.Runtime.genericCast<T>(key), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<T>()) ))) ), global::haxe.lang.Runtime.genericCast<V>(alt));
		}
		
		
		public static global::thx.fp.MapImpl @set<V, T>(global::thx.fp.MapImpl map, T key, V @value) {
			return global::thx.fp._Map.Map_Impl_.insert<T, V>(((global::thx.fp.MapImpl) (map) ), global::haxe.lang.Runtime.genericCast<T>(key), global::haxe.lang.Runtime.genericCast<V>(@value), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<T>()) ));
		}
		
		
		public static global::thx.fp.MapImpl @remove<V, T>(global::thx.fp.MapImpl map, T key) {
			return global::thx.fp._Map.Map_Impl_.delete<T, V>(((global::thx.fp.MapImpl) (map) ), global::haxe.lang.Runtime.genericCast<T>(key), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<T>()) ));
		}
		
		
		public static global::thx.fp.MapImpl fromNative<V, T>(global::haxe.IMap<T, V> map) {
			return global::thx.fp._Map.Map_Impl_.fromNative<T, V>(((global::haxe.IMap<T, V>) (map) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<T>()) ));
		}
		
		
		public static global::thx.fp.MapImpl merge<V, T>(global::thx.fp.MapImpl a, global::thx.fp.MapImpl b) {
			return ((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.foldLeftTuples<object, T, V>(((global::thx.fp.MapImpl) (b) ), ((object) (a) ), ((global::haxe.lang.Function) (new global::thx.fp.ComparableOrdMap_merge_111__Fun<V, T>()) ))) );
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.fp.ComparableOrdMap(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.fp.ComparableOrdMap();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class ComparableOrdMap_merge_111__Fun<V, T> : global::haxe.lang.Function {
		
		public ComparableOrdMap_merge_111__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			global::thx.fp.MapImpl acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.MapImpl) (((object) (__fn_float1) )) )) : (((global::thx.fp.MapImpl) (__fn_dyn1) )) );
			return global::thx.fp._Map.Map_Impl_.insert<T, V>(((global::thx.fp.MapImpl) (acc) ), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.getField(t, "_0", 21233, true)), global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(t, "_1", 21234, true)), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<T>()) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class ComparableMap : global::haxe.lang.HxObject {
		
		public ComparableMap(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ComparableMap() {
			global::thx.fp.ComparableMap.__hx_ctor_thx_fp_ComparableMap(this);
		}
		
		
		public static void __hx_ctor_thx_fp_ComparableMap(global::thx.fp.ComparableMap __temp_me138) {
		}
		
		
		public static bool exists<V, T>(global::thx.fp.MapImpl map, T key) {
			return global::thx.Options.toBool<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<T, V>(((global::thx.fp.MapImpl) (map) ), global::haxe.lang.Runtime.genericCast<T>(key), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<T>()) ))) ));
		}
		
		
		public static global::haxe.ds.Option @get<V, T>(global::thx.fp.MapImpl map, T key) {
			return global::thx.fp._Map.Map_Impl_.lookup<T, V>(((global::thx.fp.MapImpl) (map) ), global::haxe.lang.Runtime.genericCast<T>(key), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<T>()) ));
		}
		
		
		public static V getAlt<V, T>(global::thx.fp.MapImpl map, T key, V alt) {
			return global::thx.Options.getOrElse<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<T, V>(((global::thx.fp.MapImpl) (map) ), global::haxe.lang.Runtime.genericCast<T>(key), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<T>()) ))) ), global::haxe.lang.Runtime.genericCast<V>(alt));
		}
		
		
		public static global::thx.fp.MapImpl @set<V, T>(global::thx.fp.MapImpl map, T key, V @value) {
			return global::thx.fp._Map.Map_Impl_.insert<T, V>(((global::thx.fp.MapImpl) (map) ), global::haxe.lang.Runtime.genericCast<T>(key), global::haxe.lang.Runtime.genericCast<V>(@value), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<T>()) ));
		}
		
		
		public static global::thx.fp.MapImpl @remove<V, T>(global::thx.fp.MapImpl map, T key) {
			return global::thx.fp._Map.Map_Impl_.delete<T, V>(((global::thx.fp.MapImpl) (map) ), global::haxe.lang.Runtime.genericCast<T>(key), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<T>()) ));
		}
		
		
		public static global::thx.fp.MapImpl fromNative<V, T>(global::haxe.IMap<T, V> map) {
			return global::thx.fp._Map.Map_Impl_.fromNative<T, V>(((global::haxe.IMap<T, V>) (map) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<T>()) ));
		}
		
		
		public static global::thx.fp.MapImpl merge<V, T>(global::thx.fp.MapImpl a, global::thx.fp.MapImpl b) {
			return ((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.foldLeftTuples<object, T, V>(((global::thx.fp.MapImpl) (b) ), ((object) (a) ), ((global::haxe.lang.Function) (new global::thx.fp.ComparableMap_merge_134__Fun<V, T>()) ))) );
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.fp.ComparableMap(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.fp.ComparableMap();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class ComparableMap_merge_134__Fun<V, T> : global::haxe.lang.Function {
		
		public ComparableMap_merge_134__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			global::thx.fp.MapImpl acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.MapImpl) (((object) (__fn_float1) )) )) : (((global::thx.fp.MapImpl) (__fn_dyn1) )) );
			return global::thx.fp._Map.Map_Impl_.insert<T, V>(((global::thx.fp.MapImpl) (acc) ), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.getField(t, "_0", 21233, true)), global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(t, "_1", 21234, true)), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<T>()) ));
		}
		
		
	}
}


