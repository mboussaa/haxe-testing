// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestMap : global::haxe.lang.HxObject {
		
		public TestMap(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestMap(int i) {
			global::thx.fp.TestMap.__hx_ctor_thx_fp_TestMap(this, i);
		}
		
		
		public static void __hx_ctor_thx_fp_TestMap(global::thx.fp.TestMap __temp_me139, int i) {
			__temp_me139.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.fp.TestMap(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.fp.TestMap(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testRemove() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.MapImpl m = global::thx.fp._Map.Map_Impl_.delete<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "Y", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("X") ), ((int) (2) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("Z") ), ((int) (3) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("X") ), ((global::haxe.lang.Function) (global::thx.Strings.order) ));
					global::utest.Assert.same(global::haxe.ds.Option.Some(1), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) ("Y") ), ((global::haxe.lang.Function) (global::thx.Strings.order) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRemove", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
					global::utest.Assert.same(global::haxe.ds.Option.Some(3), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) ("Z") ), ((global::haxe.lang.Function) (global::thx.Strings.order) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRemove", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
					global::utest.Assert.@equals(2, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (m) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRemove", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
				}
				
			}
		}
		
		
		public virtual void testEmpty() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.MapImpl m = ((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Tip) );
					global::utest.Assert.same(global::haxe.ds.Option.None, global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) ("some") ), ((global::haxe.lang.Function) (global::thx.Strings.order) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEmpty", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
					global::utest.Assert.@equals(0, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (m) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEmpty", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
				}
				
			}
		}
		
		
		public virtual void testSizes() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(3, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "B", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("A") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("C") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "A", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("B") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("C") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "C", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("B") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("A") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "B", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("C") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("A") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "C", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("A") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("B") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "A", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("C") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("B") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
					global::utest.Assert.@equals(1, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "A", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("A") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("A") ), ((int) (1) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSizes", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
				}
				
			}
		}
		
		
		public virtual void testFoldLeft() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), global::thx.Arrays.order<int>(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::thx.fp._Map.Map_Impl_.foldLeft<object, object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "A", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("B") ), ((int) (2) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("C") ), ((int) (3) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) (new global::Array<int>(new int[]{})) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestMap_testFoldLeft_49__Fun.__hx_current != null )) ? (global::thx.fp.TestMap_testFoldLeft_49__Fun.__hx_current) : (global::thx.fp.TestMap_testFoldLeft_49__Fun.__hx_current = ((global::thx.fp.TestMap_testFoldLeft_49__Fun) (new global::thx.fp.TestMap_testFoldLeft_49__Fun()) )) )) ))) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Ints), "compare", 57219237)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFoldLeft", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
				}
				
			}
		}
		
		
		public virtual void testFoldLeftKeys() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(new global::Array<object>(new object[]{"A", "B", "C"}), global::thx.Arrays.order<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.fp._Map.Map_Impl_.foldLeftKeys<object, object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "A", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("B") ), ((int) (2) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("C") ), ((int) (3) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) (new global::Array<object>(new object[]{})) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestMap_testFoldLeftKeys_59__Fun.__hx_current != null )) ? (global::thx.fp.TestMap_testFoldLeftKeys_59__Fun.__hx_current) : (global::thx.fp.TestMap_testFoldLeftKeys_59__Fun.__hx_current = ((global::thx.fp.TestMap_testFoldLeftKeys_59__Fun) (new global::thx.fp.TestMap_testFoldLeftKeys_59__Fun()) )) )) ))) ))) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFoldLeftKeys", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
				}
				
			}
		}
		
		
		public virtual void testSet() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.MapImpl m = global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, "Y", 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) ("X") ), ((int) (2) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) ("Z") ), ((int) (3) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ));
					global::utest.Assert.same(global::haxe.ds.Option.Some(2), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) ("X") ), ((global::haxe.lang.Function) (global::thx.Strings.order) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSet", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
					global::utest.Assert.same(global::haxe.ds.Option.Some(1), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) ("Y") ), ((global::haxe.lang.Function) (global::thx.Strings.order) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSet", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
					global::utest.Assert.same(global::haxe.ds.Option.Some(3), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) ("Z") ), ((global::haxe.lang.Function) (global::thx.Strings.order) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSet", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (71) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (m) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSet", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (72) )}));
				}
				
			}
		}
		
		
		public virtual void testObjectSet() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.CO a = new global::thx.fp.CO(((string) ("a") ));
					global::thx.fp.CO b = new global::thx.fp.CO(((string) ("b") ));
					global::thx.fp.CO c = new global::thx.fp.CO(((string) ("c") ));
					global::thx.fp.MapImpl m = global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, a, 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) (b) ), ((int) (2) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<object>()) ))) ), ((object) (c) ), ((int) (3) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<object>()) ));
					global::utest.Assert.same(global::haxe.ds.Option.Some(1), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) (a) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<object>()) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testObjectSet", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (84) )}));
					global::utest.Assert.same(global::haxe.ds.Option.Some(2), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) (b) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<object>()) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testObjectSet", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
					global::utest.Assert.same(global::haxe.ds.Option.Some(3), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) (c) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparableOrd<object>()) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testObjectSet", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (86) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (m) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testObjectSet", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (87) )}));
				}
				
			}
		}
		
		
		public virtual void testObjectSet2() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.CO2 a = new global::thx.fp.CO2(((string) ("a") ));
					global::thx.fp.CO2 b = new global::thx.fp.CO2(((string) ("b") ));
					global::thx.fp.CO2 c = new global::thx.fp.CO2(((string) ("c") ));
					global::thx.fp.MapImpl m = global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<object, int>(((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, a, 1, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) ), ((object) (b) ), ((int) (2) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<object>()) ))) ), ((object) (c) ), ((int) (3) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<object>()) ));
					global::utest.Assert.same(global::haxe.ds.Option.Some(1), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) (a) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<object>()) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testObjectSet2", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
					global::utest.Assert.same(global::haxe.ds.Option.Some(2), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) (b) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<object>()) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testObjectSet2", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
					global::utest.Assert.same(global::haxe.ds.Option.Some(3), global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (m) ), ((object) (c) ), ((global::haxe.lang.Function) (global::thx._Ord.Ord_Impl_.forComparable<object>()) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testObjectSet2", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (101) )}));
					global::utest.Assert.@equals(3, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (m) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testObjectSet2", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (102) )}));
				}
				
			}
		}
		
		
		public virtual void testFromNative() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.StringMap<int> _g2 = new global::haxe.ds.StringMap<int>();
					_g2.@set(((string) ("a") ), ((int) (1) ));
					_g2.@set(((string) ("b") ), ((int) (2) ));
					global::thx.fp.MapImpl map = global::thx.fp.StringMap.fromNative<int>(((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (_g2) ))) ));
					global::utest.Assert.@equals(2, global::thx.fp._Map.Map_Impl_.size<object, int>(((global::thx.fp.MapImpl) (map) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromNative", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (109) )}));
					global::utest.Assert.isTrue(global::thx.Options.toBool<int>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (map) ), ((object) ("a") ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromNative", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (110) )}));
					global::utest.Assert.isTrue(global::thx.Options.toBool<int>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<object, int>(((global::thx.fp.MapImpl) (map) ), ((object) ("b") ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromNative", "thx.fp.TestMap", "TestMap.hx"}, new int[]{1981972957}, new double[]{((double) (111) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 89388435:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromNative", 89388435)) );
					}
					
					
					case 1853632417:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testObjectSet2", 1853632417)) );
					}
					
					
					case 1992086385:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testObjectSet", 1992086385)) );
					}
					
					
					case 1036388976:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSet", 1036388976)) );
					}
					
					
					case 543288878:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFoldLeftKeys", 543288878)) );
					}
					
					
					case 974474010:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFoldLeft", 974474010)) );
					}
					
					
					case 1171998432:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSizes", 1171998432)) );
					}
					
					
					case 953972955:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEmpty", 953972955)) );
					}
					
					
					case 494723638:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRemove", 494723638)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 89388435:
					{
						this.testFromNative();
						break;
					}
					
					
					case 1853632417:
					{
						this.testObjectSet2();
						break;
					}
					
					
					case 1992086385:
					{
						this.testObjectSet();
						break;
					}
					
					
					case 1036388976:
					{
						this.testSet();
						break;
					}
					
					
					case 543288878:
					{
						this.testFoldLeftKeys();
						break;
					}
					
					
					case 974474010:
					{
						this.testFoldLeft();
						break;
					}
					
					
					case 1171998432:
					{
						this.testSizes();
						break;
					}
					
					
					case 953972955:
					{
						this.testEmpty();
						break;
					}
					
					
					case 494723638:
					{
						this.testRemove();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestMap_testFoldLeft_49__Fun : global::haxe.lang.Function {
		
		public TestMap_testFoldLeft_49__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestMap_testFoldLeft_49__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int v = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			global::Array<int> arr = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
			arr.push(v);
			return arr;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestMap_testFoldLeftKeys_59__Fun : global::haxe.lang.Function {
		
		public TestMap_testFoldLeftKeys_59__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestMap_testFoldLeftKeys_59__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			string k = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) );
			global::Array<object> arr = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
			arr.push(k);
			return arr;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class CO : global::haxe.lang.HxObject {
		
		public CO(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public CO(string v) {
			global::thx.fp.CO.__hx_ctor_thx_fp_CO(this, v);
		}
		
		
		public static void __hx_ctor_thx_fp_CO(global::thx.fp.CO __temp_me140, string v) {
			__temp_me140.v = v;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.fp.CO(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.fp.CO(global::haxe.lang.Runtime.toString(arr[0]));
		}
		
		
		public string v;
		
		public virtual global::thx.OrderingImpl compareTo(global::thx.fp.CO that) {
			return global::thx._Ord.Ordering_Impl_.fromInt(global::haxe.Utf8.compare(this.v, that.v));
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 118:
					{
						this.v = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 39622016:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compareTo", 39622016)) );
					}
					
					
					case 118:
					{
						return this.v;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 39622016:
					{
						return this.compareTo(((global::thx.fp.CO) (dynargs[0]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("v");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class CO2 : global::haxe.lang.HxObject {
		
		public CO2(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public CO2(string v) {
			global::thx.fp.CO2.__hx_ctor_thx_fp_CO2(this, v);
		}
		
		
		public static void __hx_ctor_thx_fp_CO2(global::thx.fp.CO2 __temp_me141, string v) {
			__temp_me141.v = v;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.fp.CO2(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.fp.CO2(global::haxe.lang.Runtime.toString(arr[0]));
		}
		
		
		public string v;
		
		public virtual int compareTo(global::thx.fp.CO2 that) {
			return global::haxe.Utf8.compare(this.v, that.v);
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 118:
					{
						this.v = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 39622016:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compareTo", 39622016)) );
					}
					
					
					case 118:
					{
						return this.v;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 39622016:
					{
						return this.compareTo(((global::thx.fp.CO2) (dynargs[0]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("v");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


