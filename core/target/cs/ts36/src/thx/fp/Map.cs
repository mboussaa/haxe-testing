// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp._Map {
	public sealed class Map_Impl_ {
		
		static Map_Impl_() {
			unchecked {
				global::thx.fp._Map.Map_Impl_.delta = 5;
				global::thx.fp._Map.Map_Impl_.ratio = 2;
			}
		}
		
		
		public static global::thx.fp.MapImpl empty<K, V>() {
			return global::thx.fp.MapImpl.Tip;
		}
		
		
		public static global::thx.fp.MapImpl singleton<K, V>(K k, V v) {
			unchecked {
				return global::thx.fp.MapImpl.Bin(1, k, v, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip);
			}
		}
		
		
		public static global::thx.fp.MapImpl bin<K, V>(K k, V v, global::thx.fp.MapImpl lhs, global::thx.fp.MapImpl rhs) {
			unchecked {
				return global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (lhs) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (rhs) )) ) + 1 ), k, v, lhs, rhs);
			}
		}
		
		
		public static global::thx.fp.MapImpl fromNative<K, V>(global::haxe.IMap<K, V> map, global::haxe.lang.Function comparator) {
			global::thx.fp.MapImpl r = ((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Tip) );
			{
				object tmp = map.keys();
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					K key = global::haxe.lang.Runtime.genericCast<K>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null));
					r = global::thx.fp._Map.Map_Impl_.insert<K, V>(((global::thx.fp.MapImpl) (r) ), global::haxe.lang.Runtime.genericCast<K>(key), (map.@get(key)).@value, ((global::haxe.lang.Function) (comparator) ));
				}
				
			}
			
			return r;
		}
		
		
		public static global::haxe.ds.Option lookup<K, V>(global::thx.fp.MapImpl this1, K key, global::haxe.lang.Function comparator) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return global::haxe.ds.Option.None;
					}
					
					
					case 1:
					{
						global::thx.fp.MapImpl rhs = ((global::thx.fp.MapImpl) (this1.@params[4]) );
						global::thx.fp.MapImpl lhs = ((global::thx.fp.MapImpl) (this1.@params[3]) );
						V xvalue = global::haxe.lang.Runtime.genericCast<V>(this1.@params[2]);
						switch (((global::thx.OrderingImpl) (comparator.__hx_invoke2_o(default(double), key, default(double), global::haxe.lang.Runtime.genericCast<K>(this1.@params[1]))) ).index) {
							case 0:
							{
								return global::thx.fp._Map.Map_Impl_.lookup<K, V>(((global::thx.fp.MapImpl) (lhs) ), global::haxe.lang.Runtime.genericCast<K>(key), ((global::haxe.lang.Function) (comparator) ));
							}
							
							
							case 1:
							{
								return global::thx.fp._Map.Map_Impl_.lookup<K, V>(((global::thx.fp.MapImpl) (rhs) ), global::haxe.lang.Runtime.genericCast<K>(key), ((global::haxe.lang.Function) (comparator) ));
							}
							
							
							case 2:
							{
								return global::haxe.ds.Option.Some(xvalue);
							}
							
							
						}
						
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::haxe.ds.Option lookupTuple<K, V>(global::thx.fp.MapImpl this1, K key, global::haxe.lang.Function comparator) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return global::haxe.ds.Option.None;
					}
					
					
					case 1:
					{
						global::thx.fp.MapImpl rhs = ((global::thx.fp.MapImpl) (this1.@params[4]) );
						global::thx.fp.MapImpl lhs = ((global::thx.fp.MapImpl) (this1.@params[3]) );
						V xvalue = global::haxe.lang.Runtime.genericCast<V>(this1.@params[2]);
						K xkey = global::haxe.lang.Runtime.genericCast<K>(this1.@params[1]);
						switch (((global::thx.OrderingImpl) (comparator.__hx_invoke2_o(default(double), key, default(double), xkey)) ).index) {
							case 0:
							{
								return global::thx.fp._Map.Map_Impl_.lookupTuple<K, V>(((global::thx.fp.MapImpl) (lhs) ), global::haxe.lang.Runtime.genericCast<K>(key), ((global::haxe.lang.Function) (comparator) ));
							}
							
							
							case 1:
							{
								return global::thx.fp._Map.Map_Impl_.lookupTuple<K, V>(((global::thx.fp.MapImpl) (rhs) ), global::haxe.lang.Runtime.genericCast<K>(key), ((global::haxe.lang.Function) (comparator) ));
							}
							
							
							case 2:
							{
								return global::haxe.ds.Option.Some(((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{xkey, xvalue}, new int[]{}, new double[]{})) ));
							}
							
							
						}
						
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::thx.fp.MapImpl delete<K, V>(global::thx.fp.MapImpl this1, K key, global::haxe.lang.Function comparator) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return global::thx.fp.MapImpl.Tip;
					}
					
					
					case 1:
					{
						global::thx.fp.MapImpl rhs = ((global::thx.fp.MapImpl) (this1.@params[4]) );
						global::thx.fp.MapImpl lhs = ((global::thx.fp.MapImpl) (this1.@params[3]) );
						V x = global::haxe.lang.Runtime.genericCast<V>(this1.@params[2]);
						K kx = global::haxe.lang.Runtime.genericCast<K>(this1.@params[1]);
						switch (((global::thx.OrderingImpl) (comparator.__hx_invoke2_o(default(double), key, default(double), kx)) ).index) {
							case 0:
							{
								return global::thx.fp._Map.Map_Impl_.balance<K, V>(global::haxe.lang.Runtime.genericCast<K>(kx), global::haxe.lang.Runtime.genericCast<V>(x), ((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.delete<K, V>(((global::thx.fp.MapImpl) (lhs) ), global::haxe.lang.Runtime.genericCast<K>(key), ((global::haxe.lang.Function) (comparator) ))) ), ((global::thx.fp.MapImpl) (rhs) ));
							}
							
							
							case 1:
							{
								return global::thx.fp._Map.Map_Impl_.balance<K, V>(global::haxe.lang.Runtime.genericCast<K>(kx), global::haxe.lang.Runtime.genericCast<V>(x), ((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.delete<K, V>(((global::thx.fp.MapImpl) (rhs) ), global::haxe.lang.Runtime.genericCast<K>(key), ((global::haxe.lang.Function) (comparator) ))) ));
							}
							
							
							case 2:
							{
								return global::thx.fp._Map.Map_Impl_.glue<K, V>(((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (rhs) ));
							}
							
							
						}
						
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::thx.fp.MapImpl insert<K, V>(global::thx.fp.MapImpl this1, K kx, V x, global::haxe.lang.Function comparator) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return ((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(1, kx, x, global::thx.fp.MapImpl.Tip, global::thx.fp.MapImpl.Tip)) );
					}
					
					
					case 1:
					{
						global::thx.fp.MapImpl rhs = ((global::thx.fp.MapImpl) (this1.@params[4]) );
						global::thx.fp.MapImpl lhs = ((global::thx.fp.MapImpl) (this1.@params[3]) );
						V y = global::haxe.lang.Runtime.genericCast<V>(this1.@params[2]);
						K ky = global::haxe.lang.Runtime.genericCast<K>(this1.@params[1]);
						int sz = ((int) (global::haxe.lang.Runtime.toInt(this1.@params[0])) );
						switch (((global::thx.OrderingImpl) (comparator.__hx_invoke2_o(default(double), kx, default(double), ky)) ).index) {
							case 0:
							{
								return global::thx.fp._Map.Map_Impl_.balance<K, V>(global::haxe.lang.Runtime.genericCast<K>(ky), global::haxe.lang.Runtime.genericCast<V>(y), ((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<K, V>(((global::thx.fp.MapImpl) (lhs) ), global::haxe.lang.Runtime.genericCast<K>(kx), global::haxe.lang.Runtime.genericCast<V>(x), ((global::haxe.lang.Function) (comparator) ))) ), ((global::thx.fp.MapImpl) (rhs) ));
							}
							
							
							case 1:
							{
								return global::thx.fp._Map.Map_Impl_.balance<K, V>(global::haxe.lang.Runtime.genericCast<K>(ky), global::haxe.lang.Runtime.genericCast<V>(y), ((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (global::thx.fp._Map.Map_Impl_.insert<K, V>(((global::thx.fp.MapImpl) (rhs) ), global::haxe.lang.Runtime.genericCast<K>(kx), global::haxe.lang.Runtime.genericCast<V>(x), ((global::haxe.lang.Function) (comparator) ))) ));
							}
							
							
							case 2:
							{
								return global::thx.fp.MapImpl.Bin(sz, kx, x, lhs, rhs);
							}
							
							
						}
						
						break;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static B foldLeft<B, K, V>(global::thx.fp.MapImpl this1, B b, global::haxe.lang.Function f) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return b;
					}
					
					
					case 1:
					{
						return global::haxe.lang.Runtime.genericCast<B>(global::thx.fp._Map.Map_Impl_.foldLeft<object, K, V>(((global::thx.fp.MapImpl) (this1.@params[4]) ), global::haxe.lang.Runtime.genericCast<B>(global::thx.fp._Map.Map_Impl_.foldLeft<object, K, V>(((global::thx.fp.MapImpl) (this1.@params[3]) ), global::haxe.lang.Runtime.genericCast<B>(f.__hx_invoke2_o(default(double), b, default(double), global::haxe.lang.Runtime.genericCast<V>(this1.@params[2]))), ((global::haxe.lang.Function) (f) ))), ((global::haxe.lang.Function) (f) )));
					}
					
					
				}
				
				return default(B);
			}
		}
		
		
		public static global::thx.fp.MapImpl map<B, K, V>(global::thx.fp.MapImpl this1, global::haxe.lang.Function f) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return global::thx.fp.MapImpl.Tip;
					}
					
					
					case 1:
					{
						return global::thx.fp.MapImpl.Bin(((int) (global::haxe.lang.Runtime.toInt(this1.@params[0])) ), global::haxe.lang.Runtime.genericCast<K>(this1.@params[1]), global::haxe.lang.Runtime.genericCast<B>(f.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<V>(this1.@params[2]))), global::thx.fp._Map.Map_Impl_.map<object, K, V>(((global::thx.fp.MapImpl) (this1.@params[3]) ), ((global::haxe.lang.Function) (f) )), global::thx.fp._Map.Map_Impl_.map<object, K, V>(((global::thx.fp.MapImpl) (this1.@params[4]) ), ((global::haxe.lang.Function) (f) )));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::Array<V> values<K, V>(global::thx.fp.MapImpl this1) {
			return ((global::Array<V>) (global::Array<object>.__hx_cast<V>(((global::Array) (global::thx.fp._Map.Map_Impl_.foldLeft<object, K, V>(((global::thx.fp.MapImpl) (this1) ), ((object) (new global::Array<V>(new V[]{})) ), ((global::haxe.lang.Function) (new global::thx.fp._Map.Map_Impl__values_94__Fun<V>()) ))) ))) );
		}
		
		
		public static B foldLeftKeys<B, K, V>(global::thx.fp.MapImpl this1, B b, global::haxe.lang.Function f) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return b;
					}
					
					
					case 1:
					{
						return global::haxe.lang.Runtime.genericCast<B>(global::thx.fp._Map.Map_Impl_.foldLeftKeys<object, K, V>(((global::thx.fp.MapImpl) (this1.@params[4]) ), global::haxe.lang.Runtime.genericCast<B>(global::thx.fp._Map.Map_Impl_.foldLeftKeys<object, K, V>(((global::thx.fp.MapImpl) (this1.@params[3]) ), global::haxe.lang.Runtime.genericCast<B>(f.__hx_invoke2_o(default(double), b, default(double), global::haxe.lang.Runtime.genericCast<K>(this1.@params[1]))), ((global::haxe.lang.Function) (f) ))), ((global::haxe.lang.Function) (f) )));
					}
					
					
				}
				
				return default(B);
			}
		}
		
		
		public static B foldLeftAll<B, K, V>(global::thx.fp.MapImpl this1, B b, global::haxe.lang.Function f) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return b;
					}
					
					
					case 1:
					{
						return global::haxe.lang.Runtime.genericCast<B>(global::thx.fp._Map.Map_Impl_.foldLeftAll<object, K, V>(((global::thx.fp.MapImpl) (this1.@params[4]) ), global::haxe.lang.Runtime.genericCast<B>(global::thx.fp._Map.Map_Impl_.foldLeftAll<object, K, V>(((global::thx.fp.MapImpl) (this1.@params[3]) ), global::haxe.lang.Runtime.genericCast<B>(f.__hx_invoke3_o(default(double), b, default(double), global::haxe.lang.Runtime.genericCast<K>(this1.@params[1]), default(double), global::haxe.lang.Runtime.genericCast<V>(this1.@params[2]))), ((global::haxe.lang.Function) (f) ))), ((global::haxe.lang.Function) (f) )));
					}
					
					
				}
				
				return default(B);
			}
		}
		
		
		public static B foldLeftTuples<B, K, V>(global::thx.fp.MapImpl this1, B b, global::haxe.lang.Function f) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return b;
					}
					
					
					case 1:
					{
						return global::haxe.lang.Runtime.genericCast<B>(global::thx.fp._Map.Map_Impl_.foldLeftTuples<object, K, V>(((global::thx.fp.MapImpl) (this1.@params[4]) ), global::haxe.lang.Runtime.genericCast<B>(global::thx.fp._Map.Map_Impl_.foldLeftTuples<object, K, V>(((global::thx.fp.MapImpl) (this1.@params[3]) ), global::haxe.lang.Runtime.genericCast<B>(f.__hx_invoke2_o(default(double), b, default(double), ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{global::haxe.lang.Runtime.genericCast<K>(this1.@params[1]), global::haxe.lang.Runtime.genericCast<V>(this1.@params[2])}, new int[]{}, new double[]{})) ))), ((global::haxe.lang.Function) (f) ))), ((global::haxe.lang.Function) (f) )));
					}
					
					
				}
				
				return default(B);
			}
		}
		
		
		public static int size<K, V>(global::thx.fp.MapImpl this1) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return 0;
					}
					
					
					case 1:
					{
						return ((int) (global::haxe.lang.Runtime.toInt(this1.@params[0])) );
					}
					
					
				}
				
				return default(int);
			}
		}
		
		
		public static int delta;
		
		public static int ratio;
		
		public static global::thx.fp.MapImpl balance<K, V>(K k, V x, global::thx.fp.MapImpl lhs, global::thx.fp.MapImpl rhs) {
			unchecked {
				int ls = global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (lhs) ));
				int rs = global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (rhs) ));
				int xs = ( ( ls + rs ) + 1 );
				if (( ( ls + rs ) <= 1 )) {
					return global::thx.fp.MapImpl.Bin(xs, k, x, lhs, rhs);
				}
				else if (( rs >= ( 5 * ls ) )) {
					return global::thx.fp._Map.Map_Impl_.rotateLeft<K, V>(global::haxe.lang.Runtime.genericCast<K>(k), global::haxe.lang.Runtime.genericCast<V>(x), ((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (rhs) ));
				}
				else if (( ls >= ( 5 * rs ) )) {
					return global::thx.fp._Map.Map_Impl_.rotateRight<K, V>(global::haxe.lang.Runtime.genericCast<K>(k), global::haxe.lang.Runtime.genericCast<V>(x), ((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (rhs) ));
				}
				else {
					return global::thx.fp.MapImpl.Bin(xs, k, x, lhs, rhs);
				}
				
			}
		}
		
		
		public static global::thx.fp.MapImpl glue<K, V>(global::thx.fp.MapImpl this1, global::thx.fp.MapImpl that) {
			if (( this1.index == 0 )) {
				return that;
			}
			else if (( that.index == 0 )) {
				return this1;
			}
			else if (( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (this1) )) > global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (that) )) )) {
				object t = global::thx.fp._Map.Map_Impl_.deleteFindMax<K, V>(((global::thx.fp.MapImpl) (this1) ));
				return global::thx.fp._Map.Map_Impl_.balance<K, V>(global::haxe.lang.Runtime.genericCast<K>(global::haxe.lang.Runtime.getField(t, "k", 107, true)), global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(t, "x", 120, true)), ((global::thx.fp.MapImpl) (global::haxe.lang.Runtime.getField(t, "t", 116, true)) ), ((global::thx.fp.MapImpl) (that) ));
			}
			else {
				object t1 = global::thx.fp._Map.Map_Impl_.deleteFindMin<K, V>(((global::thx.fp.MapImpl) (that) ));
				return global::thx.fp._Map.Map_Impl_.balance<K, V>(global::haxe.lang.Runtime.genericCast<K>(global::haxe.lang.Runtime.getField(t1, "k", 107, true)), global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(t1, "x", 120, true)), ((global::thx.fp.MapImpl) (this1) ), ((global::thx.fp.MapImpl) (global::haxe.lang.Runtime.getField(t1, "t", 116, true)) ));
			}
			
		}
		
		
		public static object deleteFindMin<K, V>(global::thx.fp.MapImpl map) {
			unchecked {
				switch (map.index) {
					case 0:
					{
						throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("can not return the minimal element of an empty map", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"deleteFindMin", "thx.fp._Map.Map_Impl_", "Map.hx"}, new int[]{1981972957}, new double[]{((double) (161) )})));
					}
					
					
					case 1:
					{
						if (( ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (map) ).@params[3]) ).index == 0 )) {
							global::thx.fp.MapImpl r = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (map) ).@params[4]) );
							K k = global::haxe.lang.Runtime.genericCast<K>(((global::thx.fp.MapImpl) (map) ).@params[1]);
							V x = global::haxe.lang.Runtime.genericCast<V>(((global::thx.fp.MapImpl) (map) ).@params[2]);
							return new global::haxe.lang.DynamicObject(new int[]{107, 116, 120}, new object[]{k, r, x}, new int[]{}, new double[]{});
						}
						else {
							global::thx.fp.MapImpl r1 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (map) ).@params[4]) );
							K k1 = global::haxe.lang.Runtime.genericCast<K>(((global::thx.fp.MapImpl) (map) ).@params[1]);
							V x1 = global::haxe.lang.Runtime.genericCast<V>(((global::thx.fp.MapImpl) (map) ).@params[2]);
							global::thx.fp.MapImpl l = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (map) ).@params[3]) );
							object t = global::thx.fp._Map.Map_Impl_.deleteFindMin<K, V>(((global::thx.fp.MapImpl) (l) ));
							{
								K __temp_odecl1 = global::haxe.lang.Runtime.genericCast<K>(global::haxe.lang.Runtime.getField(t, "k", 107, true));
								V __temp_odecl2 = global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(t, "x", 120, true));
								global::thx.fp.MapImpl __temp_odecl3 = global::thx.fp._Map.Map_Impl_.balance<K, V>(global::haxe.lang.Runtime.genericCast<K>(k1), global::haxe.lang.Runtime.genericCast<V>(x1), ((global::thx.fp.MapImpl) (global::haxe.lang.Runtime.getField(t, "t", 116, true)) ), ((global::thx.fp.MapImpl) (r1) ));
								return new global::haxe.lang.DynamicObject(new int[]{107, 116, 120}, new object[]{__temp_odecl1, __temp_odecl3, __temp_odecl2}, new int[]{}, new double[]{});
							}
							
						}
						
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static object deleteFindMax<K, V>(global::thx.fp.MapImpl map) {
			unchecked {
				switch (map.index) {
					case 0:
					{
						throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("can not return the maximal element of an empty map", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"deleteFindMax", "thx.fp._Map.Map_Impl_", "Map.hx"}, new int[]{1981972957}, new double[]{((double) (171) )})));
					}
					
					
					case 1:
					{
						if (( ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (map) ).@params[4]) ).index == 0 )) {
							K k = global::haxe.lang.Runtime.genericCast<K>(((global::thx.fp.MapImpl) (map) ).@params[1]);
							V x = global::haxe.lang.Runtime.genericCast<V>(((global::thx.fp.MapImpl) (map) ).@params[2]);
							global::thx.fp.MapImpl l = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (map) ).@params[3]) );
							return new global::haxe.lang.DynamicObject(new int[]{107, 116, 120}, new object[]{k, l, x}, new int[]{}, new double[]{});
						}
						else {
							K k1 = global::haxe.lang.Runtime.genericCast<K>(((global::thx.fp.MapImpl) (map) ).@params[1]);
							V x1 = global::haxe.lang.Runtime.genericCast<V>(((global::thx.fp.MapImpl) (map) ).@params[2]);
							global::thx.fp.MapImpl l1 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (map) ).@params[3]) );
							global::thx.fp.MapImpl r = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (map) ).@params[4]) );
							object t = global::thx.fp._Map.Map_Impl_.deleteFindMax<K, V>(((global::thx.fp.MapImpl) (r) ));
							{
								K __temp_odecl1 = global::haxe.lang.Runtime.genericCast<K>(global::haxe.lang.Runtime.getField(t, "k", 107, true));
								V __temp_odecl2 = global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(t, "x", 120, true));
								global::thx.fp.MapImpl __temp_odecl3 = global::thx.fp._Map.Map_Impl_.balance<K, V>(global::haxe.lang.Runtime.genericCast<K>(k1), global::haxe.lang.Runtime.genericCast<V>(x1), ((global::thx.fp.MapImpl) (l1) ), ((global::thx.fp.MapImpl) (global::haxe.lang.Runtime.getField(t, "t", 116, true)) ));
								return new global::haxe.lang.DynamicObject(new int[]{107, 116, 120}, new object[]{__temp_odecl1, __temp_odecl3, __temp_odecl2}, new int[]{}, new double[]{});
							}
							
						}
						
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::thx.fp.MapImpl rotateLeft<K, V>(K k, V x, global::thx.fp.MapImpl lhs, global::thx.fp.MapImpl rhs) {
			unchecked {
				if (( rhs.index == 1 )) {
					global::thx.fp.MapImpl ry = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (rhs) ).@params[4]) );
					global::thx.fp.MapImpl ly = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (rhs) ).@params[3]) );
					if (( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (ly) )) < ( 2 * global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (ry) )) ) )) {
						return global::thx.fp._Map.Map_Impl_.singleLeft<K, V>(global::haxe.lang.Runtime.genericCast<K>(k), global::haxe.lang.Runtime.genericCast<V>(x), ((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (rhs) ));
					}
					else {
						return global::thx.fp._Map.Map_Impl_.doubleLeft<K, V>(global::haxe.lang.Runtime.genericCast<K>(k), global::haxe.lang.Runtime.genericCast<V>(x), ((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (rhs) ));
					}
					
				}
				else {
					return global::thx.fp._Map.Map_Impl_.doubleLeft<K, V>(global::haxe.lang.Runtime.genericCast<K>(k), global::haxe.lang.Runtime.genericCast<V>(x), ((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (rhs) ));
				}
				
			}
		}
		
		
		public static global::thx.fp.MapImpl rotateRight<K, V>(K k, V x, global::thx.fp.MapImpl lhs, global::thx.fp.MapImpl rhs) {
			unchecked {
				if (( lhs.index == 1 )) {
					global::thx.fp.MapImpl ry = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (lhs) ).@params[4]) );
					global::thx.fp.MapImpl ly = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (lhs) ).@params[3]) );
					if (( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (ry) )) < ( 2 * global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (ly) )) ) )) {
						return global::thx.fp._Map.Map_Impl_.singleRight<K, V>(global::haxe.lang.Runtime.genericCast<K>(k), global::haxe.lang.Runtime.genericCast<V>(x), ((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (rhs) ));
					}
					else {
						return global::thx.fp._Map.Map_Impl_.doubleRight<K, V>(global::haxe.lang.Runtime.genericCast<K>(k), global::haxe.lang.Runtime.genericCast<V>(x), ((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (rhs) ));
					}
					
				}
				else {
					return global::thx.fp._Map.Map_Impl_.doubleRight<K, V>(global::haxe.lang.Runtime.genericCast<K>(k), global::haxe.lang.Runtime.genericCast<V>(x), ((global::thx.fp.MapImpl) (lhs) ), ((global::thx.fp.MapImpl) (rhs) ));
				}
				
			}
		}
		
		
		public static global::thx.fp.MapImpl singleLeft<K, V>(K k1, V x1, global::thx.fp.MapImpl t1, global::thx.fp.MapImpl rhs) {
			unchecked {
				if (( rhs.index == 1 )) {
					global::thx.fp.MapImpl t3 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (rhs) ).@params[4]) );
					global::thx.fp.MapImpl t2 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (rhs) ).@params[3]) );
					V x2 = global::haxe.lang.Runtime.genericCast<V>(((global::thx.fp.MapImpl) (rhs) ).@params[2]);
					K k2 = global::haxe.lang.Runtime.genericCast<K>(((global::thx.fp.MapImpl) (rhs) ).@params[1]);
					global::thx.fp.MapImpl lhs = ((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t1) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t2) )) ) + 1 ), k1, x1, t1, t2)) );
					return global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (lhs) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t3) )) ) + 1 ), k2, x2, lhs, t3);
				}
				else {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("damn it, this should never happen", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"singleLeft", "thx.fp._Map.Map_Impl_", "Map.hx"}, new int[]{1981972957}, new double[]{((double) (193) )})));
				}
				
			}
		}
		
		
		public static global::thx.fp.MapImpl singleRight<K, V>(K k1, V x1, global::thx.fp.MapImpl lhs, global::thx.fp.MapImpl t3) {
			unchecked {
				if (( lhs.index == 1 )) {
					global::thx.fp.MapImpl t2 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (lhs) ).@params[4]) );
					global::thx.fp.MapImpl t1 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (lhs) ).@params[3]) );
					V x2 = global::haxe.lang.Runtime.genericCast<V>(((global::thx.fp.MapImpl) (lhs) ).@params[2]);
					K k2 = global::haxe.lang.Runtime.genericCast<K>(((global::thx.fp.MapImpl) (lhs) ).@params[1]);
					global::thx.fp.MapImpl rhs = ((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t2) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t3) )) ) + 1 ), k1, x1, t2, t3)) );
					return global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t1) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (rhs) )) ) + 1 ), k2, x2, t1, rhs);
				}
				else {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("damn it, this should never happen", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"singleRight", "thx.fp._Map.Map_Impl_", "Map.hx"}, new int[]{1981972957}, new double[]{((double) (199) )})));
				}
				
			}
		}
		
		
		public static global::thx.fp.MapImpl doubleLeft<K, V>(K k1, V x1, global::thx.fp.MapImpl t1, global::thx.fp.MapImpl rhs) {
			unchecked {
				if (( rhs.index == 1 )) {
					if (( ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (rhs) ).@params[3]) ).index == 1 )) {
						global::thx.fp.MapImpl t4 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (rhs) ).@params[4]) );
						K k2 = global::haxe.lang.Runtime.genericCast<K>(((global::thx.fp.MapImpl) (rhs) ).@params[1]);
						V x2 = global::haxe.lang.Runtime.genericCast<V>(((global::thx.fp.MapImpl) (rhs) ).@params[2]);
						global::thx.fp.MapImpl t3 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (rhs) ).@params[3]) ).@params[4]) );
						global::thx.fp.MapImpl t2 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (rhs) ).@params[3]) ).@params[3]) );
						V x3 = global::haxe.lang.Runtime.genericCast<V>(((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (rhs) ).@params[3]) ).@params[2]);
						K k3 = global::haxe.lang.Runtime.genericCast<K>(((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (rhs) ).@params[3]) ).@params[1]);
						global::thx.fp.MapImpl lhs = ((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t1) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t2) )) ) + 1 ), k1, x1, t1, t2)) );
						global::thx.fp.MapImpl rhs1 = ((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t3) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t4) )) ) + 1 ), k2, x2, t3, t4)) );
						return global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (lhs) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (rhs1) )) ) + 1 ), k3, x3, lhs, rhs1);
					}
					else {
						throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("damn it, this should never happen", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"doubleLeft", "thx.fp._Map.Map_Impl_", "Map.hx"}, new int[]{1981972957}, new double[]{((double) (206) )})));
					}
					
				}
				else {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("damn it, this should never happen", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"doubleLeft", "thx.fp._Map.Map_Impl_", "Map.hx"}, new int[]{1981972957}, new double[]{((double) (206) )})));
				}
				
			}
		}
		
		
		public static global::thx.fp.MapImpl doubleRight<K, V>(K k1, V x1, global::thx.fp.MapImpl lhs, global::thx.fp.MapImpl t4) {
			unchecked {
				if (( lhs.index == 1 )) {
					if (( ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (lhs) ).@params[4]) ).index == 1 )) {
						K k2 = global::haxe.lang.Runtime.genericCast<K>(((global::thx.fp.MapImpl) (lhs) ).@params[1]);
						V x2 = global::haxe.lang.Runtime.genericCast<V>(((global::thx.fp.MapImpl) (lhs) ).@params[2]);
						global::thx.fp.MapImpl t1 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (lhs) ).@params[3]) );
						global::thx.fp.MapImpl t3 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (lhs) ).@params[4]) ).@params[4]) );
						global::thx.fp.MapImpl t2 = ((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (lhs) ).@params[4]) ).@params[3]) );
						V x3 = global::haxe.lang.Runtime.genericCast<V>(((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (lhs) ).@params[4]) ).@params[2]);
						K k3 = global::haxe.lang.Runtime.genericCast<K>(((global::thx.fp.MapImpl) (((global::thx.fp.MapImpl) (lhs) ).@params[4]) ).@params[1]);
						global::thx.fp.MapImpl lhs1 = ((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t1) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t2) )) ) + 1 ), k2, x2, t1, t2)) );
						global::thx.fp.MapImpl rhs = ((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t3) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (t4) )) ) + 1 ), k1, x1, t3, t4)) );
						return global::thx.fp.MapImpl.Bin(( ( global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (lhs1) )) + global::thx.fp._Map.Map_Impl_.size<K, V>(((global::thx.fp.MapImpl) (rhs) )) ) + 1 ), k3, x3, lhs1, rhs);
					}
					else {
						throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("damn it, this should never happen", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"doubleRight", "thx.fp._Map.Map_Impl_", "Map.hx"}, new int[]{1981972957}, new double[]{((double) (213) )})));
					}
					
				}
				else {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("damn it, this should never happen", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"doubleRight", "thx.fp._Map.Map_Impl_", "Map.hx"}, new int[]{1981972957}, new double[]{((double) (213) )})));
				}
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp._Map {
	public class Map_Impl__values_94__Fun<V> : global::haxe.lang.Function {
		
		public Map_Impl__values_94__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			V v = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<V>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<V>(__fn_dyn2)) );
			global::Array<V> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<V>) (global::Array<object>.__hx_cast<V>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<V>) (global::Array<object>.__hx_cast<V>(((global::Array) (__fn_dyn1) ))) )) );
			acc.push(v);
			return acc;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class MapImpl : global::haxe.lang.ParamEnum {
		
		public MapImpl(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"Tip", "Bin"};
		
		public static readonly global::thx.fp.MapImpl Tip = new global::thx.fp.MapImpl(0, null);
		
		public static global::thx.fp.MapImpl Bin(int size, object key, object @value, global::thx.fp.MapImpl lhs, global::thx.fp.MapImpl rhs) {
			unchecked {
				return new global::thx.fp.MapImpl(1, new object[]{size, key, @value, lhs, rhs});
			}
		}
		
		
		public override string getTag() {
			return global::thx.fp.MapImpl.__hx_constructs[this.index];
		}
		
		
	}
}


