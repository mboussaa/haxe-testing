// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestReadonlyArray : global::haxe.lang.HxObject {
		
		public TestReadonlyArray(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestReadonlyArray(int i) {
			global::thx.TestReadonlyArray.__hx_ctor_thx_TestReadonlyArray(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestReadonlyArray(global::thx.TestReadonlyArray __temp_me131, int i) {
			__temp_me131.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestReadonlyArray(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestReadonlyArray(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testInsertAt() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<int> a = new global::Array<int>(new int[]{1, 2, 4});
					global::Array<int> b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(0, true)).concat(new global::Array<int>(new int[]{0})).concat(((global::Array<int>) (a) ).slice(0, default(global::haxe.lang.Null<int>)))) );
					global::utest.Assert.isTrue(( a != b ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInsertAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{0, 1, 2, 4}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInsertAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
					b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(2, true)).concat(new global::Array<int>(new int[]{3})).concat(((global::Array<int>) (a) ).slice(2, default(global::haxe.lang.Null<int>)))) );
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3, 4}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInsertAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
					b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(10, true)).concat(new global::Array<int>(new int[]{5})).concat(((global::Array<int>) (a) ).slice(10, default(global::haxe.lang.Null<int>)))) );
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 4, 5}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInsertAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
				}
				
			}
		}
		
		
		public virtual void testReplaceAt() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<int> a = new global::Array<int>(new int[]{1, 2, 4});
					global::Array<int> b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(0, true)).concat(new global::Array<int>(new int[]{0})).concat(((global::Array<int>) (a) ).slice(1, default(global::haxe.lang.Null<int>)))) );
					global::utest.Assert.isTrue(( a != b ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReplaceAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (34) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{0, 2, 4}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReplaceAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
					b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(2, true)).concat(new global::Array<int>(new int[]{3})).concat(((global::Array<int>) (a) ).slice(3, default(global::haxe.lang.Null<int>)))) );
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReplaceAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					b = ((global::Array<int>) (((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(10, true)).concat(new global::Array<int>(new int[]{5})).concat(((global::Array<int>) (a) ).slice(11, default(global::haxe.lang.Null<int>)))) );
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 4, 5}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testReplaceAt", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
				}
				
			}
		}
		
		
		public virtual void testPush() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<int> a = new global::Array<int>(new int[]{1, 2, 3});
					global::Array<int> b = ((global::Array<int>) (((global::Array<int>) (a) ).concat(new global::Array<int>(new int[]{4}))) );
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), a, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPush", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3, 4}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPush", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
				}
				
			}
		}
		
		
		public virtual void testPop() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<int> a = new global::Array<int>(new int[]{1, 2});
					object tmp = null;
					if (( ((global::Array<int>) (a) ).length == 0 )) {
						tmp = ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{(default(global::haxe.lang.Null<int>)).toDynamic(), ((global::Array<int>) (a) )}, new int[]{}, new double[]{})) );
					}
					else {
						int @value = ((global::Array<int>) (a) )[( ((global::Array<int>) (a) ).length - 1 )];
						int pos = ( ((global::Array<int>) (a) ).length - 1 );
						global::Array<int> array = ((global::Array<int>) (a) ).slice(0, new global::haxe.lang.Null<int>(pos, true)).concat(((global::Array<int>) (a) ).slice(( pos + 1 ), default(global::haxe.lang.Null<int>)));
						tmp = ((object) (new global::haxe.lang.DynamicObject(new int[]{21234}, new object[]{array}, new int[]{21233}, new double[]{((double) (@value) )})) );
					}
					
					object result = ((object) (tmp) );
					global::utest.Assert.same(2, ((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (58) )}));
					global::Array<int> b = ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) );
					object tmp1 = null;
					if (( ((global::Array<int>) (b) ).length == 0 )) {
						tmp1 = ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{(default(global::haxe.lang.Null<int>)).toDynamic(), ((global::Array<int>) (b) )}, new int[]{}, new double[]{})) );
					}
					else {
						int value1 = ((global::Array<int>) (b) )[( ((global::Array<int>) (b) ).length - 1 )];
						int pos1 = ( ((global::Array<int>) (b) ).length - 1 );
						global::Array<int> array1 = ((global::Array<int>) (b) ).slice(0, new global::haxe.lang.Null<int>(pos1, true)).concat(((global::Array<int>) (b) ).slice(( pos1 + 1 ), default(global::haxe.lang.Null<int>)));
						tmp1 = ((object) (new global::haxe.lang.DynamicObject(new int[]{21234}, new object[]{array1}, new int[]{21233}, new double[]{((double) (value1) )})) );
					}
					
					result = ((object) (tmp1) );
					global::utest.Assert.same(1, ((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (62) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
					global::Array<int> c = ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) );
					object tmp2 = null;
					if (( ((global::Array<int>) (c) ).length == 0 )) {
						tmp2 = ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{(default(global::haxe.lang.Null<int>)).toDynamic(), ((global::Array<int>) (c) )}, new int[]{}, new double[]{})) );
					}
					else {
						int value2 = ((global::Array<int>) (c) )[( ((global::Array<int>) (c) ).length - 1 )];
						int pos2 = ( ((global::Array<int>) (c) ).length - 1 );
						global::Array<int> array2 = ((global::Array<int>) (c) ).slice(0, new global::haxe.lang.Null<int>(pos2, true)).concat(((global::Array<int>) (c) ).slice(( pos2 + 1 ), default(global::haxe.lang.Null<int>)));
						tmp2 = ((object) (new global::haxe.lang.DynamicObject(new int[]{21234}, new object[]{array2}, new int[]{21233}, new double[]{((double) (value2) )})) );
					}
					
					result = ((object) (tmp2) );
					global::utest.Assert.isNull(((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (68) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2}), a, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPop", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
				}
				
			}
		}
		
		
		public virtual void testShift() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<int> a = new global::Array<int>(new int[]{1, 2});
					object result = global::thx._ReadonlyArray.ReadonlyArray_Impl_.shift<int>(((global::Array<int>) (a) ));
					global::utest.Assert.same(1, ((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{2}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (79) )}));
					result = global::thx._ReadonlyArray.ReadonlyArray_Impl_.shift<int>(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ));
					global::utest.Assert.same(2, ((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (84) )}));
					result = global::thx._ReadonlyArray.ReadonlyArray_Impl_.shift<int>(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ));
					global::utest.Assert.isNull(((object) (global::haxe.lang.Runtime.getField(result, "_0", 21233, true)) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (88) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(result, "_1", 21234, true)) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2}), a, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testShift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (91) )}));
				}
				
			}
		}
		
		
		public virtual void testUnshift() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<int> a = new global::Array<int>(new int[]{1, 2, 3});
					global::Array<int> b = ((global::Array<int>) (new global::Array<int>(new int[]{4}).concat(((global::Array<int>) (a) ))) );
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), a, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnshift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (98) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{4, 1, 2, 3}), b, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnshift", "thx.TestReadonlyArray", "TestReadonlyArray.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 897372503:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUnshift", 897372503)) );
					}
					
					
					case 1160063696:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testShift", 1160063696)) );
					}
					
					
					case 1036242015:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPop", 1036242015)) );
					}
					
					
					case 1301518156:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPush", 1301518156)) );
					}
					
					
					case 791442325:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testReplaceAt", 791442325)) );
					}
					
					
					case 891724542:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testInsertAt", 891724542)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 897372503:
					{
						this.testUnshift();
						break;
					}
					
					
					case 1160063696:
					{
						this.testShift();
						break;
					}
					
					
					case 1036242015:
					{
						this.testPop();
						break;
					}
					
					
					case 1301518156:
					{
						this.testPush();
						break;
					}
					
					
					case 791442325:
					{
						this.testReplaceAt();
						break;
					}
					
					
					case 891724542:
					{
						this.testInsertAt();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


