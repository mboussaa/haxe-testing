// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList : global::haxe.lang.HxObject {
		
		public TestList(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestList(int i) {
			global::thx.fp.TestList.__hx_ctor_thx_fp_TestList(this, i);
		}
		
		
		public static void __hx_ctor_thx_fp_TestList(global::thx.fp.TestList __temp_me138, int i) {
			__temp_me138.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.fp.TestList(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.fp.TestList(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testFoldLeft() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.ListImpl list = global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(3, global::thx.fp.ListImpl.Nil)));
					global::utest.Assert.@equals(6, ((int) (global::haxe.lang.Runtime.toInt(global::thx.fp._List.List_Impl_.foldLeft<object, int>(((global::thx.fp.ListImpl) (list) ), ((object) (0) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestList_testFoldLeft_17__Fun.__hx_current != null )) ? (global::thx.fp.TestList_testFoldLeft_17__Fun.__hx_current) : (global::thx.fp.TestList_testFoldLeft_17__Fun.__hx_current = ((global::thx.fp.TestList_testFoldLeft_17__Fun) (new global::thx.fp.TestList_testFoldLeft_17__Fun()) )) )) )))) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFoldLeft", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::thx.fp._List.List_Impl_.foldLeft<object, int>(((global::thx.fp.ListImpl) (list) ), ((object) (new global::Array<int>(new int[]{})) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestList_testFoldLeft_19__Fun.__hx_current != null )) ? (global::thx.fp.TestList_testFoldLeft_19__Fun.__hx_current) : (global::thx.fp.TestList_testFoldLeft_19__Fun.__hx_current = ((global::thx.fp.TestList_testFoldLeft_19__Fun) (new global::thx.fp.TestList_testFoldLeft_19__Fun()) )) )) ))) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFoldLeft", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
				}
				
			}
		}
		
		
		public virtual void testToArray() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.ListImpl list = global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(3, global::thx.fp.ListImpl.Nil)));
					global::utest.Assert.same(new global::Array<object>(new object[]{1, 2, 3}), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::thx.fp._List.List_Impl_.foldLeft<object, int>(((global::thx.fp.ListImpl) (list) ), ((object) (new global::Array<int>(new int[]{})) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestList_testToArray_28__Fun.__hx_current != null )) ? (global::thx.fp.TestList_testToArray_28__Fun.__hx_current) : (global::thx.fp.TestList_testToArray_28__Fun.__hx_current = ((global::thx.fp.TestList_testToArray_28__Fun) (new global::thx.fp.TestList_testToArray_28__Fun()) )) )) ))) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToArray", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
				}
				
			}
		}
		
		
		public virtual void testIntersperse() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.ListImpl list = global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(3, global::thx.fp.ListImpl.Nil)));
					global::thx.fp.ListImpl interspersed = global::thx.fp._List.List_Impl_.intersperse<int>(((global::thx.fp.ListImpl) (list) ), ((int) (0) ));
					global::utest.Assert.same(global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(0, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(0, global::thx.fp.ListImpl.Cons(3, global::thx.fp.ListImpl.Nil))))), interspersed, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntersperse", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
				}
				
			}
		}
		
		
		public virtual void testFromArray() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<int> arr = new global::Array<int>(new int[]{1, 2, 3, 4});
					global::Array<int> _e = arr;
					global::utest.Assert.same(arr, ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::thx.fp._List.List_Impl_.foldLeft<object, int>(((global::thx.fp.ListImpl) ((new global::thx.fp.TestList_testFromArray_41__Fun_0(_e)).__hx_invoke2_o(default(double), ( (( global::thx.fp.TestList_testFromArray_41__Fun_1.__hx_current != null )) ? (global::thx.fp.TestList_testFromArray_41__Fun_1.__hx_current) : (global::thx.fp.TestList_testFromArray_41__Fun_1.__hx_current = ((global::thx.fp.TestList_testFromArray_41__Fun_1) (new global::thx.fp.TestList_testFromArray_41__Fun_1()) )) ), default(double), global::thx.fp._List.List_Impl_.empty<int>())) ), ((object) (new global::Array<int>(new int[]{})) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestList_testFromArray_41__Fun.__hx_current != null )) ? (global::thx.fp.TestList_testFromArray_41__Fun.__hx_current) : (global::thx.fp.TestList_testFromArray_41__Fun.__hx_current = ((global::thx.fp.TestList_testFromArray_41__Fun) (new global::thx.fp.TestList_testFromArray_41__Fun()) )) )) ))) ))) ), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromArray", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
				}
				
			}
		}
		
		
		public virtual void testConcat() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.ListImpl l1 = global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Nil));
					global::thx.fp.ListImpl l2 = global::thx.fp.ListImpl.Cons(3, global::thx.fp.ListImpl.Cons(4, global::thx.fp.ListImpl.Nil));
					global::thx.fp.ListImpl l = global::thx.fp._List.List_Impl_.concat<int>(((global::thx.fp.ListImpl) (l1) ), ((global::thx.fp.ListImpl) (l2) ));
					global::utest.Assert.same(global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(3, global::thx.fp.ListImpl.Cons(4, global::thx.fp.ListImpl.Nil)))), l, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testConcat", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
				}
				
			}
		}
		
		
		public virtual void testToString() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.ListImpl list = global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(3, global::thx.fp.ListImpl.Nil)));
					global::utest.Assert.same("[1,2,3]", global::thx.fp._List.List_Impl_.toStringWithShow<int>(((global::thx.fp.ListImpl) (list) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestList_testToString_55__Fun.__hx_current != null )) ? (global::thx.fp.TestList_testToString_55__Fun.__hx_current) : (global::thx.fp.TestList_testToString_55__Fun.__hx_current = ((global::thx.fp.TestList_testToString_55__Fun) (new global::thx.fp.TestList_testToString_55__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToString", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
					global::thx.fp.ListImpl list1 = global::thx.fp.ListImpl.Cons("1", global::thx.fp.ListImpl.Cons("2", global::thx.fp.ListImpl.Cons("3", global::thx.fp.ListImpl.Nil)));
					global::utest.Assert.same("[1,2,3]", global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", global::haxe.lang.Runtime.toString(global::thx.fp._List.List_Impl_.foldLeft<object, object>(((global::thx.fp.ListImpl) (global::thx.fp._List.List_Impl_.intersperse<object>(((global::thx.fp.ListImpl) (list1) ), ((object) (",") ))) ), ((object) ("") ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestList_testToString_58__Fun.__hx_current != null )) ? (global::thx.fp.TestList_testToString_58__Fun.__hx_current) : (global::thx.fp.TestList_testToString_58__Fun.__hx_current = ((global::thx.fp.TestList_testToString_58__Fun) (new global::thx.fp.TestList_testToString_58__Fun()) )) )) )))), "]"), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToString", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (58) )}));
				}
				
			}
		}
		
		
		public virtual void testMap() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.fp.ListImpl list = global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(3, global::thx.fp.ListImpl.Nil)));
					global::utest.Assert.same(global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(4, global::thx.fp.ListImpl.Cons(6, global::thx.fp.ListImpl.Nil))), global::thx.fp._List.List_Impl_.map<object, int>(((global::thx.fp.ListImpl) (list) ), ((global::haxe.lang.Function) (( (( global::thx.fp.TestList_testMap_64__Fun.__hx_current != null )) ? (global::thx.fp.TestList_testMap_64__Fun.__hx_current) : (global::thx.fp.TestList_testMap_64__Fun.__hx_current = ((global::thx.fp.TestList_testMap_64__Fun) (new global::thx.fp.TestList_testMap_64__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMap", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (64) )}));
				}
				
			}
		}
		
		
		public virtual void testFlatMap() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					int i = _g1++;
					global::thx.fp.ListImpl list = global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(3, global::thx.fp.ListImpl.Nil)));
					global::haxe.lang.Function[] map = new global::haxe.lang.Function[]{null};
					map[0] = new global::thx.fp.TestList_testFlatMap_70__Fun(map);
					global::thx.fp.ListImpl slist = global::thx.fp._List.List_Impl_.flatMap<object, int>(((global::thx.fp.ListImpl) (list) ), ((global::haxe.lang.Function) (map[0]) ));
					global::utest.Assert.same(global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Cons(3, global::thx.fp.ListImpl.Cons(2, global::thx.fp.ListImpl.Cons(1, global::thx.fp.ListImpl.Nil)))))), slist, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlatMap", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
				}
				
			}
		}
		
		
		public virtual void testZip5Ap() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<object> _e = new global::Array<object>(new object[]{"a", "b", "c"});
					global::thx.fp.ListImpl sx = ((global::thx.fp.ListImpl) ((new global::thx.fp.TestList_testZip5Ap_83__Fun(_e)).__hx_invoke2_o(default(double), ( (( global::thx.fp.TestList_testZip5Ap_83__Fun_0.__hx_current != null )) ? (global::thx.fp.TestList_testZip5Ap_83__Fun_0.__hx_current) : (global::thx.fp.TestList_testZip5Ap_83__Fun_0.__hx_current = ((global::thx.fp.TestList_testZip5Ap_83__Fun_0) (new global::thx.fp.TestList_testZip5Ap_83__Fun_0()) )) ), default(double), global::thx.fp._List.List_Impl_.empty<object>())) );
					global::Array<int> _e1 = new global::Array<int>(new int[]{1, 2});
					global::thx.fp.ListImpl ix = ((global::thx.fp.ListImpl) ((new global::thx.fp.TestList_testZip5Ap_84__Fun(_e1)).__hx_invoke2_o(default(double), ( (( global::thx.fp.TestList_testZip5Ap_84__Fun_0.__hx_current != null )) ? (global::thx.fp.TestList_testZip5Ap_84__Fun_0.__hx_current) : (global::thx.fp.TestList_testZip5Ap_84__Fun_0.__hx_current = ((global::thx.fp.TestList_testZip5Ap_84__Fun_0) (new global::thx.fp.TestList_testZip5Ap_84__Fun_0()) )) ), default(double), global::thx.fp._List.List_Impl_.empty<int>())) );
					global::Array<object> _e2 = new global::Array<object>(new object[]{"x", "y", "z"});
					global::thx.fp.ListImpl tx = ((global::thx.fp.ListImpl) ((new global::thx.fp.TestList_testZip5Ap_85__Fun(_e2)).__hx_invoke2_o(default(double), ( (( global::thx.fp.TestList_testZip5Ap_85__Fun_0.__hx_current != null )) ? (global::thx.fp.TestList_testZip5Ap_85__Fun_0.__hx_current) : (global::thx.fp.TestList_testZip5Ap_85__Fun_0.__hx_current = ((global::thx.fp.TestList_testZip5Ap_85__Fun_0) (new global::thx.fp.TestList_testZip5Ap_85__Fun_0()) )) ), default(double), global::thx.fp._List.List_Impl_.empty<object>())) );
					global::Array<int> _e3 = new global::Array<int>(new int[]{3, 4});
					global::thx.fp.ListImpl jx = ((global::thx.fp.ListImpl) ((new global::thx.fp.TestList_testZip5Ap_86__Fun(_e3)).__hx_invoke2_o(default(double), ( (( global::thx.fp.TestList_testZip5Ap_86__Fun_0.__hx_current != null )) ? (global::thx.fp.TestList_testZip5Ap_86__Fun_0.__hx_current) : (global::thx.fp.TestList_testZip5Ap_86__Fun_0.__hx_current = ((global::thx.fp.TestList_testZip5Ap_86__Fun_0) (new global::thx.fp.TestList_testZip5Ap_86__Fun_0()) )) ), default(double), global::thx.fp._List.List_Impl_.empty<int>())) );
					global::Array<bool> _e4 = new global::Array<bool>(new bool[]{true, false, true});
					global::thx.fp.ListImpl bx = ((global::thx.fp.ListImpl) ((new global::thx.fp.TestList_testZip5Ap_87__Fun(_e4)).__hx_invoke2_o(default(double), ( (( global::thx.fp.TestList_testZip5Ap_87__Fun_0.__hx_current != null )) ? (global::thx.fp.TestList_testZip5Ap_87__Fun_0.__hx_current) : (global::thx.fp.TestList_testZip5Ap_87__Fun_0.__hx_current = ((global::thx.fp.TestList_testZip5Ap_87__Fun_0) (new global::thx.fp.TestList_testZip5Ap_87__Fun_0()) )) ), default(double), global::thx.fp._List.List_Impl_.empty<bool>())) );
					global::Array<object> _e5 = new global::Array<object>(new object[]{"a1x3true", "b2y4false"});
					global::utest.Assert.same(((global::thx.fp.ListImpl) ((new global::thx.fp.TestList_testZip5Ap_89__Fun_0(_e5)).__hx_invoke2_o(default(double), ( (( global::thx.fp.TestList_testZip5Ap_89__Fun_1.__hx_current != null )) ? (global::thx.fp.TestList_testZip5Ap_89__Fun_1.__hx_current) : (global::thx.fp.TestList_testZip5Ap_89__Fun_1.__hx_current = ((global::thx.fp.TestList_testZip5Ap_89__Fun_1) (new global::thx.fp.TestList_testZip5Ap_89__Fun_1()) )) ), default(double), global::thx.fp._List.List_Impl_.empty<object>())) ), global::thx.fp._List.List_Impl_.zip5Ap<object, int, object, int, bool, object>(((global::haxe.lang.Function) (( (( global::thx.fp.TestList_testZip5Ap_89__Fun.__hx_current != null )) ? (global::thx.fp.TestList_testZip5Ap_89__Fun.__hx_current) : (global::thx.fp.TestList_testZip5Ap_89__Fun.__hx_current = ((global::thx.fp.TestList_testZip5Ap_89__Fun) (new global::thx.fp.TestList_testZip5Ap_89__Fun()) )) )) ), ((global::thx.fp.ListImpl) (sx) ), ((global::thx.fp.ListImpl) (ix) ), ((global::thx.fp.ListImpl) (tx) ), ((global::thx.fp.ListImpl) (jx) ), ((global::thx.fp.ListImpl) (bx) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testZip5Ap", "thx.fp.TestList", "TestList.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 532777525:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testZip5Ap", 532777525)) );
					}
					
					
					case 598146609:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFlatMap", 598146609)) );
					}
					
					
					case 1036089706:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMap", 1036089706)) );
					}
					
					
					case 729151262:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToString", 729151262)) );
					}
					
					
					case 1623478022:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testConcat", 1623478022)) );
					}
					
					
					case 223532317:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromArray", 223532317)) );
					}
					
					
					case 904319558:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIntersperse", 904319558)) );
					}
					
					
					case 786212844:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToArray", 786212844)) );
					}
					
					
					case 974474010:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFoldLeft", 974474010)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 532777525:
					{
						this.testZip5Ap();
						break;
					}
					
					
					case 598146609:
					{
						this.testFlatMap();
						break;
					}
					
					
					case 1036089706:
					{
						this.testMap();
						break;
					}
					
					
					case 729151262:
					{
						this.testToString();
						break;
					}
					
					
					case 1623478022:
					{
						this.testConcat();
						break;
					}
					
					
					case 223532317:
					{
						this.testFromArray();
						break;
					}
					
					
					case 904319558:
					{
						this.testIntersperse();
						break;
					}
					
					
					case 786212844:
					{
						this.testToArray();
						break;
					}
					
					
					case 974474010:
					{
						this.testFoldLeft();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testFoldLeft_17__Fun : global::haxe.lang.Function {
		
		public TestList_testFoldLeft_17__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.fp.TestList_testFoldLeft_17__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> _1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::haxe.lang.Null<int> _0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float1) ), true)) : (( (( __fn_dyn1 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn1)) )) );
			return ((double) (( (_0).@value + (_1).@value )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testFoldLeft_19__Fun : global::haxe.lang.Function {
		
		public TestList_testFoldLeft_19__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testFoldLeft_19__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int v = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			global::Array<int> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
			acc.push(v);
			return acc;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testToArray_28__Fun : global::haxe.lang.Function {
		
		public TestList_testToArray_28__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testToArray_28__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int a = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			global::Array<int> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
			acc.push(a);
			return acc;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testFromArray_41__Fun_1 : global::haxe.lang.Function {
		
		public TestList_testFromArray_41__Fun_1() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testFromArray_41__Fun_1 __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> _1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::thx.fp.ListImpl _0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx.fp.ListImpl) (__fn_dyn1) )) )) );
			return ((global::thx.fp.ListImpl) (global::thx.fp.ListImpl.Cons((_1).toDynamic(), _0)) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testFromArray_41__Fun_0 : global::haxe.lang.Function {
		
		public TestList_testFromArray_41__Fun_0(global::Array<int> _e) : base(2, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::thx.fp.ListImpl initial = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float2) )) )) : (((global::thx.fp.ListImpl) (__fn_dyn2) )) );
			global::haxe.lang.Function f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			global::thx.fp.ListImpl initial1 = initial;
			int i = this._e.length;
			while ((  -- i >= 0 )) {
				initial1 = ((global::thx.fp.ListImpl) (f.__hx_invoke2_o(default(double), initial1, ((double) (((int) (((global::Array<int>) (this._e) )[i]) )) ), global::haxe.lang.Runtime.undefined)) );
			}
			
			return initial1;
		}
		
		
		public global::Array<int> _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testFromArray_41__Fun : global::haxe.lang.Function {
		
		public TestList_testFromArray_41__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testFromArray_41__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int a = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			global::Array<int> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
			acc.push(a);
			return acc;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testToString_55__Fun : global::haxe.lang.Function {
		
		public TestList_testToString_55__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.fp.TestList_testToString_55__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int a1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return global::thx.Ints.toString(a1, 10);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testToString_58__Fun : global::haxe.lang.Function {
		
		public TestList_testToString_58__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testToString_58__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			string _1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (( (( __fn_dyn2 == null )) ? (null) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) )) );
			string _0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (( (( __fn_dyn1 == null )) ? (null) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) )) );
			return ( ((string) (_0) ) + ((string) (_1) ) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testMap_64__Fun : global::haxe.lang.Function {
		
		public TestList_testMap_64__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.fp.TestList_testMap_64__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return ((double) (( v * 2 )) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testFlatMap_70__Fun : global::haxe.lang.Function {
		
		public TestList_testFlatMap_70__Fun(global::haxe.lang.Function[] map) : base(1, 0) {
			this.map = map;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				if (( v == 0 )) {
					return ((global::thx.fp.ListImpl) (global::thx.fp.ListImpl.Nil) );
				}
				else {
					return global::thx.fp.ListImpl.Cons(v, ((global::thx.fp.ListImpl) (this.map[0].__hx_invoke1_o(((double) (( v - 1 )) ), global::haxe.lang.Runtime.undefined)) ));
				}
				
			}
		}
		
		
		public global::haxe.lang.Function[] map;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_83__Fun_0 : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_83__Fun_0() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testZip5Ap_83__Fun_0 __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			string _1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (( (( __fn_dyn2 == null )) ? (null) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) )) );
			global::thx.fp.ListImpl _0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx.fp.ListImpl) (__fn_dyn1) )) )) );
			return ((global::thx.fp.ListImpl) (global::thx.fp.ListImpl.Cons(_1, _0)) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_83__Fun : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_83__Fun(global::Array<object> _e) : base(2, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::thx.fp.ListImpl initial = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float2) )) )) : (((global::thx.fp.ListImpl) (__fn_dyn2) )) );
			global::haxe.lang.Function f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			global::thx.fp.ListImpl initial1 = initial;
			int i = this._e.length;
			while ((  -- i >= 0 )) {
				initial1 = ((global::thx.fp.ListImpl) (f.__hx_invoke2_o(default(double), initial1, default(double), global::haxe.lang.Runtime.toString(((global::Array<object>) (this._e) )[i]))) );
			}
			
			return initial1;
		}
		
		
		public global::Array<object> _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_84__Fun_0 : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_84__Fun_0() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testZip5Ap_84__Fun_0 __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> _11 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::thx.fp.ListImpl _01 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx.fp.ListImpl) (__fn_dyn1) )) )) );
			return ((global::thx.fp.ListImpl) (global::thx.fp.ListImpl.Cons((_11).toDynamic(), _01)) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_84__Fun : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_84__Fun(global::Array<int> _e1) : base(2, 0) {
			this._e1 = _e1;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::thx.fp.ListImpl initial2 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float2) )) )) : (((global::thx.fp.ListImpl) (__fn_dyn2) )) );
			global::haxe.lang.Function f1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			global::thx.fp.ListImpl initial3 = initial2;
			int i1 = this._e1.length;
			while ((  -- i1 >= 0 )) {
				initial3 = ((global::thx.fp.ListImpl) (f1.__hx_invoke2_o(default(double), initial3, ((double) (((int) (((global::Array<int>) (this._e1) )[i1]) )) ), global::haxe.lang.Runtime.undefined)) );
			}
			
			return initial3;
		}
		
		
		public global::Array<int> _e1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_85__Fun_0 : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_85__Fun_0() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testZip5Ap_85__Fun_0 __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			string _12 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (( (( __fn_dyn2 == null )) ? (null) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) )) );
			global::thx.fp.ListImpl _02 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx.fp.ListImpl) (__fn_dyn1) )) )) );
			return ((global::thx.fp.ListImpl) (global::thx.fp.ListImpl.Cons(_12, _02)) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_85__Fun : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_85__Fun(global::Array<object> _e2) : base(2, 0) {
			this._e2 = _e2;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::thx.fp.ListImpl initial4 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float2) )) )) : (((global::thx.fp.ListImpl) (__fn_dyn2) )) );
			global::haxe.lang.Function f2 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			global::thx.fp.ListImpl initial5 = initial4;
			int i2 = this._e2.length;
			while ((  -- i2 >= 0 )) {
				initial5 = ((global::thx.fp.ListImpl) (f2.__hx_invoke2_o(default(double), initial5, default(double), global::haxe.lang.Runtime.toString(((global::Array<object>) (this._e2) )[i2]))) );
			}
			
			return initial5;
		}
		
		
		public global::Array<object> _e2;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_86__Fun_0 : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_86__Fun_0() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testZip5Ap_86__Fun_0 __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> _13 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::thx.fp.ListImpl _03 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx.fp.ListImpl) (__fn_dyn1) )) )) );
			return ((global::thx.fp.ListImpl) (global::thx.fp.ListImpl.Cons((_13).toDynamic(), _03)) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_86__Fun : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_86__Fun(global::Array<int> _e3) : base(2, 0) {
			this._e3 = _e3;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::thx.fp.ListImpl initial6 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float2) )) )) : (((global::thx.fp.ListImpl) (__fn_dyn2) )) );
			global::haxe.lang.Function f3 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			global::thx.fp.ListImpl initial7 = initial6;
			int i3 = this._e3.length;
			while ((  -- i3 >= 0 )) {
				initial7 = ((global::thx.fp.ListImpl) (f3.__hx_invoke2_o(default(double), initial7, ((double) (((int) (((global::Array<int>) (this._e3) )[i3]) )) ), global::haxe.lang.Runtime.undefined)) );
			}
			
			return initial7;
		}
		
		
		public global::Array<int> _e3;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_87__Fun_0 : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_87__Fun_0() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testZip5Ap_87__Fun_0 __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<bool> _14 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<bool>(global::haxe.lang.Runtime.toBool(((object) (__fn_float2) )), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<bool>)) : (global::haxe.lang.Null<object>.ofDynamic<bool>(__fn_dyn2)) )) );
			global::thx.fp.ListImpl _04 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx.fp.ListImpl) (__fn_dyn1) )) )) );
			return ((global::thx.fp.ListImpl) (global::thx.fp.ListImpl.Cons((_14).toDynamic(), _04)) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_87__Fun : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_87__Fun(global::Array<bool> _e4) : base(2, 0) {
			this._e4 = _e4;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::thx.fp.ListImpl initial8 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float2) )) )) : (((global::thx.fp.ListImpl) (__fn_dyn2) )) );
			global::haxe.lang.Function f4 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			global::thx.fp.ListImpl initial9 = initial8;
			int i4 = this._e4.length;
			while ((  -- i4 >= 0 )) {
				initial9 = ((global::thx.fp.ListImpl) (f4.__hx_invoke2_o(default(double), initial9, default(double), ((bool) (((global::Array<bool>) (this._e4) )[i4]) ))) );
			}
			
			return initial9;
		}
		
		
		public global::Array<bool> _e4;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_89__Fun_1 : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_89__Fun_1() : base(2, 0) {
		}
		
		
		public static global::thx.fp.TestList_testZip5Ap_89__Fun_1 __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			string _15 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (( (( __fn_dyn2 == null )) ? (null) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) )) );
			global::thx.fp.ListImpl _05 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx.fp.ListImpl) (__fn_dyn1) )) )) );
			return ((global::thx.fp.ListImpl) (global::thx.fp.ListImpl.Cons(_15, _05)) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_89__Fun_0 : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_89__Fun_0(global::Array<object> _e5) : base(2, 0) {
			this._e5 = _e5;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::thx.fp.ListImpl initial10 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.fp.ListImpl) (((object) (__fn_float2) )) )) : (((global::thx.fp.ListImpl) (__fn_dyn2) )) );
			global::haxe.lang.Function f5 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			global::thx.fp.ListImpl initial11 = initial10;
			int i5 = this._e5.length;
			while ((  -- i5 >= 0 )) {
				initial11 = ((global::thx.fp.ListImpl) (f5.__hx_invoke2_o(default(double), initial11, default(double), global::haxe.lang.Runtime.toString(((global::Array<object>) (this._e5) )[i5]))) );
			}
			
			return initial11;
		}
		
		
		public global::Array<object> _e5;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.fp {
	public class TestList_testZip5Ap_89__Fun : global::haxe.lang.Function {
		
		public TestList_testZip5Ap_89__Fun() : base(5, 0) {
		}
		
		
		public static global::thx.fp.TestList_testZip5Ap_89__Fun __hx_current;
		
		public override object __hx_invoke5_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3, double __fn_float4, object __fn_dyn4, double __fn_float5, object __fn_dyn5) {
			bool b = ( (( __fn_dyn5 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float5) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn5)) );
			int j = ( (( __fn_dyn4 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float4) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn4)) )) );
			string t = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float3)) : (global::haxe.lang.Runtime.toString(__fn_dyn3)) );
			int i6 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			string s = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", s), global::haxe.lang.Runtime.toString(i6)), t), global::haxe.lang.Runtime.toString(j)), global::Std.@string(b));
		}
		
		
	}
}


