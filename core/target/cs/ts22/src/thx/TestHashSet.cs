// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestHashSet : global::haxe.lang.HxObject {
		
		public TestHashSet(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestHashSet(int i) {
			global::thx.TestHashSet.__hx_ctor_thx_TestHashSet(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestHashSet(global::thx.TestHashSet __temp_me132, int i) {
			__temp_me132.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestHashSet(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestHashSet(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testCreate() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds._HashMap.HashMapData<object, bool> s = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (1) )), new global::thx.TestItem(((int) (3) )), new global::thx.TestItem(((int) (2) )), new global::thx.TestItem(((int) (3) )), new global::thx.TestItem(((int) (1) ))})) ));
					global::utest.Assert.same(3, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ).values.exists(new global::thx.TestItem(((int) (1) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCreate", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
				}
				
			}
		}
		
		
		public virtual void testEmpty() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds._HashMap.HashMapData<object, bool> s1 = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (1) ))})) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> s2 = global::thx._HashSet.HashSet_Impl_.empty<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ));
					global::utest.Assert.same(1, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEmpty", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
					global::utest.Assert.same(0, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testEmpty", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
				}
				
			}
		}
		
		
		public virtual void testExists() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.TestItem i1 = new global::thx.TestItem(((int) (1) ));
					global::thx.TestItem i2a = new global::thx.TestItem(((int) (2) ));
					global::thx.TestItem i2b = new global::thx.TestItem(((int) (2) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> s = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{i1, i2a, i2b})) ));
					global::utest.Assert.same(2, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExists", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (34) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ).values.exists(i1.hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExists", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ).values.exists(new global::thx.TestItem(((int) (1) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExists", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ).values.exists(i2a.hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExists", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ).values.exists(i2b.hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExists", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ).values.exists(new global::thx.TestItem(((int) (2) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExists", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
				}
				
			}
		}
		
		
		public virtual void testAdd() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds._HashMap.HashMapData<object, bool> s = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (null) ));
					global::utest.Assert.isTrue(global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ), ((object) (new global::thx.TestItem(((int) (1) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAdd", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
					global::utest.Assert.isTrue(global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ), ((object) (new global::thx.TestItem(((int) (2) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAdd", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
					global::utest.Assert.isFalse(global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ), ((object) (new global::thx.TestItem(((int) (2) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAdd", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
					global::utest.Assert.isTrue(global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ), ((object) (new global::thx.TestItem(((int) (3) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAdd", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
					global::utest.Assert.isFalse(global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ), ((object) (new global::thx.TestItem(((int) (3) ))) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAdd", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
					global::utest.Assert.same(3, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testAdd", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				}
				
			}
		}
		
		
		public virtual void testPush() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds._HashMap.HashMapData<object, bool> s = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (null) ));
					global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ), ((object) (new global::thx.TestItem(((int) (1) ))) ));
					global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ), ((object) (new global::thx.TestItem(((int) (2) ))) ));
					global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ), ((object) (new global::thx.TestItem(((int) (2) ))) ));
					global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ), ((object) (new global::thx.TestItem(((int) (3) ))) ));
					global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ), ((object) (new global::thx.TestItem(((int) (3) ))) ));
					global::utest.Assert.same(3, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPush", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
				}
				
			}
		}
		
		
		public virtual void testRemove() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.TestItem i1 = new global::thx.TestItem(((int) (1) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> s = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{i1, new global::thx.TestItem(((int) (2) ))})) ));
					{
						((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ).values.@remove(i1.hashCode());
						((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ).keys.@remove(i1.hashCode());
					}
					
					global::utest.Assert.same(1, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRemove", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
					{
						global::thx.TestItem v = new global::thx.TestItem(((int) (2) ));
						((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ).values.@remove(v.hashCode());
						((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ).keys.@remove(v.hashCode());
					}
					
					global::utest.Assert.same(0, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRemove", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (72) )}));
				}
				
			}
		}
		
		
		public virtual void testCopy() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.TestItem i1 = new global::thx.TestItem(((int) (1) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> s1 = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{i1, new global::thx.TestItem(((int) (2) ))})) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> s2 = global::thx._HashSet.HashSet_Impl_.copy<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ));
					global::utest.Assert.same(2, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopy", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
					global::utest.Assert.same(2, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopy", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (82) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ).values.exists(i1.hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopy", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ).values.exists(new global::thx.TestItem(((int) (2) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopy", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (84) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) ).values.exists(i1.hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopy", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) ).values.exists(new global::thx.TestItem(((int) (2) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopy", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (86) )}));
					global::thx._HashSet.HashSet_Impl_.@add<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ), ((object) (new global::thx.TestItem(((int) (3) ))) ));
					global::utest.Assert.same(3, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopy", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (88) )}));
					global::utest.Assert.same(2, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCopy", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
				}
				
			}
		}
		
		
		public virtual void testUnion() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds._HashMap.HashMapData<object, bool> s1 = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (1) )), new global::thx.TestItem(((int) (2) )), new global::thx.TestItem(((int) (3) ))})) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> s2 = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (2) )), new global::thx.TestItem(((int) (3) )), new global::thx.TestItem(((int) (4) )), new global::thx.TestItem(((int) (5) ))})) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> newset = global::thx._HashSet.HashSet_Impl_.copy<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ));
					{
						object tmp = global::thx._HashSet.HashSet_Impl_.iterator<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
							global::thx.TestItem k = ((global::thx.TestItem) (global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)) );
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset) ).keys.@set(k.hashCode(), k);
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset) ).values.@set(k.hashCode(), true);
						}
						
					}
					
					global::utest.Assert.same(3, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnion", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (97) )}));
					global::utest.Assert.same(4, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnion", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (98) )}));
					global::utest.Assert.same(5, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnion", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset) ).values.exists(new global::thx.TestItem(((int) (1) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnion", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset) ).values.exists(new global::thx.TestItem(((int) (2) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnion", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (101) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset) ).values.exists(new global::thx.TestItem(((int) (3) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnion", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (102) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset) ).values.exists(new global::thx.TestItem(((int) (4) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnion", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (103) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset) ).values.exists(new global::thx.TestItem(((int) (5) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnion", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (104) )}));
				}
				
			}
		}
		
		
		public virtual void testIntersection() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds._HashMap.HashMapData<object, bool> s1 = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (1) )), new global::thx.TestItem(((int) (2) )), new global::thx.TestItem(((int) (3) ))})) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> s2 = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (2) )), new global::thx.TestItem(((int) (3) )), new global::thx.TestItem(((int) (4) )), new global::thx.TestItem(((int) (5) ))})) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> result = global::thx._HashSet.HashSet_Impl_.empty<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ));
					{
						object tmp = global::thx._HashSet.HashSet_Impl_.iterator<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
							global::thx.TestItem item = ((global::thx.TestItem) (global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)) );
							if (((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) ).values.exists(item.hashCode())) {
								((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) ).keys.@set(item.hashCode(), item);
								((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) ).values.@set(item.hashCode(), true);
							}
							
						}
						
					}
					
					global::utest.Assert.same(3, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntersection", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (112) )}));
					global::utest.Assert.same(4, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntersection", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (113) )}));
					global::utest.Assert.same(2, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntersection", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (114) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) ).values.exists(new global::thx.TestItem(((int) (2) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntersection", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (115) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) ).values.exists(new global::thx.TestItem(((int) (3) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIntersection", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (116) )}));
				}
				
			}
		}
		
		
		public virtual void testDifference() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds._HashMap.HashMapData<object, bool> s1 = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (1) )), new global::thx.TestItem(((int) (2) )), new global::thx.TestItem(((int) (3) ))})) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> s2 = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (2) )), new global::thx.TestItem(((int) (3) )), new global::thx.TestItem(((int) (4) )), new global::thx.TestItem(((int) (5) ))})) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> result = global::thx._HashSet.HashSet_Impl_.copy<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ));
					{
						object tmp = global::thx._HashSet.HashSet_Impl_.iterator<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
							global::thx.TestItem item = ((global::thx.TestItem) (global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)) );
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) ).values.@remove(item.hashCode());
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) ).keys.@remove(item.hashCode());
						}
						
					}
					
					global::haxe.ds._HashMap.HashMapData<object, bool> result1 = global::thx._HashSet.HashSet_Impl_.copy<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) ));
					{
						object tmp1 = global::thx._HashSet.HashSet_Impl_.iterator<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp1, "hasNext", 407283053, null))) {
							global::thx.TestItem item1 = ((global::thx.TestItem) (global::haxe.lang.Runtime.callField(tmp1, "next", 1224901875, null)) );
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) ).values.@remove(item1.hashCode());
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) ).keys.@remove(item1.hashCode());
						}
						
					}
					
					global::utest.Assert.same(3, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (125) )}));
					global::utest.Assert.same(4, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (126) )}));
					global::utest.Assert.same(1, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (127) )}));
					global::utest.Assert.same(2, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (128) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) ).values.exists(new global::thx.TestItem(((int) (1) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (129) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) ).values.exists(new global::thx.TestItem(((int) (4) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (130) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) ).values.exists(new global::thx.TestItem(((int) (5) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
				}
				
			}
		}
		
		
		public virtual void testSymmetricDifference() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds._HashMap.HashMapData<object, bool> s1 = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (1) )), new global::thx.TestItem(((int) (2) )), new global::thx.TestItem(((int) (3) ))})) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> s2 = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (2) )), new global::thx.TestItem(((int) (3) )), new global::thx.TestItem(((int) (4) )), new global::thx.TestItem(((int) (5) ))})) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> self = global::thx._HashSet.HashSet_Impl_.copy<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> newset = global::thx._HashSet.HashSet_Impl_.copy<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (self) ));
					{
						object tmp = global::thx._HashSet.HashSet_Impl_.iterator<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
							global::thx.TestItem k = ((global::thx.TestItem) (global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)) );
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset) ).keys.@set(k.hashCode(), k);
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset) ).values.@set(k.hashCode(), true);
						}
						
					}
					
					global::haxe.ds._HashMap.HashMapData<object, bool> this1 = newset;
					global::haxe.ds._HashMap.HashMapData<object, bool> result = global::thx._HashSet.HashSet_Impl_.empty<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (self) ));
					{
						object tmp1 = global::thx._HashSet.HashSet_Impl_.iterator<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (self) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp1, "hasNext", 407283053, null))) {
							global::thx.TestItem item = ((global::thx.TestItem) (global::haxe.lang.Runtime.callField(tmp1, "next", 1224901875, null)) );
							if (((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) ).values.exists(item.hashCode())) {
								((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) ).keys.@set(item.hashCode(), item);
								((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) ).values.@set(item.hashCode(), true);
							}
							
						}
						
					}
					
					global::haxe.ds._HashMap.HashMapData<object, bool> result1 = global::thx._HashSet.HashSet_Impl_.copy<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (this1) ));
					{
						object tmp2 = global::thx._HashSet.HashSet_Impl_.iterator<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp2, "hasNext", 407283053, null))) {
							global::thx.TestItem item1 = ((global::thx.TestItem) (global::haxe.lang.Runtime.callField(tmp2, "next", 1224901875, null)) );
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) ).values.@remove(item1.hashCode());
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) ).keys.@remove(item1.hashCode());
						}
						
					}
					
					global::haxe.ds._HashMap.HashMapData<object, bool> self1 = global::thx._HashSet.HashSet_Impl_.copy<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) ));
					global::haxe.ds._HashMap.HashMapData<object, bool> newset1 = global::thx._HashSet.HashSet_Impl_.copy<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (self1) ));
					{
						object tmp3 = global::thx._HashSet.HashSet_Impl_.iterator<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp3, "hasNext", 407283053, null))) {
							global::thx.TestItem k1 = ((global::thx.TestItem) (global::haxe.lang.Runtime.callField(tmp3, "next", 1224901875, null)) );
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset1) ).keys.@set(k1.hashCode(), k1);
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (newset1) ).values.@set(k1.hashCode(), true);
						}
						
					}
					
					global::haxe.ds._HashMap.HashMapData<object, bool> this2 = newset1;
					global::haxe.ds._HashMap.HashMapData<object, bool> result2 = global::thx._HashSet.HashSet_Impl_.empty<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (self1) ));
					{
						object tmp4 = global::thx._HashSet.HashSet_Impl_.iterator<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (self1) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp4, "hasNext", 407283053, null))) {
							global::thx.TestItem item2 = ((global::thx.TestItem) (global::haxe.lang.Runtime.callField(tmp4, "next", 1224901875, null)) );
							if (((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) ).values.exists(item2.hashCode())) {
								((global::haxe.ds._HashMap.HashMapData<object, bool>) (result2) ).keys.@set(item2.hashCode(), item2);
								((global::haxe.ds._HashMap.HashMapData<object, bool>) (result2) ).values.@set(item2.hashCode(), true);
							}
							
						}
						
					}
					
					global::haxe.ds._HashMap.HashMapData<object, bool> result3 = global::thx._HashSet.HashSet_Impl_.copy<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (this2) ));
					{
						object tmp5 = global::thx._HashSet.HashSet_Impl_.iterator<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result2) ));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp5, "hasNext", 407283053, null))) {
							global::thx.TestItem item3 = ((global::thx.TestItem) (global::haxe.lang.Runtime.callField(tmp5, "next", 1224901875, null)) );
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (result3) ).values.@remove(item3.hashCode());
							((global::haxe.ds._HashMap.HashMapData<object, bool>) (result3) ).keys.@remove(item3.hashCode());
						}
						
					}
					
					global::utest.Assert.same(3, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSymmetricDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (140) )}));
					global::utest.Assert.same(4, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s2) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSymmetricDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (141) )}));
					global::utest.Assert.same(3, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSymmetricDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (142) )}));
					global::utest.Assert.same(3, global::thx._HashSet.HashSet_Impl_.get_length<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result3) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSymmetricDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (143) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) ).values.exists(new global::thx.TestItem(((int) (1) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSymmetricDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (144) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) ).values.exists(new global::thx.TestItem(((int) (4) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSymmetricDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (145) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result1) ).values.exists(new global::thx.TestItem(((int) (5) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSymmetricDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (146) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result3) ).values.exists(new global::thx.TestItem(((int) (1) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSymmetricDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (147) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result3) ).values.exists(new global::thx.TestItem(((int) (4) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSymmetricDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (148) )}));
					global::utest.Assert.isTrue(((global::haxe.ds._HashMap.HashMapData<object, bool>) (result3) ).values.exists(new global::thx.TestItem(((int) (5) )).hashCode()), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSymmetricDifference", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (149) )}));
				}
				
			}
		}
		
		
		public virtual void testToArray() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::Array<object> a = global::thx._HashSet.HashSet_Impl_.toArray<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (1) )), new global::thx.TestItem(((int) (2) ))})) ))) ));
					global::utest.Assert.same(2, a.length, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToArray", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (156) )}));
					global::Array<object> _e = a;
					global::utest.Assert.same(1, ((global::thx.TestItem) ((new global::thx.TestHashSet_testToArray_157__Fun(_e)).__hx_invoke1_o(default(double), ( (( global::thx.TestHashSet_testToArray_157__Fun_0.__hx_current != null )) ? (global::thx.TestHashSet_testToArray_157__Fun_0.__hx_current) : (global::thx.TestHashSet_testToArray_157__Fun_0.__hx_current = ((global::thx.TestHashSet_testToArray_157__Fun_0) (new global::thx.TestHashSet_testToArray_157__Fun_0()) )) ))) ).code, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToArray", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (157) )}));
					global::Array<object> _e1 = a;
					global::utest.Assert.same(2, ((global::thx.TestItem) ((new global::thx.TestHashSet_testToArray_158__Fun(_e1)).__hx_invoke1_o(default(double), ( (( global::thx.TestHashSet_testToArray_158__Fun_0.__hx_current != null )) ? (global::thx.TestHashSet_testToArray_158__Fun_0.__hx_current) : (global::thx.TestHashSet_testToArray_158__Fun_0.__hx_current = ((global::thx.TestHashSet_testToArray_158__Fun_0) (new global::thx.TestHashSet_testToArray_158__Fun_0()) )) ))) ).code, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToArray", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (158) )}));
				}
				
			}
		}
		
		
		public virtual void testToString() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds._HashMap.HashMapData<object, bool> s = global::thx._HashSet.HashSet_Impl_.create<object>(((object) (new global::Array<object>(new object[]{new global::thx.TestItem(((int) (1) )), new global::thx.TestItem(((int) (2) ))})) ));
					global::utest.Assert.isTrue(new global::EReg("TestItem \\d, TestItem \\d}", "").match(global::thx._HashSet.HashSet_Impl_.toString<object>(((global::haxe.ds._HashMap.HashMapData<object, bool>) (s) ))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToString", "thx.TestHashSet", "TestHashSet.hx"}, new int[]{1981972957}, new double[]{((double) (164) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 729151262:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToString", 729151262)) );
					}
					
					
					case 786212844:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToArray", 786212844)) );
					}
					
					
					case 1033706018:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSymmetricDifference", 1033706018)) );
					}
					
					
					case 1719976687:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDifference", 1719976687)) );
					}
					
					
					case 1755441595:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIntersection", 1755441595)) );
					}
					
					
					case 1877582685:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUnion", 1877582685)) );
					}
					
					
					case 1157054759:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCopy", 1157054759)) );
					}
					
					
					case 494723638:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRemove", 494723638)) );
					}
					
					
					case 1301518156:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPush", 1301518156)) );
					}
					
					
					case 1035493615:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testAdd", 1035493615)) );
					}
					
					
					case 1490314190:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testExists", 1490314190)) );
					}
					
					
					case 953972955:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testEmpty", 953972955)) );
					}
					
					
					case 352562414:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCreate", 352562414)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 729151262:
					{
						this.testToString();
						break;
					}
					
					
					case 786212844:
					{
						this.testToArray();
						break;
					}
					
					
					case 1033706018:
					{
						this.testSymmetricDifference();
						break;
					}
					
					
					case 1719976687:
					{
						this.testDifference();
						break;
					}
					
					
					case 1755441595:
					{
						this.testIntersection();
						break;
					}
					
					
					case 1877582685:
					{
						this.testUnion();
						break;
					}
					
					
					case 1157054759:
					{
						this.testCopy();
						break;
					}
					
					
					case 494723638:
					{
						this.testRemove();
						break;
					}
					
					
					case 1301518156:
					{
						this.testPush();
						break;
					}
					
					
					case 1035493615:
					{
						this.testAdd();
						break;
					}
					
					
					case 1490314190:
					{
						this.testExists();
						break;
					}
					
					
					case 953972955:
					{
						this.testEmpty();
						break;
					}
					
					
					case 352562414:
					{
						this.testCreate();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestHashSet_testToArray_157__Fun_0 : global::haxe.lang.Function {
		
		public TestHashSet_testToArray_157__Fun_0() : base(1, 0) {
		}
		
		
		public static global::thx.TestHashSet_testToArray_157__Fun_0 __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.TestItem _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.TestItem) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx.TestItem) (__fn_dyn1) )) )) );
				return ( _.code == 1 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestHashSet_testToArray_157__Fun : global::haxe.lang.Function {
		
		public TestHashSet_testToArray_157__Fun(global::Array<object> _e) : base(1, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function predicate = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			return ((global::thx.TestItem) ((global::thx.Arrays.find<object>(((global::Array<object>) (this._e) ), ((global::haxe.lang.Function) (predicate) ))).@value) );
		}
		
		
		public global::Array<object> _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestHashSet_testToArray_158__Fun_0 : global::haxe.lang.Function {
		
		public TestHashSet_testToArray_158__Fun_0() : base(1, 0) {
		}
		
		
		public static global::thx.TestHashSet_testToArray_158__Fun_0 __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.TestItem _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.TestItem) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx.TestItem) (__fn_dyn1) )) )) );
				return ( _1.code == 2 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestHashSet_testToArray_158__Fun : global::haxe.lang.Function {
		
		public TestHashSet_testToArray_158__Fun(global::Array<object> _e1) : base(1, 0) {
			this._e1 = _e1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Function predicate1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			return ((global::thx.TestItem) ((global::thx.Arrays.find<object>(((global::Array<object>) (this._e1) ), ((global::haxe.lang.Function) (predicate1) ))).@value) );
		}
		
		
		public global::Array<object> _e1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestItem : global::haxe.lang.HxObject {
		
		public TestItem(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestItem(int code) {
			global::thx.TestItem.__hx_ctor_thx_TestItem(this, code);
		}
		
		
		public static void __hx_ctor_thx_TestItem(global::thx.TestItem __temp_me133, int code) {
			__temp_me133.code = code;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestItem(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestItem(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int code;
		
		public virtual int hashCode() {
			return this.code;
		}
		
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat("TestItem ", global::haxe.lang.Runtime.toString(this.code));
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1103409453:
					{
						this.code = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1103409453:
					{
						this.code = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 125111323:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "hashCode", 125111323)) );
					}
					
					
					case 1103409453:
					{
						return this.code;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1103409453:
					{
						return ((double) (this.code) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 125111323:
					{
						return this.hashCode();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("code");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


