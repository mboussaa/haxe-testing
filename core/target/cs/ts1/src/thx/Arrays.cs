// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays : global::haxe.lang.HxObject {
		
		public Arrays(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Arrays() {
			global::thx.Arrays.__hx_ctor_thx_Arrays(this);
		}
		
		
		public static void __hx_ctor_thx_Arrays(global::thx.Arrays __temp_me68) {
		}
		
		
		public static global::Array<T> append<T>(global::Array<T> array, T element) {
			array.push(element);
			return array;
		}
		
		
		public static global::Array<T> appendIf<T>(global::Array<T> array, bool cond, T element) {
			if (cond) {
				array.push(element);
			}
			
			return array;
		}
		
		
		public static global::Array<T> applyIndexes<T>(global::Array<T> array, global::Array<int> indexes, global::haxe.lang.Null<bool> incrementDuplicates) {
			unchecked {
				global::haxe.lang.Null<bool> __temp_incrementDuplicates65 = ( ( ! (incrementDuplicates.hasValue) ) ? (new global::haxe.lang.Null<bool>(false, true)) : (incrementDuplicates) );
				if (( indexes.length != array.length )) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("`Arrays.applyIndexes` can only be applied to two arrays with the same length", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"applyIndexes", "thx.Arrays", "Arrays.hx"}, new int[]{1981972957}, new double[]{((double) (53) )})));
				}
				
				global::Array<T> result = new global::Array<T>(new T[]{});
				if (((__temp_incrementDuplicates65)).@value) {
					global::haxe.ds.IntMap<bool> usedIndexes = global::thx._Set.Set_Impl_.createInt(null);
					{
						int _g1 = 0;
						int _g = array.length;
						while (( _g1 < _g )) {
							int i = _g1++;
							int index = indexes[i];
							while (((global::haxe.ds.IntMap<bool>) (usedIndexes) ).exists(index)) {
								 ++ index;
							}
							
							global::thx._Set.Set_Impl_.@add<int>(((global::haxe.IMap<int, bool>) (usedIndexes) ), ((int) (index) ));
							result[index] = global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[i]);
						}
						
					}
					
				}
				else {
					int _g11 = 0;
					int _g2 = array.length;
					while (( _g11 < _g2 )) {
						int i1 = _g11++;
						result[indexes[i1]] = global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[i1]);
					}
					
				}
				
				return result;
			}
		}
		
		
		public static object monoid<A>() {
			{
				global::haxe.lang.Function __temp_odecl1 = new global::thx.Arrays_monoid_78__Fun<A>();
				return new global::haxe.lang.DynamicObject(new int[]{265544154, 1357975336}, new object[]{__temp_odecl1, new global::Array<A>(new A[]{})}, new int[]{}, new double[]{});
			}
			
		}
		
		
		public static global::Array<T> after<T>(global::Array<T> array, T element) {
			unchecked {
				return array.slice(( global::thx._ReadonlyArray.ReadonlyArray_Impl_.indexOf<T>(((global::Array<T>) (array) ), global::haxe.lang.Runtime.genericCast<T>(element), ((global::haxe.lang.Function) (null) )) + 1 ), default(global::haxe.lang.Null<int>));
			}
		}
		
		
		public static global::haxe.ds.Option atIndex<T>(global::Array<T> array, int i) {
			if (( ( i >= 0 ) && ( i < array.length ) )) {
				return global::haxe.ds.Option.Some(global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[i]));
			}
			else {
				return global::haxe.ds.Option.None;
			}
			
		}
		
		
		public static global::haxe.ds.Option getOption<T>(global::Array<T> array, int i) {
			global::haxe.lang.Null<T> @value = new global::haxe.lang.Null<T>(global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[i]), true);
			if ( ! (@value.hasValue) ) {
				return global::haxe.ds.Option.None;
			}
			else {
				return global::haxe.ds.Option.Some((@value).toDynamic());
			}
			
		}
		
		
		public static void each<T>(global::Array<T> arr, global::haxe.lang.Function effect) {
			object tmp = ((object) (new global::_Array.ArrayIterator<T>(((global::Array<T>) (arr) ))) );
			while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
				effect.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)));
			}
			
		}
		
		
		public static void eachi<T>(global::Array<T> arr, global::haxe.lang.Function effect) {
			int _g1 = 0;
			int _g = arr.length;
			while (( _g1 < _g )) {
				int i = _g1++;
				effect.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (arr) )[i]), ((double) (i) ), global::haxe.lang.Runtime.undefined);
			}
			
		}
		
		
		public static bool all<T>(global::Array<T> arr, global::haxe.lang.Function predicate) {
			{
				object tmp = ((object) (new global::_Array.ArrayIterator<T>(((global::Array<T>) (arr) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					if ( ! (global::haxe.lang.Runtime.toBool(predicate.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null))))) ) {
						return false;
					}
					
				}
				
			}
			
			return true;
		}
		
		
		public static bool any<T>(global::Array<T> arr, global::haxe.lang.Function predicate) {
			{
				object tmp = ((object) (new global::_Array.ArrayIterator<T>(((global::Array<T>) (arr) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					if (global::haxe.lang.Runtime.toBool(predicate.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null))))) {
						return true;
					}
					
				}
				
			}
			
			return false;
		}
		
		
		public static global::Array<T> at<T>(global::Array<T> arr, global::Array<int> indexes) {
			return indexes.map<T>(((global::haxe.lang.Function) (new global::thx.Arrays_at_139__Fun<T>(arr)) ));
		}
		
		
		public static global::Array<T> before<T>(global::Array<T> array, T element) {
			return array.slice(0, new global::haxe.lang.Null<int>(global::thx._ReadonlyArray.ReadonlyArray_Impl_.indexOf<T>(((global::Array<T>) (array) ), global::haxe.lang.Runtime.genericCast<T>(element), ((global::haxe.lang.Function) (null) )), true));
		}
		
		
		public static global::Array<T> commonsFromStart<T>(global::Array<T> self, global::Array<T> other, global::haxe.lang.Function equality) {
			if (( null == equality )) {
				equality = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Functions), "equality", 1429408506)) );
			}
			
			int count = 0;
			{
				int _g = 0;
				global::Array<object> _g1 = global::thx.Arrays.zip<T, T>(((global::Array<T>) (self) ), ((global::Array<T>) (other) ));
				while (( _g < _g1.length )) {
					object pair = _g1[_g];
					 ++ _g;
					if (global::haxe.lang.Runtime.toBool(equality.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.getField(pair, "_0", 21233, true)), default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.getField(pair, "_1", 21234, true))))) {
						 ++ count;
					}
					else {
						break;
					}
					
				}
				
			}
			
			return self.slice(0, new global::haxe.lang.Null<int>(count, true));
		}
		
		
		public static global::Array<T> compact<T>(global::Array<object> arr) {
			global::Array<T> result = new global::Array<T>(new T[]{});
			{
				object tmp = ((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (arr) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					global::haxe.lang.Null<T> element = global::haxe.lang.Null<object>.ofDynamic<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null));
					if (element.hasValue) {
						result.push((element).@value);
					}
					
				}
				
			}
			
			return result;
		}
		
		
		public static int compare<T>(global::Array<T> a, global::Array<T> b) {
			int v = ( a.length - b.length );
			if (( v != 0 )) {
				return v;
			}
			
			{
				int _g1 = 0;
				int _g = a.length;
				while (( _g1 < _g )) {
					int i = _g1++;
					v = global::thx.Dynamics.compare(global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (a) )[i]), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (b) )[i]));
					if (( v != 0 )) {
						return v;
					}
					
				}
				
			}
			
			return 0;
		}
		
		
		public static bool contains<T>(global::Array<T> array, T element, global::haxe.lang.Function eq) {
			if (( null == eq )) {
				return ( global::thx._ReadonlyArray.ReadonlyArray_Impl_.indexOf<T>(((global::Array<T>) (array) ), global::haxe.lang.Runtime.genericCast<T>(element), ((global::haxe.lang.Function) (null) )) >= 0 );
			}
			else {
				{
					int _g1 = 0;
					int _g = array.length;
					while (( _g1 < _g )) {
						if (global::haxe.lang.Runtime.toBool(eq.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[_g1++]), default(double), element))) {
							return true;
						}
						
					}
					
				}
				
				return false;
			}
			
		}
		
		
		public static bool containsAll<T>(global::Array<T> array, object elements, global::haxe.lang.Function eq) {
			{
				object tmp = ((object) (global::haxe.lang.Runtime.callField(elements, "iterator", 328878574, null)) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					if ( ! (global::thx.Arrays.contains<T>(((global::Array<T>) (array) ), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)), ((global::haxe.lang.Function) (eq) ))) ) {
						return false;
					}
					
				}
				
			}
			
			return true;
		}
		
		
		public static bool containsAny<T>(global::Array<T> array, object elements, global::haxe.lang.Function eq) {
			{
				object tmp = ((object) (global::haxe.lang.Runtime.callField(elements, "iterator", 328878574, null)) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					if (global::thx.Arrays.contains<T>(((global::Array<T>) (array) ), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)), ((global::haxe.lang.Function) (eq) ))) {
						return true;
					}
					
				}
				
			}
			
			return false;
		}
		
		
		public static global::Array<T> create<T>(int length, T fillWith) {
			global::Array<T> arr = new global::Array<T>(new T[]{});
			{
				int _g1 = 0;
				while (( _g1 < length )) {
					arr[_g1++] = fillWith;
				}
				
			}
			
			return arr;
		}
		
		
		public static global::Array<object> cross<T>(global::Array<T> a, global::Array<T> b) {
			global::Array<object> r = new global::Array<object>(new object[]{});
			{
				object tmp = ((object) (new global::_Array.ArrayIterator<T>(((global::Array<T>) (a) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					T va = global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null));
					{
						object tmp1 = ((object) (new global::_Array.ArrayIterator<T>(((global::Array<T>) (b) ))) );
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp1, "hasNext", 407283053, null))) {
							r.push(new global::Array<T>(new T[]{va, global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp1, "next", 1224901875, null))}));
						}
						
					}
					
				}
				
			}
			
			return r;
		}
		
		
		public static global::Array<object> crossMulti<T>(global::Array<object> array) {
			global::Array<object> acopy = array.copy();
			global::Array<object> result = ((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) ((acopy.shift()).@value) ))) ).map<object>(((global::haxe.lang.Function) (new global::thx.Arrays_crossMulti_284__Fun<T>()) ));
			while (( acopy.length > 0 )) {
				global::Array<T> array1 = ((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) ((acopy.shift()).@value) ))) );
				global::Array<object> tresult = result;
				result = new global::Array<object>(new object[]{});
				{
					object tmp = ((object) (new global::_Array.ArrayIterator<T>(((global::Array<T>) (array1) ))) );
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
						T v1 = global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null));
						int _g = 0;
						while (( _g < tresult.length )) {
							global::Array<T> ar = ((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (tresult[_g]) ))) );
							 ++ _g;
							global::Array<T> t = ar.copy();
							t.push(v1);
							result.push(t);
						}
						
					}
					
				}
				
			}
			
			return result;
		}
		
		
		public static global::Array<T> distinct<T>(global::Array<T> array, global::haxe.lang.Function predicate) {
			unchecked {
				global::Array<T> result = new global::Array<T>(new T[]{});
				if (( array.length <= 1 )) {
					return ((global::Array<T>) (array) ).copy();
				}
				
				if (( null == predicate )) {
					predicate = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Functions), "equality", 1429408506)) );
				}
				
				{
					object tmp = ((object) (new global::_Array.ArrayIterator<T>(((global::Array<T>) (array) ))) );
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
						T v = global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null));
						if ( ! (global::thx.Arrays.any<T>(((global::Array<T>) (result) ), ((global::haxe.lang.Function) (new global::thx.Arrays_distinct_316__Fun<T>(v, predicate)) ))) ) {
							result.push(v);
						}
						
					}
					
				}
				
				return result;
			}
		}
		
		
		public static void eachPair<TIn, TOut>(global::Array<TIn> array, global::haxe.lang.Function callback) {
			int _g1 = 0;
			int _g = array.length;
			while (( _g1 < _g )) {
				int i = _g1++;
				{
					int _g3 = i;
					int _g2 = array.length;
					while (( _g3 < _g2 )) {
						if ( ! (global::haxe.lang.Runtime.toBool(callback.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<TIn>(((global::Array<TIn>) (array) )[i]), default(double), global::haxe.lang.Runtime.genericCast<TIn>(((global::Array<TIn>) (array) )[_g3++])))) ) {
							return;
						}
						
					}
					
				}
				
			}
			
		}
		
		
		public static bool @equals<T>(global::Array<T> a, global::Array<T> b, global::haxe.lang.Function equality) {
			if (( ( ( a == null ) || ( b == null ) ) || ( a.length != b.length ) )) {
				return false;
			}
			
			if (( null == equality )) {
				equality = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Functions), "equality", 1429408506)) );
			}
			
			{
				int _g1 = 0;
				int _g = a.length;
				while (( _g1 < _g )) {
					int i = _g1++;
					if ( ! (global::haxe.lang.Runtime.toBool(equality.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (a) )[i]), default(double), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (b) )[i])))) ) {
						return false;
					}
					
				}
				
			}
			
			return true;
		}
		
		
		public static T extract<T>(global::Array<T> a, global::haxe.lang.Function predicate) {
			unchecked {
				{
					int _g1 = 0;
					int _g = a.length;
					while (( _g1 < _g )) {
						int i = _g1++;
						if (global::haxe.lang.Runtime.toBool(predicate.__hx_invoke1_o(default(double), a[i]))) {
							return a.splice(i, 1)[0];
						}
						
					}
					
				}
				
				return default(T);
			}
		}
		
		
		public static global::Array<T> filterNull<T>(global::Array<object> a) {
			global::Array<T> arr = new global::Array<T>(new T[]{});
			{
				object tmp = ((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (a) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					global::haxe.lang.Null<T> v = global::haxe.lang.Null<object>.ofDynamic<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null));
					if (v.hasValue) {
						arr.push((v).@value);
					}
					
				}
				
			}
			
			return arr;
		}
		
		
		public static global::Array<T> filterOption<T>(global::Array<object> a) {
			return ((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (global::thx.Arrays.reduce<object, object>(((global::Array<object>) (a) ), ((global::haxe.lang.Function) (new global::thx.Arrays_filterOption_377__Fun<T>()) ), ((object) (new global::Array<T>(new T[]{})) ))) ))) );
		}
		
		
		public static global::haxe.lang.Null<T> find<T>(global::Array<T> array, global::haxe.lang.Function predicate) {
			{
				object tmp = ((object) (new global::_Array.ArrayIterator<T>(((global::Array<T>) (array) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					T element = global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null));
					if (global::haxe.lang.Runtime.toBool(predicate.__hx_invoke1_o(default(double), element))) {
						return new global::haxe.lang.Null<T>(element, true);
					}
					
				}
				
			}
			
			return default(global::haxe.lang.Null<T>);
		}
		
		
		public static global::haxe.lang.Null<T> findi<T>(global::Array<T> array, global::haxe.lang.Function predicate) {
			{
				int _g1 = 0;
				int _g = array.length;
				while (( _g1 < _g )) {
					int i = _g1++;
					if (global::haxe.lang.Runtime.toBool(predicate.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[i]), ((double) (i) ), global::haxe.lang.Runtime.undefined))) {
						return new global::haxe.lang.Null<T>(global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[i]), true);
					}
					
				}
				
			}
			
			return default(global::haxe.lang.Null<T>);
		}
		
		
		public static global::haxe.ds.Option findiOption<T>(global::Array<T> array, global::haxe.lang.Function predicate) {
			{
				int _g1 = 0;
				int _g = array.length;
				while (( _g1 < _g )) {
					int i = _g1++;
					if (global::haxe.lang.Runtime.toBool(predicate.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[i]), ((double) (i) ), global::haxe.lang.Runtime.undefined))) {
						return global::haxe.ds.Option.Some(global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[i]));
					}
					
				}
				
			}
			
			return global::haxe.ds.Option.None;
		}
		
		
		public static global::haxe.ds.Option findOption<T>(global::Array<T> array, global::haxe.lang.Function predicate) {
			{
				object tmp = ((object) (new global::_Array.ArrayIterator<T>(((global::Array<T>) (array) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					T element = global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null));
					if (global::haxe.lang.Runtime.toBool(predicate.__hx_invoke1_o(default(double), element))) {
						return global::haxe.ds.Option.Some(element);
					}
					
				}
				
			}
			
			return global::haxe.ds.Option.None;
		}
		
		
		public static int findIndex<T>(global::Array<T> array, global::haxe.lang.Function predicate) {
			unchecked {
				{
					int _g1 = 0;
					int _g = array.length;
					while (( _g1 < _g )) {
						int i = _g1++;
						if (global::haxe.lang.Runtime.toBool(predicate.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[i])))) {
							return i;
						}
						
					}
					
				}
				
				return -1;
			}
		}
		
		
		public static global::haxe.lang.Null<T> findLast<T>(global::Array<T> array, global::haxe.lang.Function predicate) {
			unchecked {
				int len = array.length;
				int j = default(int);
				{
					int _g1 = 0;
					while (( _g1 < len )) {
						j = ( ( len - _g1++ ) - 1 );
						if (global::haxe.lang.Runtime.toBool(predicate.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[j])))) {
							return new global::haxe.lang.Null<T>(global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[j]), true);
						}
						
					}
					
				}
				
				return default(global::haxe.lang.Null<T>);
			}
		}
		
		
		public static global::haxe.lang.Null<T> first<T>(global::Array<T> array) {
			return new global::haxe.lang.Null<T>(global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[0]), true);
		}
		
		
		public static global::Array<TOut> flatMap<TIn, TOut>(global::Array<TIn> array, global::haxe.lang.Function callback) {
			return global::thx.Arrays.flatten<TOut>(((global::Array<object>) (array.map<object>(((global::haxe.lang.Function) (callback) ))) ));
		}
		
		
		public static global::Array<T> flatten<T>(global::Array<object> array) {
			return ((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (global::thx.Arrays.reduce<object, object>(((global::Array<object>) (array) ), ((global::haxe.lang.Function) (new global::thx.Arrays_flatten_484__Fun<T>()) ), ((object) (new global::Array<T>(new T[]{})) ))) ))) );
		}
		
		
		public static global::Array<T> @from<T>(global::Array<T> array, T element) {
			return array.slice(global::thx._ReadonlyArray.ReadonlyArray_Impl_.indexOf<T>(((global::Array<T>) (array) ), global::haxe.lang.Runtime.genericCast<T>(element), ((global::haxe.lang.Function) (null) )), default(global::haxe.lang.Null<int>));
		}
		
		
		public static global::Array<object> spanByIndex<A, K>(global::Array<A> arr, global::haxe.lang.Function spanKey) {
			unchecked {
				global::Array<object> acc = new global::Array<object>(new object[]{});
				K cur = default(K);
				int j = -1;
				{
					int _g1 = 0;
					int _g = arr.length;
					while (( _g1 < _g )) {
						int i = _g1++;
						K k = global::haxe.lang.Runtime.genericCast<K>(spanKey.__hx_invoke1_o(((double) (i) ), global::haxe.lang.Runtime.undefined));
						if (global::haxe.lang.Runtime.eq(k, default(K))) {
							throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat("spanKey function returned null for index ", global::haxe.lang.Runtime.toString(i)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"spanByIndex", "thx.Arrays", "Arrays.hx"}, new int[]{1981972957}, new double[]{((double) (567) )})));
						}
						
						if (global::haxe.lang.Runtime.eq(cur, k)) {
							((global::Array<A>) (global::Array<object>.__hx_cast<A>(((global::Array) (acc[j]) ))) ).push(global::haxe.lang.Runtime.genericCast<A>(((global::Array<A>) (arr) )[i]));
						}
						else {
							cur = k;
							 ++ j;
							acc.push(new global::Array<A>(new A[]{global::haxe.lang.Runtime.genericCast<A>(((global::Array<A>) (arr) )[i])}));
						}
						
					}
					
				}
				
				return acc;
			}
		}
		
		
		public static bool hasElements<T>(global::Array<T> array) {
			if (( null != array )) {
				return ( array.length > 0 );
			}
			else {
				return false;
			}
			
		}
		
		
		public static global::haxe.lang.Null<T> head<T>(global::Array<T> array) {
			return new global::haxe.lang.Null<T>(global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (array) )[0]), true);
		}
		
		
		public static global::Array<T> ifEmpty<T>(global::Array<T> array, global::Array<T> alt) {
			if (( ( null != array ) && ( 0 != array.length ) )) {
				return array;
			}
			else {
				return alt;
			}
			
		}
		
		
		public static global::Array<T> initial<T>(global::Array<T> array) {
			unchecked {
				return array.slice(0, new global::haxe.lang.Null<int>(( array.length - 1 ), true));
			}
		}
		
		
		public static global::Array<T> intersperse<T>(global::Array<T> array, T @value) {
			unchecked {
				global::Array<T> tmp = global::thx.Arrays.create<T>(((int) (( ( array.length * 2 ) - 1 )) ), global::haxe.lang.Runtime.genericCast<T>(@value));
				return ((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (global::thx.Arrays.reducei<T, object>(((global::Array<T>) (array) ), ((global::haxe.lang.Function) (new global::thx.Arrays_intersperse_607__Fun<T>()) ), ((object) (tmp) ))) ))) );
			}
		}
		
		
		public static bool isEmpty<T>(global::Array<T> array) {
			if (( null != array )) {
				return ( array.length == 0 );
			}
			else {
				return true;
			}
			
		}
		
		
		public static global::haxe.lang.Null<T> last<T>(global::Array<T> array) {
			unchecked {
				return new global::haxe.lang.Null<T>(((global::Array<T>) (array) )[( array.length - 1 )], true);
			}
		}
		
		
		public static global::Array<TOut> mapi<TIn, TOut>(global::Array<TIn> array, global::haxe.lang.Function callback) {
			global::Array<TOut> r = new global::Array<TOut>(new TOut[]{});
			{
				int _g1 = 0;
				int _g = array.length;
				while (( _g1 < _g )) {
					int i = _g1++;
					r.push(global::haxe.lang.Runtime.genericCast<TOut>(callback.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<TIn>(((global::Array<TIn>) (array) )[i]), ((double) (i) ), global::haxe.lang.Runtime.undefined)));
				}
				
			}
			
			return r;
		}
		
		
		public static global::Array<TOut> mapRight<TIn, TOut>(global::Array<TIn> array, global::haxe.lang.Function callback) {
			int i = array.length;
			global::Array<TOut> result = new global::Array<TOut>(new TOut[]{});
			while ((  -- i >= 0 )) {
				result.push(global::haxe.lang.Runtime.genericCast<TOut>(callback.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<TIn>(((global::Array<TIn>) (array) )[i]))));
			}
			
			return result;
		}
		
		
		public static global::Array<T> order<T>(global::Array<T> array, global::haxe.lang.Function sort) {
			global::Array<T> n = array.copy();
			n.sort(sort);
			return n;
		}
		
		
		public static void pull<T>(global::Array<T> array, global::Array<T> toRemove, global::haxe.lang.Function equality) {
			object tmp = ((object) (new global::_Array.ArrayIterator<T>(((global::Array<T>) (toRemove) ))) );
			while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
				global::thx.Arrays.removeAll<T>(((global::Array<T>) (array) ), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)), ((global::haxe.lang.Function) (equality) ));
			}
			
		}
		
		
		public static global::Array<T> pushIf<T>(global::Array<T> array, bool condition, T @value) {
			if (condition) {
				array.push(@value);
			}
			
			return array;
		}
		
		
		public static global::Array<int> rank<T>(global::Array<T> array, global::haxe.lang.Function compare, global::haxe.lang.Null<bool> incrementDuplicates) {
			global::haxe.lang.Null<bool> __temp_incrementDuplicates66 = ( ( ! (incrementDuplicates.hasValue) ) ? (new global::haxe.lang.Null<bool>(true, true)) : (incrementDuplicates) );
			global::Array<object> arr = global::thx.Arrays.mapi<T, object>(((global::Array<T>) (array) ), ((global::haxe.lang.Function) (new global::thx.Arrays_rank_688__Fun<T>()) ));
			arr.sort(new global::thx.Arrays_rank_689__Fun<T>(compare));
			if (((__temp_incrementDuplicates66)).@value) {
				global::haxe.ds.IntMap<bool> usedIndexes = global::thx._Set.Set_Impl_.createInt(null);
				return ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::thx.Arrays.reducei<object, object>(((global::Array<object>) (arr) ), ((global::haxe.lang.Function) (new global::thx.Arrays_rank_692__Fun<T>(usedIndexes, compare, arr)) ), ((object) (new global::Array<int>(new int[]{})) ))) ))) );
			}
			else {
				return ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::thx.Arrays.reducei<object, object>(((global::Array<object>) (arr) ), ((global::haxe.lang.Function) (new global::thx.Arrays_rank_702__Fun<T>(compare, arr)) ), ((object) (new global::Array<int>(new int[]{})) ))) ))) );
			}
			
		}
		
		
		public static B reduce<A, B>(global::Array<A> array, global::haxe.lang.Function f, B initial) {
			{
				object tmp = ((object) (new global::_Array.ArrayIterator<A>(((global::Array<A>) (array) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
					initial = global::haxe.lang.Runtime.genericCast<B>(f.__hx_invoke2_o(default(double), initial, default(double), global::haxe.lang.Runtime.genericCast<A>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null))));
				}
				
			}
			
			return initial;
		}
		
		
		public static B foldLeft<A, B>(global::Array<A> array, B init, global::haxe.lang.Function f) {
			return global::thx.Arrays.reduce<A, B>(((global::Array<A>) (array) ), ((global::haxe.lang.Function) (f) ), global::haxe.lang.Runtime.genericCast<B>(init));
		}
		
		
		public static global::thx.Either foldLeftEither<A, E, B>(global::Array<A> array, B init, global::haxe.lang.Function f) {
			unchecked {
				global::thx.Either acc = global::thx.Either.Right(init);
				{
					object tmp = ((object) (new global::_Array.ArrayIterator<A>(((global::Array<A>) (array) ))) );
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
						A a = global::haxe.lang.Runtime.genericCast<A>(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null));
						switch (acc.index) {
							case 0:
							{
								return acc;
							}
							
							
							case 1:
							{
								acc = ((global::thx.Either) (f.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<B>(acc.@params[0]), default(double), a)) );
								break;
							}
							
							
						}
						
					}
					
				}
				
				return acc;
			}
		}
		
		
		public static B foldMap<A, B>(global::Array<A> array, global::haxe.lang.Function f, object m) {
			global::Array<B> array1 = array.map<B>(((global::haxe.lang.Function) (f) ));
			B init = global::thx._Monoid.Monoid_Impl_.get_zero<B>(((object) (m) ));
			object _e = m;
			return global::thx.Arrays.reduce<B, B>(((global::Array<B>) (array1) ), ((global::haxe.lang.Function) (new global::thx.Arrays_foldMap_740__Fun<B>(_e)) ), global::haxe.lang.Runtime.genericCast<B>(init));
		}
		
		
		public static A fold<A>(global::Array<A> array, object m) {
			return global::thx.Arrays.foldMap<A, A>(((global::Array<A>) (array) ), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Functions), "identity", 959399230)) ), ((object) (m) ));
		}
		
		
		public static global::haxe.ds.Option nel<A>(global::Array<A> array) {
			return global::thx._Nel.Nel_Impl_.fromArray<A>(((global::Array<A>) (array) ));
		}
		
		
		public static global::haxe.ds.Option foldS<A>(global::Array<A> array, global::haxe.lang.Function s) {
			return global::thx.Options.map<object, object>(((global::haxe.ds.Option) (global::thx.Arrays.nel<A>(((global::Array<A>) (array) ))) ), ((global::haxe.lang.Function) (new global::thx.Arrays_foldS_758__Fun<A>(s)) ));
		}
		
		
		public static global::Array<T> resize<T>(global::Array<T> array, int length, T fill) {
			while (( array.length < length )) {
				array.push(fill);
			}
			
			array.splice(length, ( array.length - length ));
			return array;
		}
		
		
		public static B reducei<A, B>(global::Array<A> array, global::haxe.lang.Function f, B initial) {
			{
				int _g1 = 0;
				int _g = array.length;
				while (( _g1 < _g )) {
					int i = _g1++;
					initial = global::haxe.lang.Runtime.genericCast<B>(f.__hx_invoke3_o(default(double), initial, default(double), global::haxe.lang.Runtime.genericCast<A>(((global::Array<A>) (array) )[i]), ((double) (i) ), global::haxe.lang.Runtime.undefined));
				}
				
			}
			
			return initial;
		}
		
		
		public static B reduceRight<A, B>(global::Array<A> array, global::haxe.lang.Function f, B initial) {
			int i = array.length;
			while ((  -- i >= 0 )) {
				initial = global::haxe.lang.Runtime.genericCast<B>(f.__hx_invoke2_o(default(double), initial, default(double), global::haxe.lang.Runtime.genericCast<A>(((global::Array<A>) (array) )[i])));
			}
			
			return initial;
		}
		
		
		public static void removeAll<T>(global::Array<T> array, T element, global::haxe.lang.Function equality) {
			unchecked {
				if (( null == equality )) {
					equality = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Functions), "equality", 1429408506)) );
				}
				
				int i = array.length;
				while ((  -- i >= 0 )) {
					if (global::haxe.lang.Runtime.toBool(equality.__hx_invoke2_o(default(double), array[i], default(double), element))) {
						array.splice(i, 1);
					}
					
				}
				
			}
		}
		
		
		public static global::Array<T> rest<T>(global::Array<T> array) {
			unchecked {
				return array.slice(1, default(global::haxe.lang.Null<int>));
			}
		}
		
		
		public static global::Array<T> reversed<T>(global::Array<T> array) {
			global::Array<T> result = array.copy();
			result.reverse();
			return result;
		}
		
		
		public static global::Array<T> sample<T>(global::Array<T> array, int n) {
			unchecked {
				int b = array.length;
				if (( n < b )) {
					n = n;
				}
				else {
					n = b;
				}
				
				global::Array<T> copy = array.copy();
				global::Array<T> result = new global::Array<T>(new T[]{});
				{
					int _g1 = 0;
					int _g = n;
					while (( _g1 < _g )) {
						 ++ _g1;
						result.push(copy.splice(global::Std.random(copy.length), 1)[0]);
					}
					
				}
				
				return result;
			}
		}
		
		
		public static global::haxe.lang.Null<T> sampleOne<T>(global::Array<T> array) {
			return new global::haxe.lang.Null<T>(((global::Array<T>) (array) )[global::Std.random(array.length)], true);
		}
		
		
		public static string @string<T>(global::Array<T> arr) {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[", arr.map<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Dynamics), "string", 288368849)) )).@join(", ")), "]");
		}
		
		
		public static global::Array<T> shuffle<T>(global::Array<T> a) {
			unchecked {
				global::Array<int> t = global::thx.Ints.range(a.length, default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
				global::Array<T> array = new global::Array<T>(new T[]{});
				while (( t.length > 0 )) {
					int pos = global::Std.random(t.length);
					int index = t[pos];
					t.splice(pos, 1);
					array.push(global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (a) )[index]));
				}
				
				return array;
			}
		}
		
		
		public static global::Array<object> split<T>(global::Array<T> array, int parts) {
			return global::thx.Arrays.splitBy<T>(((global::Array<T>) (array) ), ((int) (global::System.Math.Ceiling(((double) (( ((double) (array.length) ) / parts )) ))) ));
		}
		
		
		public static global::Array<object> splitBy<T>(global::Array<T> array, int len) {
			unchecked {
				global::Array<object> res = new global::Array<object>(new object[]{});
				int b = array.length;
				if (( len < b )) {
					len = len;
				}
				else {
					len = b;
				}
				
				{
					int _g1 = 0;
					int _g = ((int) (global::System.Math.Ceiling(((double) (( ((double) (array.length) ) / len )) ))) );
					while (( _g1 < _g )) {
						int p = _g1++;
						res.push(array.slice(( p * len ), new global::haxe.lang.Null<int>(( (( p + 1 )) * len ), true)));
					}
					
				}
				
				return res;
			}
		}
		
		
		public static global::Array<object> splitByPad<T>(global::Array<T> arr, int len, T pad) {
			unchecked {
				global::Array<object> res = global::thx.Arrays.splitBy<T>(((global::Array<T>) (arr) ), ((int) (len) ));
				while (( ((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((global::Array<object>) (res) )[( res.length - 1 )]) ))) ).length < len )) {
					((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((global::Array<object>) (res) )[( res.length - 1 )]) ))) ).push(pad);
				}
				
				return res;
			}
		}
		
		
		public static global::Array<T> tail<T>(global::Array<T> array) {
			unchecked {
				return array.slice(1, default(global::haxe.lang.Null<int>));
			}
		}
		
		
		public static global::Array<T> take<T>(global::Array<T> arr, int n) {
			return arr.slice(0, new global::haxe.lang.Null<int>(n, true));
		}
		
		
		public static global::Array<T> takeLast<T>(global::Array<T> arr, int n) {
			return arr.slice(( arr.length - n ), default(global::haxe.lang.Null<int>));
		}
		
		
		public static global::haxe.ds.Option traverseOption<T, U>(global::Array<T> arr, global::haxe.lang.Function f) {
			global::haxe.ds.Option tmp = global::haxe.ds.Option.Some(new global::Array<U>(new U[]{}));
			return ((global::haxe.ds.Option) (global::thx.Arrays.reduce<T, object>(((global::Array<T>) (arr) ), ((global::haxe.lang.Function) (new global::thx.Arrays_traverseOption_915__Fun<T, U>(f)) ), ((object) (tmp) ))) );
		}
		
		
		public static global::thx.Either traverseValidation<E, T, U>(global::Array<T> arr, global::haxe.lang.Function f, global::haxe.lang.Function s) {
			return ((global::thx.Either) (global::thx.Arrays.reduce<T, object>(((global::Array<T>) (arr) ), ((global::haxe.lang.Function) (new global::thx.Arrays_traverseValidation_925__Fun<T, U, E>(s, f)) ), ((global::thx.Either) (global::thx.Either.Right(new global::Array<U>(new U[]{}))) ))) );
		}
		
		
		public static global::thx.Either traverseValidationIndexed<E, T, U>(global::Array<T> arr, global::haxe.lang.Function f, global::haxe.lang.Function s) {
			return ((global::thx.Either) (global::thx.Arrays.reducei<T, object>(((global::Array<T>) (arr) ), ((global::haxe.lang.Function) (new global::thx.Arrays_traverseValidationIndexed_935__Fun<T, U, E>(s, f)) ), ((global::thx.Either) (global::thx.Either.Right(new global::Array<U>(new U[]{}))) ))) );
		}
		
		
		public static global::Array<object> rotate<T>(global::Array<object> arr) {
			global::Array<object> result = new global::Array<object>(new object[]{});
			{
				int _g1 = 0;
				int _g = ((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((global::Array<object>) (arr) )[0]) ))) ).length;
				while (( _g1 < _g )) {
					int i = _g1++;
					global::Array<T> row = new global::Array<T>(new T[]{});
					result.push(row);
					{
						int _g3 = 0;
						int _g2 = arr.length;
						while (( _g3 < _g2 )) {
							row.push(global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((global::Array<object>) (arr) )[_g3++]) ))) )[i]));
						}
						
					}
					
				}
				
			}
			
			return result;
		}
		
		
		public static global::Array<U> sliding2<T, U>(global::Array<T> arr, global::haxe.lang.Function f) {
			unchecked {
				if (( arr.length < 2 )) {
					return new global::Array<U>(new U[]{});
				}
				else {
					global::Array<U> result = new global::Array<U>(new U[]{});
					{
						int _g1 = 0;
						int _g = ( arr.length - 1 );
						while (( _g1 < _g )) {
							int i = _g1++;
							result.push(global::haxe.lang.Runtime.genericCast<U>(f.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (arr) )[i]), default(double), global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (arr) )[( i + 1 )]))));
						}
						
					}
					
					return result;
				}
				
			}
		}
		
		
		public static object unzip<T1, T2>(global::Array<object> array) {
			global::Array<T1> a1 = new global::Array<T1>(new T1[]{});
			global::Array<T2> a2 = new global::Array<T2>(new T2[]{});
			array.map<object>(((global::haxe.lang.Function) (new global::thx.Arrays_unzip_972__Fun<T2, T1>(a2, a1)) ));
			return ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{a1, a2}, new int[]{}, new double[]{})) );
		}
		
		
		public static object unzip3<T1, T2, T3>(global::Array<object> array) {
			global::Array<T1> a1 = new global::Array<T1>(new T1[]{});
			global::Array<T2> a2 = new global::Array<T2>(new T2[]{});
			global::Array<T3> a3 = new global::Array<T3>(new T3[]{});
			array.map<object>(((global::haxe.lang.Function) (new global::thx.Arrays_unzip3_984__Fun<T3, T2, T1>(a3, a2, a1)) ));
			return ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234, 21235}, new object[]{a1, a2, a3}, new int[]{}, new double[]{})) );
		}
		
		
		public static object unzip4<T1, T2, T3, T4>(global::Array<object> array) {
			global::Array<T1> a1 = new global::Array<T1>(new T1[]{});
			global::Array<T2> a2 = new global::Array<T2>(new T2[]{});
			global::Array<T3> a3 = new global::Array<T3>(new T3[]{});
			global::Array<T4> a4 = new global::Array<T4>(new T4[]{});
			array.map<object>(((global::haxe.lang.Function) (new global::thx.Arrays_unzip4_997__Fun<T4, T3, T2, T1>(a4, a3, a2, a1)) ));
			return ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234, 21235, 21236}, new object[]{a1, a2, a3, a4}, new int[]{}, new double[]{})) );
		}
		
		
		public static object unzip5<T1, T2, T3, T4, T5>(global::Array<object> array) {
			global::Array<T1> a1 = new global::Array<T1>(new T1[]{});
			global::Array<T2> a2 = new global::Array<T2>(new T2[]{});
			global::Array<T3> a3 = new global::Array<T3>(new T3[]{});
			global::Array<T4> a4 = new global::Array<T4>(new T4[]{});
			global::Array<T5> a5 = new global::Array<T5>(new T5[]{});
			array.map<object>(((global::haxe.lang.Function) (new global::thx.Arrays_unzip5_1011__Fun<T5, T4, T3, T2, T1>(a5, a4, a3, a2, a1)) ));
			return ((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234, 21235, 21236, 21237}, new object[]{a1, a2, a3, a4, a5}, new int[]{}, new double[]{})) );
		}
		
		
		public static global::Array<object> zip<T1, T2>(global::Array<T1> array1, global::Array<T2> array2) {
			int a = array1.length;
			int b = array2.length;
			int length = ( (( a < b )) ? (a) : (b) );
			global::Array<object> array = new global::Array<object>(new object[]{});
			{
				int _g1 = 0;
				int _g = length;
				while (( _g1 < _g )) {
					int i = _g1++;
					array.push(((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{global::haxe.lang.Runtime.genericCast<T1>(((global::Array<T1>) (array1) )[i]), global::haxe.lang.Runtime.genericCast<T2>(((global::Array<T2>) (array2) )[i])}, new int[]{}, new double[]{})) ));
				}
				
			}
			
			return array;
		}
		
		
		public static global::Array<object> zip3<T1, T2, T3>(global::Array<T1> array1, global::Array<T2> array2, global::Array<T3> array3) {
			global::haxe.lang.Null<int> length = global::thx.ArrayInts.min(new global::Array<int>(new int[]{array1.length, array2.length, array3.length}));
			global::Array<object> array = new global::Array<object>(new object[]{});
			{
				int _g1 = 0;
				int _g = (length).@value;
				while (( _g1 < _g )) {
					int i = _g1++;
					array.push(((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234, 21235}, new object[]{global::haxe.lang.Runtime.genericCast<T1>(((global::Array<T1>) (array1) )[i]), global::haxe.lang.Runtime.genericCast<T2>(((global::Array<T2>) (array2) )[i]), global::haxe.lang.Runtime.genericCast<T3>(((global::Array<T3>) (array3) )[i])}, new int[]{}, new double[]{})) ));
				}
				
			}
			
			return array;
		}
		
		
		public static global::Array<object> zip4<T1, T2, T3, T4>(global::Array<T1> array1, global::Array<T2> array2, global::Array<T3> array3, global::Array<T4> array4) {
			global::haxe.lang.Null<int> length = global::thx.ArrayInts.min(new global::Array<int>(new int[]{array1.length, array2.length, array3.length, array4.length}));
			global::Array<object> array = new global::Array<object>(new object[]{});
			{
				int _g1 = 0;
				int _g = (length).@value;
				while (( _g1 < _g )) {
					int i = _g1++;
					array.push(((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234, 21235, 21236}, new object[]{global::haxe.lang.Runtime.genericCast<T1>(((global::Array<T1>) (array1) )[i]), global::haxe.lang.Runtime.genericCast<T2>(((global::Array<T2>) (array2) )[i]), global::haxe.lang.Runtime.genericCast<T3>(((global::Array<T3>) (array3) )[i]), global::haxe.lang.Runtime.genericCast<T4>(((global::Array<T4>) (array4) )[i])}, new int[]{}, new double[]{})) ));
				}
				
			}
			
			return array;
		}
		
		
		public static global::Array<object> zip5<T1, T2, T3, T4, T5>(global::Array<T1> array1, global::Array<T2> array2, global::Array<T3> array3, global::Array<T4> array4, global::Array<T5> array5) {
			global::haxe.lang.Null<int> length = global::thx.ArrayInts.min(new global::Array<int>(new int[]{array1.length, array2.length, array3.length, array4.length, array5.length}));
			global::Array<object> array = new global::Array<object>(new object[]{});
			{
				int _g1 = 0;
				int _g = (length).@value;
				while (( _g1 < _g )) {
					int i = _g1++;
					array.push(((object) (new global::haxe.lang.DynamicObject(new int[]{21233, 21234, 21235, 21236, 21237}, new object[]{global::haxe.lang.Runtime.genericCast<T1>(((global::Array<T1>) (array1) )[i]), global::haxe.lang.Runtime.genericCast<T2>(((global::Array<T2>) (array2) )[i]), global::haxe.lang.Runtime.genericCast<T3>(((global::Array<T3>) (array3) )[i]), global::haxe.lang.Runtime.genericCast<T4>(((global::Array<T4>) (array4) )[i]), global::haxe.lang.Runtime.genericCast<T5>(((global::Array<T5>) (array5) )[i])}, new int[]{}, new double[]{})) ));
				}
				
			}
			
			return array;
		}
		
		
		public static global::Array<B> zipAp<A, B>(global::Array<A> ax, global::Array<object> fx) {
			global::Array<B> result = new global::Array<B>(new B[]{});
			{
				int _g1 = 0;
				int a = ax.length;
				int b = fx.length;
				int _g = ( (( a < b )) ? (a) : (b) );
				while (( _g1 < _g )) {
					int i = _g1++;
					result.push(global::haxe.lang.Runtime.genericCast<B>(((global::haxe.lang.Function) (((global::Array<object>) (fx) )[i]) ).__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<A>(((global::Array<A>) (ax) )[i]))));
				}
				
			}
			
			return result;
		}
		
		
		public static global::Array<C> zip2Ap<A, B, C>(global::haxe.lang.Function f, global::Array<A> ax, global::Array<B> bx) {
			return global::thx.Arrays.zipAp<B, C>(((global::Array<B>) (bx) ), ((global::Array<object>) (ax.map<object>(((global::haxe.lang.Function) (global::thx.Functions2.curry<A, B, C>(((global::haxe.lang.Function) (f) ))) ))) ));
		}
		
		
		public static global::Array<D> zip3Ap<A, B, C, D>(global::haxe.lang.Function f, global::Array<A> ax, global::Array<B> bx, global::Array<C> cx) {
			global::haxe.lang.Function f1 = f;
			return global::thx.Arrays.zipAp<C, D>(((global::Array<C>) (cx) ), ((global::Array<object>) (global::thx.Arrays.zip2Ap<A, B, object>(((global::haxe.lang.Function) (new global::thx.Arrays_zip3Ap_1086__Fun<C, D, B, A>(f1)) ), ((global::Array<A>) (ax) ), ((global::Array<B>) (bx) ))) ));
		}
		
		
		public static global::Array<E> zip4Ap<A, B, C, D, E>(global::haxe.lang.Function f, global::Array<A> ax, global::Array<B> bx, global::Array<C> cx, global::Array<D> dx) {
			global::haxe.lang.Function f1 = f;
			return global::thx.Arrays.zipAp<D, E>(((global::Array<D>) (dx) ), ((global::Array<object>) (global::thx.Arrays.zip3Ap<A, B, C, object>(((global::haxe.lang.Function) (new global::thx.Arrays_zip4Ap_1092__Fun<D, E, C, B, A>(f1)) ), ((global::Array<A>) (ax) ), ((global::Array<B>) (bx) ), ((global::Array<C>) (cx) ))) ));
		}
		
		
		public static global::Array<F> zip5Ap<A, B, C, D, E, F>(global::haxe.lang.Function f, global::Array<A> ax, global::Array<B> bx, global::Array<C> cx, global::Array<D> dx, global::Array<E> ex) {
			global::haxe.lang.Function f1 = f;
			return global::thx.Arrays.zipAp<E, F>(((global::Array<E>) (ex) ), ((global::Array<object>) (global::thx.Arrays.zip4Ap<A, B, C, D, object>(((global::haxe.lang.Function) (new global::thx.Arrays_zip5Ap_1098__Fun<E, F, D, C, B, A>(f1)) ), ((global::Array<A>) (ax) ), ((global::Array<B>) (bx) ), ((global::Array<C>) (cx) ), ((global::Array<D>) (dx) ))) ));
		}
		
		
		public static global::Array<T> withPrepend<T>(global::Array<T> arr, T el) {
			return new global::Array<T>(new T[]{el}).concat(((global::Array<T>) (arr) ));
		}
		
		
		public static global::Array<T> with<T>(global::Array<T> arr, T el) {
			return ((global::Array<T>) (((global::Array<T>) (arr) ).concat(((global::Array<T>) (new global::Array<T>(new T[]{el})) ))) );
		}
		
		
		public static global::Array<T> withSlice<T>(global::Array<T> arr, global::Array<T> other, int start, global::haxe.lang.Null<int> length) {
			global::haxe.lang.Null<int> __temp_length67 = ( ( ! (length.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (length) );
			return arr.slice(0, new global::haxe.lang.Null<int>(start, true)).concat(((global::Array<T>) (other) )).concat(arr.slice(( start + (__temp_length67).@value ), default(global::haxe.lang.Null<int>)));
		}
		
		
		public static global::Array<T> withInsert<T>(global::Array<T> arr, T el, int pos) {
			return arr.slice(0, new global::haxe.lang.Null<int>(pos, true)).concat(new global::Array<T>(new T[]{el})).concat(arr.slice(pos, default(global::haxe.lang.Null<int>)));
		}
		
		
		public static global::haxe.ds.Option maxBy<A>(global::Array<A> arr, global::haxe.lang.Function ord) {
			if (( arr.length == 0 )) {
				return global::haxe.ds.Option.None;
			}
			else {
				global::haxe.lang.Function _e = ord;
				return global::haxe.ds.Option.Some(global::thx.Arrays.reduce<A, A>(((global::Array<A>) (arr) ), ((global::haxe.lang.Function) (new global::thx.Arrays_maxBy_1128__Fun<A>(_e)) ), global::haxe.lang.Runtime.genericCast<A>(((global::Array<A>) (arr) )[0])));
			}
			
		}
		
		
		public static global::haxe.ds.Option minBy<A>(global::Array<A> arr, global::haxe.lang.Function ord) {
			if (( arr.length == 0 )) {
				return global::haxe.ds.Option.None;
			}
			else {
				global::haxe.lang.Function _e = ord;
				return global::haxe.ds.Option.Some(global::thx.Arrays.reduce<A, A>(((global::Array<A>) (arr) ), ((global::haxe.lang.Function) (new global::thx.Arrays_minBy_1134__Fun<A>(_e)) ), global::haxe.lang.Runtime.genericCast<A>(((global::Array<A>) (arr) )[0])));
			}
			
		}
		
		
		public static global::thx.Either toMap<K, V>(global::Array<object> arr, global::haxe.lang.Function keyOrder) {
			global::thx.fp.MapImpl m = ((global::thx.fp.MapImpl) (global::thx.fp.MapImpl.Tip) );
			global::Array<K> collisions = new global::Array<K>(new K[]{});
			{
				int _g1 = 0;
				int _g = arr.length;
				while (( _g1 < _g )) {
					object tuple = ((object) (((global::Array<object>) (arr) )[_g1++]) );
					if (global::thx.Options.isNone<V>(((global::haxe.ds.Option) (global::thx.fp._Map.Map_Impl_.lookup<K, V>(((global::thx.fp.MapImpl) (m) ), global::haxe.lang.Runtime.genericCast<K>(global::haxe.lang.Runtime.getField(tuple, "_0", 21233, true)), ((global::haxe.lang.Function) (keyOrder) ))) ))) {
						m = global::thx.fp._Map.Map_Impl_.insert<K, V>(((global::thx.fp.MapImpl) (m) ), global::haxe.lang.Runtime.genericCast<K>(global::haxe.lang.Runtime.getField(tuple, "_0", 21233, true)), global::haxe.lang.Runtime.genericCast<V>(global::haxe.lang.Runtime.getField(tuple, "_1", 21234, true)), ((global::haxe.lang.Function) (keyOrder) ));
					}
					else {
						collisions.push(global::haxe.lang.Runtime.genericCast<K>(global::haxe.lang.Runtime.getField(tuple, "_0", 21233, true)));
					}
					
				}
				
			}
			
			return global::thx.Options.toFailure<object, object>(((global::haxe.ds.Option) (global::thx._Nel.Nel_Impl_.fromArray<K>(((global::Array<K>) (collisions) ))) ), ((object) (m) ));
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.Arrays(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.Arrays();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_monoid_78__Fun<A> : global::haxe.lang.Function {
		
		public Arrays_monoid_78__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::Array<A> b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<A>) (global::Array<object>.__hx_cast<A>(((global::Array) (((object) (__fn_float2) )) ))) )) : (((global::Array<A>) (global::Array<object>.__hx_cast<A>(((global::Array) (__fn_dyn2) ))) )) );
			global::Array<A> a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<A>) (global::Array<object>.__hx_cast<A>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<A>) (global::Array<object>.__hx_cast<A>(((global::Array) (__fn_dyn1) ))) )) );
			return a.concat(b);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_at_139__Fun<T> : global::haxe.lang.Function {
		
		public Arrays_at_139__Fun(global::Array<T> arr) : base(1, 0) {
			this.arr = arr;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			int i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			return global::haxe.lang.Runtime.genericCast<T>(((global::Array<T>) (this.arr) )[i]);
		}
		
		
		public global::Array<T> arr;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_crossMulti_284__Fun<T> : global::haxe.lang.Function {
		
		public Arrays_crossMulti_284__Fun() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			T v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn1)) );
			return new global::Array<T>(new T[]{v});
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_distinct_316__Fun<T> : global::haxe.lang.Function {
		
		public Arrays_distinct_316__Fun(T v, global::haxe.lang.Function predicate) : base(1, 0) {
			this.v = v;
			this.predicate = predicate;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			T r = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn1)) );
			return global::haxe.lang.Runtime.toBool(this.predicate.__hx_invoke2_o(default(double), r, default(double), this.v));
		}
		
		
		public T v;
		
		public global::haxe.lang.Function predicate;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_filterOption_377__Fun<T> : global::haxe.lang.Function {
		
		public Arrays_filterOption_377__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				global::haxe.ds.Option maybeV = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.ds.Option) (((object) (__fn_float2) )) )) : (((global::haxe.ds.Option) (__fn_dyn2) )) );
				global::Array<T> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (__fn_dyn1) ))) )) );
				switch (maybeV.index) {
					case 0:
					{
						acc.push(global::haxe.lang.Runtime.genericCast<T>(maybeV.@params[0]));
						break;
					}
					
					
					case 1:
					{
						break;
					}
					
					
				}
				
				return acc;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_flatten_484__Fun<T> : global::haxe.lang.Function {
		
		public Arrays_flatten_484__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::Array<T> element = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((object) (__fn_float2) )) ))) )) : (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (__fn_dyn2) ))) )) );
			global::Array<T> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (__fn_dyn1) ))) )) );
			return acc.concat(element);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_intersperse_607__Fun<T> : global::haxe.lang.Function {
		
		public Arrays_intersperse_607__Fun() : base(3, 0) {
		}
		
		
		public override object __hx_invoke3_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3) {
			unchecked {
				int i = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float3) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn3)) )) );
				T v = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn2)) );
				global::Array<T> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (__fn_dyn1) ))) )) );
				acc[( i * 2 )] = v;
				return acc;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_rank_688__Fun<T> : global::haxe.lang.Function {
		
		public Arrays_rank_688__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int i = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			T v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn1)) );
			return ((object) (new global::haxe.lang.DynamicObject(new int[]{21233}, new object[]{v}, new int[]{21234}, new double[]{((double) (i) )})) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_rank_689__Fun<T> : global::haxe.lang.Function {
		
		public Arrays_rank_689__Fun(global::haxe.lang.Function compare) : base(2, 1) {
			this.compare = compare;
		}
		
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			object b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
			object a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			return ((double) (((int) (this.compare.__hx_invoke2_f(default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.getField(((object) (a) ), "_0", 21233, true)), default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.getField(((object) (b) ), "_0", 21233, true)))) )) );
		}
		
		
		public global::haxe.lang.Function compare;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_rank_692__Fun<T> : global::haxe.lang.Function {
		
		public Arrays_rank_692__Fun(global::haxe.ds.IntMap<bool> usedIndexes, global::haxe.lang.Function compare, global::Array<object> arr) : base(3, 0) {
			this.usedIndexes = usedIndexes;
			this.compare = compare;
			this.arr = arr;
		}
		
		
		public override object __hx_invoke3_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3) {
			unchecked {
				int i1 = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float3) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn3)) )) );
				object x = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
				global::Array<int> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
				int index = ( (( ( i1 > 0 ) && ( ((int) (this.compare.__hx_invoke2_f(default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.getField(((object) (this.arr[( i1 - 1 )]) ), "_0", 21233, true)), default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.getField(((object) (x) ), "_0", 21233, true)))) ) == 0 ) )) ? (acc[((int) (global::haxe.lang.Runtime.getField_f(((object) (this.arr[( i1 - 1 )]) ), "_1", 21234, true)) )]) : (i1) );
				while (((global::haxe.ds.IntMap<bool>) (this.usedIndexes) ).exists(index)) {
					 ++ index;
				}
				
				global::thx._Set.Set_Impl_.@add<int>(((global::haxe.IMap<int, bool>) (this.usedIndexes) ), ((int) (index) ));
				acc[((int) (global::haxe.lang.Runtime.getField_f(((object) (x) ), "_1", 21234, true)) )] = index;
				return acc;
			}
		}
		
		
		public global::haxe.ds.IntMap<bool> usedIndexes;
		
		public global::haxe.lang.Function compare;
		
		public global::Array<object> arr;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_rank_702__Fun<T> : global::haxe.lang.Function {
		
		public Arrays_rank_702__Fun(global::haxe.lang.Function compare, global::Array<object> arr) : base(3, 0) {
			this.compare = compare;
			this.arr = arr;
		}
		
		
		public override object __hx_invoke3_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3) {
			unchecked {
				int i2 = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float3) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn3)) )) );
				object x1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float2) )) : (((object) (__fn_dyn2) )) );
				global::Array<int> acc1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
				acc1[((int) (global::haxe.lang.Runtime.getField_f(((object) (x1) ), "_1", 21234, true)) )] = ( (( ( i2 > 0 ) && ( ((int) (this.compare.__hx_invoke2_f(default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.getField(((object) (this.arr[( i2 - 1 )]) ), "_0", 21233, true)), default(double), global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.getField(((object) (x1) ), "_0", 21233, true)))) ) == 0 ) )) ? (acc1[((int) (global::haxe.lang.Runtime.getField_f(((object) (this.arr[( i2 - 1 )]) ), "_1", 21234, true)) )]) : (i2) );
				return acc1;
			}
		}
		
		
		public global::haxe.lang.Function compare;
		
		public global::Array<object> arr;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_foldMap_740__Fun<B> : global::haxe.lang.Function {
		
		public Arrays_foldMap_740__Fun(object _e) : base(2, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			B a1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<B>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<B>(__fn_dyn2)) );
			B a0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<B>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<B>(__fn_dyn1)) );
			return global::thx._Monoid.Monoid_Impl_.append<B>(((object) (this._e) ), global::haxe.lang.Runtime.genericCast<B>(a0), global::haxe.lang.Runtime.genericCast<B>(a1));
		}
		
		
		public object _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_foldS_758__Fun<A> : global::haxe.lang.Function {
		
		public Arrays_foldS_758__Fun(global::haxe.lang.Function s) : base(1, 0) {
			this.s = s;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.NonEmptyList x = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.NonEmptyList) (((object) (__fn_float1) )) )) : (((global::thx.NonEmptyList) (__fn_dyn1) )) );
			return global::thx._Nel.Nel_Impl_.fold<A>(((global::thx.NonEmptyList) (x) ), ((global::haxe.lang.Function) (this.s) ));
		}
		
		
		public global::haxe.lang.Function s;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseOption_916__Fun_0<U> : global::haxe.lang.Function {
		
		public Arrays_traverseOption_916__Fun_0(global::Array<U> ux) : base(1, 0) {
			this.ux = ux;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			U u = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<U>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<U>(__fn_dyn1)) );
			this.ux.push(u);
			return this.ux;
		}
		
		
		public global::Array<U> ux;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseOption_916__Fun<U> : global::haxe.lang.Function {
		
		public Arrays_traverseOption_916__Fun() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::Array<U> ux = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<U>) (global::Array<object>.__hx_cast<U>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<U>) (global::Array<object>.__hx_cast<U>(((global::Array) (__fn_dyn1) ))) )) );
			return new global::thx.Arrays_traverseOption_916__Fun_0<U>(ux);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseOption_915__Fun<T, U> : global::haxe.lang.Function {
		
		public Arrays_traverseOption_915__Fun(global::haxe.lang.Function f) : base(2, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			T t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn2)) );
			global::haxe.ds.Option acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.ds.Option) (((object) (__fn_float1) )) )) : (((global::haxe.ds.Option) (__fn_dyn1) )) );
			return global::thx.Options.ap<U, object>(((global::haxe.ds.Option) (this.f.__hx_invoke1_o(default(double), t)) ), ((global::haxe.ds.Option) (global::thx.Options.map<object, object>(((global::haxe.ds.Option) (acc) ), ((global::haxe.lang.Function) (new global::thx.Arrays_traverseOption_916__Fun<U>()) ))) ));
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseValidation_926__Fun_1<U> : global::haxe.lang.Function {
		
		public Arrays_traverseValidation_926__Fun_1(global::Array<U> ux) : base(1, 0) {
			this.ux = ux;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			U u = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<U>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<U>(__fn_dyn1)) );
			this.ux.push(u);
			return this.ux;
		}
		
		
		public global::Array<U> ux;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseValidation_926__Fun_0<U> : global::haxe.lang.Function {
		
		public Arrays_traverseValidation_926__Fun_0() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::Array<U> ux = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<U>) (global::Array<object>.__hx_cast<U>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<U>) (global::Array<object>.__hx_cast<U>(((global::Array) (__fn_dyn1) ))) )) );
			return new global::thx.Arrays_traverseValidation_926__Fun_1<U>(ux);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseValidation_926__Fun<E> : global::haxe.lang.Function {
		
		public Arrays_traverseValidation_926__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			E e2 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<E>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<E>(__fn_dyn2)) );
			E e1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<E>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<E>(__fn_dyn1)) );
			throw global::haxe.lang.HaxeException.wrap("Unreachable");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseValidation_925__Fun<T, U, E> : global::haxe.lang.Function {
		
		public Arrays_traverseValidation_925__Fun(global::haxe.lang.Function s, global::haxe.lang.Function f) : base(2, 0) {
			this.s = s;
			this.f = f;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			T t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn2)) );
			global::thx.Either acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Either) (((object) (__fn_float1) )) )) : (((global::thx.Either) (__fn_dyn1) )) );
			return global::thx._Validation.Validation_Impl_.ap<object, E, U>(((global::thx.Either) (this.f.__hx_invoke1_o(default(double), t)) ), ((global::thx.Either) (global::thx._Validation.Validation_Impl_.ap<object, E, object>(((global::thx.Either) (acc) ), ((global::thx.Either) (global::thx.Either.Right(new global::thx.Arrays_traverseValidation_926__Fun_0<U>())) ), ((global::haxe.lang.Function) (new global::thx.Arrays_traverseValidation_926__Fun<E>()) ))) ), ((global::haxe.lang.Function) (this.s) ));
		}
		
		
		public global::haxe.lang.Function s;
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseValidationIndexed_936__Fun_1<U> : global::haxe.lang.Function {
		
		public Arrays_traverseValidationIndexed_936__Fun_1(global::Array<U> ux) : base(1, 0) {
			this.ux = ux;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			U u = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<U>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<U>(__fn_dyn1)) );
			this.ux.push(u);
			return this.ux;
		}
		
		
		public global::Array<U> ux;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseValidationIndexed_936__Fun_0<U> : global::haxe.lang.Function {
		
		public Arrays_traverseValidationIndexed_936__Fun_0() : base(1, 0) {
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::Array<U> ux = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<U>) (global::Array<object>.__hx_cast<U>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<U>) (global::Array<object>.__hx_cast<U>(((global::Array) (__fn_dyn1) ))) )) );
			return new global::thx.Arrays_traverseValidationIndexed_936__Fun_1<U>(ux);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseValidationIndexed_936__Fun<E> : global::haxe.lang.Function {
		
		public Arrays_traverseValidationIndexed_936__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			E e2 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<E>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<E>(__fn_dyn2)) );
			E e1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<E>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<E>(__fn_dyn1)) );
			throw global::haxe.lang.HaxeException.wrap("Unreachable");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_traverseValidationIndexed_935__Fun<T, U, E> : global::haxe.lang.Function {
		
		public Arrays_traverseValidationIndexed_935__Fun(global::haxe.lang.Function s, global::haxe.lang.Function f) : base(3, 0) {
			this.s = s;
			this.f = f;
		}
		
		
		public override object __hx_invoke3_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3) {
			int i = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float3) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn3)) )) );
			T t = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn2)) );
			global::thx.Either acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Either) (((object) (__fn_float1) )) )) : (((global::thx.Either) (__fn_dyn1) )) );
			return global::thx._Validation.Validation_Impl_.ap<object, E, U>(((global::thx.Either) (this.f.__hx_invoke2_o(default(double), t, ((double) (i) ), global::haxe.lang.Runtime.undefined)) ), ((global::thx.Either) (global::thx._Validation.Validation_Impl_.ap<object, E, object>(((global::thx.Either) (acc) ), ((global::thx.Either) (global::thx.Either.Right(new global::thx.Arrays_traverseValidationIndexed_936__Fun_0<U>())) ), ((global::haxe.lang.Function) (new global::thx.Arrays_traverseValidationIndexed_936__Fun<E>()) ))) ), ((global::haxe.lang.Function) (this.s) ));
		}
		
		
		public global::haxe.lang.Function s;
		
		public global::haxe.lang.Function f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_unzip_972__Fun<T2, T1> : global::haxe.lang.Function {
		
		public Arrays_unzip_972__Fun(global::Array<T2> a2, global::Array<T1> a1) : base(1, 0) {
			this.a2 = a2;
			this.a1 = a1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object t = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			this.a1.push(global::haxe.lang.Runtime.genericCast<T1>(global::haxe.lang.Runtime.getField(t, "_0", 21233, true)));
			this.a2.push(global::haxe.lang.Runtime.genericCast<T2>(global::haxe.lang.Runtime.getField(t, "_1", 21234, true)));
			return null;
		}
		
		
		public global::Array<T2> a2;
		
		public global::Array<T1> a1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_unzip3_984__Fun<T3, T2, T1> : global::haxe.lang.Function {
		
		public Arrays_unzip3_984__Fun(global::Array<T3> a3, global::Array<T2> a2, global::Array<T1> a1) : base(1, 0) {
			this.a3 = a3;
			this.a2 = a2;
			this.a1 = a1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object t = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			this.a1.push(global::haxe.lang.Runtime.genericCast<T1>(global::haxe.lang.Runtime.getField(t, "_0", 21233, true)));
			this.a2.push(global::haxe.lang.Runtime.genericCast<T2>(global::haxe.lang.Runtime.getField(t, "_1", 21234, true)));
			this.a3.push(global::haxe.lang.Runtime.genericCast<T3>(global::haxe.lang.Runtime.getField(t, "_2", 21235, true)));
			return null;
		}
		
		
		public global::Array<T3> a3;
		
		public global::Array<T2> a2;
		
		public global::Array<T1> a1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_unzip4_997__Fun<T4, T3, T2, T1> : global::haxe.lang.Function {
		
		public Arrays_unzip4_997__Fun(global::Array<T4> a4, global::Array<T3> a3, global::Array<T2> a2, global::Array<T1> a1) : base(1, 0) {
			this.a4 = a4;
			this.a3 = a3;
			this.a2 = a2;
			this.a1 = a1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object t = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			this.a1.push(global::haxe.lang.Runtime.genericCast<T1>(global::haxe.lang.Runtime.getField(t, "_0", 21233, true)));
			this.a2.push(global::haxe.lang.Runtime.genericCast<T2>(global::haxe.lang.Runtime.getField(t, "_1", 21234, true)));
			this.a3.push(global::haxe.lang.Runtime.genericCast<T3>(global::haxe.lang.Runtime.getField(t, "_2", 21235, true)));
			this.a4.push(global::haxe.lang.Runtime.genericCast<T4>(global::haxe.lang.Runtime.getField(t, "_3", 21236, true)));
			return null;
		}
		
		
		public global::Array<T4> a4;
		
		public global::Array<T3> a3;
		
		public global::Array<T2> a2;
		
		public global::Array<T1> a1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_unzip5_1011__Fun<T5, T4, T3, T2, T1> : global::haxe.lang.Function {
		
		public Arrays_unzip5_1011__Fun(global::Array<T5> a5, global::Array<T4> a4, global::Array<T3> a3, global::Array<T2> a2, global::Array<T1> a1) : base(1, 0) {
			this.a5 = a5;
			this.a4 = a4;
			this.a3 = a3;
			this.a2 = a2;
			this.a1 = a1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object t = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			this.a1.push(global::haxe.lang.Runtime.genericCast<T1>(global::haxe.lang.Runtime.getField(t, "_0", 21233, true)));
			this.a2.push(global::haxe.lang.Runtime.genericCast<T2>(global::haxe.lang.Runtime.getField(t, "_1", 21234, true)));
			this.a3.push(global::haxe.lang.Runtime.genericCast<T3>(global::haxe.lang.Runtime.getField(t, "_2", 21235, true)));
			this.a4.push(global::haxe.lang.Runtime.genericCast<T4>(global::haxe.lang.Runtime.getField(t, "_3", 21236, true)));
			this.a5.push(global::haxe.lang.Runtime.genericCast<T5>(global::haxe.lang.Runtime.getField(t, "_4", 21237, true)));
			return null;
		}
		
		
		public global::Array<T5> a5;
		
		public global::Array<T4> a4;
		
		public global::Array<T3> a3;
		
		public global::Array<T2> a2;
		
		public global::Array<T1> a1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_zip3Ap_1086__Fun_0<B, A, D, C> : global::haxe.lang.Function {
		
		public Arrays_zip3Ap_1086__Fun_0(global::haxe.lang.Function f1, B b, A a) : base(1, 0) {
			this.f1 = f1;
			this.b = b;
			this.a = a;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			C c = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<C>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<C>(__fn_dyn1)) );
			return global::haxe.lang.Runtime.genericCast<D>(this.f1.__hx_invoke3_o(default(double), this.a, default(double), this.b, default(double), c));
		}
		
		
		public global::haxe.lang.Function f1;
		
		public B b;
		
		public A a;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_zip3Ap_1086__Fun<C, D, B, A> : global::haxe.lang.Function {
		
		public Arrays_zip3Ap_1086__Fun(global::haxe.lang.Function f1) : base(2, 0) {
			this.f1 = f1;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			B b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<B>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<B>(__fn_dyn2)) );
			A a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn1)) );
			return new global::thx.Arrays_zip3Ap_1086__Fun_0<B, A, D, C>(this.f1, b, a);
		}
		
		
		public global::haxe.lang.Function f1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_zip4Ap_1092__Fun_0<C, B, A, E, D> : global::haxe.lang.Function {
		
		public Arrays_zip4Ap_1092__Fun_0(global::haxe.lang.Function f1, C c, B b, A a) : base(1, 0) {
			this.f1 = f1;
			this.c = c;
			this.b = b;
			this.a = a;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			D d = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<D>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<D>(__fn_dyn1)) );
			return global::haxe.lang.Runtime.genericCast<E>(this.f1.__hx_invoke4_o(default(double), this.a, default(double), this.b, default(double), this.c, default(double), d));
		}
		
		
		public global::haxe.lang.Function f1;
		
		public C c;
		
		public B b;
		
		public A a;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_zip4Ap_1092__Fun<D, E, C, B, A> : global::haxe.lang.Function {
		
		public Arrays_zip4Ap_1092__Fun(global::haxe.lang.Function f1) : base(3, 0) {
			this.f1 = f1;
		}
		
		
		public override object __hx_invoke3_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3) {
			C c = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<C>(((object) (__fn_float3) ))) : (global::haxe.lang.Runtime.genericCast<C>(__fn_dyn3)) );
			B b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<B>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<B>(__fn_dyn2)) );
			A a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn1)) );
			return new global::thx.Arrays_zip4Ap_1092__Fun_0<C, B, A, E, D>(this.f1, c, b, a);
		}
		
		
		public global::haxe.lang.Function f1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_zip5Ap_1098__Fun_0<D, C, B, A, F, E> : global::haxe.lang.Function {
		
		public Arrays_zip5Ap_1098__Fun_0(global::haxe.lang.Function f1, D d, C c, B b, A a) : base(1, 0) {
			this.f1 = f1;
			this.d = d;
			this.c = c;
			this.b = b;
			this.a = a;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			E e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<E>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<E>(__fn_dyn1)) );
			return global::haxe.lang.Runtime.genericCast<F>(this.f1.__hx_invoke5_o(default(double), this.a, default(double), this.b, default(double), this.c, default(double), this.d, default(double), e));
		}
		
		
		public global::haxe.lang.Function f1;
		
		public D d;
		
		public C c;
		
		public B b;
		
		public A a;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_zip5Ap_1098__Fun<E, F, D, C, B, A> : global::haxe.lang.Function {
		
		public Arrays_zip5Ap_1098__Fun(global::haxe.lang.Function f1) : base(4, 0) {
			this.f1 = f1;
		}
		
		
		public override object __hx_invoke4_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3, double __fn_float4, object __fn_dyn4) {
			D d = ( (( __fn_dyn4 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<D>(((object) (__fn_float4) ))) : (global::haxe.lang.Runtime.genericCast<D>(__fn_dyn4)) );
			C c = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<C>(((object) (__fn_float3) ))) : (global::haxe.lang.Runtime.genericCast<C>(__fn_dyn3)) );
			B b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<B>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<B>(__fn_dyn2)) );
			A a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn1)) );
			return new global::thx.Arrays_zip5Ap_1098__Fun_0<D, C, B, A, F, E>(this.f1, d, c, b, a);
		}
		
		
		public global::haxe.lang.Function f1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_maxBy_1128__Fun<A> : global::haxe.lang.Function {
		
		public Arrays_maxBy_1128__Fun(global::haxe.lang.Function _e) : base(2, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			A a1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn2)) );
			A a0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn1)) );
			return global::thx._Ord.Ord_Impl_.max<A>(((global::haxe.lang.Function) (this._e) ), global::haxe.lang.Runtime.genericCast<A>(a0), global::haxe.lang.Runtime.genericCast<A>(a1));
		}
		
		
		public global::haxe.lang.Function _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Arrays_minBy_1134__Fun<A> : global::haxe.lang.Function {
		
		public Arrays_minBy_1134__Fun(global::haxe.lang.Function _e) : base(2, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			A a1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn2)) );
			A a0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn1)) );
			return global::thx._Ord.Ord_Impl_.min<A>(((global::haxe.lang.Function) (this._e) ), global::haxe.lang.Runtime.genericCast<A>(a0), global::haxe.lang.Runtime.genericCast<A>(a1));
		}
		
		
		public global::haxe.lang.Function _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class ArrayFloats : global::haxe.lang.HxObject {
		
		public ArrayFloats(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ArrayFloats() {
			global::thx.ArrayFloats.__hx_ctor_thx_ArrayFloats(this);
		}
		
		
		public static void __hx_ctor_thx_ArrayFloats(global::thx.ArrayFloats __temp_me70) {
		}
		
		
		public static double average(global::Array<double> arr) {
			return ( (global::thx.ArrayFloats.sum(arr)).@value / arr.length );
		}
		
		
		public static global::Array<double> compact(global::Array<object> arr) {
			return ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (arr.filter(( (( global::thx.ArrayFloats_compact_1174__Fun.__hx_current != null )) ? (global::thx.ArrayFloats_compact_1174__Fun.__hx_current) : (global::thx.ArrayFloats_compact_1174__Fun.__hx_current = ((global::thx.ArrayFloats_compact_1174__Fun) (new global::thx.ArrayFloats_compact_1174__Fun()) )) ))) ))) );
		}
		
		
		public static global::haxe.lang.Null<double> max(global::Array<double> arr) {
			return global::thx.Options.@get<double>(((global::haxe.ds.Option) (global::thx.Arrays.maxBy<double>(((global::Array<double>) (arr) ), ((global::haxe.lang.Function) (global::thx.Floats.order) ))) ));
		}
		
		
		public static global::haxe.lang.Null<double> min(global::Array<double> arr) {
			return global::thx.Options.@get<double>(((global::haxe.ds.Option) (global::thx.Arrays.minBy<double>(((global::Array<double>) (arr) ), ((global::haxe.lang.Function) (global::thx.Floats.order) ))) ));
		}
		
		
		public static global::Array<double> resize(global::Array<double> array, int length, global::haxe.lang.Null<double> fill) {
			double __temp_fill69 = ( ( ! (fill.hasValue) ) ? (0.0) : ((fill).@value) );
			while (( array.length < length )) {
				array.push(__temp_fill69);
			}
			
			array.splice(length, ( array.length - length ));
			return array;
		}
		
		
		public static double standardDeviation(global::Array<double> array) {
			unchecked {
				if (( array.length < 2 )) {
					return 0.0;
				}
				
				double mean = global::thx.ArrayFloats.average(array);
				return global::System.Math.Sqrt(((double) (( global::thx.Arrays.reduce<double, double>(((global::Array<double>) (array) ), ((global::haxe.lang.Function) (new global::thx.ArrayFloats_standardDeviation_1208__Fun(mean)) ), ((double) (0) )) / (( array.length - 1 )) )) ));
			}
		}
		
		
		public static global::haxe.lang.Null<double> sum(global::Array<double> arr) {
			return new global::haxe.lang.Null<double>(global::thx.Arrays.reduce<double, double>(((global::Array<double>) (arr) ), ((global::haxe.lang.Function) (( (( global::thx.ArrayFloats_sum_1218__Fun.__hx_current != null )) ? (global::thx.ArrayFloats_sum_1218__Fun.__hx_current) : (global::thx.ArrayFloats_sum_1218__Fun.__hx_current = ((global::thx.ArrayFloats_sum_1218__Fun) (new global::thx.ArrayFloats_sum_1218__Fun()) )) )) ), ((double) (0.0) )), true);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.ArrayFloats(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.ArrayFloats();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class ArrayFloats_compact_1174__Fun : global::haxe.lang.Function {
		
		public ArrayFloats_compact_1174__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.ArrayFloats_compact_1174__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::haxe.lang.Null<double> v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<double>(__fn_float1, true)) : (global::haxe.lang.Null<object>.ofDynamic<double>(__fn_dyn1)) );
			if (v.hasValue) {
				double f = (v).@value;
				if ( ! (global::System.Double.IsInfinity(((double) (f) ))) ) {
					return  ! (global::System.Double.IsNaN(((double) (f) ))) ;
				}
				else {
					return false;
				}
				
			}
			else {
				return false;
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class ArrayFloats_standardDeviation_1208__Fun : global::haxe.lang.Function {
		
		public ArrayFloats_standardDeviation_1208__Fun(double mean) : base(2, 1) {
			this.mean = mean;
		}
		
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				double val = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((double) (__fn_float2) )) : (((double) (global::haxe.lang.Runtime.toDouble(__fn_dyn2)) )) );
				double acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((double) (__fn_float1) )) : (((double) (global::haxe.lang.Runtime.toDouble(__fn_dyn1)) )) );
				return ( acc + global::System.Math.Pow(((double) (( val - this.mean )) ), ((double) (2) )) );
			}
		}
		
		
		public double mean;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class ArrayFloats_sum_1218__Fun : global::haxe.lang.Function {
		
		public ArrayFloats_sum_1218__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.ArrayFloats_sum_1218__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			double v = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((double) (__fn_float2) )) : (((double) (global::haxe.lang.Runtime.toDouble(__fn_dyn2)) )) );
			double tot = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((double) (__fn_float1) )) : (((double) (global::haxe.lang.Runtime.toDouble(__fn_dyn1)) )) );
			return ( tot + v );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class ArrayInts : global::haxe.lang.HxObject {
		
		public ArrayInts(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ArrayInts() {
			global::thx.ArrayInts.__hx_ctor_thx_ArrayInts(this);
		}
		
		
		public static void __hx_ctor_thx_ArrayInts(global::thx.ArrayInts __temp_me72) {
		}
		
		
		public static global::haxe.lang.Null<double> average(global::Array<int> arr) {
			return new global::haxe.lang.Null<double>(( (global::thx.ArrayInts.sum(arr)).@value / arr.length ), true);
		}
		
		
		public static global::haxe.lang.Null<int> max(global::Array<int> arr) {
			return global::thx.Options.@get<int>(((global::haxe.ds.Option) (global::thx.Arrays.maxBy<int>(((global::Array<int>) (arr) ), ((global::haxe.lang.Function) (global::thx.Ints.order) ))) ));
		}
		
		
		public static global::haxe.lang.Null<int> min(global::Array<int> arr) {
			return global::thx.Options.@get<int>(((global::haxe.ds.Option) (global::thx.Arrays.minBy<int>(((global::Array<int>) (arr) ), ((global::haxe.lang.Function) (global::thx.Ints.order) ))) ));
		}
		
		
		public static global::Array<int> resize(global::Array<int> array, int length, global::haxe.lang.Null<int> fill) {
			int __temp_fill71 = ( ( ! (fill.hasValue) ) ? (0) : ((fill).@value) );
			while (( array.length < length )) {
				array.push(__temp_fill71);
			}
			
			array.splice(length, ( array.length - length ));
			return array;
		}
		
		
		public static global::haxe.lang.Null<int> sum(global::Array<int> arr) {
			return new global::haxe.lang.Null<int>(global::thx.Arrays.reduce<int, int>(((global::Array<int>) (arr) ), ((global::haxe.lang.Function) (( (( global::thx.ArrayInts_sum_1260__Fun.__hx_current != null )) ? (global::thx.ArrayInts_sum_1260__Fun.__hx_current) : (global::thx.ArrayInts_sum_1260__Fun.__hx_current = ((global::thx.ArrayInts_sum_1260__Fun) (new global::thx.ArrayInts_sum_1260__Fun()) )) )) ), ((int) (0) )), true);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.ArrayInts(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.ArrayInts();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class ArrayInts_sum_1260__Fun : global::haxe.lang.Function {
		
		public ArrayInts_sum_1260__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.ArrayInts_sum_1260__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int v = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			int tot = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			return ((double) (( tot + v )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class ArrayStrings : global::haxe.lang.HxObject {
		
		public ArrayStrings(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ArrayStrings() {
			global::thx.ArrayStrings.__hx_ctor_thx_ArrayStrings(this);
		}
		
		
		public static void __hx_ctor_thx_ArrayStrings(global::thx.ArrayStrings __temp_me73) {
		}
		
		
		public static global::Array<object> compact(global::Array<object> arr) {
			return arr.filter(( (( global::thx.ArrayStrings_compact_1271__Fun.__hx_current != null )) ? (global::thx.ArrayStrings_compact_1271__Fun.__hx_current) : (global::thx.ArrayStrings_compact_1271__Fun.__hx_current = ((global::thx.ArrayStrings_compact_1271__Fun) (new global::thx.ArrayStrings_compact_1271__Fun()) )) ));
		}
		
		
		public static string max(global::Array<object> arr) {
			return global::haxe.lang.Runtime.toString(global::thx.Options.getOrElse<object>(((global::haxe.ds.Option) (global::thx.Arrays.maxBy<object>(((global::Array<object>) (arr) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) (null) )));
		}
		
		
		public static string min(global::Array<object> arr) {
			return global::haxe.lang.Runtime.toString(global::thx.Options.getOrElse<object>(((global::haxe.ds.Option) (global::thx.Arrays.minBy<object>(((global::Array<object>) (arr) ), ((global::haxe.lang.Function) (global::thx.Strings.order) ))) ), ((object) (null) )));
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.ArrayStrings(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.ArrayStrings();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class ArrayStrings_compact_1271__Fun : global::haxe.lang.Function {
		
		public ArrayStrings_compact_1271__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.ArrayStrings_compact_1271__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return  ! (global::thx.Strings.isEmpty(v)) ;
		}
		
		
	}
}


