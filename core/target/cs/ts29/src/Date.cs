// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
public class Date : global::haxe.lang.HxObject {
	
	public Date(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Date(global::System.DateTime native) {
		global::Date.__hx_ctor__Date(((global::Date) (this) ), ((global::System.DateTime) (native) ));
	}
	
	
	public Date(int year, int month, int day, int hour, int min, int sec) {
		global::Date.__hx_ctor__Date(((global::Date) (this) ), ((int) (year) ), ((int) (month) ), ((int) (day) ), ((int) (hour) ), ((int) (min) ), ((int) (sec) ));
	}
	
	
	public static void __hx_ctor__Date(global::Date __temp_me8, global::System.DateTime native) {
		__temp_me8.date = native;
	}
	
	
	public static void __hx_ctor__Date(global::Date __temp_me7, int year, int month, int day, int hour, int min, int sec) {
		unchecked {
			if (( day <= 0 )) {
				day = 1;
			}
			
			if (( year <= 0 )) {
				year = 1;
			}
			
			__temp_me7.date = new global::System.DateTime(year, ( month + 1 ), day, hour, min, sec);
		}
	}
	
	
	public static readonly long epochTicks = new global::System.DateTime(1970, 1, 1).Ticks;
	
	public static global::Date now() {
		return new global::Date(((global::System.DateTime) (global::System.DateTime.Now) ));
	}
	
	
	public static global::Date fromTime(double t) {
		return new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( t * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
	}
	
	
	public static global::Date fromString(string s) {
		unchecked {
			switch (s.Length) {
				case 8:
				{
					global::Array<object> k = global::haxe.lang.StringExt.split(s, ":");
					return new global::Date(1, 1, 1, (global::Std.parseInt(global::haxe.lang.Runtime.toString(k[0]))).@value, (global::Std.parseInt(global::haxe.lang.Runtime.toString(k[1]))).@value, (global::Std.parseInt(global::haxe.lang.Runtime.toString(k[2]))).@value);
				}
				
				
				case 10:
				{
					global::Array<object> k1 = global::haxe.lang.StringExt.split(s, "-");
					return new global::Date((global::Std.parseInt(global::haxe.lang.Runtime.toString(k1[0]))).@value, ( (global::Std.parseInt(global::haxe.lang.Runtime.toString(k1[1]))).@value - 1 ), (global::Std.parseInt(global::haxe.lang.Runtime.toString(k1[2]))).@value, 0, 0, 0);
				}
				
				
				case 19:
				{
					global::Array<object> k2 = global::haxe.lang.StringExt.split(s, " ");
					global::Array<object> y = global::haxe.lang.StringExt.split(global::haxe.lang.Runtime.toString(k2[0]), "-");
					global::Array<object> t = global::haxe.lang.StringExt.split(global::haxe.lang.Runtime.toString(k2[1]), ":");
					return new global::Date((global::Std.parseInt(global::haxe.lang.Runtime.toString(y[0]))).@value, ( (global::Std.parseInt(global::haxe.lang.Runtime.toString(y[1]))).@value - 1 ), (global::Std.parseInt(global::haxe.lang.Runtime.toString(y[2]))).@value, (global::Std.parseInt(global::haxe.lang.Runtime.toString(t[0]))).@value, (global::Std.parseInt(global::haxe.lang.Runtime.toString(t[1]))).@value, (global::Std.parseInt(global::haxe.lang.Runtime.toString(t[2]))).@value);
				}
				
				
				default:
				{
					throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Invalid date format : ", s));
				}
				
			}
			
		}
	}
	
	
	public static global::Date fromNative(global::System.DateTime d) {
		return new global::Date(((global::System.DateTime) (d) ));
	}
	
	
	public static new object __hx_createEmpty() {
		return new global::Date(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static new object __hx_create(global::Array arr) {
		unchecked {
			return new global::Date(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ), ((int) (global::haxe.lang.Runtime.toInt(arr[1])) ), ((int) (global::haxe.lang.Runtime.toInt(arr[2])) ), ((int) (global::haxe.lang.Runtime.toInt(arr[3])) ), ((int) (global::haxe.lang.Runtime.toInt(arr[4])) ), ((int) (global::haxe.lang.Runtime.toInt(arr[5])) ));
		}
	}
	
	
	public global::System.DateTime date;
	
	public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
		unchecked {
			switch (hash) {
				case 1113806382:
				{
					this.date = ((global::System.DateTime) (@value) );
					return @value;
				}
				
				
				default:
				{
					return base.__hx_setField(field, hash, @value, handleProperties);
				}
				
			}
			
		}
	}
	
	
	public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
		unchecked {
			switch (hash) {
				case 1113806382:
				{
					return this.date;
				}
				
				
				default:
				{
					return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
				}
				
			}
			
		}
	}
	
	
	public override void __hx_getFields(global::Array<object> baseArr) {
		baseArr.push("date");
		{
			base.__hx_getFields(baseArr);
		}
		
	}
	
	
}


