// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public sealed class BitMatrix_Impl_ {
		
		
		
		
		
		public static global::Array<object> _new(global::haxe.lang.Null<int> bitSetCount, global::haxe.lang.Null<int> length) {
			global::haxe.lang.Null<int> __temp_length74 = ( ( ! (length.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (length) );
			global::haxe.lang.Null<int> __temp_bitSetCount73 = ( ( ! (bitSetCount.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (bitSetCount) );
			return global::thx._BitMatrix.BitMatrix_Impl_.empty(__temp_bitSetCount73, __temp_length74);
		}
		
		
		public static global::Array<object> empty(global::haxe.lang.Null<int> bitSetCount, global::haxe.lang.Null<int> length) {
			unchecked {
				global::haxe.lang.Null<int> __temp_length76 = ( ( ! (length.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (length) );
				global::haxe.lang.Null<int> __temp_bitSetCount75 = ( ( ! (bitSetCount.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (bitSetCount) );
				global::Array<object> bitMatrix = new global::Array<object>(new object[]{});
				{
					int _g1 = 0;
					int _g = (__temp_bitSetCount75).@value;
					while (( _g1 < _g )) {
						int bitSetIndex = _g1++;
						int length1 = (__temp_length76).@value;
						global::Array<int> this1 = new global::Array<int>(new int[]{length1});
						global::thx.Arrays.resize<int>(((global::Array<int>) (this1) ), ((int) (( ( ((int) (( length1 / 32 )) ) + 1 ) + 1 )) ), ((int) (0) ));
						global::thx._BitMatrix.BitMatrix_Impl_.setBitSetAt(bitMatrix, bitSetIndex, ((global::Array<int>) (this1) ));
					}
					
				}
				
				return bitMatrix;
			}
		}
		
		
		public static global::Array<object> fromBitSets(global::Array<object> bitSets) {
			global::Array<object> bitMatrix = global::thx._BitMatrix.BitMatrix_Impl_._new(default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
			{
				int _g1 = 0;
				int _g = bitSets.length;
				while (( _g1 < _g )) {
					int bitSetIndex = _g1++;
					global::thx._BitMatrix.BitMatrix_Impl_.setBitSetAt(bitMatrix, bitSetIndex, ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (bitSets[bitSetIndex]) ))) ));
				}
				
			}
			
			return bitMatrix;
		}
		
		
		public static global::Array<object> fromBools(global::Array<object> input) {
			return global::thx._BitMatrix.BitMatrix_Impl_.fromBitSets(input.map<object>(((global::haxe.lang.Function) (( (( global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun.__hx_current != null )) ? (global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun.__hx_current) : (global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun.__hx_current = ((global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun) (new global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun()) )) )) )));
		}
		
		
		public static global::Array<object> fromString(string input, string delimiter) {
			if (string.Equals(delimiter, null)) {
				delimiter = ",";
			}
			
			return global::thx._BitMatrix.BitMatrix_Impl_.fromBitSets(global::haxe.lang.StringExt.split(input, delimiter).map<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx._BitSet.BitSet_Impl_), "fromString", 1416900059)) )));
		}
		
		
		public static global::Array<object> toBools(global::Array<object> this1) {
			return this1.map<object>(((global::haxe.lang.Function) (( (( global::thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun.__hx_current != null )) ? (global::thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun.__hx_current) : (global::thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun.__hx_current = ((global::thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun) (new global::thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun()) )) )) ));
		}
		
		
		public static bool bitAt(global::Array<object> this1, int bitSetIndex, int bitIndex) {
			return global::thx._BitSet.BitSet_Impl_.at(global::thx._BitMatrix.BitMatrix_Impl_.bitSetAt(this1, bitSetIndex), bitIndex);
		}
		
		
		public static bool setBitAt(global::Array<object> this1, int bitSetIndex, int bitIndex, bool @value) {
			if (( bitIndex >= global::thx._BitMatrix.BitMatrix_Impl_.get_length(this1) )) {
				int _g = 0;
				while (( _g < this1.length )) {
					global::Array<int> bitSet = ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (this1[_g]) ))) );
					 ++ _g;
					global::thx._BitSet.BitSet_Impl_.setAt(bitSet, bitIndex, false);
				}
				
			}
			
			return global::thx._BitSet.BitSet_Impl_.setAt(global::thx._BitMatrix.BitMatrix_Impl_.bitSetAt(this1, bitSetIndex), bitIndex, @value);
		}
		
		
		public static global::Array<object> clone(global::Array<object> this1) {
			global::Array<int> tmp = global::thx.Ints.range(global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
			global::Array<object> tmp1 = global::thx._BitMatrix.BitMatrix_Impl_._new(default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
			return ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.Arrays.reduce<int, object>(((global::Array<int>) (tmp) ), ((global::haxe.lang.Function) (new global::thx._BitMatrix.BitMatrix_Impl__clone_68__Fun(this1)) ), ((object) (tmp1) ))) ))) );
		}
		
		
		public static global::Array<object> concat(global::Array<object> this1, global::Array<object> right) {
			unchecked {
				global::Array<object> left = this1;
				if (( global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(left) != global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(right) )) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("cannot concat bit matrices with different bit set counts", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"concat", "thx._BitMatrix.BitMatrix_Impl_", "BitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (77) )})));
				}
				
				return global::thx._BitMatrix.BitMatrix_Impl_.fromBitSets(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.Arrays.reduce<int, object>(((global::Array<int>) (global::thx.Ints.range(global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(left), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))) ), ((global::haxe.lang.Function) (new global::thx._BitMatrix.BitMatrix_Impl__concat_79__Fun(right, left)) ), ((object) (new global::Array<object>(new object[]{})) ))) ))) ));
			}
		}
		
		
		public static global::Array<object> expand(global::Array<object> this1, int count) {
			return global::thx._BitMatrix.BitMatrix_Impl_.fromBitSets(this1.map<object>(((global::haxe.lang.Function) (new global::thx._BitMatrix.BitMatrix_Impl__expand_87__Fun(count)) )));
		}
		
		
		public static string toString(global::Array<object> this1, string delimiter) {
			if (string.Equals(delimiter, null)) {
				delimiter = ",";
			}
			
			return this1.map<object>(((global::haxe.lang.Function) (( (( global::thx._BitMatrix.BitMatrix_Impl__toString_93__Fun.__hx_current != null )) ? (global::thx._BitMatrix.BitMatrix_Impl__toString_93__Fun.__hx_current) : (global::thx._BitMatrix.BitMatrix_Impl__toString_93__Fun.__hx_current = ((global::thx._BitMatrix.BitMatrix_Impl__toString_93__Fun) (new global::thx._BitMatrix.BitMatrix_Impl__toString_93__Fun()) )) )) )).@join(delimiter);
		}
		
		
		public static global::Array<object> and(global::Array<object> this1, global::Array<object> right) {
			return global::thx._BitMatrix.BitMatrix_Impl_.combine(this1, right, ( (( global::thx._BitMatrix.BitMatrix_Impl__and_102__Fun.__hx_current != null )) ? (global::thx._BitMatrix.BitMatrix_Impl__and_102__Fun.__hx_current) : (global::thx._BitMatrix.BitMatrix_Impl__and_102__Fun.__hx_current = ((global::thx._BitMatrix.BitMatrix_Impl__and_102__Fun) (new global::thx._BitMatrix.BitMatrix_Impl__and_102__Fun()) )) ));
		}
		
		
		public static global::Array<object> or(global::Array<object> this1, global::Array<object> right) {
			return global::thx._BitMatrix.BitMatrix_Impl_.combine(this1, right, ( (( global::thx._BitMatrix.BitMatrix_Impl__or_111__Fun.__hx_current != null )) ? (global::thx._BitMatrix.BitMatrix_Impl__or_111__Fun.__hx_current) : (global::thx._BitMatrix.BitMatrix_Impl__or_111__Fun.__hx_current = ((global::thx._BitMatrix.BitMatrix_Impl__or_111__Fun) (new global::thx._BitMatrix.BitMatrix_Impl__or_111__Fun()) )) ));
		}
		
		
		public static global::Array<object> xor(global::Array<object> this1, global::Array<object> right) {
			return global::thx._BitMatrix.BitMatrix_Impl_.combine(this1, right, ( (( global::thx._BitMatrix.BitMatrix_Impl__xor_120__Fun.__hx_current != null )) ? (global::thx._BitMatrix.BitMatrix_Impl__xor_120__Fun.__hx_current) : (global::thx._BitMatrix.BitMatrix_Impl__xor_120__Fun.__hx_current = ((global::thx._BitMatrix.BitMatrix_Impl__xor_120__Fun) (new global::thx._BitMatrix.BitMatrix_Impl__xor_120__Fun()) )) ));
		}
		
		
		public static global::Array<object> negate(global::Array<object> this1) {
			global::Array<object> bits = this1;
			global::Array<int> tmp = global::thx.Ints.range(global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
			global::Array<object> tmp1 = global::thx._BitMatrix.BitMatrix_Impl_._new(new global::haxe.lang.Null<int>(global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1), true), new global::haxe.lang.Null<int>(global::thx._BitMatrix.BitMatrix_Impl_.get_length(this1), true));
			return ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.Arrays.reduce<int, object>(((global::Array<int>) (tmp) ), ((global::haxe.lang.Function) (new global::thx._BitMatrix.BitMatrix_Impl__negate_130__Fun(this1, bits)) ), ((object) (tmp1) ))) ))) );
		}
		
		
		public static bool @equals(global::Array<object> this1, global::Array<object> right) {
			global::Array<object> left = this1;
			if (( global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(left) != global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(right) )) {
				return false;
			}
			
			if (( global::thx._BitMatrix.BitMatrix_Impl_.get_length(left) != global::thx._BitMatrix.BitMatrix_Impl_.get_length(right) )) {
				return false;
			}
			
			{
				int _g1 = 0;
				int _g = global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1);
				while (( _g1 < _g )) {
					int i = _g1++;
					if ( ! (global::thx._BitSet.BitSet_Impl_.@equals(global::thx._BitMatrix.BitMatrix_Impl_.bitSetAt(left, i), global::thx._BitMatrix.BitMatrix_Impl_.bitSetAt(right, i))) ) {
						return false;
					}
					
				}
				
			}
			
			return true;
		}
		
		
		public static bool notEquals(global::Array<object> this1, global::Array<object> right) {
			global::Array<object> left = this1;
			return  ! (global::thx._BitMatrix.BitMatrix_Impl_.@equals(left, right)) ;
		}
		
		
		public static int get_bitSetCount(global::Array<object> this1) {
			return this1.length;
		}
		
		
		public static int get_length(global::Array<object> this1) {
			if (( global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1) == 0 )) {
				return 0;
			}
			
			return global::thx._BitSet.BitSet_Impl_.get_length(((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (this1[0]) ))) ));
		}
		
		
		public static global::Array<int> bitSetAt(global::Array<object> this1, int index) {
			unchecked {
				if (( ( index < 0 ) || ( index >= global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1) ) )) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("BitMatrix: index ", global::haxe.lang.Runtime.toString(index)), " is out of bounds"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"bitSetAt", "thx._BitMatrix.BitMatrix_Impl_", "BitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (166) )})));
				}
				
				return ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (this1[index]) ))) );
			}
		}
		
		
		public static global::Array<int> setBitSetAt(global::Array<object> this1, int index, global::Array<int> bitSet) {
			unchecked {
				if (( ( global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1) > 0 ) && ((bool) (( global::thx._BitMatrix.BitMatrix_Impl_.get_length(this1) != global::thx._BitSet.BitSet_Impl_.get_length(bitSet) )) ) )) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat("BitMatrix: added BitSet must have same length as BitMatrix length ", global::haxe.lang.Runtime.toString(global::thx._BitMatrix.BitMatrix_Impl_.get_length(this1))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"setBitSetAt", "thx._BitMatrix.BitMatrix_Impl_", "BitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (173) )})));
				}
				
				return ((global::Array<int>) (this1[index] = bitSet) );
			}
		}
		
		
		public static global::Array<object> combine(global::Array<object> this1, global::Array<object> right, global::haxe.lang.Function combiner) {
			unchecked {
				global::Array<object> left = this1;
				if (( global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(left) != global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(right) )) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("cannot \"and\" BitMatrices of different BitSet counts", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"combine", "thx._BitMatrix.BitMatrix_Impl_", "BitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (180) )})));
				}
				
				if (( global::thx._BitMatrix.BitMatrix_Impl_.get_length(left) != global::thx._BitMatrix.BitMatrix_Impl_.get_length(right) )) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("cannot \"and\" BitMatrices of different lengths", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"combine", "thx._BitMatrix.BitMatrix_Impl_", "BitMatrix.hx"}, new int[]{1981972957}, new double[]{((double) (181) )})));
				}
				
				global::Array<int> tmp = global::thx.Ints.range(global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(this1), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
				global::Array<object> tmp1 = global::thx._BitMatrix.BitMatrix_Impl_._new(new global::haxe.lang.Null<int>(global::thx._BitMatrix.BitMatrix_Impl_.get_bitSetCount(left), true), new global::haxe.lang.Null<int>(global::thx._BitMatrix.BitMatrix_Impl_.get_length(left), true));
				return ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.Arrays.reduce<int, object>(((global::Array<int>) (tmp) ), ((global::haxe.lang.Function) (new global::thx._BitMatrix.BitMatrix_Impl__combine_182__Fun(this1, right, left, combiner)) ), ((object) (tmp1) ))) ))) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__fromBools_35__Fun_0 : global::haxe.lang.Function {
		
		public BitMatrix_Impl__fromBools_35__Fun_0() : base(3, 0) {
		}
		
		
		public static global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun_0 __hx_current;
		
		public override object __hx_invoke3_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3) {
			int i = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float3) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn3)) )) );
			bool @value = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn2)) );
			global::Array<int> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
			global::thx._BitSet.BitSet_Impl_.setAt(acc, i, @value);
			return acc;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__fromBools_35__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__fromBools_35__Fun() : base(1, 0) {
		}
		
		
		public static global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::Array<bool> _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<bool>) (global::Array<object>.__hx_cast<bool>(((global::Array) (((object) (__fn_float1) )) ))) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::Array<bool>) (global::Array<object>.__hx_cast<bool>(((global::Array) (__fn_dyn1) ))) )) )) );
				global::Array<int> this1 = new global::Array<int>(new int[]{0});
				global::thx.Arrays.resize<int>(((global::Array<int>) (this1) ), ((int) (( ( ((int) (0.0) ) + 1 ) + 1 )) ), ((int) (0) ));
				return ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::thx.Arrays.reducei<bool, object>(((global::Array<bool>) (_) ), ((global::haxe.lang.Function) (( (( global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun_0.__hx_current != null )) ? (global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun_0.__hx_current) : (global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun_0.__hx_current = ((global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun_0) (new global::thx._BitMatrix.BitMatrix_Impl__fromBools_35__Fun_0()) )) )) ), ((global::Array<int>) (this1) ))) ))) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__toBools_48__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__toBools_48__Fun(global::Array<int> this2) : base(1, 0) {
			this.this2 = this2;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			int index = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			return global::thx._BitSet.BitSet_Impl_.at(((global::Array<int>) (this.this2) ), index);
		}
		
		
		public global::Array<int> this2;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__toBools_47__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__toBools_47__Fun() : base(1, 0) {
		}
		
		
		public static global::thx._BitMatrix.BitMatrix_Impl__toBools_47__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::Array<int> bitSet = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
			global::Array<int> this2 = bitSet;
			return global::thx.Ints.range(global::thx._BitSet.BitSet_Impl_.get_length(((global::Array<int>) (this2) )), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>)).map<bool>(((global::haxe.lang.Function) (new global::thx._BitMatrix.BitMatrix_Impl__toBools_48__Fun(this2)) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__clone_69__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__clone_69__Fun(global::Array<int> this2) : base(2, 0) {
			this.this2 = this2;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int i1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			global::Array<int> acc1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
			global::thx._BitSet.BitSet_Impl_.setAt(acc1, i1, global::thx._BitSet.BitSet_Impl_.at(((global::Array<int>) (this.this2) ), i1));
			return acc1;
		}
		
		
		public global::Array<int> this2;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__clone_68__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__clone_68__Fun(global::Array<object> this1) : base(2, 0) {
			this.this1 = this1;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				int i = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
				global::Array<object> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
				global::Array<int> this2 = global::thx._BitMatrix.BitMatrix_Impl_.bitSetAt(this.this1, i);
				global::Array<int> tmp2 = global::thx.Ints.range(global::thx._BitSet.BitSet_Impl_.get_length(((global::Array<int>) (this2) )), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>));
				global::Array<int> this3 = new global::Array<int>(new int[]{0});
				global::thx.Arrays.resize<int>(((global::Array<int>) (this3) ), ((int) (( ( ((int) (0.0) ) + 1 ) + 1 )) ), ((int) (0) ));
				global::thx._BitMatrix.BitMatrix_Impl_.setBitSetAt(acc, i, ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::thx.Arrays.reduce<int, object>(((global::Array<int>) (tmp2) ), ((global::haxe.lang.Function) (new global::thx._BitMatrix.BitMatrix_Impl__clone_69__Fun(this2)) ), ((global::Array<int>) (this3) ))) ))) ));
				return acc;
			}
		}
		
		
		public global::Array<object> this1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__concat_79__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__concat_79__Fun(global::Array<object> right, global::Array<object> left) : base(2, 0) {
			this.right = right;
			this.left = left;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				int bitSetIndex = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
				global::Array<object> bitSets = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
				global::Array<int> this2 = global::thx._BitMatrix.BitMatrix_Impl_.bitSetAt(this.left, bitSetIndex);
				global::Array<int> right1 = global::thx._BitMatrix.BitMatrix_Impl_.bitSetAt(this.right, bitSetIndex);
				global::Array<int> left1 = ((global::Array<int>) (this2) );
				int length = ( ((int) (global::thx._BitSet.BitSet_Impl_.get_length(left1)) ) + ((int) (global::thx._BitSet.BitSet_Impl_.get_length(right1)) ) );
				global::Array<int> this3 = new global::Array<int>(new int[]{length});
				global::thx.Arrays.resize<int>(((global::Array<int>) (this3) ), ((int) (( ( ((int) (( length / 32 )) ) + 1 ) + 1 )) ), ((int) (0) ));
				global::Array<int> result = ((global::Array<int>) (this3) );
				int index = 0;
				{
					int _g1 = 0;
					int _g = ((int) (global::thx._BitSet.BitSet_Impl_.get_length(left1)) );
					while (( _g1 < _g )) {
						global::thx._BitSet.BitSet_Impl_.setAt(result, index++, global::thx._BitSet.BitSet_Impl_.at(left1, _g1++));
					}
					
				}
				
				{
					int _g11 = 0;
					int _g2 = ((int) (global::thx._BitSet.BitSet_Impl_.get_length(right1)) );
					while (( _g11 < _g2 )) {
						global::thx._BitSet.BitSet_Impl_.setAt(result, index++, global::thx._BitSet.BitSet_Impl_.at(right1, _g11++));
					}
					
				}
				
				bitSets[bitSetIndex] = result;
				return bitSets;
			}
		}
		
		
		public global::Array<object> right;
		
		public global::Array<object> left;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__expand_87__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__expand_87__Fun(int count) : base(1, 0) {
			this.count = count;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::Array<int> bitSet = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) );
			return global::thx._BitSet.BitSet_Impl_.expand(bitSet, this.count);
		}
		
		
		public int count;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__toString_93__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__toString_93__Fun() : base(1, 0) {
		}
		
		
		public static global::thx._BitMatrix.BitMatrix_Impl__toString_93__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::Array<int> _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (((object) (__fn_float1) )) ))) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (__fn_dyn1) ))) )) )) );
			return global::thx._BitSet.BitSet_Impl_.toString(_);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__and_102__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__and_102__Fun() : base(2, 0) {
		}
		
		
		public static global::thx._BitMatrix.BitMatrix_Impl__and_102__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			bool r = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn2)) );
			bool l = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn1)) );
			if (l) {
				return r;
			}
			else {
				return false;
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__or_111__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__or_111__Fun() : base(2, 0) {
		}
		
		
		public static global::thx._BitMatrix.BitMatrix_Impl__or_111__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			bool r = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn2)) );
			bool l = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn1)) );
			if ( ! (l) ) {
				return r;
			}
			else {
				return true;
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__xor_120__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__xor_120__Fun() : base(2, 0) {
		}
		
		
		public static global::thx._BitMatrix.BitMatrix_Impl__xor_120__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			bool r = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn2)) );
			bool l = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toBool(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.toBool(__fn_dyn1)) );
			if ( ! ((( l &&  ! (r)  ))) ) {
				if ( ! (l) ) {
					return r;
				}
				else {
					return false;
				}
				
			}
			else {
				return true;
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__negate_131__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__negate_131__Fun(global::Array<object> bits, int bitSetIndex) : base(2, 0) {
			this.bits = bits;
			this.bitSetIndex = bitSetIndex;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int bitIndex = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			global::Array<object> acc1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
			global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(acc1, this.bitSetIndex, bitIndex,  ! (global::thx._BitMatrix.BitMatrix_Impl_.bitAt(this.bits, this.bitSetIndex, bitIndex)) );
			return acc1;
		}
		
		
		public global::Array<object> bits;
		
		public int bitSetIndex;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__negate_130__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__negate_130__Fun(global::Array<object> this1, global::Array<object> bits) : base(2, 0) {
			this.this1 = this1;
			this.bits = bits;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int bitSetIndex = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			global::Array<object> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
			return ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.Arrays.reduce<int, object>(((global::Array<int>) (global::thx.Ints.range(global::thx._BitMatrix.BitMatrix_Impl_.get_length(this.this1), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))) ), ((global::haxe.lang.Function) (new global::thx._BitMatrix.BitMatrix_Impl__negate_131__Fun(this.bits, bitSetIndex)) ), ((object) (acc) ))) ))) );
		}
		
		
		public global::Array<object> this1;
		
		public global::Array<object> bits;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__combine_183__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__combine_183__Fun(global::Array<object> right, global::Array<object> left, global::haxe.lang.Function combiner, int bitSetIndex) : base(2, 0) {
			this.right = right;
			this.left = left;
			this.combiner = combiner;
			this.bitSetIndex = bitSetIndex;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int bitIndex = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			global::Array<object> acc1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
			global::thx._BitMatrix.BitMatrix_Impl_.setBitAt(acc1, this.bitSetIndex, bitIndex, global::haxe.lang.Runtime.toBool(this.combiner.__hx_invoke2_o(default(double), global::thx._BitMatrix.BitMatrix_Impl_.bitAt(this.left, this.bitSetIndex, bitIndex), default(double), global::thx._BitMatrix.BitMatrix_Impl_.bitAt(this.right, this.bitSetIndex, bitIndex))));
			return acc1;
		}
		
		
		public global::Array<object> right;
		
		public global::Array<object> left;
		
		public global::haxe.lang.Function combiner;
		
		public int bitSetIndex;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._BitMatrix {
	public class BitMatrix_Impl__combine_182__Fun : global::haxe.lang.Function {
		
		public BitMatrix_Impl__combine_182__Fun(global::Array<object> this1, global::Array<object> right, global::Array<object> left, global::haxe.lang.Function combiner) : base(2, 0) {
			this.this1 = this1;
			this.right = right;
			this.left = left;
			this.combiner = combiner;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int bitSetIndex = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			global::Array<object> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
			return ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::thx.Arrays.reduce<int, object>(((global::Array<int>) (global::thx.Ints.range(global::thx._BitMatrix.BitMatrix_Impl_.get_length(this.this1), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>))) ), ((global::haxe.lang.Function) (new global::thx._BitMatrix.BitMatrix_Impl__combine_183__Fun(this.right, this.left, this.combiner, bitSetIndex)) ), ((object) (acc) ))) ))) );
		}
		
		
		public global::Array<object> this1;
		
		public global::Array<object> right;
		
		public global::Array<object> left;
		
		public global::haxe.lang.Function combiner;
		
	}
}


