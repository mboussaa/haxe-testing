// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestLambda : global::haxe.lang.HxObject {
		
		public TestLambda(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestLambda(int i) {
			global::thx.TestLambda.__hx_ctor_thx_TestLambda(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestLambda(global::thx.TestLambda __temp_me132, int i) {
			__temp_me132.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestLambda(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestLambda(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testFunctions() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(new global::Array<object>(new object[]{2, 3}), new global::Array<int>(new int[]{1, 2}).map<int>(((global::haxe.lang.Function) (( (( global::thx.TestLambda_testFunctions_14__Fun.__hx_current != null )) ? (global::thx.TestLambda_testFunctions_14__Fun.__hx_current) : (global::thx.TestLambda_testFunctions_14__Fun.__hx_current = ((global::thx.TestLambda_testFunctions_14__Fun) (new global::thx.TestLambda_testFunctions_14__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (14) )}));
					global::utest.Assert.@equals(0, 0, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
					global::utest.Assert.@equals(2, ((object) (2) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
					global::utest.Assert.@equals(3, 3, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
					global::utest.Assert.@equals(6, 6, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					global::utest.Assert.@equals(10, 10, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
					global::utest.Assert.@equals(15, 15, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
					global::utest.Assert.@equals(1, (global::Std.parseInt("1")).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
					global::utest.Assert.@equals(1, (global::Std.parseInt("1")).toDynamic(), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
					global::utest.Assert.@equals(1, ((object) (1) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
					global::utest.Assert.@equals(3, 3, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
					global::utest.Assert.@equals(6, 6, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
					global::utest.Assert.@equals(10, 10, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
					global::utest.Assert.@equals(15, 15, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
					global::utest.Assert.@equals(1, ((object) (1) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
					global::utest.Assert.@equals(3, 3, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
					global::utest.Assert.@equals(6, 6, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
					global::utest.Assert.@equals(10, 10, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (34) )}));
					global::utest.Assert.@equals(15, 15, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
					global::utest.Assert.@equals("Test 1", global::haxe.lang.Runtime.concat("Test ", "1"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
					global::utest.Assert.@equals("Test 1+2", global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Test ", "1"), "+"), "2"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					global::utest.Assert.@equals("BA", global::haxe.lang.Runtime.concat("B", "A"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
					global::utest.Assert.@equals("21", global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(2)), "1"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					global::utest.Assert.@equals("$_1$_0", "$_1$_0", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
					global::utest.Assert.@equals("$_0", global::haxe.lang.Runtime.concat("$", "_0"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFunctions", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
				}
				
			}
		}
		
		
		public virtual void testForms() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					{
						global::utest.Assert.@equals(1, 1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
						global::utest.Assert.@equals(1, 1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
						global::utest.Assert.@equals(1, 1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (56) )}));
						global::utest.Assert.@equals(0, 0, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (63) )}));
						global::utest.Assert.@equals(1, 1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
						global::utest.Assert.@equals(1, 1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
						global::utest.Assert.@equals(1, 1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (74) )}));
						global::utest.Assert.@equals(1, 1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
						global::utest.Assert.@equals(1, 1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
						global::utest.Assert.@equals(1, 1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (84) )}));
						global::utest.Assert.@equals(false, false, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (86) )}));
						global::utest.Assert.@equals(true, true, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testForms", "thx.TestLambda", "TestLambda.hx"}, new int[]{1981972957}, new double[]{((double) (87) )}));
					}
					
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1301739773:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testForms", 1301739773)) );
					}
					
					
					case 1732085673:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFunctions", 1732085673)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1301739773:
					{
						this.testForms();
						break;
					}
					
					
					case 1732085673:
					{
						this.testFunctions();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestLambda_testFunctions_14__Fun : global::haxe.lang.Function {
		
		public TestLambda_testFunctions_14__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestLambda_testFunctions_14__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::haxe.lang.Null<int> _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float1) ), true)) : (( (( __fn_dyn1 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn1)) )) );
				return ((double) (( (_).@value + 1 )) );
			}
		}
		
		
	}
}


