// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers : global::haxe.lang.HxObject {
		
		public TestEithers(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestEithers(int i) {
			global::thx.TestEithers.__hx_ctor_thx_TestEithers(this, i);
		}
		
		
		public static void __hx_ctor_thx_TestEithers(global::thx.TestEithers __temp_me131, int i) {
			__temp_me131.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.TestEithers(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.TestEithers(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testIsLeft() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx.Eithers.isLeft<int, object>(((global::thx.Either) (global::thx.Either.Left(123)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsLeft", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (15) )}));
					global::utest.Assert.isFalse(global::thx.Eithers.isLeft<object, int>(((global::thx.Either) (global::thx.Either.Right(123)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsLeft", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
				}
				
			}
		}
		
		
		public virtual void testIsRight() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isFalse(global::thx.Eithers.isRight<int, object>(((global::thx.Either) (global::thx.Either.Left(123)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsRight", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
					global::utest.Assert.isTrue(global::thx.Eithers.isRight<object, int>(((global::thx.Either) (global::thx.Either.Right(123)) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testIsRight", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
				}
				
			}
		}
		
		
		public virtual void testToLeft() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.Option _g2 = global::thx.Eithers.toLeft<int, object>(((global::thx.Either) (global::thx.Either.Left(123)) ));
					object tmp = null;
					switch (_g2.index) {
						case 0:
						{
							tmp = ((int) (global::haxe.lang.Runtime.toInt(_g2.@params[0])) );
							break;
						}
						
						
						case 1:
						{
							tmp = null;
							break;
						}
						
						
					}
					
					global::utest.Assert.same(123, tmp, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToLeft", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
					global::haxe.ds.Option _g3 = global::thx.Eithers.toLeft<object, int>(((global::thx.Either) (global::thx.Either.Right(123)) ));
					object tmp1 = null;
					switch (_g3.index) {
						case 0:
						{
							tmp1 = _g3.@params[0];
							break;
						}
						
						
						case 1:
						{
							tmp1 = null;
							break;
						}
						
						
					}
					
					global::utest.Assert.isNull(tmp1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToLeft", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
				}
				
			}
		}
		
		
		public virtual void testToRight() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.ds.Option _g2 = global::thx.Eithers.toRight<object, int>(((global::thx.Either) (global::thx.Either.Right(123)) ));
					object tmp = null;
					switch (_g2.index) {
						case 0:
						{
							tmp = ((int) (global::haxe.lang.Runtime.toInt(_g2.@params[0])) );
							break;
						}
						
						
						case 1:
						{
							tmp = null;
							break;
						}
						
						
					}
					
					global::utest.Assert.same(123, tmp, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToRight", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					global::haxe.ds.Option _g3 = global::thx.Eithers.toRight<int, object>(((global::thx.Either) (global::thx.Either.Left(123)) ));
					object tmp1 = null;
					switch (_g3.index) {
						case 0:
						{
							tmp1 = _g3.@params[0];
							break;
						}
						
						
						case 1:
						{
							tmp1 = null;
							break;
						}
						
						
					}
					
					global::utest.Assert.isNull(tmp1, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToRight", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
				}
				
			}
		}
		
		
		public virtual void testToLeftUnsafe() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(123, (global::thx.Eithers.toLeftUnsafe<int, object>(((global::thx.Either) (global::thx.Either.Left(123)) ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToLeftUnsafe", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
					global::utest.Assert.same(null, (global::thx.Eithers.toLeftUnsafe<object, int>(((global::thx.Either) (global::thx.Either.Right(123)) ))).@value, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToLeftUnsafe", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (54) )}));
				}
				
			}
		}
		
		
		public virtual void testToRightUnsafe() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(123, (global::thx.Eithers.toRightUnsafe<object, int>(((global::thx.Either) (global::thx.Either.Right(123)) ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToRightUnsafe", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
					global::utest.Assert.same(null, (global::thx.Eithers.toRightUnsafe<int, object>(((global::thx.Either) (global::thx.Either.Left(123)) ))).@value, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testToRightUnsafe", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
				}
				
			}
		}
		
		
		public virtual void testFlatMap() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.same(5, (global::thx.Eithers.toLeftUnsafe<int, object>(((global::thx.Either) (global::thx.Eithers.flatMap<int, object, object>(((global::thx.Either) (global::thx.Either.Left(5)) ), ((global::haxe.lang.Function) (( (( global::thx.TestEithers_testFlatMap_65__Fun.__hx_current != null )) ? (global::thx.TestEithers_testFlatMap_65__Fun.__hx_current) : (global::thx.TestEithers_testFlatMap_65__Fun.__hx_current = ((global::thx.TestEithers_testFlatMap_65__Fun) (new global::thx.TestEithers_testFlatMap_65__Fun()) )) )) ))) ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlatMap", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (65) )}));
					global::utest.Assert.same(5, (global::thx.Eithers.toLeftUnsafe<int, int>(((global::thx.Either) (global::thx.Eithers.flatMap<int, object, object>(((global::thx.Either) (global::thx.Either.Left(5)) ), ((global::haxe.lang.Function) (( (( global::thx.TestEithers_testFlatMap_69__Fun.__hx_current != null )) ? (global::thx.TestEithers_testFlatMap_69__Fun.__hx_current) : (global::thx.TestEithers_testFlatMap_69__Fun.__hx_current = ((global::thx.TestEithers_testFlatMap_69__Fun) (new global::thx.TestEithers_testFlatMap_69__Fun()) )) )) ))) ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlatMap", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
					global::utest.Assert.same(10, (global::thx.Eithers.toLeftUnsafe<int, object>(((global::thx.Either) (global::thx.Eithers.flatMap<int, int, object>(((global::thx.Either) (global::thx.Either.Right(5)) ), ((global::haxe.lang.Function) (( (( global::thx.TestEithers_testFlatMap_73__Fun.__hx_current != null )) ? (global::thx.TestEithers_testFlatMap_73__Fun.__hx_current) : (global::thx.TestEithers_testFlatMap_73__Fun.__hx_current = ((global::thx.TestEithers_testFlatMap_73__Fun) (new global::thx.TestEithers_testFlatMap_73__Fun()) )) )) ))) ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlatMap", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (73) )}));
					global::utest.Assert.same(null, (global::thx.Eithers.toLeftUnsafe<object, int>(((global::thx.Either) (global::thx.Eithers.flatMap<object, int, object>(((global::thx.Either) (global::thx.Either.Right(5)) ), ((global::haxe.lang.Function) (( (( global::thx.TestEithers_testFlatMap_77__Fun.__hx_current != null )) ? (global::thx.TestEithers_testFlatMap_77__Fun.__hx_current) : (global::thx.TestEithers_testFlatMap_77__Fun.__hx_current = ((global::thx.TestEithers_testFlatMap_77__Fun) (new global::thx.TestEithers_testFlatMap_77__Fun()) )) )) ))) ))).@value, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlatMap", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
					global::utest.Assert.same(null, (global::thx.Eithers.toRightUnsafe<int, object>(((global::thx.Either) (global::thx.Eithers.flatMap<int, object, object>(((global::thx.Either) (global::thx.Either.Left(5)) ), ((global::haxe.lang.Function) (( (( global::thx.TestEithers_testFlatMap_81__Fun.__hx_current != null )) ? (global::thx.TestEithers_testFlatMap_81__Fun.__hx_current) : (global::thx.TestEithers_testFlatMap_81__Fun.__hx_current = ((global::thx.TestEithers_testFlatMap_81__Fun) (new global::thx.TestEithers_testFlatMap_81__Fun()) )) )) ))) ))).@value, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlatMap", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
					global::utest.Assert.same(null, (global::thx.Eithers.toRightUnsafe<int, int>(((global::thx.Either) (global::thx.Eithers.flatMap<int, object, object>(((global::thx.Either) (global::thx.Either.Left(5)) ), ((global::haxe.lang.Function) (( (( global::thx.TestEithers_testFlatMap_85__Fun.__hx_current != null )) ? (global::thx.TestEithers_testFlatMap_85__Fun.__hx_current) : (global::thx.TestEithers_testFlatMap_85__Fun.__hx_current = ((global::thx.TestEithers_testFlatMap_85__Fun) (new global::thx.TestEithers_testFlatMap_85__Fun()) )) )) ))) ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlatMap", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
					global::utest.Assert.same(null, (global::thx.Eithers.toRightUnsafe<int, object>(((global::thx.Either) (global::thx.Eithers.flatMap<int, int, object>(((global::thx.Either) (global::thx.Either.Right(5)) ), ((global::haxe.lang.Function) (( (( global::thx.TestEithers_testFlatMap_89__Fun.__hx_current != null )) ? (global::thx.TestEithers_testFlatMap_89__Fun.__hx_current) : (global::thx.TestEithers_testFlatMap_89__Fun.__hx_current = ((global::thx.TestEithers_testFlatMap_89__Fun) (new global::thx.TestEithers_testFlatMap_89__Fun()) )) )) ))) ))).@value, default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlatMap", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
					global::utest.Assert.same(10, (global::thx.Eithers.toRightUnsafe<object, int>(((global::thx.Either) (global::thx.Eithers.flatMap<object, int, object>(((global::thx.Either) (global::thx.Either.Right(5)) ), ((global::haxe.lang.Function) (( (( global::thx.TestEithers_testFlatMap_93__Fun.__hx_current != null )) ? (global::thx.TestEithers_testFlatMap_93__Fun.__hx_current) : (global::thx.TestEithers_testFlatMap_93__Fun.__hx_current = ((global::thx.TestEithers_testFlatMap_93__Fun) (new global::thx.TestEithers_testFlatMap_93__Fun()) )) )) ))) ))).toDynamic(), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFlatMap", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (93) )}));
				}
				
			}
		}
		
		
		public virtual void testLeftMap() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.Either l = global::thx.Either.Left(1);
					global::thx.Either rt = global::thx.Either.Right(true);
					global::utest.Assert.same(global::thx.Either.Left(2), global::thx.Eithers.leftMap<int, object, bool>(((global::thx.Either) (l) ), ((global::haxe.lang.Function) (( (( global::thx.TestEithers_testLeftMap_103__Fun.__hx_current != null )) ? (global::thx.TestEithers_testLeftMap_103__Fun.__hx_current) : (global::thx.TestEithers_testLeftMap_103__Fun.__hx_current = ((global::thx.TestEithers_testLeftMap_103__Fun) (new global::thx.TestEithers_testLeftMap_103__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLeftMap", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (103) )}));
					global::utest.Assert.same(rt, global::thx.Eithers.leftMap<int, object, bool>(((global::thx.Either) (rt) ), ((global::haxe.lang.Function) (( (( global::thx.TestEithers_testLeftMap_104__Fun.__hx_current != null )) ? (global::thx.TestEithers_testLeftMap_104__Fun.__hx_current) : (global::thx.TestEithers_testLeftMap_104__Fun.__hx_current = ((global::thx.TestEithers_testLeftMap_104__Fun) (new global::thx.TestEithers_testLeftMap_104__Fun()) )) )) )), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLeftMap", "thx.TestEithers", "TestEithers.hx"}, new int[]{1981972957}, new double[]{((double) (104) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 833169059:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLeftMap", 833169059)) );
					}
					
					
					case 598146609:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFlatMap", 598146609)) );
					}
					
					
					case 756124597:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToRightUnsafe", 756124597)) );
					}
					
					
					case 458405978:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToLeftUnsafe", 458405978)) );
					}
					
					
					case 1924220463:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToRight", 1924220463)) );
					}
					
					
					case 375240980:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testToLeft", 375240980)) );
					}
					
					
					case 1119001952:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsRight", 1119001952)) );
					}
					
					
					case 2114654979:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testIsLeft", 2114654979)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 833169059:
					{
						this.testLeftMap();
						break;
					}
					
					
					case 598146609:
					{
						this.testFlatMap();
						break;
					}
					
					
					case 756124597:
					{
						this.testToRightUnsafe();
						break;
					}
					
					
					case 458405978:
					{
						this.testToLeftUnsafe();
						break;
					}
					
					
					case 1924220463:
					{
						this.testToRight();
						break;
					}
					
					
					case 375240980:
					{
						this.testToLeft();
						break;
					}
					
					
					case 1119001952:
					{
						this.testIsRight();
						break;
					}
					
					
					case 2114654979:
					{
						this.testIsLeft();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers_testFlatMap_65__Fun : global::haxe.lang.Function {
		
		public TestEithers_testFlatMap_65__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestEithers_testFlatMap_65__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object r = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				return global::thx.Either.Left(10);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers_testFlatMap_69__Fun : global::haxe.lang.Function {
		
		public TestEithers_testFlatMap_69__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestEithers_testFlatMap_69__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object r1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				return global::thx.Either.Right(10);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers_testFlatMap_73__Fun : global::haxe.lang.Function {
		
		public TestEithers_testFlatMap_73__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestEithers_testFlatMap_73__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int r2 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return global::thx.Either.Left(10);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers_testFlatMap_77__Fun : global::haxe.lang.Function {
		
		public TestEithers_testFlatMap_77__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestEithers_testFlatMap_77__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int r3 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return global::thx.Either.Right(10);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers_testFlatMap_81__Fun : global::haxe.lang.Function {
		
		public TestEithers_testFlatMap_81__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestEithers_testFlatMap_81__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object r4 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				return global::thx.Either.Left(10);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers_testFlatMap_85__Fun : global::haxe.lang.Function {
		
		public TestEithers_testFlatMap_85__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestEithers_testFlatMap_85__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object r5 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				return global::thx.Either.Right(10);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers_testFlatMap_89__Fun : global::haxe.lang.Function {
		
		public TestEithers_testFlatMap_89__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestEithers_testFlatMap_89__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int r6 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return global::thx.Either.Left(10);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers_testFlatMap_93__Fun : global::haxe.lang.Function {
		
		public TestEithers_testFlatMap_93__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.TestEithers_testFlatMap_93__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int r7 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return global::thx.Either.Right(10);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers_testLeftMap_103__Fun : global::haxe.lang.Function {
		
		public TestEithers_testLeftMap_103__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestEithers_testLeftMap_103__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return ((double) (( i + 1 )) );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class TestEithers_testLeftMap_104__Fun : global::haxe.lang.Function {
		
		public TestEithers_testLeftMap_104__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.TestEithers_testLeftMap_104__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int i1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return ((double) (( i1 + 1 )) );
			}
		}
		
		
	}
}


