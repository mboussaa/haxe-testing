// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Nel {
	public sealed class Nel_Impl_ {
		
		public static global::thx.NonEmptyList nel<A>(A hd, global::Array<A> tl) {
			unchecked {
				global::haxe.ds.Option _g = global::thx._Nel.Nel_Impl_.fromArray<A>(((global::Array<A>) (tl) ));
				switch (_g.index) {
					case 0:
					{
						return global::thx._Nel.Nel_Impl_.cons<A>(global::haxe.lang.Runtime.genericCast<A>(hd), ((global::thx.NonEmptyList) (_g.@params[0]) ));
					}
					
					
					case 1:
					{
						return global::thx._Nel.Nel_Impl_.pure<A>(global::haxe.lang.Runtime.genericCast<A>(hd));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::thx.NonEmptyList pure<A>(A a) {
			return global::thx.NonEmptyList.Single(a);
		}
		
		
		public static global::thx.NonEmptyList cons<A>(A a, global::thx.NonEmptyList nl) {
			return global::thx.NonEmptyList.ConsNel(a, nl);
		}
		
		
		public static global::haxe.ds.Option fromArray<A>(global::Array<A> arr) {
			unchecked {
				if (( arr.length == 0 )) {
					return global::haxe.ds.Option.None;
				}
				else {
					global::thx.NonEmptyList res = global::thx.NonEmptyList.Single(((global::Array<A>) (arr) )[( arr.length - 1 )]);
					{
						object tmp = global::thx.Ints.rangeIter(( arr.length - 2 ), new global::haxe.lang.Null<int>(-1, true), new global::haxe.lang.Null<int>(-1, true));
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
							res = global::thx.NonEmptyList.ConsNel(global::haxe.lang.Runtime.genericCast<A>(((global::Array<A>) (arr) )[((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null))) )]), res);
						}
						
					}
					
					return global::haxe.ds.Option.Some(res);
				}
				
			}
		}
		
		
		public static global::thx.NonEmptyList map<B, A>(global::thx.NonEmptyList this1, global::haxe.lang.Function f) {
			global::haxe.lang.Function fb = f;
			return global::thx._Nel.Nel_Impl_.flatMap<object, A>(((global::thx.NonEmptyList) (this1) ), ((global::haxe.lang.Function) (new global::thx._Nel.Nel_Impl__map_33__Fun<B, A>(fb)) ));
		}
		
		
		public static global::thx.NonEmptyList flatMap<B, A>(global::thx.NonEmptyList this1, global::haxe.lang.Function f) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return ((global::thx.NonEmptyList) (f.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<A>(this1.@params[0]))) );
					}
					
					
					case 1:
					{
						return global::thx._Nel.Nel_Impl_.append<B>(((global::thx.NonEmptyList) (f.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<A>(this1.@params[0]))) ), ((global::thx.NonEmptyList) (global::thx._Nel.Nel_Impl_.flatMap<object, A>(((global::thx.NonEmptyList) (this1.@params[1]) ), ((global::haxe.lang.Function) (f) ))) ));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static A fold<A>(global::thx.NonEmptyList this1, global::haxe.lang.Function s) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return global::haxe.lang.Runtime.genericCast<A>(this1.@params[0]);
					}
					
					
					case 1:
					{
						return global::haxe.lang.Runtime.genericCast<A>(global::thx._Semigroup.Semigroup_Impl_.get_append<A>(((global::haxe.lang.Function) (s) )).__hx_invoke2_o(default(double), global::haxe.lang.Runtime.genericCast<A>(this1.@params[0]), default(double), global::thx._Nel.Nel_Impl_.fold<A>(((global::thx.NonEmptyList) (this1.@params[1]) ), ((global::haxe.lang.Function) (s) ))));
					}
					
					
				}
				
				return default(A);
			}
		}
		
		
		public static global::thx.NonEmptyList append<A>(global::thx.NonEmptyList this1, global::thx.NonEmptyList nel) {
			unchecked {
				switch (this1.index) {
					case 0:
					{
						return global::thx.NonEmptyList.ConsNel(global::haxe.lang.Runtime.genericCast<A>(this1.@params[0]), nel);
					}
					
					
					case 1:
					{
						return global::thx.NonEmptyList.ConsNel(global::haxe.lang.Runtime.genericCast<A>(this1.@params[0]), global::thx._Nel.Nel_Impl_.append<A>(((global::thx.NonEmptyList) (this1.@params[1]) ), ((global::thx.NonEmptyList) (nel) )));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::Array<A> toArray<A>(global::thx.NonEmptyList this1) {
			global::haxe.lang.Function[] go = new global::haxe.lang.Function[]{null};
			go[0] = new global::thx._Nel.Nel_Impl__toArray_56__Fun<A>(go);
			global::Array<A> result = ((global::Array<A>) (global::Array<object>.__hx_cast<A>(((global::Array) (go[0].__hx_invoke2_o(default(double), new global::Array<A>(new A[]{}), default(double), this1)) ))) ).copy();
			result.reverse();
			return result;
		}
		
		
		public static global::haxe.lang.Function semigroup<A>() {
			return new global::thx._Nel.Nel_Impl__semigroup_67__Fun<A>();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Nel {
	public class Nel_Impl__map_33__Fun<B, A> : global::haxe.lang.Function {
		
		public Nel_Impl__map_33__Fun(global::haxe.lang.Function fb) : base(1, 0) {
			this.fb = fb;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			A v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<A>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<A>(__fn_dyn1)) );
			return global::thx._Nel.Nel_Impl_.pure<B>(global::haxe.lang.Runtime.genericCast<B>(this.fb.__hx_invoke1_o(default(double), v)));
		}
		
		
		public global::haxe.lang.Function fb;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Nel {
	public class Nel_Impl__toArray_56__Fun<A> : global::haxe.lang.Function {
		
		public Nel_Impl__toArray_56__Fun(global::haxe.lang.Function[] go) : base(2, 0) {
			this.go = go;
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			unchecked {
				global::thx.NonEmptyList xs = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.NonEmptyList) (((object) (__fn_float2) )) )) : (((global::thx.NonEmptyList) (__fn_dyn2) )) );
				global::Array<A> acc = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<A>) (global::Array<object>.__hx_cast<A>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<A>) (global::Array<object>.__hx_cast<A>(((global::Array) (__fn_dyn1) ))) )) );
				switch (xs.index) {
					case 0:
					{
						return global::thx.Arrays.append<A>(((global::Array<A>) (acc) ), global::haxe.lang.Runtime.genericCast<A>(xs.@params[0]));
					}
					
					
					case 1:
					{
						return ((global::Array<A>) (global::Array<object>.__hx_cast<A>(((global::Array) (this.go[0].__hx_invoke2_o(default(double), global::thx.Arrays.append<A>(((global::Array<A>) (acc) ), global::haxe.lang.Runtime.genericCast<A>(xs.@params[0])), default(double), ((global::thx.NonEmptyList) (xs.@params[1]) ))) ))) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::haxe.lang.Function[] go;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Nel {
	public class Nel_Impl__semigroup_67__Fun<A> : global::haxe.lang.Function {
		
		public Nel_Impl__semigroup_67__Fun() : base(2, 0) {
		}
		
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::thx.NonEmptyList nr = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.NonEmptyList) (((object) (__fn_float2) )) )) : (((global::thx.NonEmptyList) (__fn_dyn2) )) );
			global::thx.NonEmptyList nl = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.NonEmptyList) (((object) (__fn_float1) )) )) : (((global::thx.NonEmptyList) (__fn_dyn1) )) );
			return global::thx._Nel.Nel_Impl_.append<A>(((global::thx.NonEmptyList) (nl) ), ((global::thx.NonEmptyList) (nr) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class NonEmptyList : global::haxe.lang.ParamEnum {
		
		public NonEmptyList(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"Single", "ConsNel"};
		
		public static global::thx.NonEmptyList Single(object x) {
			return new global::thx.NonEmptyList(0, new object[]{x});
		}
		
		
		public static global::thx.NonEmptyList ConsNel(object x, global::thx.NonEmptyList xs) {
			unchecked {
				return new global::thx.NonEmptyList(1, new object[]{x, xs});
			}
		}
		
		
		public override string getTag() {
			return global::thx.NonEmptyList.__hx_constructs[this.index];
		}
		
		
	}
}


