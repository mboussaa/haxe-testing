// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Rational {
	public sealed class Rational_Impl_ {
		
		static Rational_Impl_() {
			global::thx._Rational.Rational_Impl_.zero = ((object) (new global::haxe.lang.DynamicObject(new int[]{4995533, 5496390}, new object[]{global::thx._BigInt.BigInt_Impl_.zero, global::thx._BigInt.BigInt_Impl_.one}, new int[]{}, new double[]{})) );
		}
		
		
		public static object zero;
		
		
		
		
		
		public static object fromString(string s) {
			unchecked {
				global::Array<object> parts = global::haxe.lang.StringExt.split(s, "/").map<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::StringTools), "trim", 1292082402)) ));
				if (( parts.length > 2 )) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("string \"", s), "\" cannot be parsed to a Rational"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"fromString", "thx._Rational.Rational_Impl_", "Rational.hx"}, new int[]{1981972957}, new double[]{((double) (12) )})));
				}
				
				if (( parts.length == 1 )) {
					return global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase(global::haxe.lang.Runtime.toString(parts[0]), 10)) ), global::thx._BigInt.BigInt_Impl_.one);
				}
				
				return global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase(global::haxe.lang.Runtime.toString(parts[0]), 10)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.parseBase(global::haxe.lang.Runtime.toString(parts[1]), 10)) ));
			}
		}
		
		
		public static object fromBigInt(global::thx.bigint.BigIntImpl i) {
			return global::thx._Rational.Rational_Impl_.create(i, global::thx._BigInt.BigInt_Impl_.one);
		}
		
		
		public static object fromInt(int i) {
			return global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(i)) ), global::thx._BigInt.BigInt_Impl_.one);
		}
		
		
		public static object create(global::thx.bigint.BigIntImpl num, global::thx.bigint.BigIntImpl den) {
			unchecked {
				if (global::thx._BigInt.BigInt_Impl_.@equals(den, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ))) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("division by zero", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"create", "thx._Rational.Rational_Impl_", "Rational.hx"}, new int[]{1981972957}, new double[]{((double) (26) )})));
				}
				
				int g = global::thx.Ints.gcd(((global::thx.bigint.BigIntImpl) (num) ).toInt(), ((global::thx.bigint.BigIntImpl) (den) ).toInt());
				num = global::thx.bigint.Bigs.fromInt(((int) (((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (num) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(g)) ))) ).toInt()) ));
				den = global::thx.bigint.Bigs.fromInt(((int) (((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (den) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(g)) ))) ).toInt()) ));
				if (global::thx._BigInt.BigInt_Impl_.less(den, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ))) {
					num = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (num) ).negate()) );
					den = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (den) ).negate()) );
				}
				
				if (global::thx._BigInt.BigInt_Impl_.@equals(num, ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(0)) ))) {
					den = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) );
				}
				
				int num1 = ((global::thx.bigint.BigIntImpl) (num) ).toInt();
				int den1 = ((global::thx.bigint.BigIntImpl) (den) ).toInt();
				object __temp_stmt3 = null;
				{
					global::thx.bigint.BigIntImpl __temp_odecl1 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(num1)) );
					global::thx.bigint.BigIntImpl __temp_odecl2 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(den1)) );
					__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{4995533, 5496390}, new object[]{__temp_odecl2, __temp_odecl1}, new int[]{}, new double[]{});
				}
				
				return ((object) (__temp_stmt3) );
			}
		}
		
		
		public static object _new(int num, int den) {
			object __temp_stmt3 = null;
			{
				global::thx.bigint.BigIntImpl __temp_odecl1 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(num)) );
				global::thx.bigint.BigIntImpl __temp_odecl2 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(den)) );
				__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{4995533, 5496390}, new object[]{__temp_odecl2, __temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (__temp_stmt3) );
		}
		
		
		public static object abs(object this1) {
			int num = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ).abs()) ).toInt();
			int den = ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ).toInt();
			object __temp_stmt3 = null;
			{
				global::thx.bigint.BigIntImpl __temp_odecl1 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(num)) );
				global::thx.bigint.BigIntImpl __temp_odecl2 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(den)) );
				__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{4995533, 5496390}, new object[]{__temp_odecl2, __temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (__temp_stmt3) );
		}
		
		
		public static object negate(object this1) {
			int num = ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ).negate()) ).toInt();
			int den = ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ).toInt();
			object __temp_stmt3 = null;
			{
				global::thx.bigint.BigIntImpl __temp_odecl1 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(num)) );
				global::thx.bigint.BigIntImpl __temp_odecl2 = ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(den)) );
				__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{4995533, 5496390}, new object[]{__temp_odecl2, __temp_odecl1}, new int[]{}, new double[]{});
			}
			
			return ((object) (__temp_stmt3) );
		}
		
		
		public static object @add(object this1, object that) {
			if (( global::thx._Rational.Rational_Impl_.compareTo(this1, global::thx._Rational.Rational_Impl_.zero) == 0 )) {
				return that;
			}
			
			if (( global::thx._Rational.Rational_Impl_.compareTo(that, global::thx._Rational.Rational_Impl_.zero) == 0 )) {
				return this1;
			}
			
			int f = global::thx.Ints.gcd(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ).toInt(), ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (that) ), "num", 5496390, true)) ).toInt());
			int g = global::thx.Ints.gcd(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ).toInt(), ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (that) ), "den", 4995533, true)) ).toInt());
			object s = global::thx._Rational.Rational_Impl_.create(global::thx.bigint.Bigs.fromInt(( ( ((int) (((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(f)) ))) ).toInt()) ) * ((int) (((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (that) ), "den", 4995533, true)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(g)) ))) ).toInt()) ) ) + ( ((int) (((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (that) ), "num", 5496390, true)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(f)) ))) ).toInt()) ) * ((int) (((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ).divide(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(g)) ))) ).toInt()) ) ) )), global::thx.bigint.Bigs.fromInt(global::thx.Ints.lcm(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ).toInt(), ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (that) ), "den", 4995533, true)) ).toInt())));
			global::haxe.lang.Runtime.setField(s, "num", 5496390, ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(s, "num", 5496390, true)) ).multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(f)) )));
			return s;
		}
		
		
		public static object subtract(object this1, object that) {
			return global::thx._Rational.Rational_Impl_.@add(this1, global::thx._Rational.Rational_Impl_.negate(that));
		}
		
		
		public static object multiply(object this1, object that) {
			object c = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ), ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (that) ), "den", 4995533, true)) ));
			object d = global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (that) ), "num", 5496390, true)) ), ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ));
			return global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (c) ), "num", 5496390, true)) ).multiply(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (d) ), "num", 5496390, true)) ))) ), ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (c) ), "den", 4995533, true)) ).multiply(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (d) ), "den", 4995533, true)) ))) ));
		}
		
		
		public static object divide(object this1, object that) {
			return global::thx._Rational.Rational_Impl_.multiply(this1, global::thx._Rational.Rational_Impl_.reciprocal(that));
		}
		
		
		public static object reciprocal(object this1) {
			return global::thx._Rational.Rational_Impl_.create(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ), ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ));
		}
		
		
		public static bool isZero(object this1) {
			return ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ).isZero();
		}
		
		
		public static bool isNegative(object this1) {
			return global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ), "sign", 1280544829, true));
		}
		
		
		public static int compareTo(object this1, object that) {
			return ((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ).multiply(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (that) ), "den", 4995533, true)) ))) ).compareTo(((global::thx.bigint.BigIntImpl) (((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ).multiply(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (that) ), "num", 5496390, true)) ))) ));
		}
		
		
		public static bool greaterThan(object this1, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(this1, that) > 0 );
		}
		
		
		public static bool greater(object self, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(self, that) > 0 );
		}
		
		
		public static bool greaterEqualsTo(object this1, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(this1, that) >= 0 );
		}
		
		
		public static bool greaterEquals(object self, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(self, that) >= 0 );
		}
		
		
		public static bool lessThan(object this1, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(this1, that) < 0 );
		}
		
		
		public static bool less(object self, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(self, that) < 0 );
		}
		
		
		public static bool lessEqualsTo(object this1, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(this1, that) <= 0 );
		}
		
		
		public static bool lessEquals(object self, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(self, that) <= 0 );
		}
		
		
		public static bool equalsTo(object this1, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(this1, that) == 0 );
		}
		
		
		public static bool @equals(object self, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(self, that) == 0 );
		}
		
		
		public static bool notEqualsTo(object this1, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(this1, that) != 0 );
		}
		
		
		public static bool notEquals(object self, object that) {
			return ( global::thx._Rational.Rational_Impl_.compareTo(self, that) != 0 );
		}
		
		
		public static double toFloat(object this1) {
			return ( ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ).toFloat() / ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ).toFloat() );
		}
		
		
		public static global::thx.bigint.DecimalImpl toDecimal(object this1, global::haxe.lang.Null<int> extraScale) {
			global::haxe.lang.Null<int> __temp_extraScale157 = ( ( ! (extraScale.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (extraScale) );
			return ((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromBigInt(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ))) ).divide(global::thx._Decimal.Decimal_Impl_.fromBigInt(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) )));
		}
		
		
		public static string toString(object this1) {
			unchecked {
				if (global::thx._BigInt.BigInt_Impl_.@equals(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ), ((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.fromInt(1)) ))) {
					return global::haxe.lang.Runtime.concat("", ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ).toString());
				}
				else {
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "num", 5496390, true)) ).toString()), "/"), ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(((object) (this1) ), "den", 4995533, true)) ).toString());
				}
				
			}
		}
		
		
		public static global::thx.bigint.BigIntImpl get_num(object this1) {
			return ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(this1, "num", 5496390, true)) );
		}
		
		
		public static global::thx.bigint.BigIntImpl get_den(object this1) {
			return ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(this1, "den", 4995533, true)) );
		}
		
		
	}
}


