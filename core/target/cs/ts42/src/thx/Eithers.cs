// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Eithers : global::haxe.lang.HxObject {
		
		public Eithers(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Eithers() {
			global::thx.Eithers.__hx_ctor_thx_Eithers(this);
		}
		
		
		public static void __hx_ctor_thx_Eithers(global::thx.Eithers __temp_me108) {
		}
		
		
		public static bool isLeft<L, R>(global::thx.Either either) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return true;
					}
					
					
					case 1:
					{
						return false;
					}
					
					
				}
				
				return default(bool);
			}
		}
		
		
		public static bool isRight<L, R>(global::thx.Either either) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return false;
					}
					
					
					case 1:
					{
						return true;
					}
					
					
				}
				
				return default(bool);
			}
		}
		
		
		public static global::haxe.ds.Option toLeft<L, R>(global::thx.Either either) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return global::haxe.ds.Option.Some(global::haxe.lang.Runtime.genericCast<L>(either.@params[0]));
					}
					
					
					case 1:
					{
						return global::haxe.ds.Option.None;
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::haxe.ds.Option toRight<L, R>(global::thx.Either either) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return global::haxe.ds.Option.None;
					}
					
					
					case 1:
					{
						return global::haxe.ds.Option.Some(global::haxe.lang.Runtime.genericCast<R>(either.@params[0]));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::haxe.lang.Null<L> toLeftUnsafe<L, R>(global::thx.Either either) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return new global::haxe.lang.Null<L>(global::haxe.lang.Runtime.genericCast<L>(either.@params[0]), true);
					}
					
					
					case 1:
					{
						return default(global::haxe.lang.Null<L>);
					}
					
					
				}
				
				return default(global::haxe.lang.Null<L>);
			}
		}
		
		
		public static global::haxe.lang.Null<R> toRightUnsafe<L, R>(global::thx.Either either) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return default(global::haxe.lang.Null<R>);
					}
					
					
					case 1:
					{
						return new global::haxe.lang.Null<R>(global::haxe.lang.Runtime.genericCast<R>(either.@params[0]), true);
					}
					
					
				}
				
				return default(global::haxe.lang.Null<R>);
			}
		}
		
		
		public static global::thx.Either map<L, RIn, ROut>(global::thx.Either either, global::haxe.lang.Function f) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return global::thx.Either.Left(global::haxe.lang.Runtime.genericCast<L>(either.@params[0]));
					}
					
					
					case 1:
					{
						return global::thx.Either.Right(global::haxe.lang.Runtime.genericCast<ROut>(f.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<RIn>(either.@params[0]))));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::thx.Either flatMap<L, RIn, ROut>(global::thx.Either either, global::haxe.lang.Function f) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return global::thx.Either.Left(global::haxe.lang.Runtime.genericCast<L>(either.@params[0]));
					}
					
					
					case 1:
					{
						return ((global::thx.Either) (f.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<RIn>(either.@params[0]))) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::thx.Either leftMap<LIn, LOut, R>(global::thx.Either either, global::haxe.lang.Function f) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return global::thx.Either.Left(global::haxe.lang.Runtime.genericCast<LOut>(f.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<LIn>(either.@params[0]))));
					}
					
					
					case 1:
					{
						return global::thx.Either.Right(global::haxe.lang.Runtime.genericCast<R>(either.@params[0]));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static R orThrow<L, R>(global::thx.Either either, string message) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", message), ": "), global::Std.@string(global::haxe.lang.Runtime.genericCast<L>(either.@params[0]))), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"orThrow", "thx.Eithers", "Eithers.hx"}, new int[]{1981972957}, new double[]{((double) (93) )})));
					}
					
					
					case 1:
					{
						return global::haxe.lang.Runtime.genericCast<R>(either.@params[0]);
					}
					
					
				}
				
				return default(R);
			}
		}
		
		
		public static global::thx.Either toVNel<E, T>(global::thx.Either either) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return ((global::thx.Either) (global::thx.Either.Left(global::thx._Nel.Nel_Impl_.pure<E>(global::haxe.lang.Runtime.genericCast<E>(either.@params[0])))) );
					}
					
					
					case 1:
					{
						return ((global::thx.Either) (global::thx.Either.Right(global::haxe.lang.Runtime.genericCast<T>(either.@params[0]))) );
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static A cata<L, R, A>(global::thx.Either either, global::haxe.lang.Function l, global::haxe.lang.Function r) {
			unchecked {
				switch (either.index) {
					case 0:
					{
						return global::haxe.lang.Runtime.genericCast<A>(l.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<L>(either.@params[0])));
					}
					
					
					case 1:
					{
						return global::haxe.lang.Runtime.genericCast<A>(r.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<R>(either.@params[0])));
					}
					
					
				}
				
				return default(A);
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.Eithers(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.Eithers();
		}
		
		
	}
}


