// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.bigint {
	public class Small : global::haxe.lang.HxObject, global::thx.bigint.BigIntImpl {
		
		static Small() {
			unchecked {
				global::thx.bigint.Small.zero = new global::thx.bigint.Small(((int) (0) ));
				global::thx.bigint.Small.one = new global::thx.bigint.Small(((int) (1) ));
				global::thx.bigint.Small.two = new global::thx.bigint.Small(((int) (2) ));
				global::thx.bigint.Small.ten = new global::thx.bigint.Small(((int) (10) ));
				global::thx.bigint.Small.negativeOne = new global::thx.bigint.Small(((int) (-1) ));
			}
		}
		
		
		public Small(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Small(int @value) {
			global::thx.bigint.Small.__hx_ctor_thx_bigint_Small(this, @value);
		}
		
		
		public static void __hx_ctor_thx_bigint_Small(global::thx.bigint.Small __temp_me78, int @value) {
			__temp_me78.sign = ( @value < 0 );
			__temp_me78.@value = @value;
			__temp_me78.isSmall = true;
		}
		
		
		public static global::thx.bigint.Small zero;
		
		public static global::thx.bigint.Small one;
		
		public static global::thx.bigint.Small two;
		
		public static global::thx.bigint.Small ten;
		
		public static global::thx.bigint.Small negativeOne;
		
		public static new object __hx_createEmpty() {
			return new global::thx.bigint.Small(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.bigint.Small(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int @value;
		
		public bool sign;
		
		public bool isSmall;
		
		public virtual global::thx.bigint.BigIntImpl @add(global::thx.bigint.BigIntImpl that) {
			if (this.isZero()) {
				return that;
			}
			
			if (that.isZero()) {
				return this;
			}
			
			if (( this.sign != global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(that, "sign", 1280544829, true)) )) {
				return this.subtract(that.negate());
			}
			
			if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(that, "isSmall", 468751485, true))) {
				return this.addSmall(((global::thx.bigint.Small) (that) ));
			}
			else {
				return this.addBig(((global::thx.bigint.Big) (that) ));
			}
			
		}
		
		
		public virtual global::thx.bigint.BigIntImpl addSmall(global::thx.bigint.Small small) {
			if (global::thx.bigint.Bigs.canAdd(this.@value, small.@value)) {
				return new global::thx.bigint.Small(((int) (( this.@value + small.@value )) ));
			}
			else {
				int v = small.@value;
				global::Array<int> tmp = global::thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) ));
				int v1 = this.@value;
				return new global::thx.bigint.Big(global::thx.bigint.Bigs.addSmall(tmp, ( (( v1 < 0 )) ? ( - (v1) ) : (v1) )), this.sign);
			}
			
		}
		
		
		public virtual global::thx.bigint.BigIntImpl addBig(global::thx.bigint.Big big) {
			int v = this.@value;
			return new global::thx.bigint.Big(global::thx.bigint.Bigs.addSmall(big.@value, ( (( v < 0 )) ? ( - (v) ) : (v) )), this.sign);
		}
		
		
		public virtual global::thx.bigint.BigIntImpl subtract(global::thx.bigint.BigIntImpl that) {
			if (this.isZero()) {
				return that.negate();
			}
			
			if (that.isZero()) {
				return this;
			}
			
			if (( this.sign != global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(that, "sign", 1280544829, true)) )) {
				return this.@add(that.negate());
			}
			
			if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(that, "isSmall", 468751485, true))) {
				return this.subtractSmall(((global::thx.bigint.Small) (that) ));
			}
			else {
				return this.subtractBig(((global::thx.bigint.Big) (that) ));
			}
			
		}
		
		
		public virtual global::thx.bigint.BigIntImpl subtractSmall(global::thx.bigint.Small small) {
			return new global::thx.bigint.Small(((int) (( this.@value - small.@value )) ));
		}
		
		
		public virtual global::thx.bigint.BigIntImpl subtractBig(global::thx.bigint.Big big) {
			if (( big.compareToAbsSmall(this) < 0 )) {
				return new global::thx.bigint.Small(((int) (( this.@value - big.toInt() )) ));
			}
			
			int v = this.@value;
			return global::thx.bigint.Bigs.subtractSmall(big.@value, ( (( v < 0 )) ? ( - (v) ) : (v) ), ( this.@value >= 0 ));
		}
		
		
		public virtual global::thx.bigint.BigIntImpl divide(global::thx.bigint.BigIntImpl that) {
			return ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(this.divMod(that), "quotient", 845179051, true)) );
		}
		
		
		public virtual object divMod(global::thx.bigint.BigIntImpl that) {
			unchecked {
				if (that.isZero()) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error("division by zero", null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"divMod", "thx.bigint.Small", "Small.hx"}, new int[]{1981972957}, new double[]{((double) (77) )})));
				}
				
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(that, "isSmall", 468751485, true))) {
					return this.divModSmall(((global::thx.bigint.Small) (that) ));
				}
				else {
					return this.divModBig(((global::thx.bigint.Big) (that) ));
				}
				
			}
		}
		
		
		public virtual object divModSmall(global::thx.bigint.Small small) {
			double @value = ( ((double) (this.@value) ) / small.@value );
			{
				global::thx.bigint.BigIntImpl __temp_odecl1 = ((global::thx.bigint.BigIntImpl) (new global::thx.bigint.Small(((int) (( (( @value < 0.0 )) ? (((int) (global::System.Math.Ceiling(((double) (@value) ))) )) : (((int) (global::System.Math.Floor(((double) (@value) ))) )) )) ))) );
				global::thx.bigint.BigIntImpl __temp_odecl2 = ((global::thx.bigint.BigIntImpl) (new global::thx.bigint.Small(((int) (( this.@value % small.@value )) ))) );
				return new global::haxe.lang.DynamicObject(new int[]{845179051, 1002304485}, new object[]{__temp_odecl1, __temp_odecl2}, new int[]{}, new double[]{});
			}
			
		}
		
		
		public virtual object divModBig(global::thx.bigint.Big big) {
			int v = this.@value;
			return new global::thx.bigint.Big(global::thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) )), ( this.@value < 0 )).divModBig(big);
		}
		
		
		public virtual global::thx.bigint.BigIntImpl multiply(global::thx.bigint.BigIntImpl that) {
			if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(that, "isSmall", 468751485, true))) {
				return this.multiplySmall(((global::thx.bigint.Small) (that) ));
			}
			else {
				return this.multiplyBig(((global::thx.bigint.Big) (that) ));
			}
			
		}
		
		
		public virtual global::thx.bigint.BigIntImpl multiplySmall(global::thx.bigint.Small small) {
			unchecked {
				if (global::thx.bigint.Bigs.canMultiply(this.@value, small.@value)) {
					return new global::thx.bigint.Small(((int) (( this.@value * small.@value )) ));
				}
				
				int v = small.@value;
				global::Array<int> arr = global::thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) ));
				int v1 = this.@value;
				int abs = ( (( v1 < 0 )) ? ( - (v1) ) : (v1) );
				if (( abs < 10000000 )) {
					return new global::thx.bigint.Big(global::thx.bigint.Bigs.multiplySmall(arr, abs), ( this.sign != small.sign ));
				}
				else {
					return new global::thx.bigint.Big(global::thx.bigint.Bigs.multiplyLong(arr, global::thx.bigint.Bigs.smallToArray(abs)), ( this.sign != small.sign ));
				}
				
			}
		}
		
		
		public virtual global::thx.bigint.BigIntImpl multiplyBig(global::thx.bigint.Big big) {
			int v = this.@value;
			return new global::thx.bigint.Big(global::thx.bigint.Bigs.multiplyLong(big.@value, global::thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) ))), ( this.sign != big.sign ));
		}
		
		
		public virtual global::thx.bigint.BigIntImpl modulo(global::thx.bigint.BigIntImpl that) {
			return ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(this.divMod(that), "remainder", 1002304485, true)) );
		}
		
		
		public virtual global::thx.bigint.BigIntImpl random() {
			return global::thx.bigint.Bigs.fromInt(((int) (( global::Math.rand.NextDouble() * this.@value )) ));
		}
		
		
		public virtual global::thx.bigint.BigIntImpl abs() {
			int v = this.@value;
			return new global::thx.bigint.Small(((int) (( (( v < 0 )) ? ( - (v) ) : (v) )) ));
		}
		
		
		public virtual global::thx.bigint.BigIntImpl negate() {
			return new global::thx.bigint.Small(((int) ( - (this.@value) ) ));
		}
		
		
		public virtual global::thx.bigint.BigIntImpl next() {
			return this.addSmall(global::thx.bigint.Small.one);
		}
		
		
		public virtual global::thx.bigint.BigIntImpl prev() {
			return this.addSmall(global::thx.bigint.Small.negativeOne);
		}
		
		
		public virtual global::thx.bigint.BigIntImpl pow(global::thx.bigint.BigIntImpl exp) {
			unchecked {
				if (this.isZero()) {
					if (exp.isZero()) {
						return global::thx.bigint.Small.one;
					}
					else {
						return this;
					}
					
				}
				
				if (this.isUnit()) {
					if (this.sign) {
						if (exp.isEven()) {
							return global::thx.bigint.Small.one;
						}
						else {
							return global::thx.bigint.Small.negativeOne;
						}
						
					}
					else {
						return global::thx.bigint.Small.one;
					}
					
				}
				
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(exp, "sign", 1280544829, true))) {
					return global::thx.bigint.Small.zero;
				}
				
				if (( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(exp, "isSmall", 468751485, true))) )) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("The exponent ", global::Std.@string(exp)), " is too large."), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"pow", "thx.bigint.Small", "Small.hx"}, new int[]{1981972957}, new double[]{((double) (141) )})));
				}
				
				int b = ((global::thx.bigint.Small) (exp) ).@value;
				if (global::thx.bigint.Bigs.canPower(this.@value, b)) {
					return new global::thx.bigint.Small(((int) (global::System.Math.Pow(((double) (this.@value) ), ((double) (b) ))) ));
				}
				
				int v = this.@value;
				return new global::thx.bigint.Big(global::thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) )), this.sign).pow(exp);
			}
		}
		
		
		public virtual global::thx.bigint.BigIntImpl shiftLeft(int n) {
			unchecked {
				if (( n < 0 )) {
					return this.shiftRight( - (n) );
				}
				
				if (( (( (( n < 0 )) ? ( - (n) ) : (n) )) > 10000000 )) {
					return this.multiply(global::thx.bigint.Small.two.pow(global::thx.bigint.Bigs.fromInt(n)));
				}
				
				global::thx.bigint.BigIntImpl result = this;
				while (( n >= global::thx.bigint.Bigs.powers2Length )) {
					result = result.multiply(global::thx.bigint.Bigs.bigHighestPower2);
					n -= ( global::thx.bigint.Bigs.powers2Length - 1 );
				}
				
				return result.multiply(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.bigPowersOfTwo[n]) ));
			}
		}
		
		
		public virtual global::thx.bigint.BigIntImpl shiftRight(int n) {
			unchecked {
				if (( n < 0 )) {
					return this.shiftLeft( - (n) );
				}
				
				object remQuo = null;
				if (( (( (( n < 0 )) ? ( - (n) ) : (n) )) > 10000000 )) {
					remQuo = this.divMod(global::thx.bigint.Small.two.pow(global::thx.bigint.Bigs.fromInt(n)));
					if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(remQuo, "remainder", 1002304485, true)) ), "sign", 1280544829, true))) {
						return ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(remQuo, "quotient", 845179051, true)) ).prev();
					}
					else {
						return ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(remQuo, "quotient", 845179051, true)) );
					}
					
				}
				
				global::thx.bigint.BigIntImpl result = this;
				while (( n >= global::thx.bigint.Bigs.powers2Length )) {
					if (result.isZero()) {
						return result;
					}
					
					remQuo = result.divMod(global::thx.bigint.Bigs.bigHighestPower2);
					if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(remQuo, "remainder", 1002304485, true)) ), "sign", 1280544829, true))) {
						result = ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(remQuo, "quotient", 845179051, true)) ).prev();
					}
					else {
						result = ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(remQuo, "quotient", 845179051, true)) );
					}
					
					n -= ( global::thx.bigint.Bigs.powers2Length - 1 );
				}
				
				remQuo = result.divMod(((global::thx.bigint.BigIntImpl) (global::thx.bigint.Bigs.bigPowersOfTwo[n]) ));
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(remQuo, "remainder", 1002304485, true)) ), "sign", 1280544829, true))) {
					return ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(remQuo, "quotient", 845179051, true)) ).prev();
				}
				else {
					return ((global::thx.bigint.BigIntImpl) (global::haxe.lang.Runtime.getField(remQuo, "quotient", 845179051, true)) );
				}
				
			}
		}
		
		
		public virtual global::thx.bigint.BigIntImpl square() {
			if (global::thx.bigint.Bigs.canMultiply(this.@value, this.@value)) {
				return new global::thx.bigint.Small(((int) (( this.@value * this.@value )) ));
			}
			
			int v = this.@value;
			return new global::thx.bigint.Big(global::thx.bigint.Bigs.square(global::thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) ))), false);
		}
		
		
		public virtual bool isEven() {
			unchecked {
				return ( (( this.@value & 1 )) == 0 );
			}
		}
		
		
		public virtual bool isOdd() {
			unchecked {
				return ( (( this.@value & 1 )) == 1 );
			}
		}
		
		
		public virtual bool isZero() {
			return ( this.@value == 0 );
		}
		
		
		public virtual bool isUnit() {
			unchecked {
				int v = this.@value;
				return ( (( (( v < 0 )) ? ( - (v) ) : (v) )) == 1 );
			}
		}
		
		
		public virtual int compareTo(global::thx.bigint.BigIntImpl that) {
			unchecked {
				if (( this.sign != global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(that, "sign", 1280544829, true)) )) {
					if (this.sign) {
						return -1;
					}
					else {
						return 1;
					}
					
				}
				
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(that, "isSmall", 468751485, true))) {
					return this.compareToSmall(((global::thx.bigint.Small) (that) ));
				}
				else {
					return this.compareToBig(((global::thx.bigint.Big) (that) ));
				}
				
			}
		}
		
		
		public virtual int compareToSmall(global::thx.bigint.Small small) {
			return ( this.@value - small.@value );
		}
		
		
		public virtual int compareToBig(global::thx.bigint.Big big) {
			unchecked {
				int v = this.@value;
				return ( global::thx.bigint.Bigs.compareToAbs(global::thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) )), big.@value) * (( (this.sign) ? (-1) : (1) )) );
			}
		}
		
		
		public virtual int compareToAbs(global::thx.bigint.BigIntImpl that) {
			if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(that, "isSmall", 468751485, true))) {
				return this.compareToAbsSmall(((global::thx.bigint.Small) (that) ));
			}
			else {
				return this.compareToAbsBig(((global::thx.bigint.Big) (that) ));
			}
			
		}
		
		
		public virtual int compareToAbsSmall(global::thx.bigint.Small small) {
			int v = this.@value;
			int a = ( (( v < 0 )) ? ( - (v) ) : (v) );
			int v1 = small.@value;
			return ( a - (( (( v1 < 0 )) ? ( - (v1) ) : (v1) )) );
		}
		
		
		public virtual int compareToAbsBig(global::thx.bigint.Big big) {
			int v = this.@value;
			return global::thx.bigint.Bigs.compareToAbs(global::thx.bigint.Bigs.smallToArray(( (( v < 0 )) ? ( - (v) ) : (v) )), big.@value);
		}
		
		
		public virtual global::thx.bigint.BigIntImpl not() {
			return this.negate().prev();
		}
		
		
		public virtual global::thx.bigint.BigIntImpl and(global::thx.bigint.BigIntImpl that) {
			return global::thx.bigint.Bigs.bitwise(this, that, ( (( global::thx.bigint.Small_and_233__Fun.__hx_current != null )) ? (global::thx.bigint.Small_and_233__Fun.__hx_current) : (global::thx.bigint.Small_and_233__Fun.__hx_current = ((global::thx.bigint.Small_and_233__Fun) (new global::thx.bigint.Small_and_233__Fun()) )) ));
		}
		
		
		public virtual global::thx.bigint.BigIntImpl or(global::thx.bigint.BigIntImpl that) {
			return global::thx.bigint.Bigs.bitwise(this, that, ( (( global::thx.bigint.Small_or_236__Fun.__hx_current != null )) ? (global::thx.bigint.Small_or_236__Fun.__hx_current) : (global::thx.bigint.Small_or_236__Fun.__hx_current = ((global::thx.bigint.Small_or_236__Fun) (new global::thx.bigint.Small_or_236__Fun()) )) ));
		}
		
		
		public virtual global::thx.bigint.BigIntImpl xor(global::thx.bigint.BigIntImpl that) {
			return global::thx.bigint.Bigs.bitwise(this, that, ( (( global::thx.bigint.Small_xor_239__Fun.__hx_current != null )) ? (global::thx.bigint.Small_xor_239__Fun.__hx_current) : (global::thx.bigint.Small_xor_239__Fun.__hx_current = ((global::thx.bigint.Small_xor_239__Fun) (new global::thx.bigint.Small_xor_239__Fun()) )) ));
		}
		
		
		public virtual double toFloat() {
			return ((double) (this.@value) );
		}
		
		
		public virtual int toInt() {
			return this.@value;
		}
		
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(this.@value));
		}
		
		
		public virtual string toStringWithBase(int @base) {
			return global::thx.Ints.toString(this.@value, @base);
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 834174833:
					{
						this.@value = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 468751485:
					{
						this.isSmall = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1280544829:
					{
						this.sign = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 834174833:
					{
						this.@value = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 593501699:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toStringWithBase", 593501699)) );
					}
					
					
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 336707124:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toInt", 336707124)) );
					}
					
					
					case 1327174177:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toFloat", 1327174177)) );
					}
					
					
					case 5992347:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "xor", 5992347)) );
					}
					
					
					case 24867:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "or", 24867)) );
					}
					
					
					case 4848343:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "and", 4848343)) );
					}
					
					
					case 5495059:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "not", 5495059)) );
					}
					
					
					case 786627854:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compareToAbsBig", 786627854)) );
					}
					
					
					case 936862869:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compareToAbsSmall", 936862869)) );
					}
					
					
					case 817595090:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compareToAbs", 817595090)) );
					}
					
					
					case 817646368:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compareToBig", 817646368)) );
					}
					
					
					case 1563286311:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compareToSmall", 1563286311)) );
					}
					
					
					case 39622016:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compareTo", 39622016)) );
					}
					
					
					case 1796247438:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isUnit", 1796247438)) );
					}
					
					
					case 1851249714:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isZero", 1851249714)) );
					}
					
					
					case 1095941093:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isOdd", 1095941093)) );
					}
					
					
					case 1619211300:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "isEven", 1619211300)) );
					}
					
					
					case 1492254877:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "square", 1492254877)) );
					}
					
					
					case 2025584634:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "shiftRight", 2025584634)) );
					}
					
					
					case 1386842537:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "shiftLeft", 1386842537)) );
					}
					
					
					case 5594520:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pow", 5594520)) );
					}
					
					
					case 1247723251:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "prev", 1247723251)) );
					}
					
					
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 1729708482:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "negate", 1729708482)) );
					}
					
					
					case 4845682:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "abs", 4845682)) );
					}
					
					
					case 932127235:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "random", 932127235)) );
					}
					
					
					case 1087583414:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "modulo", 1087583414)) );
					}
					
					
					case 2133490940:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "multiplyBig", 2133490940)) );
					}
					
					
					case 1223769091:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "multiplySmall", 1223769091)) );
					}
					
					
					case 445440548:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "multiply", 445440548)) );
					}
					
					
					case 2082702159:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "divModBig", 2082702159)) );
					}
					
					
					case 989248790:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "divModSmall", 989248790)) );
					}
					
					
					case 1056766449:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "divMod", 1056766449)) );
					}
					
					
					case 1058156409:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "divide", 1058156409)) );
					}
					
					
					case 200302604:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "subtractBig", 200302604)) );
					}
					
					
					case 2101478163:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "subtractSmall", 2101478163)) );
					}
					
					
					case 2014410004:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "subtract", 2014410004)) );
					}
					
					
					case 519817503:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addBig", 519817503)) );
					}
					
					
					case 2026378982:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addSmall", 2026378982)) );
					}
					
					
					case 4846113:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "add", 4846113)) );
					}
					
					
					case 468751485:
					{
						return this.isSmall;
					}
					
					
					case 1280544829:
					{
						return this.sign;
					}
					
					
					case 834174833:
					{
						return this.@value;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 834174833:
					{
						return ((double) (this.@value) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 593501699:
					{
						return this.toStringWithBase(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 336707124:
					{
						return this.toInt();
					}
					
					
					case 1327174177:
					{
						return this.toFloat();
					}
					
					
					case 5992347:
					{
						return this.xor(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 24867:
					{
						return this.or(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 4848343:
					{
						return this.and(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 5495059:
					{
						return this.not();
					}
					
					
					case 786627854:
					{
						return this.compareToAbsBig(((global::thx.bigint.Big) (dynargs[0]) ));
					}
					
					
					case 936862869:
					{
						return this.compareToAbsSmall(((global::thx.bigint.Small) (dynargs[0]) ));
					}
					
					
					case 817595090:
					{
						return this.compareToAbs(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 817646368:
					{
						return this.compareToBig(((global::thx.bigint.Big) (dynargs[0]) ));
					}
					
					
					case 1563286311:
					{
						return this.compareToSmall(((global::thx.bigint.Small) (dynargs[0]) ));
					}
					
					
					case 39622016:
					{
						return this.compareTo(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 1796247438:
					{
						return this.isUnit();
					}
					
					
					case 1851249714:
					{
						return this.isZero();
					}
					
					
					case 1095941093:
					{
						return this.isOdd();
					}
					
					
					case 1619211300:
					{
						return this.isEven();
					}
					
					
					case 1492254877:
					{
						return this.square();
					}
					
					
					case 2025584634:
					{
						return this.shiftRight(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 1386842537:
					{
						return this.shiftLeft(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 5594520:
					{
						return this.pow(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 1247723251:
					{
						return this.prev();
					}
					
					
					case 1224901875:
					{
						return this.next();
					}
					
					
					case 1729708482:
					{
						return this.negate();
					}
					
					
					case 4845682:
					{
						return this.abs();
					}
					
					
					case 932127235:
					{
						return this.random();
					}
					
					
					case 1087583414:
					{
						return this.modulo(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 2133490940:
					{
						return this.multiplyBig(((global::thx.bigint.Big) (dynargs[0]) ));
					}
					
					
					case 1223769091:
					{
						return this.multiplySmall(((global::thx.bigint.Small) (dynargs[0]) ));
					}
					
					
					case 445440548:
					{
						return this.multiply(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 2082702159:
					{
						return this.divModBig(((global::thx.bigint.Big) (dynargs[0]) ));
					}
					
					
					case 989248790:
					{
						return this.divModSmall(((global::thx.bigint.Small) (dynargs[0]) ));
					}
					
					
					case 1056766449:
					{
						return this.divMod(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 1058156409:
					{
						return this.divide(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 200302604:
					{
						return this.subtractBig(((global::thx.bigint.Big) (dynargs[0]) ));
					}
					
					
					case 2101478163:
					{
						return this.subtractSmall(((global::thx.bigint.Small) (dynargs[0]) ));
					}
					
					
					case 2014410004:
					{
						return this.subtract(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					case 519817503:
					{
						return this.addBig(((global::thx.bigint.Big) (dynargs[0]) ));
					}
					
					
					case 2026378982:
					{
						return this.addSmall(((global::thx.bigint.Small) (dynargs[0]) ));
					}
					
					
					case 4846113:
					{
						return this.@add(((global::thx.bigint.BigIntImpl) (dynargs[0]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("isSmall");
			baseArr.push("sign");
			baseArr.push("value");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.bigint {
	public class Small_and_233__Fun : global::haxe.lang.Function {
		
		public Small_and_233__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.bigint.Small_and_233__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			int a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			return ((double) (( a & b )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.bigint {
	public class Small_or_236__Fun : global::haxe.lang.Function {
		
		public Small_or_236__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.bigint.Small_or_236__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			int a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			return ((double) (( a | b )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.bigint {
	public class Small_xor_239__Fun : global::haxe.lang.Function {
		
		public Small_xor_239__Fun() : base(2, 1) {
		}
		
		
		public static global::thx.bigint.Small_xor_239__Fun __hx_current;
		
		public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			int b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float2) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn2)) )) );
			int a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			return ((double) (( a ^ b )) );
		}
		
		
	}
}


