<?php

// Generated by Haxe 3.3.0
class thx_bigint_Decimals {
	public function __construct(){}
	static $divisionExtraScale = 4;
	static function fromInt($value) {
		$tmp = thx_bigint_Bigs::fromInt($value);
		return new thx_bigint_DecimalImpl($tmp, 0);
	}
	static function fromFloat($value) {
		$tmp = !Math::isFinite($value);
		if($tmp) {
			throw new HException("Value is not a finite Float: " . _hx_string_rec($value, ""));
		}
		return thx_bigint_Decimals::parse("" . _hx_string_rec($value, ""));
	}
	static function parse($value) {
		$value = strtolower($value);
		$pose = _hx_index_of($value, "e", null);
		if($pose > 0) {
			$isNeg = false;
			$f = _hx_substring($value, 0, $pose);
			$e = _hx_substring($value, $pose + 1, null);
			$tmp = _hx_substring($e, 0, 1);
			if($tmp === "-") {
				$isNeg = true;
				$e = _hx_substring($e, 1, null);
			}
			$p = thx_bigint_Bigs::parseBase($e, 10);
			$m = thx_bigint_Small::$ten->pow($p);
			if($isNeg) {
				$tmp1 = thx_bigint_Decimals::parse($f);
				$tmp2 = thx__Decimal_Decimal_Impl_::fromBigInt($m);
				$tmp3 = Std::parseInt($e);
				return $tmp1->divideWithScale($tmp2, $tmp3);
			} else {
				$tmp4 = thx_bigint_Decimals::parse($f);
				return $tmp4->multiply(thx__Decimal_Decimal_Impl_::fromBigInt($m));
			}
		}
		$pdec = _hx_index_of($value, ".", null);
		if($pdec < 0) {
			return new thx_bigint_DecimalImpl(thx_bigint_Bigs::parseBase($value, 10), 0);
		}
		$tmp5 = _hx_substring($value, 0, $pdec);
		$tmp6 = _hx_substring($value, $pdec + 1, null);
		$tmp7 = thx_bigint_Bigs::parseBase(_hx_string_or_null($tmp5) . _hx_string_or_null($tmp6), 10);
		return new thx_bigint_DecimalImpl($tmp7, strlen($value) - $pdec - 1);
	}
	function __toString() { return 'thx.bigint.Decimals'; }
}
