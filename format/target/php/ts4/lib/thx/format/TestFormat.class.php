<?php

// Generated by Haxe 3.3.0
class thx_format_TestFormat {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testF() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$date = thx__DateTime_DateTime_Impl_::fromString("2014-01-01");
			$tmp = thx_format_DateFormat::format($date, "D", null);
			utest_Assert::equals("Wednesday, 01 January 2014", $tmp, null, _hx_anonymous(array("fileName" => "TestFormat.hx", "lineNumber" => 20, "className" => "thx.format.TestFormat", "methodName" => "testF")));
			$tmp1 = thx_format_DateFormat::format(thx__DateTime_DateTime_Impl_::fromString("2014-01-01"), "D", null);
			utest_Assert::equals("Wednesday, 01 January 2014", $tmp1, null, _hx_anonymous(array("fileName" => "TestFormat.hx", "lineNumber" => 21, "className" => "thx.format.TestFormat", "methodName" => "testF")));
			$tmp2 = thx_format_NumberFormat::format(1000, "n", null);
			utest_Assert::equals("1,000.00", $tmp2, null, _hx_anonymous(array("fileName" => "TestFormat.hx", "lineNumber" => 22, "className" => "thx.format.TestFormat", "methodName" => "testF")));
			$tmp3 = thx__DateTime_DateTime_Impl_::fromString("2014-01-01");
			$tmp4 = thx_format_DateFormat::format($tmp3, "D", thx_format_TestFormat::$it);
			utest_Assert::equals("mercoledì 1 gennaio 2014", $tmp4, null, _hx_anonymous(array("fileName" => "TestFormat.hx", "lineNumber" => 24, "className" => "thx.format.TestFormat", "methodName" => "testF")));
			$tmp5 = thx_format_NumberFormat::format(1000, "n", thx_format_TestFormat::$it);
			utest_Assert::equals("1.000,00", $tmp5, null, _hx_anonymous(array("fileName" => "TestFormat.hx", "lineNumber" => 25, "className" => "thx.format.TestFormat", "methodName" => "testF")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$date);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $it;
	function __toString() { return 'thx.format.TestFormat'; }
}
thx_format_TestFormat::$it = thx_format_TestFormat_0();
function thx_format_TestFormat_0() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "Italia", "separatorList" => ";", "nameNative" => "italiano", "number" => _hx_anonymous(array("patternPositiveCurrency" => 2, "patternPositivePercent" => 1, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ",", "separatorGroupNumber" => ".", "signPositive" => "+", "symbolPositiveInfinity" => "+Infinito", "patternNegativeCurrency" => 9, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => ".", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non un numero reale", "separatorGroupPercent" => ".", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinito", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Italian", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dom", "lun", "mar", "mer", "gio", "ven", "sab"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("do", "lu", "ma", "me", "gi", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstFourDayWeek", "nameCalendarNative" => "calendario gregoriano", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 2, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))))), "win3" => "ITA", "nameRegionEnglish" => "Italy", "lcid" => 1040, "iso3" => "ita", "iso2" => "it", "ietf" => "it-IT", "code" => "it-IT"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
