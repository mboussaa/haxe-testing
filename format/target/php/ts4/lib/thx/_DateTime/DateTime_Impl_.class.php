<?php

// Generated by Haxe 3.3.0
class thx__DateTime_DateTime_Impl_ {
	public function __construct(){}
	static function localOffset() {
		$now = thx__DateTimeUtc_DateTimeUtc_Impl_::now();
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($now, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($now, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$tmp2 = $tmp1 - 1;
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($now, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($now);
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($now);
		$tmp6 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($now);
		$local = new Date($tmp, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6);
		$a = $now;
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$unixEpochTicks;
		$high = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $a->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low) < 0) {
			--$high;
			$tmp7 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$a1 = $x;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$tmp8 = haxe__Int64_Int64_Impl_::divMod($a1, $b1)->quotient;
		$tmp9 = Math::ffloor(thx_Int64s::toFloat($tmp8) / 1000);
		$tmp10 = $tmp9 * 1000;
		$tmp11 = $local->getTime();
		$a2 = thx_Int64s::fromFloat($tmp10 - $tmp11);
		$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$al = $a2->low & 65535;
		$ah = _hx_shift_right($a2->low, 16);
		$bl = $b2->low & 65535;
		$bh = _hx_shift_right($b2->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low1 = $p00;
		$high1 = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp12 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $p01) < 0) {
			++$high1;
			$tmp13 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp13 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp14 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp15 = $low1 + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $tmp15 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $p10) < 0) {
			++$high1;
			$tmp16 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp16 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp17 = $high1 + (haxe__Int32_Int32_Impl_::mul($a2->low, $b2->high) + haxe__Int32_Int32_Impl_::mul($a2->high, $b2->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high1 = $tmp17 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high1, $low1);
		return $x1;
	}
	static function now() {
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::now();
		$offset = thx__DateTime_DateTime_Impl_::localOffset();
		return (new _hx_array(array($dateTime, $offset)));
	}
	static function nowUtc() {
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::now();
		return (new _hx_array(array($dateTime, thx__Time_Time_Impl_::$zero)));
	}
	static function fromDate($date) {
		$tmp = $date->getTime();
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::fromTime($tmp);
		$offset = thx__DateTime_DateTime_Impl_::localOffset();
		return (new _hx_array(array($dateTime, $offset)));
	}
	static function fromDateWithOffset($date, $offset) {
		$tmp = $date->getTime();
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::fromTime($tmp);
		return (new _hx_array(array($dateTime, $offset)));
	}
	static function fromTime($timestamp) {
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::fromTime($timestamp);
		return (new _hx_array(array($dateTime, thx__Time_Time_Impl_::$zero)));
	}
	static function fromString($s) {
		if($s === null) {
			throw new HException(new thx_Error("null String cannot be parsed to DateTime", null, _hx_anonymous(array("fileName" => "DateTime.hx", "lineNumber" => 93, "className" => "thx._DateTime.DateTime_Impl_", "methodName" => "fromString"))));
		}
		$pattern = new EReg("^([-])?(\\d+)[-](\\d{2})[-](\\d{2})(?:[T ](\\d{2})[:](\\d{2})[:](\\d{2})(?:\\.(\\d+))?(Z|([+-]\\d{2})[:](\\d{2}))?)?\$", "");
		$tmp = !$pattern->match($s);
		if($tmp) {
			throw new HException(new thx_Error("unable to parse DateTime string: \"" . _hx_string_or_null($s) . "\"", null, _hx_anonymous(array("fileName" => "DateTime.hx", "lineNumber" => 96, "className" => "thx._DateTime.DateTime_Impl_", "methodName" => "fromString"))));
		}
		$smticks = $pattern->matched(8);
		$mticks = 0;
		if(null !== $smticks) {
			$tmp1 = _hx_substring(thx_Strings::rpad($smticks, "0", 7), 0, 7);
			$smticks = "1" . _hx_string_or_null($tmp1);
			$tmp2 = Std::parseInt($smticks);
			$mticks = $tmp2 - 10000000;
		}
		$time = thx__Time_Time_Impl_::$zero;
		$timepart = $pattern->matched(9);
		$tmp3 = null;
		if(null !== $timepart) {
			$tmp3 = "Z" !== $timepart;
		} else {
			$tmp3 = false;
		}
		if($tmp3) {
			$hours = $pattern->matched(10);
			$tmp4 = _hx_substring($hours, 0, 1);
			if($tmp4 === "+") {
				$hours = _hx_substring($hours, 1, null);
			}
			$tmp5 = Std::parseInt($hours);
			$tmp6 = $pattern->matched(11);
			$tmp7 = Std::parseInt($tmp6);
			$time = thx__Time_Time_Impl_::create($tmp5, $tmp7, 0, null);
		}
		$tmp8 = $pattern->matched(2);
		$year = Std::parseInt($tmp8);
		$tmp9 = $pattern->matched(3);
		$month = Std::parseInt($tmp9);
		$tmp10 = $pattern->matched(4);
		$day = Std::parseInt($tmp10);
		$tmp11 = $pattern->matched(5);
		$hour = Std::parseInt($tmp11);
		$tmp12 = $pattern->matched(6);
		$minute = Std::parseInt($tmp12);
		$tmp13 = $pattern->matched(7);
		$second = Std::parseInt($tmp13);
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, $hour, $minute, $second, 0);
		$this1 = (new _hx_array(array($dateTime, $time)));
		$this2 = $this1[0];
		$b = $time;
		$high = $this2->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this2->low, $b->low) < 0) {
			--$high;
			$tmp14 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$this3 = (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x), $this1[1])));
		$x1 = new haxe__Int64____Int64($mticks >> 31, $mticks);
		$ticks = $x1;
		$this4 = $this3[0];
		$high1 = $this4->high + $ticks->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $ticks->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp15 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp15 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high1, $low1);
		$date = (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x2), $this3[1])));
		$tmp16 = $pattern->matched(1);
		if($tmp16 === "-") {
			$this5 = $date[0];
			$high2 = ~$this5->high;
			$low2 = -$this5->low;
			if($low2 === 0) {
				++$high2;
				$tmp17 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp17 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x3 = new haxe__Int64____Int64($high2, $low2);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x3), $time)));
		}
		return $date;
	}
	static function daysRange($start, $end) {
		if(thx__DateTime_DateTime_Impl_::compareTo($end, $start) < 0) {
			return (new _hx_array(array()));
		}
		$days = (new _hx_array(array()));
		while(true) {
			$tmp = !(!thx__DateTime_DateTime_Impl_::sameDay($start, $end));
			if($tmp) {
				break;
			}
			$days->push($start);
			$start = thx__DateTime_DateTime_Impl_::jump($start, thx_TimePeriod::$Day, 1);
			unset($tmp);
		}
		$days->push($end);
		return $days;
	}
	static function compare($a, $b) {
		return thx__DateTime_DateTime_Impl_::compareTo($a, $b);
	}
	static function ord() {
		return thx__Ord_Ord_Impl_::fromIntComparison((isset(thx__DateTime_DateTime_Impl_::$compare) ? thx__DateTime_DateTime_Impl_::$compare: array("thx__DateTime_DateTime_Impl_", "compare")));
	}
	static function create($year, $month, $day, $hour = null, $minute = null, $second = null, $millisecond = null, $offset) {
		if($millisecond === null) {
			$millisecond = 0;
		}
		if($second === null) {
			$second = 0;
		}
		if($minute === null) {
			$minute = 0;
		}
		if($hour === null) {
			$hour = 0;
		}
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, $hour, $minute, $second, $millisecond);
		$this1 = (new _hx_array(array($dateTime, $offset)));
		$this2 = $this1[0];
		$b = $offset;
		$high = $this2->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this2->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x), $this1[1])));
	}
	static function _new($dateTime, $offset) {
		return (new _hx_array(array($dateTime, $offset)));
	}
	static function min($this1, $other) {
		if(thx__DateTimeUtc_DateTimeUtc_Impl_::compareTo($this1[0], $other[0]) <= 0) {
			return $this1;
		} else {
			return $other;
		}
	}
	static function max($this1, $other) {
		if(thx__DateTimeUtc_DateTimeUtc_Impl_::compareTo($this1[0], $other[0]) >= 0) {
			return $this1;
		} else {
			return $other;
		}
	}
	static function jump($this1, $period, $amount) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$sec = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x);
		$this4 = $this1[0];
		$this5 = $this1[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$min = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x1);
		$this6 = $this1[0];
		$this7 = $this1[1];
		$high2 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $this6->low) < 0) {
			++$high2;
			$tmp2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$hr = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x2);
		$this8 = $this1[0];
		$this9 = $this1[1];
		$high3 = $this8->high + $this9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low3 = $this8->low + $this9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low3, $this8->low) < 0) {
			++$high3;
			$tmp3 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
			$high3 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high3, $low3);
		$day = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x3, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$this10 = $this1[0];
		$this11 = $this1[1];
		$high4 = $this10->high + $this11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low4 = $this10->low + $this11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low4, $this10->low) < 0) {
			++$high4;
			$tmp4 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
			$high4 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high4, $low4);
		$mon = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x4, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$this12 = $this1[0];
		$this13 = $this1[1];
		$high5 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low5 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low5, $this12->low) < 0) {
			++$high5;
			$tmp5 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
			$high5 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x5 = new haxe__Int64____Int64($high5, $low5);
		$yr = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x5, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		switch($period->index) {
		case 0:{
			$sec += $amount;
		}break;
		case 1:{
			$min += $amount;
		}break;
		case 2:{
			$hr += $amount;
		}break;
		case 3:{
			$day += $amount;
		}break;
		case 4:{
			$day += $amount * 7;
		}break;
		case 5:{
			$mon += $amount;
		}break;
		case 6:{
			$yr += $amount;
		}break;
		}
		$this14 = $this1[0];
		$this15 = $this1[1];
		$high6 = $this14->high + $this15->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low6 = $this14->low + $this15->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low6, $this14->low) < 0) {
			++$high6;
			$tmp6 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
			$high6 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high6, $low6);
		$millisecond = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($x6);
		$offset = $this1[1];
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($yr, $mon, $day, $hr, $min, $sec, $millisecond);
		$this16 = (new _hx_array(array($dateTime, $offset)));
		$this17 = $this16[0];
		$b = $offset;
		$high7 = $this17->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low7 = $this17->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this17->low, $b->low) < 0) {
			--$high7;
			$tmp7 = $high7 << haxe__Int32_Int32_Impl_::$extraBits;
			$high7 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x7 = new haxe__Int64____Int64($high7, $low7);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x7), $this16[1])));
	}
	static function daysInThisMonth($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$this4 = $this1[0];
		$this5 = $this1[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp2 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($tmp1, $tmp3);
	}
	static function prevYear($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Year, -1);
	}
	static function nextYear($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Year, 1);
	}
	static function prevMonth($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Month, -1);
	}
	static function nextMonth($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Month, 1);
	}
	static function prevWeek($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Week, -1);
	}
	static function nextWeek($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Week, 1);
	}
	static function prevDay($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Day, -1);
	}
	static function nextDay($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Day, 1);
	}
	static function prevHour($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Hour, -1);
	}
	static function nextHour($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Hour, 1);
	}
	static function prevMinute($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Minute, -1);
	}
	static function nextMinute($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Minute, 1);
	}
	static function prevSecond($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Second, -1);
	}
	static function nextSecond($this1) {
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Second, 1);
	}
	static function snapToWeekDay($this1, $weekday, $firstDayOfWk = null) {
		if($firstDayOfWk === null) {
			$firstDayOfWk = 0;
		}
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$d = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x);
		$s = $weekday;
		$tmp1 = $s < $firstDayOfWk;
		if($tmp1) {
			$s += 7;
		}
		$tmp2 = $d < $firstDayOfWk;
		if($tmp2) {
			$d += 7;
		}
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Day, $s - $d);
	}
	static function snapNextWeekDay($this1, $weekday) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$d = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x);
		$s = $weekday;
		$tmp1 = $s < $d;
		if($tmp1) {
			$s += 7;
		}
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Day, $s - $d);
	}
	static function snapPrevWeekDay($this1, $weekday) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$d = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x);
		$s = $weekday;
		$tmp1 = $s > $d;
		if($tmp1) {
			$s -= 7;
		}
		return thx__DateTime_DateTime_Impl_::jump($this1, thx_TimePeriod::$Day, $s - $d);
	}
	static function snapNext($this1, $period) {
		$tmp = $period->index;
		switch($tmp) {
		case 0:{
			$a = thx_Int64s::divCeil($this1[0], thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64);
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
			$al = $a->low & 65535;
			$ah = _hx_shift_right($a->low, 16);
			$bl = $b->low & 65535;
			$bh = _hx_shift_right($b->low, 16);
			$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
			$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
			$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
			$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
			$low = $p00;
			$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp1 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p01 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
				++$high;
				$tmp2 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp3 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p10 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp4 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
			$low = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
				++$high;
				$tmp5 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp6 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x = new haxe__Int64____Int64($high, $low);
			return (new _hx_array(array($x, $this1[1])));
		}break;
		case 1:{
			$a1 = thx_Int64s::divCeil($this1[0], thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64);
			$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
			$al1 = $a1->low & 65535;
			$ah1 = _hx_shift_right($a1->low, 16);
			$bl1 = $b1->low & 65535;
			$bh1 = _hx_shift_right($b1->low, 16);
			$p001 = haxe__Int32_Int32_Impl_::mul($al1, $bl1);
			$p101 = haxe__Int32_Int32_Impl_::mul($ah1, $bl1);
			$p011 = haxe__Int32_Int32_Impl_::mul($al1, $bh1);
			$p111 = haxe__Int32_Int32_Impl_::mul($ah1, $bh1);
			$low1 = $p001;
			$high1 = ($p111 + (_hx_shift_right($p011, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p101, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp7 = $p011 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p011 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $p001 + $p011 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p011) < 0) {
				++$high1;
				$tmp8 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp9 = $p101 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p101 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp10 = $low1 + $p101 << haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $tmp10 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p101) < 0) {
				++$high1;
				$tmp11 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp11 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp12 = $high1 + (haxe__Int32_Int32_Impl_::mul($a1->low, $b1->high) + haxe__Int32_Int32_Impl_::mul($a1->high, $b1->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x1 = new haxe__Int64____Int64($high1, $low1);
			return (new _hx_array(array($x1, $this1[1])));
		}break;
		case 2:{
			$a2 = thx_Int64s::divCeil($this1[0], thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64);
			$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$al2 = $a2->low & 65535;
			$ah2 = _hx_shift_right($a2->low, 16);
			$bl2 = $b2->low & 65535;
			$bh2 = _hx_shift_right($b2->low, 16);
			$p002 = haxe__Int32_Int32_Impl_::mul($al2, $bl2);
			$p102 = haxe__Int32_Int32_Impl_::mul($ah2, $bl2);
			$p012 = haxe__Int32_Int32_Impl_::mul($al2, $bh2);
			$p112 = haxe__Int32_Int32_Impl_::mul($ah2, $bh2);
			$low2 = $p002;
			$high2 = ($p112 + (_hx_shift_right($p012, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p102, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp13 = $p012 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p012 = $tmp13 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $p002 + $p012 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p012) < 0) {
				++$high2;
				$tmp14 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp15 = $p102 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p102 = $tmp15 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp16 = $low2 + $p102 << haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $tmp16 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p102) < 0) {
				++$high2;
				$tmp17 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp17 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp18 = $high2 + (haxe__Int32_Int32_Impl_::mul($a2->low, $b2->high) + haxe__Int32_Int32_Impl_::mul($a2->high, $b2->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp18 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x2 = new haxe__Int64____Int64($high2, $low2);
			return (new _hx_array(array($x2, $this1[1])));
		}break;
		case 3:{
			$this2 = $this1[0];
			$this3 = $this1[1];
			$high3 = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low3 = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low3, $this2->low) < 0) {
				++$high3;
				$tmp19 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
				$high3 = $tmp19 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x3 = new haxe__Int64____Int64($high3, $low3);
			$year = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x3, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this4 = $this1[0];
			$this5 = $this1[1];
			$high4 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low4 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low4, $this4->low) < 0) {
				++$high4;
				$tmp20 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
				$high4 = $tmp20 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x4 = new haxe__Int64____Int64($high4, $low4);
			$month = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x4, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$this6 = $this1[0];
			$this7 = $this1[1];
			$high5 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low5 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low5, $this6->low) < 0) {
				++$high5;
				$tmp21 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
				$high5 = $tmp21 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x5 = new haxe__Int64____Int64($high5, $low5);
			$tmp22 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x5, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$day = $tmp22 + 1;
			$offset = $this1[1];
			$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, 0, 0, 0, 0);
			$this8 = (new _hx_array(array($dateTime, $offset)));
			$this9 = $this8[0];
			$b3 = $offset;
			$high6 = $this9->high - $b3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low6 = $this9->low - $b3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this9->low, $b3->low) < 0) {
				--$high6;
				$tmp23 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
				$high6 = $tmp23 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x6 = new haxe__Int64____Int64($high6, $low6);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x6), $this8[1])));
		}break;
		case 4:{
			$this10 = $this1[0];
			$this11 = $this1[1];
			$high7 = $this10->high + $this11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low7 = $this10->low + $this11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low7, $this10->low) < 0) {
				++$high7;
				$tmp24 = $high7 << haxe__Int32_Int32_Impl_::$extraBits;
				$high7 = $tmp24 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x7 = new haxe__Int64____Int64($high7, $low7);
			$wd = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x7);
			$this12 = $this1[0];
			$this13 = $this1[1];
			$high8 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low8 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low8, $this12->low) < 0) {
				++$high8;
				$tmp25 = $high8 << haxe__Int32_Int32_Impl_::$extraBits;
				$high8 = $tmp25 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x8 = new haxe__Int64____Int64($high8, $low8);
			$year1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x8, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this14 = $this1[0];
			$this15 = $this1[1];
			$high9 = $this14->high + $this15->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low9 = $this14->low + $this15->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low9, $this14->low) < 0) {
				++$high9;
				$tmp26 = $high9 << haxe__Int32_Int32_Impl_::$extraBits;
				$high9 = $tmp26 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x9 = new haxe__Int64____Int64($high9, $low9);
			$month1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x9, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$this16 = $this1[0];
			$this17 = $this1[1];
			$high10 = $this16->high + $this17->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low10 = $this16->low + $this17->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low10, $this16->low) < 0) {
				++$high10;
				$tmp27 = $high10 << haxe__Int32_Int32_Impl_::$extraBits;
				$high10 = $tmp27 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x10 = new haxe__Int64____Int64($high10, $low10);
			$tmp28 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x10, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$day1 = $tmp28 + 7 - $wd;
			$offset1 = $this1[1];
			$dateTime1 = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year1, $month1, $day1, 0, 0, 0, 0);
			$this18 = (new _hx_array(array($dateTime1, $offset1)));
			$this19 = $this18[0];
			$b4 = $offset1;
			$high11 = $this19->high - $b4->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low11 = $this19->low - $b4->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this19->low, $b4->low) < 0) {
				--$high11;
				$tmp29 = $high11 << haxe__Int32_Int32_Impl_::$extraBits;
				$high11 = $tmp29 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x11 = new haxe__Int64____Int64($high11, $low11);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x11), $this18[1])));
		}break;
		case 5:{
			$this20 = $this1[0];
			$this21 = $this1[1];
			$high12 = $this20->high + $this21->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low12 = $this20->low + $this21->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low12, $this20->low) < 0) {
				++$high12;
				$tmp30 = $high12 << haxe__Int32_Int32_Impl_::$extraBits;
				$high12 = $tmp30 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x12 = new haxe__Int64____Int64($high12, $low12);
			$year2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x12, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this22 = $this1[0];
			$this23 = $this1[1];
			$high13 = $this22->high + $this23->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low13 = $this22->low + $this23->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low13, $this22->low) < 0) {
				++$high13;
				$tmp31 = $high13 << haxe__Int32_Int32_Impl_::$extraBits;
				$high13 = $tmp31 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x13 = new haxe__Int64____Int64($high13, $low13);
			$tmp32 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x13, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$month2 = $tmp32 + 1;
			$offset2 = $this1[1];
			$dateTime2 = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year2, $month2, 1, 0, 0, 0, 0);
			$this24 = (new _hx_array(array($dateTime2, $offset2)));
			$this25 = $this24[0];
			$b5 = $offset2;
			$high14 = $this25->high - $b5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low14 = $this25->low - $b5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this25->low, $b5->low) < 0) {
				--$high14;
				$tmp33 = $high14 << haxe__Int32_Int32_Impl_::$extraBits;
				$high14 = $tmp33 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x14 = new haxe__Int64____Int64($high14, $low14);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x14), $this24[1])));
		}break;
		case 6:{
			$this26 = $this1[0];
			$this27 = $this1[1];
			$high15 = $this26->high + $this27->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low15 = $this26->low + $this27->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low15, $this26->low) < 0) {
				++$high15;
				$tmp34 = $high15 << haxe__Int32_Int32_Impl_::$extraBits;
				$high15 = $tmp34 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x15 = new haxe__Int64____Int64($high15, $low15);
			$tmp35 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x15, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$year3 = $tmp35 + 1;
			$offset3 = $this1[1];
			$dateTime3 = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year3, 1, 1, 0, 0, 0, 0);
			$this28 = (new _hx_array(array($dateTime3, $offset3)));
			$this29 = $this28[0];
			$b6 = $offset3;
			$high16 = $this29->high - $b6->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low16 = $this29->low - $b6->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this29->low, $b6->low) < 0) {
				--$high16;
				$tmp36 = $high16 << haxe__Int32_Int32_Impl_::$extraBits;
				$high16 = $tmp36 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x16 = new haxe__Int64____Int64($high16, $low16);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x16), $this28[1])));
		}break;
		}
	}
	static function snapPrev($this1, $period) {
		$tmp = $period->index;
		switch($tmp) {
		case 0:{
			$a = thx_Int64s::divFloor($this1[0], thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64);
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
			$al = $a->low & 65535;
			$ah = _hx_shift_right($a->low, 16);
			$bl = $b->low & 65535;
			$bh = _hx_shift_right($b->low, 16);
			$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
			$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
			$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
			$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
			$low = $p00;
			$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp1 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p01 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
				++$high;
				$tmp2 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp3 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p10 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp4 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
			$low = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
				++$high;
				$tmp5 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp6 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x = new haxe__Int64____Int64($high, $low);
			return (new _hx_array(array($x, $this1[1])));
		}break;
		case 1:{
			$a1 = thx_Int64s::divFloor($this1[0], thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64);
			$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
			$al1 = $a1->low & 65535;
			$ah1 = _hx_shift_right($a1->low, 16);
			$bl1 = $b1->low & 65535;
			$bh1 = _hx_shift_right($b1->low, 16);
			$p001 = haxe__Int32_Int32_Impl_::mul($al1, $bl1);
			$p101 = haxe__Int32_Int32_Impl_::mul($ah1, $bl1);
			$p011 = haxe__Int32_Int32_Impl_::mul($al1, $bh1);
			$p111 = haxe__Int32_Int32_Impl_::mul($ah1, $bh1);
			$low1 = $p001;
			$high1 = ($p111 + (_hx_shift_right($p011, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p101, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp7 = $p011 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p011 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $p001 + $p011 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p011) < 0) {
				++$high1;
				$tmp8 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp9 = $p101 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p101 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp10 = $low1 + $p101 << haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $tmp10 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p101) < 0) {
				++$high1;
				$tmp11 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp11 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp12 = $high1 + (haxe__Int32_Int32_Impl_::mul($a1->low, $b1->high) + haxe__Int32_Int32_Impl_::mul($a1->high, $b1->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x1 = new haxe__Int64____Int64($high1, $low1);
			return (new _hx_array(array($x1, $this1[1])));
		}break;
		case 2:{
			$a2 = thx_Int64s::divFloor($this1[0], thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64);
			$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$al2 = $a2->low & 65535;
			$ah2 = _hx_shift_right($a2->low, 16);
			$bl2 = $b2->low & 65535;
			$bh2 = _hx_shift_right($b2->low, 16);
			$p002 = haxe__Int32_Int32_Impl_::mul($al2, $bl2);
			$p102 = haxe__Int32_Int32_Impl_::mul($ah2, $bl2);
			$p012 = haxe__Int32_Int32_Impl_::mul($al2, $bh2);
			$p112 = haxe__Int32_Int32_Impl_::mul($ah2, $bh2);
			$low2 = $p002;
			$high2 = ($p112 + (_hx_shift_right($p012, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p102, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp13 = $p012 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p012 = $tmp13 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $p002 + $p012 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p012) < 0) {
				++$high2;
				$tmp14 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp15 = $p102 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p102 = $tmp15 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp16 = $low2 + $p102 << haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $tmp16 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p102) < 0) {
				++$high2;
				$tmp17 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp17 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp18 = $high2 + (haxe__Int32_Int32_Impl_::mul($a2->low, $b2->high) + haxe__Int32_Int32_Impl_::mul($a2->high, $b2->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp18 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x2 = new haxe__Int64____Int64($high2, $low2);
			return (new _hx_array(array($x2, $this1[1])));
		}break;
		case 3:{
			$this2 = $this1[0];
			$this3 = $this1[1];
			$high3 = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low3 = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low3, $this2->low) < 0) {
				++$high3;
				$tmp19 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
				$high3 = $tmp19 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x3 = new haxe__Int64____Int64($high3, $low3);
			$year = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x3, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this4 = $this1[0];
			$this5 = $this1[1];
			$high4 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low4 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low4, $this4->low) < 0) {
				++$high4;
				$tmp20 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
				$high4 = $tmp20 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x4 = new haxe__Int64____Int64($high4, $low4);
			$month = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x4, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$this6 = $this1[0];
			$this7 = $this1[1];
			$high5 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low5 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low5, $this6->low) < 0) {
				++$high5;
				$tmp21 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
				$high5 = $tmp21 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x5 = new haxe__Int64____Int64($high5, $low5);
			$day = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x5, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$offset = $this1[1];
			$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, 0, 0, 0, 0);
			$this8 = (new _hx_array(array($dateTime, $offset)));
			$this9 = $this8[0];
			$b3 = $offset;
			$high6 = $this9->high - $b3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low6 = $this9->low - $b3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this9->low, $b3->low) < 0) {
				--$high6;
				$tmp22 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
				$high6 = $tmp22 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x6 = new haxe__Int64____Int64($high6, $low6);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x6), $this8[1])));
		}break;
		case 4:{
			$this10 = $this1[0];
			$this11 = $this1[1];
			$high7 = $this10->high + $this11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low7 = $this10->low + $this11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low7, $this10->low) < 0) {
				++$high7;
				$tmp23 = $high7 << haxe__Int32_Int32_Impl_::$extraBits;
				$high7 = $tmp23 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x7 = new haxe__Int64____Int64($high7, $low7);
			$wd = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x7);
			$this12 = $this1[0];
			$this13 = $this1[1];
			$high8 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low8 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low8, $this12->low) < 0) {
				++$high8;
				$tmp24 = $high8 << haxe__Int32_Int32_Impl_::$extraBits;
				$high8 = $tmp24 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x8 = new haxe__Int64____Int64($high8, $low8);
			$year1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x8, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this14 = $this1[0];
			$this15 = $this1[1];
			$high9 = $this14->high + $this15->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low9 = $this14->low + $this15->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low9, $this14->low) < 0) {
				++$high9;
				$tmp25 = $high9 << haxe__Int32_Int32_Impl_::$extraBits;
				$high9 = $tmp25 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x9 = new haxe__Int64____Int64($high9, $low9);
			$month1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x9, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$this16 = $this1[0];
			$this17 = $this1[1];
			$high10 = $this16->high + $this17->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low10 = $this16->low + $this17->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low10, $this16->low) < 0) {
				++$high10;
				$tmp26 = $high10 << haxe__Int32_Int32_Impl_::$extraBits;
				$high10 = $tmp26 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x10 = new haxe__Int64____Int64($high10, $low10);
			$tmp27 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x10, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$day1 = $tmp27 - $wd;
			$offset1 = $this1[1];
			$dateTime1 = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year1, $month1, $day1, 0, 0, 0, 0);
			$this18 = (new _hx_array(array($dateTime1, $offset1)));
			$this19 = $this18[0];
			$b4 = $offset1;
			$high11 = $this19->high - $b4->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low11 = $this19->low - $b4->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this19->low, $b4->low) < 0) {
				--$high11;
				$tmp28 = $high11 << haxe__Int32_Int32_Impl_::$extraBits;
				$high11 = $tmp28 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x11 = new haxe__Int64____Int64($high11, $low11);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x11), $this18[1])));
		}break;
		case 5:{
			$this20 = $this1[0];
			$this21 = $this1[1];
			$high12 = $this20->high + $this21->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low12 = $this20->low + $this21->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low12, $this20->low) < 0) {
				++$high12;
				$tmp29 = $high12 << haxe__Int32_Int32_Impl_::$extraBits;
				$high12 = $tmp29 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x12 = new haxe__Int64____Int64($high12, $low12);
			$year2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x12, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this22 = $this1[0];
			$this23 = $this1[1];
			$high13 = $this22->high + $this23->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low13 = $this22->low + $this23->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low13, $this22->low) < 0) {
				++$high13;
				$tmp30 = $high13 << haxe__Int32_Int32_Impl_::$extraBits;
				$high13 = $tmp30 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x13 = new haxe__Int64____Int64($high13, $low13);
			$month2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x13, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$offset2 = $this1[1];
			$dateTime2 = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year2, $month2, 1, 0, 0, 0, 0);
			$this24 = (new _hx_array(array($dateTime2, $offset2)));
			$this25 = $this24[0];
			$b5 = $offset2;
			$high14 = $this25->high - $b5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low14 = $this25->low - $b5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this25->low, $b5->low) < 0) {
				--$high14;
				$tmp31 = $high14 << haxe__Int32_Int32_Impl_::$extraBits;
				$high14 = $tmp31 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x14 = new haxe__Int64____Int64($high14, $low14);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x14), $this24[1])));
		}break;
		case 6:{
			$this26 = $this1[0];
			$this27 = $this1[1];
			$high15 = $this26->high + $this27->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low15 = $this26->low + $this27->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low15, $this26->low) < 0) {
				++$high15;
				$tmp32 = $high15 << haxe__Int32_Int32_Impl_::$extraBits;
				$high15 = $tmp32 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x15 = new haxe__Int64____Int64($high15, $low15);
			$year3 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x15, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$offset3 = $this1[1];
			$dateTime3 = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year3, 1, 1, 0, 0, 0, 0);
			$this28 = (new _hx_array(array($dateTime3, $offset3)));
			$this29 = $this28[0];
			$b6 = $offset3;
			$high16 = $this29->high - $b6->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low16 = $this29->low - $b6->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this29->low, $b6->low) < 0) {
				--$high16;
				$tmp33 = $high16 << haxe__Int32_Int32_Impl_::$extraBits;
				$high16 = $tmp33 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x16 = new haxe__Int64____Int64($high16, $low16);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x16), $this28[1])));
		}break;
		}
	}
	static function snapTo($this1, $period) {
		$tmp = $period->index;
		switch($tmp) {
		case 0:{
			$a = thx_Int64s::divRound($this1[0], thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64);
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
			$al = $a->low & 65535;
			$ah = _hx_shift_right($a->low, 16);
			$bl = $b->low & 65535;
			$bh = _hx_shift_right($b->low, 16);
			$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
			$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
			$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
			$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
			$low = $p00;
			$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp1 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p01 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
				++$high;
				$tmp2 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp3 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p10 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp4 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
			$low = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
				++$high;
				$tmp5 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp6 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x = new haxe__Int64____Int64($high, $low);
			return (new _hx_array(array($x, $this1[1])));
		}break;
		case 1:{
			$a1 = thx_Int64s::divRound($this1[0], thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64);
			$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
			$al1 = $a1->low & 65535;
			$ah1 = _hx_shift_right($a1->low, 16);
			$bl1 = $b1->low & 65535;
			$bh1 = _hx_shift_right($b1->low, 16);
			$p001 = haxe__Int32_Int32_Impl_::mul($al1, $bl1);
			$p101 = haxe__Int32_Int32_Impl_::mul($ah1, $bl1);
			$p011 = haxe__Int32_Int32_Impl_::mul($al1, $bh1);
			$p111 = haxe__Int32_Int32_Impl_::mul($ah1, $bh1);
			$low1 = $p001;
			$high1 = ($p111 + (_hx_shift_right($p011, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p101, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp7 = $p011 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p011 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $p001 + $p011 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p011) < 0) {
				++$high1;
				$tmp8 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp9 = $p101 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p101 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp10 = $low1 + $p101 << haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $tmp10 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p101) < 0) {
				++$high1;
				$tmp11 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp11 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp12 = $high1 + (haxe__Int32_Int32_Impl_::mul($a1->low, $b1->high) + haxe__Int32_Int32_Impl_::mul($a1->high, $b1->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x1 = new haxe__Int64____Int64($high1, $low1);
			return (new _hx_array(array($x1, $this1[1])));
		}break;
		case 2:{
			$a2 = thx_Int64s::divRound($this1[0], thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64);
			$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$al2 = $a2->low & 65535;
			$ah2 = _hx_shift_right($a2->low, 16);
			$bl2 = $b2->low & 65535;
			$bh2 = _hx_shift_right($b2->low, 16);
			$p002 = haxe__Int32_Int32_Impl_::mul($al2, $bl2);
			$p102 = haxe__Int32_Int32_Impl_::mul($ah2, $bl2);
			$p012 = haxe__Int32_Int32_Impl_::mul($al2, $bh2);
			$p112 = haxe__Int32_Int32_Impl_::mul($ah2, $bh2);
			$low2 = $p002;
			$high2 = ($p112 + (_hx_shift_right($p012, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p102, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp13 = $p012 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p012 = $tmp13 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $p002 + $p012 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p012) < 0) {
				++$high2;
				$tmp14 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp15 = $p102 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p102 = $tmp15 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp16 = $low2 + $p102 << haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $tmp16 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p102) < 0) {
				++$high2;
				$tmp17 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp17 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp18 = $high2 + (haxe__Int32_Int32_Impl_::mul($a2->low, $b2->high) + haxe__Int32_Int32_Impl_::mul($a2->high, $b2->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp18 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x2 = new haxe__Int64____Int64($high2, $low2);
			return (new _hx_array(array($x2, $this1[1])));
		}break;
		case 3:{
			$mod = null;
			$this2 = $this1[0];
			$this3 = $this1[1];
			$high3 = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low3 = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low3, $this2->low) < 0) {
				++$high3;
				$tmp19 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
				$high3 = $tmp19 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x3 = new haxe__Int64____Int64($high3, $low3);
			$tmp20 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x3);
			if($tmp20 >= 12) {
				$mod = 1;
			} else {
				$mod = 0;
			}
			$this4 = $this1[0];
			$this5 = $this1[1];
			$high4 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low4 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low4, $this4->low) < 0) {
				++$high4;
				$tmp21 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
				$high4 = $tmp21 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x4 = new haxe__Int64____Int64($high4, $low4);
			$year = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x4, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this6 = $this1[0];
			$this7 = $this1[1];
			$high5 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low5 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low5, $this6->low) < 0) {
				++$high5;
				$tmp22 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
				$high5 = $tmp22 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x5 = new haxe__Int64____Int64($high5, $low5);
			$month = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x5, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$this8 = $this1[0];
			$this9 = $this1[1];
			$high6 = $this8->high + $this9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low6 = $this8->low + $this9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low6, $this8->low) < 0) {
				++$high6;
				$tmp23 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
				$high6 = $tmp23 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x6 = new haxe__Int64____Int64($high6, $low6);
			$tmp24 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x6, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$day = $tmp24 + $mod;
			$offset = $this1[1];
			$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, 0, 0, 0, 0);
			$this10 = (new _hx_array(array($dateTime, $offset)));
			$this11 = $this10[0];
			$b3 = $offset;
			$high7 = $this11->high - $b3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low7 = $this11->low - $b3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this11->low, $b3->low) < 0) {
				--$high7;
				$tmp25 = $high7 << haxe__Int32_Int32_Impl_::$extraBits;
				$high7 = $tmp25 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x7 = new haxe__Int64____Int64($high7, $low7);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x7), $this10[1])));
		}break;
		case 4:{
			$this12 = $this1[0];
			$this13 = $this1[1];
			$high8 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low8 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low8, $this12->low) < 0) {
				++$high8;
				$tmp26 = $high8 << haxe__Int32_Int32_Impl_::$extraBits;
				$high8 = $tmp26 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x8 = new haxe__Int64____Int64($high8, $low8);
			$wd = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x8);
			$mod1 = null;
			if($wd < 3) {
				$mod1 = -$wd;
			} else {
				if($wd > 3) {
					$mod1 = 7 - $wd;
				} else {
					$this14 = $this1[0];
					$this15 = $this1[1];
					$high9 = $this14->high + $this15->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
					$low9 = $this14->low + $this15->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
					if(haxe__Int32_Int32_Impl_::ucompare($low9, $this14->low) < 0) {
						++$high9;
						$tmp27 = $high9 << haxe__Int32_Int32_Impl_::$extraBits;
						$high9 = $tmp27 >> haxe__Int32_Int32_Impl_::$extraBits;
					}
					$x9 = new haxe__Int64____Int64($high9, $low9);
					$tmp28 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x9);
					if($tmp28 < 12) {
						$mod1 = -$wd;
					} else {
						$mod1 = 7 - $wd;
					}
				}
			}
			$this16 = $this1[0];
			$this17 = $this1[1];
			$high10 = $this16->high + $this17->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low10 = $this16->low + $this17->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low10, $this16->low) < 0) {
				++$high10;
				$tmp29 = $high10 << haxe__Int32_Int32_Impl_::$extraBits;
				$high10 = $tmp29 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x10 = new haxe__Int64____Int64($high10, $low10);
			$year1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x10, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this18 = $this1[0];
			$this19 = $this1[1];
			$high11 = $this18->high + $this19->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low11 = $this18->low + $this19->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low11, $this18->low) < 0) {
				++$high11;
				$tmp30 = $high11 << haxe__Int32_Int32_Impl_::$extraBits;
				$high11 = $tmp30 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x11 = new haxe__Int64____Int64($high11, $low11);
			$month1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x11, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$this20 = $this1[0];
			$this21 = $this1[1];
			$high12 = $this20->high + $this21->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low12 = $this20->low + $this21->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low12, $this20->low) < 0) {
				++$high12;
				$tmp31 = $high12 << haxe__Int32_Int32_Impl_::$extraBits;
				$high12 = $tmp31 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x12 = new haxe__Int64____Int64($high12, $low12);
			$tmp32 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x12, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$day1 = $tmp32 + $mod1;
			$offset1 = $this1[1];
			$dateTime1 = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year1, $month1, $day1, 0, 0, 0, 0);
			$this22 = (new _hx_array(array($dateTime1, $offset1)));
			$this23 = $this22[0];
			$b4 = $offset1;
			$high13 = $this23->high - $b4->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low13 = $this23->low - $b4->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this23->low, $b4->low) < 0) {
				--$high13;
				$tmp33 = $high13 << haxe__Int32_Int32_Impl_::$extraBits;
				$high13 = $tmp33 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x13 = new haxe__Int64____Int64($high13, $low13);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x13), $this22[1])));
		}break;
		case 5:{
			$mod2 = null;
			$this24 = $this1[0];
			$this25 = $this1[1];
			$high14 = $this24->high + $this25->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low14 = $this24->low + $this25->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low14, $this24->low) < 0) {
				++$high14;
				$tmp34 = $high14 << haxe__Int32_Int32_Impl_::$extraBits;
				$high14 = $tmp34 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x14 = new haxe__Int64____Int64($high14, $low14);
			$tmp35 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x14, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$this26 = $this1[0];
			$this27 = $this1[1];
			$high15 = $this26->high + $this27->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low15 = $this26->low + $this27->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low15, $this26->low) < 0) {
				++$high15;
				$tmp36 = $high15 << haxe__Int32_Int32_Impl_::$extraBits;
				$high15 = $tmp36 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x15 = new haxe__Int64____Int64($high15, $low15);
			$tmp37 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x15, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this28 = $this1[0];
			$this29 = $this1[1];
			$high16 = $this28->high + $this29->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low16 = $this28->low + $this29->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low16, $this28->low) < 0) {
				++$high16;
				$tmp38 = $high16 << haxe__Int32_Int32_Impl_::$extraBits;
				$high16 = $tmp38 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x16 = new haxe__Int64____Int64($high16, $low16);
			$tmp39 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x16, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$tmp40 = Math::round(thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($tmp37, $tmp39) / 2);
			if($tmp35 > $tmp40) {
				$mod2 = 1;
			} else {
				$mod2 = 0;
			}
			$this30 = $this1[0];
			$this31 = $this1[1];
			$high17 = $this30->high + $this31->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low17 = $this30->low + $this31->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low17, $this30->low) < 0) {
				++$high17;
				$tmp41 = $high17 << haxe__Int32_Int32_Impl_::$extraBits;
				$high17 = $tmp41 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x17 = new haxe__Int64____Int64($high17, $low17);
			$year2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x17, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$this32 = $this1[0];
			$this33 = $this1[1];
			$high18 = $this32->high + $this33->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low18 = $this32->low + $this33->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low18, $this32->low) < 0) {
				++$high18;
				$tmp42 = $high18 << haxe__Int32_Int32_Impl_::$extraBits;
				$high18 = $tmp42 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x18 = new haxe__Int64____Int64($high18, $low18);
			$tmp43 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x18, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$month2 = $tmp43 + $mod2;
			$offset2 = $this1[1];
			$dateTime2 = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year2, $month2, 1, 0, 0, 0, 0);
			$this34 = (new _hx_array(array($dateTime2, $offset2)));
			$this35 = $this34[0];
			$b5 = $offset2;
			$high19 = $this35->high - $b5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low19 = $this35->low - $b5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this35->low, $b5->low) < 0) {
				--$high19;
				$tmp44 = $high19 << haxe__Int32_Int32_Impl_::$extraBits;
				$high19 = $tmp44 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x19 = new haxe__Int64____Int64($high19, $low19);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x19), $this34[1])));
		}break;
		case 6:{
			$this36 = $this1[0];
			$this37 = $this1[1];
			$high20 = $this36->high + $this37->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low20 = $this36->low + $this37->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low20, $this36->low) < 0) {
				++$high20;
				$tmp45 = $high20 << haxe__Int32_Int32_Impl_::$extraBits;
				$high20 = $tmp45 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x20 = new haxe__Int64____Int64($high20, $low20);
			$year3 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x20, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$offset3 = $this1[1];
			$dateTime3 = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year3, 6, 2, 0, 0, 0, 0);
			$this38 = (new _hx_array(array($dateTime3, $offset3)));
			$this39 = $this38[0];
			$b6 = $offset3;
			$high21 = $this39->high - $b6->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low21 = $this39->low - $b6->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this39->low, $b6->low) < 0) {
				--$high21;
				$tmp46 = $high21 << haxe__Int32_Int32_Impl_::$extraBits;
				$high21 = $tmp46 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x21 = new haxe__Int64____Int64($high21, $low21);
			$other = (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x21), $this38[1])));
			$mod3 = null;
			if(thx__DateTime_DateTime_Impl_::compareTo($this1, $other) > 0) {
				$mod3 = 1;
			} else {
				$mod3 = 0;
			}
			$this40 = $this1[0];
			$this41 = $this1[1];
			$high22 = $this40->high + $this41->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low22 = $this40->low + $this41->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low22, $this40->low) < 0) {
				++$high22;
				$tmp47 = $high22 << haxe__Int32_Int32_Impl_::$extraBits;
				$high22 = $tmp47 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x22 = new haxe__Int64____Int64($high22, $low22);
			$tmp48 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x22, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$year4 = $tmp48 + $mod3;
			$offset4 = $this1[1];
			$dateTime4 = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year4, 1, 1, 0, 0, 0, 0);
			$this42 = (new _hx_array(array($dateTime4, $offset4)));
			$this43 = $this42[0];
			$b7 = $offset4;
			$high23 = $this43->high - $b7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low23 = $this43->low - $b7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($this43->low, $b7->low) < 0) {
				--$high23;
				$tmp49 = $high23 << haxe__Int32_Int32_Impl_::$extraBits;
				$high23 = $tmp49 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x23 = new haxe__Int64____Int64($high23, $low23);
			return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x23), $this42[1])));
		}break;
		}
	}
	static function sameYear($this1, $other) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$this4 = $other[0];
		$this5 = $other[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp2 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		return $tmp1 === $tmp3;
	}
	static function sameMonth($this1, $other) {
		$tmp = thx__DateTime_DateTime_Impl_::sameYear($this1, $other);
		if($tmp) {
			$this2 = $this1[0];
			$this3 = $this1[1];
			$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
				++$high;
				$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x = new haxe__Int64____Int64($high, $low);
			$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$this4 = $other[0];
			$this5 = $other[1];
			$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
				++$high1;
				$tmp3 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x1 = new haxe__Int64____Int64($high1, $low1);
			$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			return $tmp2 === $tmp4;
		} else {
			return false;
		}
	}
	static function sameDay($this1, $other) {
		$tmp = thx__DateTime_DateTime_Impl_::sameMonth($this1, $other);
		if($tmp) {
			$this2 = $this1[0];
			$this3 = $this1[1];
			$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
				++$high;
				$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x = new haxe__Int64____Int64($high, $low);
			$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$this4 = $other[0];
			$this5 = $other[1];
			$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
				++$high1;
				$tmp3 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x1 = new haxe__Int64____Int64($high1, $low1);
			$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			return $tmp2 === $tmp4;
		} else {
			return false;
		}
	}
	static function sameHour($this1, $other) {
		$tmp = thx__DateTime_DateTime_Impl_::sameDay($this1, $other);
		if($tmp) {
			$this2 = $this1[0];
			$this3 = $this1[1];
			$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
				++$high;
				$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x = new haxe__Int64____Int64($high, $low);
			$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x);
			$this4 = $other[0];
			$this5 = $other[1];
			$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
				++$high1;
				$tmp3 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x1 = new haxe__Int64____Int64($high1, $low1);
			$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x1);
			return $tmp2 === $tmp4;
		} else {
			return false;
		}
	}
	static function sameMinute($this1, $other) {
		$tmp = thx__DateTime_DateTime_Impl_::sameHour($this1, $other);
		if($tmp) {
			$this2 = $this1[0];
			$this3 = $this1[1];
			$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
				++$high;
				$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x = new haxe__Int64____Int64($high, $low);
			$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x);
			$this4 = $other[0];
			$this5 = $other[1];
			$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
				++$high1;
				$tmp3 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x1 = new haxe__Int64____Int64($high1, $low1);
			$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x1);
			return $tmp2 === $tmp4;
		} else {
			return false;
		}
	}
	static function sameSecond($this1, $other) {
		$tmp = thx__DateTime_DateTime_Impl_::sameMinute($this1, $other);
		if($tmp) {
			$this2 = $this1[0];
			$this3 = $this1[1];
			$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
				++$high;
				$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x = new haxe__Int64____Int64($high, $low);
			$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x);
			$this4 = $other[0];
			$this5 = $other[1];
			$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
				++$high1;
				$tmp3 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x1 = new haxe__Int64____Int64($high1, $low1);
			$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x1);
			return $tmp2 === $tmp4;
		} else {
			return false;
		}
	}
	static function withYear($this1, $year) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$month = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$this4 = $this1[0];
		$this5 = $this1[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$day = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$this6 = $this1[0];
		$this7 = $this1[1];
		$high2 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $this6->low) < 0) {
			++$high2;
			$tmp2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$hour = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x2);
		$this8 = $this1[0];
		$this9 = $this1[1];
		$high3 = $this8->high + $this9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low3 = $this8->low + $this9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low3, $this8->low) < 0) {
			++$high3;
			$tmp3 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
			$high3 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high3, $low3);
		$minute = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x3);
		$this10 = $this1[0];
		$this11 = $this1[1];
		$high4 = $this10->high + $this11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low4 = $this10->low + $this11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low4, $this10->low) < 0) {
			++$high4;
			$tmp4 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
			$high4 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high4, $low4);
		$second = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x4);
		$this12 = $this1[0];
		$this13 = $this1[1];
		$high5 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low5 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low5, $this12->low) < 0) {
			++$high5;
			$tmp5 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
			$high5 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x5 = new haxe__Int64____Int64($high5, $low5);
		$millisecond = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($x5);
		$offset = $this1[1];
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, $hour, $minute, $second, $millisecond);
		$this14 = (new _hx_array(array($dateTime, $offset)));
		$this15 = $this14[0];
		$b = $offset;
		$high6 = $this15->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low6 = $this15->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this15->low, $b->low) < 0) {
			--$high6;
			$tmp6 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
			$high6 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high6, $low6);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x6), $this14[1])));
	}
	static function withMonth($this1, $month) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$year = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$this4 = $this1[0];
		$this5 = $this1[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$day = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$this6 = $this1[0];
		$this7 = $this1[1];
		$high2 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $this6->low) < 0) {
			++$high2;
			$tmp2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$hour = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x2);
		$this8 = $this1[0];
		$this9 = $this1[1];
		$high3 = $this8->high + $this9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low3 = $this8->low + $this9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low3, $this8->low) < 0) {
			++$high3;
			$tmp3 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
			$high3 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high3, $low3);
		$minute = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x3);
		$this10 = $this1[0];
		$this11 = $this1[1];
		$high4 = $this10->high + $this11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low4 = $this10->low + $this11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low4, $this10->low) < 0) {
			++$high4;
			$tmp4 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
			$high4 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high4, $low4);
		$second = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x4);
		$this12 = $this1[0];
		$this13 = $this1[1];
		$high5 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low5 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low5, $this12->low) < 0) {
			++$high5;
			$tmp5 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
			$high5 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x5 = new haxe__Int64____Int64($high5, $low5);
		$millisecond = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($x5);
		$offset = $this1[1];
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, $hour, $minute, $second, $millisecond);
		$this14 = (new _hx_array(array($dateTime, $offset)));
		$this15 = $this14[0];
		$b = $offset;
		$high6 = $this15->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low6 = $this15->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this15->low, $b->low) < 0) {
			--$high6;
			$tmp6 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
			$high6 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high6, $low6);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x6), $this14[1])));
	}
	static function withDay($this1, $day) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$year = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$this4 = $this1[0];
		$this5 = $this1[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$month = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$this6 = $this1[0];
		$this7 = $this1[1];
		$high2 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $this6->low) < 0) {
			++$high2;
			$tmp2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$hour = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x2);
		$this8 = $this1[0];
		$this9 = $this1[1];
		$high3 = $this8->high + $this9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low3 = $this8->low + $this9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low3, $this8->low) < 0) {
			++$high3;
			$tmp3 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
			$high3 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high3, $low3);
		$minute = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x3);
		$this10 = $this1[0];
		$this11 = $this1[1];
		$high4 = $this10->high + $this11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low4 = $this10->low + $this11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low4, $this10->low) < 0) {
			++$high4;
			$tmp4 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
			$high4 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high4, $low4);
		$second = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x4);
		$this12 = $this1[0];
		$this13 = $this1[1];
		$high5 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low5 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low5, $this12->low) < 0) {
			++$high5;
			$tmp5 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
			$high5 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x5 = new haxe__Int64____Int64($high5, $low5);
		$millisecond = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($x5);
		$offset = $this1[1];
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, $hour, $minute, $second, $millisecond);
		$this14 = (new _hx_array(array($dateTime, $offset)));
		$this15 = $this14[0];
		$b = $offset;
		$high6 = $this15->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low6 = $this15->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this15->low, $b->low) < 0) {
			--$high6;
			$tmp6 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
			$high6 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high6, $low6);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x6), $this14[1])));
	}
	static function withHour($this1, $hour) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$year = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$this4 = $this1[0];
		$this5 = $this1[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$month = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$this6 = $this1[0];
		$this7 = $this1[1];
		$high2 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $this6->low) < 0) {
			++$high2;
			$tmp2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$day = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x2, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$this8 = $this1[0];
		$this9 = $this1[1];
		$high3 = $this8->high + $this9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low3 = $this8->low + $this9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low3, $this8->low) < 0) {
			++$high3;
			$tmp3 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
			$high3 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high3, $low3);
		$minute = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x3);
		$this10 = $this1[0];
		$this11 = $this1[1];
		$high4 = $this10->high + $this11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low4 = $this10->low + $this11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low4, $this10->low) < 0) {
			++$high4;
			$tmp4 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
			$high4 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high4, $low4);
		$second = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x4);
		$this12 = $this1[0];
		$this13 = $this1[1];
		$high5 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low5 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low5, $this12->low) < 0) {
			++$high5;
			$tmp5 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
			$high5 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x5 = new haxe__Int64____Int64($high5, $low5);
		$millisecond = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($x5);
		$offset = $this1[1];
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, $hour, $minute, $second, $millisecond);
		$this14 = (new _hx_array(array($dateTime, $offset)));
		$this15 = $this14[0];
		$b = $offset;
		$high6 = $this15->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low6 = $this15->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this15->low, $b->low) < 0) {
			--$high6;
			$tmp6 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
			$high6 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high6, $low6);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x6), $this14[1])));
	}
	static function withMinute($this1, $minute) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$year = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$this4 = $this1[0];
		$this5 = $this1[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$month = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$this6 = $this1[0];
		$this7 = $this1[1];
		$high2 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $this6->low) < 0) {
			++$high2;
			$tmp2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$day = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x2, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$this8 = $this1[0];
		$this9 = $this1[1];
		$high3 = $this8->high + $this9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low3 = $this8->low + $this9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low3, $this8->low) < 0) {
			++$high3;
			$tmp3 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
			$high3 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high3, $low3);
		$hour = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x3);
		$this10 = $this1[0];
		$this11 = $this1[1];
		$high4 = $this10->high + $this11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low4 = $this10->low + $this11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low4, $this10->low) < 0) {
			++$high4;
			$tmp4 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
			$high4 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high4, $low4);
		$second = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x4);
		$this12 = $this1[0];
		$this13 = $this1[1];
		$high5 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low5 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low5, $this12->low) < 0) {
			++$high5;
			$tmp5 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
			$high5 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x5 = new haxe__Int64____Int64($high5, $low5);
		$millisecond = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($x5);
		$offset = $this1[1];
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, $hour, $minute, $second, $millisecond);
		$this14 = (new _hx_array(array($dateTime, $offset)));
		$this15 = $this14[0];
		$b = $offset;
		$high6 = $this15->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low6 = $this15->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this15->low, $b->low) < 0) {
			--$high6;
			$tmp6 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
			$high6 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high6, $low6);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x6), $this14[1])));
	}
	static function withSecond($this1, $second) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$year = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$this4 = $this1[0];
		$this5 = $this1[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$month = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$this6 = $this1[0];
		$this7 = $this1[1];
		$high2 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $this6->low) < 0) {
			++$high2;
			$tmp2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$day = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x2, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$this8 = $this1[0];
		$this9 = $this1[1];
		$high3 = $this8->high + $this9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low3 = $this8->low + $this9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low3, $this8->low) < 0) {
			++$high3;
			$tmp3 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
			$high3 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high3, $low3);
		$hour = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x3);
		$this10 = $this1[0];
		$this11 = $this1[1];
		$high4 = $this10->high + $this11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low4 = $this10->low + $this11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low4, $this10->low) < 0) {
			++$high4;
			$tmp4 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
			$high4 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high4, $low4);
		$minute = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x4);
		$this12 = $this1[0];
		$this13 = $this1[1];
		$high5 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low5 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low5, $this12->low) < 0) {
			++$high5;
			$tmp5 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
			$high5 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x5 = new haxe__Int64____Int64($high5, $low5);
		$millisecond = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($x5);
		$offset = $this1[1];
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, $hour, $minute, $second, $millisecond);
		$this14 = (new _hx_array(array($dateTime, $offset)));
		$this15 = $this14[0];
		$b = $offset;
		$high6 = $this15->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low6 = $this15->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this15->low, $b->low) < 0) {
			--$high6;
			$tmp6 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
			$high6 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high6, $low6);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x6), $this14[1])));
	}
	static function withMillisecond($this1, $millisecond) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$year = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$this4 = $this1[0];
		$this5 = $this1[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$month = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$this6 = $this1[0];
		$this7 = $this1[1];
		$high2 = $this6->high + $this7->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this6->low + $this7->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $this6->low) < 0) {
			++$high2;
			$tmp2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$day = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x2, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$this8 = $this1[0];
		$this9 = $this1[1];
		$high3 = $this8->high + $this9->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low3 = $this8->low + $this9->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low3, $this8->low) < 0) {
			++$high3;
			$tmp3 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
			$high3 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high3, $low3);
		$hour = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x3);
		$this10 = $this1[0];
		$this11 = $this1[1];
		$high4 = $this10->high + $this11->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low4 = $this10->low + $this11->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low4, $this10->low) < 0) {
			++$high4;
			$tmp4 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
			$high4 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high4, $low4);
		$minute = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x4);
		$this12 = $this1[0];
		$this13 = $this1[1];
		$high5 = $this12->high + $this13->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low5 = $this12->low + $this13->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low5, $this12->low) < 0) {
			++$high5;
			$tmp5 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
			$high5 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x5 = new haxe__Int64____Int64($high5, $low5);
		$second = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x5);
		$offset = $this1[1];
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $month, $day, $hour, $minute, $second, $millisecond);
		$this14 = (new _hx_array(array($dateTime, $offset)));
		$this15 = $this14[0];
		$b = $offset;
		$high6 = $this15->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low6 = $this15->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this15->low, $b->low) < 0) {
			--$high6;
			$tmp6 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
			$high6 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high6, $low6);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x6), $this14[1])));
	}
	static function withOffset($this1, $offset) {
		return (new _hx_array(array($this1[0], $offset)));
	}
	static function add($this1, $time) {
		$this2 = $this1[0];
		$b = $time;
		$high = $this2->high + $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x), $this1[1])));
	}
	static function addTicks($this1, $ticks) {
		$this2 = $this1[0];
		$high = $this2->high + $ticks->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $ticks->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x), $this1[1])));
	}
	static function subtract($this1, $time) {
		$this2 = $this1[0];
		$b = $time;
		$high = $this2->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this2->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x), $this1[1])));
	}
	static function subtractDate($this1, $date) {
		$this2 = $this1[0];
		$this3 = $date[0];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x), $this1[1])))[0];
	}
	static function addDays($this1, $days) {
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1[0], $days, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerDay);
		return (new _hx_array(array($dateTime, $this1[1])));
	}
	static function addHours($this1, $hours) {
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1[0], $hours, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerHour);
		return (new _hx_array(array($dateTime, $this1[1])));
	}
	static function addMilliseconds($this1, $milliseconds) {
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1[0], $milliseconds, 1);
		return (new _hx_array(array($dateTime, $this1[1])));
	}
	static function addMinutes($this1, $minutes) {
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1[0], $minutes, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerMinute);
		return (new _hx_array(array($dateTime, $this1[1])));
	}
	static function addMonths($this1, $months) {
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::addMonths($this1[0], $months);
		return (new _hx_array(array($dateTime, $this1[1])));
	}
	static function addSeconds($this1, $seconds) {
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1[0], $seconds, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerSecond);
		return (new _hx_array(array($dateTime, $this1[1])));
	}
	static function addYears($this1, $years) {
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::addMonths($this1[0], $years * 12);
		return (new _hx_array(array($dateTime, $this1[1])));
	}
	static function compareTo($this1, $other) {
		$tmp = null;
		if(null === $other) {
			$tmp = $this1 === null;
		} else {
			$tmp = false;
		}
		if($tmp) {
			return 0;
		}
		if(null === $this1) {
			return -1;
		} else {
			if(null === $other) {
				return 1;
			}
		}
		return thx_Int64s::compare($this1[0], $other[0]);
	}
	static function equalsTo($this1, $that) {
		$this2 = $this1[0];
		$this3 = $that[0];
		if($this2->high === $this3->high) {
			return $this2->low === $this3->low;
		} else {
			return false;
		}
	}
	static function equals($self, $that) {
		$this1 = $self[0];
		$this2 = $that[0];
		if($this1->high === $this2->high) {
			return $this1->low === $this2->low;
		} else {
			return false;
		}
	}
	static function notEqualsTo($this1, $that) {
		$this2 = $this1[0];
		$this3 = $that[0];
		if(!($this2->high !== $this3->high)) {
			return $this2->low !== $this3->low;
		} else {
			return true;
		}
	}
	static function notEquals($self, $that) {
		$this1 = $self[0];
		$this2 = $that[0];
		if(!($this1->high !== $this2->high)) {
			return $this1->low !== $this2->low;
		} else {
			return true;
		}
	}
	static function nearEqualsTo($this1, $other, $span) {
		$this2 = $other[0];
		$this3 = $this1[0];
		$high = $this2->high - $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low - $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this2->low, $this3->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$ticks = thx_Int64s::abs($x);
		$this4 = thx__Time_Time_Impl_::abs($span);
		$v = $ticks->high - $this4->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp1 = $v !== 0;
		if($tmp1) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($ticks->low, $this4->low);
		}
		$tmp2 = null;
		if($ticks->high < 0) {
			if($this4->high < 0) {
				$tmp2 = $v;
			} else {
				$tmp2 = -1;
			}
		} else {
			if($this4->high >= 0) {
				$tmp2 = $v;
			} else {
				$tmp2 = 1;
			}
		}
		return $tmp2 <= 0;
	}
	static function greaterThan($this1, $that) {
		return thx__DateTime_DateTime_Impl_::compareTo($this1, $that) > 0;
	}
	static function greater($self, $that) {
		return thx__DateTime_DateTime_Impl_::compareTo($self, $that) > 0;
	}
	static function greaterEqualsTo($this1, $that) {
		return thx__DateTime_DateTime_Impl_::compareTo($this1, $that) >= 0;
	}
	static function greaterEquals($self, $that) {
		return thx__DateTime_DateTime_Impl_::compareTo($self, $that) >= 0;
	}
	static function lessTo($this1, $that) {
		return thx__DateTime_DateTime_Impl_::compareTo($this1, $that) < 0;
	}
	static function less($self, $that) {
		return thx__DateTime_DateTime_Impl_::compareTo($self, $that) < 0;
	}
	static function lessEqualsTo($this1, $that) {
		return thx__DateTime_DateTime_Impl_::compareTo($this1, $that) <= 0;
	}
	static function lessEquals($self, $that) {
		return thx__DateTime_DateTime_Impl_::compareTo($self, $that) <= 0;
	}
	static function changeOffset($this1, $newoffset) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$ticks = $x;
		$b = $newoffset;
		$high1 = $ticks->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $ticks->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($ticks->low, $b->low) < 0) {
			--$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		return (new _hx_array(array($x1, $newoffset)));
	}
	static function toUtc($this1) {
		return $this1[0];
	}
	static function clockDateTime($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return $x;
	}
	static function toString($this1) {
		if(null === $this1) {
			return "";
		}
		$abs = (new _hx_array(array(thx_Int64s::abs($this1[0]), $this1[1])));
		$decimals = null;
		$this2 = $abs[0];
		$this3 = $abs[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x);
		if($tmp1 !== 0) {
			$this4 = $abs[0];
			$this5 = $abs[1];
			$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
				++$high1;
				$tmp2 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x1 = new haxe__Int64____Int64($high1, $low1);
			$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x1);
			$tmp4 = thx_Ints::lpad($tmp3, "0", 7);
			$tmp5 = thx_Strings::trimCharsRight($tmp4, ")");
			$decimals = "." . _hx_string_or_null($tmp5);
		} else {
			$decimals = "";
		}
		$this6 = $this1[0];
		$b = thx_Int64s::$zero;
		$v = $this6->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp6 = $v !== 0;
		if($tmp6) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this6->low, $b->low);
		}
		$tmp7 = null;
		if($this6->high < 0) {
			if($b->high < 0) {
				$tmp7 = $v;
			} else {
				$tmp7 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp7 = $v;
			} else {
				$tmp7 = 1;
			}
		}
		$isneg = $tmp7 < 0;
		$tmp8 = null;
		if($isneg) {
			$tmp8 = "-";
		} else {
			$tmp8 = "";
		}
		$this7 = $abs[0];
		$this8 = $abs[1];
		$high2 = $this7->high + $this8->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this7->low + $this8->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $this7->low) < 0) {
			++$high2;
			$tmp9 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$tmp10 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x2, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp11 = "" . _hx_string_rec($tmp10, "") . "-";
		$this9 = $abs[0];
		$this10 = $abs[1];
		$high3 = $this9->high + $this10->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low3 = $this9->low + $this10->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low3, $this9->low) < 0) {
			++$high3;
			$tmp12 = $high3 << haxe__Int32_Int32_Impl_::$extraBits;
			$high3 = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high3, $low3);
		$tmp13 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x3, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$tmp14 = thx_Ints::lpad($tmp13, "0", 2);
		$tmp15 = _hx_string_or_null($tmp11) . _hx_string_or_null($tmp14) . "-";
		$this11 = $abs[0];
		$this12 = $abs[1];
		$high4 = $this11->high + $this12->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low4 = $this11->low + $this12->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low4, $this11->low) < 0) {
			++$high4;
			$tmp16 = $high4 << haxe__Int32_Int32_Impl_::$extraBits;
			$high4 = $tmp16 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high4, $low4);
		$tmp17 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x4, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$tmp18 = thx_Ints::lpad($tmp17, "0", 2);
		$tmp19 = _hx_string_or_null($tmp15) . _hx_string_or_null($tmp18) . "T";
		$this13 = $abs[0];
		$this14 = $abs[1];
		$high5 = $this13->high + $this14->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low5 = $this13->low + $this14->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low5, $this13->low) < 0) {
			++$high5;
			$tmp20 = $high5 << haxe__Int32_Int32_Impl_::$extraBits;
			$high5 = $tmp20 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x5 = new haxe__Int64____Int64($high5, $low5);
		$tmp21 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x5);
		$tmp22 = thx_Ints::lpad($tmp21, "0", 2);
		$tmp23 = _hx_string_or_null($tmp19) . _hx_string_or_null($tmp22) . ":";
		$this15 = $abs[0];
		$this16 = $abs[1];
		$high6 = $this15->high + $this16->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low6 = $this15->low + $this16->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low6, $this15->low) < 0) {
			++$high6;
			$tmp24 = $high6 << haxe__Int32_Int32_Impl_::$extraBits;
			$high6 = $tmp24 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high6, $low6);
		$tmp25 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x6);
		$tmp26 = thx_Ints::lpad($tmp25, "0", 2);
		$tmp27 = _hx_string_or_null($tmp23) . _hx_string_or_null($tmp26) . ":";
		$this17 = $abs[0];
		$this18 = $abs[1];
		$high7 = $this17->high + $this18->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low7 = $this17->low + $this18->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low7, $this17->low) < 0) {
			++$high7;
			$tmp28 = $high7 << haxe__Int32_Int32_Impl_::$extraBits;
			$high7 = $tmp28 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x7 = new haxe__Int64____Int64($high7, $low7);
		$tmp29 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x7);
		$tmp30 = thx_Ints::lpad($tmp29, "0", 2);
		$tmp31 = _hx_string_or_null($tmp27) . _hx_string_or_null($tmp30) . _hx_string_or_null($decimals);
		$tmp32 = thx__Time_Time_Impl_::toGmtString($this1[1]);
		return _hx_string_or_null($tmp8) . _hx_string_or_null((_hx_string_or_null($tmp31) . _hx_string_or_null($tmp32)));
	}
	static function get_utc($this1) {
		return $this1[0];
	}
	static function get_offset($this1) {
		return $this1[1];
	}
	static function get_year($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
	}
	static function get_month($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
	}
	static function get_day($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
	}
	static function get_hour($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($x);
	}
	static function get_minute($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($x);
	}
	static function get_dayOfWeek($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($x);
	}
	static function get_dayOfYear($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY_OF_YEAR);
	}
	static function get_millisecond($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($x);
	}
	static function get_microsecond($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::get_microsecond($x);
	}
	static function get_tickInSecond($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($x);
	}
	static function get_second($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($x);
	}
	static function get_timeOfDay($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$ticks = $x;
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
		$ticks1 = haxe__Int64_Int64_Impl_::divMod($ticks, $b)->modulus;
		return $ticks1;
	}
	static function get_isInLeapYear($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::isLeapYear($tmp1);
	}
	static function get_monthDays($this1) {
		$this2 = $this1[0];
		$this3 = $this1[1];
		$high = $this2->high + $this3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low + $this3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this2->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$this4 = $this1[0];
		$this5 = $this1[1];
		$high1 = $this4->high + $this5->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low + $this5->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this4->low) < 0) {
			++$high1;
			$tmp2 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($x1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($tmp1, $tmp3);
	}
	static function self($this1) {
		return $this1;
	}
	static $__properties__ = array("get_timeOfDay" => "get_timeOfDay","get_dayOfYear" => "get_dayOfYear","get_dayOfWeek" => "get_dayOfWeek","get_monthDays" => "get_monthDays","get_isInLeapYear" => "get_isInLeapYear","get_tickInSecond" => "get_tickInSecond","get_microsecond" => "get_microsecond","get_millisecond" => "get_millisecond","get_second" => "get_second","get_minute" => "get_minute","get_hour" => "get_hour","get_day" => "get_day","get_month" => "get_month","get_year" => "get_year","get_offset" => "get_offset","get_utc" => "get_utc");
	function __toString() { return 'thx._DateTime.DateTime_Impl_'; }
}
