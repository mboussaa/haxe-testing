<?php

// Generated by Haxe 3.3.0
class thx__DateTimeUtc_DateTimeUtc_Impl_ {
	public function __construct(){}
	static $millisPerSecond = 1000;
	static $millisPerMinute;
	static $millisPerHour;
	static $millisPerDay;
	static $tenI64;
	static $hundredI64;
	static $thousandI64;
	static $tenThousandI64;
	static $millionI64;
	static $ticksPerMicrosecondI64;
	static $ticksPerMillisecond = 10000;
	static $ticksPerMillisecondI64;
	static $ticksPerSecondI64;
	static $ticksPerMinuteI64;
	static $ticksPerHourI64;
	static $ticksPerDayI64;
	static $daysPerYear = 365;
	static $daysPer4Years;
	static $daysPer100Years;
	static $daysPer400Years;
	static $daysTo1970;
	static $unixEpochTicks;
	static $DATE_PART_YEAR = 0;
	static $DATE_PART_DAY_OF_YEAR = 1;
	static $DATE_PART_MONTH = 2;
	static $DATE_PART_DAY = 3;
	static $daysToMonth365;
	static $daysToMonth366;
	static function now() {
		$tmp = Date::now();
		return thx__DateTimeUtc_DateTimeUtc_Impl_::fromDate($tmp);
	}
	static function fromInt64($ticks) {
		return $ticks;
	}
	static function fromDate($date) {
		$tmp = $date->getTime();
		return thx__DateTimeUtc_DateTimeUtc_Impl_::fromTime($tmp);
	}
	static function fromTime($timestamp) {
		$a = thx_Int64s::fromFloat($timestamp);
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$al = $a->low & 65535;
		$ah = _hx_shift_right($a->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x = new haxe__Int64____Int64($high, $low);
		$a1 = $x;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$unixEpochTicks;
		$high1 = $a1->high + $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $a1->low + $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $a1->low) < 0) {
			++$high1;
			$tmp6 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		return $x1;
	}
	static function fromString($s) {
		$this1 = thx__DateTime_DateTime_Impl_::fromString($s);
		return $this1[0];
	}
	static function compare($a, $b) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::compareTo($a, $b);
	}
	static function create($year, $month, $day, $hour = null, $minute = null, $second = null, $millisecond = null) {
		if($millisecond === null) {
			$millisecond = 0;
		}
		if($second === null) {
			$second = 0;
		}
		if($minute === null) {
			$minute = 0;
		}
		if($hour === null) {
			$hour = 0;
		}
		$tmp = Math::floor($millisecond / 1000);
		$second += $tmp;
		$millisecond = _hx_mod($millisecond, 1000);
		$tmp1 = $millisecond < 0;
		if($tmp1) {
			$millisecond += 1000;
		}
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::dateToTicks($year, $month, $day);
		$b = thx__Time_Time_Impl_::timeToTicks($hour, $minute, $second);
		$high = $a->high + $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $a->low + $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $a->low) < 0) {
			++$high;
			$tmp2 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$a1 = $x;
		$x1 = new haxe__Int64____Int64($millisecond >> 31, $millisecond);
		$a2 = $x1;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$al = $a2->low & 65535;
		$ah = _hx_shift_right($a2->low, 16);
		$bl = $b1->low & 65535;
		$bh = _hx_shift_right($b1->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low1 = $p00;
		$high1 = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $p01) < 0) {
			++$high1;
			$tmp4 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp6 = $low1 + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $p10) < 0) {
			++$high1;
			$tmp7 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp8 = $high1 + (haxe__Int32_Int32_Impl_::mul($a2->low, $b1->high) + haxe__Int32_Int32_Impl_::mul($a2->high, $b1->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high1 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x2 = new haxe__Int64____Int64($high1, $low1);
		$b2 = $x2;
		$high2 = $a1->high + $b2->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $a1->low + $b2->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $a1->low) < 0) {
			++$high2;
			$tmp9 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high2, $low2);
		return $x3;
	}
	static function isLeapYear($year) {
		if(_hx_mod($year, 4) === 0) {
			if(_hx_mod($year, 100) === 0) {
				return _hx_mod($year, 400) === 0;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	static function dateToTicks($year, $month, $day) {
		$fixMonthYear = array(new _hx_lambda(array(&$month, &$year), "thx__DateTimeUtc_DateTimeUtc_Impl__0"), 'execute');
		while($day < 0) {
			--$month;
			call_user_func($fixMonthYear);
			$day += thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($year, $month);
		}
		call_user_func($fixMonthYear);
		$days = null;
		while(true) {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($year, $month);
			if(!($day > $days)) {
				break;
			}
			++$month;
			call_user_func($fixMonthYear);
			$day -= $days;
		}
		if($day === 0) {
			--$month;
			call_user_func($fixMonthYear);
			$day = thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($year, $month);
		}
		call_user_func($fixMonthYear);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::rawDateToTicks($year, $month, $day);
	}
	static function rawDateToTicks($year, $month, $day) {
		$days = null;
		if(thx__DateTimeUtc_DateTimeUtc_Impl_::isLeapYear($year)) {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth366;
		} else {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth365;
		}
		$tmp = null;
		if($day >= 1) {
			$tmp = $day <= $days->a[$month] - $days[$month - 1];
		} else {
			$tmp = false;
		}
		if($tmp) {
			$y = $year - 1;
			$tmp1 = $y * 365;
			$tmp2 = Std::int($y / 4);
			$tmp3 = $tmp1 + $tmp2;
			$tmp4 = Std::int($y / 100);
			$tmp5 = $tmp3 - $tmp4;
			$tmp6 = Std::int($y / 400);
			$n = $tmp5 + $tmp6 + $days[$month - 1] + $day - 1;
			$x = new haxe__Int64____Int64($n >> 31, $n);
			$a = $x;
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
			$al = $a->low & 65535;
			$ah = _hx_shift_right($a->low, 16);
			$bl = $b->low & 65535;
			$bh = _hx_shift_right($b->low, 16);
			$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
			$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
			$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
			$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
			$low = $p00;
			$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp7 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p01 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
				++$high;
				$tmp8 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp9 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p10 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp10 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
			$low = $tmp10 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
				++$high;
				$tmp11 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp11 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp12 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x1 = new haxe__Int64____Int64($high, $low);
			return $x1;
		}
		throw new HException(new thx_Error("bad year/month/day " . _hx_string_rec($year, "") . "/" . _hx_string_rec($month, "") . "/" . _hx_string_rec($day, ""), null, _hx_anonymous(array("fileName" => "DateTimeUtc.hx", "lineNumber" => 167, "className" => "thx._DateTimeUtc.DateTimeUtc_Impl_", "methodName" => "rawDateToTicks"))));
	}
	static function daysInMonth($year, $month) {
		$days = null;
		if(thx__DateTimeUtc_DateTimeUtc_Impl_::isLeapYear($year)) {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth366;
		} else {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth365;
		}
		return $days->a[$month] - $days[$month - 1];
	}
	static function daysRange($start, $end) {
		$a = $end;
		$b = $start;
		$v = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low);
		}
		$tmp1 = null;
		if($a->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		if($tmp1 < 0) {
			return (new _hx_array(array()));
		}
		$days = (new _hx_array(array()));
		while(true) {
			$tmp2 = !(!thx__DateTimeUtc_DateTimeUtc_Impl_::sameDay($start, $end));
			if($tmp2) {
				break;
			}
			$days->push($start);
			$start = thx__DateTimeUtc_DateTimeUtc_Impl_::jump($start, thx_TimePeriod::$Day, 1);
			unset($tmp2);
		}
		$days->push($end);
		return $days;
	}
	static function getDatePart($this1, $part) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
		$x = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		if($x->high !== $x->low >> 31) {
			throw new HException("Overflow");
		}
		$n = $x->low;
		$tmp = $n / thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer400Years;
		$y400 = Std::int($tmp);
		$n -= $y400 * thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer400Years;
		$tmp1 = $n / thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer100Years;
		$y100 = Std::int($tmp1);
		$tmp2 = $y100 === 4;
		if($tmp2) {
			$y100 = 3;
		}
		$n -= $y100 * thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer100Years;
		$tmp3 = $n / thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer4Years;
		$y4 = Std::int($tmp3);
		$n -= $y4 * thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer4Years;
		$tmp4 = $n / thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPerYear;
		$y1 = Std::int($tmp4);
		$tmp5 = $y1 === 4;
		if($tmp5) {
			$y1 = 3;
		}
		if($part === thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR) {
			return $y400 * 400 + $y100 * 100 + $y4 * 4 + $y1 + 1;
		}
		$n -= $y1 * thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPerYear;
		if($part === thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY_OF_YEAR) {
			return $n + 1;
		}
		$leapYear = null;
		if($y1 === 3) {
			if($y4 === 24) {
				$leapYear = $y100 === 3;
			} else {
				$leapYear = true;
			}
		} else {
			$leapYear = false;
		}
		$days = null;
		if($leapYear) {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth366;
		} else {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth365;
		}
		$m = $n >> 6;
		while($n >= $days[$m]) {
			++$m;
		}
		if($part === thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH) {
			return $m;
		}
		return $n - $days[$m - 1] + 1;
	}
	static function _new($ticks) {
		return $ticks;
	}
	static function min($this1, $other) {
		if(thx__DateTimeUtc_DateTimeUtc_Impl_::compareTo($this1, $other) <= 0) {
			return $this1;
		} else {
			return $other;
		}
	}
	static function max($this1, $other) {
		if(thx__DateTimeUtc_DateTimeUtc_Impl_::compareTo($this1, $other) >= 0) {
			return $this1;
		} else {
			return $other;
		}
	}
	static function jump($this1, $period, $amount) {
		$sec = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($this1);
		$min = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($this1);
		$hr = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this1);
		$day = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$mon = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$yr = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		switch($period->index) {
		case 0:{
			$sec += $amount;
		}break;
		case 1:{
			$min += $amount;
		}break;
		case 2:{
			$hr += $amount;
		}break;
		case 3:{
			$day += $amount;
		}break;
		case 4:{
			$day += $amount * 7;
		}break;
		case 5:{
			$mon += $amount;
		}break;
		case 6:{
			$yr += $amount;
		}break;
		}
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($this1);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::create($yr, $mon, $day, $hr, $min, $sec, $tmp);
	}
	static function daysInThisMonth($this1) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($tmp, $tmp1);
	}
	static function prevYear($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Year, -1);
	}
	static function nextYear($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Year, 1);
	}
	static function prevMonth($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Month, -1);
	}
	static function nextMonth($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Month, 1);
	}
	static function prevWeek($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Week, -1);
	}
	static function nextWeek($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Week, 1);
	}
	static function prevDay($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Day, -1);
	}
	static function nextDay($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Day, 1);
	}
	static function prevHour($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Hour, -1);
	}
	static function nextHour($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Hour, 1);
	}
	static function prevMinute($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Minute, -1);
	}
	static function nextMinute($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Minute, 1);
	}
	static function prevSecond($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Second, -1);
	}
	static function nextSecond($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Second, 1);
	}
	static function snapToWeekDay($this1, $weekday, $firstDayOfWk = null) {
		if($firstDayOfWk === null) {
			$firstDayOfWk = 0;
		}
		$d = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($this1);
		$s = $weekday;
		$tmp = $s < $firstDayOfWk;
		if($tmp) {
			$s += 7;
		}
		$tmp1 = $d < $firstDayOfWk;
		if($tmp1) {
			$d += 7;
		}
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Day, $s - $d);
	}
	static function snapNextWeekDay($this1, $weekday) {
		$d = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($this1);
		$s = $weekday;
		$tmp = $s < $d;
		if($tmp) {
			$s += 7;
		}
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Day, $s - $d);
	}
	static function snapPrevWeekDay($this1, $weekday) {
		$d = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($this1);
		$s = $weekday;
		$tmp = $s > $d;
		if($tmp) {
			$s -= 7;
		}
		return thx__DateTimeUtc_DateTimeUtc_Impl_::jump($this1, thx_TimePeriod::$Day, $s - $d);
	}
	static function snapNext($this1, $period) {
		$tmp = $period->index;
		switch($tmp) {
		case 0:{
			$a = thx_Int64s::divCeil($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64);
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
			$al = $a->low & 65535;
			$ah = _hx_shift_right($a->low, 16);
			$bl = $b->low & 65535;
			$bh = _hx_shift_right($b->low, 16);
			$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
			$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
			$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
			$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
			$low = $p00;
			$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp1 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p01 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
				++$high;
				$tmp2 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp3 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p10 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp4 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
			$low = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
				++$high;
				$tmp5 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp6 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x = new haxe__Int64____Int64($high, $low);
			return $x;
		}break;
		case 1:{
			$a1 = thx_Int64s::divCeil($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64);
			$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
			$al1 = $a1->low & 65535;
			$ah1 = _hx_shift_right($a1->low, 16);
			$bl1 = $b1->low & 65535;
			$bh1 = _hx_shift_right($b1->low, 16);
			$p001 = haxe__Int32_Int32_Impl_::mul($al1, $bl1);
			$p101 = haxe__Int32_Int32_Impl_::mul($ah1, $bl1);
			$p011 = haxe__Int32_Int32_Impl_::mul($al1, $bh1);
			$p111 = haxe__Int32_Int32_Impl_::mul($ah1, $bh1);
			$low1 = $p001;
			$high1 = ($p111 + (_hx_shift_right($p011, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p101, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp7 = $p011 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p011 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $p001 + $p011 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p011) < 0) {
				++$high1;
				$tmp8 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp9 = $p101 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p101 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp10 = $low1 + $p101 << haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $tmp10 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p101) < 0) {
				++$high1;
				$tmp11 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp11 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp12 = $high1 + (haxe__Int32_Int32_Impl_::mul($a1->low, $b1->high) + haxe__Int32_Int32_Impl_::mul($a1->high, $b1->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x1 = new haxe__Int64____Int64($high1, $low1);
			return $x1;
		}break;
		case 2:{
			$a2 = thx_Int64s::divCeil($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64);
			$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$al2 = $a2->low & 65535;
			$ah2 = _hx_shift_right($a2->low, 16);
			$bl2 = $b2->low & 65535;
			$bh2 = _hx_shift_right($b2->low, 16);
			$p002 = haxe__Int32_Int32_Impl_::mul($al2, $bl2);
			$p102 = haxe__Int32_Int32_Impl_::mul($ah2, $bl2);
			$p012 = haxe__Int32_Int32_Impl_::mul($al2, $bh2);
			$p112 = haxe__Int32_Int32_Impl_::mul($ah2, $bh2);
			$low2 = $p002;
			$high2 = ($p112 + (_hx_shift_right($p012, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p102, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp13 = $p012 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p012 = $tmp13 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $p002 + $p012 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p012) < 0) {
				++$high2;
				$tmp14 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp15 = $p102 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p102 = $tmp15 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp16 = $low2 + $p102 << haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $tmp16 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p102) < 0) {
				++$high2;
				$tmp17 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp17 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp18 = $high2 + (haxe__Int32_Int32_Impl_::mul($a2->low, $b2->high) + haxe__Int32_Int32_Impl_::mul($a2->high, $b2->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp18 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x2 = new haxe__Int64____Int64($high2, $low2);
			return $x2;
		}break;
		case 3:{
			$tmp19 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp20 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$tmp21 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp19, $tmp20, $tmp21 + 1, 0, 0, 0, null);
		}break;
		case 4:{
			$wd = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($this1);
			$tmp22 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp23 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$tmp24 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp22, $tmp23, $tmp24 + 7 - $wd, 0, 0, 0, null);
		}break;
		case 5:{
			$tmp25 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp26 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp25, $tmp26 + 1, 1, 0, 0, 0, null);
		}break;
		case 6:{
			$tmp27 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp27 + 1, 1, 1, 0, 0, 0, null);
		}break;
		}
	}
	static function snapPrev($this1, $period) {
		$tmp = $period->index;
		switch($tmp) {
		case 0:{
			$a = thx_Int64s::divFloor($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64);
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
			$al = $a->low & 65535;
			$ah = _hx_shift_right($a->low, 16);
			$bl = $b->low & 65535;
			$bh = _hx_shift_right($b->low, 16);
			$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
			$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
			$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
			$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
			$low = $p00;
			$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp1 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p01 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
				++$high;
				$tmp2 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp3 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p10 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp4 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
			$low = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
				++$high;
				$tmp5 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp6 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x = new haxe__Int64____Int64($high, $low);
			return $x;
		}break;
		case 1:{
			$a1 = thx_Int64s::divFloor($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64);
			$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
			$al1 = $a1->low & 65535;
			$ah1 = _hx_shift_right($a1->low, 16);
			$bl1 = $b1->low & 65535;
			$bh1 = _hx_shift_right($b1->low, 16);
			$p001 = haxe__Int32_Int32_Impl_::mul($al1, $bl1);
			$p101 = haxe__Int32_Int32_Impl_::mul($ah1, $bl1);
			$p011 = haxe__Int32_Int32_Impl_::mul($al1, $bh1);
			$p111 = haxe__Int32_Int32_Impl_::mul($ah1, $bh1);
			$low1 = $p001;
			$high1 = ($p111 + (_hx_shift_right($p011, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p101, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp7 = $p011 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p011 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $p001 + $p011 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p011) < 0) {
				++$high1;
				$tmp8 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp9 = $p101 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p101 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp10 = $low1 + $p101 << haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $tmp10 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p101) < 0) {
				++$high1;
				$tmp11 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp11 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp12 = $high1 + (haxe__Int32_Int32_Impl_::mul($a1->low, $b1->high) + haxe__Int32_Int32_Impl_::mul($a1->high, $b1->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x1 = new haxe__Int64____Int64($high1, $low1);
			return $x1;
		}break;
		case 2:{
			$a2 = thx_Int64s::divFloor($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64);
			$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$al2 = $a2->low & 65535;
			$ah2 = _hx_shift_right($a2->low, 16);
			$bl2 = $b2->low & 65535;
			$bh2 = _hx_shift_right($b2->low, 16);
			$p002 = haxe__Int32_Int32_Impl_::mul($al2, $bl2);
			$p102 = haxe__Int32_Int32_Impl_::mul($ah2, $bl2);
			$p012 = haxe__Int32_Int32_Impl_::mul($al2, $bh2);
			$p112 = haxe__Int32_Int32_Impl_::mul($ah2, $bh2);
			$low2 = $p002;
			$high2 = ($p112 + (_hx_shift_right($p012, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p102, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp13 = $p012 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p012 = $tmp13 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $p002 + $p012 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p012) < 0) {
				++$high2;
				$tmp14 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp15 = $p102 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p102 = $tmp15 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp16 = $low2 + $p102 << haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $tmp16 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p102) < 0) {
				++$high2;
				$tmp17 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp17 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp18 = $high2 + (haxe__Int32_Int32_Impl_::mul($a2->low, $b2->high) + haxe__Int32_Int32_Impl_::mul($a2->high, $b2->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp18 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x2 = new haxe__Int64____Int64($high2, $low2);
			return $x2;
		}break;
		case 3:{
			$tmp19 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp20 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$tmp21 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp19, $tmp20, $tmp21, 0, 0, 0, null);
		}break;
		case 4:{
			$wd = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($this1);
			$tmp22 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp23 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$tmp24 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp22, $tmp23, $tmp24 - $wd, 0, 0, 0, null);
		}break;
		case 5:{
			$tmp25 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp26 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp25, $tmp26, 1, 0, 0, 0, null);
		}break;
		case 6:{
			$tmp27 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp27, 1, 1, 0, 0, 0, null);
		}break;
		}
	}
	static function snapTo($this1, $period) {
		$tmp = $period->index;
		switch($tmp) {
		case 0:{
			$a = thx_Int64s::divRound($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64);
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
			$al = $a->low & 65535;
			$ah = _hx_shift_right($a->low, 16);
			$bl = $b->low & 65535;
			$bh = _hx_shift_right($b->low, 16);
			$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
			$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
			$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
			$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
			$low = $p00;
			$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp1 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p01 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
				++$high;
				$tmp2 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp3 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p10 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp4 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
			$low = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
				++$high;
				$tmp5 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp6 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x = new haxe__Int64____Int64($high, $low);
			return $x;
		}break;
		case 1:{
			$a1 = thx_Int64s::divRound($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64);
			$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
			$al1 = $a1->low & 65535;
			$ah1 = _hx_shift_right($a1->low, 16);
			$bl1 = $b1->low & 65535;
			$bh1 = _hx_shift_right($b1->low, 16);
			$p001 = haxe__Int32_Int32_Impl_::mul($al1, $bl1);
			$p101 = haxe__Int32_Int32_Impl_::mul($ah1, $bl1);
			$p011 = haxe__Int32_Int32_Impl_::mul($al1, $bh1);
			$p111 = haxe__Int32_Int32_Impl_::mul($ah1, $bh1);
			$low1 = $p001;
			$high1 = ($p111 + (_hx_shift_right($p011, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p101, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp7 = $p011 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p011 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $p001 + $p011 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p011) < 0) {
				++$high1;
				$tmp8 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp9 = $p101 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p101 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp10 = $low1 + $p101 << haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $tmp10 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $p101) < 0) {
				++$high1;
				$tmp11 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
				$high1 = $tmp11 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp12 = $high1 + (haxe__Int32_Int32_Impl_::mul($a1->low, $b1->high) + haxe__Int32_Int32_Impl_::mul($a1->high, $b1->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x1 = new haxe__Int64____Int64($high1, $low1);
			return $x1;
		}break;
		case 2:{
			$a2 = thx_Int64s::divRound($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64);
			$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
			$al2 = $a2->low & 65535;
			$ah2 = _hx_shift_right($a2->low, 16);
			$bl2 = $b2->low & 65535;
			$bh2 = _hx_shift_right($b2->low, 16);
			$p002 = haxe__Int32_Int32_Impl_::mul($al2, $bl2);
			$p102 = haxe__Int32_Int32_Impl_::mul($ah2, $bl2);
			$p012 = haxe__Int32_Int32_Impl_::mul($al2, $bh2);
			$p112 = haxe__Int32_Int32_Impl_::mul($ah2, $bh2);
			$low2 = $p002;
			$high2 = ($p112 + (_hx_shift_right($p012, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p102, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp13 = $p012 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p012 = $tmp13 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $p002 + $p012 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p012) < 0) {
				++$high2;
				$tmp14 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp14 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp15 = $p102 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p102 = $tmp15 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp16 = $low2 + $p102 << haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $tmp16 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $p102) < 0) {
				++$high2;
				$tmp17 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
				$high2 = $tmp17 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp18 = $high2 + (haxe__Int32_Int32_Impl_::mul($a2->low, $b2->high) + haxe__Int32_Int32_Impl_::mul($a2->high, $b2->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp18 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x2 = new haxe__Int64____Int64($high2, $low2);
			return $x2;
		}break;
		case 3:{
			$mod = null;
			$tmp19 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this1);
			if($tmp19 >= 12) {
				$mod = 1;
			} else {
				$mod = 0;
			}
			$tmp20 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp21 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$tmp22 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp20, $tmp21, $tmp22 + $mod, 0, 0, 0, null);
		}break;
		case 4:{
			$wd = thx__DateTimeUtc_DateTimeUtc_Impl_::get_dayOfWeek($this1);
			$mod1 = null;
			if($wd < 3) {
				$mod1 = -$wd;
			} else {
				if($wd > 3) {
					$mod1 = 7 - $wd;
				} else {
					$tmp23 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this1);
					if($tmp23 < 12) {
						$mod1 = -$wd;
					} else {
						$mod1 = 7 - $wd;
					}
				}
			}
			$tmp24 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp25 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$tmp26 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp24, $tmp25, $tmp26 + $mod1, 0, 0, 0, null);
		}break;
		case 5:{
			$mod2 = null;
			$tmp27 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$tmp28 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp29 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$tmp30 = Math::round(thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($tmp28, $tmp29) / 2);
			if($tmp27 > $tmp30) {
				$mod2 = 1;
			} else {
				$mod2 = 0;
			}
			$tmp31 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$tmp32 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp31, $tmp32 + $mod2, 1, 0, 0, 0, null);
		}break;
		case 6:{
			$mod3 = null;
			$tmp33 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			$that = thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp33, 6, 2, 0, 0, 0, null);
			$b3 = $that;
			$v = $this1->high - $b3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp34 = $v !== 0;
			if($tmp34) {
				$v = $v;
			} else {
				$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b3->low);
			}
			$tmp35 = null;
			if($this1->high < 0) {
				if($b3->high < 0) {
					$tmp35 = $v;
				} else {
					$tmp35 = -1;
				}
			} else {
				if($b3->high >= 0) {
					$tmp35 = $v;
				} else {
					$tmp35 = 1;
				}
			}
			if($tmp35 > 0) {
				$mod3 = 1;
			} else {
				$mod3 = 0;
			}
			$tmp36 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
			return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp36 + $mod3, 1, 1, 0, 0, 0, null);
		}break;
		}
	}
	static function sameYear($this1, $other) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($other, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		return $tmp === $tmp1;
	}
	static function sameMonth($this1, $other) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::sameYear($this1, $other);
		if($tmp) {
			$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($other, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
			return $tmp1 === $tmp2;
		} else {
			return false;
		}
	}
	static function sameDay($this1, $other) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::sameMonth($this1, $other);
		if($tmp) {
			$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($other, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
			return $tmp1 === $tmp2;
		} else {
			return false;
		}
	}
	static function sameHour($this1, $other) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::sameDay($this1, $other);
		if($tmp) {
			$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this1);
			$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($other);
			return $tmp1 === $tmp2;
		} else {
			return false;
		}
	}
	static function sameMinute($this1, $other) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::sameHour($this1, $other);
		if($tmp) {
			$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($this1);
			$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($other);
			return $tmp1 === $tmp2;
		} else {
			return false;
		}
	}
	static function sameSecond($this1, $other) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::sameMinute($this1, $other);
		if($tmp) {
			$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($this1);
			$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($other);
			return $tmp1 === $tmp2;
		} else {
			return false;
		}
	}
	static function withYear($this1, $year) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this1);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($this1);
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($this1);
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($this1);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::create($year, $tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5);
	}
	static function withMonth($this1, $month) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this1);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($this1);
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($this1);
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($this1);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp, $month, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5);
	}
	static function withDay($this1, $day) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this1);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($this1);
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($this1);
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($this1);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp, $tmp1, $day, $tmp2, $tmp3, $tmp4, $tmp5);
	}
	static function withHour($this1, $hour) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($this1);
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($this1);
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($this1);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp, $tmp1, $tmp2, $hour, $tmp3, $tmp4, $tmp5);
	}
	static function withMinute($this1, $minute) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this1);
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($this1);
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($this1);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp, $tmp1, $tmp2, $tmp3, $minute, $tmp4, $tmp5);
	}
	static function withSecond($this1, $second) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this1);
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($this1);
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_millisecond($this1);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $second, $tmp5);
	}
	static function withMillisecond($this1, $millisecond) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$tmp2 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$tmp3 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($this1);
		$tmp4 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($this1);
		$tmp5 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($this1);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::create($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $millisecond);
	}
	static function add($this1, $time) {
		$b = $time;
		$high = $this1->high + $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this1->low + $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this1->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return $x;
	}
	static function addTicks($this1, $tickstoadd) {
		$high = $this1->high + $tickstoadd->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this1->low + $tickstoadd->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $this1->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return $x;
	}
	static function subtract($this1, $time) {
		$b = $time;
		$high = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this1->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return $x;
	}
	static function subtractDate($this1, $date) {
		$b = $date;
		$high = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this1->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return $x;
	}
	static function addScaled($this1, $value, $scale) {
		$tmp = $value * $scale;
		$tmp1 = null;
		if($value >= 0) {
			$tmp1 = 0.5;
		} else {
			$tmp1 = -0.5;
		}
		$x = Std::int($tmp + $tmp1);
		$x1 = new haxe__Int64____Int64($x >> 31, $x);
		$millis = $x1;
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$al = $millis->low & 65535;
		$ah = _hx_shift_right($millis->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp2 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp3 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp4 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp5 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp6 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp7 = $high + (haxe__Int32_Int32_Impl_::mul($millis->low, $b->high) + haxe__Int32_Int32_Impl_::mul($millis->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x2 = new haxe__Int64____Int64($high, $low);
		$b1 = $x2;
		$high1 = $this1->high + $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this1->low + $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $this1->low) < 0) {
			++$high1;
			$tmp8 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high1, $low1);
		return $x3;
	}
	static function addDays($this1, $days) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1, $days, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerDay);
	}
	static function addHours($this1, $hours) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1, $hours, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerHour);
	}
	static function addMilliseconds($this1, $milliseconds) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1, $milliseconds, 1);
	}
	static function addMinutes($this1, $minutes) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1, $minutes, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerMinute);
	}
	static function addMonths($this1, $months) {
		$y = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$m = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$d = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$i = $m - 1 + $months;
		if($i >= 0) {
			$m = Std::int(_hx_mod($i, 12) + 1);
			$y = Std::int($y + $i / 12);
		} else {
			$m = Std::int(12 + _hx_mod(($i + 1), 12));
			$y = Std::int($y + ($i - 11) / 12);
		}
		$days = thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($y, $m);
		$tmp = $d > $days;
		if($tmp) {
			$d = $days;
		}
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::dateToTicks($y, $m, $d);
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
		$b1 = haxe__Int64_Int64_Impl_::divMod($this1, $b)->modulus;
		$high = $a->high + $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $a->low + $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $a->low) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		return $x;
	}
	static function addSeconds($this1, $seconds) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::addScaled($this1, $seconds, thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerSecond);
	}
	static function addYears($this1, $years) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::addMonths($this1, $years * 12);
	}
	static function compareTo($this1, $other) {
		$tmp = null;
		if(null === $other) {
			$tmp = $this1 === null;
		} else {
			$tmp = false;
		}
		if($tmp) {
			return 0;
		}
		if(null === $this1) {
			return -1;
		} else {
			if(null === $other) {
				return 1;
			}
		}
		return thx_Int64s::compare($this1, $other);
	}
	static function equalsTo($this1, $that) {
		$b = $that;
		if($this1->high === $b->high) {
			return $this1->low === $b->low;
		} else {
			return false;
		}
	}
	static function equals($self, $that) {
		$a = $self;
		$b = $that;
		if($a->high === $b->high) {
			return $a->low === $b->low;
		} else {
			return false;
		}
	}
	static function notEqualsTo($this1, $that) {
		$b = $that;
		if(!($this1->high !== $b->high)) {
			return $this1->low !== $b->low;
		} else {
			return true;
		}
	}
	static function notEquals($self, $that) {
		$a = $self;
		$b = $that;
		if(!($a->high !== $b->high)) {
			return $a->low !== $b->low;
		} else {
			return true;
		}
	}
	static function nearEqualsTo($this1, $other, $span) {
		$a = $other;
		$high = $a->high - $this1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $a->low - $this1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($a->low, $this1->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$ticks = thx_Int64s::abs($x);
		$this2 = thx__Time_Time_Impl_::abs($span);
		$v = $ticks->high - $this2->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp1 = $v !== 0;
		if($tmp1) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($ticks->low, $this2->low);
		}
		$tmp2 = null;
		if($ticks->high < 0) {
			if($this2->high < 0) {
				$tmp2 = $v;
			} else {
				$tmp2 = -1;
			}
		} else {
			if($this2->high >= 0) {
				$tmp2 = $v;
			} else {
				$tmp2 = 1;
			}
		}
		return $tmp2 <= 0;
	}
	static function greaterThan($this1, $that) {
		$b = $that;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp1 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 > 0;
	}
	static function greater($self, $that) {
		$a = $self;
		$b = $that;
		$v = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low);
		}
		$tmp1 = null;
		if($a->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 > 0;
	}
	static function greaterEqualsTo($this1, $that) {
		$b = $that;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp1 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 >= 0;
	}
	static function greaterEquals($self, $that) {
		$a = $self;
		$b = $that;
		$v = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low);
		}
		$tmp1 = null;
		if($a->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 >= 0;
	}
	static function lessThan($this1, $that) {
		$b = $that;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp1 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 < 0;
	}
	static function less($self, $that) {
		$a = $self;
		$b = $that;
		$v = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low);
		}
		$tmp1 = null;
		if($a->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 < 0;
	}
	static function lessEqualsTo($this1, $that) {
		$b = $that;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp1 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 <= 0;
	}
	static function lessEquals($self, $that) {
		$a = $self;
		$b = $that;
		$v = $a->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $v !== 0;
		if($tmp) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($a->low, $b->low);
		}
		$tmp1 = null;
		if($a->high < 0) {
			if($b->high < 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp1 = $v;
			} else {
				$tmp1 = 1;
			}
		}
		return $tmp1 <= 0;
	}
	static function toTime($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$unixEpochTicks;
		$high = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this1->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$a = $x;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$tmp1 = haxe__Int64_Int64_Impl_::divMod($a, $b1)->quotient;
		return thx_Int64s::toFloat($tmp1);
	}
	static function toDate($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$unixEpochTicks;
		$high = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this1->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$a = $x;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$tmp1 = haxe__Int64_Int64_Impl_::divMod($a, $b1)->quotient;
		return Date::fromTime(thx_Int64s::toFloat($tmp1));
	}
	static function toDateTime($this1, $offset = null) {
		$this2 = null;
		$tmp = null;
		if(null === $offset) {
			$tmp = thx__Time_Time_Impl_::$zero;
		} else {
			$tmp = $offset;
		}
		$this2 = (new _hx_array(array($this1, $tmp)));
		return $this2;
	}
	static function toLocalDateTime($this1) {
		$offset = thx__DateTime_DateTime_Impl_::localOffset();
		return (new _hx_array(array($this1, $offset)));
	}
	static function toString($this1) {
		if(null === $this1) {
			return "";
		}
		$abs = thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64(thx_Int64s::abs($this1));
		$decimals = null;
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($abs);
		if($tmp !== 0) {
			$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_tickInSecond($abs);
			$tmp2 = thx_Ints::lpad($tmp1, "0", 7);
			$tmp3 = thx_Strings::trimCharsRight($tmp2, ")");
			$decimals = "." . _hx_string_or_null($tmp3);
		} else {
			$decimals = "";
		}
		$b = thx_Int64s::$zero;
		$v = $this1->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp4 = $v !== 0;
		if($tmp4) {
			$v = $v;
		} else {
			$v = haxe__Int32_Int32_Impl_::ucompare($this1->low, $b->low);
		}
		$tmp5 = null;
		if($this1->high < 0) {
			if($b->high < 0) {
				$tmp5 = $v;
			} else {
				$tmp5 = -1;
			}
		} else {
			if($b->high >= 0) {
				$tmp5 = $v;
			} else {
				$tmp5 = 1;
			}
		}
		$isneg = $tmp5 < 0;
		$tmp6 = null;
		if($isneg) {
			$tmp6 = "-";
		} else {
			$tmp6 = "";
		}
		$tmp7 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($abs, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp8 = "" . _hx_string_rec($tmp7, "") . "-";
		$tmp9 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($abs, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		$tmp10 = thx_Ints::lpad($tmp9, "0", 2);
		$tmp11 = _hx_string_or_null($tmp8) . _hx_string_or_null($tmp10) . "-";
		$tmp12 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($abs, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
		$tmp13 = thx_Ints::lpad($tmp12, "0", 2);
		$tmp14 = _hx_string_or_null($tmp11) . _hx_string_or_null($tmp13) . "T";
		$tmp15 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_hour($abs);
		$tmp16 = thx_Ints::lpad($tmp15, "0", 2);
		$tmp17 = _hx_string_or_null($tmp14) . _hx_string_or_null($tmp16) . ":";
		$tmp18 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_minute($abs);
		$tmp19 = thx_Ints::lpad($tmp18, "0", 2);
		$tmp20 = _hx_string_or_null($tmp17) . _hx_string_or_null($tmp19) . ":";
		$tmp21 = thx__DateTimeUtc_DateTimeUtc_Impl_::get_second($abs);
		$tmp22 = thx_Ints::lpad($tmp21, "0", 2);
		return _hx_string_or_null($tmp6) . _hx_string_or_null((_hx_string_or_null($tmp20) . _hx_string_or_null($tmp22) . _hx_string_or_null($decimals) . "Z"));
	}
	static function get_ticks($this1) {
		return $this1;
	}
	static function get_year($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
	}
	static function get_month($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
	}
	static function get_day($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY);
	}
	static function get_hour($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 24);
		$x1 = haxe__Int64_Int64_Impl_::divMod($a, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		return $x1->low;
	}
	static function get_minute($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 60);
		$x1 = haxe__Int64_Int64_Impl_::divMod($a, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		return $x1->low;
	}
	static function get_dayOfWeek($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 1);
		$b1 = $x;
		$high = $a->high + $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $a->low + $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $a->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high, $low);
		$a1 = $x1;
		$x2 = new haxe__Int64____Int64(0, 7);
		$x3 = haxe__Int64_Int64_Impl_::divMod($a1, $x2)->modulus;
		if($x3->high !== $x3->low >> 31) {
			throw new HException("Overflow");
		}
		return $x3->low;
	}
	static function get_dayOfYear($this1) {
		return thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_DAY_OF_YEAR);
	}
	static function get_millisecond($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$thousandI64;
		$x = haxe__Int64_Int64_Impl_::divMod($a, $b1)->modulus;
		if($x->high !== $x->low >> 31) {
			throw new HException("Overflow");
		}
		return $x->low;
	}
	static function get_microsecond($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMicrosecondI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$millionI64;
		$x = haxe__Int64_Int64_Impl_::divMod($a, $b1)->modulus;
		if($x->high !== $x->low >> 31) {
			throw new HException("Overflow");
		}
		return $x->low;
	}
	static function get_tickInSecond($this1) {
		$x = new haxe__Int64____Int64(0, 10000000);
		$x1 = haxe__Int64_Int64_Impl_::divMod($this1, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		return $x1->low;
	}
	static function get_second($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$a = haxe__Int64_Int64_Impl_::divMod($this1, $b)->quotient;
		$x = new haxe__Int64____Int64(0, 60);
		$x1 = haxe__Int64_Int64_Impl_::divMod($a, $x)->modulus;
		if($x1->high !== $x1->low >> 31) {
			throw new HException("Overflow");
		}
		return $x1->low;
	}
	static function get_timeOfDay($this1) {
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
		$ticks = haxe__Int64_Int64_Impl_::divMod($this1, $b)->modulus;
		return $ticks;
	}
	static function get_isInLeapYear($this1) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::isLeapYear($tmp);
	}
	static function get_monthDays($this1) {
		$tmp = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_YEAR);
		$tmp1 = thx__DateTimeUtc_DateTimeUtc_Impl_::getDatePart($this1, thx__DateTimeUtc_DateTimeUtc_Impl_::$DATE_PART_MONTH);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($tmp, $tmp1);
	}
	static function self($this1) {
		return $this1;
	}
	static $__properties__ = array("get_timeOfDay" => "get_timeOfDay","get_dayOfYear" => "get_dayOfYear","get_dayOfWeek" => "get_dayOfWeek","get_monthDays" => "get_monthDays","get_isInLeapYear" => "get_isInLeapYear","get_tickInSecond" => "get_tickInSecond","get_microsecond" => "get_microsecond","get_millisecond" => "get_millisecond","get_second" => "get_second","get_minute" => "get_minute","get_hour" => "get_hour","get_day" => "get_day","get_month" => "get_month","get_year" => "get_year","get_ticks" => "get_ticks");
	function __toString() { return 'thx._DateTimeUtc.DateTimeUtc_Impl_'; }
}
thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerMinute = thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerSecond * 60;
thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerHour = thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerMinute * 60;
thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerDay = thx__DateTimeUtc_DateTimeUtc_Impl_::$millisPerHour * 24;
thx__DateTimeUtc_DateTimeUtc_Impl_::$tenI64 = thx__DateTimeUtc_DateTimeUtc_Impl__1();
thx__DateTimeUtc_DateTimeUtc_Impl_::$hundredI64 = thx__DateTimeUtc_DateTimeUtc_Impl__2();
thx__DateTimeUtc_DateTimeUtc_Impl_::$thousandI64 = thx__DateTimeUtc_DateTimeUtc_Impl__3();
thx__DateTimeUtc_DateTimeUtc_Impl_::$tenThousandI64 = thx__DateTimeUtc_DateTimeUtc_Impl__4();
thx__DateTimeUtc_DateTimeUtc_Impl_::$millionI64 = thx__DateTimeUtc_DateTimeUtc_Impl__5();
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMicrosecondI64 = thx__DateTimeUtc_DateTimeUtc_Impl_::$tenI64;
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64 = thx__DateTimeUtc_DateTimeUtc_Impl__6();
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64 = thx__DateTimeUtc_DateTimeUtc_Impl__7();
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64 = thx__DateTimeUtc_DateTimeUtc_Impl__8();
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64 = thx__DateTimeUtc_DateTimeUtc_Impl__9();
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64 = thx__DateTimeUtc_DateTimeUtc_Impl__10();
thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer4Years = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPerYear * 4 + 1;
thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer100Years = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer4Years * 25 - 1;
thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer400Years = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer100Years * 4 + 1;
thx__DateTimeUtc_DateTimeUtc_Impl_::$daysTo1970 = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer400Years * 4 + thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer100Years * 3 + thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPer4Years * 17 + thx__DateTimeUtc_DateTimeUtc_Impl_::$daysPerYear;
thx__DateTimeUtc_DateTimeUtc_Impl_::$unixEpochTicks = thx__DateTimeUtc_DateTimeUtc_Impl__11();
thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth365 = (new _hx_array(array(0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365)));
thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth366 = (new _hx_array(array(0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366)));
function thx__DateTimeUtc_DateTimeUtc_Impl__0(&$month, &$year) {
	{
		if($month === 0) {
			--$year;
			$month = 12;
		} else {
			if($month < 0) {
				$month = -$month;
				$years = Math::ceil($month / 12);
				$year -= $years;
				$month = $years * 12 - $month;
			} else {
				if($month > 12) {
					$years1 = Math::floor($month / 12);
					$year += $years1;
					$month -= $years1 * 12;
				}
			}
		}
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__1() {
	{
		$x = new haxe__Int64____Int64(0, 10);
		return $x;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__2() {
	{
		$x = new haxe__Int64____Int64(0, 100);
		return $x;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__3() {
	{
		$x = new haxe__Int64____Int64(0, 1000);
		return $x;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__4() {
	{
		$x = new haxe__Int64____Int64(0, 10000);
		return $x;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__5() {
	{
		$x = new haxe__Int64____Int64(0, 1000000);
		return $x;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__6() {
	{
		$x = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecond;
		$x1 = new haxe__Int64____Int64($x >> 31, $x);
		return $x1;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__7() {
	{
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$x = new haxe__Int64____Int64(0, 1000);
		$b = $x;
		$al = $a->low & 65535;
		$ah = _hx_shift_right($a->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high, $low);
		return $x1;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__8() {
	{
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$x = new haxe__Int64____Int64(0, 60);
		$b = $x;
		$al = $a->low & 65535;
		$ah = _hx_shift_right($a->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high, $low);
		return $x1;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__9() {
	{
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
		$x = new haxe__Int64____Int64(0, 60);
		$b = $x;
		$al = $a->low & 65535;
		$ah = _hx_shift_right($a->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high, $low);
		return $x1;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__10() {
	{
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
		$x = new haxe__Int64____Int64(0, 24);
		$b = $x;
		$al = $a->low & 65535;
		$ah = _hx_shift_right($a->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high, $low);
		return $x1;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__11() {
	{
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
		$x = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysTo1970;
		$x1 = new haxe__Int64____Int64($x >> 31, $x);
		$b = $x1;
		$al = $a->low & 65535;
		$ah = _hx_shift_right($a->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x2 = new haxe__Int64____Int64($high, $low);
		return $x2;
	}
}
