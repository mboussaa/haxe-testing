<?php

// Generated by Haxe 3.3.0
class thx_format_TestDateFormat {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testFormatU() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "U", null);
			utest_Assert::equals("Monday, 01 June 2009 13:45:30", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 24, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatU")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "U", thx_format_TestDateFormat::$it);
			utest_Assert::equals("lunedì 1 giugno 2009 13:45:30", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 25, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatU")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "U", thx_format_TestDateFormat::$ch);
			utest_Assert::equals("lunedì, 1. giugno 2009 13:45:30", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 26, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatU")));
			$tmp3 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "U", thx_format_TestDateFormat::$us);
			utest_Assert::equals("Monday, June 01, 2009 1:45:30 PM", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 27, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatU")));
			$tmp4 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "U", thx_format_TestDateFormat::$ru);
			utest_Assert::equals("1 Июнь 2009 г. 13:45:30", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 28, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatU")));
			$tmp5 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "U", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("lundi 1 juin 2009 13:45:30", $tmp5, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 29, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatU")));
			$tmp6 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "U", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("2009年6月1日 13:45:30", $tmp6, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 30, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatU")));
			$tmp7 = thx_format_DateFormat::dateTimeFull(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("lunedì 1 giugno 2009 13:45:30", $tmp7, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 32, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatU")));
			unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFormatd_() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "d", null);
			utest_Assert::equals("06/01/2009", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 37, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatd_")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "d", thx_format_TestDateFormat::$us);
			utest_Assert::equals("6/1/2009", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 38, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatd_")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "d", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("01/06/2009", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 39, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatd_")));
			$tmp3 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "d", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("2009/06/01", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 40, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatd_")));
			$tmp4 = thx_format_DateFormat::dateShort(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("01/06/2009", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 42, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatd_")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFormatD() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "D", null);
			utest_Assert::equals("Monday, 01 June 2009", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 47, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatD")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "D", thx_format_TestDateFormat::$us);
			utest_Assert::equals("Monday, June 01, 2009", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 48, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatD")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "D", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("lundi 1 juin 2009", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 49, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatD")));
			$tmp3 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "D", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("2009年6月1日", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 50, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatD")));
			$tmp4 = thx_format_DateFormat::dateLong(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("lunedì 1 giugno 2009", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 52, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatD")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFormatM() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "M", null);
			utest_Assert::equals("June 01", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 57, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatM")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "M", thx_format_TestDateFormat::$us);
			utest_Assert::equals("June 01", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 58, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatM")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "M", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("1 juin", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 59, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatM")));
			$tmp3 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "M", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("6月1日", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 60, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatM")));
			$tmp4 = thx_format_DateFormat::monthDay(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("01 giugno", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 62, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatM")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFormatR() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "R", null);
			utest_Assert::equals("Mon, 01 Jun 2009 19:45:30 GMT", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 67, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatR")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "R", thx_format_TestDateFormat::$us);
			utest_Assert::equals("Mon, 01 Jun 2009 19:45:30 GMT", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 68, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatR")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "R", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("lun., 01 juin 2009 19:45:30 GMT", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 69, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatR")));
			$tmp3 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "R", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("月, 01 6 2009 19:45:30 GMT", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 70, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatR")));
			$tmp4 = thx_format_DateFormat::rfc1123(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("lun, 01 giu 2009 19:45:30 GMT", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 71, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatR")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFormats() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "s", null);
			utest_Assert::equals("2009-06-01T13:45:30", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 76, "className" => "thx.format.TestDateFormat", "methodName" => "testFormats")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "s", thx_format_TestDateFormat::$us);
			utest_Assert::equals("2009-06-01T13:45:30", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 77, "className" => "thx.format.TestDateFormat", "methodName" => "testFormats")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "s", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("2009-06-01T13:45:30", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 78, "className" => "thx.format.TestDateFormat", "methodName" => "testFormats")));
			$tmp3 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "s", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("2009-06-01T13:45:30", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 79, "className" => "thx.format.TestDateFormat", "methodName" => "testFormats")));
			$tmp4 = thx_format_DateFormat::dateTimeSortable(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("2009-06-01T13:45:30", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 81, "className" => "thx.format.TestDateFormat", "methodName" => "testFormats")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFormatt_() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "t", null);
			utest_Assert::equals("13:45", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 86, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatt_")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "t", thx_format_TestDateFormat::$us);
			utest_Assert::equals("1:45 PM", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 87, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatt_")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "t", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("13:45", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 88, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatt_")));
			$tmp3 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "t", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("13:45", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 89, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatt_")));
			$tmp4 = thx_format_DateFormat::timeShort(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("13:45", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 91, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatt_")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFormatT() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "T", null);
			utest_Assert::equals("13:45:30", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 96, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatT")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "T", thx_format_TestDateFormat::$us);
			utest_Assert::equals("1:45:30 PM", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 97, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatT")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "T", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("13:45:30", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 98, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatT")));
			$tmp3 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "T", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("13:45:30", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 99, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatT")));
			$tmp4 = thx_format_DateFormat::timeLong(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("13:45:30", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 101, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatT")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFormatu_() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "u", null);
			utest_Assert::equals("2009-06-01 19:45:30Z", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 106, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatu_")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "u", thx_format_TestDateFormat::$us);
			utest_Assert::equals("2009-06-01 19:45:30Z", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 107, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatu_")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "u", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("2009-06-01 19:45:30Z", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 108, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatu_")));
			$tmp3 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "u", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("2009-06-01 19:45:30Z", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 109, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatu_")));
			$tmp4 = thx_format_DateFormat::universalSortable(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("2009-06-01 19:45:30Z", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 110, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatu_")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFormatO() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "O", null);
			utest_Assert::equals("2009-06-01T13:45:30.0000000-06:00", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 115, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatO")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "o", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("2009-06-01T13:45:30.0000000-06:00", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 116, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatO")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "O", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("2009-06-01T13:45:30.0000000-06:00", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 117, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatO")));
			$tmp3 = thx_format_DateFormat::iso8601(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("2009-06-01T13:45:30.0000000-06:00", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 118, "className" => "thx.format.TestDateFormat", "methodName" => "testFormatO")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testFormaty() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "y", null);
			utest_Assert::equals("2009 June", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 123, "className" => "thx.format.TestDateFormat", "methodName" => "testFormaty")));
			$tmp1 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "y", thx_format_TestDateFormat::$us);
			utest_Assert::equals("June, 2009", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 124, "className" => "thx.format.TestDateFormat", "methodName" => "testFormaty")));
			$tmp2 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "y", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("juin 2009", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 125, "className" => "thx.format.TestDateFormat", "methodName" => "testFormaty")));
			$tmp3 = thx_format_DateFormat::format(thx_format_TestDateFormat::$d1, "y", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("2009年6月", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 126, "className" => "thx.format.TestDateFormat", "methodName" => "testFormaty")));
			$tmp4 = thx_format_DateFormat::yearMonth(thx_format_TestDateFormat::$d1, thx_format_TestDateFormat::$it);
			utest_Assert::equals("giugno 2009", $tmp4, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 128, "className" => "thx.format.TestDateFormat", "methodName" => "testFormaty")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testd() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "d", null);
			utest_Assert::equals("1", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 133, "className" => "thx.format.TestDateFormat", "methodName" => "testd")));
			$tmp1 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d2, "d", null);
			utest_Assert::equals("15", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 134, "className" => "thx.format.TestDateFormat", "methodName" => "testd")));
			unset($tmp1,$tmp);
		}
	}
	public function testdd() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "dd", null);
			utest_Assert::equals("01", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 139, "className" => "thx.format.TestDateFormat", "methodName" => "testdd")));
			$tmp1 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d2, "dd", null);
			utest_Assert::equals("15", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 140, "className" => "thx.format.TestDateFormat", "methodName" => "testdd")));
			unset($tmp1,$tmp);
		}
	}
	public function testddd() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "ddd", null);
			utest_Assert::equals("Mon", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 145, "className" => "thx.format.TestDateFormat", "methodName" => "testddd")));
			$tmp1 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "ddd", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("lun.", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 146, "className" => "thx.format.TestDateFormat", "methodName" => "testddd")));
			$tmp2 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "ddd", thx_format_TestDateFormat::$it);
			utest_Assert::equals("lun", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 147, "className" => "thx.format.TestDateFormat", "methodName" => "testddd")));
			$tmp3 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "ddd", thx_format_TestDateFormat::$ru);
			utest_Assert::equals("Пн", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 148, "className" => "thx.format.TestDateFormat", "methodName" => "testddd")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testdddd() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "dddd", null);
			utest_Assert::equals("Monday", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 153, "className" => "thx.format.TestDateFormat", "methodName" => "testdddd")));
			$tmp1 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "dddd", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("lundi", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 154, "className" => "thx.format.TestDateFormat", "methodName" => "testdddd")));
			$tmp2 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "dddd", thx_format_TestDateFormat::$it);
			utest_Assert::equals("lunedì", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 155, "className" => "thx.format.TestDateFormat", "methodName" => "testdddd")));
			$tmp3 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "dddd", thx_format_TestDateFormat::$ru);
			utest_Assert::equals("понедельник", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 156, "className" => "thx.format.TestDateFormat", "methodName" => "testdddd")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testh_() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "h", null);
			utest_Assert::equals("1", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 161, "className" => "thx.format.TestDateFormat", "methodName" => "testh_")));
			unset($tmp);
		}
	}
	public function testhh_() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "hh", null);
			utest_Assert::equals("01", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 166, "className" => "thx.format.TestDateFormat", "methodName" => "testhh_")));
			unset($tmp);
		}
	}
	public function testH() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "H", null);
			utest_Assert::equals("13", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 171, "className" => "thx.format.TestDateFormat", "methodName" => "testH")));
			unset($tmp);
		}
	}
	public function testHH() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "HH", null);
			utest_Assert::equals("13", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 176, "className" => "thx.format.TestDateFormat", "methodName" => "testHH")));
			unset($tmp);
		}
	}
	public function testm_() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "m", null);
			utest_Assert::equals("45", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 181, "className" => "thx.format.TestDateFormat", "methodName" => "testm_")));
			$tmp1 = thx__DateTime_DateTime_Impl_::fromString("2009-06-15 13:05:30");
			$tmp2 = thx_format_DateFormat::formatTerm($tmp1, "m", null);
			utest_Assert::equals("5", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 182, "className" => "thx.format.TestDateFormat", "methodName" => "testm_")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function testmm_() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "mm", null);
			utest_Assert::equals("45", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 187, "className" => "thx.format.TestDateFormat", "methodName" => "testmm_")));
			$tmp1 = thx__DateTime_DateTime_Impl_::fromString("2009-06-15 13:05:30");
			$tmp2 = thx_format_DateFormat::formatTerm($tmp1, "mm", null);
			utest_Assert::equals("05", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 188, "className" => "thx.format.TestDateFormat", "methodName" => "testmm_")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function testM() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "M", null);
			utest_Assert::equals("6", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 193, "className" => "thx.format.TestDateFormat", "methodName" => "testM")));
			unset($tmp);
		}
	}
	public function testMM() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "MM", null);
			utest_Assert::equals("06", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 198, "className" => "thx.format.TestDateFormat", "methodName" => "testMM")));
			unset($tmp);
		}
	}
	public function testMMM() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "MMM", null);
			utest_Assert::equals("Jun", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 203, "className" => "thx.format.TestDateFormat", "methodName" => "testMMM")));
			$tmp1 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "MMM", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("juin", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 204, "className" => "thx.format.TestDateFormat", "methodName" => "testMMM")));
			$tmp2 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "MMM", thx_format_TestDateFormat::$it);
			utest_Assert::equals("giu", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 205, "className" => "thx.format.TestDateFormat", "methodName" => "testMMM")));
			$tmp3 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "MMM", thx_format_TestDateFormat::$ru);
			utest_Assert::equals("июн", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 206, "className" => "thx.format.TestDateFormat", "methodName" => "testMMM")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testMMMM() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "MMMM", null);
			utest_Assert::equals("June", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 211, "className" => "thx.format.TestDateFormat", "methodName" => "testMMMM")));
			$tmp1 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "MMMM", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("juin", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 212, "className" => "thx.format.TestDateFormat", "methodName" => "testMMMM")));
			$tmp2 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "MMMM", thx_format_TestDateFormat::$it);
			utest_Assert::equals("giugno", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 213, "className" => "thx.format.TestDateFormat", "methodName" => "testMMMM")));
			$tmp3 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "MMMM", thx_format_TestDateFormat::$ru);
			utest_Assert::equals("Июнь", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 214, "className" => "thx.format.TestDateFormat", "methodName" => "testMMMM")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function tests() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "s", null);
			utest_Assert::equals("30", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 219, "className" => "thx.format.TestDateFormat", "methodName" => "tests")));
			$tmp1 = thx__DateTime_DateTime_Impl_::fromString("2009-06-15 13:05:03");
			$tmp2 = thx_format_DateFormat::formatTerm($tmp1, "s", null);
			utest_Assert::equals("3", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 220, "className" => "thx.format.TestDateFormat", "methodName" => "tests")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function testss() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "ss", null);
			utest_Assert::equals("30", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 225, "className" => "thx.format.TestDateFormat", "methodName" => "testss")));
			$tmp1 = thx__DateTime_DateTime_Impl_::fromString("2009-06-15 13:05:03");
			$tmp2 = thx_format_DateFormat::formatTerm($tmp1, "ss", null);
			utest_Assert::equals("03", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 226, "className" => "thx.format.TestDateFormat", "methodName" => "testss")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function testtt() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "tt", null);
			utest_Assert::equals("PM", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 231, "className" => "thx.format.TestDateFormat", "methodName" => "testtt")));
			$tmp1 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "tt", thx_format_TestDateFormat::$fr);
			utest_Assert::equals("", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 232, "className" => "thx.format.TestDateFormat", "methodName" => "testtt")));
			$tmp2 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "tt", thx_format_TestDateFormat::$it);
			utest_Assert::equals("", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 233, "className" => "thx.format.TestDateFormat", "methodName" => "testtt")));
			$tmp3 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "tt", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("午後", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 234, "className" => "thx.format.TestDateFormat", "methodName" => "testtt")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testy() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__DateTime_DateTime_Impl_::fromString("1972-06-15 13:05:03");
			$tmp1 = thx_format_DateFormat::formatTerm($tmp, "y", null);
			utest_Assert::equals("72", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 239, "className" => "thx.format.TestDateFormat", "methodName" => "testy")));
			unset($tmp1,$tmp);
		}
	}
	public function testyy() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "yy", null);
			utest_Assert::equals("09", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 244, "className" => "thx.format.TestDateFormat", "methodName" => "testyy")));
			$tmp1 = thx__DateTime_DateTime_Impl_::fromString("1972-06-15 13:05:03");
			$tmp2 = thx_format_DateFormat::formatTerm($tmp1, "yy", null);
			utest_Assert::equals("72", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 245, "className" => "thx.format.TestDateFormat", "methodName" => "testyy")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function testyyyy() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx__DateTime_DateTime_Impl_::fromString("1980-06-15 13:05:03");
			$tmp1 = thx_format_DateFormat::formatTerm($tmp, "yyyy", null);
			utest_Assert::equals("1980", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 250, "className" => "thx.format.TestDateFormat", "methodName" => "testyyyy")));
			$tmp2 = thx__DateTime_DateTime_Impl_::fromString("2019-06-15 13:05:03");
			$tmp3 = thx_format_DateFormat::formatTerm($tmp2, "yyyy", null);
			utest_Assert::equals("2019", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 251, "className" => "thx.format.TestDateFormat", "methodName" => "testyyyy")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testTimeSeprator() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, ":", null);
			utest_Assert::equals(":", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 256, "className" => "thx.format.TestDateFormat", "methodName" => "testTimeSeprator")));
			$tmp1 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, ":", thx_format_TestDateFormat::$fr);
			utest_Assert::equals(":", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 257, "className" => "thx.format.TestDateFormat", "methodName" => "testTimeSeprator")));
			$tmp2 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, ":", thx_format_TestDateFormat::$it);
			utest_Assert::equals(":", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 258, "className" => "thx.format.TestDateFormat", "methodName" => "testTimeSeprator")));
			$tmp3 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, ":", thx_format_TestDateFormat::$jp);
			utest_Assert::equals(":", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 259, "className" => "thx.format.TestDateFormat", "methodName" => "testTimeSeprator")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testDateSeprator() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "/", null);
			utest_Assert::equals("/", $tmp, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 264, "className" => "thx.format.TestDateFormat", "methodName" => "testDateSeprator")));
			$tmp1 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "/", thx_format_TestDateFormat::$ch);
			utest_Assert::equals(".", $tmp1, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 265, "className" => "thx.format.TestDateFormat", "methodName" => "testDateSeprator")));
			$tmp2 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "/", thx_format_TestDateFormat::$it);
			utest_Assert::equals("/", $tmp2, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 266, "className" => "thx.format.TestDateFormat", "methodName" => "testDateSeprator")));
			$tmp3 = thx_format_DateFormat::formatTerm(thx_format_TestDateFormat::$d1, "/", thx_format_TestDateFormat::$jp);
			utest_Assert::equals("/", $tmp3, null, _hx_anonymous(array("fileName" => "TestDateFormat.hx", "lineNumber" => 267, "className" => "thx.format.TestDateFormat", "methodName" => "testDateSeprator")));
			unset($tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $it;
	static $ch;
	static $us;
	static $ru;
	static $fr;
	static $jp;
	static $d1;
	static $d2;
	function __toString() { return 'thx.format.TestDateFormat'; }
}
thx_format_TestDateFormat::$it = thx_format_TestDateFormat_0();
thx_format_TestDateFormat::$ch = thx_format_TestDateFormat_1();
thx_format_TestDateFormat::$us = thx_format_TestDateFormat_2();
thx_format_TestDateFormat::$ru = thx_format_TestDateFormat_3();
thx_format_TestDateFormat::$fr = thx_format_TestDateFormat_4();
thx_format_TestDateFormat::$jp = thx_format_TestDateFormat_5();
thx_format_TestDateFormat::$d1 = thx__DateTime_DateTime_Impl_::fromString("2009-06-01 13:45:30-06:00");
thx_format_TestDateFormat::$d2 = thx__DateTime_DateTime_Impl_::fromString("2009-06-15 13:45:30-06:00");
function thx_format_TestDateFormat_0() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "Italia", "separatorList" => ";", "nameNative" => "italiano", "number" => _hx_anonymous(array("patternPositiveCurrency" => 2, "patternPositivePercent" => 1, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ",", "separatorGroupNumber" => ".", "signPositive" => "+", "symbolPositiveInfinity" => "+Infinito", "patternNegativeCurrency" => 9, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => ".", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non un numero reale", "separatorGroupPercent" => ".", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinito", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Italian", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dom", "lun", "mar", "mer", "gio", "ven", "sab"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("do", "lu", "ma", "me", "gi", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstFourDayWeek", "nameCalendarNative" => "calendario gregoriano", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 2, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))))), "win3" => "ITA", "nameRegionEnglish" => "Italy", "lcid" => 1040, "iso3" => "ita", "iso2" => "it", "ietf" => "it-IT", "code" => "it-IT"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_format_TestDateFormat_1() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "Svizzera", "separatorList" => ";", "nameNative" => "italiano", "number" => _hx_anonymous(array("patternPositiveCurrency" => 2, "patternPositivePercent" => 1, "symbolCurrency" => "fr.", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ".", "separatorGroupNumber" => "'", "signPositive" => "+", "symbolPositiveInfinity" => "+Infinito", "patternNegativeCurrency" => 2, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ".", "separatorGroupCurrency" => "'", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ".", "symbolNaN" => "Non un numero reale", "separatorGroupPercent" => "'", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinito", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Italian", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"))), "patternMonthDay" => "d. MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dom", "lun", "mar", "mer", "gio", "ven", "sab"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))), "separatorDate" => ".", "nameMonthGenitives" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("do", "lu", "ma", "me", "gi", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd, d. MMMM yyyy", "calendarWeekRuleName" => "FirstFourDayWeek", "nameCalendarNative" => "calendario gregoriano", "patternDateTimeFull" => "dddd, d. MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 2, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd.MM.yyyy", "nameMonths" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))))), "win3" => "ITS", "nameRegionEnglish" => "Switzerland", "lcid" => 2064, "iso3" => "ita", "iso2" => "it", "ietf" => "it-CH", "code" => "it-CH"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_format_TestDateFormat_2() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "United States", "separatorList" => ",", "nameNative" => "English", "number" => _hx_anonymous(array("patternPositiveCurrency" => 0, "patternPositivePercent" => 0, "symbolCurrency" => "\$", "signNegative" => "-", "patternNegativePercent" => 0, "separatorDecimalPercent" => ".", "separatorGroupNumber" => ",", "signPositive" => "+", "symbolPositiveInfinity" => "Infinity", "patternNegativeCurrency" => 0, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ".", "separatorGroupCurrency" => ",", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ".", "symbolNaN" => "NaN", "separatorGroupPercent" => ",", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinity", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "English", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))), "patternMonthDay" => "MMMM dd", "patternYearMonth" => "MMMM, yyyy", "firstDayOfWeekIndex" => 0, "patternTimeLong" => "h:mm:ss tt", "separatorTime" => ":", "patternTimeShort" => "h:mm tt", "nameDaysAbbreviated" => (new _hx_array(array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))), "designatorPm" => "PM", "designatorAm" => "AM", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "firstDayOfWeekName" => "Sunday", "nameDaysShortest" => (new _hx_array(array("Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd, MMMM dd, yyyy", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "Gregorian Calendar", "patternDateTimeFull" => "dddd, MMMM dd, yyyy h:mm:ss tt", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "M/d/yyyy", "nameMonths" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))))), "win3" => "ENU", "nameRegionEnglish" => "United States", "lcid" => 1033, "iso3" => "eng", "iso2" => "en", "ietf" => "en-US", "code" => "en-US"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_format_TestDateFormat_3() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "Россия", "separatorList" => ";", "nameNative" => "русский", "number" => _hx_anonymous(array("patternPositiveCurrency" => 3, "patternPositivePercent" => 1, "symbolCurrency" => "₽", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ",", "separatorGroupNumber" => " ", "signPositive" => "+", "symbolPositiveInfinity" => "бесконечность", "patternNegativeCurrency" => 8, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => " ", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "NaN", "separatorGroupPercent" => " ", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-бесконечность", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Russian", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"))), "patternMonthDay" => "MMMM dd", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "H:mm:ss", "separatorTime" => ":", "patternTimeShort" => "H:mm", "nameDaysAbbreviated" => (new _hx_array(array("Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""))), "separatorDate" => ".", "nameMonthGenitives" => (new _hx_array(array("января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "d MMMM yyyy 'г.'", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "григорианский календарь", "patternDateTimeFull" => "d MMMM yyyy 'г.' H:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd.MM.yyyy", "nameMonths" => (new _hx_array(array("Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""))))), "win3" => "RUS", "nameRegionEnglish" => "Russia", "lcid" => 1049, "iso3" => "rus", "iso2" => "ru", "ietf" => "ru-RU", "code" => "ru-RU"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_format_TestDateFormat_4() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "France", "separatorList" => ";", "nameNative" => "français", "number" => _hx_anonymous(array("patternPositiveCurrency" => 3, "patternPositivePercent" => 0, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 0, "separatorDecimalPercent" => ",", "separatorGroupNumber" => " ", "signPositive" => "+", "symbolPositiveInfinity" => "+Infini", "patternNegativeCurrency" => 8, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => " ", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non Numérique", "separatorGroupPercent" => " ", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infini", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "French", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"))), "patternMonthDay" => "d MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("di", "lu", "ma", "me", "je", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "calendrier grégorien", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""))))), "win3" => "FRA", "nameRegionEnglish" => "France", "lcid" => 1036, "iso3" => "fra", "iso2" => "fr", "ietf" => "fr-FR", "code" => "fr-FR"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_format_TestDateFormat_5() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "日本", "separatorList" => ",", "nameNative" => "日本語", "number" => _hx_anonymous(array("patternPositiveCurrency" => 0, "patternPositivePercent" => 1, "symbolCurrency" => "¥", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ".", "separatorGroupNumber" => ",", "signPositive" => "+", "symbolPositiveInfinity" => "+∞", "patternNegativeCurrency" => 1, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ".", "separatorGroupCurrency" => ",", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ".", "symbolNaN" => "NaN (非数値)", "separatorGroupPercent" => ",", "decimalDigitsCurrency" => 0, "symbolNegativeInfinity" => "-∞", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Japanese", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"))), "patternMonthDay" => "M'月'd'日'", "patternYearMonth" => "yyyy'年'M'月'", "firstDayOfWeekIndex" => 0, "patternTimeLong" => "H:mm:ss", "separatorTime" => ":", "patternTimeShort" => "H:mm", "nameDaysAbbreviated" => (new _hx_array(array("日", "月", "火", "水", "木", "金", "土"))), "designatorPm" => "午後", "designatorAm" => "午前", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""))), "firstDayOfWeekName" => "Sunday", "nameDaysShortest" => (new _hx_array(array("日", "月", "火", "水", "木", "金", "土"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "yyyy'年'M'月'd'日'", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "西暦 (日本語)", "patternDateTimeFull" => "yyyy'年'M'月'd'日' H:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "yyyy/MM/dd", "nameMonths" => (new _hx_array(array("1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""))))), "win3" => "JPN", "nameRegionEnglish" => "Japan", "lcid" => 1041, "iso3" => "jpn", "iso2" => "ja", "ietf" => "ja-JP", "code" => "ja-JP"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
