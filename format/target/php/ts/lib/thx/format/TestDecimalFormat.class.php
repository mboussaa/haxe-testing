<?php

// Generated by Haxe 3.3.0
class thx_format_TestDecimalFormat {
	public function __construct() {}
	public function testNumber() {
		$tmp = thx_format_DecimalFormat::number(thx_bigint_Decimals::fromFloat(1.0), 2, null);
		utest_Assert::equals("1.00", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 17, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$tmp1 = thx_format_DecimalFormat::number(thx_bigint_Decimals::fromFloat(1.2), 1, null);
		utest_Assert::equals("1.2", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 18, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$tmp2 = thx_format_DecimalFormat::number(thx__Decimal_Decimal_Impl_::fromInt(1), 0, null);
		utest_Assert::equals("1", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 19, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$tmp3 = thx_format_DecimalFormat::number(thx__Decimal_Decimal_Impl_::fromInt(10000), 0, null);
		utest_Assert::equals("10,000", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 20, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$tmp4 = thx_format_DecimalFormat::number(thx_bigint_Decimals::fromFloat(12345.6789), 3, null);
		utest_Assert::equals("12,345.679", $tmp4, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 21, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$tmp5 = thx_format_DecimalFormat::number(thx_bigint_Decimals::fromFloat(-1.0), 2, null);
		utest_Assert::equals("-1.00", $tmp5, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 23, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$tmp6 = thx_format_DecimalFormat::number(thx_bigint_Decimals::fromFloat(-1.2), 1, null);
		utest_Assert::equals("-1.2", $tmp6, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 24, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$tmp7 = thx_format_DecimalFormat::number(thx__Decimal_Decimal_Impl_::fromInt(-1), 0, null);
		utest_Assert::equals("-1", $tmp7, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 25, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$tmp8 = thx_format_DecimalFormat::number(thx__Decimal_Decimal_Impl_::fromInt(-10000), 0, null);
		utest_Assert::equals("-10,000", $tmp8, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 26, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$tmp9 = thx_format_DecimalFormat::number(thx_bigint_Decimals::fromFloat(-12345.6789), 3, null);
		utest_Assert::equals("-12,345.679", $tmp9, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 27, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$this1 = thx__Decimal_Decimal_Impl_::fromInt(2);
		$exp = $this1->pow(50);
		$tmp10 = thx_format_DecimalFormat::number($exp, 2, null);
		utest_Assert::equals("1,125,899,906,842,624.00", $tmp10, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 30, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
		$this2 = thx__Decimal_Decimal_Impl_::fromInt(2);
		$exp1 = $this2->pow(-18);
		$tmp11 = thx_format_DecimalFormat::number($exp1, 11, null);
		utest_Assert::equals("0.000003814610", $tmp11, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 33, "className" => "thx.format.TestDecimalFormat", "methodName" => "testNumber")));
	}
	public function testCurrency() {
		$tmp = thx_format_DecimalFormat::currency(thx_bigint_Decimals::fromFloat(-12345.6789), null, null, null);
		utest_Assert::equals("(¤12,345.68)", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 37, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCurrency")));
	}
	public function testCurrencyIT() {
		$tmp = thx_format_DecimalFormat::currency(thx_bigint_Decimals::fromFloat(-12345.6789), null, null, thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("-€ 12.345,68", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 41, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCurrencyIT")));
	}
	public function testCurrencyUS() {
		$tmp = thx_format_DecimalFormat::currency(thx_bigint_Decimals::fromFloat(-12345.6789), null, null, thx_format_TestDecimalFormat::$us);
		utest_Assert::equals("(\$12,345.68)", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 45, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCurrencyUS")));
	}
	public function testPercent() {
		$tmp = thx_format_DecimalFormat::percent(thx_bigint_Decimals::fromFloat(0.02333), null, null);
		utest_Assert::equals("2.33 %", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 49, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPercent")));
		$tmp1 = thx_format_DecimalFormat::percent(thx_bigint_Decimals::fromFloat(0.02333), null, thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("2,33%", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 50, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPercent")));
	}
	public function testPermille() {
		$tmp = thx_format_DecimalFormat::permille(thx_bigint_Decimals::fromFloat(0.02333), null, null);
		utest_Assert::equals("23.33 ‰", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 54, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPermille")));
		$tmp1 = thx_format_DecimalFormat::permille(thx_bigint_Decimals::fromFloat(0.02333), null, thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("23,33‰", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 55, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPermille")));
	}
	public function testUnit() {
		$tmp = thx_format_DecimalFormat::unit(thx_bigint_Decimals::fromFloat(23.3333), 2, "kg.", null);
		utest_Assert::equals("23.33 kg.", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 59, "className" => "thx.format.TestDecimalFormat", "methodName" => "testUnit")));
		$tmp1 = thx_format_DecimalFormat::unit(thx_bigint_Decimals::fromFloat(23.3333), 2, "kg.", thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("23,33kg.", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 60, "className" => "thx.format.TestDecimalFormat", "methodName" => "testUnit")));
	}
	public function testDecimal() {
		$tmp = thx_format_DecimalFormat::format(thx__Decimal_Decimal_Impl_::fromInt(12), "d", null);
		utest_Assert::equals("12", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 64, "className" => "thx.format.TestDecimalFormat", "methodName" => "testDecimal")));
		$tmp1 = thx_format_DecimalFormat::format(thx__Decimal_Decimal_Impl_::fromInt(12), "d4", null);
		utest_Assert::equals("0012", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 65, "className" => "thx.format.TestDecimalFormat", "methodName" => "testDecimal")));
	}
	public function testFormatFixed() {
		$tmp = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(1234.5678), "f", null);
		utest_Assert::equals("1234.57", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 69, "className" => "thx.format.TestDecimalFormat", "methodName" => "testFormatFixed")));
		$tmp1 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(1234.5678), "f", thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("1234,57", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 70, "className" => "thx.format.TestDecimalFormat", "methodName" => "testFormatFixed")));
		$tmp2 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(1234.5678), "f4", null);
		utest_Assert::equals("1234.5678", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 71, "className" => "thx.format.TestDecimalFormat", "methodName" => "testFormatFixed")));
	}
	public function testExponential() {
		$tmp = thx_format_DecimalFormat::exponential(thx__Decimal_Decimal_Impl_::fromInt(10), null, null, null, null);
		utest_Assert::equals("1.000000e+001", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 75, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp1 = thx_format_DecimalFormat::exponential(thx__Decimal_Decimal_Impl_::fromInt(-10), null, null, null, null);
		utest_Assert::equals("-1.000000e+001", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 76, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp2 = thx_format_DecimalFormat::exponential(thx__Decimal_Decimal_Impl_::fromInt(1), null, null, null, null);
		utest_Assert::equals("1.000000e+000", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 77, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp3 = thx_format_DecimalFormat::exponential(thx__Decimal_Decimal_Impl_::fromInt(-1), null, null, null, null);
		utest_Assert::equals("-1.000000e+000", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 78, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp4 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(0.7), null, null, null, null);
		utest_Assert::equals("7.000000e-001", $tmp4, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 79, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp5 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(-0.7), null, null, null, null);
		utest_Assert::equals("-7.000000e-001", $tmp5, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 80, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp6 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(1.234e3), null, null, null, null);
		utest_Assert::equals("1.234000e+003", $tmp6, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 82, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp7 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(1.234e-003), null, null, null, null);
		utest_Assert::equals("1.234000e-003", $tmp7, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 83, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp8 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(0.001234), null, null, null, null);
		utest_Assert::equals("1.234000e-003", $tmp8, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 84, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp9 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(-1.234e3), null, null, null, null);
		utest_Assert::equals("-1.234000e+003", $tmp9, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 85, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp10 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(-1.234e-003), null, null, null, null);
		utest_Assert::equals("-1.234000e-003", $tmp10, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 86, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp11 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(1.234e50), null, null, null, null);
		utest_Assert::equals("1.234000e+050", $tmp11, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 88, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp12 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(1.234e-50), null, null, null, null);
		utest_Assert::equals("1.234000e-050", $tmp12, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 89, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp13 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(-1.234e50), null, null, null, null);
		utest_Assert::equals("-1.234000e+050", $tmp13, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 90, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp14 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(-1.234e-50), null, null, null, null);
		utest_Assert::equals("-1.234000e-050", $tmp14, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 91, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp15 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(1.234e3), 2, null, null, null);
		utest_Assert::equals("1.23e+003", $tmp15, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 93, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp16 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(1.234e-003), 2, null, null, null);
		utest_Assert::equals("1.23e-003", $tmp16, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 94, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp17 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(-1.234e3), 2, null, null, null);
		utest_Assert::equals("-1.23e+003", $tmp17, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 95, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp18 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(-1.234e-003), 2, null, null, null);
		utest_Assert::equals("-1.23e-003", $tmp18, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 96, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp19 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(1.234e3), 2, null, null, thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("1,23e+003", $tmp19, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 98, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp20 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(1.234e-003), 2, null, null, thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("1,23e-003", $tmp20, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 99, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp21 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(-1.234e3), 2, null, null, thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("-1,23e+003", $tmp21, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 100, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
		$tmp22 = thx_format_DecimalFormat::exponential(thx_bigint_Decimals::fromFloat(-1.234e-003), 2, null, null, thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("-1,23e-003", $tmp22, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 101, "className" => "thx.format.TestDecimalFormat", "methodName" => "testExponential")));
	}
	public function testPrintfd() {
		$n = thx__Decimal_Decimal_Impl_::fromInt(461012);
		$tmp = thx_format_DecimalFormat::printf($n, "%d", null);
		utest_Assert::equals("461012", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 106, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPrintfd")));
		$tmp1 = thx_format_DecimalFormat::printf($n, "%08d", null);
		utest_Assert::equals("00461012", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 107, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPrintfd")));
		$tmp2 = thx_format_DecimalFormat::printf($n, "%+8d", null);
		utest_Assert::equals(" +461012", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 108, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPrintfd")));
		$tmp3 = thx_format_DecimalFormat::printf($n, "%-8d", null);
		utest_Assert::equals("461012  ", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 109, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPrintfd")));
		$tmp4 = thx_format_DecimalFormat::printf($n, "%-+8d", null);
		utest_Assert::equals("+461012 ", $tmp4, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 110, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPrintfd")));
	}
	public function testPrintfb() {
		$n = thx__Decimal_Decimal_Impl_::fromInt(10);
		$tmp = thx_format_DecimalFormat::printf($n, "%b", null);
		utest_Assert::equals("1010", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 115, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPrintfb")));
		$tmp1 = thx_format_DecimalFormat::printf($n, "%#b", null);
		utest_Assert::equals("b1010", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 116, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPrintfb")));
		$tmp2 = thx_format_DecimalFormat::printf($n, "%#B", null);
		utest_Assert::equals("B1010", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 117, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPrintfb")));
		$tmp3 = thx_format_DecimalFormat::printf($n, "%#10B", null);
		utest_Assert::equals("     B1010", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 118, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPrintfb")));
		$tmp4 = thx_format_DecimalFormat::printf($n, "%#010B", null);
		utest_Assert::equals("00000B1010", $tmp4, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 119, "className" => "thx.format.TestDecimalFormat", "methodName" => "testPrintfb")));
	}
	public function testRounding() {
		$tmp = thx_format_DecimalFormat::fixed(thx_bigint_Decimals::fromFloat(0.89), 1, null);
		utest_Assert::equals("0.9", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 123, "className" => "thx.format.TestDecimalFormat", "methodName" => "testRounding")));
		$tmp1 = thx_format_DecimalFormat::fixed(thx_bigint_Decimals::fromFloat(0.99), 0, null);
		utest_Assert::equals("1", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 124, "className" => "thx.format.TestDecimalFormat", "methodName" => "testRounding")));
		$tmp2 = thx_format_DecimalFormat::fixed(thx_bigint_Decimals::fromFloat(0.91), 1, null);
		utest_Assert::equals("0.9", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 125, "className" => "thx.format.TestDecimalFormat", "methodName" => "testRounding")));
	}
	public function testDifferentGroups() {
		$value = thx_bigint_Decimals::fromFloat(1234567890.123456);
		$tmp = thx_format_DecimalFormat::number($value, null, thx_format_TestDecimalFormat::$asIn);
		utest_Assert::equals("1,23,45,67,890.12", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 130, "className" => "thx.format.TestDecimalFormat", "methodName" => "testDifferentGroups")));
		$tmp1 = thx_format_DecimalFormat::number($value, null, thx_format_TestDecimalFormat::$baRu);
		utest_Assert::equals("1234567 890,12", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 131, "className" => "thx.format.TestDecimalFormat", "methodName" => "testDifferentGroups")));
		$tmp2 = thx_format_DecimalFormat::format($value, "0,0000.0", thx_format_TestDecimalFormat::$asIn);
		utest_Assert::equals("1,23,45,67,890.1", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 133, "className" => "thx.format.TestDecimalFormat", "methodName" => "testDifferentGroups")));
		$tmp3 = thx_format_DecimalFormat::format($value, "0,0000.0", thx_format_TestDecimalFormat::$baRu);
		utest_Assert::equals("1234567 890,1", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 134, "className" => "thx.format.TestDecimalFormat", "methodName" => "testDifferentGroups")));
	}
	public function testCustomFormat0() {
		$value = thx__Decimal_Decimal_Impl_::fromInt(123);
		$tmp = thx_format_DecimalFormat::format($value, "00000", null);
		utest_Assert::equals("00123", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 140, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$value = thx_bigint_Decimals::fromFloat(1.2);
		$tmp1 = thx_format_DecimalFormat::format($value, "0.00", null);
		utest_Assert::equals("1.20", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 143, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp2 = thx_format_DecimalFormat::format($value, "00.00", thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("01,20", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 144, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$value = thx_bigint_Decimals::fromFloat(0.56);
		$tmp3 = thx_format_DecimalFormat::format($value, "0.0", thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("0,6", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 146, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$value = thx__Decimal_Decimal_Impl_::fromInt(1234567890);
		$tmp4 = thx_format_DecimalFormat::format($value, "0,0", null);
		utest_Assert::equals("1,234,567,890", $tmp4, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 149, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp5 = thx_format_DecimalFormat::format($value, "0,0", thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("1.234.567.890", $tmp5, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 150, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$value = thx_bigint_Decimals::fromFloat(1234567890.123456);
		$tmp6 = thx_format_DecimalFormat::format($value, "0,0.0", null);
		utest_Assert::equals("1,234,567,890.1", $tmp6, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 153, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$value = thx_bigint_Decimals::fromFloat(1234.567890);
		$tmp7 = thx_format_DecimalFormat::format($value, "0,0.00", null);
		utest_Assert::equals("1,234.57", $tmp7, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 156, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$value = thx_bigint_Decimals::parse("1234567890.12345");
		$tmp8 = thx_format_DecimalFormat::format($value, "(000) 0,0.000", null);
		utest_Assert::equals("(1,234,567,8) 90.123", $tmp8, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 158, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp9 = thx_format_DecimalFormat::format($value, "(000) 00.000", null);
		utest_Assert::equals("(12345678) 90.123", $tmp9, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 159, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp10 = thx_format_DecimalFormat::format($value, "(000) 0.000", null);
		utest_Assert::equals("(123456789) 0.123", $tmp10, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 160, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp11 = thx_format_DecimalFormat::format($value, "0.0", null);
		utest_Assert::equals("1234567890.1", $tmp11, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 161, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp12 = thx_format_DecimalFormat::format($value, "(000) 0000", null);
		utest_Assert::equals("(123456) 7890", $tmp12, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 162, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$value = thx_bigint_Decimals::fromFloat(1.23);
		$tmp13 = thx_format_DecimalFormat::format($value, "(000) 0,0.000", null);
		utest_Assert::equals("(00,0) 01.230", $tmp13, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 165, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp14 = thx_format_DecimalFormat::format($value, "(000) 00.000", null);
		utest_Assert::equals("(000) 01.230", $tmp14, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 166, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp15 = thx_format_DecimalFormat::format($value, "(000) 0.000", null);
		utest_Assert::equals("(000) 1.230", $tmp15, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 167, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp16 = thx_format_DecimalFormat::format($value, "0.0", null);
		utest_Assert::equals("1.2", $tmp16, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 168, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp17 = thx_format_DecimalFormat::format($value, "(000) 0000", null);
		utest_Assert::equals("(000) 0001", $tmp17, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 169, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp18 = thx_format_DecimalFormat::format($value, "(000) 0000;(000) 0000-", null);
		utest_Assert::equals("(000) 0001", $tmp18, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 170, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
		$tmp19 = thx_format_DecimalFormat::format($value->negate(), "(000) 0000;(000) 0000-", null);
		utest_Assert::equals("(000) 0001-", $tmp19, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 171, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormat0")));
	}
	public function testCustomFormatHash() {
		$value = thx_bigint_Decimals::fromFloat(1.2);
		$tmp = thx_format_DecimalFormat::format($value, "#.##", null);
		utest_Assert::equals("1.2", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 177, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$value = thx__Decimal_Decimal_Impl_::fromInt(123);
		$tmp1 = thx_format_DecimalFormat::format($value, "####", null);
		utest_Assert::equals("123", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 180, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$value = thx__Decimal_Decimal_Impl_::fromInt(123456);
		$tmp2 = thx_format_DecimalFormat::format($value, "[##-##-##]", thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("[12-34-56]", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 184, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$value = thx__Decimal_Decimal_Impl_::fromInt(1234567890);
		$tmp3 = thx_format_DecimalFormat::format($value, "#", null);
		utest_Assert::equals("1234567890", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 187, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp4 = thx_format_DecimalFormat::format($value, "(###) ###-####\"", null);
		utest_Assert::equals("(123) 456-7890", $tmp4, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 188, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$value = thx_bigint_Decimals::parse("1234567890.12345");
		$tmp5 = thx_format_DecimalFormat::format($value, "(###) #,#.###", null);
		utest_Assert::equals("(1,234,567,8) 90.123", $tmp5, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 191, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp6 = thx_format_DecimalFormat::format($value, "(###) ##.###", null);
		utest_Assert::equals("(12345678) 90.123", $tmp6, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 192, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp7 = thx_format_DecimalFormat::format($value, "(###) #.###", null);
		utest_Assert::equals("(123456789) 0.123", $tmp7, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 193, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp8 = thx_format_DecimalFormat::format($value, "#.#", null);
		utest_Assert::equals("1234567890.1", $tmp8, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 194, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp9 = thx_format_DecimalFormat::format($value, "(###) ####", null);
		utest_Assert::equals("(123456) 7890", $tmp9, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 195, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$value = thx_bigint_Decimals::fromFloat(1.23);
		$tmp10 = thx_format_DecimalFormat::format($value, "(###) #,#.###", null);
		utest_Assert::equals("() 1.23", $tmp10, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 198, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp11 = thx_format_DecimalFormat::format($value, "(###) ##.###", null);
		utest_Assert::equals("() 1.23", $tmp11, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 199, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp12 = thx_format_DecimalFormat::format($value, "(###) #.###", null);
		utest_Assert::equals("() 1.23", $tmp12, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 200, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp13 = thx_format_DecimalFormat::format($value, "#.#", null);
		utest_Assert::equals("1.2", $tmp13, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 201, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp14 = thx_format_DecimalFormat::format($value, "(###) ####", null);
		utest_Assert::equals("() 1", $tmp14, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 202, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp15 = thx_format_DecimalFormat::format($value, "(###) ####;(###) ####-", null);
		utest_Assert::equals("() 1", $tmp15, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 203, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
		$tmp16 = thx_format_DecimalFormat::format($value->negate(), "(###) ####;(###) ####-", null);
		utest_Assert::equals("() 1-", $tmp16, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 204, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomFormatHash")));
	}
	public function testCustomDecimalSeparator() {
		$value = thx__Decimal_Decimal_Impl_::fromInt(1234567890);
		$tmp = thx_format_DecimalFormat::format($value, "#,#", null);
		utest_Assert::equals("1,234,567,890", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 210, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomDecimalSeparator")));
		$tmp1 = thx_format_DecimalFormat::format($value, "#,#,,", null);
		utest_Assert::equals("1,235", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 212, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomDecimalSeparator")));
		$tmp2 = thx_format_DecimalFormat::format($value, "#,##0,,", null);
		utest_Assert::equals("1,235", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 213, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomDecimalSeparator")));
		$tmp3 = thx_format_DecimalFormat::format($value, "#,#,,,", null);
		utest_Assert::equals("1", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 215, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomDecimalSeparator")));
	}
	public function testCustomDecimalFranction() {
		$value = thx_bigint_Decimals::fromFloat(1.2);
		$tmp = thx_format_DecimalFormat::format($value, "0.00", null);
		utest_Assert::equals("1.20", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 221, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomDecimalFranction")));
		$tmp1 = thx_format_DecimalFormat::format($value, "00.00", null);
		utest_Assert::equals("01.20", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 222, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomDecimalFranction")));
		$tmp2 = thx_format_DecimalFormat::format($value, "00.00", thx_format_TestDecimalFormat::$it);
		utest_Assert::equals("01,20", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 223, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomDecimalFranction")));
		$value = thx_bigint_Decimals::fromFloat(0.086);
		$tmp3 = thx_format_DecimalFormat::format($value, "#0.##%", null);
		utest_Assert::equals("8.6%", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 226, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomDecimalFranction")));
		$tmp4 = thx_format_DecimalFormat::format($value, "#0.00%", null);
		utest_Assert::equals("8.60%", $tmp4, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 227, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomDecimalFranction")));
		$value = thx__Decimal_Decimal_Impl_::fromInt(86000);
		$tmp5 = thx_format_DecimalFormat::format($value, "0.###E+0", null);
		utest_Assert::equals("8.6E+4", $tmp5, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 230, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomDecimalFranction")));
	}
	public function testCustomPercentSpecifier() {
		$tmp = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(0.086), "#0.##%", null);
		utest_Assert::equals("8.6%", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 234, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomPercentSpecifier")));
	}
	public function testCustomPermilleSpecifier() {
		$tmp = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(0.00354), "#0.##‰", null);
		utest_Assert::equals("3.54‰", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 238, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomPermilleSpecifier")));
	}
	public function testCustomE() {
		$value = thx__Decimal_Decimal_Impl_::fromInt(86000);
		$tmp = thx_format_DecimalFormat::format($value, "0.###E+0", null);
		utest_Assert::equals("8.6E+4", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 243, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomE")));
		$tmp1 = thx_format_DecimalFormat::format($value, "0.###E+000", null);
		utest_Assert::equals("8.6E+004", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 244, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomE")));
		$tmp2 = thx_format_DecimalFormat::format($value, "0.###E-000", null);
		utest_Assert::equals("8.6E004", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 245, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomE")));
	}
	public function testCustomEscape() {
		$value = thx__Decimal_Decimal_Impl_::fromInt(123);
		$tmp = thx_format_DecimalFormat::format($value, "\\#\\#\\# ##0 dollars and \\0\\0 c\\ents \\#\\#\\#", null);
		utest_Assert::equals("### 123 dollars and 00 cents ###", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 250, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomEscape")));
		$tmp1 = thx_format_DecimalFormat::format($value, "\\\\\\\\\\\\ ##0 dollars and \\0\\0 c\\ents \\\\\\\\\\\\", null);
		utest_Assert::equals("\\\\\\ 123 dollars and 00 cents \\\\\\", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 251, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomEscape")));
	}
	public function testSectionSeparator() {
		$pos = thx_bigint_Decimals::fromFloat(1234.0);
		$neg = thx_bigint_Decimals::fromFloat(-1234.0);
		$zero = thx__Decimal_Decimal_Impl_::fromInt(0);
		$tmp = thx_format_DecimalFormat::format($pos, "##;(##)", null);
		utest_Assert::equals("1234", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 262, "className" => "thx.format.TestDecimalFormat", "methodName" => "testSectionSeparator")));
		$tmp1 = thx_format_DecimalFormat::format($neg, "##;(##)", null);
		utest_Assert::equals("(1234)", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 263, "className" => "thx.format.TestDecimalFormat", "methodName" => "testSectionSeparator")));
		$tmp2 = thx_format_DecimalFormat::format($zero, "##;(##)", null);
		utest_Assert::equals("0", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 264, "className" => "thx.format.TestDecimalFormat", "methodName" => "testSectionSeparator")));
		$tmp3 = thx_format_DecimalFormat::format($pos, "##;(##);**Z\\ero**", null);
		utest_Assert::equals("1234", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 266, "className" => "thx.format.TestDecimalFormat", "methodName" => "testSectionSeparator")));
		$tmp4 = thx_format_DecimalFormat::format($neg, "##;(##);**Z\\ero**", null);
		utest_Assert::equals("(1234)", $tmp4, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 267, "className" => "thx.format.TestDecimalFormat", "methodName" => "testSectionSeparator")));
		$tmp5 = thx_format_DecimalFormat::format($zero, "##;(##);**Z\\ero**", null);
		utest_Assert::equals("**Zero**", $tmp5, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 268, "className" => "thx.format.TestDecimalFormat", "methodName" => "testSectionSeparator")));
	}
	public function testCustomRounding() {
		$tmp = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(0.99), "0", null);
		utest_Assert::equals("1", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 272, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomRounding")));
		$tmp1 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(0.99), "0.0", null);
		utest_Assert::equals("1.0", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 273, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomRounding")));
		$tmp2 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(0.099), "0.0", null);
		utest_Assert::equals("0.1", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 274, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomRounding")));
		$tmp3 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(9.9), "0", null);
		utest_Assert::equals("10", $tmp3, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 275, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomRounding")));
		$tmp4 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(99.9), "0", null);
		utest_Assert::equals("100", $tmp4, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 276, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomRounding")));
		$tmp5 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(-0.99), "0", null);
		utest_Assert::equals("-1", $tmp5, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 277, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomRounding")));
		$tmp6 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(-0.99), "0.0", null);
		utest_Assert::equals("-1.0", $tmp6, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 278, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomRounding")));
		$tmp7 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(-0.099), "0.0", null);
		utest_Assert::equals("-0.1", $tmp7, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 279, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomRounding")));
		$tmp8 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(-9.9), "0", null);
		utest_Assert::equals("-10", $tmp8, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 280, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomRounding")));
		$tmp9 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(-99.9), "0", null);
		utest_Assert::equals("-100", $tmp9, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 281, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomRounding")));
	}
	public function testCustomEscapedDecimalSeparator() {
		$tmp = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(12.34), "0\\.0.0", null);
		utest_Assert::equals("1.2.3", $tmp, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 285, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomEscapedDecimalSeparator")));
		$tmp1 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(12.34), "0'.'0.0", null);
		utest_Assert::equals("1.2.3", $tmp1, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 286, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomEscapedDecimalSeparator")));
		$tmp2 = thx_format_DecimalFormat::format(thx_bigint_Decimals::fromFloat(12.34), "0\".\"0.0", null);
		utest_Assert::equals("1.2.3", $tmp2, null, _hx_anonymous(array("fileName" => "TestDecimalFormat.hx", "lineNumber" => 287, "className" => "thx.format.TestDecimalFormat", "methodName" => "testCustomEscapedDecimalSeparator")));
	}
	static $it;
	static $us;
	static $asIn;
	static $baRu;
	function __toString() { return 'thx.format.TestDecimalFormat'; }
}
thx_format_TestDecimalFormat::$it = thx_format_TestDecimalFormat_0();
thx_format_TestDecimalFormat::$us = thx_format_TestDecimalFormat_1();
thx_format_TestDecimalFormat::$asIn = thx_format_TestDecimalFormat_2();
thx_format_TestDecimalFormat::$baRu = thx_format_TestDecimalFormat_3();
function thx_format_TestDecimalFormat_0() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "Italia", "separatorList" => ";", "nameNative" => "italiano", "number" => _hx_anonymous(array("patternPositiveCurrency" => 2, "patternPositivePercent" => 1, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ",", "separatorGroupNumber" => ".", "signPositive" => "+", "symbolPositiveInfinity" => "+Infinito", "patternNegativeCurrency" => 9, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => ".", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non un numero reale", "separatorGroupPercent" => ".", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinito", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Italian", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dom", "lun", "mar", "mer", "gio", "ven", "sab"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("do", "lu", "ma", "me", "gi", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstFourDayWeek", "nameCalendarNative" => "calendario gregoriano", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 2, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))))), "win3" => "ITA", "nameRegionEnglish" => "Italy", "lcid" => 1040, "iso3" => "ita", "iso2" => "it", "ietf" => "it-IT", "code" => "it-IT"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_format_TestDecimalFormat_1() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "United States", "separatorList" => ",", "nameNative" => "English", "number" => _hx_anonymous(array("patternPositiveCurrency" => 0, "patternPositivePercent" => 0, "symbolCurrency" => "\$", "signNegative" => "-", "patternNegativePercent" => 0, "separatorDecimalPercent" => ".", "separatorGroupNumber" => ",", "signPositive" => "+", "symbolPositiveInfinity" => "Infinity", "patternNegativeCurrency" => 0, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ".", "separatorGroupCurrency" => ",", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ".", "symbolNaN" => "NaN", "separatorGroupPercent" => ",", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinity", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "English", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))), "patternMonthDay" => "MMMM dd", "patternYearMonth" => "MMMM, yyyy", "firstDayOfWeekIndex" => 0, "patternTimeLong" => "h:mm:ss tt", "separatorTime" => ":", "patternTimeShort" => "h:mm tt", "nameDaysAbbreviated" => (new _hx_array(array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))), "designatorPm" => "PM", "designatorAm" => "AM", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "firstDayOfWeekName" => "Sunday", "nameDaysShortest" => (new _hx_array(array("Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd, MMMM dd, yyyy", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "Gregorian Calendar", "patternDateTimeFull" => "dddd, MMMM dd, yyyy h:mm:ss tt", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "M/d/yyyy", "nameMonths" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))))), "win3" => "ENU", "nameRegionEnglish" => "United States", "lcid" => 1033, "iso3" => "eng", "iso2" => "en", "ietf" => "en-US", "code" => "en-US"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_format_TestDecimalFormat_2() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "ভাৰত", "separatorList" => ",", "nameNative" => "অসমীয়া", "number" => _hx_anonymous(array("patternPositiveCurrency" => 1, "patternPositivePercent" => 1, "symbolCurrency" => "₹", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ".", "separatorGroupNumber" => ",", "signPositive" => "+", "symbolPositiveInfinity" => "infinity", "patternNegativeCurrency" => 12, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3, 2))), "separatorDecimalCurrency" => ".", "separatorGroupCurrency" => ",", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3, 2))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ".", "symbolNaN" => "nan", "separatorGroupPercent" => ",", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-infinity", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3, 2))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Assamese", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("সোমবাৰ", "মঙ্গলবাৰ", "বুধবাৰ", "বৃহস্পতিবাৰ", "শুক্রবাৰ", "শনিবাৰ", "ৰবিবাৰ"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM,yy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "tt h:mm:ss", "separatorTime" => ":", "patternTimeShort" => "tt h:mm", "nameDaysAbbreviated" => (new _hx_array(array("সোম.", "মঙ্গল.", "বুধ.", "বৃহ.", "শুক্র.", "শনি.", "ৰবি."))), "designatorPm" => "আবেলি", "designatorAm" => "ৰাতিপু", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("জানু", "ফেব্রু", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টে", "অক্টো", "নবে", "ডিচে", ""))), "separatorDate" => "-", "nameMonthGenitives" => (new _hx_array(array("জানুৱাৰী", "ফেব্রুৱাৰী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টেম্বর", "অক্টোবর", "নবেম্বর", "ডিচেম্বর", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("সো", "ম", "বু", "বৃ", "শু", "শ", "র"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "yyyy,MMMM dd, dddd", "calendarWeekRuleName" => "FirstFourDayWeek", "nameCalendarNative" => "ইংৰাজী কেলেণ্ডাৰ", "patternDateTimeFull" => "yyyy,MMMM dd, dddd tt h:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 2, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd-MM-yyyy", "nameMonths" => (new _hx_array(array("জানুৱাৰী", "ফেব্রুৱাৰী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টেম্বর", "অক্টোবর", "নবেম্বর", "ডিচেম্বর", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("জানু", "ফেব্রু", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টে", "অক্টো", "নবে", "ডিচে", ""))))), "win3" => "ASM", "nameRegionEnglish" => "India", "lcid" => 1101, "iso3" => "asm", "iso2" => "as", "ietf" => "as-IN", "code" => "as-IN"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_format_TestDecimalFormat_3() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "Россия", "separatorList" => ";", "nameNative" => "Башҡорт", "number" => _hx_anonymous(array("patternPositiveCurrency" => 3, "patternPositivePercent" => 1, "symbolCurrency" => "₽", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ",", "separatorGroupNumber" => " ", "signPositive" => "+", "symbolPositiveInfinity" => "бесконечность", "patternNegativeCurrency" => 8, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3, 0))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => " ", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3, 0))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "NaN", "separatorGroupPercent" => " ", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-бесконечность", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3, 0))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Bashkir", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("Йәкшәмбе", "Дүшәмбе", "Шишәмбе", "Шаршамбы", "Кесаҙна", "Йома", "Шәмбе"))), "patternMonthDay" => "MMMM dd", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "H:mm:ss", "separatorTime" => ":", "patternTimeShort" => "H:mm", "nameDaysAbbreviated" => (new _hx_array(array("Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("ғин", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""))), "separatorDate" => ".", "nameMonthGenitives" => (new _hx_array(array("ғинуар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "d MMMM yyyy 'й'", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "Григорий календары", "patternDateTimeFull" => "d MMMM yyyy 'й' H:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd.MM.yy", "nameMonths" => (new _hx_array(array("ғинуар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("ғин", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""))))), "win3" => "BAS", "nameRegionEnglish" => "Russia", "lcid" => 1133, "iso3" => "bak", "iso2" => "ba", "ietf" => "ba-RU", "code" => "ba-RU"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
