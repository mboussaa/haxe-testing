<?php

// Generated by Haxe 3.3.0
class thx_format_TestTimeFormat {
	public function __construct() {}
	public function testCustomFormat() {
		$tmp = thx_format_TimeFormat::format(thx__Time_Time_Impl_::fromString("245:30:00.1234567"), "H m, s.ff", thx_format_TestTimeFormat::$it);
		utest_Assert::equals("245 30, 0,12", $tmp, null, _hx_anonymous(array("fileName" => "TestTimeFormat.hx", "lineNumber" => 19, "className" => "thx.format.TestTimeFormat", "methodName" => "testCustomFormat")));
		$tmp1 = thx_format_TimeFormat::format(thx__Time_Time_Impl_::fromString("245:30:00.1234567"), "d.hh m, s.fff", thx_format_TestTimeFormat::$it);
		utest_Assert::equals("10,05 30, 0,123", $tmp1, null, _hx_anonymous(array("fileName" => "TestTimeFormat.hx", "lineNumber" => 20, "className" => "thx.format.TestTimeFormat", "methodName" => "testCustomFormat")));
		$tmp2 = thx_format_TimeFormat::format(thx__Time_Time_Impl_::fromString("245:30:00"), "H m, s.ff f", thx_format_TestTimeFormat::$it);
		utest_Assert::equals("245 30, 0 0", $tmp2, null, _hx_anonymous(array("fileName" => "TestTimeFormat.hx", "lineNumber" => 21, "className" => "thx.format.TestTimeFormat", "methodName" => "testCustomFormat")));
		$tmp3 = thx_format_TimeFormat::format(thx__Time_Time_Impl_::fromString("245:30:01"), "d.hh m s.fff ffff", thx_format_TestTimeFormat::$it);
		utest_Assert::equals("10,05 30 1 0000", $tmp3, null, _hx_anonymous(array("fileName" => "TestTimeFormat.hx", "lineNumber" => 22, "className" => "thx.format.TestTimeFormat", "methodName" => "testCustomFormat")));
		$tmp4 = thx_format_TimeFormat::format(thx__Time_Time_Impl_::fromString("245:30:00"), "H m, s.FF F", thx_format_TestTimeFormat::$it);
		utest_Assert::equals("245 30, 0 ", $tmp4, null, _hx_anonymous(array("fileName" => "TestTimeFormat.hx", "lineNumber" => 23, "className" => "thx.format.TestTimeFormat", "methodName" => "testCustomFormat")));
		$tmp5 = thx_format_TimeFormat::format(thx__Time_Time_Impl_::fromString("245:30:01"), "d.hh m, s.FFF FFFF", thx_format_TestTimeFormat::$it);
		utest_Assert::equals("10,05 30, 1 ", $tmp5, null, _hx_anonymous(array("fileName" => "TestTimeFormat.hx", "lineNumber" => 24, "className" => "thx.format.TestTimeFormat", "methodName" => "testCustomFormat")));
	}
	static $it;
	static $bn;
	static $us;
	static $t1;
	static $t2;
	function __toString() { return 'thx.format.TestTimeFormat'; }
}
thx_format_TestTimeFormat::$it = thx_format_TestTimeFormat_0();
thx_format_TestTimeFormat::$bn = thx_format_TestTimeFormat_1();
thx_format_TestTimeFormat::$us = thx_format_TestTimeFormat_2();
thx_format_TestTimeFormat::$t1 = thx__Time_Time_Impl_::fromString("13:45:30");
thx_format_TestTimeFormat::$t2 = thx__Time_Time_Impl_::fromString("-18:40:20");
function thx_format_TestTimeFormat_0() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "Italia", "separatorList" => ";", "nameNative" => "italiano", "number" => _hx_anonymous(array("patternPositiveCurrency" => 2, "patternPositivePercent" => 1, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ",", "separatorGroupNumber" => ".", "signPositive" => "+", "symbolPositiveInfinity" => "+Infinito", "patternNegativeCurrency" => 9, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => ".", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non un numero reale", "separatorGroupPercent" => ".", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinito", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Italian", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dom", "lun", "mar", "mer", "gio", "ven", "sab"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("do", "lu", "ma", "me", "gi", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstFourDayWeek", "nameCalendarNative" => "calendario gregoriano", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 2, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))))), "win3" => "ITA", "nameRegionEnglish" => "Italy", "lcid" => 1040, "iso3" => "ita", "iso2" => "it", "ietf" => "it-IT", "code" => "it-IT"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_format_TestTimeFormat_1() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "ভারত", "separatorList" => ",", "nameNative" => "বাংলা", "number" => _hx_anonymous(array("patternPositiveCurrency" => 2, "patternPositivePercent" => 2, "symbolCurrency" => "₹", "signNegative" => "-", "patternNegativePercent" => 2, "separatorDecimalPercent" => ".", "separatorGroupNumber" => ",", "signPositive" => "+", "symbolPositiveInfinity" => "Infinity", "patternNegativeCurrency" => 12, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3, 2))), "separatorDecimalCurrency" => ".", "separatorGroupCurrency" => ",", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3, 2))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ".", "symbolNaN" => "NaN", "separatorGroupPercent" => ",", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinity", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3, 2))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Bengali", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM, yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH.mm.ss", "separatorTime" => ".", "patternTimeShort" => "HH.mm", "nameDaysAbbreviated" => (new _hx_array(array("রবি.", "সোম.", "মঙ্গল.", "বুধ.", "বৃহস্পতি.", "শুক্র.", "শনি."))), "designatorPm" => "অপরাহ্ন", "designatorAm" => "পুর্বাহ্ন", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""))), "separatorDate" => "-", "nameMonthGenitives" => (new _hx_array(array("জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("র", "স", "ম", "ব", "ব", "শ", "শ"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dd MMMM yyyy", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "ইংরেজী ক্যালেন্ডার", "patternDateTimeFull" => "dd MMMM yyyy HH.mm.ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd-MM-yy", "nameMonths" => (new _hx_array(array("জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""))))), "win3" => "BNG", "nameRegionEnglish" => "India", "lcid" => 1093, "iso3" => "bng", "iso2" => "bn", "ietf" => "bn-IN", "code" => "bn-IN"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
function thx_format_TestTimeFormat_2() {
	{
		$o = _hx_anonymous(array("nameRegionNative" => "United States", "separatorList" => ",", "nameNative" => "English", "number" => _hx_anonymous(array("patternPositiveCurrency" => 0, "patternPositivePercent" => 0, "symbolCurrency" => "\$", "signNegative" => "-", "patternNegativePercent" => 0, "separatorDecimalPercent" => ".", "separatorGroupNumber" => ",", "signPositive" => "+", "symbolPositiveInfinity" => "Infinity", "patternNegativeCurrency" => 0, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ".", "separatorGroupCurrency" => ",", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ".", "symbolNaN" => "NaN", "separatorGroupPercent" => ",", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinity", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "English", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))), "patternMonthDay" => "MMMM dd", "patternYearMonth" => "MMMM, yyyy", "firstDayOfWeekIndex" => 0, "patternTimeLong" => "h:mm:ss tt", "separatorTime" => ":", "patternTimeShort" => "h:mm tt", "nameDaysAbbreviated" => (new _hx_array(array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))), "designatorPm" => "PM", "designatorAm" => "AM", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "firstDayOfWeekName" => "Sunday", "nameDaysShortest" => (new _hx_array(array("Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd, MMMM dd, yyyy", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "Gregorian Calendar", "patternDateTimeFull" => "dddd, MMMM dd, yyyy h:mm:ss tt", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "M/d/yyyy", "nameMonths" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))))), "win3" => "ENU", "nameRegionEnglish" => "United States", "lcid" => 1033, "iso3" => "eng", "iso2" => "en", "ietf" => "en-US", "code" => "en-US"));
		$tmp = $o->code;
		$tmp1 = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp1 = null;
		} else {
			$o1 = $o->dateTime;
			$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
		}
		$tmp2 = $o->ietf;
		$tmp3 = $o->isNeutral;
		$tmp4 = $o->iso2;
		$tmp5 = $o->iso3;
		$tmp6 = $o->isRightToLeft;
		$tmp7 = $o->lcid;
		$tmp8 = $o->nameCalendar;
		$tmp9 = $o->nameEnglish;
		$tmp10 = $o->nameNative;
		$tmp11 = $o->nameRegionEnglish;
		$tmp12 = $o->nameRegionNative;
		$tmp13 = null;
		if(null === _hx_field($o, "number")) {
			$tmp13 = null;
		} else {
			$o2 = $o->number;
			$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
		}
		$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
		return thx_culture_Culture::register($tmp14);
	}
}
