// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.format {
	public class TestDateFormat : global::haxe.lang.HxObject {
		
		static TestDateFormat() {
			unchecked {
				object __temp_stmt13 = null;
				{
					object o = null;
					{
						object __temp_odecl1 = new global::haxe.lang.DynamicObject(new int[]{41050500, 114759225, 177600534, 193568515, 214711673, 282949586, 311921353, 1112096333, 1293712380, 1484698101, 1543554379, 1610611779, 1660995221, 1798631236, 2037785099, 2058605085, 2062500402}, new object[]{"\u2030", "+Infinito", "+", ".", ",", "-", "\u20ac", "%", new global::Array<int>(new int[]{3}), "-Infinito", ".", "Non un numero reale", ",", new global::Array<int>(new int[]{3}), ".", ",", new global::Array<int>(new int[]{3})}, new int[]{45312342, 253833312, 652148892, 822857114, 1437940672, 1531979784, 1747840398, 2013154798}, new double[]{((double) (9) ), ((double) (1) ), ((double) (1) ), ((double) (2) ), ((double) (2) ), ((double) (2) ), ((double) (1) ), ((double) (2) )});
						object __temp_odecl2 = new global::haxe.lang.DynamicObject(new int[]{106319913, 354602035, 453240570, 529765024, 554059097, 584411450, 602680035, 635699692, 665670594, 667371489, 694450483, 699988920, 726839840, 726843185, 742587063, 816375999, 872279826, 908638873, 980455379, 990364012, 1055554178, 1079146715, 1273872862, 1528104702, 1700034528}, new object[]{"Gregorian", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "dddd d MMMM yyyy HH:mm:ss", "calendario gregoriano", "FirstFourDayWeek", "dddd d MMMM yyyy", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", new global::Array<object>(new object[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), "Monday", new global::Array<object>(new object[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), "/", new global::Array<object>(new object[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "", "", new global::Array<object>(new object[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), "HH:mm", ":", "HH:mm:ss", "MMMM yyyy", "dd MMMM", new global::Array<object>(new object[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new global::Array<object>(new object[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new global::Array<object>(new object[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), "dd/MM/yyyy", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"}, new int[]{931922363, 1812362308}, new double[]{((double) (1) ), ((double) (2) )});
						o = new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{"Gregorian", __temp_odecl1, "italiano", ";", "Italia", "it-IT", "it-IT", "it", "ita", "Italy", "ITA", __temp_odecl2, "Italian", false, false}, new int[]{1202619922}, new double[]{((double) (1040) )});
					}
					
					object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
					global::thx.culture.DateFormatInfo tmp1 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
						tmp1 = null;
					}
					else {
						object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
						tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
					}
					
					object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
					object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
					object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
					object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
					object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
					object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
					object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
					object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
					object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
					object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
					object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
					global::thx.culture.NumberFormatInfo tmp13 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
						tmp13 = null;
					}
					else {
						object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
						tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
					}
					
					__temp_stmt13 = global::thx.culture.Culture.register(new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true))));
				}
				
				global::thx.format.TestDateFormat.it = ((global::thx.culture.Culture) (__temp_stmt13) );
				object __temp_stmt14 = null;
				{
					object o = null;
					{
						object __temp_odecl3 = new global::haxe.lang.DynamicObject(new int[]{41050500, 114759225, 177600534, 193568515, 214711673, 282949586, 311921353, 1112096333, 1293712380, 1484698101, 1543554379, 1610611779, 1660995221, 1798631236, 2037785099, 2058605085, 2062500402}, new object[]{"\u2030", "+Infinito", "+", "\'", ".", "-", "fr.", "%", new global::Array<int>(new int[]{3}), "-Infinito", "\'", "Non un numero reale", ".", new global::Array<int>(new int[]{3}), "\'", ".", new global::Array<int>(new int[]{3})}, new int[]{45312342, 253833312, 652148892, 822857114, 1437940672, 1531979784, 1747840398, 2013154798}, new double[]{((double) (2) ), ((double) (1) ), ((double) (1) ), ((double) (2) ), ((double) (2) ), ((double) (2) ), ((double) (1) ), ((double) (2) )});
						object __temp_odecl4 = new global::haxe.lang.DynamicObject(new int[]{106319913, 354602035, 453240570, 529765024, 554059097, 584411450, 602680035, 635699692, 665670594, 667371489, 694450483, 699988920, 726839840, 726843185, 742587063, 816375999, 872279826, 908638873, 980455379, 990364012, 1055554178, 1079146715, 1273872862, 1528104702, 1700034528}, new object[]{"Gregorian", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "dddd, d. MMMM yyyy HH:mm:ss", "calendario gregoriano", "FirstFourDayWeek", "dddd, d. MMMM yyyy", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", new global::Array<object>(new object[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), "Monday", new global::Array<object>(new object[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), ".", new global::Array<object>(new object[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "", "", new global::Array<object>(new object[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), "HH:mm", ":", "HH:mm:ss", "MMMM yyyy", "d. MMMM", new global::Array<object>(new object[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new global::Array<object>(new object[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new global::Array<object>(new object[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), "dd.MM.yyyy", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"}, new int[]{931922363, 1812362308}, new double[]{((double) (1) ), ((double) (2) )});
						o = new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{"Gregorian", __temp_odecl3, "italiano", ";", "Svizzera", "it-CH", "it-CH", "it", "ita", "Switzerland", "ITS", __temp_odecl4, "Italian", false, false}, new int[]{1202619922}, new double[]{((double) (2064) )});
					}
					
					object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
					global::thx.culture.DateFormatInfo tmp1 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
						tmp1 = null;
					}
					else {
						object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
						tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
					}
					
					object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
					object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
					object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
					object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
					object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
					object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
					object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
					object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
					object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
					object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
					object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
					global::thx.culture.NumberFormatInfo tmp13 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
						tmp13 = null;
					}
					else {
						object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
						tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
					}
					
					__temp_stmt14 = global::thx.culture.Culture.register(new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true))));
				}
				
				global::thx.format.TestDateFormat.ch = ((global::thx.culture.Culture) (__temp_stmt14) );
				object __temp_stmt15 = null;
				{
					object o = null;
					{
						object __temp_odecl5 = new global::haxe.lang.DynamicObject(new int[]{41050500, 114759225, 177600534, 193568515, 214711673, 282949586, 311921353, 1112096333, 1293712380, 1484698101, 1543554379, 1610611779, 1660995221, 1798631236, 2037785099, 2058605085, 2062500402}, new object[]{"\u2030", "Infinity", "+", ",", ".", "-", "$", "%", new global::Array<int>(new int[]{3}), "-Infinity", ",", "NaN", ".", new global::Array<int>(new int[]{3}), ",", ".", new global::Array<int>(new int[]{3})}, new int[]{45312342, 253833312, 652148892, 822857114, 1437940672, 1531979784, 1747840398, 2013154798}, new double[]{((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (2) ), ((double) (2) ), ((double) (1) ), ((double) (2) )});
						object __temp_odecl6 = new global::haxe.lang.DynamicObject(new int[]{106319913, 354602035, 453240570, 529765024, 554059097, 584411450, 602680035, 635699692, 665670594, 667371489, 694450483, 699988920, 726839840, 726843185, 742587063, 816375999, 872279826, 908638873, 980455379, 990364012, 1055554178, 1079146715, 1273872862, 1528104702, 1700034528}, new object[]{"Gregorian", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "dddd, MMMM dd, yyyy h:mm:ss tt", "Gregorian Calendar", "FirstDay", "dddd, MMMM dd, yyyy", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", new global::Array<object>(new object[]{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}), "Sunday", new global::Array<object>(new object[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), "/", new global::Array<object>(new object[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), "AM", "PM", new global::Array<object>(new object[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}), "h:mm tt", ":", "h:mm:ss tt", "MMMM, yyyy", "MMMM dd", new global::Array<object>(new object[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}), new global::Array<object>(new object[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), new global::Array<object>(new object[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), "M/d/yyyy", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"}, new int[]{931922363, 1812362308}, new double[]{((double) (0) ), ((double) (0) )});
						o = new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{"Gregorian", __temp_odecl5, "English", ",", "United States", "en-US", "en-US", "en", "eng", "United States", "ENU", __temp_odecl6, "English", false, false}, new int[]{1202619922}, new double[]{((double) (1033) )});
					}
					
					object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
					global::thx.culture.DateFormatInfo tmp1 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
						tmp1 = null;
					}
					else {
						object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
						tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
					}
					
					object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
					object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
					object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
					object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
					object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
					object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
					object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
					object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
					object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
					object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
					object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
					global::thx.culture.NumberFormatInfo tmp13 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
						tmp13 = null;
					}
					else {
						object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
						tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
					}
					
					__temp_stmt15 = global::thx.culture.Culture.register(new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true))));
				}
				
				global::thx.format.TestDateFormat.us = ((global::thx.culture.Culture) (__temp_stmt15) );
				object __temp_stmt16 = null;
				{
					object o = null;
					{
						object __temp_odecl7 = new global::haxe.lang.DynamicObject(new int[]{41050500, 114759225, 177600534, 193568515, 214711673, 282949586, 311921353, 1112096333, 1293712380, 1484698101, 1543554379, 1610611779, 1660995221, 1798631236, 2037785099, 2058605085, 2062500402}, new object[]{"\u2030", "\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c", "+", "\u00a0", ",", "-", "\u20bd", "%", new global::Array<int>(new int[]{3}), "-\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c", "\u00a0", "NaN", ",", new global::Array<int>(new int[]{3}), "\u00a0", ",", new global::Array<int>(new int[]{3})}, new int[]{45312342, 253833312, 652148892, 822857114, 1437940672, 1531979784, 1747840398, 2013154798}, new double[]{((double) (8) ), ((double) (1) ), ((double) (1) ), ((double) (3) ), ((double) (2) ), ((double) (2) ), ((double) (1) ), ((double) (2) )});
						object __temp_odecl8 = new global::haxe.lang.DynamicObject(new int[]{106319913, 354602035, 453240570, 529765024, 554059097, 584411450, 602680035, 635699692, 665670594, 667371489, 694450483, 699988920, 726839840, 726843185, 742587063, 816375999, 872279826, 908638873, 980455379, 990364012, 1055554178, 1079146715, 1273872862, 1528104702, 1700034528}, new object[]{"Gregorian", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "d MMMM yyyy \'\u0433.\' H:mm:ss", "\u0433\u0440\u0438\u0433\u043e\u0440\u0438\u0430\u043d\u0441\u043a\u0438\u0439 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c", "FirstDay", "d MMMM yyyy \'\u0433.\'", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", new global::Array<object>(new object[]{"\u0412\u0441", "\u041f\u043d", "\u0412\u0442", "\u0421\u0440", "\u0427\u0442", "\u041f\u0442", "\u0421\u0431"}), "Monday", new global::Array<object>(new object[]{"\u044f\u043d\u0432\u0430\u0440\u044f", "\u0444\u0435\u0432\u0440\u0430\u043b\u044f", "\u043c\u0430\u0440\u0442\u0430", "\u0430\u043f\u0440\u0435\u043b\u044f", "\u043c\u0430\u044f", "\u0438\u044e\u043d\u044f", "\u0438\u044e\u043b\u044f", "\u0430\u0432\u0433\u0443\u0441\u0442\u0430", "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f", "\u043e\u043a\u0442\u044f\u0431\u0440\u044f", "\u043d\u043e\u044f\u0431\u0440\u044f", "\u0434\u0435\u043a\u0430\u0431\u0440\u044f", ""}), ".", new global::Array<object>(new object[]{"\u044f\u043d\u0432", "\u0444\u0435\u0432", "\u043c\u0430\u0440", "\u0430\u043f\u0440", "\u043c\u0430\u0439", "\u0438\u044e\u043d", "\u0438\u044e\u043b", "\u0430\u0432\u0433", "\u0441\u0435\u043d", "\u043e\u043a\u0442", "\u043d\u043e\u044f", "\u0434\u0435\u043a", ""}), "", "", new global::Array<object>(new object[]{"\u0412\u0441", "\u041f\u043d", "\u0412\u0442", "\u0421\u0440", "\u0427\u0442", "\u041f\u0442", "\u0421\u0431"}), "H:mm", ":", "H:mm:ss", "MMMM yyyy", "MMMM dd", new global::Array<object>(new object[]{"\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435", "\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a", "\u0432\u0442\u043e\u0440\u043d\u0438\u043a", "\u0441\u0440\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0435\u0440\u0433", "\u043f\u044f\u0442\u043d\u0438\u0446\u0430", "\u0441\u0443\u0431\u0431\u043e\u0442\u0430"}), new global::Array<object>(new object[]{"\u044f\u043d\u0432", "\u0444\u0435\u0432", "\u043c\u0430\u0440", "\u0430\u043f\u0440", "\u043c\u0430\u0439", "\u0438\u044e\u043d", "\u0438\u044e\u043b", "\u0430\u0432\u0433", "\u0441\u0435\u043d", "\u043e\u043a\u0442", "\u043d\u043e\u044f", "\u0434\u0435\u043a", ""}), new global::Array<object>(new object[]{"\u042f\u043d\u0432\u0430\u0440\u044c", "\u0424\u0435\u0432\u0440\u0430\u043b\u044c", "\u041c\u0430\u0440\u0442", "\u0410\u043f\u0440\u0435\u043b\u044c", "\u041c\u0430\u0439", "\u0418\u044e\u043d\u044c", "\u0418\u044e\u043b\u044c", "\u0410\u0432\u0433\u0443\u0441\u0442", "\u0421\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u041e\u043a\u0442\u044f\u0431\u0440\u044c", "\u041d\u043e\u044f\u0431\u0440\u044c", "\u0414\u0435\u043a\u0430\u0431\u0440\u044c", ""}), "dd.MM.yyyy", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"}, new int[]{931922363, 1812362308}, new double[]{((double) (1) ), ((double) (0) )});
						o = new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{"Gregorian", __temp_odecl7, "\u0440\u0443\u0441\u0441\u043a\u0438\u0439", ";", "\u0420\u043e\u0441\u0441\u0438\u044f", "ru-RU", "ru-RU", "ru", "rus", "Russia", "RUS", __temp_odecl8, "Russian", false, false}, new int[]{1202619922}, new double[]{((double) (1049) )});
					}
					
					object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
					global::thx.culture.DateFormatInfo tmp1 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
						tmp1 = null;
					}
					else {
						object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
						tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
					}
					
					object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
					object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
					object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
					object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
					object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
					object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
					object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
					object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
					object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
					object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
					object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
					global::thx.culture.NumberFormatInfo tmp13 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
						tmp13 = null;
					}
					else {
						object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
						tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
					}
					
					__temp_stmt16 = global::thx.culture.Culture.register(new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true))));
				}
				
				global::thx.format.TestDateFormat.ru = ((global::thx.culture.Culture) (__temp_stmt16) );
				object __temp_stmt17 = null;
				{
					object o = null;
					{
						object __temp_odecl9 = new global::haxe.lang.DynamicObject(new int[]{41050500, 114759225, 177600534, 193568515, 214711673, 282949586, 311921353, 1112096333, 1293712380, 1484698101, 1543554379, 1610611779, 1660995221, 1798631236, 2037785099, 2058605085, 2062500402}, new object[]{"\u2030", "+Infini", "+", "\u00a0", ",", "-", "\u20ac", "%", new global::Array<int>(new int[]{3}), "-Infini", "\u00a0", "Non Num\u00e9rique", ",", new global::Array<int>(new int[]{3}), "\u00a0", ",", new global::Array<int>(new int[]{3})}, new int[]{45312342, 253833312, 652148892, 822857114, 1437940672, 1531979784, 1747840398, 2013154798}, new double[]{((double) (8) ), ((double) (0) ), ((double) (0) ), ((double) (3) ), ((double) (2) ), ((double) (2) ), ((double) (1) ), ((double) (2) )});
						object __temp_odecl10 = new global::haxe.lang.DynamicObject(new int[]{106319913, 354602035, 453240570, 529765024, 554059097, 584411450, 602680035, 635699692, 665670594, 667371489, 694450483, 699988920, 726839840, 726843185, 742587063, 816375999, 872279826, 908638873, 980455379, 990364012, 1055554178, 1079146715, 1273872862, 1528104702, 1700034528}, new object[]{"Gregorian", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "dddd d MMMM yyyy HH:mm:ss", "calendrier gr\u00e9gorien", "FirstDay", "dddd d MMMM yyyy", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", new global::Array<object>(new object[]{"di", "lu", "ma", "me", "je", "ve", "sa"}), "Monday", new global::Array<object>(new object[]{"janvier", "f\u00e9vrier", "mars", "avril", "mai", "juin", "juillet", "ao\u00fbt", "septembre", "octobre", "novembre", "d\u00e9cembre", ""}), "/", new global::Array<object>(new object[]{"janv.", "f\u00e9vr.", "mars", "avr.", "mai", "juin", "juil.", "ao\u00fbt", "sept.", "oct.", "nov.", "d\u00e9c.", ""}), "", "", new global::Array<object>(new object[]{"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}), "HH:mm", ":", "HH:mm:ss", "MMMM yyyy", "d MMMM", new global::Array<object>(new object[]{"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}), new global::Array<object>(new object[]{"janv.", "f\u00e9vr.", "mars", "avr.", "mai", "juin", "juil.", "ao\u00fbt", "sept.", "oct.", "nov.", "d\u00e9c.", ""}), new global::Array<object>(new object[]{"janvier", "f\u00e9vrier", "mars", "avril", "mai", "juin", "juillet", "ao\u00fbt", "septembre", "octobre", "novembre", "d\u00e9cembre", ""}), "dd/MM/yyyy", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"}, new int[]{931922363, 1812362308}, new double[]{((double) (1) ), ((double) (0) )});
						o = new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{"Gregorian", __temp_odecl9, "fran\u00e7ais", ";", "France", "fr-FR", "fr-FR", "fr", "fra", "France", "FRA", __temp_odecl10, "French", false, false}, new int[]{1202619922}, new double[]{((double) (1036) )});
					}
					
					object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
					global::thx.culture.DateFormatInfo tmp1 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
						tmp1 = null;
					}
					else {
						object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
						tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
					}
					
					object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
					object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
					object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
					object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
					object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
					object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
					object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
					object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
					object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
					object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
					object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
					global::thx.culture.NumberFormatInfo tmp13 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
						tmp13 = null;
					}
					else {
						object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
						tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
					}
					
					__temp_stmt17 = global::thx.culture.Culture.register(new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true))));
				}
				
				global::thx.format.TestDateFormat.fr = ((global::thx.culture.Culture) (__temp_stmt17) );
				object __temp_stmt18 = null;
				{
					object o = null;
					{
						object __temp_odecl11 = new global::haxe.lang.DynamicObject(new int[]{41050500, 114759225, 177600534, 193568515, 214711673, 282949586, 311921353, 1112096333, 1293712380, 1484698101, 1543554379, 1610611779, 1660995221, 1798631236, 2037785099, 2058605085, 2062500402}, new object[]{"\u2030", "+\u221e", "+", ",", ".", "-", "\u00a5", "%", new global::Array<int>(new int[]{3}), "-\u221e", ",", "NaN (\u975e\u6570\u5024)", ".", new global::Array<int>(new int[]{3}), ",", ".", new global::Array<int>(new int[]{3})}, new int[]{45312342, 253833312, 652148892, 822857114, 1437940672, 1531979784, 1747840398, 2013154798}, new double[]{((double) (1) ), ((double) (1) ), ((double) (1) ), ((double) (0) ), ((double) (2) ), ((double) (0) ), ((double) (1) ), ((double) (2) )});
						object __temp_odecl12 = new global::haxe.lang.DynamicObject(new int[]{106319913, 354602035, 453240570, 529765024, 554059097, 584411450, 602680035, 635699692, 665670594, 667371489, 694450483, 699988920, 726839840, 726843185, 742587063, 816375999, 872279826, 908638873, 980455379, 990364012, 1055554178, 1079146715, 1273872862, 1528104702, 1700034528}, new object[]{"Gregorian", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "yyyy\'\u5e74\'M\'\u6708\'d\'\u65e5\' H:mm:ss", "\u897f\u66a6 (\u65e5\u672c\u8a9e)", "FirstDay", "yyyy\'\u5e74\'M\'\u6708\'d\'\u65e5\'", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", new global::Array<object>(new object[]{"\u65e5", "\u6708", "\u706b", "\u6c34", "\u6728", "\u91d1", "\u571f"}), "Sunday", new global::Array<object>(new object[]{"1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708", ""}), "/", new global::Array<object>(new object[]{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""}), "\u5348\u524d", "\u5348\u5f8c", new global::Array<object>(new object[]{"\u65e5", "\u6708", "\u706b", "\u6c34", "\u6728", "\u91d1", "\u571f"}), "H:mm", ":", "H:mm:ss", "yyyy\'\u5e74\'M\'\u6708\'", "M\'\u6708\'d\'\u65e5\'", new global::Array<object>(new object[]{"\u65e5\u66dc\u65e5", "\u6708\u66dc\u65e5", "\u706b\u66dc\u65e5", "\u6c34\u66dc\u65e5", "\u6728\u66dc\u65e5", "\u91d1\u66dc\u65e5", "\u571f\u66dc\u65e5"}), new global::Array<object>(new object[]{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""}), new global::Array<object>(new object[]{"1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708", ""}), "yyyy/MM/dd", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"}, new int[]{931922363, 1812362308}, new double[]{((double) (0) ), ((double) (0) )});
						o = new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{"Gregorian", __temp_odecl11, "\u65e5\u672c\u8a9e", ",", "\u65e5\u672c", "ja-JP", "ja-JP", "ja", "jpn", "Japan", "JPN", __temp_odecl12, "Japanese", false, false}, new int[]{1202619922}, new double[]{((double) (1041) )});
					}
					
					object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
					global::thx.culture.DateFormatInfo tmp1 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
						tmp1 = null;
					}
					else {
						object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
						tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
					}
					
					object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
					object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
					object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
					object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
					object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
					object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
					object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
					object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
					object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
					object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
					object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
					global::thx.culture.NumberFormatInfo tmp13 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
						tmp13 = null;
					}
					else {
						object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
						tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
					}
					
					__temp_stmt18 = global::thx.culture.Culture.register(new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true))));
				}
				
				global::thx.format.TestDateFormat.jp = ((global::thx.culture.Culture) (__temp_stmt18) );
				global::thx.format.TestDateFormat.d1 = global::thx._DateTime.DateTime_Impl_.fromString("2009-06-01 13:45:30-06:00");
				global::thx.format.TestDateFormat.d2 = global::thx._DateTime.DateTime_Impl_.fromString("2009-06-15 13:45:30-06:00");
			}
		}
		
		
		public TestDateFormat(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestDateFormat(int i) {
			global::thx.format.TestDateFormat.__hx_ctor_thx_format_TestDateFormat(this, i);
		}
		
		
		public static void __hx_ctor_thx_format_TestDateFormat(global::thx.format.TestDateFormat __temp_me159, int i) {
			__temp_me159.x = i;
		}
		
		
		public static global::thx.culture.Culture it;
		
		public static global::thx.culture.Culture ch;
		
		public static global::thx.culture.Culture us;
		
		public static global::thx.culture.Culture ru;
		
		public static global::thx.culture.Culture fr;
		
		public static global::thx.culture.Culture jp;
		
		public static global::Array<long> d1;
		
		public static global::Array<long> d2;
		
		public static new object __hx_createEmpty() {
			return new global::thx.format.TestDateFormat(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.format.TestDateFormat(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testFormatU() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("Monday, 01 June 2009 13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "U", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatU", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
					global::utest.Assert.@equals("luned\u00ec 1 giugno 2009 13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "U", global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatU", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
					global::utest.Assert.@equals("luned\u00ec, 1. giugno 2009 13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "U", global::thx.format.TestDateFormat.ch), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatU", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
					global::utest.Assert.@equals("Monday, June 01, 2009 1:45:30 PM", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "U", global::thx.format.TestDateFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatU", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
					global::utest.Assert.@equals("1 \u0418\u044e\u043d\u044c 2009 \u0433. 13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "U", global::thx.format.TestDateFormat.ru), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatU", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
					global::utest.Assert.@equals("lundi 1 juin 2009 13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "U", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatU", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
					global::utest.Assert.@equals("2009\u5e746\u67081\u65e5 13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "U", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatU", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
					global::utest.Assert.@equals("luned\u00ec 1 giugno 2009 13:45:30", global::thx.format.DateFormat.dateTimeFull(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatU", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
				}
				
			}
		}
		
		
		public virtual void testFormatd_() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("06/01/2009", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "d", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatd_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
					global::utest.Assert.@equals("6/1/2009", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "d", global::thx.format.TestDateFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatd_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					global::utest.Assert.@equals("01/06/2009", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "d", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatd_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
					global::utest.Assert.@equals("2009/06/01", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "d", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatd_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					global::utest.Assert.@equals("01/06/2009", global::thx.format.DateFormat.dateShort(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatd_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
				}
				
			}
		}
		
		
		public virtual void testFormatD() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("Monday, 01 June 2009", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "D", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatD", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
					global::utest.Assert.@equals("Monday, June 01, 2009", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "D", global::thx.format.TestDateFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatD", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
					global::utest.Assert.@equals("lundi 1 juin 2009", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "D", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatD", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
					global::utest.Assert.@equals("2009\u5e746\u67081\u65e5", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "D", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatD", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
					global::utest.Assert.@equals("luned\u00ec 1 giugno 2009", global::thx.format.DateFormat.dateLong(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatD", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (52) )}));
				}
				
			}
		}
		
		
		public virtual void testFormatM() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("June 01", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "M", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (57) )}));
					global::utest.Assert.@equals("June 01", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "M", global::thx.format.TestDateFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (58) )}));
					global::utest.Assert.@equals("1 juin", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "M", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
					global::utest.Assert.@equals("6\u67081\u65e5", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "M", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
					global::utest.Assert.@equals("01 giugno", global::thx.format.DateFormat.monthDay(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (62) )}));
				}
				
			}
		}
		
		
		public virtual void testFormatR() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("Mon, 01 Jun 2009 19:45:30 GMT", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "R", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatR", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
					global::utest.Assert.@equals("Mon, 01 Jun 2009 19:45:30 GMT", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "R", global::thx.format.TestDateFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatR", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (68) )}));
					global::utest.Assert.@equals("lun., 01 juin 2009 19:45:30 GMT", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "R", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatR", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
					global::utest.Assert.@equals("\u6708, 01 6 2009 19:45:30 GMT", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "R", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatR", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
					global::utest.Assert.@equals("lun, 01 giu 2009 19:45:30 GMT", global::thx.format.DateFormat.rfc1123(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatR", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (71) )}));
				}
				
			}
		}
		
		
		public virtual void testFormats() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("2009-06-01T13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "s", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormats", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (76) )}));
					global::utest.Assert.@equals("2009-06-01T13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "s", global::thx.format.TestDateFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormats", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
					global::utest.Assert.@equals("2009-06-01T13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "s", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormats", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
					global::utest.Assert.@equals("2009-06-01T13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "s", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormats", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (79) )}));
					global::utest.Assert.@equals("2009-06-01T13:45:30", global::thx.format.DateFormat.dateTimeSortable(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormats", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (81) )}));
				}
				
			}
		}
		
		
		public virtual void testFormatt_() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("13:45", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "t", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatt_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (86) )}));
					global::utest.Assert.@equals("1:45 PM", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "t", global::thx.format.TestDateFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatt_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (87) )}));
					global::utest.Assert.@equals("13:45", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "t", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatt_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (88) )}));
					global::utest.Assert.@equals("13:45", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "t", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatt_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
					global::utest.Assert.@equals("13:45", global::thx.format.DateFormat.timeShort(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatt_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (91) )}));
				}
				
			}
		}
		
		
		public virtual void testFormatT() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "T", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatT", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (96) )}));
					global::utest.Assert.@equals("1:45:30 PM", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "T", global::thx.format.TestDateFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatT", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (97) )}));
					global::utest.Assert.@equals("13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "T", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatT", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (98) )}));
					global::utest.Assert.@equals("13:45:30", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "T", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatT", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
					global::utest.Assert.@equals("13:45:30", global::thx.format.DateFormat.timeLong(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatT", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (101) )}));
				}
				
			}
		}
		
		
		public virtual void testFormatu_() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("2009-06-01 19:45:30Z", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "u", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatu_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (106) )}));
					global::utest.Assert.@equals("2009-06-01 19:45:30Z", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "u", global::thx.format.TestDateFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatu_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (107) )}));
					global::utest.Assert.@equals("2009-06-01 19:45:30Z", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "u", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatu_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (108) )}));
					global::utest.Assert.@equals("2009-06-01 19:45:30Z", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "u", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatu_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (109) )}));
					global::utest.Assert.@equals("2009-06-01 19:45:30Z", global::thx.format.DateFormat.universalSortable(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatu_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (110) )}));
				}
				
			}
		}
		
		
		public virtual void testFormatO() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("2009-06-01T13:45:30.0000000-06:00", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "O", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatO", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (115) )}));
					global::utest.Assert.@equals("2009-06-01T13:45:30.0000000-06:00", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "o", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatO", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (116) )}));
					global::utest.Assert.@equals("2009-06-01T13:45:30.0000000-06:00", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "O", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatO", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (117) )}));
					global::utest.Assert.@equals("2009-06-01T13:45:30.0000000-06:00", global::thx.format.DateFormat.iso8601(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatO", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (118) )}));
				}
				
			}
		}
		
		
		public virtual void testFormaty() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("2009 June", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "y", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormaty", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (123) )}));
					global::utest.Assert.@equals("June, 2009", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "y", global::thx.format.TestDateFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormaty", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (124) )}));
					global::utest.Assert.@equals("juin 2009", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "y", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormaty", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (125) )}));
					global::utest.Assert.@equals("2009\u5e746\u6708", global::thx.format.DateFormat.format(global::thx.format.TestDateFormat.d1, "y", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormaty", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (126) )}));
					global::utest.Assert.@equals("giugno 2009", global::thx.format.DateFormat.yearMonth(global::thx.format.TestDateFormat.d1, global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormaty", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (128) )}));
				}
				
			}
		}
		
		
		public virtual void testd() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("1", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "d", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (133) )}));
					global::utest.Assert.@equals("15", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d2, "d", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (134) )}));
				}
				
			}
		}
		
		
		public virtual void testdd() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("01", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "dd", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testdd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (139) )}));
					global::utest.Assert.@equals("15", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d2, "dd", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testdd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (140) )}));
				}
				
			}
		}
		
		
		public virtual void testddd() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("Mon", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "ddd", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testddd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (145) )}));
					global::utest.Assert.@equals("lun.", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "ddd", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testddd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (146) )}));
					global::utest.Assert.@equals("lun", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "ddd", global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testddd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (147) )}));
					global::utest.Assert.@equals("\u041f\u043d", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "ddd", global::thx.format.TestDateFormat.ru), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testddd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (148) )}));
				}
				
			}
		}
		
		
		public virtual void testdddd() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("Monday", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "dddd", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testdddd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (153) )}));
					global::utest.Assert.@equals("lundi", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "dddd", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testdddd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (154) )}));
					global::utest.Assert.@equals("luned\u00ec", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "dddd", global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testdddd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (155) )}));
					global::utest.Assert.@equals("\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "dddd", global::thx.format.TestDateFormat.ru), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testdddd", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (156) )}));
				}
				
			}
		}
		
		
		public virtual void testh_() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("1", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "h", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testh_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (161) )}));
				}
				
			}
		}
		
		
		public virtual void testhh_() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("01", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "hh", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testhh_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (166) )}));
				}
				
			}
		}
		
		
		public virtual void testH() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("13", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "H", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testH", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (171) )}));
				}
				
			}
		}
		
		
		public virtual void testHH() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("13", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "HH", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHH", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (176) )}));
				}
				
			}
		}
		
		
		public virtual void testm_() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("45", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "m", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testm_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (181) )}));
					global::utest.Assert.@equals("5", global::thx.format.DateFormat.formatTerm(global::thx._DateTime.DateTime_Impl_.fromString("2009-06-15 13:05:30"), "m", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testm_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (182) )}));
				}
				
			}
		}
		
		
		public virtual void testmm_() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("45", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "mm", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testmm_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (187) )}));
					global::utest.Assert.@equals("05", global::thx.format.DateFormat.formatTerm(global::thx._DateTime.DateTime_Impl_.fromString("2009-06-15 13:05:30"), "mm", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testmm_", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (188) )}));
				}
				
			}
		}
		
		
		public virtual void testM() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("6", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "M", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (193) )}));
				}
				
			}
		}
		
		
		public virtual void testMM() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("06", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "MM", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (198) )}));
				}
				
			}
		}
		
		
		public virtual void testMMM() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("Jun", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "MMM", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMMM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (203) )}));
					global::utest.Assert.@equals("juin", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "MMM", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMMM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (204) )}));
					global::utest.Assert.@equals("giu", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "MMM", global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMMM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (205) )}));
					global::utest.Assert.@equals("\u0438\u044e\u043d", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "MMM", global::thx.format.TestDateFormat.ru), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMMM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (206) )}));
				}
				
			}
		}
		
		
		public virtual void testMMMM() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("June", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "MMMM", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMMMM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (211) )}));
					global::utest.Assert.@equals("juin", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "MMMM", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMMMM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (212) )}));
					global::utest.Assert.@equals("giugno", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "MMMM", global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMMMM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (213) )}));
					global::utest.Assert.@equals("\u0418\u044e\u043d\u044c", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "MMMM", global::thx.format.TestDateFormat.ru), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMMMM", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (214) )}));
				}
				
			}
		}
		
		
		public virtual void tests() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("30", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "s", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"tests", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (219) )}));
					global::utest.Assert.@equals("3", global::thx.format.DateFormat.formatTerm(global::thx._DateTime.DateTime_Impl_.fromString("2009-06-15 13:05:03"), "s", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"tests", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (220) )}));
				}
				
			}
		}
		
		
		public virtual void testss() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("30", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "ss", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testss", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (225) )}));
					global::utest.Assert.@equals("03", global::thx.format.DateFormat.formatTerm(global::thx._DateTime.DateTime_Impl_.fromString("2009-06-15 13:05:03"), "ss", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testss", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (226) )}));
				}
				
			}
		}
		
		
		public virtual void testtt() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("PM", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "tt", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testtt", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (231) )}));
					global::utest.Assert.@equals("", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "tt", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testtt", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (232) )}));
					global::utest.Assert.@equals("", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "tt", global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testtt", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (233) )}));
					global::utest.Assert.@equals("\u5348\u5f8c", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "tt", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testtt", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (234) )}));
				}
				
			}
		}
		
		
		public virtual void testy() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("72", global::thx.format.DateFormat.formatTerm(global::thx._DateTime.DateTime_Impl_.fromString("1972-06-15 13:05:03"), "y", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testy", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (239) )}));
				}
				
			}
		}
		
		
		public virtual void testyy() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("09", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "yy", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testyy", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (244) )}));
					global::utest.Assert.@equals("72", global::thx.format.DateFormat.formatTerm(global::thx._DateTime.DateTime_Impl_.fromString("1972-06-15 13:05:03"), "yy", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testyy", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (245) )}));
				}
				
			}
		}
		
		
		public virtual void testyyyy() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("1980", global::thx.format.DateFormat.formatTerm(global::thx._DateTime.DateTime_Impl_.fromString("1980-06-15 13:05:03"), "yyyy", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testyyyy", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (250) )}));
					global::utest.Assert.@equals("2019", global::thx.format.DateFormat.formatTerm(global::thx._DateTime.DateTime_Impl_.fromString("2019-06-15 13:05:03"), "yyyy", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testyyyy", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (251) )}));
				}
				
			}
		}
		
		
		public virtual void testTimeSeprator() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals(":", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, ":", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTimeSeprator", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (256) )}));
					global::utest.Assert.@equals(":", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, ":", global::thx.format.TestDateFormat.fr), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTimeSeprator", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (257) )}));
					global::utest.Assert.@equals(":", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, ":", global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTimeSeprator", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (258) )}));
					global::utest.Assert.@equals(":", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, ":", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTimeSeprator", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (259) )}));
				}
				
			}
		}
		
		
		public virtual void testDateSeprator() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.@equals("/", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "/", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDateSeprator", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (264) )}));
					global::utest.Assert.@equals(".", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "/", global::thx.format.TestDateFormat.ch), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDateSeprator", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (265) )}));
					global::utest.Assert.@equals("/", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "/", global::thx.format.TestDateFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDateSeprator", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (266) )}));
					global::utest.Assert.@equals("/", global::thx.format.DateFormat.formatTerm(global::thx.format.TestDateFormat.d1, "/", global::thx.format.TestDateFormat.jp), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDateSeprator", "thx.format.TestDateFormat", "TestDateFormat.hx"}, new int[]{1981972957}, new double[]{((double) (267) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1572469162:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDateSeprator", 1572469162)) );
					}
					
					
					case 1050338953:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTimeSeprator", 1050338953)) );
					}
					
					
					case 1756390674:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testyyyy", 1756390674)) );
					}
					
					
					case 1429891762:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testyy", 1429891762)) );
					}
					
					
					case 227901415:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testy", 227901415)) );
					}
					
					
					case 1429890642:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testtt", 1429890642)) );
					}
					
					
					case 1429890418:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testss", 1429890418)) );
					}
					
					
					case 227901409:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "tests", 227901409)) );
					}
					
					
					case 1266251794:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMMMM", 1266251794)) );
					}
					
					
					case 1036085211:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMMM", 1036085211)) );
					}
					
					
					case 1429881906:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMM", 1429881906)) );
					}
					
					
					case 227901371:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testM", 227901371)) );
					}
					
					
					case 1037683693:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testmm_", 1037683693)) );
					}
					
					
					case 1429889060:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testm_", 1429889060)) );
					}
					
					
					case 1429880786:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testHH", 1429880786)) );
					}
					
					
					case 227901366:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testH", 227901366)) );
					}
					
					
					case 1037433933:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testhh_", 1037433933)) );
					}
					
					
					case 1429887945:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testh_", 1429887945)) );
					}
					
					
					case 1522460754:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testdddd", 1522460754)) );
					}
					
					
					case 1037234130:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testddd", 1037234130)) );
					}
					
					
					case 1429887058:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testdd", 1429887058)) );
					}
					
					
					case 227901394:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testd", 227901394)) );
					}
					
					
					case 469217072:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormaty", 469217072)) );
					}
					
					
					case 469217030:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormatO", 469217030)) );
					}
					
					
					case 1556191155:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormatu_", 1556191155)) );
					}
					
					
					case 469217035:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormatT", 469217035)) );
					}
					
					
					case 1556190932:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormatt_", 1556190932)) );
					}
					
					
					case 469217066:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormats", 469217066)) );
					}
					
					
					case 469217033:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormatR", 469217033)) );
					}
					
					
					case 469217028:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormatM", 469217028)) );
					}
					
					
					case 469217019:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormatD", 469217019)) );
					}
					
					
					case 1556187364:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormatd_", 1556187364)) );
					}
					
					
					case 469217036:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormatU", 469217036)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1572469162:
					{
						this.testDateSeprator();
						break;
					}
					
					
					case 1050338953:
					{
						this.testTimeSeprator();
						break;
					}
					
					
					case 1756390674:
					{
						this.testyyyy();
						break;
					}
					
					
					case 1429891762:
					{
						this.testyy();
						break;
					}
					
					
					case 227901415:
					{
						this.testy();
						break;
					}
					
					
					case 1429890642:
					{
						this.testtt();
						break;
					}
					
					
					case 1429890418:
					{
						this.testss();
						break;
					}
					
					
					case 227901409:
					{
						this.tests();
						break;
					}
					
					
					case 1266251794:
					{
						this.testMMMM();
						break;
					}
					
					
					case 1036085211:
					{
						this.testMMM();
						break;
					}
					
					
					case 1429881906:
					{
						this.testMM();
						break;
					}
					
					
					case 227901371:
					{
						this.testM();
						break;
					}
					
					
					case 1037683693:
					{
						this.testmm_();
						break;
					}
					
					
					case 1429889060:
					{
						this.testm_();
						break;
					}
					
					
					case 1429880786:
					{
						this.testHH();
						break;
					}
					
					
					case 227901366:
					{
						this.testH();
						break;
					}
					
					
					case 1037433933:
					{
						this.testhh_();
						break;
					}
					
					
					case 1429887945:
					{
						this.testh_();
						break;
					}
					
					
					case 1522460754:
					{
						this.testdddd();
						break;
					}
					
					
					case 1037234130:
					{
						this.testddd();
						break;
					}
					
					
					case 1429887058:
					{
						this.testdd();
						break;
					}
					
					
					case 227901394:
					{
						this.testd();
						break;
					}
					
					
					case 469217072:
					{
						this.testFormaty();
						break;
					}
					
					
					case 469217030:
					{
						this.testFormatO();
						break;
					}
					
					
					case 1556191155:
					{
						this.testFormatu_();
						break;
					}
					
					
					case 469217035:
					{
						this.testFormatT();
						break;
					}
					
					
					case 1556190932:
					{
						this.testFormatt_();
						break;
					}
					
					
					case 469217066:
					{
						this.testFormats();
						break;
					}
					
					
					case 469217033:
					{
						this.testFormatR();
						break;
					}
					
					
					case 469217028:
					{
						this.testFormatM();
						break;
					}
					
					
					case 469217019:
					{
						this.testFormatD();
						break;
					}
					
					
					case 1556187364:
					{
						this.testFormatd_();
						break;
					}
					
					
					case 469217036:
					{
						this.testFormatU();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


