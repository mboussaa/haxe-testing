// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._DateTimeUtc {
	public sealed class DateTimeUtc_Impl_ {
		
		static DateTimeUtc_Impl_() {
			unchecked {
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond = 1000;
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond * 60 );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute * 60 );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerDay = ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour * 24 );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.tenI64 = ((long) (10) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.hundredI64 = ((long) (100) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64 = ((long) (1000) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.tenThousandI64 = ((long) (10000) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.millionI64 = ((long) (1000000) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMicrosecondI64 = global::thx._DateTimeUtc.DateTimeUtc_Impl_.tenI64;
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecond = 10000;
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64 = ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecond) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64 = ((long) (( ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) * ((long) (1000) ) )) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64 = ((long) (( ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) * ((long) (60) ) )) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64 = ((long) (( ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) * ((long) (60) ) )) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64 = ((long) (( ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) * ((long) (24) ) )) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPerYear = 365;
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer4Years = ( ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPerYear * 4 ) + 1 );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer100Years = ( ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer4Years * 25 ) - 1 );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer400Years = ( ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer100Years * 4 ) + 1 );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysTo1970 = ( ( ( ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer400Years * 4 ) + ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer100Years * 3 ) ) + ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer4Years * 17 ) ) + global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPerYear );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks = ((long) (( ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysTo1970) ) )) );
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR = 0;
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY_OF_YEAR = 1;
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH = 2;
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY = 3;
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365 = new global::Array<int>(new int[]{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365});
				global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366 = new global::Array<int>(new int[]{0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366});
			}
		}
		
		
		public static int millisPerSecond;
		
		public static int millisPerMinute;
		
		public static int millisPerHour;
		
		public static int millisPerDay;
		
		public static long tenI64;
		
		public static long hundredI64;
		
		public static long thousandI64;
		
		public static long tenThousandI64;
		
		public static long millionI64;
		
		public static long ticksPerMicrosecondI64;
		
		public static int ticksPerMillisecond;
		
		public static long ticksPerMillisecondI64;
		
		public static long ticksPerSecondI64;
		
		public static long ticksPerMinuteI64;
		
		public static long ticksPerHourI64;
		
		public static long ticksPerDayI64;
		
		public static int daysPerYear;
		
		public static int daysPer4Years;
		
		public static int daysPer100Years;
		
		public static int daysPer400Years;
		
		public static int daysTo1970;
		
		public static long unixEpochTicks;
		
		public static int DATE_PART_YEAR;
		
		public static int DATE_PART_DAY_OF_YEAR;
		
		public static int DATE_PART_MONTH;
		
		public static int DATE_PART_DAY;
		
		public static global::Array<int> daysToMonth365;
		
		public static global::Array<int> daysToMonth366;
		
		public static long now() {
			return ((long) (global::System.DateTime.Now.ToUniversalTime().Ticks) );
		}
		
		
		public static long fromInt64(long ticks) {
			return ((long) (ticks) );
		}
		
		
		public static long fromDate(global::Date date) {
			long this1 = date.date.Ticks;
			return ((long) (this1) );
		}
		
		
		public static long fromTime(double timestamp) {
			return ((long) (( ((long) (( ((long) (global::thx.Int64s.fromFloat(timestamp)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) + ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks) ) )) );
		}
		
		
		public static long fromString(string s) {
			return ((long) (((global::Array<long>) (global::thx._DateTime.DateTime_Impl_.fromString(s)) )[0]) );
		}
		
		
		public static int compare(long a, long b) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.compareTo(a, b);
		}
		
		
		public static long create(int year, int month, int day, global::haxe.lang.Null<int> hour, global::haxe.lang.Null<int> minute, global::haxe.lang.Null<int> second, global::haxe.lang.Null<int> millisecond) {
			unchecked {
				global::haxe.lang.Null<int> __temp_millisecond86 = ( ( ! (millisecond.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (millisecond) );
				global::haxe.lang.Null<int> __temp_second85 = ( ( ! (second.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (second) );
				global::haxe.lang.Null<int> __temp_minute84 = ( ( ! (minute.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (minute) );
				global::haxe.lang.Null<int> __temp_hour83 = ( ( ! (hour.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (hour) );
				__temp_second85 = new global::haxe.lang.Null<int>(( (__temp_second85).@value + ((int) (global::System.Math.Floor(((double) (( ((double) ((__temp_millisecond86).@value) ) / 1000 )) ))) ) ), true);
				__temp_millisecond86 = new global::haxe.lang.Null<int>(((int) (( (__temp_millisecond86).@value % (new global::haxe.lang.Null<int>(1000, true)).@value )) ), true);
				if (( (__temp_millisecond86).@value < 0 )) {
					__temp_millisecond86 = new global::haxe.lang.Null<int>(( (__temp_millisecond86).@value + 1000 ), true);
				}
				
				long ticks = ((long) (( ((long) (( ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.dateToTicks(year, month, day)) ) + ((long) (global::thx._Time.Time_Impl_.timeToTicks((__temp_hour83).@value, (__temp_minute84).@value, (__temp_second85).@value)) ) )) ) + ((long) (( ((long) ((__temp_millisecond86).@value) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) )) );
				return ((long) (ticks) );
			}
		}
		
		
		public static bool isLeapYear(int year) {
			unchecked {
				if (( ( year % 4 ) == 0 )) {
					if (( ( year % 100 ) == 0 )) {
						return ( ( year % 400 ) == 0 );
					}
					else {
						return true;
					}
					
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static long dateToTicks(int year, int month, int day) {
			unchecked {
				int[] month1 = new int[]{month};
				int[] year1 = new int[]{year};
				global::haxe.lang.Function fixMonthYear = new global::thx._DateTimeUtc.DateTimeUtc_Impl__dateToTicks_119__Fun(year1, month1);
				while (( day < 0 )) {
					month1[0]--;
					fixMonthYear.__hx_invoke0_o();
					day += global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
				}
				
				fixMonthYear.__hx_invoke0_o();
				int days = default(int);
				while (true) {
					days = global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
					if ( ! ((( day > days ))) ) {
						break;
					}
					
					month1[0]++;
					fixMonthYear.__hx_invoke0_o();
					day -= days;
				}
				
				if (( day == 0 )) {
					month1[0] -= 1;
					fixMonthYear.__hx_invoke0_o();
					day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
				}
				
				fixMonthYear.__hx_invoke0_o();
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.rawDateToTicks(year1[0], month1[0], day);
			}
		}
		
		
		public static long rawDateToTicks(int year, int month, int day) {
			unchecked {
				global::Array<int> days = ( (global::thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(year)) ? (global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366) : (global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365) );
				if (( ( day >= 1 ) && ( day <= ( days[month] - days[( month - 1 )] ) ) )) {
					int y = ( year - 1 );
					return ((long) (( ((long) (( ( ( ( ( ( ( y * 365 ) + ((int) (( y / 4 )) ) ) - ((int) (( y / 100 )) ) ) + ((int) (( y / 400 )) ) ) + days[( month - 1 )] ) + day ) - 1 )) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
				}
				
				throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("bad year/month/day ", global::haxe.lang.Runtime.toString(year)), "/"), global::haxe.lang.Runtime.toString(month)), "/"), global::haxe.lang.Runtime.toString(day)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"rawDateToTicks", "thx._DateTimeUtc.DateTimeUtc_Impl_", "DateTimeUtc.hx"}, new int[]{1981972957}, new double[]{((double) (167) )})));
			}
		}
		
		
		public static int daysInMonth(int year, int month) {
			unchecked {
				global::Array<int> days = ( (global::thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(year)) ? (global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366) : (global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365) );
				return ( days[month] - days[( month - 1 )] );
			}
		}
		
		
		public static global::Array<long> daysRange(long start, long end) {
			unchecked {
				long a = ((long) (end) );
				long b = ((long) (start) );
				if (( (( (((bool) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) < 0 )) {
					return new global::Array<long>(new long[]{});
				}
				
				global::Array<long> days = new global::Array<long>(new long[]{});
				while ( ! (global::thx._DateTimeUtc.DateTimeUtc_Impl_.sameDay(start, end)) ) {
					days.push(start);
					start = global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(((long) (start) ), global::thx.TimePeriod.Day, 1);
				}
				
				days.push(end);
				return days;
			}
		}
		
		
		public static int getDatePart(long this1, int part) {
			unchecked {
				long x = ((long) (( ((long) (this1) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				int n = ((int) (((long) (x) )) );
				int y400 = ((int) (( n / global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer400Years )) );
				n -= ( y400 * global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer400Years );
				int y100 = ((int) (( n / global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer100Years )) );
				if (( y100 == 4 )) {
					y100 = 3;
				}
				
				n -= ( y100 * global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer100Years );
				int y4 = ((int) (( n / global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer4Years )) );
				n -= ( y4 * global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer4Years );
				int y1 = ((int) (( n / global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPerYear )) );
				if (( y1 == 4 )) {
					y1 = 3;
				}
				
				if (( part == global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR )) {
					return ( ( ( ( ( y400 * 400 ) + ( y100 * 100 ) ) + ( y4 * 4 ) ) + y1 ) + 1 );
				}
				
				n -= ( y1 * global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysPerYear );
				if (( part == global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY_OF_YEAR )) {
					return ( n + 1 );
				}
				
				global::Array<int> days = ( (( ( y1 == 3 ) && (( ( y4 != 24 ) || ( y100 == 3 ) )) )) ? (global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366) : (global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365) );
				int m = ( n >> 6 );
				while (( n >= days[m] )) {
					 ++ m;
				}
				
				if (( part == global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH )) {
					return m;
				}
				
				return ( ( n - days[( m - 1 )] ) + 1 );
			}
		}
		
		
		public static long _new(long ticks) {
			return ((long) (ticks) );
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		public static long min(long this1, long other) {
			if (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.compareTo(this1, other) <= 0 )) {
				return ((long) (this1) );
			}
			else {
				return other;
			}
			
		}
		
		
		public static long max(long this1, long other) {
			if (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.compareTo(this1, other) >= 0 )) {
				return ((long) (this1) );
			}
			else {
				return other;
			}
			
		}
		
		
		public static long jump(long this1, global::thx.TimePeriod period, int amount) {
			unchecked {
				int sec = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1);
				int min = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1);
				int hr = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1);
				int day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
				int mon = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
				int yr = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
				switch (period.index) {
					case 0:
					{
						sec += amount;
						break;
					}
					
					
					case 1:
					{
						min += amount;
						break;
					}
					
					
					case 2:
					{
						hr += amount;
						break;
					}
					
					
					case 3:
					{
						day += amount;
						break;
					}
					
					
					case 4:
					{
						day += ( amount * 7 );
						break;
					}
					
					
					case 5:
					{
						mon += amount;
						break;
					}
					
					
					case 6:
					{
						yr += amount;
						break;
					}
					
					
				}
				
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(yr, mon, day, new global::haxe.lang.Null<int>(hr, true), new global::haxe.lang.Null<int>(min, true), new global::haxe.lang.Null<int>(sec, true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1), true));
			}
		}
		
		
		public static int daysInThisMonth(long this1) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH));
		}
		
		
		public static long prevYear(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Year, -1);
			}
		}
		
		
		public static long nextYear(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Year, 1);
			}
		}
		
		
		public static long prevMonth(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Month, -1);
			}
		}
		
		
		public static long nextMonth(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Month, 1);
			}
		}
		
		
		public static long prevWeek(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Week, -1);
			}
		}
		
		
		public static long nextWeek(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Week, 1);
			}
		}
		
		
		public static long prevDay(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Day, -1);
			}
		}
		
		
		public static long nextDay(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Day, 1);
			}
		}
		
		
		public static long prevHour(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Hour, -1);
			}
		}
		
		
		public static long nextHour(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Hour, 1);
			}
		}
		
		
		public static long prevMinute(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Minute, -1);
			}
		}
		
		
		public static long nextMinute(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Minute, 1);
			}
		}
		
		
		public static long prevSecond(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Second, -1);
			}
		}
		
		
		public static long nextSecond(long this1) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Second, 1);
			}
		}
		
		
		public static long snapToWeekDay(long this1, int weekday, global::haxe.lang.Null<int> firstDayOfWk) {
			unchecked {
				global::haxe.lang.Null<int> __temp_firstDayOfWk87 = ( ( ! (firstDayOfWk.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (firstDayOfWk) );
				int d = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
				int s = weekday;
				if (( s < (__temp_firstDayOfWk87).@value )) {
					s += 7;
				}
				
				if (( d < (__temp_firstDayOfWk87).@value )) {
					d += 7;
				}
				
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Day, ( s - d ));
			}
		}
		
		
		public static long snapNextWeekDay(long this1, int weekday) {
			unchecked {
				int d = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
				int s = weekday;
				if (( s < d )) {
					s += 7;
				}
				
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Day, ( s - d ));
			}
		}
		
		
		public static long snapPrevWeekDay(long this1, int weekday) {
			unchecked {
				int d = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
				int s = weekday;
				if (( s > d )) {
					s -= 7;
				}
				
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, global::thx.TimePeriod.Day, ( s - d ));
			}
		}
		
		
		public static long snapNext(long this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					{
						return ((long) (( ((long) (global::thx.Int64s.divCeil(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
					}
					
					
					case 1:
					{
						return ((long) (( ((long) (global::thx.Int64s.divCeil(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) );
					}
					
					
					case 2:
					{
						return ((long) (( ((long) (global::thx.Int64s.divCeil(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) );
					}
					
					
					case 3:
					{
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + 1 ), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
					case 4:
					{
						int wd = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + 7 ) - wd ), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
					case 5:
					{
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) + 1 ), 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
					case 6:
					{
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) + 1 ), 1, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
				}
				
				return default(long);
			}
		}
		
		
		public static long snapPrev(long this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					{
						return ((long) (( ((long) (global::thx.Int64s.divFloor(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
					}
					
					
					case 1:
					{
						return ((long) (( ((long) (global::thx.Int64s.divFloor(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) );
					}
					
					
					case 2:
					{
						return ((long) (( ((long) (global::thx.Int64s.divFloor(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) );
					}
					
					
					case 3:
					{
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
					case 4:
					{
						int wd = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) - wd ), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
					case 5:
					{
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
					case 6:
					{
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), 1, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
				}
				
				return default(long);
			}
		}
		
		
		public static long snapTo(long this1, global::thx.TimePeriod period) {
			unchecked {
				switch (period.index) {
					case 0:
					{
						return ((long) (( ((long) (global::thx.Int64s.divRound(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
					}
					
					
					case 1:
					{
						return ((long) (( ((long) (global::thx.Int64s.divRound(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) );
					}
					
					
					case 2:
					{
						return ((long) (( ((long) (global::thx.Int64s.divRound(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64)) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) );
					}
					
					
					case 3:
					{
						int mod = ( (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1) >= 12 )) ? (1) : (0) );
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + mod ), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
					case 4:
					{
						int wd = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
						int mod1 = ( (( wd < 3 )) ? ( - (wd) ) : (( (( wd > 3 )) ? (( 7 - wd )) : (( (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1) < 12 )) ? ( - (wd) ) : (( 7 - wd )) )) )) );
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + mod1 ), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
					case 5:
					{
						int mod2 = ( (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) > global::Math.round(( ((double) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH))) ) / 2 )) )) ? (1) : (0) );
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) + mod2 ), 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
					case 6:
					{
						int mod3 = default(int);
						long b = ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), 6, 2, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>))) );
						if (( (( (((bool) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) > 0 )) {
							mod3 = 1;
						}
						else {
							mod3 = 0;
						}
						
						return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) + mod3 ), 1, 1, new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), new global::haxe.lang.Null<int>(0, true), default(global::haxe.lang.Null<int>));
					}
					
					
				}
				
				return default(long);
			}
		}
		
		
		public static bool sameYear(long this1, long other) {
			return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (other) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) );
		}
		
		
		public static bool sameMonth(long this1, long other) {
			if (global::thx._DateTimeUtc.DateTimeUtc_Impl_.sameYear(this1, other)) {
				return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (other) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) );
			}
			else {
				return false;
			}
			
		}
		
		
		public static bool sameDay(long this1, long other) {
			if (global::thx._DateTimeUtc.DateTimeUtc_Impl_.sameMonth(this1, other)) {
				return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (other) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) );
			}
			else {
				return false;
			}
			
		}
		
		
		public static bool sameHour(long this1, long other) {
			if (global::thx._DateTimeUtc.DateTimeUtc_Impl_.sameDay(this1, other)) {
				return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(other) );
			}
			else {
				return false;
			}
			
		}
		
		
		public static bool sameMinute(long this1, long other) {
			if (global::thx._DateTimeUtc.DateTimeUtc_Impl_.sameHour(this1, other)) {
				return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(other) );
			}
			else {
				return false;
			}
			
		}
		
		
		public static bool sameSecond(long this1, long other) {
			if (global::thx._DateTimeUtc.DateTimeUtc_Impl_.sameMinute(this1, other)) {
				return ( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1) == global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(other) );
			}
			else {
				return false;
			}
			
		}
		
		
		public static long withYear(long this1, int year) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1), true));
		}
		
		
		public static long withMonth(long this1, int month) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), month, global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1), true));
		}
		
		
		public static long withDay(long this1, int day) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), day, new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1), true));
		}
		
		
		public static long withHour(long this1, int hour) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), new global::haxe.lang.Null<int>(hour, true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1), true));
		}
		
		
		public static long withMinute(long this1, int minute) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), true), new global::haxe.lang.Null<int>(minute, true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1), true));
		}
		
		
		public static long withSecond(long this1, int second) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), true), new global::haxe.lang.Null<int>(second, true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1), true));
		}
		
		
		public static long withMillisecond(long this1, int millisecond) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.create(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), true), new global::haxe.lang.Null<int>(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), true), new global::haxe.lang.Null<int>(millisecond, true));
		}
		
		
		public static long @add(long this1, long time) {
			return ((long) (( ((long) (this1) ) + ((long) (time) ) )) );
		}
		
		
		public static long addTicks(long this1, long tickstoadd) {
			return ((long) (( ((long) (this1) ) + ((long) (tickstoadd) ) )) );
		}
		
		
		public static long subtract(long this1, long time) {
			return ((long) (( ((long) (this1) ) - ((long) (time) ) )) );
		}
		
		
		public static long subtractDate(long this1, long date) {
			return ((long) (( ((long) (this1) ) - ((long) (date) ) )) );
		}
		
		
		public static long addScaled(long this1, double @value, int scale) {
			return ((long) (( ((long) (this1) ) + ((long) (( ((long) (((int) (( ( @value * scale ) + (( (( @value >= 0 )) ? (0.5) : (-0.5) )) )) )) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) )) );
		}
		
		
		public static long addDays(long this1, double days) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(this1, days, global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerDay);
		}
		
		
		public static long addHours(long this1, double hours) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(this1, hours, global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour);
		}
		
		
		public static long addMilliseconds(long this1, int milliseconds) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(this1, ((double) (milliseconds) ), 1);
			}
		}
		
		
		public static long addMinutes(long this1, double minutes) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(this1, minutes, global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute);
		}
		
		
		public static long addMonths(long this1, int months) {
			unchecked {
				int y = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
				int m = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
				int d = global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
				int i = ( ( m - 1 ) + months );
				if (( i >= 0 )) {
					m = ((int) (( ( i % 12 ) + 1 )) );
					y = ((int) (( y + ( ((double) (i) ) / 12 ) )) );
				}
				else {
					m = ((int) (( 12 + ( (( i + 1 )) % 12 ) )) );
					y = ((int) (( y + ( ((double) ((( i - 11 ))) ) / 12 ) )) );
				}
				
				int days = global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(y, m);
				if (( d > days )) {
					d = days;
				}
				
				return ((long) (( ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.dateToTicks(y, m, d)) ) + ((long) (( ((long) (this1) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) ) )) );
			}
		}
		
		
		public static long addSeconds(long this1, double seconds) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(this1, seconds, global::thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond);
		}
		
		
		public static long addYears(long this1, int years) {
			unchecked {
				return global::thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(this1, ( years * 12 ));
			}
		}
		
		
		public static int compareTo(long this1, long other) {
			return global::thx.Int64s.compare(((long) (this1) ), ((long) (other) ));
		}
		
		
		public static bool equalsTo(long this1, long that) {
			return ( ((long) (this1) ) == ((long) (that) ) );
		}
		
		
		public static bool @equals(long self, long that) {
			return ( ((long) (self) ) == ((long) (that) ) );
		}
		
		
		public static bool notEqualsTo(long this1, long that) {
			return ( ((long) (this1) ) != ((long) (that) ) );
		}
		
		
		public static bool notEquals(long self, long that) {
			return ( ((long) (self) ) != ((long) (that) ) );
		}
		
		
		public static bool nearEqualsTo(long this1, long other, long span) {
			return ((bool) (( ((long) (global::thx.Int64s.abs(((long) (( ((long) (other) ) - ((long) (this1) ) )) ))) ) <= ((long) (global::thx._Time.Time_Impl_.abs(span)) ) )) );
		}
		
		
		public static bool greaterThan(long this1, long that) {
			unchecked {
				long b = ((long) (that) );
				return ( (( (((bool) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) > 0 );
			}
		}
		
		
		public static bool greater(long self, long that) {
			unchecked {
				long a = ((long) (self) );
				long b = ((long) (that) );
				return ( (( (((bool) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) > 0 );
			}
		}
		
		
		public static bool greaterEqualsTo(long this1, long that) {
			unchecked {
				long b = ((long) (that) );
				return ( (( (((bool) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) >= 0 );
			}
		}
		
		
		public static bool greaterEquals(long self, long that) {
			unchecked {
				long a = ((long) (self) );
				long b = ((long) (that) );
				return ( (( (((bool) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) >= 0 );
			}
		}
		
		
		public static bool lessThan(long this1, long that) {
			unchecked {
				long b = ((long) (that) );
				return ( (( (((bool) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) < 0 );
			}
		}
		
		
		public static bool less(long self, long that) {
			unchecked {
				long a = ((long) (self) );
				long b = ((long) (that) );
				return ( (( (((bool) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) < 0 );
			}
		}
		
		
		public static bool lessEqualsTo(long this1, long that) {
			unchecked {
				long b = ((long) (that) );
				return ( (( (((bool) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) <= 0 );
			}
		}
		
		
		public static bool lessEquals(long self, long that) {
			unchecked {
				long a = ((long) (self) );
				long b = ((long) (that) );
				return ( (( (((bool) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((bool) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) <= 0 );
			}
		}
		
		
		public static double toTime(long this1) {
			return global::thx.Int64s.toFloat(((long) (( (((long) (( ((long) (this1) ) - ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks) ) )) )) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ));
		}
		
		
		public static global::Date toDate(long this1) {
			return new global::Date(((global::System.DateTime) (new global::System.DateTime(((long) (this1) ))) ));
		}
		
		
		public static global::Array<long> toDateTime(long this1, global::haxe.lang.Null<long> offset) {
			return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (this1) ), ((long) (( ( ! (offset.hasValue) ) ? (global::thx._Time.Time_Impl_.zero) : ((offset).@value) )) )})) );
		}
		
		
		public static global::Array<long> toLocalDateTime(long this1) {
			return ((global::Array<long>) (new global::Array<long>(new long[]{((long) (this1) ), ((long) (global::thx._DateTime.DateTime_Impl_.localOffset()) )})) );
		}
		
		
		public static string toString(long this1) {
			unchecked {
				long abs = global::thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(global::thx.Int64s.abs(((long) (this1) )));
				string decimals = ( (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(abs) != 0 )) ? (global::haxe.lang.Runtime.concat(".", global::thx.Strings.trimCharsRight(global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(abs), "0", 7), ")"))) : ("") );
				return global::haxe.lang.Runtime.concat((( (((bool) (( ((long) (this1) ) < ((long) (global::thx.Int64s.zero) ) )) )) ? ("-") : ("") )), (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (abs) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR))), "-"), global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (abs) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), "0", 2)), "-"), global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (abs) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), "0", 2)), "T"), global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(abs), "0", 2)), ":"), global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(abs), "0", 2)), ":"), global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(abs), "0", 2)), decimals), "Z")));
			}
		}
		
		
		public static long get_ticks(long this1) {
			return this1;
		}
		
		
		public static int get_year(long this1) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
		}
		
		
		public static int get_month(long this1) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
		}
		
		
		public static int get_day(long this1) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
		}
		
		
		public static int get_hour(long this1) {
			unchecked {
				long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return ((int) (((long) (x) )) );
			}
		}
		
		
		public static int get_minute(long this1) {
			unchecked {
				long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return ((int) (((long) (x) )) );
			}
		}
		
		
		public static int get_dayOfWeek(long this1) {
			unchecked {
				long x = ((long) (( (((long) (( ((long) (( ((long) (this1) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) ) + ((long) (1) ) )) )) % ((long) (7) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return ((int) (((long) (x) )) );
			}
		}
		
		
		public static int get_dayOfYear(long this1) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY_OF_YEAR);
		}
		
		
		public static int get_millisecond(long this1) {
			unchecked {
				long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return ((int) (((long) (x) )) );
			}
		}
		
		
		public static int get_microsecond(long this1) {
			unchecked {
				long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMicrosecondI64) ) )) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.millionI64) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return ((int) (((long) (x) )) );
			}
		}
		
		
		public static int get_tickInSecond(long this1) {
			unchecked {
				long x = ((long) (( ((long) (this1) ) % ((long) (10000000) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return ((int) (((long) (x) )) );
			}
		}
		
		
		public static int get_second(long this1) {
			unchecked {
				long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				return ((int) (((long) (x) )) );
			}
		}
		
		
		public static long get_timeOfDay(long this1) {
			return ((long) (( ((long) (this1) ) % ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
		}
		
		
		public static bool get_isInLeapYear(long this1) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR));
		}
		
		
		public static int get_monthDays(long this1) {
			return global::thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH));
		}
		
		
		public static long self(long this1) {
			return ((long) (this1) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._DateTimeUtc {
	public class DateTimeUtc_Impl__dateToTicks_119__Fun : global::haxe.lang.Function {
		
		public DateTimeUtc_Impl__dateToTicks_119__Fun(int[] year1, int[] month1) : base(0, 0) {
			this.year1 = year1;
			this.month1 = month1;
		}
		
		
		public override object __hx_invoke0_o() {
			unchecked {
				if (( this.month1[0] == 0 )) {
					this.year1[0]--;
					this.month1[0] = 12;
				}
				else if (( this.month1[0] < 0 )) {
					this.month1[0] =  - (this.month1[0]) ;
					int years = ((int) (global::System.Math.Ceiling(((double) (( ((double) (this.month1[0]) ) / 12 )) ))) );
					this.year1[0] -= years;
					this.month1[0] = ( ( years * 12 ) - this.month1[0] );
				}
				else if (( this.month1[0] > 12 )) {
					int years1 = ((int) (global::System.Math.Floor(((double) (( ((double) (this.month1[0]) ) / 12 )) ))) );
					this.year1[0] += years1;
					this.month1[0] = ( this.month1[0] - ( years1 * 12 ) );
				}
				
				return null;
			}
		}
		
		
		public int[] year1;
		
		public int[] month1;
		
	}
}


