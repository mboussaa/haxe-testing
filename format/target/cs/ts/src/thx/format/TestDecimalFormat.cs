// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.format {
	public class TestDecimalFormat : global::haxe.lang.HxObject {
		
		static TestDecimalFormat() {
			unchecked {
				object __temp_stmt9 = null;
				{
					object o = null;
					{
						object __temp_odecl1 = new global::haxe.lang.DynamicObject(new int[]{41050500, 114759225, 177600534, 193568515, 214711673, 282949586, 311921353, 1112096333, 1293712380, 1484698101, 1543554379, 1610611779, 1660995221, 1798631236, 2037785099, 2058605085, 2062500402}, new object[]{"\u2030", "+Infinito", "+", ".", ",", "-", "\u20ac", "%", new global::Array<int>(new int[]{3}), "-Infinito", ".", "Non un numero reale", ",", new global::Array<int>(new int[]{3}), ".", ",", new global::Array<int>(new int[]{3})}, new int[]{45312342, 253833312, 652148892, 822857114, 1437940672, 1531979784, 1747840398, 2013154798}, new double[]{((double) (9) ), ((double) (1) ), ((double) (1) ), ((double) (2) ), ((double) (2) ), ((double) (2) ), ((double) (1) ), ((double) (2) )});
						object __temp_odecl2 = new global::haxe.lang.DynamicObject(new int[]{106319913, 354602035, 453240570, 529765024, 554059097, 584411450, 602680035, 635699692, 665670594, 667371489, 694450483, 699988920, 726839840, 726843185, 742587063, 816375999, 872279826, 908638873, 980455379, 990364012, 1055554178, 1079146715, 1273872862, 1528104702, 1700034528}, new object[]{"Gregorian", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "dddd d MMMM yyyy HH:mm:ss", "calendario gregoriano", "FirstFourDayWeek", "dddd d MMMM yyyy", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", new global::Array<object>(new object[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), "Monday", new global::Array<object>(new object[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), "/", new global::Array<object>(new object[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "", "", new global::Array<object>(new object[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), "HH:mm", ":", "HH:mm:ss", "MMMM yyyy", "dd MMMM", new global::Array<object>(new object[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new global::Array<object>(new object[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new global::Array<object>(new object[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), "dd/MM/yyyy", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"}, new int[]{931922363, 1812362308}, new double[]{((double) (1) ), ((double) (2) )});
						o = new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{"Gregorian", __temp_odecl1, "italiano", ";", "Italia", "it-IT", "it-IT", "it", "ita", "Italy", "ITA", __temp_odecl2, "Italian", false, false}, new int[]{1202619922}, new double[]{((double) (1040) )});
					}
					
					object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
					global::thx.culture.DateFormatInfo tmp1 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
						tmp1 = null;
					}
					else {
						object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
						tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
					}
					
					object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
					object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
					object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
					object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
					object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
					object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
					object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
					object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
					object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
					object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
					object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
					global::thx.culture.NumberFormatInfo tmp13 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
						tmp13 = null;
					}
					else {
						object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
						tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
					}
					
					__temp_stmt9 = global::thx.culture.Culture.register(new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true))));
				}
				
				global::thx.format.TestDecimalFormat.it = ((global::thx.culture.Culture) (__temp_stmt9) );
				object __temp_stmt10 = null;
				{
					object o = null;
					{
						object __temp_odecl3 = new global::haxe.lang.DynamicObject(new int[]{41050500, 114759225, 177600534, 193568515, 214711673, 282949586, 311921353, 1112096333, 1293712380, 1484698101, 1543554379, 1610611779, 1660995221, 1798631236, 2037785099, 2058605085, 2062500402}, new object[]{"\u2030", "Infinity", "+", ",", ".", "-", "$", "%", new global::Array<int>(new int[]{3}), "-Infinity", ",", "NaN", ".", new global::Array<int>(new int[]{3}), ",", ".", new global::Array<int>(new int[]{3})}, new int[]{45312342, 253833312, 652148892, 822857114, 1437940672, 1531979784, 1747840398, 2013154798}, new double[]{((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (0) ), ((double) (2) ), ((double) (2) ), ((double) (1) ), ((double) (2) )});
						object __temp_odecl4 = new global::haxe.lang.DynamicObject(new int[]{106319913, 354602035, 453240570, 529765024, 554059097, 584411450, 602680035, 635699692, 665670594, 667371489, 694450483, 699988920, 726839840, 726843185, 742587063, 816375999, 872279826, 908638873, 980455379, 990364012, 1055554178, 1079146715, 1273872862, 1528104702, 1700034528}, new object[]{"Gregorian", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "dddd, MMMM dd, yyyy h:mm:ss tt", "Gregorian Calendar", "FirstDay", "dddd, MMMM dd, yyyy", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", new global::Array<object>(new object[]{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}), "Sunday", new global::Array<object>(new object[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), "/", new global::Array<object>(new object[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), "AM", "PM", new global::Array<object>(new object[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}), "h:mm tt", ":", "h:mm:ss tt", "MMMM, yyyy", "MMMM dd", new global::Array<object>(new object[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}), new global::Array<object>(new object[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), new global::Array<object>(new object[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), "M/d/yyyy", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"}, new int[]{931922363, 1812362308}, new double[]{((double) (0) ), ((double) (0) )});
						o = new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{"Gregorian", __temp_odecl3, "English", ",", "United States", "en-US", "en-US", "en", "eng", "United States", "ENU", __temp_odecl4, "English", false, false}, new int[]{1202619922}, new double[]{((double) (1033) )});
					}
					
					object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
					global::thx.culture.DateFormatInfo tmp1 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
						tmp1 = null;
					}
					else {
						object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
						tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
					}
					
					object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
					object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
					object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
					object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
					object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
					object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
					object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
					object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
					object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
					object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
					object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
					global::thx.culture.NumberFormatInfo tmp13 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
						tmp13 = null;
					}
					else {
						object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
						tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
					}
					
					__temp_stmt10 = global::thx.culture.Culture.register(new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true))));
				}
				
				global::thx.format.TestDecimalFormat.us = ((global::thx.culture.Culture) (__temp_stmt10) );
				object __temp_stmt11 = null;
				{
					object o = null;
					{
						object __temp_odecl5 = new global::haxe.lang.DynamicObject(new int[]{41050500, 114759225, 177600534, 193568515, 214711673, 282949586, 311921353, 1112096333, 1293712380, 1484698101, 1543554379, 1610611779, 1660995221, 1798631236, 2037785099, 2058605085, 2062500402}, new object[]{"\u2030", "infinity", "+", ",", ".", "-", "\u20b9", "%", new global::Array<int>(new int[]{3, 2}), "-infinity", ",", "nan", ".", new global::Array<int>(new int[]{3, 2}), ",", ".", new global::Array<int>(new int[]{3, 2})}, new int[]{45312342, 253833312, 652148892, 822857114, 1437940672, 1531979784, 1747840398, 2013154798}, new double[]{((double) (12) ), ((double) (1) ), ((double) (1) ), ((double) (1) ), ((double) (2) ), ((double) (2) ), ((double) (1) ), ((double) (2) )});
						object __temp_odecl6 = new global::haxe.lang.DynamicObject(new int[]{106319913, 354602035, 453240570, 529765024, 554059097, 584411450, 602680035, 635699692, 665670594, 667371489, 694450483, 699988920, 726839840, 726843185, 742587063, 816375999, 872279826, 908638873, 980455379, 990364012, 1055554178, 1079146715, 1273872862, 1528104702, 1700034528}, new object[]{"Gregorian", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "yyyy,MMMM dd, dddd tt h:mm:ss", "\u0987\u0982\u09f0\u09be\u099c\u09c0 \u0995\u09c7\u09b2\u09c7\u09a3\u09cd\u09a1\u09be\u09f0", "FirstFourDayWeek", "yyyy,MMMM dd, dddd", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", new global::Array<object>(new object[]{"\u09b8\u09cb", "\u09ae", "\u09ac\u09c1", "\u09ac\u09c3", "\u09b6\u09c1", "\u09b6", "\u09b0"}), "Monday", new global::Array<object>(new object[]{"\u099c\u09be\u09a8\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0", "\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0", "\u09a8\u09ac\u09c7\u09ae\u09cd\u09ac\u09b0", "\u09a1\u09bf\u099a\u09c7\u09ae\u09cd\u09ac\u09b0", ""}), "-", new global::Array<object>(new object[]{"\u099c\u09be\u09a8\u09c1", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7", "\u0985\u0995\u09cd\u099f\u09cb", "\u09a8\u09ac\u09c7", "\u09a1\u09bf\u099a\u09c7", ""}), "\u09f0\u09be\u09a4\u09bf\u09aa\u09c1", "\u0986\u09ac\u09c7\u09b2\u09bf", new global::Array<object>(new object[]{"\u09b8\u09cb\u09ae.", "\u09ae\u0999\u09cd\u0997\u09b2.", "\u09ac\u09c1\u09a7.", "\u09ac\u09c3\u09b9.", "\u09b6\u09c1\u0995\u09cd\u09b0.", "\u09b6\u09a8\u09bf.", "\u09f0\u09ac\u09bf."}), "tt h:mm", ":", "tt h:mm:ss", "MMMM,yy", "dd MMMM", new global::Array<object>(new object[]{"\u09b8\u09cb\u09ae\u09ac\u09be\u09f0", "\u09ae\u0999\u09cd\u0997\u09b2\u09ac\u09be\u09f0", "\u09ac\u09c1\u09a7\u09ac\u09be\u09f0", "\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf\u09ac\u09be\u09f0", "\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09f0", "\u09b6\u09a8\u09bf\u09ac\u09be\u09f0", "\u09f0\u09ac\u09bf\u09ac\u09be\u09f0"}), new global::Array<object>(new object[]{"\u099c\u09be\u09a8\u09c1", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7", "\u0985\u0995\u09cd\u099f\u09cb", "\u09a8\u09ac\u09c7", "\u09a1\u09bf\u099a\u09c7", ""}), new global::Array<object>(new object[]{"\u099c\u09be\u09a8\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0", "\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0", "\u09a8\u09ac\u09c7\u09ae\u09cd\u09ac\u09b0", "\u09a1\u09bf\u099a\u09c7\u09ae\u09cd\u09ac\u09b0", ""}), "dd-MM-yyyy", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"}, new int[]{931922363, 1812362308}, new double[]{((double) (1) ), ((double) (2) )});
						o = new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{"Gregorian", __temp_odecl5, "\u0985\u09b8\u09ae\u09c0\u09df\u09be", ",", "\u09ad\u09be\u09f0\u09a4", "as-IN", "as-IN", "as", "asm", "India", "ASM", __temp_odecl6, "Assamese", false, false}, new int[]{1202619922}, new double[]{((double) (1101) )});
					}
					
					object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
					global::thx.culture.DateFormatInfo tmp1 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
						tmp1 = null;
					}
					else {
						object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
						tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
					}
					
					object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
					object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
					object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
					object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
					object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
					object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
					object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
					object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
					object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
					object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
					object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
					global::thx.culture.NumberFormatInfo tmp13 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
						tmp13 = null;
					}
					else {
						object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
						tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
					}
					
					__temp_stmt11 = global::thx.culture.Culture.register(new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true))));
				}
				
				global::thx.format.TestDecimalFormat.asIn = ((global::thx.culture.Culture) (__temp_stmt11) );
				object __temp_stmt12 = null;
				{
					object o = null;
					{
						object __temp_odecl7 = new global::haxe.lang.DynamicObject(new int[]{41050500, 114759225, 177600534, 193568515, 214711673, 282949586, 311921353, 1112096333, 1293712380, 1484698101, 1543554379, 1610611779, 1660995221, 1798631236, 2037785099, 2058605085, 2062500402}, new object[]{"\u2030", "\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c", "+", "\u00a0", ",", "-", "\u20bd", "%", new global::Array<int>(new int[]{3, 0}), "-\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c", "\u00a0", "NaN", ",", new global::Array<int>(new int[]{3, 0}), "\u00a0", ",", new global::Array<int>(new int[]{3, 0})}, new int[]{45312342, 253833312, 652148892, 822857114, 1437940672, 1531979784, 1747840398, 2013154798}, new double[]{((double) (8) ), ((double) (1) ), ((double) (1) ), ((double) (3) ), ((double) (2) ), ((double) (2) ), ((double) (1) ), ((double) (2) )});
						object __temp_odecl8 = new global::haxe.lang.DynamicObject(new int[]{106319913, 354602035, 453240570, 529765024, 554059097, 584411450, 602680035, 635699692, 665670594, 667371489, 694450483, 699988920, 726839840, 726843185, 742587063, 816375999, 872279826, 908638873, 980455379, 990364012, 1055554178, 1079146715, 1273872862, 1528104702, 1700034528}, new object[]{"Gregorian", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "d MMMM yyyy \'\u0439\' H:mm:ss", "\u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044b", "FirstDay", "d MMMM yyyy \'\u0439\'", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", new global::Array<object>(new object[]{"\u0419\u0448", "\u0414\u0448", "\u0428\u0448", "\u0428\u0440", "\u041a\u0441", "\u0419\u043c", "\u0428\u0431"}), "Monday", new global::Array<object>(new object[]{"\u0493\u0438\u043d\u0443\u0430\u0440", "\u0444\u0435\u0432\u0440\u0430\u043b\u044c", "\u043c\u0430\u0440\u0442", "\u0430\u043f\u0440\u0435\u043b\u044c", "\u043c\u0430\u0439", "\u0438\u044e\u043d\u044c", "\u0438\u044e\u043b\u044c", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u043e\u043a\u0442\u044f\u0431\u0440\u044c", "\u043d\u043e\u044f\u0431\u0440\u044c", "\u0434\u0435\u043a\u0430\u0431\u0440\u044c", ""}), ".", new global::Array<object>(new object[]{"\u0493\u0438\u043d", "\u0444\u0435\u0432", "\u043c\u0430\u0440", "\u0430\u043f\u0440", "\u043c\u0430\u0439", "\u0438\u044e\u043d", "\u0438\u044e\u043b", "\u0430\u0432\u0433", "\u0441\u0435\u043d", "\u043e\u043a\u0442", "\u043d\u043e\u044f", "\u0434\u0435\u043a", ""}), "", "", new global::Array<object>(new object[]{"\u0419\u0448", "\u0414\u0448", "\u0428\u0448", "\u0428\u0440", "\u041a\u0441", "\u0419\u043c", "\u0428\u0431"}), "H:mm", ":", "H:mm:ss", "MMMM yyyy", "MMMM dd", new global::Array<object>(new object[]{"\u0419\u04d9\u043a\u0448\u04d9\u043c\u0431\u0435", "\u0414\u04af\u0448\u04d9\u043c\u0431\u0435", "\u0428\u0438\u0448\u04d9\u043c\u0431\u0435", "\u0428\u0430\u0440\u0448\u0430\u043c\u0431\u044b", "\u041a\u0435\u0441\u0430\u0499\u043d\u0430", "\u0419\u043e\u043c\u0430", "\u0428\u04d9\u043c\u0431\u0435"}), new global::Array<object>(new object[]{"\u0493\u0438\u043d", "\u0444\u0435\u0432", "\u043c\u0430\u0440", "\u0430\u043f\u0440", "\u043c\u0430\u0439", "\u0438\u044e\u043d", "\u0438\u044e\u043b", "\u0430\u0432\u0433", "\u0441\u0435\u043d", "\u043e\u043a\u0442", "\u043d\u043e\u044f", "\u0434\u0435\u043a", ""}), new global::Array<object>(new object[]{"\u0493\u0438\u043d\u0443\u0430\u0440", "\u0444\u0435\u0432\u0440\u0430\u043b\u044c", "\u043c\u0430\u0440\u0442", "\u0430\u043f\u0440\u0435\u043b\u044c", "\u043c\u0430\u0439", "\u0438\u044e\u043d\u044c", "\u0438\u044e\u043b\u044c", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u043e\u043a\u0442\u044f\u0431\u0440\u044c", "\u043d\u043e\u044f\u0431\u0440\u044c", "\u0434\u0435\u043a\u0430\u0431\u0440\u044c", ""}), "dd.MM.yy", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"}, new int[]{931922363, 1812362308}, new double[]{((double) (1) ), ((double) (0) )});
						o = new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{"Gregorian", __temp_odecl7, "\u0411\u0430\u0448\u04a1\u043e\u0440\u0442", ";", "\u0420\u043e\u0441\u0441\u0438\u044f", "ba-RU", "ba-RU", "ba", "bak", "Russia", "BAS", __temp_odecl8, "Bashkir", false, false}, new int[]{1202619922}, new double[]{((double) (1133) )});
					}
					
					object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
					global::thx.culture.DateFormatInfo tmp1 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
						tmp1 = null;
					}
					else {
						object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
						tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
					}
					
					object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
					object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
					object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
					object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
					object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
					object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
					object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
					object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
					object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
					object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
					object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
					global::thx.culture.NumberFormatInfo tmp13 = null;
					if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
						tmp13 = null;
					}
					else {
						object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
						tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
					}
					
					__temp_stmt12 = global::thx.culture.Culture.register(new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true))));
				}
				
				global::thx.format.TestDecimalFormat.baRu = ((global::thx.culture.Culture) (__temp_stmt12) );
			}
		}
		
		
		public TestDecimalFormat(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestDecimalFormat() {
			global::thx.format.TestDecimalFormat.__hx_ctor_thx_format_TestDecimalFormat(this);
		}
		
		
		public static void __hx_ctor_thx_format_TestDecimalFormat(global::thx.format.TestDecimalFormat __temp_me191) {
		}
		
		
		public static global::thx.culture.Culture it;
		
		public static global::thx.culture.Culture us;
		
		public static global::thx.culture.Culture asIn;
		
		public static global::thx.culture.Culture baRu;
		
		public static new object __hx_createEmpty() {
			return new global::thx.format.TestDecimalFormat(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.format.TestDecimalFormat();
		}
		
		
		public virtual void testNumber() {
			unchecked {
				global::utest.Assert.@equals("1.00", global::thx.format.DecimalFormat.number(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.0)) ), new global::haxe.lang.Null<int>(2, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
				global::utest.Assert.@equals("1.2", global::thx.format.DecimalFormat.number(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.2)) ), new global::haxe.lang.Null<int>(1, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
				global::utest.Assert.@equals("1", global::thx.format.DecimalFormat.number(global::thx._Decimal.Decimal_Impl_.fromInt(1), new global::haxe.lang.Null<int>(0, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
				global::utest.Assert.@equals("10,000", global::thx.format.DecimalFormat.number(global::thx._Decimal.Decimal_Impl_.fromInt(10000), new global::haxe.lang.Null<int>(0, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
				global::utest.Assert.@equals("12,345.679", global::thx.format.DecimalFormat.number(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(12345.6789)) ), new global::haxe.lang.Null<int>(3, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
				global::utest.Assert.@equals("-1.00", global::thx.format.DecimalFormat.number(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1.0)) ), new global::haxe.lang.Null<int>(2, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
				global::utest.Assert.@equals("-1.2", global::thx.format.DecimalFormat.number(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1.2)) ), new global::haxe.lang.Null<int>(1, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
				global::utest.Assert.@equals("-1", global::thx.format.DecimalFormat.number(global::thx._Decimal.Decimal_Impl_.fromInt(-1), new global::haxe.lang.Null<int>(0, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
				global::utest.Assert.@equals("-10,000", global::thx.format.DecimalFormat.number(global::thx._Decimal.Decimal_Impl_.fromInt(-10000), new global::haxe.lang.Null<int>(0, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
				global::utest.Assert.@equals("-12,345.679", global::thx.format.DecimalFormat.number(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-12345.6789)) ), new global::haxe.lang.Null<int>(3, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
				global::thx.bigint.DecimalImpl exp = ((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(2)) ).pow(50);
				global::utest.Assert.@equals("1,125,899,906,842,624.00", global::thx.format.DecimalFormat.number(exp, new global::haxe.lang.Null<int>(2, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
				global::thx.bigint.DecimalImpl exp1 = ((global::thx.bigint.DecimalImpl) (global::thx._Decimal.Decimal_Impl_.fromInt(2)) ).pow(-18);
				global::utest.Assert.@equals("0.000003814610", global::thx.format.DecimalFormat.number(exp1, new global::haxe.lang.Null<int>(11, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testNumber", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
			}
		}
		
		
		public virtual void testCurrency() {
			unchecked {
				global::utest.Assert.@equals("(\u00a412,345.68)", global::thx.format.DecimalFormat.currency(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-12345.6789)) ), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCurrency", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
			}
		}
		
		
		public virtual void testCurrencyIT() {
			unchecked {
				global::utest.Assert.@equals("-\u20ac 12.345,68", global::thx.format.DecimalFormat.currency(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-12345.6789)) ), default(global::haxe.lang.Null<int>), null, global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCurrencyIT", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
			}
		}
		
		
		public virtual void testCurrencyUS() {
			unchecked {
				global::utest.Assert.@equals("($12,345.68)", global::thx.format.DecimalFormat.currency(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-12345.6789)) ), default(global::haxe.lang.Null<int>), null, global::thx.format.TestDecimalFormat.us), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCurrencyUS", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
			}
		}
		
		
		public virtual void testPercent() {
			unchecked {
				global::utest.Assert.@equals("2.33 %", global::thx.format.DecimalFormat.percent(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.02333)) ), default(global::haxe.lang.Null<int>), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPercent", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
				global::utest.Assert.@equals("2,33%", global::thx.format.DecimalFormat.percent(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.02333)) ), default(global::haxe.lang.Null<int>), global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPercent", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
			}
		}
		
		
		public virtual void testPermille() {
			unchecked {
				global::utest.Assert.@equals("23.33 \u2030", global::thx.format.DecimalFormat.permille(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.02333)) ), default(global::haxe.lang.Null<int>), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPermille", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (54) )}));
				global::utest.Assert.@equals("23,33\u2030", global::thx.format.DecimalFormat.permille(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.02333)) ), default(global::haxe.lang.Null<int>), global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPermille", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
			}
		}
		
		
		public virtual void testUnit() {
			unchecked {
				global::utest.Assert.@equals("23.33 kg.", global::thx.format.DecimalFormat.unit(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(23.3333)) ), 2, "kg.", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnit", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
				global::utest.Assert.@equals("23,33kg.", global::thx.format.DecimalFormat.unit(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(23.3333)) ), 2, "kg.", global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testUnit", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
			}
		}
		
		
		public virtual void testDecimal() {
			unchecked {
				global::utest.Assert.@equals("12", global::thx.format.DecimalFormat.format(global::thx._Decimal.Decimal_Impl_.fromInt(12), "d", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecimal", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (64) )}));
				global::utest.Assert.@equals("0012", global::thx.format.DecimalFormat.format(global::thx._Decimal.Decimal_Impl_.fromInt(12), "d4", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDecimal", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (65) )}));
			}
		}
		
		
		public virtual void testFormatFixed() {
			unchecked {
				global::utest.Assert.@equals("1234.57", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1234.5678)) ), "f", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatFixed", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
				global::utest.Assert.@equals("1234,57", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1234.5678)) ), "f", global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatFixed", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
				global::utest.Assert.@equals("1234.5678", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1234.5678)) ), "f4", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFormatFixed", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (71) )}));
			}
		}
		
		
		public virtual void testExponential() {
			unchecked {
				global::utest.Assert.@equals("1.000000e+001", global::thx.format.DecimalFormat.exponential(global::thx._Decimal.Decimal_Impl_.fromInt(10), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (75) )}));
				global::utest.Assert.@equals("-1.000000e+001", global::thx.format.DecimalFormat.exponential(global::thx._Decimal.Decimal_Impl_.fromInt(-10), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (76) )}));
				global::utest.Assert.@equals("1.000000e+000", global::thx.format.DecimalFormat.exponential(global::thx._Decimal.Decimal_Impl_.fromInt(1), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (77) )}));
				global::utest.Assert.@equals("-1.000000e+000", global::thx.format.DecimalFormat.exponential(global::thx._Decimal.Decimal_Impl_.fromInt(-1), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
				global::utest.Assert.@equals("7.000000e-001", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.7)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (79) )}));
				global::utest.Assert.@equals("-7.000000e-001", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-0.7)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
				global::utest.Assert.@equals("1.234000e+003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.234e3)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (82) )}));
				global::utest.Assert.@equals("1.234000e-003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.234e-003)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
				global::utest.Assert.@equals("1.234000e-003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.001234)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (84) )}));
				global::utest.Assert.@equals("-1.234000e+003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1.234e3)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (85) )}));
				global::utest.Assert.@equals("-1.234000e-003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1.234e-003)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (86) )}));
				global::utest.Assert.@equals("1.234000e+050", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.234e50)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (88) )}));
				global::utest.Assert.@equals("1.234000e-050", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.234e-50)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (89) )}));
				global::utest.Assert.@equals("-1.234000e+050", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1.234e50)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (90) )}));
				global::utest.Assert.@equals("-1.234000e-050", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1.234e-50)) ), default(global::haxe.lang.Null<int>), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (91) )}));
				global::utest.Assert.@equals("1.23e+003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.234e3)) ), new global::haxe.lang.Null<int>(2, true), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (93) )}));
				global::utest.Assert.@equals("1.23e-003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.234e-003)) ), new global::haxe.lang.Null<int>(2, true), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (94) )}));
				global::utest.Assert.@equals("-1.23e+003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1.234e3)) ), new global::haxe.lang.Null<int>(2, true), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (95) )}));
				global::utest.Assert.@equals("-1.23e-003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1.234e-003)) ), new global::haxe.lang.Null<int>(2, true), default(global::haxe.lang.Null<int>), null, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (96) )}));
				global::utest.Assert.@equals("1,23e+003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.234e3)) ), new global::haxe.lang.Null<int>(2, true), default(global::haxe.lang.Null<int>), null, global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (98) )}));
				global::utest.Assert.@equals("1,23e-003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.234e-003)) ), new global::haxe.lang.Null<int>(2, true), default(global::haxe.lang.Null<int>), null, global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
				global::utest.Assert.@equals("-1,23e+003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1.234e3)) ), new global::haxe.lang.Null<int>(2, true), default(global::haxe.lang.Null<int>), null, global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
				global::utest.Assert.@equals("-1,23e-003", global::thx.format.DecimalFormat.exponential(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1.234e-003)) ), new global::haxe.lang.Null<int>(2, true), default(global::haxe.lang.Null<int>), null, global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testExponential", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (101) )}));
			}
		}
		
		
		public virtual void testPrintfd() {
			unchecked {
				global::thx.bigint.DecimalImpl n = global::thx._Decimal.Decimal_Impl_.fromInt(461012);
				global::utest.Assert.@equals("461012", global::thx.format.DecimalFormat.printf(n, "%d", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrintfd", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (106) )}));
				global::utest.Assert.@equals("00461012", global::thx.format.DecimalFormat.printf(n, "%08d", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrintfd", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (107) )}));
				global::utest.Assert.@equals(" +461012", global::thx.format.DecimalFormat.printf(n, "%+8d", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrintfd", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (108) )}));
				global::utest.Assert.@equals("461012  ", global::thx.format.DecimalFormat.printf(n, "%-8d", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrintfd", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (109) )}));
				global::utest.Assert.@equals("+461012 ", global::thx.format.DecimalFormat.printf(n, "%-+8d", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrintfd", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (110) )}));
			}
		}
		
		
		public virtual void testPrintfb() {
			unchecked {
				global::thx.bigint.DecimalImpl n = global::thx._Decimal.Decimal_Impl_.fromInt(10);
				global::utest.Assert.@equals("1010", global::thx.format.DecimalFormat.printf(n, "%b", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrintfb", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (115) )}));
				global::utest.Assert.@equals("b1010", global::thx.format.DecimalFormat.printf(n, "%#b", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrintfb", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (116) )}));
				global::utest.Assert.@equals("B1010", global::thx.format.DecimalFormat.printf(n, "%#B", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrintfb", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (117) )}));
				global::utest.Assert.@equals("     B1010", global::thx.format.DecimalFormat.printf(n, "%#10B", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrintfb", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (118) )}));
				global::utest.Assert.@equals("00000B1010", global::thx.format.DecimalFormat.printf(n, "%#010B", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testPrintfb", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (119) )}));
			}
		}
		
		
		public virtual void testRounding() {
			unchecked {
				global::utest.Assert.@equals("0.9", global::thx.format.DecimalFormat.@fixed(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.89)) ), new global::haxe.lang.Null<int>(1, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (123) )}));
				global::utest.Assert.@equals("1", global::thx.format.DecimalFormat.@fixed(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.99)) ), new global::haxe.lang.Null<int>(0, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (124) )}));
				global::utest.Assert.@equals("0.9", global::thx.format.DecimalFormat.@fixed(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.91)) ), new global::haxe.lang.Null<int>(1, true), null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (125) )}));
			}
		}
		
		
		public virtual void testDifferentGroups() {
			unchecked {
				global::thx.bigint.DecimalImpl @value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1234567890.123456)) );
				global::utest.Assert.@equals("1,23,45,67,890.12", global::thx.format.DecimalFormat.number(@value, default(global::haxe.lang.Null<int>), global::thx.format.TestDecimalFormat.asIn), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifferentGroups", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (130) )}));
				global::utest.Assert.@equals("1234567\u00a0890,12", global::thx.format.DecimalFormat.number(@value, default(global::haxe.lang.Null<int>), global::thx.format.TestDecimalFormat.baRu), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifferentGroups", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (131) )}));
				global::utest.Assert.@equals("1,23,45,67,890.1", global::thx.format.DecimalFormat.format(@value, "0,0000.0", global::thx.format.TestDecimalFormat.asIn), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifferentGroups", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (133) )}));
				global::utest.Assert.@equals("1234567\u00a0890,1", global::thx.format.DecimalFormat.format(@value, "0,0000.0", global::thx.format.TestDecimalFormat.baRu), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDifferentGroups", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (134) )}));
			}
		}
		
		
		public virtual void testCustomFormat0() {
			unchecked {
				global::thx.bigint.DecimalImpl @value = global::thx._Decimal.Decimal_Impl_.fromInt(123);
				global::utest.Assert.@equals("00123", global::thx.format.DecimalFormat.format(@value, "00000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (140) )}));
				@value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.2)) );
				global::utest.Assert.@equals("1.20", global::thx.format.DecimalFormat.format(@value, "0.00", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (143) )}));
				global::utest.Assert.@equals("01,20", global::thx.format.DecimalFormat.format(@value, "00.00", global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (144) )}));
				@value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.56)) );
				global::utest.Assert.@equals("0,6", global::thx.format.DecimalFormat.format(@value, "0.0", global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (146) )}));
				@value = global::thx._Decimal.Decimal_Impl_.fromInt(1234567890);
				global::utest.Assert.@equals("1,234,567,890", global::thx.format.DecimalFormat.format(@value, "0,0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (149) )}));
				global::utest.Assert.@equals("1.234.567.890", global::thx.format.DecimalFormat.format(@value, "0,0", global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (150) )}));
				@value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1234567890.123456)) );
				global::utest.Assert.@equals("1,234,567,890.1", global::thx.format.DecimalFormat.format(@value, "0,0.0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (153) )}));
				@value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1234.567890)) );
				global::utest.Assert.@equals("1,234.57", global::thx.format.DecimalFormat.format(@value, "0,0.00", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (156) )}));
				@value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.12345")) );
				global::utest.Assert.@equals("(1,234,567,8) 90.123", global::thx.format.DecimalFormat.format(@value, "(000) 0,0.000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (158) )}));
				global::utest.Assert.@equals("(12345678) 90.123", global::thx.format.DecimalFormat.format(@value, "(000) 00.000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (159) )}));
				global::utest.Assert.@equals("(123456789) 0.123", global::thx.format.DecimalFormat.format(@value, "(000) 0.000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (160) )}));
				global::utest.Assert.@equals("1234567890.1", global::thx.format.DecimalFormat.format(@value, "0.0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (161) )}));
				global::utest.Assert.@equals("(123456) 7890", global::thx.format.DecimalFormat.format(@value, "(000) 0000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (162) )}));
				@value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.23)) );
				global::utest.Assert.@equals("(00,0) 01.230", global::thx.format.DecimalFormat.format(@value, "(000) 0,0.000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (165) )}));
				global::utest.Assert.@equals("(000) 01.230", global::thx.format.DecimalFormat.format(@value, "(000) 00.000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (166) )}));
				global::utest.Assert.@equals("(000) 1.230", global::thx.format.DecimalFormat.format(@value, "(000) 0.000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (167) )}));
				global::utest.Assert.@equals("1.2", global::thx.format.DecimalFormat.format(@value, "0.0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (168) )}));
				global::utest.Assert.@equals("(000) 0001", global::thx.format.DecimalFormat.format(@value, "(000) 0000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (169) )}));
				global::utest.Assert.@equals("(000) 0001", global::thx.format.DecimalFormat.format(@value, "(000) 0000;(000) 0000-", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (170) )}));
				global::utest.Assert.@equals("(000) 0001-", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (@value) ).negate()) ), "(000) 0000;(000) 0000-", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormat0", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (171) )}));
			}
		}
		
		
		public virtual void testCustomFormatHash() {
			unchecked {
				global::thx.bigint.DecimalImpl @value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.2)) );
				global::utest.Assert.@equals("1.2", global::thx.format.DecimalFormat.format(@value, "#.##", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (177) )}));
				@value = global::thx._Decimal.Decimal_Impl_.fromInt(123);
				global::utest.Assert.@equals("123", global::thx.format.DecimalFormat.format(@value, "####", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (180) )}));
				@value = global::thx._Decimal.Decimal_Impl_.fromInt(123456);
				global::utest.Assert.@equals("[12-34-56]", global::thx.format.DecimalFormat.format(@value, "[##-##-##]", global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (184) )}));
				@value = global::thx._Decimal.Decimal_Impl_.fromInt(1234567890);
				global::utest.Assert.@equals("1234567890", global::thx.format.DecimalFormat.format(@value, "#", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (187) )}));
				global::utest.Assert.@equals("(123) 456-7890", global::thx.format.DecimalFormat.format(@value, "(###) ###-####\"", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (188) )}));
				@value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.parse("1234567890.12345")) );
				global::utest.Assert.@equals("(1,234,567,8) 90.123", global::thx.format.DecimalFormat.format(@value, "(###) #,#.###", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (191) )}));
				global::utest.Assert.@equals("(12345678) 90.123", global::thx.format.DecimalFormat.format(@value, "(###) ##.###", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (192) )}));
				global::utest.Assert.@equals("(123456789) 0.123", global::thx.format.DecimalFormat.format(@value, "(###) #.###", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (193) )}));
				global::utest.Assert.@equals("1234567890.1", global::thx.format.DecimalFormat.format(@value, "#.#", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (194) )}));
				global::utest.Assert.@equals("(123456) 7890", global::thx.format.DecimalFormat.format(@value, "(###) ####", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (195) )}));
				@value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.23)) );
				global::utest.Assert.@equals("() 1.23", global::thx.format.DecimalFormat.format(@value, "(###) #,#.###", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (198) )}));
				global::utest.Assert.@equals("() 1.23", global::thx.format.DecimalFormat.format(@value, "(###) ##.###", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (199) )}));
				global::utest.Assert.@equals("() 1.23", global::thx.format.DecimalFormat.format(@value, "(###) #.###", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (200) )}));
				global::utest.Assert.@equals("1.2", global::thx.format.DecimalFormat.format(@value, "#.#", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (201) )}));
				global::utest.Assert.@equals("() 1", global::thx.format.DecimalFormat.format(@value, "(###) ####", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (202) )}));
				global::utest.Assert.@equals("() 1", global::thx.format.DecimalFormat.format(@value, "(###) ####;(###) ####-", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (203) )}));
				global::utest.Assert.@equals("() 1-", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (((global::thx.bigint.DecimalImpl) (@value) ).negate()) ), "(###) ####;(###) ####-", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomFormatHash", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (204) )}));
			}
		}
		
		
		public virtual void testCustomDecimalSeparator() {
			unchecked {
				global::thx.bigint.DecimalImpl @value = global::thx._Decimal.Decimal_Impl_.fromInt(1234567890);
				global::utest.Assert.@equals("1,234,567,890", global::thx.format.DecimalFormat.format(@value, "#,#", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomDecimalSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (210) )}));
				global::utest.Assert.@equals("1,235", global::thx.format.DecimalFormat.format(@value, "#,#,,", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomDecimalSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (212) )}));
				global::utest.Assert.@equals("1,235", global::thx.format.DecimalFormat.format(@value, "#,##0,,", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomDecimalSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (213) )}));
				global::utest.Assert.@equals("1", global::thx.format.DecimalFormat.format(@value, "#,#,,,", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomDecimalSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (215) )}));
			}
		}
		
		
		public virtual void testCustomDecimalFranction() {
			unchecked {
				global::thx.bigint.DecimalImpl @value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1.2)) );
				global::utest.Assert.@equals("1.20", global::thx.format.DecimalFormat.format(@value, "0.00", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomDecimalFranction", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (221) )}));
				global::utest.Assert.@equals("01.20", global::thx.format.DecimalFormat.format(@value, "00.00", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomDecimalFranction", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (222) )}));
				global::utest.Assert.@equals("01,20", global::thx.format.DecimalFormat.format(@value, "00.00", global::thx.format.TestDecimalFormat.it), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomDecimalFranction", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (223) )}));
				@value = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.086)) );
				global::utest.Assert.@equals("8.6%", global::thx.format.DecimalFormat.format(@value, "#0.##%", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomDecimalFranction", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (226) )}));
				global::utest.Assert.@equals("8.60%", global::thx.format.DecimalFormat.format(@value, "#0.00%", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomDecimalFranction", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (227) )}));
				@value = global::thx._Decimal.Decimal_Impl_.fromInt(86000);
				global::utest.Assert.@equals("8.6E+4", global::thx.format.DecimalFormat.format(@value, "0.###E+0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomDecimalFranction", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (230) )}));
			}
		}
		
		
		public virtual void testCustomPercentSpecifier() {
			unchecked {
				global::utest.Assert.@equals("8.6%", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.086)) ), "#0.##%", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomPercentSpecifier", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (234) )}));
			}
		}
		
		
		public virtual void testCustomPermilleSpecifier() {
			unchecked {
				global::utest.Assert.@equals("3.54\u2030", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.00354)) ), "#0.##\u2030", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomPermilleSpecifier", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (238) )}));
			}
		}
		
		
		public virtual void testCustomE() {
			unchecked {
				global::thx.bigint.DecimalImpl @value = global::thx._Decimal.Decimal_Impl_.fromInt(86000);
				global::utest.Assert.@equals("8.6E+4", global::thx.format.DecimalFormat.format(@value, "0.###E+0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomE", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (243) )}));
				global::utest.Assert.@equals("8.6E+004", global::thx.format.DecimalFormat.format(@value, "0.###E+000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomE", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (244) )}));
				global::utest.Assert.@equals("8.6E004", global::thx.format.DecimalFormat.format(@value, "0.###E-000", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomE", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (245) )}));
			}
		}
		
		
		public virtual void testCustomEscape() {
			unchecked {
				global::thx.bigint.DecimalImpl @value = global::thx._Decimal.Decimal_Impl_.fromInt(123);
				global::utest.Assert.@equals("### 123 dollars and 00 cents ###", global::thx.format.DecimalFormat.format(@value, "\\#\\#\\# ##0 dollars and \\0\\0 c\\ents \\#\\#\\#", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomEscape", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (250) )}));
				global::utest.Assert.@equals("\\\\\\ 123 dollars and 00 cents \\\\\\", global::thx.format.DecimalFormat.format(@value, "\\\\\\\\\\\\ ##0 dollars and \\0\\0 c\\ents \\\\\\\\\\\\", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomEscape", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (251) )}));
			}
		}
		
		
		public virtual void testSectionSeparator() {
			unchecked {
				global::thx.bigint.DecimalImpl pos = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(1234.0)) );
				global::thx.bigint.DecimalImpl neg = ((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-1234.0)) );
				global::thx.bigint.DecimalImpl zero = global::thx._Decimal.Decimal_Impl_.fromInt(0);
				global::utest.Assert.@equals("1234", global::thx.format.DecimalFormat.format(pos, "##;(##)", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSectionSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (262) )}));
				global::utest.Assert.@equals("(1234)", global::thx.format.DecimalFormat.format(neg, "##;(##)", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSectionSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (263) )}));
				global::utest.Assert.@equals("0", global::thx.format.DecimalFormat.format(zero, "##;(##)", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSectionSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (264) )}));
				global::utest.Assert.@equals("1234", global::thx.format.DecimalFormat.format(pos, "##;(##);**Z\\ero**", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSectionSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (266) )}));
				global::utest.Assert.@equals("(1234)", global::thx.format.DecimalFormat.format(neg, "##;(##);**Z\\ero**", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSectionSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (267) )}));
				global::utest.Assert.@equals("**Zero**", global::thx.format.DecimalFormat.format(zero, "##;(##);**Z\\ero**", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testSectionSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (268) )}));
			}
		}
		
		
		public virtual void testCustomRounding() {
			unchecked {
				global::utest.Assert.@equals("1", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.99)) ), "0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (272) )}));
				global::utest.Assert.@equals("1.0", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.99)) ), "0.0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (273) )}));
				global::utest.Assert.@equals("0.1", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(0.099)) ), "0.0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (274) )}));
				global::utest.Assert.@equals("10", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(9.9)) ), "0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (275) )}));
				global::utest.Assert.@equals("100", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(99.9)) ), "0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (276) )}));
				global::utest.Assert.@equals("-1", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-0.99)) ), "0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (277) )}));
				global::utest.Assert.@equals("-1.0", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-0.99)) ), "0.0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (278) )}));
				global::utest.Assert.@equals("-0.1", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-0.099)) ), "0.0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (279) )}));
				global::utest.Assert.@equals("-10", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-9.9)) ), "0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (280) )}));
				global::utest.Assert.@equals("-100", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(-99.9)) ), "0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomRounding", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (281) )}));
			}
		}
		
		
		public virtual void testCustomEscapedDecimalSeparator() {
			unchecked {
				global::utest.Assert.@equals("1.2.3", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(12.34)) ), "0\\.0.0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomEscapedDecimalSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (285) )}));
				global::utest.Assert.@equals("1.2.3", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(12.34)) ), "0\'.\'0.0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomEscapedDecimalSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (286) )}));
				global::utest.Assert.@equals("1.2.3", global::thx.format.DecimalFormat.format(((global::thx.bigint.DecimalImpl) (global::thx.bigint.Decimals.fromFloat(12.34)) ), "0\".\"0.0", null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCustomEscapedDecimalSeparator", "thx.format.TestDecimalFormat", "TestDecimalFormat.hx"}, new int[]{1981972957}, new double[]{((double) (287) )}));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 431030292:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCustomEscapedDecimalSeparator", 431030292)) );
					}
					
					
					case 696720919:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCustomRounding", 696720919)) );
					}
					
					
					case 143441458:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testSectionSeparator", 143441458)) );
					}
					
					
					case 985129348:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCustomEscape", 985129348)) );
					}
					
					
					case 493691202:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCustomE", 493691202)) );
					}
					
					
					case 1594730607:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCustomPermilleSpecifier", 1594730607)) );
					}
					
					
					case 673902972:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCustomPercentSpecifier", 673902972)) );
					}
					
					
					case 489915600:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCustomDecimalFranction", 489915600)) );
					}
					
					
					case 1065374039:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCustomDecimalSeparator", 1065374039)) );
					}
					
					
					case 547728936:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCustomFormatHash", 547728936)) );
					}
					
					
					case 1631282614:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCustomFormat0", 1631282614)) );
					}
					
					
					case 2011513979:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDifferentGroups", 2011513979)) );
					}
					
					
					case 1401610182:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRounding", 1401610182)) );
					}
					
					
					case 1090307191:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPrintfb", 1090307191)) );
					}
					
					
					case 1090307193:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPrintfd", 1090307193)) );
					}
					
					
					case 1229579091:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testExponential", 1229579091)) );
					}
					
					
					case 243941259:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFormatFixed", 243941259)) );
					}
					
					
					case 597467743:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDecimal", 597467743)) );
					}
					
					
					case 1356615670:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testUnit", 1356615670)) );
					}
					
					
					case 2116486270:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPermille", 2116486270)) );
					}
					
					
					case 899913875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testPercent", 899913875)) );
					}
					
					
					case 1543876321:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCurrencyUS", 1543876321)) );
					}
					
					
					case 1543873646:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCurrencyIT", 1543873646)) );
					}
					
					
					case 239873475:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCurrency", 239873475)) );
					}
					
					
					case 980339899:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testNumber", 980339899)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 431030292:
					{
						this.testCustomEscapedDecimalSeparator();
						break;
					}
					
					
					case 696720919:
					{
						this.testCustomRounding();
						break;
					}
					
					
					case 143441458:
					{
						this.testSectionSeparator();
						break;
					}
					
					
					case 985129348:
					{
						this.testCustomEscape();
						break;
					}
					
					
					case 493691202:
					{
						this.testCustomE();
						break;
					}
					
					
					case 1594730607:
					{
						this.testCustomPermilleSpecifier();
						break;
					}
					
					
					case 673902972:
					{
						this.testCustomPercentSpecifier();
						break;
					}
					
					
					case 489915600:
					{
						this.testCustomDecimalFranction();
						break;
					}
					
					
					case 1065374039:
					{
						this.testCustomDecimalSeparator();
						break;
					}
					
					
					case 547728936:
					{
						this.testCustomFormatHash();
						break;
					}
					
					
					case 1631282614:
					{
						this.testCustomFormat0();
						break;
					}
					
					
					case 2011513979:
					{
						this.testDifferentGroups();
						break;
					}
					
					
					case 1401610182:
					{
						this.testRounding();
						break;
					}
					
					
					case 1090307191:
					{
						this.testPrintfb();
						break;
					}
					
					
					case 1090307193:
					{
						this.testPrintfd();
						break;
					}
					
					
					case 1229579091:
					{
						this.testExponential();
						break;
					}
					
					
					case 243941259:
					{
						this.testFormatFixed();
						break;
					}
					
					
					case 597467743:
					{
						this.testDecimal();
						break;
					}
					
					
					case 1356615670:
					{
						this.testUnit();
						break;
					}
					
					
					case 2116486270:
					{
						this.testPermille();
						break;
					}
					
					
					case 899913875:
					{
						this.testPercent();
						break;
					}
					
					
					case 1543876321:
					{
						this.testCurrencyUS();
						break;
					}
					
					
					case 1543873646:
					{
						this.testCurrencyIT();
						break;
					}
					
					
					case 239873475:
					{
						this.testCurrency();
						break;
					}
					
					
					case 980339899:
					{
						this.testNumber();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


