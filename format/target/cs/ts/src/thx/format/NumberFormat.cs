// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.format {
	public class NumberFormat : global::haxe.lang.HxObject {
		
		static NumberFormat() {
			global::thx.format.NumberFormat.BASE = "0123456789abcdefghijklmnopqrstuvwxyz";
		}
		
		
		public NumberFormat(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public NumberFormat() {
			global::thx.format.NumberFormat.__hx_ctor_thx_format_NumberFormat(this);
		}
		
		
		public static void __hx_ctor_thx_format_NumberFormat(global::thx.format.NumberFormat __temp_me188) {
		}
		
		
		public static string binary(double f, global::haxe.lang.Null<int> significantDigits, global::thx.culture.Culture culture) {
			unchecked {
				global::haxe.lang.Null<int> __temp_significantDigits182 = ( ( ! (significantDigits.hasValue) ) ? (new global::haxe.lang.Null<int>(1, true)) : (significantDigits) );
				global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
				if (global::System.Double.IsNaN(((double) (f) ))) {
					return nf.symbolNaN;
				}
				
				if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
					if (( f < 0 )) {
						return nf.symbolNegativeInfinity;
					}
					else {
						return nf.symbolPositiveInfinity;
					}
					
				}
				
				if (( global::haxe.lang.Runtime.eq((__temp_significantDigits182).toDynamic(), 0) && ( f == 0 ) )) {
					return "";
				}
				else {
					return global::StringTools.lpad(global::thx.format.NumberFormat.toBase(((int) (f) ), 2, culture), "0", (__temp_significantDigits182).@value);
				}
				
			}
		}
		
		
		public static string currency(double f, global::haxe.lang.Null<int> precision, string symbol, global::thx.culture.Culture culture) {
			global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
			if (global::System.Double.IsNaN(((double) (f) ))) {
				return nf.symbolNaN;
			}
			
			if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
				if (( f < 0 )) {
					return nf.symbolNegativeInfinity;
				}
				else {
					return nf.symbolPositiveInfinity;
				}
				
			}
			
			string pattern = ( (( f < 0 )) ? (global::haxe.lang.Runtime.toString(global::thx.culture.Pattern.currencyNegatives[nf.patternNegativeCurrency])) : (global::haxe.lang.Runtime.toString(global::thx.culture.Pattern.currencyPositives[nf.patternPositiveCurrency])) );
			global::haxe.lang.Null<int> t = ( ( ! (precision.hasValue) ) ? (default(global::haxe.lang.Null<int>)) : (precision) );
			string tmp = global::StringTools.replace(pattern, "n", global::thx.format.NumberFormat.@value(f, ( (t.hasValue) ? ((t).@value) : (nf.decimalDigitsCurrency) ), nf.groupSizesCurrency, nf.separatorGroupCurrency, nf.separatorDecimalCurrency));
			string t1 = ( (string.Equals(null, symbol)) ? (null) : (symbol) );
			return global::StringTools.replace(tmp, "$", ( ( ! (string.Equals(t1, null)) ) ? (t1) : (nf.symbolCurrency) ));
		}
		
		
		public static string customFormat(double f, string pattern, global::thx.culture.Culture culture) {
			unchecked {
				global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
				if (global::System.Double.IsNaN(((double) (f) ))) {
					return nf.symbolNaN;
				}
				
				if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
					if (( f < 0 )) {
						return nf.symbolNegativeInfinity;
					}
					else {
						return nf.symbolPositiveInfinity;
					}
					
				}
				
				bool isCurrency = global::thx.format.NumberFormat.hasSymbols(pattern, "$");
				bool isPercent = (  ! (isCurrency)  && global::thx.format.NumberFormat.hasSymbols(pattern, "%\u2030") );
				global::Array<object> groups = global::thx.format.NumberFormat.splitPattern(pattern, ";");
				if (( groups.length > 3 )) {
					throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("invalid number of sections in \"", pattern), "\""));
				}
				
				if (( f < 0 )) {
					if ( ! (string.Equals(null, global::haxe.lang.Runtime.toString(groups[1]))) ) {
						return global::thx.format.NumberFormat.customFormatF( - (f) , global::haxe.lang.Runtime.toString(groups[1]), nf, isCurrency, isPercent);
					}
					else {
						return global::thx.format.NumberFormat.customFormatF( - (f) , global::haxe.lang.Runtime.concat("-", global::haxe.lang.Runtime.toString(groups[0])), nf, isCurrency, isPercent);
					}
					
				}
				else if (( f > 0 )) {
					return global::thx.format.NumberFormat.customFormatF(f, global::haxe.lang.Runtime.toString(groups[0]), nf, isCurrency, isPercent);
				}
				else {
					string tmp = null;
					if (( null == groups )) {
						tmp = null;
					}
					else {
						string _1 = global::haxe.lang.Runtime.toString(groups[2]);
						if (string.Equals(null, _1)) {
							tmp = null;
						}
						else {
							tmp = _1;
						}
						
					}
					
					string t = ((string) (tmp) );
					return global::thx.format.NumberFormat.customFormatF(((double) (0) ), ( ( ! (string.Equals(t, null)) ) ? (t) : (global::haxe.lang.Runtime.toString(groups[0])) ), nf, isCurrency, isPercent);
				}
				
			}
		}
		
		
		public static string @decimal(double f, global::haxe.lang.Null<int> significantDigits, global::thx.culture.Culture culture) {
			unchecked {
				global::haxe.lang.Null<int> __temp_significantDigits183 = ( ( ! (significantDigits.hasValue) ) ? (new global::haxe.lang.Null<int>(1, true)) : (significantDigits) );
				global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
				if (global::System.Double.IsNaN(((double) (f) ))) {
					return nf.symbolNaN;
				}
				
				if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
					if (( f < 0 )) {
						return nf.symbolNegativeInfinity;
					}
					else {
						return nf.symbolPositiveInfinity;
					}
					
				}
				
				return global::haxe.lang.Runtime.concat((( (( f < 0 )) ? (nf.signNegative) : ("") )), global::StringTools.lpad(global::thx.format.NumberFormat.@value(f, 0, new global::Array<int>(new int[]{0}), "", ""), "0", (__temp_significantDigits183).@value));
			}
		}
		
		
		public static string exponential(double f, global::haxe.lang.Null<int> precision, global::haxe.lang.Null<int> digits, string symbol, global::thx.culture.Culture culture) {
			unchecked {
				if (string.Equals(symbol, null)) {
					symbol = "e";
				}
				
				global::haxe.lang.Null<int> __temp_digits185 = ( ( ! (digits.hasValue) ) ? (new global::haxe.lang.Null<int>(3, true)) : (digits) );
				global::haxe.lang.Null<int> __temp_precision184 = ( ( ! (precision.hasValue) ) ? (new global::haxe.lang.Null<int>(6, true)) : (precision) );
				global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
				if (global::System.Double.IsNaN(((double) (f) ))) {
					return nf.symbolNaN;
				}
				
				if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
					if (( f < 0 )) {
						return nf.symbolNegativeInfinity;
					}
					else {
						return nf.symbolPositiveInfinity;
					}
					
				}
				
				object info = global::thx.format.NumberFormat.exponentialInfo(f);
				string tmp = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::thx.format.NumberFormat.number(global::haxe.lang.Runtime.getField_f(info, "f", 102, true), __temp_precision184, culture), symbol), (( (( global::haxe.lang.Runtime.compare(((object) (global::haxe.lang.Runtime.getField(info, "e", 101, true)) ), 0) < 0 )) ? (nf.signNegative) : (nf.signPositive) )));
				int v = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(info, "e", 101, true))) );
				return global::haxe.lang.Runtime.concat(tmp, global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString((( (( v < 0 )) ? ( - (v) ) : (v) )))), "0", (__temp_digits185).@value));
			}
		}
		
		
		public static string @fixed(double f, global::haxe.lang.Null<int> precision, global::thx.culture.Culture culture) {
			global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
			if (global::System.Double.IsNaN(((double) (f) ))) {
				return nf.symbolNaN;
			}
			
			if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
				if (( f < 0 )) {
					return nf.symbolNegativeInfinity;
				}
				else {
					return nf.symbolPositiveInfinity;
				}
				
			}
			
			string pattern = ( (( f < 0 )) ? (global::haxe.lang.Runtime.toString(global::thx.culture.Pattern.numberNegatives[nf.patternNegativeNumber])) : ("n") );
			global::haxe.lang.Null<int> t = ( ( ! (precision.hasValue) ) ? (default(global::haxe.lang.Null<int>)) : (precision) );
			return global::StringTools.replace(pattern, "n", global::thx.format.NumberFormat.@value(f, ( (t.hasValue) ? ((t).@value) : (nf.decimalDigitsNumber) ), new global::Array<int>(new int[]{0}), "", nf.separatorDecimalNumber));
		}
		
		
		public static string format(double f, string pattern, global::thx.culture.Culture culture) {
			unchecked {
				string specifier = global::haxe.lang.StringExt.substring(pattern, 0, new global::haxe.lang.Null<int>(1, true));
				global::haxe.lang.Null<int> param = global::thx.format.NumberFormat.paramOrNull(global::haxe.lang.StringExt.substring(pattern, 1, default(global::haxe.lang.Null<int>)));
				switch (specifier) {
					case "%":
					{
						return global::thx.format.NumberFormat.printf(f, pattern, culture);
					}
					
					
					case "C":
					case "c":
					{
						return global::thx.format.NumberFormat.currency(f, param, null, culture);
					}
					
					
					case "E":
					{
						return global::thx.format.NumberFormat.exponential(f, param, default(global::haxe.lang.Null<int>), null, culture);
					}
					
					
					case "G":
					{
						return global::thx.format.NumberFormat.general(f, param, culture);
					}
					
					
					case "P":
					case "p":
					{
						return global::thx.format.NumberFormat.percent(f, param, culture);
					}
					
					
					case "X":
					{
						return global::thx.format.NumberFormat.hex(f, param, culture).ToUpperInvariant();
					}
					
					
					case "D":
					case "d":
					{
						return global::thx.format.NumberFormat.@decimal(f, param, culture);
					}
					
					
					case "e":
					{
						return global::thx.format.NumberFormat.exponential(f, param, default(global::haxe.lang.Null<int>), null, culture).ToLowerInvariant();
					}
					
					
					case "F":
					case "f":
					{
						return global::thx.format.NumberFormat.@fixed(f, param, culture);
					}
					
					
					case "g":
					{
						return global::thx.format.NumberFormat.general(f, param, culture).ToLowerInvariant();
					}
					
					
					case "N":
					case "n":
					{
						return global::thx.format.NumberFormat.number(f, param, culture);
					}
					
					
					case "R":
					case "r":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(f));
					}
					
					
					case "x":
					{
						return global::thx.format.NumberFormat.hex(f, param, culture);
					}
					
					
					default:
					{
						return global::thx.format.NumberFormat.customFormat(f, pattern, culture);
					}
					
				}
				
			}
		}
		
		
		public static string general(double f, global::haxe.lang.Null<int> significantDigits, global::thx.culture.Culture culture) {
			string e = global::thx.format.NumberFormat.exponential(f, significantDigits, default(global::haxe.lang.Null<int>), null, culture);
			string f1 = global::thx.format.NumberFormat.@fixed(f, significantDigits, culture);
			if (( e.Length < f1.Length )) {
				return e;
			}
			else {
				return f1;
			}
			
		}
		
		
		public static string hex(double f, global::haxe.lang.Null<int> significantDigits, global::thx.culture.Culture culture) {
			unchecked {
				global::haxe.lang.Null<int> __temp_significantDigits186 = ( ( ! (significantDigits.hasValue) ) ? (new global::haxe.lang.Null<int>(1, true)) : (significantDigits) );
				global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
				if (global::System.Double.IsNaN(((double) (f) ))) {
					return nf.symbolNaN;
				}
				
				if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
					if (( f < 0 )) {
						return nf.symbolNegativeInfinity;
					}
					else {
						return nf.symbolPositiveInfinity;
					}
					
				}
				
				if (( global::haxe.lang.Runtime.eq((__temp_significantDigits186).toDynamic(), 0) && ( f == 0 ) )) {
					return "";
				}
				else {
					return global::StringTools.lpad(global::thx.format.NumberFormat.toBase(((int) (f) ), 16, culture), "0", (__temp_significantDigits186).@value);
				}
				
			}
		}
		
		
		public static string integer(double f, global::thx.culture.Culture culture) {
			global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
			if (global::System.Double.IsNaN(((double) (f) ))) {
				return nf.symbolNaN;
			}
			
			if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
				if (( f < 0 )) {
					return nf.symbolNegativeInfinity;
				}
				else {
					return nf.symbolPositiveInfinity;
				}
				
			}
			
			return global::thx.format.NumberFormat.number(f, new global::haxe.lang.Null<int>(0, true), culture);
		}
		
		
		public static string number(double f, global::haxe.lang.Null<int> precision, global::thx.culture.Culture culture) {
			global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
			if (global::System.Double.IsNaN(((double) (f) ))) {
				return nf.symbolNaN;
			}
			
			if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
				if (( f < 0 )) {
					return nf.symbolNegativeInfinity;
				}
				else {
					return nf.symbolPositiveInfinity;
				}
				
			}
			
			string pattern = ( (( f < 0 )) ? (global::haxe.lang.Runtime.toString(global::thx.culture.Pattern.numberNegatives[nf.patternNegativeNumber])) : ("n") );
			global::haxe.lang.Null<int> t = ( ( ! (precision.hasValue) ) ? (default(global::haxe.lang.Null<int>)) : (precision) );
			return global::StringTools.replace(pattern, "n", global::thx.format.NumberFormat.@value(f, ( (t.hasValue) ? ((t).@value) : (nf.decimalDigitsNumber) ), nf.groupSizesNumber, nf.separatorGroupNumber, nf.separatorDecimalNumber));
		}
		
		
		public static string octal(double f, global::haxe.lang.Null<int> significantDigits, global::thx.culture.Culture culture) {
			unchecked {
				global::haxe.lang.Null<int> __temp_significantDigits187 = ( ( ! (significantDigits.hasValue) ) ? (new global::haxe.lang.Null<int>(1, true)) : (significantDigits) );
				global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
				if (global::System.Double.IsNaN(((double) (f) ))) {
					return nf.symbolNaN;
				}
				
				if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
					if (( f < 0 )) {
						return nf.symbolNegativeInfinity;
					}
					else {
						return nf.symbolPositiveInfinity;
					}
					
				}
				
				if (( global::haxe.lang.Runtime.eq((__temp_significantDigits187).toDynamic(), 0) && ( f == 0 ) )) {
					return "";
				}
				else {
					return global::StringTools.lpad(global::thx.format.NumberFormat.toBase(((int) (f) ), 8, culture), "0", (__temp_significantDigits187).@value);
				}
				
			}
		}
		
		
		public static string percent(double f, global::haxe.lang.Null<int> decimals, global::thx.culture.Culture culture) {
			unchecked {
				global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
				if (global::System.Double.IsNaN(((double) (f) ))) {
					return nf.symbolNaN;
				}
				
				if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
					if (( f < 0 )) {
						return nf.symbolNegativeInfinity;
					}
					else {
						return nf.symbolPositiveInfinity;
					}
					
				}
				
				double tmp = ( f * 100 );
				global::haxe.lang.Null<int> t = ( ( ! (decimals.hasValue) ) ? (default(global::haxe.lang.Null<int>)) : (decimals) );
				return global::thx.format.NumberFormat.unit(tmp, ( (t.hasValue) ? ((t).@value) : (nf.decimalDigitsPercent) ), nf.symbolPercent, culture);
			}
		}
		
		
		public static string permille(double f, global::haxe.lang.Null<int> decimals, global::thx.culture.Culture culture) {
			unchecked {
				global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
				if (global::System.Double.IsNaN(((double) (f) ))) {
					return nf.symbolNaN;
				}
				
				if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
					if (( f < 0 )) {
						return nf.symbolNegativeInfinity;
					}
					else {
						return nf.symbolPositiveInfinity;
					}
					
				}
				
				double tmp = ( f * 1000 );
				global::haxe.lang.Null<int> t = ( ( ! (decimals.hasValue) ) ? (default(global::haxe.lang.Null<int>)) : (decimals) );
				return global::thx.format.NumberFormat.unit(tmp, ( (t.hasValue) ? ((t).@value) : (nf.decimalDigitsPercent) ), nf.symbolPermille, culture);
			}
		}
		
		
		public static string printf(double f, string pattern, global::thx.culture.Culture culture) {
			unchecked {
				if ( ! (pattern.StartsWith("%")) ) {
					throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("invalid printf term \"", pattern), "\""));
				}
				
				string specifier = global::haxe.lang.StringExt.substring(pattern, ( pattern.Length - 1 ), default(global::haxe.lang.Null<int>));
				global::Array<object> p = global::haxe.lang.StringExt.split(global::haxe.lang.StringExt.substring(pattern, 1, new global::haxe.lang.Null<int>(( pattern.Length - 1 ), true)), ".");
				global::haxe.lang.Null<int> precision = ( (( string.Equals(null, global::haxe.lang.Runtime.toString(p[1])) || string.Equals("", global::haxe.lang.Runtime.toString(p[1])) )) ? (default(global::haxe.lang.Null<int>)) : (global::Std.parseInt(global::haxe.lang.Runtime.toString(p[1]))) );
				bool justifyRight = true;
				bool negativeSignOnly = true;
				bool emptySpaceForSign = false;
				bool prefix = false;
				string padding = " ";
				int width = 0;
				string flags = global::haxe.lang.Runtime.toString(p[0]);
				while (( flags.Length > 0 )) {
					{
						string _g = global::haxe.lang.StringExt.substring(flags, 0, new global::haxe.lang.Null<int>(1, true));
						switch (_g) {
							case " ":
							{
								emptySpaceForSign = true;
								break;
							}
							
							
							case "#":
							{
								prefix = true;
								break;
							}
							
							
							case "+":
							{
								negativeSignOnly = false;
								break;
							}
							
							
							case "-":
							{
								justifyRight = false;
								break;
							}
							
							
							case "0":
							{
								padding = "0";
								break;
							}
							
							
							default:
							{
								if (global::thx.Ints.canParse(_g)) {
									width = (global::thx.Ints.parse(flags, default(global::haxe.lang.Null<int>))).@value;
									flags = "";
									continue;
								}
								else {
									throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("invalid flags ", flags));
								}
								
							}
							
						}
						
					}
					
					flags = global::haxe.lang.StringExt.substring(flags, 1, default(global::haxe.lang.Null<int>));
				}
				
				global::haxe.lang.Function decorate = new global::thx.format.NumberFormat_printf_361__Fun(width, prefix, padding, negativeSignOnly, justifyRight, emptySpaceForSign);
				global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
				switch (specifier) {
					case "%":
					{
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), "%", ((double) (1) ), global::haxe.lang.Runtime.undefined, default(double), "", default(double), "", default(double), ""));
					}
					
					
					case "B":
					{
						int v = ((int) (f) );
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), global::thx.Ints.toString(( (( v < 0 )) ? ( - (v) ) : (v) ), 2), ((double) (1) ), global::haxe.lang.Runtime.undefined, default(double), "B", default(double), "", default(double), ""));
					}
					
					
					case "E":
					{
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), global::thx.format.NumberFormat.exponential(global::System.Math.Abs(((double) (f) )), precision, new global::haxe.lang.Null<int>(0, true), "E", culture), f, global::haxe.lang.Runtime.undefined, default(double), "", default(double), nf.signNegative, default(double), nf.signPositive));
					}
					
					
					case "G":
					{
						string e = global::thx.format.NumberFormat.printf(f, "E", culture);
						string f2 = global::thx.format.NumberFormat.printf(f, "f", culture);
						if (( e.Length < f2.Length )) {
							return e;
						}
						else {
							return f2;
						}
						
					}
					
					
					case "X":
					{
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), global::thx.format.NumberFormat.hex(global::System.Math.Abs(((double) (f) )), precision, culture), f, global::haxe.lang.Runtime.undefined, default(double), "0X", default(double), nf.signNegative, default(double), nf.signPositive));
					}
					
					
					case "b":
					{
						int v1 = ((int) (f) );
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), global::thx.Ints.toString(( (( v1 < 0 )) ? ( - (v1) ) : (v1) ), 2), ((double) (1) ), global::haxe.lang.Runtime.undefined, default(double), "b", default(double), "", default(double), ""));
					}
					
					
					case "c":
					{
						int v2 = ((int) (f) );
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), new string(((char) (( (( v2 < 0 )) ? ( - (v2) ) : (v2) )) ), 1), ((double) (1) ), global::haxe.lang.Runtime.undefined, default(double), "", default(double), "", default(double), ""));
					}
					
					
					case "d":
					case "i":
					{
						string tmp = global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::Math.round(f)));
						global::haxe.lang.Null<int> _0 = precision;
						global::haxe.lang.Null<int> t = ( ( ! (_0.hasValue) ) ? (default(global::haxe.lang.Null<int>)) : (_0) );
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), global::StringTools.lpad(tmp, "0", ( (t.hasValue) ? ((t).@value) : (0) )), f, global::haxe.lang.Runtime.undefined, default(double), "", default(double), nf.signNegative, default(double), nf.signPositive));
					}
					
					
					case "e":
					{
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), global::thx.format.NumberFormat.exponential(global::System.Math.Abs(((double) (f) )), precision, new global::haxe.lang.Null<int>(0, true), "e", culture), f, global::haxe.lang.Runtime.undefined, default(double), "", default(double), nf.signNegative, default(double), nf.signPositive));
					}
					
					
					case "f":
					{
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), global::thx.format.NumberFormat.@fixed(global::System.Math.Abs(((double) (f) )), precision, culture), f, global::haxe.lang.Runtime.undefined, default(double), "", default(double), nf.signNegative, default(double), nf.signPositive));
					}
					
					
					case "g":
					{
						string e1 = global::thx.format.NumberFormat.printf(f, "e", culture);
						string f3 = global::thx.format.NumberFormat.printf(f, "f", culture);
						if (( e1.Length < f3.Length )) {
							return e1;
						}
						else {
							return f3;
						}
						
					}
					
					
					case "o":
					{
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), global::thx.format.NumberFormat.octal(global::System.Math.Abs(((double) (f) )), precision, culture), f, global::haxe.lang.Runtime.undefined, default(double), "0", default(double), nf.signNegative, default(double), nf.signPositive));
					}
					
					
					case "u":
					{
						return global::thx.format.NumberFormat.printf(global::System.Math.Abs(((double) (f) )), "d", culture);
					}
					
					
					case "x":
					{
						return global::haxe.lang.Runtime.toString(decorate.__hx_invoke5_o(default(double), global::thx.format.NumberFormat.hex(global::System.Math.Abs(((double) (f) )), precision, culture), f, global::haxe.lang.Runtime.undefined, default(double), "0x", default(double), nf.signNegative, default(double), nf.signPositive));
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("invalid pattern \"", pattern), "\""));
					}
					
				}
				
			}
		}
		
		
		public static string toBase(int @value, int @base, global::thx.culture.Culture culture) {
			unchecked {
				global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
				if (( ( @base < 2 ) || ( @base > global::thx.format.NumberFormat.BASE.Length ) )) {
					throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("invalid base ", global::haxe.lang.Runtime.toString(@base)), ", it must be between 2 and "), global::haxe.lang.Runtime.toString(global::thx.format.NumberFormat.BASE.Length)));
				}
				
				if (( ( @base == 10 ) || ( @value == 0 ) )) {
					return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(@value));
				}
				
				string buf = "";
				int abs = ( (( @value < 0 )) ? ( - (@value) ) : (@value) );
				while (( abs > 0 )) {
					buf = global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.charAt(global::thx.format.NumberFormat.BASE, ( abs % @base )), buf);
					abs = ((int) (( abs / @base )) );
				}
				
				return global::haxe.lang.Runtime.concat((( (( @value < 0 )) ? (nf.signNegative) : ("") )), buf);
			}
		}
		
		
		public static string unit(double f, int decimals, string unitSymbol, global::thx.culture.Culture culture) {
			global::thx.culture.NumberFormatInfo nf = global::thx.format.NumberFormat.numberFormat(culture);
			if (global::System.Double.IsNaN(((double) (f) ))) {
				return nf.symbolNaN;
			}
			
			if ( ! (((  ! (global::System.Double.IsInfinity(((double) (f) )))  &&  ! (global::System.Double.IsNaN(((double) (f) )))  ))) ) {
				if (( f < 0 )) {
					return nf.symbolNegativeInfinity;
				}
				else {
					return nf.symbolPositiveInfinity;
				}
				
			}
			
			return global::StringTools.replace(global::StringTools.replace(( (( f < 0 )) ? (global::haxe.lang.Runtime.toString(global::thx.culture.Pattern.percentNegatives[nf.patternNegativePercent])) : (global::haxe.lang.Runtime.toString(global::thx.culture.Pattern.percentPositives[nf.patternPositivePercent])) ), "n", global::thx.format.NumberFormat.@value(f, decimals, nf.groupSizesPercent, nf.separatorGroupPercent, nf.separatorDecimalPercent)), "%", unitSymbol);
		}
		
		
		public static string BASE;
		
		public static int countSymbols(string pattern, string symbols) {
			unchecked {
				int i = 0;
				int quote = 0;
				int count = 0;
				while (( i < pattern.Length )) {
					{
						string _g = global::haxe.lang.StringExt.substring(pattern, i, new global::haxe.lang.Null<int>(( i + 1 ), true));
						switch (_g) {
							case "\"":
							{
								switch (quote) {
									case 0:
									{
										quote = 2;
										break;
									}
									
									
									case 2:
									{
										quote = 0;
										break;
									}
									
									
									default:
									{
										break;
									}
									
								}
								
								break;
							}
							
							
							case "\'":
							{
								switch (quote) {
									case 0:
									{
										quote = 1;
										break;
									}
									
									
									case 1:
									{
										quote = 0;
										break;
									}
									
									
									default:
									{
										break;
									}
									
								}
								
								break;
							}
							
							
							case "\\":
							{
								 ++ i;
								break;
							}
							
							
							default:
							{
								if (( quote == 0 )) {
									if (( global::haxe.lang.StringExt.indexOf(symbols, _g, default(global::haxe.lang.Null<int>)) >= 0 )) {
										 ++ count;
									}
									
								}
								
								break;
							}
							
						}
						
					}
					
					 ++ i;
				}
				
				return count;
			}
		}
		
		
		public static string customFormatDecimalFraction(string d, string pattern, global::thx.culture.NumberFormatInfo nf) {
			unchecked {
				string buf = "";
				int i = 0;
				int quote = 0;
				global::Array<object> p = global::haxe.lang.StringExt.split(d, "");
				while (( i < pattern.Length )) {
					{
						string _g = global::haxe.lang.StringExt.substring(pattern, i, new global::haxe.lang.Null<int>(( i + 1 ), true));
						switch (_g) {
							case "\"":
							{
								switch (quote) {
									case 0:
									{
										quote = 2;
										break;
									}
									
									
									case 1:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
									
									case 2:
									{
										quote = 0;
										break;
									}
									
									
									default:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
								}
								
								break;
							}
							
							
							case "#":
							{
								switch (quote) {
									case 0:
									{
										buf = global::haxe.lang.Runtime.concat(buf, ( (( p.length == 0 )) ? ("") : (global::haxe.lang.Runtime.toString((p.shift()).toDynamic())) ));
										break;
									}
									
									
									case 1:
									case 2:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
									
									default:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
								}
								
								break;
							}
							
							
							case "$":
							{
								switch (quote) {
									case 0:
									{
										buf = global::haxe.lang.Runtime.concat(buf, nf.symbolCurrency);
										break;
									}
									
									
									case 1:
									case 2:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
									
									default:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
								}
								
								break;
							}
							
							
							case "%":
							{
								switch (quote) {
									case 0:
									{
										buf = global::haxe.lang.Runtime.concat(buf, nf.symbolPercent);
										break;
									}
									
									
									case 1:
									case 2:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
									
									default:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
								}
								
								break;
							}
							
							
							case "\'":
							{
								switch (quote) {
									case 0:
									{
										quote = 1;
										break;
									}
									
									
									case 1:
									{
										quote = 0;
										break;
									}
									
									
									case 2:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
									
									default:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
								}
								
								break;
							}
							
							
							case "0":
							{
								switch (quote) {
									case 0:
									{
										buf = global::haxe.lang.Runtime.concat(buf, ( (( p.length == 0 )) ? ("0") : (global::haxe.lang.Runtime.toString((p.shift()).toDynamic())) ));
										break;
									}
									
									
									case 1:
									case 2:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
									
									default:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
								}
								
								break;
							}
							
							
							case "\\":
							{
								 ++ i;
								buf = global::haxe.lang.Runtime.concat(buf, global::haxe.lang.StringExt.substring(pattern, i, new global::haxe.lang.Null<int>(( i + 1 ), true)));
								break;
							}
							
							
							case "\u2030":
							{
								switch (quote) {
									case 0:
									{
										buf = global::haxe.lang.Runtime.concat(buf, nf.symbolPermille);
										break;
									}
									
									
									case 1:
									case 2:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
									
									default:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
								}
								
								break;
							}
							
							
							default:
							{
								switch (quote) {
									case 1:
									case 2:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
									
									default:
									{
										buf = global::haxe.lang.Runtime.concat(buf, _g);
										break;
									}
									
								}
								
								break;
							}
							
						}
						
					}
					
					 ++ i;
				}
				
				return buf;
			}
		}
		
		
		public static string customFormatF(double f, string pattern, global::thx.culture.NumberFormatInfo nf, bool isCurrency, bool isPercent) {
			unchecked {
				if (isPercent) {
					f *= ((double) (( (global::thx.format.NumberFormat.hasSymbols(pattern, "\u2030")) ? (1000) : (100) )) );
				}
				
				global::Array<object> exp = global::thx.format.NumberFormat.splitPattern(pattern, "eE");
				if (( exp.length > 1 )) {
					object info = global::thx.format.NumberFormat.exponentialInfo(f);
					string symbol = global::haxe.lang.StringExt.substring(pattern, global::haxe.lang.Runtime.toString(exp[0]).Length, new global::haxe.lang.Null<int>(( global::haxe.lang.Runtime.toString(exp[0]).Length + 1 ), true));
					bool forceSign = global::haxe.lang.Runtime.toString(exp[1]).StartsWith("+");
					if (( forceSign || global::haxe.lang.Runtime.toString(exp[1]).StartsWith("-") )) {
						exp[1] = global::haxe.lang.StringExt.substring(global::haxe.lang.Runtime.toString(exp[1]), 1, default(global::haxe.lang.Null<int>));
					}
					
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::thx.format.NumberFormat.customIntegerAndFraction(global::haxe.lang.Runtime.getField_f(info, "f", 102, true), global::haxe.lang.Runtime.toString(exp[0]), nf, isCurrency, isPercent), symbol), (( (( global::haxe.lang.Runtime.compare(((object) (global::haxe.lang.Runtime.getField(info, "e", 101, true)) ), 0) < 0 )) ? (nf.signNegative) : (( (forceSign) ? (nf.signPositive) : ("") )) ))), global::thx.format.NumberFormat.customFormatInteger(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::System.Math.Abs(((double) (global::haxe.lang.Runtime.toDouble(global::haxe.lang.Runtime.getField(info, "e", 101, true))) )))), global::haxe.lang.Runtime.toString(exp[1]), nf, isCurrency, isPercent));
				}
				else {
					return global::thx.format.NumberFormat.customIntegerAndFraction(f, pattern, nf, isCurrency, isPercent);
				}
				
			}
		}
		
		
		public static string customFormatInteger(string v, string pattern, global::thx.culture.NumberFormatInfo nf, bool isCurrency, bool isPercent) {
			unchecked {
				global::Array<object> buf = new global::Array<object>(new object[]{});
				int i = 0;
				int quote = 0;
				global::Array<object> p = global::haxe.lang.StringExt.split(v, "");
				string lbuf = "";
				bool first = true;
				bool useGroups = false;
				int zeroes = 0;
				while (( i < pattern.Length )) {
					{
						string _g = global::haxe.lang.StringExt.substring(pattern, i, new global::haxe.lang.Null<int>(( i + 1 ), true));
						switch (_g) {
							case "\"":
							{
								switch (quote) {
									case 0:
									{
										quote = 2;
										break;
									}
									
									
									case 1:
									{
										lbuf = global::haxe.lang.Runtime.concat(lbuf, _g);
										break;
									}
									
									
									case 2:
									{
										quote = 0;
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(lbuf));
										lbuf = "";
										break;
									}
									
									
									default:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(_g));
										break;
									}
									
								}
								
								break;
							}
							
							
							case "#":
							{
								switch (quote) {
									case 0:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Hash(first));
										first = false;
										break;
									}
									
									
									case 1:
									case 2:
									{
										lbuf = global::haxe.lang.Runtime.concat(lbuf, _g);
										break;
									}
									
									
									default:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(_g));
										break;
									}
									
								}
								
								break;
							}
							
							
							case "$":
							{
								switch (quote) {
									case 0:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(nf.symbolCurrency));
										break;
									}
									
									
									case 1:
									case 2:
									{
										lbuf = global::haxe.lang.Runtime.concat(lbuf, _g);
										break;
									}
									
									
									default:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(_g));
										break;
									}
									
								}
								
								break;
							}
							
							
							case "%":
							{
								switch (quote) {
									case 0:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(nf.symbolPercent));
										break;
									}
									
									
									case 1:
									case 2:
									{
										lbuf = global::haxe.lang.Runtime.concat(lbuf, _g);
										break;
									}
									
									
									default:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(_g));
										break;
									}
									
								}
								
								break;
							}
							
							
							case "\'":
							{
								switch (quote) {
									case 0:
									{
										quote = 1;
										break;
									}
									
									
									case 1:
									{
										quote = 0;
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(lbuf));
										lbuf = "";
										break;
									}
									
									
									case 2:
									{
										lbuf = global::haxe.lang.Runtime.concat(lbuf, _g);
										break;
									}
									
									
									default:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(_g));
										break;
									}
									
								}
								
								break;
							}
							
							
							case ",":
							{
								switch (quote) {
									case 0:
									{
										useGroups = true;
										break;
									}
									
									
									case 1:
									case 2:
									{
										lbuf = global::haxe.lang.Runtime.concat(lbuf, _g);
										break;
									}
									
									
									default:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(_g));
										break;
									}
									
								}
								
								break;
							}
							
							
							case "0":
							{
								switch (quote) {
									case 0:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Zero(first));
										first = false;
										 ++ zeroes;
										break;
									}
									
									
									case 1:
									case 2:
									{
										lbuf = global::haxe.lang.Runtime.concat(lbuf, _g);
										break;
									}
									
									
									default:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(_g));
										break;
									}
									
								}
								
								break;
							}
							
							
							case "\\":
							{
								 ++ i;
								buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(global::haxe.lang.StringExt.substring(pattern, i, new global::haxe.lang.Null<int>(( i + 1 ), true))));
								break;
							}
							
							
							case "\u2030":
							{
								switch (quote) {
									case 0:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(nf.symbolPermille));
										break;
									}
									
									
									case 1:
									case 2:
									{
										lbuf = global::haxe.lang.Runtime.concat(lbuf, _g);
										break;
									}
									
									
									default:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(_g));
										break;
									}
									
								}
								
								break;
							}
							
							
							default:
							{
								switch (quote) {
									case 1:
									case 2:
									{
										lbuf = global::haxe.lang.Runtime.concat(lbuf, _g);
										break;
									}
									
									
									default:
									{
										buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(_g));
										break;
									}
									
								}
								
								break;
							}
							
						}
						
					}
					
					 ++ i;
				}
				
				if (( lbuf.Length > 0 )) {
					buf.push(global::thx.format._NumberFormat.CustomFormat.Literal(lbuf));
				}
				
				{
					int _g1 = p.length;
					int _g2 = zeroes;
					while (( _g1 < _g2 )) {
						 ++ _g1;
						p.unshift("0");
					}
					
				}
				
				if (useGroups) {
					i = ( p.length - 1 );
					global::Array<int> groups = ( (isCurrency) ? (nf.groupSizesCurrency.copy()) : (( (isPercent) ? (nf.groupSizesPercent.copy()) : (nf.groupSizesNumber.copy()) )) );
					global::haxe.lang.Null<int> @group = groups.shift();
					int pos = 0;
					while (( i >= 0 )) {
						if (global::haxe.lang.Runtime.eq((@group).toDynamic(), 0)) {
							break;
						}
						
						if (global::haxe.lang.Runtime.eq(pos, (@group).toDynamic())) {
							p[i] = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.toString(p[i]), (( (isCurrency) ? (nf.separatorGroupCurrency) : (( (isPercent) ? (nf.separatorGroupPercent) : (nf.separatorGroupNumber) )) )));
							pos = 0;
							if (( groups.length > 0 )) {
								@group = groups.shift();
							}
							
						}
						else {
							 ++ pos;
							 -- i;
						}
						
					}
					
				}
				
				buf.reverse();
				global::Array<object> r = buf.map<object>(((global::haxe.lang.Function) (new global::thx.format.NumberFormat_customFormatInteger_608__Fun(p)) ));
				r.reverse();
				return r.@join("");
			}
		}
		
		
		public static string customIntegerAndFraction(double f, string pattern, global::thx.culture.NumberFormatInfo nf, bool isCurrency, bool isPercent) {
			unchecked {
				global::Array<object> p = global::thx.format.NumberFormat.splitPattern(pattern, ".");
				f /= global::System.Math.Pow(((double) (1000) ), ((double) (( global::haxe.lang.Runtime.toString(p[0]).Length - (global::haxe.lang.Runtime.toString(p[0] = global::thx.Strings.trimCharsRight(global::haxe.lang.Runtime.toString(p[0]), ","))).Length )) ));
				if (( p.length == 1 )) {
					return global::thx.format.NumberFormat.customFormatInteger(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::Math.round(f))), global::haxe.lang.Runtime.toString(p[0]), nf, isCurrency, isPercent);
				}
				else {
					f = global::thx.Floats.roundTo(f, global::thx.format.NumberFormat.countSymbols(global::haxe.lang.Runtime.toString(p[1]), "#0"));
					global::Array<object> np = global::thx.format.NumberFormat.splitOnDecimalSeparator(f);
					string tmp = global::haxe.lang.Runtime.concat(global::thx.format.NumberFormat.customFormatInteger(global::haxe.lang.Runtime.toString(np[0]), global::haxe.lang.Runtime.toString(p[0]), nf, isCurrency, isPercent), (( (isCurrency) ? (nf.separatorDecimalCurrency) : (( (isPercent) ? (nf.separatorDecimalPercent) : (nf.separatorDecimalNumber) )) )));
					string tmp1 = null;
					if (( null == np )) {
						tmp1 = null;
					}
					else {
						string _1 = global::haxe.lang.Runtime.toString(np[1]);
						if (string.Equals(null, _1)) {
							tmp1 = null;
						}
						else {
							tmp1 = _1;
						}
						
					}
					
					string t = ((string) (tmp1) );
					return global::haxe.lang.Runtime.concat(tmp, global::thx.format.NumberFormat.customFormatDecimalFraction(( ( ! (string.Equals(t, null)) ) ? (t) : ("0") ), global::haxe.lang.Runtime.toString(p[1]), nf));
				}
				
			}
		}
		
		
		public static object exponentialInfo(double f) {
			unchecked {
				string s = (global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::System.Math.Abs(((double) (f) ))))).ToLowerInvariant();
				int pose = global::haxe.lang.StringExt.indexOf(s, "e", default(global::haxe.lang.Null<int>));
				global::Array<object> p = null;
				global::haxe.lang.Null<int> e = default(global::haxe.lang.Null<int>);
				if (( pose > 0 )) {
					p = global::haxe.lang.StringExt.split(global::haxe.lang.StringExt.substring(s, 0, new global::haxe.lang.Null<int>(pose, true)), ".");
					e = global::thx.Ints.parse(global::haxe.lang.StringExt.substring(s, ( pose + 1 ), default(global::haxe.lang.Null<int>)), default(global::haxe.lang.Null<int>));
				}
				else {
					p = global::haxe.lang.StringExt.split(s, ".").concat(new global::Array<object>(new object[]{""}));
					e = new global::haxe.lang.Null<int>(0, true);
					if (( global::haxe.lang.Runtime.toString(p[0]).Length > 1 )) {
						e = new global::haxe.lang.Null<int>(( global::haxe.lang.Runtime.toString(p[0]).Length - 1 ), true);
						p[1] = global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substring(global::haxe.lang.Runtime.toString(p[0]), 1, default(global::haxe.lang.Null<int>)), global::haxe.lang.Runtime.toString(p[1]));
						p[0] = global::haxe.lang.StringExt.substring(global::haxe.lang.Runtime.toString(p[0]), 0, new global::haxe.lang.Null<int>(1, true));
					}
					else if (string.Equals(global::haxe.lang.Runtime.toString(p[0]), "0")) {
						e = new global::haxe.lang.Null<int>( - ((( ( 1 + global::haxe.lang.Runtime.toString(p[1]).Length ) - global::thx.Strings.trimCharsLeft(global::haxe.lang.Runtime.toString(p[1]), "0").Length ))) , true);
						p[1] = global::haxe.lang.StringExt.substring(global::haxe.lang.Runtime.toString(p[1]), ( ( - ((e).@value) ) - 1 ), default(global::haxe.lang.Null<int>));
						p[0] = global::haxe.lang.StringExt.substring(global::haxe.lang.Runtime.toString(p[1]), 0, new global::haxe.lang.Null<int>(1, true));
						p[1] = global::haxe.lang.StringExt.substring(global::haxe.lang.Runtime.toString(p[1]), 1, default(global::haxe.lang.Null<int>));
					}
					
				}
				
				{
					double __temp_odecl1 = ( (( (( f < 0 )) ? (-1) : (1) )) * global::Std.parseFloat(p.slice(0, new global::haxe.lang.Null<int>(2, true)).@join(".")) );
					return new global::haxe.lang.DynamicObject(new int[]{101}, new object[]{(e).toDynamic()}, new int[]{102}, new double[]{__temp_odecl1});
				}
				
			}
		}
		
		
		public static bool hasSymbols(string pattern, string symbols) {
			unchecked {
				int i = 0;
				int quote = 0;
				while (( i < pattern.Length )) {
					{
						string _g = global::haxe.lang.StringExt.substring(pattern, i, new global::haxe.lang.Null<int>(( i + 1 ), true));
						switch (_g) {
							case "\"":
							{
								switch (quote) {
									case 0:
									{
										quote = 2;
										break;
									}
									
									
									case 2:
									{
										quote = 0;
										break;
									}
									
									
									default:
									{
										break;
									}
									
								}
								
								break;
							}
							
							
							case "\'":
							{
								switch (quote) {
									case 0:
									{
										quote = 1;
										break;
									}
									
									
									case 1:
									{
										quote = 0;
										break;
									}
									
									
									default:
									{
										break;
									}
									
								}
								
								break;
							}
							
							
							case "\\":
							{
								 ++ i;
								break;
							}
							
							
							default:
							{
								if (( quote == 0 )) {
									if (( global::haxe.lang.StringExt.indexOf(symbols, _g, default(global::haxe.lang.Null<int>)) >= 0 )) {
										return true;
									}
									
								}
								
								break;
							}
							
						}
						
					}
					
					 ++ i;
				}
				
				return false;
			}
		}
		
		
		public static string intPart(string s, global::Array<int> groupSizes, string groupSeparator) {
			global::Array<object> buf = new global::Array<object>(new object[]{});
			global::Array<int> sizes = groupSizes.copy();
			global::haxe.lang.Null<int> size = sizes.shift();
			while (( s.Length > 0 )) {
				if (global::haxe.lang.Runtime.eq((size).toDynamic(), 0)) {
					buf.unshift(s);
					s = "";
				}
				else if (( s.Length > (size).@value )) {
					buf.unshift(global::haxe.lang.StringExt.substring(s, ( s.Length - (size).@value ), default(global::haxe.lang.Null<int>)));
					s = global::haxe.lang.StringExt.substring(s, 0, new global::haxe.lang.Null<int>(( s.Length - (size).@value ), true));
					if (( sizes.length > 0 )) {
						size = sizes.shift();
					}
					
				}
				else {
					buf.unshift(s);
					s = "";
				}
				
			}
			
			return buf.@join(groupSeparator);
		}
		
		
		public static global::thx.culture.NumberFormatInfo numberFormat(global::thx.culture.Culture culture) {
			if (( ( null != culture ) && ( null != culture.number ) )) {
				return culture.number;
			}
			else {
				return global::thx.format.Format.get_defaultCulture().number;
			}
			
		}
		
		
		public static string pad(string s, int len, bool round) {
			unchecked {
				string _0 = s;
				string t = ((string) (( (string.Equals(null, _0)) ? (null) : (_0) )) );
				if ( ! (string.Equals(t, null)) ) {
					s = t;
				}
				else {
					s = "";
				}
				
				if (( ( len > 0 ) && ( s.Length > len ) )) {
					if (round) {
						return global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substring(s, 0, new global::haxe.lang.Null<int>(( len - 1 ), true)), global::haxe.lang.Runtime.toString((( (global::Std.parseInt(global::haxe.lang.StringExt.substring(s, ( len - 1 ), new global::haxe.lang.Null<int>(len, true)))).@value + (( (( (global::Std.parseInt(global::haxe.lang.StringExt.substring(s, len, new global::haxe.lang.Null<int>(( len + 1 ), true)))).@value >= 5 )) ? (1) : (0) )) ))));
					}
					else {
						return global::haxe.lang.StringExt.substring(s, 0, new global::haxe.lang.Null<int>(len, true));
					}
					
				}
				else {
					return global::StringTools.rpad(s, "0", len);
				}
				
			}
		}
		
		
		public static global::haxe.lang.Null<int> paramOrNull(string param) {
			if (( param.Length == 0 )) {
				return default(global::haxe.lang.Null<int>);
			}
			else {
				return global::Std.parseInt(param);
			}
			
		}
		
		
		public static global::Array<object> splitOnDecimalSeparator(double f) {
			unchecked {
				global::Array<object> p = global::haxe.lang.StringExt.split((global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(f))), ".");
				string i = global::haxe.lang.Runtime.toString(p[0]);
				global::Array<object> _0 = p;
				string tmp = null;
				if (( null == _0 )) {
					tmp = null;
				}
				else {
					string _1 = global::haxe.lang.Runtime.toString(_0[1]);
					if (string.Equals(null, _1)) {
						tmp = null;
					}
					else {
						tmp = _1;
					}
					
				}
				
				string t = ((string) (tmp) );
				string d = (( ( ! (string.Equals(t, null)) ) ? (t) : ("") )).ToLowerInvariant();
				if (( global::haxe.lang.StringExt.indexOf(d, "e", default(global::haxe.lang.Null<int>)) >= 0 )) {
					p = global::haxe.lang.StringExt.split(d, "e");
					d = global::haxe.lang.Runtime.toString(p[0]);
					global::haxe.lang.Null<int> e = global::thx.Ints.parse(global::haxe.lang.Runtime.toString(p[1]), default(global::haxe.lang.Null<int>));
					if (( (e).@value < 0 )) {
						d = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::StringTools.rpad("", "0", ( ( - ((e).@value) ) - 1 )), i), d);
						i = "0";
					}
					else {
						string s = global::haxe.lang.Runtime.concat(i, d);
						d = global::haxe.lang.StringExt.substring(s, ( (e).@value + 1 ), default(global::haxe.lang.Null<int>));
						i = global::thx.format.NumberFormat.pad(s, ( (e).@value + 1 ), false);
					}
					
				}
				
				if (( d.Length > 0 )) {
					return new global::Array<object>(new object[]{i, d});
				}
				else {
					return new global::Array<object>(new object[]{i});
				}
				
			}
		}
		
		
		public static global::Array<object> splitPattern(string pattern, string separator) {
			unchecked {
				global::Array<int> pos = new global::Array<int>(new int[]{});
				int i = 0;
				int quote = 0;
				while (( i < pattern.Length )) {
					{
						string _g = global::haxe.lang.StringExt.substring(pattern, i, new global::haxe.lang.Null<int>(( i + 1 ), true));
						switch (_g) {
							case "\"":
							{
								switch (quote) {
									case 0:
									{
										quote = 2;
										break;
									}
									
									
									case 2:
									{
										quote = 0;
										break;
									}
									
									
									default:
									{
										break;
									}
									
								}
								
								break;
							}
							
							
							case "\'":
							{
								switch (quote) {
									case 0:
									{
										quote = 1;
										break;
									}
									
									
									case 1:
									{
										quote = 0;
										break;
									}
									
									
									default:
									{
										break;
									}
									
								}
								
								break;
							}
							
							
							case "\\":
							{
								 ++ i;
								break;
							}
							
							
							default:
							{
								if (( quote == 0 )) {
									if (( global::haxe.lang.StringExt.indexOf(separator, _g, default(global::haxe.lang.Null<int>)) >= 0 )) {
										pos.push(i);
									}
									
								}
								
								break;
							}
							
						}
						
					}
					
					 ++ i;
				}
				
				global::Array<object> buf = new global::Array<object>(new object[]{});
				int prev = 0;
				{
					int _g1 = 0;
					while (( _g1 < pos.length )) {
						int p = pos[_g1];
						 ++ _g1;
						buf.push(global::haxe.lang.StringExt.substring(pattern, prev, new global::haxe.lang.Null<int>(p, true)));
						prev = ( p + 1 );
					}
					
				}
				
				buf.push(global::haxe.lang.StringExt.substring(pattern, prev, default(global::haxe.lang.Null<int>)));
				return buf;
			}
		}
		
		
		public static string @value(double f, int precision, global::Array<int> groupSizes, string groupSeparator, string decimalSeparator) {
			unchecked {
				f = global::System.Math.Abs(((double) (global::thx.Floats.roundTo(f, precision)) ));
				global::Array<object> p = global::thx.format.NumberFormat.splitOnDecimalSeparator(f);
				global::Array<object> buf = new global::Array<object>(new object[]{});
				buf.push(global::thx.format.NumberFormat.intPart(global::haxe.lang.Runtime.toString(p[0]), groupSizes, groupSeparator));
				if (( precision > 0 )) {
					buf.push(global::thx.format.NumberFormat.pad(global::haxe.lang.Runtime.toString(p[1]), precision, true));
				}
				
				return buf.@join(decimalSeparator);
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.format.NumberFormat(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.format.NumberFormat();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.format {
	public class NumberFormat_printf_361__Fun : global::haxe.lang.Function {
		
		public NumberFormat_printf_361__Fun(int width, bool prefix, string padding, bool negativeSignOnly, bool justifyRight, bool emptySpaceForSign) : base(5, 0) {
			this.width = width;
			this.prefix = prefix;
			this.padding = padding;
			this.negativeSignOnly = negativeSignOnly;
			this.justifyRight = justifyRight;
			this.emptySpaceForSign = emptySpaceForSign;
		}
		
		
		public override object __hx_invoke5_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3, double __fn_float4, object __fn_dyn4, double __fn_float5, object __fn_dyn5) {
			string ps = ( (( __fn_dyn5 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float5)) : (global::haxe.lang.Runtime.toString(__fn_dyn5)) );
			string ns = ( (( __fn_dyn4 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float4)) : (global::haxe.lang.Runtime.toString(__fn_dyn4)) );
			string p1 = ( (( __fn_dyn3 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float3)) : (global::haxe.lang.Runtime.toString(__fn_dyn3)) );
			double f1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((double) (__fn_float2) )) : (((double) (global::haxe.lang.Runtime.toDouble(__fn_dyn2)) )) );
			string s = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			if (this.prefix) {
				s = global::haxe.lang.Runtime.concat(p1, s);
			}
			
			if (( f1 < 0 )) {
				s = global::haxe.lang.Runtime.concat(ns, s);
			}
			else if ( ! (this.negativeSignOnly) ) {
				s = global::haxe.lang.Runtime.concat(ps, s);
			}
			else if (this.emptySpaceForSign) {
				s = global::haxe.lang.Runtime.concat(" ", s);
			}
			
			if (this.justifyRight) {
				return global::StringTools.lpad(s, this.padding, this.width);
			}
			else {
				return global::StringTools.rpad(s, this.padding, this.width);
			}
			
		}
		
		
		public int width;
		
		public bool prefix;
		
		public string padding;
		
		public bool negativeSignOnly;
		
		public bool justifyRight;
		
		public bool emptySpaceForSign;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.format {
	public class NumberFormat_customFormatInteger_608__Fun : global::haxe.lang.Function {
		
		public NumberFormat_customFormatInteger_608__Fun(global::Array<object> p) : base(1, 0) {
			this.p = p;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.format._NumberFormat.CustomFormat _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.format._NumberFormat.CustomFormat) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::thx.format._NumberFormat.CustomFormat) (__fn_dyn1) )) )) );
				switch (_.index) {
					case 0:
					{
						return global::haxe.lang.Runtime.toString(_.@params[0]);
					}
					
					
					case 1:
					{
						bool first1 = global::haxe.lang.Runtime.toBool(_.@params[0]);
						if (( this.p.length == 0 )) {
							return "";
						}
						else if (first1) {
							return this.p.@join("");
						}
						else {
							return global::haxe.lang.Runtime.toString((this.p.pop()).toDynamic());
						}
						
					}
					
					
					case 2:
					{
						if (global::haxe.lang.Runtime.toBool(_.@params[0])) {
							return this.p.@join("");
						}
						else {
							return global::haxe.lang.Runtime.toString((this.p.pop()).toDynamic());
						}
						
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public global::Array<object> p;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.format._NumberFormat {
	public class CustomFormat : global::haxe.lang.ParamEnum {
		
		public CustomFormat(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"Literal", "Hash", "Zero"};
		
		public static global::thx.format._NumberFormat.CustomFormat Literal(string s) {
			return new global::thx.format._NumberFormat.CustomFormat(0, new object[]{s});
		}
		
		
		public static global::thx.format._NumberFormat.CustomFormat Hash(bool first) {
			unchecked {
				return new global::thx.format._NumberFormat.CustomFormat(1, new object[]{first});
			}
		}
		
		
		public static global::thx.format._NumberFormat.CustomFormat Zero(bool first) {
			unchecked {
				return new global::thx.format._NumberFormat.CustomFormat(2, new object[]{first});
			}
		}
		
		
		public override string getTag() {
			return global::thx.format._NumberFormat.CustomFormat.__hx_constructs[this.index];
		}
		
		
	}
}


