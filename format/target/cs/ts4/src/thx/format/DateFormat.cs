// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.format {
	public class DateFormat : global::haxe.lang.HxObject {
		
		public DateFormat(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public DateFormat() {
			global::thx.format.DateFormat.__hx_ctor_thx_format_DateFormat(this);
		}
		
		
		public static void __hx_ctor_thx_format_DateFormat(global::thx.format.DateFormat __temp_me158) {
		}
		
		
		public static string customFormat(global::Array<long> d, string pattern, global::thx.culture.Culture culture) {
			unchecked {
				global::thx.culture.Culture _0 = culture;
				global::thx.culture.Culture t = ( (( null == _0 )) ? (null) : (_0) );
				if (( t != null )) {
					culture = t;
				}
				else {
					culture = global::thx.format.Format.get_defaultCulture();
				}
				
				global::EReg ereg = new global::EReg("(d|M){1,4}|(z){1,3}|(y){1,5}|(f|F){1,7}|(h|H|m|s|t){1,2}|K|[:]|[/]|\'[^\']*\'|\"[^\"]*\"|[%][daAIHMmbhBSpycCeDfiklnPqrRstTuYxXw%]", "");
				bool escape = false;
				global::Array<object> buf = new global::Array<object>(new object[]{});
				while (( pattern.Length > 0 )) {
					if (escape) {
						escape = false;
						buf.push(global::haxe.lang.StringExt.substring(pattern, 0, new global::haxe.lang.Null<int>(1, true)));
						pattern = global::haxe.lang.StringExt.substring(pattern, 1, default(global::haxe.lang.Null<int>));
					}
					else if (ereg.match(pattern)) {
						string left = ereg.matchedLeft();
						if (string.Equals(global::haxe.lang.StringExt.substring(left, -1, default(global::haxe.lang.Null<int>)), "\\")) {
							escape = true;
							pattern = global::haxe.lang.StringExt.substring(pattern, left.Length, default(global::haxe.lang.Null<int>));
							buf.push(global::haxe.lang.StringExt.substring(left, 0, new global::haxe.lang.Null<int>(( left.Length - 1 ), true)));
							continue;
						}
						
						buf.push(left);
						string term = ereg.matched(0);
						string right = ereg.matchedRight();
						pattern = right;
						if (( string.Equals(term, ".") && string.Equals(global::haxe.lang.StringExt.substring(right, 0, new global::haxe.lang.Null<int>(1, true)).ToLowerInvariant(), "f") )) {
							if (( ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ))) ) == ((long) (global::thx.Int64s.zero) ) )) {
								ereg.match(right);
								pattern = ereg.matchedRight();
								continue;
							}
							
						}
						
						buf.push(global::thx.format.DateFormat.formatTerm(d, term, culture));
					}
					else {
						buf.push(pattern);
						pattern = "";
					}
					
				}
				
				if (escape) {
					buf.push("\\");
				}
				
				return buf.@join("");
			}
		}
		
		
		public static string format(global::Array<long> d, string pattern, global::thx.culture.Culture culture) {
			switch (pattern) {
				case "D":
				{
					return global::thx.format.DateFormat.dateLong(d, culture);
				}
				
				
				case "F":
				{
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::thx.format.DateFormat.dateLong(d, culture), " "), global::thx.format.DateFormat.timeLong(d, culture));
				}
				
				
				case "G":
				{
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::thx.format.DateFormat.dateShort(d, culture), " "), global::thx.format.DateFormat.timeLong(d, culture));
				}
				
				
				case "M":
				case "m":
				{
					return global::thx.format.DateFormat.monthDay(d, culture);
				}
				
				
				case "T":
				{
					return global::thx.format.DateFormat.timeLong(d, culture);
				}
				
				
				case "U":
				{
					return global::thx.format.DateFormat.dateTimeFull(d, culture);
				}
				
				
				case "d":
				{
					return global::thx.format.DateFormat.dateShort(d, culture);
				}
				
				
				case "f":
				{
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::thx.format.DateFormat.dateLong(d, culture), " "), global::thx.format.DateFormat.timeShort(d, culture));
				}
				
				
				case "g":
				{
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::thx.format.DateFormat.dateShort(d, culture), " "), global::thx.format.DateFormat.timeShort(d, culture));
				}
				
				
				case "O":
				case "o":
				{
					return global::thx.format.DateFormat.iso8601(d, culture);
				}
				
				
				case "R":
				case "r":
				{
					return global::thx.format.DateFormat.rfc1123(d, culture);
				}
				
				
				case "s":
				{
					return global::thx.format.DateFormat.dateTimeSortable(d, culture);
				}
				
				
				case "t":
				{
					return global::thx.format.DateFormat.timeShort(d, culture);
				}
				
				
				case "u":
				{
					return global::thx.format.DateFormat.universalSortable(d, culture);
				}
				
				
				case "Y":
				case "y":
				{
					return global::thx.format.DateFormat.yearMonth(d, culture);
				}
				
				
				default:
				{
					return global::thx.format.DateFormat.customFormat(d, pattern, culture);
				}
				
			}
			
		}
		
		
		public static string formatTerm(global::Array<long> d, string pattern, global::thx.culture.Culture culture) {
			unchecked {
				switch (pattern) {
					case ".":
					{
						return culture.number.separatorDecimalNumber;
					}
					
					
					case "/":
					{
						return global::thx.format.DateFormat.dateTime(culture).separatorDate;
					}
					
					
					case ":":
					{
						return global::thx.format.DateFormat.dateTime(culture).separatorTime;
					}
					
					
					case "F":
					{
						return global::thx.format.DateFormat.getDecimalsUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 1);
					}
					
					
					case "FF":
					{
						return global::thx.format.DateFormat.getDecimalsUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 2);
					}
					
					
					case "FFF":
					{
						return global::thx.format.DateFormat.getDecimalsUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 3);
					}
					
					
					case "FFFF":
					{
						return global::thx.format.DateFormat.getDecimalsUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 4);
					}
					
					
					case "FFFFF":
					{
						return global::thx.format.DateFormat.getDecimalsUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 5);
					}
					
					
					case "FFFFFF":
					{
						return global::thx.format.DateFormat.getDecimalsUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 6);
					}
					
					
					case "FFFFFFF":
					{
						return global::thx.format.DateFormat.getDecimalsString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )));
					}
					
					
					case "H":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ))));
					}
					
					
					case "HH":
					{
						return global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )))), "0", 2);
					}
					
					
					case "K":
					case "zzz":
					{
						return global::thx.format.TimeFormat.offsetLong(((long) (((global::Array<long>) (d) )[1]) ), culture);
					}
					
					
					case "M":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH)));
					}
					
					
					case "MM":
					{
						return global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH))), "0", 2);
					}
					
					
					case "MMM":
					{
						return global::haxe.lang.Runtime.toString(global::thx.format.DateFormat.dateTime(culture).nameMonthsAbbreviated[( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) - 1 )]);
					}
					
					
					case "MMMM":
					{
						return global::haxe.lang.Runtime.toString(global::thx.format.DateFormat.dateTime(culture).nameMonths[( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) - 1 )]);
					}
					
					
					case "d":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY)));
					}
					
					
					case "dd":
					{
						return global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY))), "0", 2);
					}
					
					
					case "ddd":
					{
						return global::haxe.lang.Runtime.toString(global::thx.format.DateFormat.dateTime(culture).nameDaysAbbreviated[global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ))]);
					}
					
					
					case "dddd":
					{
						return global::haxe.lang.Runtime.toString(global::thx.format.DateFormat.dateTime(culture).nameDays[global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ))]);
					}
					
					
					case "f":
					{
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 1);
					}
					
					
					case "ff":
					{
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 2);
					}
					
					
					case "fff":
					{
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 3);
					}
					
					
					case "ffff":
					{
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 4);
					}
					
					
					case "fffff":
					{
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 5);
					}
					
					
					case "ffffff":
					{
						return global::thx.format.DateFormat.getDecimalsPaddedUpTo(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )), 6);
					}
					
					
					case "fffffff":
					{
						return global::thx.format.DateFormat.getDecimalsPadded(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )));
					}
					
					
					case "h":
					{
						int _g = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ));
						if (( _g == 0 )) {
							return "12";
						}
						else if (( _g <= 12 )) {
							return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(_g));
						}
						else {
							return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString((( _g - 12 ))));
						}
						
					}
					
					
					case "hh":
					{
						return global::StringTools.lpad(global::thx.format.DateFormat.formatTerm(d, "h", culture), "0", 2);
					}
					
					
					case "m":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ))));
					}
					
					
					case "mm":
					{
						return global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )))), "0", 2);
					}
					
					
					case "s":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ))));
					}
					
					
					case "ss":
					{
						return global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )))), "0", 2);
					}
					
					
					case "t":
					{
						global::thx.culture.DateFormatInfo dt = global::thx.format.DateFormat.dateTime(culture);
						return global::haxe.lang.StringExt.substr((( (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )) < 12 )) ? (dt.designatorAm) : (dt.designatorPm) )), 0, new global::haxe.lang.Null<int>(1, true));
					}
					
					
					case "tt":
					{
						global::thx.culture.DateFormatInfo dt1 = global::thx.format.DateFormat.dateTime(culture);
						if (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )) < 12 )) {
							return dt1.designatorAm;
						}
						else {
							return dt1.designatorPm;
						}
						
					}
					
					
					case "y":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) % 100 )));
					}
					
					
					case "yy":
					{
						return global::thx.Ints.lpad(( global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) % 100 ), "0", 2);
					}
					
					
					case "yyy":
					{
						return global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), "0", 3);
					}
					
					
					case "yyyy":
					{
						return global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), "0", 4);
					}
					
					
					case "yyyyy":
					{
						return global::thx.Ints.lpad(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), "0", 5);
					}
					
					
					case "z":
					{
						return global::thx.format.TimeFormat.offsetHoursShort(((long) (((global::Array<long>) (d) )[1]) ), culture);
					}
					
					
					case "zz":
					{
						return global::thx.format.TimeFormat.offsetHoursLong(((long) (((global::Array<long>) (d) )[1]) ), culture);
					}
					
					
					default:
					{
						if (string.Equals(global::haxe.lang.StringExt.substring(pattern, 0, new global::haxe.lang.Null<int>(1, true)), "%")) {
							return global::thx.format.DateFormat.strftime(d, pattern, culture);
						}
						else if (( ( (  ! (string.Equals(pattern, null))  && ( pattern.Length > 1 ) ) && (( string.Equals(global::haxe.lang.StringExt.substring(pattern, 0, new global::haxe.lang.Null<int>(1, true)), "\'") && string.Equals(global::haxe.lang.StringExt.substring(pattern, ( pattern.Length - 1 ), default(global::haxe.lang.Null<int>)), "\'") )) ) || ( string.Equals(global::haxe.lang.StringExt.substring(pattern, 0, new global::haxe.lang.Null<int>(1, true)), "\"") && string.Equals(global::haxe.lang.StringExt.substring(pattern, ( pattern.Length - 1 ), default(global::haxe.lang.Null<int>)), "\"") ) )) {
							return global::haxe.lang.StringExt.substring(pattern, 1, new global::haxe.lang.Null<int>(( pattern.Length - 1 ), true));
						}
						else {
							return pattern;
						}
						
					}
					
				}
				
			}
		}
		
		
		public static string strftime(global::Array<long> d, string pattern, global::thx.culture.Culture culture) {
			unchecked {
				switch (pattern) {
					case "%%":
					{
						return "%";
					}
					
					
					case "%A":
					{
						return global::thx.format.DateFormat.formatTerm(d, "dddd", culture);
					}
					
					
					case "%B":
					{
						return global::thx.format.DateFormat.formatTerm(d, "MMMM", culture);
					}
					
					
					case "%C":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (global::System.Math.Floor(((double) (( ((double) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR)) ) / 100 )) ))) )));
					}
					
					
					case "%D":
					{
						return global::thx.format.DateFormat.format(d, "%m/%d/%y", culture);
					}
					
					
					case "%H":
					{
						return global::thx.format.DateFormat.formatTerm(d, "HH", culture);
					}
					
					
					case "%I":
					{
						return global::thx.format.DateFormat.formatTerm(d, "hh", culture);
					}
					
					
					case "%M":
					{
						return global::thx.format.DateFormat.formatTerm(d, "mm", culture);
					}
					
					
					case "%P":
					{
						global::thx.culture.DateFormatInfo dt = global::thx.format.DateFormat.dateTime(culture);
						return (( (( global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )) < 12 )) ? (dt.designatorAm) : (dt.designatorPm) )).ToLowerInvariant();
					}
					
					
					case "%R":
					{
						return global::thx.format.DateFormat.format(d, "%H:%M", culture);
					}
					
					
					case "%S":
					{
						return global::thx.format.DateFormat.formatTerm(d, "ss", culture);
					}
					
					
					case "%T":
					{
						return global::thx.format.DateFormat.format(d, "%H:%M:%S", culture);
					}
					
					
					case "%X":
					{
						return global::thx.format.DateFormat.timeLong(d, culture);
					}
					
					
					case "%Y":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR)));
					}
					
					
					case "%a":
					{
						return global::thx.format.DateFormat.formatTerm(d, "ddd", culture);
					}
					
					
					case "%c":
					{
						return global::thx.format.DateFormat.dateTimeFull(d, culture);
					}
					
					
					case "%d":
					{
						return global::thx.format.DateFormat.formatTerm(d, "dd", culture);
					}
					
					
					case "%e":
					{
						return global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY))), " ", 2);
					}
					
					
					case "%f":
					{
						return global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ), global::thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH))), " ", 2);
					}
					
					
					case "%b":
					case "%h":
					{
						return global::thx.format.DateFormat.formatTerm(d, "MMM", culture);
					}
					
					
					case "%i":
					{
						return global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )))), " ", 2);
					}
					
					
					case "%k":
					{
						return global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )))), " ", 2);
					}
					
					
					case "%l":
					{
						return global::StringTools.lpad(global::thx.format.DateFormat.formatTerm(d, "h", culture), " ", 2);
					}
					
					
					case "%m":
					{
						return global::thx.format.DateFormat.formatTerm(d, "MM", culture);
					}
					
					
					case "%n":
					{
						return "\n";
					}
					
					
					case "%p":
					{
						return global::thx.format.DateFormat.formatTerm(d, "tt", culture);
					}
					
					
					case "%q":
					{
						return global::StringTools.lpad(global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) )))), " ", 2);
					}
					
					
					case "%r":
					{
						return global::thx.format.DateFormat.format(d, "%I:%M:%S %p", culture);
					}
					
					
					case "%s":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(((int) (( global::thx.Int64s.toFloat(((long) (( (((long) (( ((long) (((global::Array<long>) (d) )[0]) ) - ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks) ) )) )) / ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) )) / 1000 )) )));
					}
					
					
					case "%t":
					{
						return "\t";
					}
					
					
					case "%u":
					{
						int day = global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ));
						if (( day == 0 )) {
							return "7";
						}
						else {
							return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(day));
						}
						
					}
					
					
					case "%w":
					{
						return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(global::thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(((long) (( ((long) (((global::Array<long>) (d) )[0]) ) + ((long) (((global::Array<long>) (d) )[1]) ) )) ))));
					}
					
					
					case "%x":
					{
						return global::thx.format.DateFormat.dateLong(d, culture);
					}
					
					
					case "%y":
					{
						return global::thx.format.DateFormat.formatTerm(d, "y", culture);
					}
					
					
					case "%z":
					{
						return global::thx.format.TimeFormat.iso8601OffsetShort(((long) (((global::Array<long>) (d) )[1]) ));
					}
					
					
					default:
					{
						return pattern;
					}
					
				}
				
			}
		}
		
		
		public static string dateLong(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(d, global::thx.format.DateFormat.dateTime(culture).patternDateLong, culture);
		}
		
		
		public static string dateShort(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(d, global::thx.format.DateFormat.dateTime(culture).patternDateShort, culture);
		}
		
		
		public static string dateTimeFull(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(d, global::thx.format.DateFormat.dateTime(culture).patternDateTimeFull, culture);
		}
		
		
		public static string dateTimeSortable(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(d, global::thx.format.DateFormat.dateTime(culture).patternDateTimeSortable, culture);
		}
		
		
		public static string monthDay(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(d, global::thx.format.DateFormat.dateTime(culture).patternMonthDay, culture);
		}
		
		
		public static string rfc1123(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(((global::Array<long>) (new global::Array<long>(new long[]{((long) (((global::Array<long>) (d) )[0]) ), ((long) (global::thx._Time.Time_Impl_.zero) )})) ), global::thx.format.DateFormat.dateTime(culture).patternRfc1123, culture);
		}
		
		
		public static string timeLong(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(d, global::thx.format.DateFormat.dateTime(culture).patternTimeLong, culture);
		}
		
		
		public static string timeShort(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(d, global::thx.format.DateFormat.dateTime(culture).patternTimeShort, culture);
		}
		
		
		public static string universalSortable(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(((global::Array<long>) (new global::Array<long>(new long[]{((long) (((global::Array<long>) (d) )[0]) ), ((long) (global::thx._Time.Time_Impl_.zero) )})) ), global::thx.format.DateFormat.dateTime(culture).patternUniversalSortable, culture);
		}
		
		
		public static string iso8601(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(d, "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss\'.\'fffffffK", culture);
		}
		
		
		public static string yearMonth(global::Array<long> d, global::thx.culture.Culture culture) {
			return global::thx.format.DateFormat.customFormat(d, global::thx.format.DateFormat.dateTime(culture).patternYearMonth, culture);
		}
		
		
		public static string getDecimalsPadded(int decimals) {
			unchecked {
				return global::thx.Ints.lpad(decimals, "0", 7);
			}
		}
		
		
		public static string getDecimalsString(int decimals) {
			return global::thx.Strings.trimCharsRight(global::thx.format.DateFormat.getDecimalsPadded(decimals), "0");
		}
		
		
		public static string getDecimalsUpTo(int decimals, int to) {
			return global::haxe.lang.StringExt.substring(global::thx.format.DateFormat.getDecimalsString(decimals), 0, new global::haxe.lang.Null<int>(to, true));
		}
		
		
		public static string getDecimalsPaddedUpTo(int decimals, int to) {
			return global::haxe.lang.StringExt.substring(global::thx.format.DateFormat.getDecimalsPadded(decimals), 0, new global::haxe.lang.Null<int>(to, true));
		}
		
		
		public static global::thx.culture.DateFormatInfo dateTime(global::thx.culture.Culture culture) {
			if (( ( null != culture ) && ( null != culture.dateTime ) )) {
				return culture.dateTime;
			}
			else {
				return global::thx.format.Format.get_defaultCulture().dateTime;
			}
			
		}
		
		
		public static global::EReg getPattern() {
			return new global::EReg("(d|M){1,4}|(z){1,3}|(y){1,5}|(f|F){1,7}|(h|H|m|s|t){1,2}|K|[:]|[/]|\'[^\']*\'|\"[^\"]*\"|[%][daAIHMmbhBSpycCeDfiklnPqrRstTuYxXw%]", "");
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.format.DateFormat(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.format.DateFormat();
		}
		
		
	}
}


