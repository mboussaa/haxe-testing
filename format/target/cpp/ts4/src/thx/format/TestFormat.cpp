// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_thx__DateTime_DateTime_Impl_
#include <thx/_DateTime/DateTime_Impl_.h>
#endif
#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_DateFormatInfo
#include <thx/culture/DateFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif
#ifndef INCLUDED_thx_format_DateFormat
#include <thx/format/DateFormat.h>
#endif
#ifndef INCLUDED_thx_format_NumberFormat
#include <thx/format/NumberFormat.h>
#endif
#ifndef INCLUDED_thx_format_TestFormat
#include <thx/format/TestFormat.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace format{

void TestFormat_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.format.TestFormat","new",0x952b6ea8,"thx.format.TestFormat.new","thx/format/TestFormat.hx",14,0x7febd7a8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  14)		this->x = i;
            	}

Dynamic TestFormat_obj::__CreateEmpty() { return new TestFormat_obj; }

hx::ObjectPtr< TestFormat_obj > TestFormat_obj::__new(Int i)
{
	hx::ObjectPtr< TestFormat_obj > _hx_result = new TestFormat_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestFormat_obj > _hx_result = new TestFormat_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestFormat_obj::testF(){
            	HX_STACK_FRAME("thx.format.TestFormat","testF",0x3e473ffc,"thx.format.TestFormat.testF","thx/format/TestFormat.hx",18,0x7febd7a8)
            	HX_STACK_THIS(this)
HXLINE(  18)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  18)		HX_VARI( Int,_g) = this->x;
HXDLIN(  18)		while((_g1 < _g)){
HXLINE(  18)			++_g1;
HXLINE(  19)			HX_VARI( ::Array< ::Dynamic>,date) = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01",a1,e9,a3,42));
HXLINE(  30)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(date,HX_("D",44,00,00,00),null());
HXLINE(  20)			::utest::Assert_obj::equals(HX_("Wednesday, 01 January 2014",0c,3e,f5,4f),_hx_tmp,null(),hx::SourceInfo(HX_("TestFormat.hx",15,9d,5d,94),20,HX_("thx.format.TestFormat",b6,3a,5d,fb),HX_("testF",b4,7f,95,0d)));
HXLINE(  30)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01",a1,e9,a3,42)),HX_("D",44,00,00,00),null());
HXLINE(  21)			::utest::Assert_obj::equals(HX_("Wednesday, 01 January 2014",0c,3e,f5,4f),_hx_tmp1,null(),hx::SourceInfo(HX_("TestFormat.hx",15,9d,5d,94),21,HX_("thx.format.TestFormat",b6,3a,5d,fb),HX_("testF",b4,7f,95,0d)));
HXLINE(  38)			::String _hx_tmp2 = ::thx::format::NumberFormat_obj::format((int)1000,HX_("n",6e,00,00,00),null());
HXLINE(  22)			::utest::Assert_obj::equals(HX_("1,000.00",99,ba,92,0c),_hx_tmp2,null(),hx::SourceInfo(HX_("TestFormat.hx",15,9d,5d,94),22,HX_("thx.format.TestFormat",b6,3a,5d,fb),HX_("testF",b4,7f,95,0d)));
HXLINE(  24)			::Array< ::Dynamic> _hx_tmp3 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2014-01-01",a1,e9,a3,42));
HXLINE(  30)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::format(_hx_tmp3,HX_("D",44,00,00,00),::thx::format::TestFormat_obj::it);
HXLINE(  24)			::utest::Assert_obj::equals(HX_("mercoled\xc3""\xac"" 1 gennaio 2014",59,f9,46,9e),_hx_tmp4,null(),hx::SourceInfo(HX_("TestFormat.hx",15,9d,5d,94),24,HX_("thx.format.TestFormat",b6,3a,5d,fb),HX_("testF",b4,7f,95,0d)));
HXLINE(  38)			::String _hx_tmp5 = ::thx::format::NumberFormat_obj::format((int)1000,HX_("n",6e,00,00,00),::thx::format::TestFormat_obj::it);
HXLINE(  25)			::utest::Assert_obj::equals(HX_("1.000,00",99,23,bc,5f),_hx_tmp5,null(),hx::SourceInfo(HX_("TestFormat.hx",15,9d,5d,94),25,HX_("thx.format.TestFormat",b6,3a,5d,fb),HX_("testF",b4,7f,95,0d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFormat_obj,testF,(void))

 ::thx::culture::Culture TestFormat_obj::it;


TestFormat_obj::TestFormat_obj()
{
}

hx::Val TestFormat_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"testF") ) { return hx::Val( testF_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestFormat_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"it") ) { outValue = it; return true; }
	}
	return false;
}

hx::Val TestFormat_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TestFormat_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"it") ) { it=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
	}
	return false;
}

void TestFormat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestFormat_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestFormat_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TestFormat_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestFormat_obj::it,HX_HCSTRING("it","\xeb","\x5b","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TestFormat_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testF","\xb4","\x7f","\x95","\x0d"),
	::String(null()) };

static void TestFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestFormat_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TestFormat_obj::it,"it");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestFormat_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TestFormat_obj::it,"it");
};

#endif

hx::Class TestFormat_obj::__mClass;

static ::String TestFormat_obj_sStaticFields[] = {
	HX_HCSTRING("it","\xeb","\x5b","\x00","\x00"),
	::String(null())
};

void TestFormat_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.format.TestFormat","\xb6","\x3a","\x5d","\xfb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestFormat_obj::__GetStatic;
	__mClass->mSetStaticField = &TestFormat_obj::__SetStatic;
	__mClass->mMarkFunc = TestFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestFormat_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestFormat_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestFormat_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.format.TestFormat","boot",0xe8ee64ea,"thx.format.TestFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)9)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(".",2e,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xac""",4c,ef,ab,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("Non un numero reale",f7,bd,ea,94))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("+Infinito",29,76,a7,22))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)2)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinito",2b,48,8a,c8))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(".",2e,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(".",2e,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("italiano",af,a6,00,8b))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Italy",03,12,37,55))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd d MMMM yyyy HH:mm:ss",dc,7e,69,9b))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("calendario gregoriano",45,88,b6,ba))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstFourDayWeek",fa,56,48,9b))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("dd MMMM",60,27,05,da))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd d MMMM yyyy",44,a9,80,93))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("do",8b,57,00,00))->init(1,HX_("lu",89,5e,00,00))->init(2,HX_("ma",54,5f,00,00))->init(3,HX_("me",58,5f,00,00))->init(4,HX_("gi",22,5a,00,00))->init(5,HX_("ve",2f,67,00,00))->init(6,HX_("sa",8e,64,00,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("dom",82,42,4c,00))->init(1,HX_("lun",c5,59,52,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("mer",1a,0e,53,00))->init(4,HX_("gio",0d,84,4e,00))->init(5,HX_("ven",5f,e2,59,00))->init(6,HX_("sab",14,98,57,00)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("HH:mm",1a,83,9d,a4))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("HH:mm:ss",80,50,d2,03))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("domenica",bc,78,e7,64))->init(1,HX_("luned\xc3""\xac""",ed,38,f2,eb))->init(2,HX_("marted\xc3""\xac""",be,1b,56,be))->init(3,HX_("mercoled\xc3""\xac""",0e,02,2a,7a))->init(4,HX_("gioved\xc3""\xac""",f1,38,8e,a7))->init(5,HX_("venerd\xc3""\xac""",e1,9a,99,33))->init(6,HX_("sabato",88,ac,f9,15)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd/MM/yyyy",40,9b,42,af))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)2)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("Italia",0e,a3,f8,3a))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("it-IT",4d,0e,e2,c1))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("it-IT",4d,0e,e2,c1))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("it",eb,5b,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("ita",16,12,50,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1040)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ITA",f6,ad,37,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Italian",a0,09,96,5e)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		it = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
}

} // end namespace thx
} // end namespace format
