// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_format_TestDecimalFormat
#define INCLUDED_thx_format_TestDecimalFormat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,culture,Culture)
HX_DECLARE_CLASS2(thx,format,TestDecimalFormat)

namespace thx{
namespace format{


class HXCPP_CLASS_ATTRIBUTES TestDecimalFormat_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestDecimalFormat_obj OBJ_;
		TestDecimalFormat_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.format.TestDecimalFormat")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.format.TestDecimalFormat"); }
		static hx::ObjectPtr< TestDecimalFormat_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestDecimalFormat_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestDecimalFormat","\xd6","\xf6","\xe1","\x17"); }

		static void __boot();
		static  ::thx::culture::Culture it;
		static  ::thx::culture::Culture us;
		static  ::thx::culture::Culture asIn;
		static  ::thx::culture::Culture baRu;
		Int x;
		void testNumber();
		::Dynamic testNumber_dyn();

		void testCurrency();
		::Dynamic testCurrency_dyn();

		void testCurrencyIT();
		::Dynamic testCurrencyIT_dyn();

		void testCurrencyUS();
		::Dynamic testCurrencyUS_dyn();

		void testPercent();
		::Dynamic testPercent_dyn();

		void testPermille();
		::Dynamic testPermille_dyn();

		void testUnit();
		::Dynamic testUnit_dyn();

		void testDecimal();
		::Dynamic testDecimal_dyn();

		void testFormatFixed();
		::Dynamic testFormatFixed_dyn();

		void testExponential();
		::Dynamic testExponential_dyn();

		void testPrintfd();
		::Dynamic testPrintfd_dyn();

		void testPrintfb();
		::Dynamic testPrintfb_dyn();

		void testRounding();
		::Dynamic testRounding_dyn();

		void testDifferentGroups();
		::Dynamic testDifferentGroups_dyn();

		void testCustomFormat0();
		::Dynamic testCustomFormat0_dyn();

		void testCustomFormatHash();
		::Dynamic testCustomFormatHash_dyn();

		void testCustomDecimalSeparator();
		::Dynamic testCustomDecimalSeparator_dyn();

		void testCustomDecimalFranction();
		::Dynamic testCustomDecimalFranction_dyn();

		void testCustomPercentSpecifier();
		::Dynamic testCustomPercentSpecifier_dyn();

		void testCustomPermilleSpecifier();
		::Dynamic testCustomPermilleSpecifier_dyn();

		void testCustomE();
		::Dynamic testCustomE_dyn();

		void testCustomEscape();
		::Dynamic testCustomEscape_dyn();

		void testSectionSeparator();
		::Dynamic testSectionSeparator_dyn();

		void testCustomRounding();
		::Dynamic testCustomRounding_dyn();

		void testCustomEscapedDecimalSeparator();
		::Dynamic testCustomEscapedDecimalSeparator_dyn();

};

} // end namespace thx
} // end namespace format

#endif /* INCLUDED_thx_format_TestDecimalFormat */ 
