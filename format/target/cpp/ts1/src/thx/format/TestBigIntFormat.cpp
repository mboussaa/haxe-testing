// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Bigs
#include <thx/bigint/Bigs.h>
#endif
#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_DateFormatInfo
#include <thx/culture/DateFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif
#ifndef INCLUDED_thx_format_BigIntFormat
#include <thx/format/BigIntFormat.h>
#endif
#ifndef INCLUDED_thx_format_TestBigIntFormat
#include <thx/format/TestBigIntFormat.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace format{

void TestBigIntFormat_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.format.TestBigIntFormat","new",0x2d9088d7,"thx.format.TestBigIntFormat.new","thx/format/TestBigIntFormat.hx",16,0x15300059)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  16)		this->x = i;
            	}

Dynamic TestBigIntFormat_obj::__CreateEmpty() { return new TestBigIntFormat_obj; }

hx::ObjectPtr< TestBigIntFormat_obj > TestBigIntFormat_obj::__new(Int i)
{
	hx::ObjectPtr< TestBigIntFormat_obj > _hx_result = new TestBigIntFormat_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestBigIntFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestBigIntFormat_obj > _hx_result = new TestBigIntFormat_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestBigIntFormat_obj::testInteger(){
            	HX_STACK_FRAME("thx.format.TestBigIntFormat","testInteger",0x2ed13303,"thx.format.TestBigIntFormat.testInteger","thx/format/TestBigIntFormat.hx",20,0x15300059)
            	HX_STACK_THIS(this)
HXLINE(  20)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  20)		HX_VARI( Int,_g) = this->x;
HXDLIN(  20)		while((_g1 < _g)){
HXLINE(  20)			++_g1;
HXLINE(  21)			::String _hx_tmp = ::thx::format::BigIntFormat_obj::integer(::thx::bigint::Bigs_obj::fromInt((int)12345),null());
HXDLIN(  21)			::utest::Assert_obj::equals(HX_("12,345",29,f3,c1,7e),_hx_tmp,null(),hx::SourceInfo(HX_("TestBigIntFormat.hx",86,15,67,4d),21,HX_("thx.format.TestBigIntFormat",65,d1,9f,ec),HX_("testInteger",8c,ab,e4,d3)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigIntFormat_obj,testInteger,(void))

void TestBigIntFormat_obj::testFormatHex(){
            	HX_STACK_FRAME("thx.format.TestBigIntFormat","testFormatHex",0xa1379869,"thx.format.TestBigIntFormat.testFormatHex","thx/format/TestBigIntFormat.hx",25,0x15300059)
            	HX_STACK_THIS(this)
HXLINE(  25)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  25)		HX_VARI( Int,_g) = this->x;
HXDLIN(  25)		while((_g1 < _g)){
HXLINE(  25)			++_g1;
HXLINE(  26)			::String _hx_tmp = ::thx::format::BigIntFormat_obj::format(::thx::bigint::Bigs_obj::fromInt((int)123),HX_("x",78,00,00,00),null());
HXDLIN(  26)			::utest::Assert_obj::equals(HX_("7b",4b,30,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestBigIntFormat.hx",86,15,67,4d),26,HX_("thx.format.TestBigIntFormat",65,d1,9f,ec),HX_("testFormatHex",32,05,81,4c)));
HXLINE(  27)			::String _hx_tmp1 = ::thx::format::BigIntFormat_obj::format(::thx::bigint::Bigs_obj::fromInt((int)123),HX_("X",58,00,00,00),null());
HXDLIN(  27)			::utest::Assert_obj::equals(HX_("7B",2b,30,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigIntFormat.hx",86,15,67,4d),27,HX_("thx.format.TestBigIntFormat",65,d1,9f,ec),HX_("testFormatHex",32,05,81,4c)));
HXLINE(  28)			::String _hx_tmp2 = ::thx::format::BigIntFormat_obj::format(::thx::bigint::Bigs_obj::fromInt((int)123),HX_("x4",bc,68,00,00),null());
HXDLIN(  28)			::utest::Assert_obj::equals(HX_("007b",4b,da,de,1f),_hx_tmp2,null(),hx::SourceInfo(HX_("TestBigIntFormat.hx",86,15,67,4d),28,HX_("thx.format.TestBigIntFormat",65,d1,9f,ec),HX_("testFormatHex",32,05,81,4c)));
HXLINE(  29)			::String _hx_tmp3 = ::thx::format::BigIntFormat_obj::format(::thx::bigint::Bigs_obj::fromInt((int)123),HX_("X6",de,4c,00,00),null());
HXDLIN(  29)			::utest::Assert_obj::equals(HX_("00007B",2b,04,3c,f4),_hx_tmp3,null(),hx::SourceInfo(HX_("TestBigIntFormat.hx",86,15,67,4d),29,HX_("thx.format.TestBigIntFormat",65,d1,9f,ec),HX_("testFormatHex",32,05,81,4c)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigIntFormat_obj,testFormatHex,(void))

void TestBigIntFormat_obj::testOctal(){
            	HX_STACK_FRAME("thx.format.TestBigIntFormat","testOctal",0x785607d0,"thx.format.TestBigIntFormat.testOctal","thx/format/TestBigIntFormat.hx",33,0x15300059)
            	HX_STACK_THIS(this)
HXLINE(  33)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  33)		HX_VARI( Int,_g) = this->x;
HXDLIN(  33)		while((_g1 < _g)){
HXLINE(  33)			++_g1;
HXLINE(  34)			::String _hx_tmp = ::thx::format::BigIntFormat_obj::octal(::thx::bigint::Bigs_obj::fromInt((int)74),null(),null());
HXDLIN(  34)			::utest::Assert_obj::equals(HX_("112",52,59,25,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestBigIntFormat.hx",86,15,67,4d),34,HX_("thx.format.TestBigIntFormat",65,d1,9f,ec),HX_("testOctal",19,1c,45,f4)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigIntFormat_obj,testOctal,(void))

void TestBigIntFormat_obj::testHex(){
            	HX_STACK_FRAME("thx.format.TestBigIntFormat","testHex",0x786571a0,"thx.format.TestBigIntFormat.testHex","thx/format/TestBigIntFormat.hx",38,0x15300059)
            	HX_STACK_THIS(this)
HXLINE(  38)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  38)		HX_VARI( Int,_g) = this->x;
HXDLIN(  38)		while((_g1 < _g)){
HXLINE(  38)			++_g1;
HXLINE(  39)			::String _hx_tmp = ::thx::format::BigIntFormat_obj::hex(::thx::bigint::Bigs_obj::fromInt((int)10995),null(),null());
HXDLIN(  39)			::utest::Assert_obj::equals(HX_("2af3",bc,9e,56,21),_hx_tmp,null(),hx::SourceInfo(HX_("TestBigIntFormat.hx",86,15,67,4d),39,HX_("thx.format.TestBigIntFormat",65,d1,9f,ec),HX_("testHex",a9,b1,bd,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigIntFormat_obj,testHex,(void))

void TestBigIntFormat_obj::testBinary(){
            	HX_STACK_FRAME("thx.format.TestBigIntFormat","testBinary",0x10bd565c,"thx.format.TestBigIntFormat.testBinary","thx/format/TestBigIntFormat.hx",43,0x15300059)
            	HX_STACK_THIS(this)
HXLINE(  43)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  43)		HX_VARI( Int,_g) = this->x;
HXDLIN(  43)		while((_g1 < _g)){
HXLINE(  43)			++_g1;
HXLINE(  44)			::String _hx_tmp = ::thx::format::BigIntFormat_obj::binary(::thx::bigint::Bigs_obj::fromInt((int)25),null());
HXDLIN(  44)			::utest::Assert_obj::equals(HX_("11001",51,77,2a,57),_hx_tmp,null(),hx::SourceInfo(HX_("TestBigIntFormat.hx",86,15,67,4d),44,HX_("thx.format.TestBigIntFormat",65,d1,9f,ec),HX_("testBinary",f3,01,00,06)));
HXLINE(  45)			::String _hx_tmp1 = ::thx::format::BigIntFormat_obj::binary(::thx::bigint::Bigs_obj::fromInt((int)-133),null());
HXDLIN(  45)			::utest::Assert_obj::equals(HX_("-10000101",8e,51,5a,c7),_hx_tmp1,null(),hx::SourceInfo(HX_("TestBigIntFormat.hx",86,15,67,4d),45,HX_("thx.format.TestBigIntFormat",65,d1,9f,ec),HX_("testBinary",f3,01,00,06)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestBigIntFormat_obj,testBinary,(void))

 ::thx::culture::Culture TestBigIntFormat_obj::it;

 ::thx::culture::Culture TestBigIntFormat_obj::us;

 ::thx::culture::Culture TestBigIntFormat_obj::asIn;

 ::thx::culture::Culture TestBigIntFormat_obj::baRu;


TestBigIntFormat_obj::TestBigIntFormat_obj()
{
}

hx::Val TestBigIntFormat_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testHex") ) { return hx::Val( testHex_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testOctal") ) { return hx::Val( testOctal_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testBinary") ) { return hx::Val( testBinary_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testInteger") ) { return hx::Val( testInteger_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testFormatHex") ) { return hx::Val( testFormatHex_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestBigIntFormat_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"it") ) { outValue = it; return true; }
		if (HX_FIELD_EQ(inName,"us") ) { outValue = us; return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"asIn") ) { outValue = asIn; return true; }
		if (HX_FIELD_EQ(inName,"baRu") ) { outValue = baRu; return true; }
	}
	return false;
}

hx::Val TestBigIntFormat_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TestBigIntFormat_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"it") ) { it=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"us") ) { us=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"asIn") ) { asIn=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"baRu") ) { baRu=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
	}
	return false;
}

void TestBigIntFormat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestBigIntFormat_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestBigIntFormat_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TestBigIntFormat_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestBigIntFormat_obj::it,HX_HCSTRING("it","\xeb","\x5b","\x00","\x00")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestBigIntFormat_obj::us,HX_HCSTRING("us","\x5e","\x66","\x00","\x00")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestBigIntFormat_obj::asIn,HX_HCSTRING("asIn","\x77","\x35","\x75","\x40")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestBigIntFormat_obj::baRu,HX_HCSTRING("baRu","\x62","\xcb","\x10","\x41")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TestBigIntFormat_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testInteger","\x8c","\xab","\xe4","\xd3"),
	HX_HCSTRING("testFormatHex","\x32","\x05","\x81","\x4c"),
	HX_HCSTRING("testOctal","\x19","\x1c","\x45","\xf4"),
	HX_HCSTRING("testHex","\xa9","\xb1","\xbd","\xbd"),
	HX_HCSTRING("testBinary","\xf3","\x01","\x00","\x06"),
	::String(null()) };

static void TestBigIntFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestBigIntFormat_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TestBigIntFormat_obj::it,"it");
	HX_MARK_MEMBER_NAME(TestBigIntFormat_obj::us,"us");
	HX_MARK_MEMBER_NAME(TestBigIntFormat_obj::asIn,"asIn");
	HX_MARK_MEMBER_NAME(TestBigIntFormat_obj::baRu,"baRu");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestBigIntFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestBigIntFormat_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TestBigIntFormat_obj::it,"it");
	HX_VISIT_MEMBER_NAME(TestBigIntFormat_obj::us,"us");
	HX_VISIT_MEMBER_NAME(TestBigIntFormat_obj::asIn,"asIn");
	HX_VISIT_MEMBER_NAME(TestBigIntFormat_obj::baRu,"baRu");
};

#endif

hx::Class TestBigIntFormat_obj::__mClass;

static ::String TestBigIntFormat_obj_sStaticFields[] = {
	HX_HCSTRING("it","\xeb","\x5b","\x00","\x00"),
	HX_HCSTRING("us","\x5e","\x66","\x00","\x00"),
	HX_HCSTRING("asIn","\x77","\x35","\x75","\x40"),
	HX_HCSTRING("baRu","\x62","\xcb","\x10","\x41"),
	::String(null())
};

void TestBigIntFormat_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.format.TestBigIntFormat","\x65","\xd1","\x9f","\xec");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestBigIntFormat_obj::__GetStatic;
	__mClass->mSetStaticField = &TestBigIntFormat_obj::__SetStatic;
	__mClass->mMarkFunc = TestBigIntFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestBigIntFormat_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestBigIntFormat_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestBigIntFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestBigIntFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestBigIntFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestBigIntFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestBigIntFormat_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.format.TestBigIntFormat","boot",0xa90033db,"thx.format.TestBigIntFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)9)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(".",2e,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xac""",4c,ef,ab,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("Non un numero reale",f7,bd,ea,94))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("+Infinito",29,76,a7,22))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)2)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinito",2b,48,8a,c8))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(".",2e,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(".",2e,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("italiano",af,a6,00,8b))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Italy",03,12,37,55))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd d MMMM yyyy HH:mm:ss",dc,7e,69,9b))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("calendario gregoriano",45,88,b6,ba))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstFourDayWeek",fa,56,48,9b))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("dd MMMM",60,27,05,da))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd d MMMM yyyy",44,a9,80,93))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("do",8b,57,00,00))->init(1,HX_("lu",89,5e,00,00))->init(2,HX_("ma",54,5f,00,00))->init(3,HX_("me",58,5f,00,00))->init(4,HX_("gi",22,5a,00,00))->init(5,HX_("ve",2f,67,00,00))->init(6,HX_("sa",8e,64,00,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("dom",82,42,4c,00))->init(1,HX_("lun",c5,59,52,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("mer",1a,0e,53,00))->init(4,HX_("gio",0d,84,4e,00))->init(5,HX_("ven",5f,e2,59,00))->init(6,HX_("sab",14,98,57,00)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("HH:mm",1a,83,9d,a4))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("HH:mm:ss",80,50,d2,03))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("domenica",bc,78,e7,64))->init(1,HX_("luned\xc3""\xac""",ed,38,f2,eb))->init(2,HX_("marted\xc3""\xac""",be,1b,56,be))->init(3,HX_("mercoled\xc3""\xac""",0e,02,2a,7a))->init(4,HX_("gioved\xc3""\xac""",f1,38,8e,a7))->init(5,HX_("venerd\xc3""\xac""",e1,9a,99,33))->init(6,HX_("sabato",88,ac,f9,15)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd/MM/yyyy",40,9b,42,af))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)2)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("Italia",0e,a3,f8,3a))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("it-IT",4d,0e,e2,c1))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("it-IT",4d,0e,e2,c1))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("it",eb,5b,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("ita",16,12,50,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1040)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ITA",f6,ad,37,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Italian",a0,09,96,5e)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		it = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestBigIntFormat","boot",0xa90033db,"thx.format.TestBigIntFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)0)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(",",2c,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("$",24,00,00,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("NaN",9b,84,3b,00))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("Infinity",08,d3,1a,b4))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(".",2e,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)0)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)0)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)0)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinity",35,48,8a,c8))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(",",2c,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(".",2e,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(",",2c,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(".",2e,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("English",10,8f,83,c6))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("United States",df,3b,55,64))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd, MMMM dd, yyyy h:mm:ss tt",b8,2b,cf,ac))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("Gregorian Calendar",78,a4,39,8d))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Sunday",70,80,82,d6))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("MMMM dd",e0,38,48,d4))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd, MMMM dd, yyyy",20,cf,04,b3))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("Su",c2,48,00,00))->init(1,HX_("Mo",82,43,00,00))->init(2,HX_("Tu",a1,49,00,00))->init(3,HX_("We",2e,4c,00,00))->init(4,HX_("Th",94,49,00,00))->init(5,HX_("Fr",6c,3d,00,00))->init(6,HX_("Sa",ae,48,00,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("AM",ec,38,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("PM",fd,45,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("Sun",6c,61,3f,00))->init(1,HX_("Mon",ac,ce,3a,00))->init(2,HX_("Tue",a4,23,40,00))->init(3,HX_("Wed",76,5c,42,00))->init(4,HX_("Thu",61,18,40,00))->init(5,HX_("Fri",7d,81,35,00))->init(6,HX_("Sat",06,50,3f,00)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("h:mm tt",2e,56,3d,20))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("h:mm:ss tt",b8,7e,f4,ab))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)0)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM, yyyy",f4,2a,01,54))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("Sunday",70,80,82,d6))->init(1,HX_("Monday",30,db,f6,fb))->init(2,HX_("Tuesday",6d,85,94,e0))->init(3,HX_("Wednesday",76,20,5e,ee))->init(4,HX_("Thursday",3a,c9,04,61))->init(5,HX_("Friday",ff,00,5d,e6))->init(6,HX_("Saturday",59,42,eb,57)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("M/d/yyyy",4d,85,79,32))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(",",2c,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("United States",df,3b,55,64))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("en-US",02,7f,50,70))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("en-US",02,7f,50,70))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("en",69,58,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("eng",de,03,4d,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1033)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ENU",cc,9f,34,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("English",10,8f,83,c6)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		us = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestBigIntFormat","boot",0xa90033db,"thx.format.TestBigIntFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)12)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(",",2c,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xb9""",59,ef,ab,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)2))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("nan",db,cc,53,00))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("infinity",e8,16,69,da))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(".",2e,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)1)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-infinity",15,8c,d8,ee))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(",",2c,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(".",2e,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)2))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(",",2c,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(".",2e,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)2))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("\xe0""\xa6""\x85""\xe0""\xa6""\xb8""\xe0""\xa6""\xae""\xe0""\xa7""\x80""\xe0""\xa7""\x9f""\xe0""\xa6""\xbe""",c4,68,50,d2))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("India",57,0e,42,51))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("yyyy,MMMM dd, dddd tt h:mm:ss",00,9a,90,99))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("\xe0""\xa6""\x87""\xe0""\xa6""\x82""\xe0""\xa7""\xb0""\xe0""\xa6""\xbe""\xe0""\xa6""\x9c""\xe0""\xa7""\x80"" \xe0""\xa6""\x95""\xe0""\xa7""\x87""\xe0""\xa6""\xb2""\xe0""\xa7""\x87""\xe0""\xa6""\xa3""\xe0""\xa7""\x8d""\xe0""\xa6""\xa1""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",ab,4f,b9,90))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstFourDayWeek",fa,56,48,9b))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("\xe0""\xa6""\x9c""\xe0""\xa6""\xbe""\xe0""\xa6""\xa8""\xe0""\xa7""\x81""\xe0""\xa7""\xb1""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""\xe0""\xa7""\x80""",b8,3b,0c,8b))->init(1,HX_("\xe0""\xa6""\xab""\xe0""\xa7""\x87""\xe0""\xa6""\xac""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa7""\x81""\xe0""\xa7""\xb1""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""\xe0""\xa7""\x80""",a9,8d,33,d0))->init(2,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\xbe""\xe0""\xa6""\xb0""\xe0""\xa7""\x8d""\xe0""\xa6""\x9a""",88,6d,d0,26))->init(3,HX_("\xe0""\xa6""\x8f""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa6""\xbf""\xe0""\xa6""\xb2""",d2,2f,84,95))->init(4,HX_("\xe0""\xa6""\xae""\xe0""\xa7""\x87""",b8,c9,22,98))->init(5,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xa8""",1e,02,d1,0e))->init(6,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xb2""\xe0""\xa6""\xbe""\xe0""\xa6""\x87""",f1,42,8f,ce))->init(7,HX_("\xe0""\xa6""\x86""\xe0""\xa6""\x97""\xe0""\xa6""\xb7""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""",b3,cd,7a,18))->init(8,HX_("\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",f7,0d,8e,2c))->init(9,HX_("\xe0""\xa6""\x85""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x8b""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",e5,74,f3,c5))->init(10,HX_("\xe0""\xa6""\xa8""\xe0""\xa6""\xac""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",1e,ee,15,51))->init(11,HX_("\xe0""\xa6""\xa1""\xe0""\xa6""\xbf""\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",cc,e9,4e,8f))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("\xe0""\xa6""\x9c""\xe0""\xa6""\xbe""\xe0""\xa6""\xa8""\xe0""\xa7""\x81""",5a,09,26,60))->init(1,HX_("\xe0""\xa6""\xab""\xe0""\xa7""\x87""\xe0""\xa6""\xac""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa7""\x81""",cb,f5,23,e0))->init(2,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\xbe""\xe0""\xa6""\xb0""\xe0""\xa7""\x8d""\xe0""\xa6""\x9a""",88,6d,d0,26))->init(3,HX_("\xe0""\xa6""\x8f""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa6""\xbf""\xe0""\xa6""\xb2""",d2,2f,84,95))->init(4,HX_("\xe0""\xa6""\xae""\xe0""\xa7""\x87""",b8,c9,22,98))->init(5,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xa8""",1e,02,d1,0e))->init(6,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xb2""\xe0""\xa6""\xbe""\xe0""\xa6""\x87""",f1,42,8f,ce))->init(7,HX_("\xe0""\xa6""\x86""\xe0""\xa6""\x97""\xe0""\xa6""\xb7""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""",b3,cd,7a,18))->init(8,HX_("\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x87""",75,aa,1f,1a))->init(9,HX_("\xe0""\xa6""\x85""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x8b""",61,9a,51,31))->init(10,HX_("\xe0""\xa6""\xa8""\xe0""\xa6""\xac""\xe0""\xa7""\x87""",1c,2c,d8,8a))->init(11,HX_("\xe0""\xa6""\xa1""\xe0""\xa6""\xbf""\xe0""\xa6""\x9a""\xe0""\xa7""\x87""",ca,da,ee,41))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("dd MMMM",60,27,05,da))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("yyyy,MMMM dd, dddd",68,90,ec,32))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("\xe0""\xa6""\xb8""\xe0""\xa7""\x8b""",f2,eb,be,9e))->init(1,HX_("\xe0""\xa6""\xae""",28,8a,aa,00))->init(2,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x81""",74,5c,d0,96))->init(3,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x83""",76,5c,d0,96))->init(4,HX_("\xe0""\xa6""\xb6""\xe0""\xa7""\x81""",aa,7e,6c,9d))->init(5,HX_("\xe0""\xa6""\xb6""",30,8a,aa,00))->init(6,HX_("\xe0""\xa6""\xb0""",2a,8a,aa,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("-",2d,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("\xe0""\xa7""\xb0""\xe0""\xa6""\xbe""\xe0""\xa6""\xa4""\xe0""\xa6""\xbf""\xe0""\xa6""\xaa""\xe0""\xa7""\x81""",a0,f1,69,60))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("\xe0""\xa6""\x86""\xe0""\xa6""\xac""\xe0""\xa7""\x87""\xe0""\xa6""\xb2""\xe0""\xa6""\xbf""",87,21,d1,d0))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("\xe0""\xa6""\xb8""\xe0""\xa7""\x8b""\xe0""\xa6""\xae"".",f8,25,97,eb))->init(1,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\x99""\xe0""\xa7""\x8d""\xe0""\xa6""\x97""\xe0""\xa6""\xb2"".",98,3d,1c,8c))->init(2,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x81""\xe0""\xa6""\xa7"".",61,f9,37,7b))->init(3,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x83""\xe0""\xa6""\xb9"".",11,32,05,a2))->init(4,HX_("\xe0""\xa6""\xb6""\xe0""\xa7""\x81""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0"".",a5,ed,67,69))->init(5,HX_("\xe0""\xa6""\xb6""\xe0""\xa6""\xa8""\xe0""\xa6""\xbf"".",c7,c6,75,c5))->init(6,HX_("\xe0""\xa7""\xb0""\xe0""\xa6""\xac""\xe0""\xa6""\xbf"".",12,d5,d2,8e)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("tt h:mm",52,cd,dc,ea))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("tt h:mm:ss",48,39,c1,fd))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM,yy",4c,66,51,d4))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("\xe0""\xa6""\xb8""\xe0""\xa7""\x8b""\xe0""\xa6""\xae""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",41,de,54,6e))->init(1,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\x99""\xe0""\xa7""\x8d""\xe0""\xa6""\x97""\xe0""\xa6""\xb2""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",e1,95,2a,23))->init(2,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x81""\xe0""\xa6""\xa7""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",aa,c2,84,1c))->init(3,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x83""\xe0""\xa6""\xb9""\xe0""\xa6""\xb8""\xe0""\xa7""\x8d""\xe0""\xa6""\xaa""\xe0""\xa6""\xa4""\xe0""\xa6""\xbf""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",09,26,8c,b3))->init(4,HX_("\xe0""\xa6""\xb6""\xe0""\xa7""\x81""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",ee,9a,e8,71))->init(5,HX_("\xe0""\xa6""\xb6""\xe0""\xa6""\xa8""\xe0""\xa6""\xbf""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",10,66,07,c9))->init(6,HX_("\xe0""\xa7""\xb0""\xe0""\xa6""\xac""\xe0""\xa6""\xbf""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",5b,37,dc,b7)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("\xe0""\xa6""\x9c""\xe0""\xa6""\xbe""\xe0""\xa6""\xa8""\xe0""\xa7""\x81""",5a,09,26,60))->init(1,HX_("\xe0""\xa6""\xab""\xe0""\xa7""\x87""\xe0""\xa6""\xac""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa7""\x81""",cb,f5,23,e0))->init(2,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\xbe""\xe0""\xa6""\xb0""\xe0""\xa7""\x8d""\xe0""\xa6""\x9a""",88,6d,d0,26))->init(3,HX_("\xe0""\xa6""\x8f""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa6""\xbf""\xe0""\xa6""\xb2""",d2,2f,84,95))->init(4,HX_("\xe0""\xa6""\xae""\xe0""\xa7""\x87""",b8,c9,22,98))->init(5,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xa8""",1e,02,d1,0e))->init(6,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xb2""\xe0""\xa6""\xbe""\xe0""\xa6""\x87""",f1,42,8f,ce))->init(7,HX_("\xe0""\xa6""\x86""\xe0""\xa6""\x97""\xe0""\xa6""\xb7""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""",b3,cd,7a,18))->init(8,HX_("\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x87""",75,aa,1f,1a))->init(9,HX_("\xe0""\xa6""\x85""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x8b""",61,9a,51,31))->init(10,HX_("\xe0""\xa6""\xa8""\xe0""\xa6""\xac""\xe0""\xa7""\x87""",1c,2c,d8,8a))->init(11,HX_("\xe0""\xa6""\xa1""\xe0""\xa6""\xbf""\xe0""\xa6""\x9a""\xe0""\xa7""\x87""",ca,da,ee,41))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("\xe0""\xa6""\x9c""\xe0""\xa6""\xbe""\xe0""\xa6""\xa8""\xe0""\xa7""\x81""\xe0""\xa7""\xb1""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""\xe0""\xa7""\x80""",b8,3b,0c,8b))->init(1,HX_("\xe0""\xa6""\xab""\xe0""\xa7""\x87""\xe0""\xa6""\xac""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa7""\x81""\xe0""\xa7""\xb1""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""\xe0""\xa7""\x80""",a9,8d,33,d0))->init(2,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\xbe""\xe0""\xa6""\xb0""\xe0""\xa7""\x8d""\xe0""\xa6""\x9a""",88,6d,d0,26))->init(3,HX_("\xe0""\xa6""\x8f""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa6""\xbf""\xe0""\xa6""\xb2""",d2,2f,84,95))->init(4,HX_("\xe0""\xa6""\xae""\xe0""\xa7""\x87""",b8,c9,22,98))->init(5,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xa8""",1e,02,d1,0e))->init(6,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xb2""\xe0""\xa6""\xbe""\xe0""\xa6""\x87""",f1,42,8f,ce))->init(7,HX_("\xe0""\xa6""\x86""\xe0""\xa6""\x97""\xe0""\xa6""\xb7""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""",b3,cd,7a,18))->init(8,HX_("\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",f7,0d,8e,2c))->init(9,HX_("\xe0""\xa6""\x85""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x8b""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",e5,74,f3,c5))->init(10,HX_("\xe0""\xa6""\xa8""\xe0""\xa6""\xac""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",1e,ee,15,51))->init(11,HX_("\xe0""\xa6""\xa1""\xe0""\xa6""\xbf""\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",cc,e9,4e,8f))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd-MM-yyyy",00,8e,10,16))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)2)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(",",2c,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("\xe0""\xa6""\xad""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""\xe0""\xa6""\xa4""",e6,47,c8,bd))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("as-IN",a0,33,04,26))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("as-IN",a0,33,04,26))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("as",f2,54,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("asm",3b,ff,49,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1101)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ASM",1b,9b,31,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Assamese",0a,60,35,51)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		asIn = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestBigIntFormat","boot",0xa90033db,"thx.format.TestBigIntFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)8)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xbd""",5d,ef,ab,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)0))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("NaN",9b,84,3b,00))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("\xd0""\xb1""\xd0""\xb5""\xd1""\x81""\xd0""\xba""\xd0""\xbe""\xd0""\xbd""\xd0""\xb5""\xd1""\x87""\xd0""\xbd""\xd0""\xbe""\xd1""\x81""\xd1""\x82""\xd1""\x8c""",ed,3e,05,12))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)3)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-\xd0""\xb1""\xd0""\xb5""\xd1""\x81""\xd0""\xba""\xd0""\xbe""\xd0""\xbd""\xd0""\xb5""\xd1""\x87""\xd0""\xbd""\xd0""\xbe""\xd1""\x81""\xd1""\x82""\xd1""\x8c""",5a,83,c2,cb))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)0))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)0))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("\xd0""\x91""\xd0""\xb0""\xd1""\x88""\xd2""\xa1""\xd0""\xbe""\xd1""\x80""\xd1""\x82""",55,47,9f,ed))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Russia",db,9d,80,73))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("d MMMM yyyy '\xd0""\xb9""' H:mm:ss",3b,8e,42,7f))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("\xd0""\x93""\xd1""\x80""\xd0""\xb8""\xd0""\xb3""\xd0""\xbe""\xd1""\x80""\xd0""\xb8""\xd0""\xb9"" \xd0""\xba""\xd0""\xb0""\xd0""\xbb""\xd0""\xb5""\xd0""\xbd""\xd0""\xb4""\xd0""\xb0""\xd1""\x80""\xd1""\x8b""",c9,d4,d5,63))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd2""\x93""\xd0""\xb8""\xd0""\xbd""\xd1""\x83""\xd0""\xb0""\xd1""\x80""",57,d2,30,7d))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""\xd1""\x80""\xd0""\xb0""\xd0""\xbb""\xd1""\x8c""",0f,c4,9f,df))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""\xd1""\x82""",ac,83,08,0e))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""\xd0""\xb5""\xd0""\xbb""\xd1""\x8c""",49,20,c9,0b))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd0""\xb9""",b5,bf,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""\xd1""\x8c""",cd,5e,f3,39))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""\xd1""\x8c""",4b,da,f1,39))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""\xd1""\x83""\xd1""\x81""\xd1""\x82""",98,90,ea,01))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",1c,a6,86,65))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",52,bb,92,a5))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",84,3e,c7,e6))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""\xd0""\xb0""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",1e,19,4c,ef))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd2""\x93""\xd0""\xb8""\xd0""\xbd""",d6,c1,e1,24))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""",1a,6b,81,1b))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""",5b,c0,92,f3))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""",1e,2c,cf,0a))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd0""\xb9""",b5,bf,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""",b2,d7,87,a6))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""",b0,d7,87,a6))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""",25,4e,c5,0a))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""",a2,ad,4d,61))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""",e9,7f,67,1a))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""",79,f4,03,87))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""",f3,e6,61,58))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("MMMM dd",e0,38,48,d4))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("d MMMM yyyy '\xd0""\xb9""'",93,c7,13,d7))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("\xd0""\x99""\xd1""\x88""",a0,30,f1,89))->init(1,HX_("\xd0""\x94""\xd1""\x88""",5b,65,ed,89))->init(2,HX_("\xd0""\xa8""\xd1""\x88""",6f,92,fc,89))->init(3,HX_("\xd0""\xa8""\xd1""\x80""",67,92,fc,89))->init(4,HX_("\xd0""\x9a""\xd1""\x81""",da,f2,f1,89))->init(5,HX_("\xd0""\x99""\xd0""\xbc""",f5,2f,f1,89))->init(6,HX_("\xd0""\xa8""\xd0""\xb1""",b9,91,fc,89)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_(".",2e,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("\xd0""\x99""\xd1""\x88""",a0,30,f1,89))->init(1,HX_("\xd0""\x94""\xd1""\x88""",5b,65,ed,89))->init(2,HX_("\xd0""\xa8""\xd1""\x88""",6f,92,fc,89))->init(3,HX_("\xd0""\xa8""\xd1""\x80""",67,92,fc,89))->init(4,HX_("\xd0""\x9a""\xd1""\x81""",da,f2,f1,89))->init(5,HX_("\xd0""\x99""\xd0""\xbc""",f5,2f,f1,89))->init(6,HX_("\xd0""\xa8""\xd0""\xb1""",b9,91,fc,89)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("H:mm",d2,be,c3,2f))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("H:mm:ss",c8,37,a2,ed))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("\xd0""\x99""\xd3""\x99""\xd0""\xba""\xd1""\x88""\xd3""\x99""\xd0""\xbc""\xd0""\xb1""\xd0""\xb5""",c8,cb,14,13))->init(1,HX_("\xd0""\x94""\xd2""\xaf""\xd1""\x88""\xd3""\x99""\xd0""\xbc""\xd0""\xb1""\xd0""\xb5""",10,ba,b6,86))->init(2,HX_("\xd0""\xa8""\xd0""\xb8""\xd1""\x88""\xd3""\x99""\xd0""\xbc""\xd0""\xb1""\xd0""\xb5""",2f,72,13,fe))->init(3,HX_("\xd0""\xa8""\xd0""\xb0""\xd1""\x80""\xd1""\x88""\xd0""\xb0""\xd0""\xbc""\xd0""\xb1""\xd1""\x8b""",25,eb,47,ea))->init(4,HX_("\xd0""\x9a""\xd0""\xb5""\xd1""\x81""\xd0""\xb0""\xd2""\x99""\xd0""\xbd""\xd0""\xb0""",73,4f,e7,9c))->init(5,HX_("\xd0""\x99""\xd0""\xbe""\xd0""\xbc""\xd0""\xb0""",43,b6,b9,6d))->init(6,HX_("\xd0""\xa8""\xd3""\x99""\xd0""\xbc""\xd0""\xb1""\xd0""\xb5""",b0,d8,69,9d)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd2""\x93""\xd0""\xb8""\xd0""\xbd""",d6,c1,e1,24))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""",1a,6b,81,1b))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""",5b,c0,92,f3))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""",1e,2c,cf,0a))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd0""\xb9""",b5,bf,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""",b2,d7,87,a6))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""",b0,d7,87,a6))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""",25,4e,c5,0a))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""",a2,ad,4d,61))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""",e9,7f,67,1a))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""",79,f4,03,87))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""",f3,e6,61,58))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd2""\x93""\xd0""\xb8""\xd0""\xbd""\xd1""\x83""\xd0""\xb0""\xd1""\x80""",57,d2,30,7d))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""\xd1""\x80""\xd0""\xb0""\xd0""\xbb""\xd1""\x8c""",0f,c4,9f,df))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""\xd1""\x82""",ac,83,08,0e))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""\xd0""\xb5""\xd0""\xbb""\xd1""\x8c""",49,20,c9,0b))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd0""\xb9""",b5,bf,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""\xd1""\x8c""",cd,5e,f3,39))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""\xd1""\x8c""",4b,da,f1,39))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""\xd1""\x83""\xd1""\x81""\xd1""\x82""",98,90,ea,01))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",1c,a6,86,65))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",52,bb,92,a5))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",84,3e,c7,e6))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""\xd0""\xb0""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",1e,19,4c,ef))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd.MM.yy",c0,fa,64,83))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("\xd0""\xa0""\xd0""\xbe""\xd1""\x81""\xd1""\x81""\xd0""\xb8""\xd1""\x8f""",64,65,09,ca))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("ba-RU",d1,f8,84,ad))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("ba-RU",d1,f8,84,ad))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("ba",bf,55,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("bak",cc,b1,4a,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1133)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("BAS",b4,4d,32,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Bashkir",60,11,4b,fd)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		baRu = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
}

} // end namespace thx
} // end namespace format
