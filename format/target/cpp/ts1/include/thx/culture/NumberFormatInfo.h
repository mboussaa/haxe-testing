// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#define INCLUDED_thx_culture_NumberFormatInfo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,culture,NumberFormatInfo)

namespace thx{
namespace culture{


class HXCPP_CLASS_ATTRIBUTES NumberFormatInfo_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef NumberFormatInfo_obj OBJ_;
		NumberFormatInfo_obj();

	public:
		void __construct(Int decimalDigitsCurrency,Int decimalDigitsNumber,Int decimalDigitsPercent,::Array< Int > groupSizesCurrency,::Array< Int > groupSizesNumber,::Array< Int > groupSizesPercent,Int patternNegativeCurrency,Int patternNegativeNumber,Int patternNegativePercent,Int patternPositiveCurrency,Int patternPositivePercent,::String separatorDecimalCurrency,::String separatorDecimalNumber,::String separatorDecimalPercent,::String separatorGroupCurrency,::String separatorGroupNumber,::String separatorGroupPercent,::String signNegative,::String signPositive,::String symbolCurrency,::String symbolNaN,::String symbolNegativeInfinity,::String symbolPercent,::String symbolPermille,::String symbolPositiveInfinity);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="thx.culture.NumberFormatInfo")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"thx.culture.NumberFormatInfo"); }
		static hx::ObjectPtr< NumberFormatInfo_obj > __new(Int decimalDigitsCurrency,Int decimalDigitsNumber,Int decimalDigitsPercent,::Array< Int > groupSizesCurrency,::Array< Int > groupSizesNumber,::Array< Int > groupSizesPercent,Int patternNegativeCurrency,Int patternNegativeNumber,Int patternNegativePercent,Int patternPositiveCurrency,Int patternPositivePercent,::String separatorDecimalCurrency,::String separatorDecimalNumber,::String separatorDecimalPercent,::String separatorGroupCurrency,::String separatorGroupNumber,::String separatorGroupPercent,::String signNegative,::String signPositive,::String symbolCurrency,::String symbolNaN,::String symbolNegativeInfinity,::String symbolPercent,::String symbolPermille,::String symbolPositiveInfinity);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NumberFormatInfo_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("NumberFormatInfo","\x8e","\x77","\x8c","\xae"); }

		static void __boot();
		static  ::thx::culture::NumberFormatInfo invariant;
		static  ::thx::culture::NumberFormatInfo fromObject( ::Dynamic o);
		static ::Dynamic fromObject_dyn();

		Int decimalDigitsCurrency;
		Int decimalDigitsNumber;
		Int decimalDigitsPercent;
		::Array< Int > groupSizesCurrency;
		::Array< Int > groupSizesNumber;
		::Array< Int > groupSizesPercent;
		Int patternNegativeCurrency;
		Int patternNegativeNumber;
		Int patternNegativePercent;
		Int patternPositiveCurrency;
		Int patternPositivePercent;
		::String separatorDecimalCurrency;
		::String separatorDecimalNumber;
		::String separatorDecimalPercent;
		::String separatorGroupCurrency;
		::String separatorGroupNumber;
		::String separatorGroupPercent;
		::String signNegative;
		::String signPositive;
		::String symbolCurrency;
		::String symbolNaN;
		::String symbolNegativeInfinity;
		::String symbolPercent;
		::String symbolPermille;
		::String symbolPositiveInfinity;
		 ::Dynamic toObject();
		::Dynamic toObject_dyn();

};

} // end namespace thx
} // end namespace culture

#endif /* INCLUDED_thx_culture_NumberFormatInfo */ 
