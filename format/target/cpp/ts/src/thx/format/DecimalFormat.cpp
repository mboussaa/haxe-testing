// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Strings
#include <thx/Strings.h>
#endif
#ifndef INCLUDED_thx__Decimal_Decimal_Impl_
#include <thx/_Decimal/Decimal_Impl_.h>
#endif
#ifndef INCLUDED_thx_bigint_BigIntImpl
#include <thx/bigint/BigIntImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_DecimalImpl
#include <thx/bigint/DecimalImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Decimals
#include <thx/bigint/Decimals.h>
#endif
#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_Pattern
#include <thx/culture/Pattern.h>
#endif
#ifndef INCLUDED_thx_format_BigIntFormat
#include <thx/format/BigIntFormat.h>
#endif
#ifndef INCLUDED_thx_format_DecimalFormat
#include <thx/format/DecimalFormat.h>
#endif
#ifndef INCLUDED_thx_format_Format
#include <thx/format/Format.h>
#endif
#ifndef INCLUDED_thx_format__DecimalFormat_CustomFormat
#include <thx/format/_DecimalFormat/CustomFormat.h>
#endif

namespace thx{
namespace format{

void DecimalFormat_obj::__construct() { }

Dynamic DecimalFormat_obj::__CreateEmpty() { return new DecimalFormat_obj; }

hx::ObjectPtr< DecimalFormat_obj > DecimalFormat_obj::__new()
{
	hx::ObjectPtr< DecimalFormat_obj > _hx_result = new DecimalFormat_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DecimalFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DecimalFormat_obj > _hx_result = new DecimalFormat_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String DecimalFormat_obj::currency( ::thx::bigint::DecimalImpl decimal, ::Dynamic precision,::String symbol, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","currency",0x3afa5ae4,"thx.format.DecimalFormat.currency","thx/format/DecimalFormat.hx",19,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(precision,"precision")
            	HX_STACK_ARG(symbol,"symbol")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  20)		decimal = decimal->trim(null());
HXLINE(  21)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::DecimalFormat_obj::numberFormat(culture);
HXDLIN(  21)		HX_VAR( ::String,pattern);
HXLINE(  22)		Bool _hx_tmp = decimal->isNegative();
HXDLIN(  22)		if (_hx_tmp) {
HXLINE(  21)			pattern = ::thx::culture::Pattern_obj::currencyNegatives->__get(nf->patternNegativeCurrency);
            		}
            		else {
HXLINE(  21)			pattern = ::thx::culture::Pattern_obj::currencyPositives->__get(nf->patternPositiveCurrency);
            		}
HXLINE( 139)		HX_VAR(  ::Dynamic,t);
HXLINE(  23)		if (hx::IsNull( precision )) {
HXLINE( 139)			t = null();
            		}
            		else {
HXLINE( 139)			t = precision;
            		}
HXDLIN( 139)		Int _hx_tmp1;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp1 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp1 = nf->decimalDigitsCurrency;
            		}
HXLINE(  21)		HX_VARI( ::String,formatted) = ::thx::format::DecimalFormat_obj::value(decimal,_hx_tmp1,nf->groupSizesCurrency,nf->separatorGroupCurrency,nf->separatorDecimalCurrency);
HXLINE(  24)		::String _hx_tmp2 = ::StringTools_obj::replace(pattern,HX_("n",6e,00,00,00),formatted);
HXLINE( 139)		HX_VAR_NAME( ::String,t1,"t");
HXLINE(  24)		if (hx::IsNull( symbol )) {
HXLINE( 139)			t1 = null();
            		}
            		else {
HXLINE( 139)			t1 = symbol;
            		}
HXDLIN( 139)		::String _hx_tmp3;
HXDLIN( 139)		if (hx::IsNotNull( t1 )) {
HXLINE( 139)			_hx_tmp3 = t1;
            		}
            		else {
HXLINE( 139)			_hx_tmp3 = nf->symbolCurrency;
            		}
HXLINE(  24)		return ::StringTools_obj::replace(_hx_tmp2,HX_("$",24,00,00,00),_hx_tmp3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(DecimalFormat_obj,currency,return )

::String DecimalFormat_obj::customFormat( ::thx::bigint::DecimalImpl decimal,::String pattern, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","customFormat",0x016dfedb,"thx.format.DecimalFormat.customFormat","thx/format/DecimalFormat.hx",44,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  45)		decimal = decimal->trim(null());
HXLINE(  46)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::DecimalFormat_obj::numberFormat(culture);
HXLINE(  48)		HX_VARI( Bool,isCurrency) = ::thx::format::DecimalFormat_obj::hasSymbols(pattern,HX_("$",24,00,00,00));
HXDLIN(  48)		HX_VAR( Bool,isPercent);
HXLINE(  49)		if (!(isCurrency)) {
HXLINE(  48)			isPercent = ::thx::format::DecimalFormat_obj::hasSymbols(pattern,HX_("%\xe2""\x80""\xb0""",8d,d2,20,19));
            		}
            		else {
HXLINE(  48)			isPercent = false;
            		}
HXDLIN(  48)		HX_VARI( ::Array< ::String >,groups) = ::thx::format::DecimalFormat_obj::splitPattern(pattern,HX_(";",3b,00,00,00));
HXLINE(  51)		if ((groups->length > (int)3)) {
HXLINE(  51)			HX_STACK_DO_THROW(((HX_("invalid number of sections in \"",de,43,9e,5c) + pattern) + HX_("\"",22,00,00,00)));
            		}
HXLINE(  52)		Bool _hx_tmp = decimal->isNegative();
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  53)			if (hx::IsNotNull( groups->__get((int)1) )) {
HXLINE(  54)				 ::thx::bigint::DecimalImpl _hx_tmp1 = decimal->negate();
HXLINE(  52)				return ::thx::format::DecimalFormat_obj::customFormatDecimal(_hx_tmp1,groups->__get((int)1),nf,isCurrency,isPercent);
            			}
            			else {
HXLINE(  56)				 ::thx::bigint::DecimalImpl _hx_tmp2 = decimal->negate();
HXLINE(  52)				return ::thx::format::DecimalFormat_obj::customFormatDecimal(_hx_tmp2,(HX_("-",2d,00,00,00) + groups->__get((int)0)),nf,isCurrency,isPercent);
            			}
            		}
            		else {
HXLINE(  58)			Bool _hx_tmp3 = decimal->isZero();
HXDLIN(  58)			if (_hx_tmp3) {
HXLINE(  59)				::String _hx_tmp4;
HXDLIN(  59)				if (hx::IsNull( groups )) {
HXLINE(  59)					_hx_tmp4 = null();
            				}
            				else {
HXLINE(  59)					HX_VARI( ::String,_1) = groups->__get((int)2);
HXDLIN(  59)					if (hx::IsNull( _1 )) {
HXLINE(  59)						_hx_tmp4 = null();
            					}
            					else {
HXLINE(  59)						_hx_tmp4 = _1;
            					}
            				}
HXLINE( 139)				HX_VARI( ::String,t) = _hx_tmp4;
HXDLIN( 139)				::String _hx_tmp5;
HXDLIN( 139)				if (hx::IsNotNull( t )) {
HXLINE( 139)					_hx_tmp5 = t;
            				}
            				else {
HXLINE( 139)					_hx_tmp5 = groups->__get((int)0);
            				}
HXLINE(  52)				return ::thx::format::DecimalFormat_obj::customFormatDecimal(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0),_hx_tmp5,nf,isCurrency,isPercent);
            			}
            			else {
HXLINE(  52)				return ::thx::format::DecimalFormat_obj::customFormatDecimal(decimal,groups->__get((int)0),nf,isCurrency,isPercent);
            			}
            		}
HXDLIN(  52)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,customFormat,return )

::String DecimalFormat_obj::decimal( ::thx::bigint::DecimalImpl dec, ::Dynamic __o_significantDigits, ::thx::culture::Culture culture){
 ::Dynamic significantDigits = __o_significantDigits.Default(1);
            	HX_STACK_FRAME("thx.format.DecimalFormat","decimal",0x524e345e,"thx.format.DecimalFormat.decimal","thx/format/DecimalFormat.hx",68,0x3b00a083)
            	HX_STACK_ARG(dec,"dec")
            	HX_STACK_ARG(significantDigits,"significantDigits")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  69)		dec = dec->trim(null());
HXLINE(  70)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::DecimalFormat_obj::numberFormat(culture);
HXLINE(  71)		HX_VARI( ::String,formatted) = ::thx::format::DecimalFormat_obj::value(dec,(int)0,::Array_obj< Int >::__new(1)->init(0,(int)0),HX_("",00,00,00,00),HX_("",00,00,00,00));
HXLINE(  72)		::String _hx_tmp;
HXDLIN(  72)		Bool _hx_tmp1 = dec->isNegative();
HXDLIN(  72)		if (_hx_tmp1) {
HXLINE(  72)			_hx_tmp = nf->signNegative;
            		}
            		else {
HXLINE(  72)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN(  72)		return (_hx_tmp + ::StringTools_obj::lpad(formatted,HX_("0",30,00,00,00),significantDigits));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,decimal,return )

::String DecimalFormat_obj::exponential( ::thx::bigint::DecimalImpl decimal, ::Dynamic __o_precision, ::Dynamic __o_digits,::String __o_symbol, ::thx::culture::Culture culture){
 ::Dynamic precision = __o_precision.Default(6);
 ::Dynamic digits = __o_digits.Default(3);
::String symbol = __o_symbol.Default(HX_HCSTRING("e","\x65","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx.format.DecimalFormat","exponential",0x91c5e0d2,"thx.format.DecimalFormat.exponential","thx/format/DecimalFormat.hx",78,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(precision,"precision")
            	HX_STACK_ARG(digits,"digits")
            	HX_STACK_ARG(symbol,"symbol")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  79)		decimal = decimal->trim(null());
HXLINE(  80)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::DecimalFormat_obj::numberFormat(culture);
HXLINE(  81)		HX_VARI(  ::Dynamic,info) = ::thx::format::DecimalFormat_obj::exponentialInfo(decimal);
HXLINE(  82)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::number( ::Dynamic(info->__Field(HX_("f",66,00,00,00),hx::paccDynamic)),precision,culture);
HXDLIN(  82)		::String _hx_tmp1 = (_hx_tmp + symbol);
HXLINE(  84)		::String _hx_tmp2;
HXDLIN(  84)		if ((( (Int)(info->__Field(HX_("e",65,00,00,00),hx::paccDynamic)) ) < (int)0)) {
HXLINE(  84)			_hx_tmp2 = nf->signNegative;
            		}
            		else {
HXLINE(  84)			_hx_tmp2 = nf->signPositive;
            		}
HXLINE(  82)		::String _hx_tmp3 = (_hx_tmp1 + _hx_tmp2);
HXLINE(  85)		HX_VARI( Int,v) = ( (Int)(info->__Field(HX_("e",65,00,00,00),hx::paccDynamic)) );
HXDLIN(  85)		Int _hx_tmp4;
HXDLIN(  85)		if ((v < (int)0)) {
HXLINE(  85)			_hx_tmp4 = -(v);
            		}
            		else {
HXLINE(  85)			_hx_tmp4 = v;
            		}
HXLINE(  82)		return (_hx_tmp3 + ::StringTools_obj::lpad((HX_("",00,00,00,00) + _hx_tmp4),HX_("0",30,00,00,00),digits));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(DecimalFormat_obj,exponential,return )

::String DecimalFormat_obj::fixed( ::thx::bigint::DecimalImpl decimal, ::Dynamic precision, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","fixed",0x616cfc01,"thx.format.DecimalFormat.fixed","thx/format/DecimalFormat.hx",91,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(precision,"precision")
            	HX_STACK_ARG(culture,"culture")
HXLINE(  92)		decimal = decimal->trim(null());
HXLINE(  93)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::DecimalFormat_obj::numberFormat(culture);
HXDLIN(  93)		HX_VAR( ::String,pattern);
HXLINE(  94)		Bool _hx_tmp = decimal->isNegative();
HXDLIN(  94)		if (_hx_tmp) {
HXLINE(  93)			pattern = ::thx::culture::Pattern_obj::numberNegatives->__get(nf->patternNegativeNumber);
            		}
            		else {
HXLINE(  93)			pattern = HX_("n",6e,00,00,00);
            		}
HXLINE( 139)		HX_VAR(  ::Dynamic,t);
HXLINE(  95)		if (hx::IsNull( precision )) {
HXLINE( 139)			t = null();
            		}
            		else {
HXLINE( 139)			t = precision;
            		}
HXDLIN( 139)		Int _hx_tmp1;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp1 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp1 = nf->decimalDigitsNumber;
            		}
HXLINE(  93)		HX_VARI( ::String,formatted) = ::thx::format::DecimalFormat_obj::value(decimal,_hx_tmp1,::Array_obj< Int >::__new(1)->init(0,(int)0),HX_("",00,00,00,00),nf->separatorDecimalNumber);
HXLINE(  96)		return ::StringTools_obj::replace(pattern,HX_("n",6e,00,00,00),formatted);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,fixed,return )

::String DecimalFormat_obj::format( ::thx::bigint::DecimalImpl decimal,::String pattern, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","format",0x4e65c80a,"thx.format.DecimalFormat.format","thx/format/DecimalFormat.hx",125,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 126)		HX_VARI( ::String,specifier) = pattern.substring((int)0,(int)1);
HXLINE( 127)		::String _hx_tmp = pattern.substring((int)1,null());
HXLINE( 126)		HX_VARI(  ::Dynamic,param) = ::thx::format::DecimalFormat_obj::paramOrNull(_hx_tmp);
HXLINE( 128)		::String _hx_switch_0 = specifier;
            		if (  (_hx_switch_0==HX_("%",25,00,00,00)) ){
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::printf(decimal,pattern,culture);
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("C",43,00,00,00)) ||  (_hx_switch_0==HX_("c",63,00,00,00)) ){
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::currency(decimal,param,null(),culture);
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("E",45,00,00,00)) ){
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::exponential(decimal,param,null(),null(),culture);
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("G",47,00,00,00)) ){
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::general(decimal,param,culture);
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("P",50,00,00,00)) ||  (_hx_switch_0==HX_("p",70,00,00,00)) ){
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::percent(decimal,param,culture);
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("X",58,00,00,00)) ){
HXLINE( 150)			::Dynamic _hx_tmp1 = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal);
HXLINE( 128)			return ::thx::format::BigIntFormat_obj::hex(_hx_tmp1,param,culture).toUpperCase();
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("D",44,00,00,00)) ||  (_hx_switch_0==HX_("d",64,00,00,00)) ){
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::decimal(decimal,param,culture);
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("e",65,00,00,00)) ){
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::exponential(decimal,param,null(),null(),culture).toLowerCase();
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("F",46,00,00,00)) ||  (_hx_switch_0==HX_("f",66,00,00,00)) ){
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::fixed(decimal,param,culture);
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("g",67,00,00,00)) ){
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::general(decimal,param,culture).toLowerCase();
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("N",4e,00,00,00)) ||  (_hx_switch_0==HX_("n",6e,00,00,00)) ){
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::number(decimal,param,culture);
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("R",52,00,00,00)) ||  (_hx_switch_0==HX_("r",72,00,00,00)) ){
HXLINE( 128)			return decimal->toString();
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("x",78,00,00,00)) ){
HXLINE( 152)			::Dynamic _hx_tmp2 = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal);
HXLINE( 128)			return ::thx::format::BigIntFormat_obj::hex(_hx_tmp2,param,culture);
HXDLIN( 128)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE( 128)			return ::thx::format::DecimalFormat_obj::customFormat(decimal,pattern,culture);
            		}
            		_hx_goto_0:;
HXDLIN( 128)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,format,return )

::String DecimalFormat_obj::general( ::thx::bigint::DecimalImpl decimal, ::Dynamic significantDigits, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","general",0x21d5eaf5,"thx.format.DecimalFormat.general","thx/format/DecimalFormat.hx",163,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(significantDigits,"significantDigits")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 164)		decimal = decimal->trim(null());
HXLINE( 165)		HX_VARI( ::String,e) = ::thx::format::DecimalFormat_obj::exponential(decimal,significantDigits,null(),null(),culture);
HXDLIN( 165)		HX_VARI( ::String,f) = ::thx::format::DecimalFormat_obj::fixed(decimal,significantDigits,culture);
HXLINE( 167)		if ((e.length < f.length)) {
HXLINE( 167)			return e;
            		}
            		else {
HXLINE( 167)			return f;
            		}
HXDLIN( 167)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,general,return )

::String DecimalFormat_obj::integer( ::thx::bigint::DecimalImpl decimal, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","integer",0x82963d8b,"thx.format.DecimalFormat.integer","thx/format/DecimalFormat.hx",174,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 174)		::Dynamic _hx_tmp = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal);
HXDLIN( 174)		return ::thx::format::BigIntFormat_obj::integer(_hx_tmp,culture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DecimalFormat_obj,integer,return )

::String DecimalFormat_obj::number( ::thx::bigint::DecimalImpl decimal, ::Dynamic precision, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","number",0xf251bf9c,"thx.format.DecimalFormat.number","thx/format/DecimalFormat.hx",179,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(precision,"precision")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 180)		decimal = decimal->trim(null());
HXLINE( 181)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::DecimalFormat_obj::numberFormat(culture);
HXDLIN( 181)		HX_VAR( ::String,pattern);
HXLINE( 182)		Bool _hx_tmp = decimal->isNegative();
HXDLIN( 182)		if (_hx_tmp) {
HXLINE( 181)			pattern = ::thx::culture::Pattern_obj::numberNegatives->__get(nf->patternNegativeNumber);
            		}
            		else {
HXLINE( 181)			pattern = HX_("n",6e,00,00,00);
            		}
HXLINE( 139)		HX_VAR(  ::Dynamic,t);
HXLINE( 183)		if (hx::IsNull( precision )) {
HXLINE( 139)			t = null();
            		}
            		else {
HXLINE( 139)			t = precision;
            		}
HXDLIN( 139)		Int _hx_tmp1;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp1 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp1 = nf->decimalDigitsNumber;
            		}
HXLINE( 181)		HX_VARI( ::String,formatted) = ::thx::format::DecimalFormat_obj::value(decimal,_hx_tmp1,nf->groupSizesNumber,nf->separatorGroupNumber,nf->separatorDecimalNumber);
HXLINE( 184)		return ::StringTools_obj::replace(pattern,HX_("n",6e,00,00,00),formatted);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,number,return )

::String DecimalFormat_obj::octal( ::thx::bigint::DecimalImpl decimal, ::Dynamic __o_significantDigits, ::thx::culture::Culture culture){
 ::Dynamic significantDigits = __o_significantDigits.Default(1);
            	HX_STACK_FRAME("thx.format.DecimalFormat","octal",0x8c0de058,"thx.format.DecimalFormat.octal","thx/format/DecimalFormat.hx",191,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(significantDigits,"significantDigits")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 191)		::Dynamic _hx_tmp = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal);
HXDLIN( 191)		return ::thx::format::BigIntFormat_obj::octal(_hx_tmp,null(),culture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,octal,return )

::String DecimalFormat_obj::percent( ::thx::bigint::DecimalImpl decimal, ::Dynamic decimals, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","percent",0xe4552a92,"thx.format.DecimalFormat.percent","thx/format/DecimalFormat.hx",196,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(decimals,"decimals")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 197)		decimal = decimal->trim(null());
HXLINE( 198)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::DecimalFormat_obj::numberFormat(culture);
HXLINE( 199)		HX_VARI(  ::thx::bigint::DecimalImpl,that) = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)100);
HXDLIN( 199)		HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = decimal->multiply(that);
HXDLIN( 199)		 ::thx::bigint::DecimalImpl _hx_tmp = this1->trim(null());
HXLINE( 139)		HX_VAR(  ::Dynamic,t);
HXLINE( 199)		if (hx::IsNull( decimals )) {
HXLINE( 139)			t = null();
            		}
            		else {
HXLINE( 139)			t = decimals;
            		}
HXDLIN( 139)		Int _hx_tmp1;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp1 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp1 = nf->decimalDigitsPercent;
            		}
HXLINE( 199)		return ::thx::format::DecimalFormat_obj::unit(_hx_tmp,_hx_tmp1,nf->symbolPercent,culture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,percent,return )

::String DecimalFormat_obj::permille( ::thx::bigint::DecimalImpl decimal, ::Dynamic decimals, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","permille",0xaad5319f,"thx.format.DecimalFormat.permille","thx/format/DecimalFormat.hx",205,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(decimals,"decimals")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 206)		decimal = decimal->trim(null());
HXLINE( 207)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::DecimalFormat_obj::numberFormat(culture);
HXLINE( 208)		HX_VARI(  ::thx::bigint::DecimalImpl,that) = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1000);
HXDLIN( 208)		HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = decimal->multiply(that);
HXDLIN( 208)		 ::thx::bigint::DecimalImpl _hx_tmp = this1->trim(null());
HXLINE( 139)		HX_VAR(  ::Dynamic,t);
HXLINE( 208)		if (hx::IsNull( decimals )) {
HXLINE( 139)			t = null();
            		}
            		else {
HXLINE( 139)			t = decimals;
            		}
HXDLIN( 139)		Int _hx_tmp1;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			_hx_tmp1 = t;
            		}
            		else {
HXLINE( 139)			_hx_tmp1 = nf->decimalDigitsPercent;
            		}
HXLINE( 208)		return ::thx::format::DecimalFormat_obj::unit(_hx_tmp,_hx_tmp1,nf->symbolPermille,culture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,permille,return )

::String DecimalFormat_obj::printf( ::thx::bigint::DecimalImpl decimal,::String pattern, ::thx::culture::Culture culture){
            		HX_BEGIN_LOCAL_FUNC_S6(hx::LocalFunc,_hx_Closure_0,Bool,negativeSignOnly,Bool,prefix,Bool,justifyRight,::String,padding,Bool,emptySpaceForSign,Int,width) HXARGC(5)
            		::String _hx_run(::String s, ::thx::bigint::DecimalImpl decimal1,::String p1,::String ns,::String ps){
            			HX_STACK_FRAME("thx.format.DecimalFormat","printf",0x0239086c,"thx.format.DecimalFormat.printf","thx/format/DecimalFormat.hx",302,0x3b00a083)
            			HX_STACK_ARG(s,"s")
            			HX_STACK_ARG(decimal1,"decimal1")
            			HX_STACK_ARG(p1,"p1")
            			HX_STACK_ARG(ns,"ns")
            			HX_STACK_ARG(ps,"ps")
HXLINE( 303)			if (prefix) {
HXLINE( 304)				s = (p1 + s);
            			}
HXLINE( 305)			Bool _hx_tmp5 = decimal1->isNegative();
HXDLIN( 305)			if (_hx_tmp5) {
HXLINE( 306)				s = (ns + s);
            			}
            			else {
HXLINE( 307)				if (!(negativeSignOnly)) {
HXLINE( 308)					s = (ps + s);
            				}
            				else {
HXLINE( 309)					if (emptySpaceForSign) {
HXLINE( 310)						s = (HX_(" ",20,00,00,00) + s);
            					}
            				}
            			}
HXLINE( 312)			if (justifyRight) {
HXLINE( 313)				return ::StringTools_obj::lpad(s,padding,width);
            			}
            			else {
HXLINE( 315)				return ::StringTools_obj::rpad(s,padding,width);
            			}
HXLINE( 312)			return null();
            		}
            		HX_END_LOCAL_FUNC5(return)

            	HX_STACK_FRAME("thx.format.DecimalFormat","printf",0x0239086c,"thx.format.DecimalFormat.printf","thx/format/DecimalFormat.hx",265,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 266)		Bool _hx_tmp = !(::StringTools_obj::startsWith(pattern,HX_("%",25,00,00,00)));
HXDLIN( 266)		if (_hx_tmp) {
HXLINE( 267)			HX_STACK_DO_THROW(((HX_("invalid printf term \"",2c,9d,69,d1) + pattern) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 268)		decimal = decimal->trim(null());
HXLINE( 269)		Int _hx_tmp1 = (pattern.length - (int)1);
HXDLIN( 269)		HX_VARI( ::String,specifier) = pattern.substring(_hx_tmp1,null());
HXLINE( 270)		Int _hx_tmp2 = (pattern.length - (int)1);
HXLINE( 269)		HX_VARI( ::Array< ::String >,p) = pattern.substring((int)1,_hx_tmp2).split(HX_(".",2e,00,00,00));
HXDLIN( 269)		HX_VAR(  ::Dynamic,precision);
HXLINE( 271)		Bool _hx_tmp3;
HXDLIN( 271)		if (hx::IsNotNull( p->__get((int)1) )) {
HXLINE( 271)			_hx_tmp3 = (HX_("",00,00,00,00) == p->__get((int)1));
            		}
            		else {
HXLINE( 271)			_hx_tmp3 = true;
            		}
HXDLIN( 271)		if (_hx_tmp3) {
HXLINE( 269)			precision = null();
            		}
            		else {
HXLINE( 269)			precision = ::Std_obj::parseInt(p->__get((int)1));
            		}
HXDLIN( 269)		HX_VARI( Bool,justifyRight) = true;
HXDLIN( 269)		HX_VARI( Bool,negativeSignOnly) = true;
HXDLIN( 269)		HX_VARI( Bool,emptySpaceForSign) = false;
HXDLIN( 269)		HX_VARI( Bool,prefix) = false;
HXDLIN( 269)		HX_VARI( ::String,padding) = HX_(" ",20,00,00,00);
HXDLIN( 269)		HX_VARI( Int,width) = (int)0;
HXDLIN( 269)		HX_VARI( ::String,flags) = p->__get((int)0);
HXLINE( 280)		while((flags.length > (int)0)){
HXLINE( 281)			{
HXLINE( 281)				HX_VARI( ::String,_g) = flags.substring((int)0,(int)1);
HXDLIN( 281)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_(" ",20,00,00,00)) ){
HXLINE( 287)					emptySpaceForSign = true;
HXDLIN( 287)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("#",23,00,00,00)) ){
HXLINE( 289)					prefix = true;
HXDLIN( 289)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("+",2b,00,00,00)) ){
HXLINE( 285)					negativeSignOnly = false;
HXDLIN( 285)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE( 283)					justifyRight = false;
HXDLIN( 283)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE( 291)					padding = HX_("0",30,00,00,00);
HXDLIN( 291)					goto _hx_goto_2;
            				}
            				/* default */{
HXLINE( 292)					Bool _hx_tmp4 = ::thx::Ints_obj::canParse(_g);
HXDLIN( 292)					if (_hx_tmp4) {
HXLINE( 293)						width = ::thx::Ints_obj::parse(flags,null());
HXLINE( 294)						flags = HX_("",00,00,00,00);
HXLINE( 295)						continue;
            					}
            					else {
HXLINE( 297)						HX_STACK_DO_THROW((HX_("invalid flags ",02,0d,3c,5b) + flags));
            					}
            				}
            				_hx_goto_2:;
            			}
HXLINE( 299)			flags = flags.substring((int)1,null());
            		}
HXLINE( 302)		HX_VARI(  ::Dynamic,decorate) =  ::Dynamic(new _hx_Closure_0(negativeSignOnly,prefix,justifyRight,padding,emptySpaceForSign,width));
HXLINE( 318)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::DecimalFormat_obj::numberFormat(culture);
HXLINE( 319)		::String _hx_switch_1 = specifier;
            		if (  (_hx_switch_1==HX_("%",25,00,00,00)) ){
HXLINE( 319)			return ( (::String)(decorate(HX_("%",25,00,00,00),::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1),HX_("",00,00,00,00),HX_("",00,00,00,00),HX_("",00,00,00,00))) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("B",42,00,00,00)) ){
HXLINE( 321)			HX_VARI_NAME( ::Dynamic,this1,"this") = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal);
HXDLIN( 321)			::String _hx_tmp6 = ::thx::bigint::BigIntImpl_obj::toStringWithBase(this1,(int)2);
HXLINE( 319)			return ( (::String)(decorate(_hx_tmp6,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1),HX_("B",42,00,00,00),HX_("",00,00,00,00),HX_("",00,00,00,00))) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("E",45,00,00,00)) ){
HXLINE( 326)			::String _hx_tmp7 = ::thx::format::DecimalFormat_obj::exponential(decimal->abs(),precision,(int)0,HX_("E",45,00,00,00),culture);
HXLINE( 319)			return ( (::String)(decorate(_hx_tmp7,decimal,HX_("",00,00,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("G",47,00,00,00)) ){
HXLINE( 333)			HX_VARI( ::String,e) = ::thx::format::DecimalFormat_obj::printf(decimal,HX_("E",45,00,00,00),culture);
HXDLIN( 333)			HX_VARI( ::String,f) = ::thx::format::DecimalFormat_obj::printf(decimal,HX_("f",66,00,00,00),culture);
HXLINE( 335)			if ((e.length < f.length)) {
HXLINE( 319)				return e;
            			}
            			else {
HXLINE( 319)				return f;
            			}
HXLINE( 332)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("X",58,00,00,00)) ){
HXLINE( 338)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal);
HXDLIN( 338)			::Dynamic _hx_tmp8 = ::thx::bigint::BigIntImpl_obj::abs(this2);
HXDLIN( 338)			::String _hx_tmp9 = ::thx::format::BigIntFormat_obj::hex(_hx_tmp8,precision,culture);
HXLINE( 319)			return ( (::String)(decorate(_hx_tmp9,decimal,HX_("0X",28,2a,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("b",62,00,00,00)) ){
HXLINE( 320)			HX_VARI_NAME( ::Dynamic,this3,"this") = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal);
HXDLIN( 320)			::String _hx_tmp10 = ::thx::bigint::BigIntImpl_obj::toStringWithBase(this3,(int)2);
HXLINE( 319)			return ( (::String)(decorate(_hx_tmp10,::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1),HX_("b",62,00,00,00),HX_("",00,00,00,00),HX_("",00,00,00,00))) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("c",63,00,00,00)) ){
HXLINE( 322)			Int _hx_tmp11 = decimal->toInt();
HXLINE( 319)			return ( (::String)(decorate(::String::fromCharCode(_hx_tmp11),::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1),HX_("",00,00,00,00),HX_("",00,00,00,00),HX_("",00,00,00,00))) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("d",64,00,00,00)) ||  (_hx_switch_1==HX_("i",69,00,00,00)) ){
HXLINE( 324)			HX_VARI_NAME( ::Dynamic,this4,"this") = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal);
HXDLIN( 324)			::String _hx_tmp12 = ::thx::bigint::BigIntImpl_obj::toString(this4);
HXDLIN( 324)			HX_VARI(  ::Dynamic,_0) = precision;
HXLINE( 139)			HX_VAR(  ::Dynamic,t);
HXLINE( 324)			if (hx::IsNull( _0 )) {
HXLINE( 139)				t = null();
            			}
            			else {
HXLINE( 139)				t = _0;
            			}
HXDLIN( 139)			Int _hx_tmp13;
HXDLIN( 139)			if (hx::IsNotNull( t )) {
HXLINE( 139)				_hx_tmp13 = t;
            			}
            			else {
HXLINE( 139)				_hx_tmp13 = (int)0;
            			}
HXLINE( 319)			return ( (::String)(decorate(::StringTools_obj::lpad(_hx_tmp12,HX_("0",30,00,00,00),_hx_tmp13),decimal,HX_("",00,00,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("e",65,00,00,00)) ){
HXLINE( 325)			::String _hx_tmp14 = ::thx::format::DecimalFormat_obj::exponential(decimal->abs(),precision,(int)0,HX_("e",65,00,00,00),culture);
HXLINE( 319)			return ( (::String)(decorate(_hx_tmp14,decimal,HX_("",00,00,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("f",66,00,00,00)) ){
HXLINE( 327)			::String _hx_tmp15 = ::thx::format::DecimalFormat_obj::fixed(decimal->abs(),precision,culture);
HXLINE( 319)			return ( (::String)(decorate(_hx_tmp15,decimal,HX_("",00,00,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("g",67,00,00,00)) ){
HXLINE( 329)			HX_VARI_NAME( ::String,e1,"e") = ::thx::format::DecimalFormat_obj::printf(decimal,HX_("e",65,00,00,00),culture);
HXDLIN( 329)			HX_VARI_NAME( ::String,f1,"f") = ::thx::format::DecimalFormat_obj::printf(decimal,HX_("f",66,00,00,00),culture);
HXLINE( 331)			if ((e1.length < f1.length)) {
HXLINE( 319)				return e1;
            			}
            			else {
HXLINE( 319)				return f1;
            			}
HXLINE( 328)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("o",6f,00,00,00)) ){
HXLINE( 339)			HX_VARI_NAME( ::Dynamic,this5,"this") = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal);
HXDLIN( 339)			::Dynamic _hx_tmp16 = ::thx::bigint::BigIntImpl_obj::abs(this5);
HXDLIN( 339)			::String _hx_tmp17 = ::thx::format::BigIntFormat_obj::octal(_hx_tmp16,precision,culture);
HXLINE( 319)			return ( (::String)(decorate(_hx_tmp17,decimal,HX_("0",30,00,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("u",75,00,00,00)) ){
HXLINE( 319)			return ::thx::format::DecimalFormat_obj::printf(decimal->abs(),HX_("d",64,00,00,00),culture);
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_1==HX_("x",78,00,00,00)) ){
HXLINE( 337)			HX_VARI_NAME( ::Dynamic,this6,"this") = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal);
HXDLIN( 337)			::Dynamic _hx_tmp18 = ::thx::bigint::BigIntImpl_obj::abs(this6);
HXDLIN( 337)			::String _hx_tmp19 = ::thx::format::BigIntFormat_obj::hex(_hx_tmp18,precision,culture);
HXLINE( 319)			return ( (::String)(decorate(_hx_tmp19,decimal,HX_("0x",48,2a,00,00),nf->signNegative,nf->signPositive)) );
HXDLIN( 319)			goto _hx_goto_3;
            		}
            		/* default */{
HXLINE( 341)			HX_STACK_DO_THROW(((HX_("invalid pattern \"",e9,27,46,23) + pattern) + HX_("\"",22,00,00,00)));
            		}
            		_hx_goto_3:;
HXLINE( 319)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,printf,return )

::String DecimalFormat_obj::toBase( ::thx::bigint::DecimalImpl value,Int base, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","toBase",0xc7a18bff,"thx.format.DecimalFormat.toBase","thx/format/DecimalFormat.hx",349,0x3b00a083)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(base,"base")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 349)		::Dynamic _hx_tmp = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(value);
HXDLIN( 349)		return ::thx::format::BigIntFormat_obj::toBase(_hx_tmp,base,culture);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,toBase,return )

::String DecimalFormat_obj::unit( ::thx::bigint::DecimalImpl decimal,Int decimals,::String unitSymbol, ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","unit",0x9b031897,"thx.format.DecimalFormat.unit","thx/format/DecimalFormat.hx",354,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(decimals,"decimals")
            	HX_STACK_ARG(unitSymbol,"unitSymbol")
            	HX_STACK_ARG(culture,"culture")
HXLINE( 355)		decimal = decimal->trim(null());
HXLINE( 356)		HX_VARI(  ::thx::culture::NumberFormatInfo,nf) = ::thx::format::DecimalFormat_obj::numberFormat(culture);
HXLINE( 357)		HX_VAR( ::String,pattern);
HXDLIN( 357)		Bool _hx_tmp = decimal->isNegative();
HXDLIN( 357)		if (_hx_tmp) {
HXLINE( 357)			pattern = ::thx::culture::Pattern_obj::percentNegatives->__get(nf->patternNegativePercent);
            		}
            		else {
HXLINE( 357)			pattern = ::thx::culture::Pattern_obj::percentPositives->__get(nf->patternPositivePercent);
            		}
HXDLIN( 357)		HX_VARI( ::String,formatted) = ::thx::format::DecimalFormat_obj::value(decimal,decimals,nf->groupSizesPercent,nf->separatorGroupPercent,nf->separatorDecimalPercent);
HXLINE( 359)		::String _hx_tmp1 = ::StringTools_obj::replace(pattern,HX_("n",6e,00,00,00),formatted);
HXDLIN( 359)		return ::StringTools_obj::replace(_hx_tmp1,HX_("%",25,00,00,00),unitSymbol);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(DecimalFormat_obj,unit,return )

 ::Dynamic DecimalFormat_obj::exponentialInfo( ::thx::bigint::DecimalImpl decimal){
            	HX_STACK_FRAME("thx.format.DecimalFormat","exponentialInfo",0x34f01660,"thx.format.DecimalFormat.exponentialInfo","thx/format/DecimalFormat.hx",363,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
HXLINE( 364)		HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = decimal->abs();
HXDLIN( 364)		HX_VARI( ::String,s) = this1->toString();
HXDLIN( 364)		HX_VARI( ::Array< ::String >,p) = s.split(HX_(".",2e,00,00,00))->concat(::Array_obj< ::String >::__new(1)->init(0,HX_("",00,00,00,00)));
HXDLIN( 364)		HX_VARI( Int,e) = (int)0;
HXLINE( 368)		Bool _hx_tmp = (p->__get((int)0).length > (int)1);
HXDLIN( 368)		if (_hx_tmp) {
HXLINE( 369)			e = (p->__get((int)0).length - (int)1);
HXLINE( 370)			::String _hx_tmp1 = p->__get((int)0).substring((int)1,null());
HXDLIN( 370)			p[(int)1] = (_hx_tmp1 + p->__get((int)1));
HXLINE( 371)			::String _hx_tmp2 = p->__get((int)0).substring((int)0,(int)1);
HXDLIN( 371)			p[(int)0] = _hx_tmp2;
            		}
            		else {
HXLINE( 372)			if ((p->__get((int)0) == HX_("0",30,00,00,00))) {
HXLINE( 373)				Int _hx_tmp3 = ((int)1 + p->__get((int)1).length);
HXDLIN( 373)				e = -((_hx_tmp3 - ::thx::Strings_obj::trimCharsLeft(p->__get((int)1),HX_("0",30,00,00,00)).length));
HXLINE( 374)				::String _hx_tmp4 = p->__get((int)1).substring((-(e) - (int)1),null());
HXDLIN( 374)				p[(int)1] = _hx_tmp4;
HXLINE( 375)				::String _hx_tmp5 = p->__get((int)1).substring((int)0,(int)1);
HXDLIN( 375)				p[(int)0] = _hx_tmp5;
HXLINE( 376)				::String _hx_tmp6 = p->__get((int)1).substring((int)1,null());
HXDLIN( 376)				p[(int)1] = _hx_tmp6;
            			}
            		}
HXLINE( 380)		HX_VARI( ::String,value) = p->slice((int)0,(int)2)->join(HX_(".",2e,00,00,00));
HXDLIN( 380)		HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this2,"this") = ::thx::bigint::Decimals_obj::parse(value);
HXDLIN( 380)		Int _hx_tmp7;
HXDLIN( 380)		Bool _hx_tmp8 = decimal->isNegative();
HXDLIN( 380)		if (_hx_tmp8) {
HXLINE( 380)			_hx_tmp7 = (int)-1;
            		}
            		else {
HXLINE( 380)			_hx_tmp7 = (int)1;
            		}
HXDLIN( 380)		HX_VARI(  ::thx::bigint::DecimalImpl,that) = ::thx::_Decimal::Decimal_Impl__obj::fromInt(_hx_tmp7);
HXDLIN( 380)		HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this3,"this") = this2->multiply(that);
HXDLIN( 380)		 ::thx::bigint::DecimalImpl _hx_tmp9 = this3->trim(null());
HXLINE( 378)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("e",65,00,00,00),e)
            			->setFixed(1,HX_("f",66,00,00,00),_hx_tmp9));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DecimalFormat_obj,exponentialInfo,return )

::String DecimalFormat_obj::customFormatDecimalFraction(::String d,::String pattern, ::thx::culture::NumberFormatInfo nf){
            	HX_STACK_FRAME("thx.format.DecimalFormat","customFormatDecimalFraction",0x19c37718,"thx.format.DecimalFormat.customFormatDecimalFraction","thx/format/DecimalFormat.hx",384,0x3b00a083)
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(nf,"nf")
HXLINE( 385)		HX_VARI( ::String,buf) = HX_("",00,00,00,00);
HXDLIN( 385)		HX_VARI( Int,i) = (int)0;
HXDLIN( 385)		HX_VARI( Int,quote) = (int)0;
HXDLIN( 385)		HX_VARI( ::Array< ::String >,p) = d.split(HX_("",00,00,00,00));
HXLINE( 390)		while((i < pattern.length)){
HXLINE( 391)			{
HXLINE( 391)				HX_VARI( ::String,_g) = pattern.substring(i,(i + (int)1));
HXDLIN( 391)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE( 391)					Int _hx_tmp = quote;
HXDLIN( 391)					switch((int)(_hx_tmp)){
            						case (int)0: {
HXLINE( 396)							quote = (int)2;
            						}
            						break;
            						case (int)1: {
HXLINE( 404)							hx::AddEq(buf,_g);
            						}
            						break;
            						case (int)2: {
HXLINE( 401)							quote = (int)0;
            						}
            						break;
            						default:{
HXLINE( 418)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 391)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("#",23,00,00,00)) ){
HXLINE( 391)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 410)							::String _hx_tmp1;
HXDLIN( 410)							Bool _hx_tmp2 = (p->length == (int)0);
HXDLIN( 410)							if (_hx_tmp2) {
HXLINE( 410)								_hx_tmp1 = HX_("",00,00,00,00);
            							}
            							else {
HXLINE( 410)								_hx_tmp1 = ( (::String)(p->shift()) );
            							}
HXDLIN( 410)							hx::AddEq(buf,_hx_tmp1);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 404)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 418)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 391)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("$",24,00,00,00)) ){
HXLINE( 391)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 412)							hx::AddEq(buf,nf->symbolCurrency);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 404)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 418)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 391)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("%",25,00,00,00)) ){
HXLINE( 391)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 414)							hx::AddEq(buf,nf->symbolPercent);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 404)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 418)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 391)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("'",27,00,00,00)) ){
HXLINE( 391)					Int _hx_tmp3 = quote;
HXDLIN( 391)					switch((int)(_hx_tmp3)){
            						case (int)0: {
HXLINE( 398)							quote = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 401)							quote = (int)0;
            						}
            						break;
            						case (int)2: {
HXLINE( 404)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 418)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 391)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE( 391)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 407)							::String _hx_tmp4;
HXDLIN( 407)							Bool _hx_tmp5 = (p->length == (int)0);
HXDLIN( 407)							if (_hx_tmp5) {
HXLINE( 407)								_hx_tmp4 = HX_("0",30,00,00,00);
            							}
            							else {
HXLINE( 407)								_hx_tmp4 = ( (::String)(p->shift()) );
            							}
HXDLIN( 407)							hx::AddEq(buf,_hx_tmp4);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 404)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 418)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 391)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE( 393)					++i;
HXLINE( 394)					::String _hx_tmp6 = pattern.substring(i,(i + (int)1));
HXDLIN( 394)					hx::AddEq(buf,_hx_tmp6);
HXLINE( 392)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_0==HX_("\xe2""\x80""\xb0""",92,ed,ab,00)) ){
HXLINE( 391)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 416)							hx::AddEq(buf,nf->symbolPermille);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 404)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 418)							hx::AddEq(buf,_g);
            						}
            					}
HXLINE( 391)					goto _hx_goto_5;
            				}
            				/* default */{
HXLINE( 391)					switch((int)(quote)){
            						case (int)1: case (int)2: {
HXLINE( 404)							hx::AddEq(buf,_g);
            						}
            						break;
            						default:{
HXLINE( 418)							hx::AddEq(buf,_g);
            						}
            					}
            				}
            				_hx_goto_5:;
            			}
HXLINE( 420)			++i;
            		}
HXLINE( 422)		return buf;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,customFormatDecimalFraction,return )

::String DecimalFormat_obj::customFormatDecimal( ::thx::bigint::DecimalImpl decimal,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent){
            	HX_STACK_FRAME("thx.format.DecimalFormat","customFormatDecimal",0x65ba3ef6,"thx.format.DecimalFormat.customFormatDecimal","thx/format/DecimalFormat.hx",425,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(nf,"nf")
            	HX_STACK_ARG(isCurrency,"isCurrency")
            	HX_STACK_ARG(isPercent,"isPercent")
HXLINE( 426)		if (isPercent) {
HXLINE( 427)			Int _hx_tmp;
HXDLIN( 427)			Bool _hx_tmp1 = ::thx::format::DecimalFormat_obj::hasSymbols(pattern,HX_("\xe2""\x80""\xb0""",92,ed,ab,00));
HXDLIN( 427)			if (_hx_tmp1) {
HXLINE( 427)				_hx_tmp = (int)1000;
            			}
            			else {
HXLINE( 427)				_hx_tmp = (int)100;
            			}
HXDLIN( 427)			HX_VARI(  ::thx::bigint::DecimalImpl,that) = ::thx::_Decimal::Decimal_Impl__obj::fromInt(_hx_tmp);
HXDLIN( 427)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = decimal->multiply(that);
HXDLIN( 427)			decimal = this1->trim(null());
            		}
HXLINE( 429)		HX_VARI( ::Array< ::String >,exp) = ::thx::format::DecimalFormat_obj::splitPattern(pattern,HX_("eE",40,58,00,00));
HXLINE( 430)		Bool _hx_tmp2 = (exp->length > (int)1);
HXDLIN( 430)		if (_hx_tmp2) {
HXLINE( 431)			HX_VARI(  ::Dynamic,info) = ::thx::format::DecimalFormat_obj::exponentialInfo(decimal);
HXLINE( 432)			Int _hx_tmp3 = exp->__get((int)0).length;
HXDLIN( 432)			Int _hx_tmp4 = (exp->__get((int)0).length + (int)1);
HXLINE( 431)			HX_VARI( ::String,symbol) = pattern.substring(_hx_tmp3,_hx_tmp4);
HXDLIN( 431)			HX_VARI( Bool,forceSign) = ::StringTools_obj::startsWith(exp->__get((int)1),HX_("+",2b,00,00,00));
HXLINE( 434)			Bool _hx_tmp5;
HXDLIN( 434)			if (!(forceSign)) {
HXLINE( 434)				_hx_tmp5 = ::StringTools_obj::startsWith(exp->__get((int)1),HX_("-",2d,00,00,00));
            			}
            			else {
HXLINE( 434)				_hx_tmp5 = true;
            			}
HXDLIN( 434)			if (_hx_tmp5) {
HXLINE( 435)				::String _hx_tmp6 = exp->__get((int)1).substring((int)1,null());
HXDLIN( 435)				exp[(int)1] = _hx_tmp6;
            			}
HXLINE( 436)			::String _hx_tmp7 = ::thx::format::DecimalFormat_obj::customIntegerAndFraction( ::Dynamic(info->__Field(HX_("f",66,00,00,00),hx::paccDynamic)),exp->__get((int)0),nf,isCurrency,isPercent);
HXDLIN( 436)			::String _hx_tmp8 = (_hx_tmp7 + symbol);
HXLINE( 438)			::String _hx_tmp9;
HXDLIN( 438)			if ((( (Int)(info->__Field(HX_("e",65,00,00,00),hx::paccDynamic)) ) < (int)0)) {
HXLINE( 438)				_hx_tmp9 = nf->signNegative;
            			}
            			else {
HXLINE( 438)				if (forceSign) {
HXLINE( 438)					_hx_tmp9 = nf->signPositive;
            				}
            				else {
HXLINE( 438)					_hx_tmp9 = HX_("",00,00,00,00);
            				}
            			}
HXLINE( 436)			::String _hx_tmp10 = (_hx_tmp8 + _hx_tmp9);
HXLINE( 439)			Float _hx_tmp11 = ::Math_obj::abs( ::Dynamic(info->__Field(HX_("e",65,00,00,00),hx::paccDynamic)));
HXDLIN( 439)			::String _hx_tmp12 = ::thx::format::DecimalFormat_obj::customFormatInteger((HX_("",00,00,00,00) + _hx_tmp11),exp->__get((int)1),nf,isCurrency,isPercent);
HXLINE( 436)			return (_hx_tmp10 + _hx_tmp12);
            		}
            		else {
HXLINE( 441)			return ::thx::format::DecimalFormat_obj::customIntegerAndFraction(decimal,pattern,nf,isCurrency,isPercent);
            		}
HXLINE( 430)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(DecimalFormat_obj,customFormatDecimal,return )

::String DecimalFormat_obj::customFormatInteger(::String v,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,p) HXARGC(1)
            		::String _hx_run(::hx::EnumBase _){
            			HX_STACK_FRAME("thx.format.DecimalFormat","customFormatInteger",0x96024823,"thx.format.DecimalFormat.customFormatInteger","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE( 526)			Int _hx_tmp23 = ( ( ::hx::EnumBase)(_) )->_hx_getIndex();
HXDLIN( 526)			switch((int)(_hx_tmp23)){
            				case (int)0: {
HXLINE(  86)					return _->_hx_getString(0);
            				}
            				break;
            				case (int)1: {
HXLINE( 528)					HX_VARI_NAME( Bool,first1,"first") = _->_hx_getBool(0);
HXDLIN( 528)					Bool _hx_tmp24 = (p->length == (int)0);
HXDLIN( 528)					if (_hx_tmp24) {
HXLINE(  86)						return HX_("",00,00,00,00);
            					}
            					else {
HXLINE( 528)						if (first1) {
HXLINE(  86)							return p->join(HX_("",00,00,00,00));
            						}
            						else {
HXLINE(  86)							return ( (::String)(p->pop()) );
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 529)					if (_->_hx_getBool(0)) {
HXLINE(  86)						return p->join(HX_("",00,00,00,00));
            					}
            					else {
HXLINE(  86)						return ( (::String)(p->pop()) );
            					}
            				}
            				break;
            			}
HXLINE( 526)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.format.DecimalFormat","customFormatInteger",0x96024823,"thx.format.DecimalFormat.customFormatInteger","thx/format/DecimalFormat.hx",445,0x3b00a083)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(nf,"nf")
            	HX_STACK_ARG(isCurrency,"isCurrency")
            	HX_STACK_ARG(isPercent,"isPercent")
HXLINE( 446)		HX_VARI( ::Array< ::Dynamic>,buf) = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 446)		HX_VARI( Int,i) = (int)0;
HXDLIN( 446)		HX_VARI( Int,quote) = (int)0;
HXDLIN( 446)		HX_VARI( ::Array< ::String >,p) = v.split(HX_("",00,00,00,00));
HXDLIN( 446)		HX_VARI( ::String,lbuf) = HX_("",00,00,00,00);
HXDLIN( 446)		HX_VARI( Bool,first) = true;
HXDLIN( 446)		HX_VARI( Bool,useGroups) = false;
HXDLIN( 446)		HX_VARI( Int,zeroes) = (int)0;
HXLINE( 454)		while((i < pattern.length)){
HXLINE( 455)			{
HXLINE( 455)				HX_VARI( ::String,_g) = pattern.substring(i,(i + (int)1));
HXDLIN( 455)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE( 455)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 460)							quote = (int)2;
            						}
            						break;
            						case (int)1: {
HXLINE( 470)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						case (int)2: {
HXLINE( 465)							quote = (int)0;
HXLINE( 466)							::hx::EnumBase _hx_tmp = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(lbuf);
HXDLIN( 466)							buf->push(_hx_tmp);
HXLINE( 467)							lbuf = HX_("",00,00,00,00);
            						}
            						break;
            						default:{
HXLINE( 487)							::hx::EnumBase _hx_tmp1 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 487)							buf->push(_hx_tmp1);
            						}
            					}
HXLINE( 455)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("#",23,00,00,00)) ){
HXLINE( 455)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 478)							::hx::EnumBase _hx_tmp2 = ::thx::format::_DecimalFormat::CustomFormat_obj::Hash(first);
HXDLIN( 478)							buf->push(_hx_tmp2);
HXLINE( 479)							first = false;
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 470)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 487)							::hx::EnumBase _hx_tmp3 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 487)							buf->push(_hx_tmp3);
            						}
            					}
HXLINE( 455)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("$",24,00,00,00)) ){
HXLINE( 455)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 481)							::hx::EnumBase _hx_tmp4 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(nf->symbolCurrency);
HXDLIN( 481)							buf->push(_hx_tmp4);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 470)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 487)							::hx::EnumBase _hx_tmp5 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 487)							buf->push(_hx_tmp5);
            						}
            					}
HXLINE( 455)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("%",25,00,00,00)) ){
HXLINE( 455)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 483)							::hx::EnumBase _hx_tmp6 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(nf->symbolPercent);
HXDLIN( 483)							buf->push(_hx_tmp6);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 470)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 487)							::hx::EnumBase _hx_tmp7 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 487)							buf->push(_hx_tmp7);
            						}
            					}
HXLINE( 455)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("'",27,00,00,00)) ){
HXLINE( 455)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 462)							quote = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 465)							quote = (int)0;
HXLINE( 466)							::hx::EnumBase _hx_tmp8 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(lbuf);
HXDLIN( 466)							buf->push(_hx_tmp8);
HXLINE( 467)							lbuf = HX_("",00,00,00,00);
            						}
            						break;
            						case (int)2: {
HXLINE( 470)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 487)							::hx::EnumBase _hx_tmp9 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 487)							buf->push(_hx_tmp9);
            						}
            					}
HXLINE( 455)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_(",",2c,00,00,00)) ){
HXLINE( 455)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 472)							useGroups = true;
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 470)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 487)							::hx::EnumBase _hx_tmp10 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 487)							buf->push(_hx_tmp10);
            						}
            					}
HXLINE( 455)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE( 455)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 474)							::hx::EnumBase _hx_tmp11 = ::thx::format::_DecimalFormat::CustomFormat_obj::Zero(first);
HXDLIN( 474)							buf->push(_hx_tmp11);
HXLINE( 475)							first = false;
HXLINE( 476)							++zeroes;
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 470)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 487)							::hx::EnumBase _hx_tmp12 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 487)							buf->push(_hx_tmp12);
            						}
            					}
HXLINE( 455)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE( 457)					++i;
HXLINE( 458)					::String _hx_tmp13 = pattern.substring(i,(i + (int)1));
HXDLIN( 458)					::hx::EnumBase _hx_tmp14 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(_hx_tmp13);
HXDLIN( 458)					buf->push(_hx_tmp14);
HXLINE( 456)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("\xe2""\x80""\xb0""",92,ed,ab,00)) ){
HXLINE( 455)					switch((int)(quote)){
            						case (int)0: {
HXLINE( 485)							::hx::EnumBase _hx_tmp15 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(nf->symbolPermille);
HXDLIN( 485)							buf->push(_hx_tmp15);
            						}
            						break;
            						case (int)1: case (int)2: {
HXLINE( 470)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 487)							::hx::EnumBase _hx_tmp16 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 487)							buf->push(_hx_tmp16);
            						}
            					}
HXLINE( 455)					goto _hx_goto_7;
            				}
            				/* default */{
HXLINE( 455)					switch((int)(quote)){
            						case (int)1: case (int)2: {
HXLINE( 470)							hx::AddEq(lbuf,_g);
            						}
            						break;
            						default:{
HXLINE( 487)							::hx::EnumBase _hx_tmp17 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(_g);
HXDLIN( 487)							buf->push(_hx_tmp17);
            						}
            					}
            				}
            				_hx_goto_7:;
            			}
HXLINE( 489)			++i;
            		}
HXLINE( 491)		Bool _hx_tmp18 = (lbuf.length > (int)0);
HXDLIN( 491)		if (_hx_tmp18) {
HXLINE( 492)			::hx::EnumBase _hx_tmp19 = ::thx::format::_DecimalFormat::CustomFormat_obj::Literal(lbuf);
HXDLIN( 492)			buf->push(_hx_tmp19);
            		}
HXLINE( 495)		{
HXLINE( 495)			HX_VARI( Int,_g1) = p->length;
HXDLIN( 495)			HX_VARI_NAME( Int,_g2,"_g") = zeroes;
HXDLIN( 495)			while((_g1 < _g2)){
HXLINE( 495)				++_g1;
HXLINE( 496)				p->unshift(HX_("0",30,00,00,00));
            			}
            		}
HXLINE( 498)		if (useGroups) {
HXLINE( 499)			i = (p->length - (int)1);
HXLINE( 500)			HX_VAR( ::Array< Int >,groups);
HXDLIN( 500)			if (isCurrency) {
HXLINE( 500)				groups = nf->groupSizesCurrency->copy();
            			}
            			else {
HXLINE( 502)				if (isPercent) {
HXLINE( 500)					groups = nf->groupSizesPercent->copy();
            				}
            				else {
HXLINE( 500)					groups = nf->groupSizesNumber->copy();
            				}
            			}
HXDLIN( 500)			HX_VARI(  ::Dynamic,group) = groups->shift();
HXDLIN( 500)			HX_VARI( Int,pos) = (int)0;
HXLINE( 507)			while((i >= (int)0)){
HXLINE( 508)				if (hx::IsEq( group,(int)0 )) {
HXLINE( 508)					goto _hx_goto_9;
            				}
HXLINE( 509)				if (hx::IsEq( pos,group )) {
HXLINE( 510)					::String _hx_tmp20 = p->__get(i);
HXDLIN( 510)					::String _hx_tmp21;
HXDLIN( 510)					if (isCurrency) {
HXLINE( 510)						_hx_tmp21 = nf->separatorGroupCurrency;
            					}
            					else {
HXLINE( 512)						if (isPercent) {
HXLINE( 510)							_hx_tmp21 = nf->separatorGroupPercent;
            						}
            						else {
HXLINE( 510)							_hx_tmp21 = nf->separatorGroupNumber;
            						}
            					}
HXDLIN( 510)					p[i] = (_hx_tmp20 + _hx_tmp21);
HXLINE( 515)					pos = (int)0;
HXLINE( 516)					Bool _hx_tmp22 = (groups->length > (int)0);
HXDLIN( 516)					if (_hx_tmp22) {
HXLINE( 517)						group = groups->shift();
            					}
            				}
            				else {
HXLINE( 519)					++pos;
HXLINE( 520)					--i;
            				}
            			}
            			_hx_goto_9:;
            		}
HXLINE( 525)		buf->reverse();
HXLINE( 526)		HX_VARI( ::Array< ::String >,r) = buf->map( ::Dynamic(new _hx_Closure_0(p)));
HXLINE( 531)		r->reverse();
HXLINE( 532)		return r->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(DecimalFormat_obj,customFormatInteger,return )

::String DecimalFormat_obj::customIntegerAndFraction( ::thx::bigint::DecimalImpl decimal,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent){
            	HX_STACK_FRAME("thx.format.DecimalFormat","customIntegerAndFraction",0xf247287f,"thx.format.DecimalFormat.customIntegerAndFraction","thx/format/DecimalFormat.hx",535,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(nf,"nf")
            	HX_STACK_ARG(isCurrency,"isCurrency")
            	HX_STACK_ARG(isPercent,"isPercent")
HXLINE( 536)		HX_VARI( ::Array< ::String >,p) = ::thx::format::DecimalFormat_obj::splitPattern(pattern,HX_(".",2e,00,00,00));
HXLINE( 537)		Int _hx_tmp = p->__get((int)0).length;
HXLINE( 536)		HX_VARI( Int,power) = (_hx_tmp - (p[(int)0] = ::thx::Strings_obj::trimCharsRight(p->__get((int)0),HX_(",",2c,00,00,00))).length);
HXLINE( 538)		HX_VARI( Float,value) = ::Math_obj::pow((int)1000,power);
HXDLIN( 538)		HX_VARI(  ::thx::bigint::DecimalImpl,that) = ::thx::bigint::Decimals_obj::fromFloat(value);
HXDLIN( 538)		HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = decimal->divide(that);
HXDLIN( 538)		decimal = this1->trim(null());
HXLINE( 539)		Bool _hx_tmp1 = (p->length == (int)1);
HXDLIN( 539)		if (_hx_tmp1) {
HXLINE( 540)			HX_VARI_NAME( ::Dynamic,this2,"this") = ::thx::_Decimal::Decimal_Impl__obj::toBigInt(decimal->roundTo((int)0));
HXDLIN( 540)			::String _hx_tmp2 = ::thx::bigint::BigIntImpl_obj::toString(this2);
HXDLIN( 540)			return ::thx::format::DecimalFormat_obj::customFormatInteger(_hx_tmp2,p->__get((int)0),nf,isCurrency,isPercent);
            		}
            		else {
HXLINE( 542)			HX_VARI( Int,decimals) = ::thx::format::DecimalFormat_obj::countSymbols(p->__get((int)1),HX_("#0",ad,1e,00,00));
HXDLIN( 542)			HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this3,"this") = decimal->roundTo(decimals);
HXDLIN( 542)			decimal = this3->trim(null());
HXLINE( 543)			HX_VARI( ::Array< ::String >,np) = ::thx::format::DecimalFormat_obj::splitOnDecimalSeparator(decimal);
HXLINE( 544)			::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::customFormatInteger(np->__get((int)0),p->__get((int)0),nf,isCurrency,isPercent);
HXLINE( 545)			::String _hx_tmp4;
HXDLIN( 545)			if (isCurrency) {
HXLINE( 545)				_hx_tmp4 = nf->separatorDecimalCurrency;
            			}
            			else {
HXLINE( 547)				if (isPercent) {
HXLINE( 545)					_hx_tmp4 = nf->separatorDecimalPercent;
            				}
            				else {
HXLINE( 545)					_hx_tmp4 = nf->separatorDecimalNumber;
            				}
            			}
HXLINE( 544)			::String _hx_tmp5 = (_hx_tmp3 + _hx_tmp4);
HXLINE( 550)			::String _hx_tmp6;
HXDLIN( 550)			if (hx::IsNull( np )) {
HXLINE( 550)				_hx_tmp6 = null();
            			}
            			else {
HXLINE( 550)				HX_VARI( ::String,_1) = np->__get((int)1);
HXDLIN( 550)				if (hx::IsNull( _1 )) {
HXLINE( 550)					_hx_tmp6 = null();
            				}
            				else {
HXLINE( 550)					_hx_tmp6 = _1;
            				}
            			}
HXLINE( 139)			HX_VARI( ::String,t) = _hx_tmp6;
HXDLIN( 139)			::String _hx_tmp7;
HXDLIN( 139)			if (hx::IsNotNull( t )) {
HXLINE( 139)				_hx_tmp7 = t;
            			}
            			else {
HXLINE( 139)				_hx_tmp7 = HX_("0",30,00,00,00);
            			}
HXLINE( 550)			::String _hx_tmp8 = ::thx::format::DecimalFormat_obj::customFormatDecimalFraction(_hx_tmp7,p->__get((int)1),nf);
HXLINE( 544)			return (_hx_tmp5 + _hx_tmp8);
            		}
HXLINE( 539)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(DecimalFormat_obj,customIntegerAndFraction,return )

Bool DecimalFormat_obj::hasSymbols(::String pattern,::String symbols){
            	HX_STACK_FRAME("thx.format.DecimalFormat","hasSymbols",0x942f4434,"thx.format.DecimalFormat.hasSymbols","thx/format/DecimalFormat.hx",554,0x3b00a083)
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(symbols,"symbols")
HXLINE( 555)		HX_VARI( Int,i) = (int)0;
HXDLIN( 555)		HX_VARI( Int,quote) = (int)0;
HXLINE( 557)		while((i < pattern.length)){
HXLINE( 558)			{
HXLINE( 558)				HX_VARI( ::String,_g) = pattern.substring(i,(i + (int)1));
HXDLIN( 558)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE( 558)					Int _hx_tmp = quote;
HXDLIN( 558)					switch((int)(_hx_tmp)){
            						case (int)0: {
HXLINE( 563)							quote = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 561)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 558)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_0==HX_("'",27,00,00,00)) ){
HXLINE( 558)					Int _hx_tmp1 = quote;
HXDLIN( 558)					switch((int)(_hx_tmp1)){
            						case (int)0: {
HXLINE( 562)							quote = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 561)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 558)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE( 559)					++i;
HXDLIN( 559)					goto _hx_goto_11;
            				}
            				/* default */{
HXLINE( 558)					if ((quote == (int)0)) {
HXLINE( 564)						Int _hx_tmp2 = symbols.indexOf(_g,null());
HXDLIN( 564)						if ((_hx_tmp2 >= (int)0)) {
HXLINE( 564)							return true;
            						}
            					}
            				}
            				_hx_goto_11:;
            			}
HXLINE( 567)			++i;
            		}
HXLINE( 569)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DecimalFormat_obj,hasSymbols,return )

::String DecimalFormat_obj::intPart(::String s,::Array< Int > groupSizes,::String groupSeparator){
            	HX_STACK_FRAME("thx.format.DecimalFormat","intPart",0x74b0404f,"thx.format.DecimalFormat.intPart","thx/format/DecimalFormat.hx",572,0x3b00a083)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(groupSizes,"groupSizes")
            	HX_STACK_ARG(groupSeparator,"groupSeparator")
HXLINE( 573)		HX_VARI( ::Array< ::String >,buf) = ::Array_obj< ::String >::__new(0);
HXDLIN( 573)		HX_VARI( ::Array< Int >,sizes) = groupSizes->copy();
HXDLIN( 573)		HX_VARI(  ::Dynamic,size) = sizes->shift();
HXLINE( 578)		while((s.length > (int)0)){
HXLINE( 579)			if (hx::IsEq( size,(int)0 )) {
HXLINE( 580)				buf->unshift(s);
HXLINE( 581)				s = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 582)				Bool _hx_tmp = hx::IsGreater( s.length,size );
HXDLIN( 582)				if (_hx_tmp) {
HXLINE( 583)					Int _hx_tmp1 = (s.length - size);
HXDLIN( 583)					::String _hx_tmp2 = s.substring(_hx_tmp1,null());
HXDLIN( 583)					buf->unshift(_hx_tmp2);
HXLINE( 584)					Int _hx_tmp3 = (s.length - size);
HXDLIN( 584)					s = s.substring((int)0,_hx_tmp3);
HXLINE( 585)					Bool _hx_tmp4 = (sizes->length > (int)0);
HXDLIN( 585)					if (_hx_tmp4) {
HXLINE( 586)						size = sizes->shift();
            					}
            				}
            				else {
HXLINE( 588)					buf->unshift(s);
HXLINE( 589)					s = HX_("",00,00,00,00);
            				}
            			}
            		}
HXLINE( 592)		return buf->join(groupSeparator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,intPart,return )

 ::thx::culture::NumberFormatInfo DecimalFormat_obj::numberFormat( ::thx::culture::Culture culture){
            	HX_STACK_FRAME("thx.format.DecimalFormat","numberFormat",0x11e25ff3,"thx.format.DecimalFormat.numberFormat","thx/format/DecimalFormat.hx",596,0x3b00a083)
            	HX_STACK_ARG(culture,"culture")
HXLINE( 596)		Bool _hx_tmp;
HXDLIN( 596)		if (hx::IsNotNull( culture )) {
HXLINE( 596)			_hx_tmp = hx::IsNotNull( culture->number );
            		}
            		else {
HXLINE( 596)			_hx_tmp = false;
            		}
HXDLIN( 596)		if (_hx_tmp) {
HXLINE( 596)			return culture->number;
            		}
            		else {
HXLINE( 596)			return ::thx::format::Format_obj::get_defaultCulture()->number;
            		}
HXDLIN( 596)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DecimalFormat_obj,numberFormat,return )

::String DecimalFormat_obj::pad(::String s,Int len,Bool round){
            	HX_STACK_FRAME("thx.format.DecimalFormat","pad",0x4a26a6a0,"thx.format.DecimalFormat.pad","thx/format/DecimalFormat.hx",598,0x3b00a083)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(len,"len")
            	HX_STACK_ARG(round,"round")
HXLINE( 599)		HX_VARI( ::String,_0) = s;
HXDLIN( 599)		::String _hx_tmp;
HXDLIN( 599)		if (hx::IsNull( _0 )) {
HXLINE( 599)			_hx_tmp = null();
            		}
            		else {
HXLINE( 599)			_hx_tmp = _0;
            		}
HXLINE( 139)		HX_VARI( ::String,t) = _hx_tmp;
HXDLIN( 139)		if (hx::IsNotNull( t )) {
HXLINE( 139)			s = t;
            		}
            		else {
HXLINE( 599)			s = HX_("",00,00,00,00);
            		}
HXLINE( 600)		Bool _hx_tmp1;
HXDLIN( 600)		if ((len > (int)0)) {
HXLINE( 600)			_hx_tmp1 = (s.length > len);
            		}
            		else {
HXLINE( 600)			_hx_tmp1 = false;
            		}
HXDLIN( 600)		if (_hx_tmp1) {
HXLINE( 601)			if (round) {
HXLINE( 602)				::String _hx_tmp2 = s.substring((int)0,(len - (int)1));
HXDLIN( 602)				::String _hx_tmp3 = s.substring((len - (int)1),len);
HXDLIN( 602)				 ::Dynamic _hx_tmp4 = ::Std_obj::parseInt(_hx_tmp3);
HXDLIN( 602)				Int _hx_tmp5;
HXDLIN( 602)				::String _hx_tmp6 = s.substring(len,(len + (int)1));
HXDLIN( 602)				 ::Dynamic _hx_tmp7 = ::Std_obj::parseInt(_hx_tmp6);
HXDLIN( 602)				if (hx::IsGreaterEq( _hx_tmp7,(int)5 )) {
HXLINE( 602)					_hx_tmp5 = (int)1;
            				}
            				else {
HXLINE( 602)					_hx_tmp5 = (int)0;
            				}
HXDLIN( 602)				return (_hx_tmp2 + (_hx_tmp4 + _hx_tmp5));
            			}
            			else {
HXLINE( 604)				return s.substring((int)0,len);
            			}
            		}
            		else {
HXLINE( 607)			return ::StringTools_obj::rpad(s,HX_("0",30,00,00,00),len);
            		}
HXLINE( 600)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DecimalFormat_obj,pad,return )

 ::Dynamic DecimalFormat_obj::paramOrNull(::String param){
            	HX_STACK_FRAME("thx.format.DecimalFormat","paramOrNull",0x98da4004,"thx.format.DecimalFormat.paramOrNull","thx/format/DecimalFormat.hx",612,0x3b00a083)
            	HX_STACK_ARG(param,"param")
HXLINE( 612)		Bool _hx_tmp = (param.length == (int)0);
HXDLIN( 612)		if (_hx_tmp) {
HXLINE( 612)			return null();
            		}
            		else {
HXLINE( 612)			return ::Std_obj::parseInt(param);
            		}
HXDLIN( 612)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DecimalFormat_obj,paramOrNull,return )

::Array< ::String > DecimalFormat_obj::splitOnDecimalSeparator( ::thx::bigint::DecimalImpl decimal){
            	HX_STACK_FRAME("thx.format.DecimalFormat","splitOnDecimalSeparator",0x54a8141a,"thx.format.DecimalFormat.splitOnDecimalSeparator","thx/format/DecimalFormat.hx",615,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
HXLINE( 615)		return decimal->toString().split(HX_(".",2e,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DecimalFormat_obj,splitOnDecimalSeparator,return )

::Array< ::String > DecimalFormat_obj::splitPattern(::String pattern,::String separator){
            	HX_STACK_FRAME("thx.format.DecimalFormat","splitPattern",0x5ca1cba9,"thx.format.DecimalFormat.splitPattern","thx/format/DecimalFormat.hx",618,0x3b00a083)
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(separator,"separator")
HXLINE( 619)		HX_VARI( ::Array< Int >,pos) = ::Array_obj< Int >::__new(0);
HXDLIN( 619)		HX_VARI( Int,i) = (int)0;
HXDLIN( 619)		HX_VARI( Int,quote) = (int)0;
HXLINE( 622)		while((i < pattern.length)){
HXLINE( 623)			{
HXLINE( 623)				HX_VARI( ::String,_g) = pattern.substring(i,(i + (int)1));
HXDLIN( 623)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE( 623)					Int _hx_tmp = quote;
HXDLIN( 623)					switch((int)(_hx_tmp)){
            						case (int)0: {
HXLINE( 628)							quote = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 626)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 623)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_0==HX_("'",27,00,00,00)) ){
HXLINE( 623)					Int _hx_tmp1 = quote;
HXDLIN( 623)					switch((int)(_hx_tmp1)){
            						case (int)0: {
HXLINE( 627)							quote = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 626)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 623)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE( 624)					++i;
HXDLIN( 624)					goto _hx_goto_14;
            				}
            				/* default */{
HXLINE( 623)					if ((quote == (int)0)) {
HXLINE( 629)						Int _hx_tmp2 = separator.indexOf(_g,null());
HXDLIN( 629)						if ((_hx_tmp2 >= (int)0)) {
HXLINE( 630)							pos->push(i);
            						}
            					}
            				}
            				_hx_goto_14:;
            			}
HXLINE( 633)			++i;
            		}
HXLINE( 635)		HX_VARI( ::Array< ::String >,buf) = ::Array_obj< ::String >::__new(0);
HXDLIN( 635)		HX_VARI( Int,prev) = (int)0;
HXLINE( 637)		{
HXLINE( 637)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 637)			while((_g1 < pos->length)){
HXLINE( 637)				HX_VARI( Int,p) = pos->__get(_g1);
HXDLIN( 637)				++_g1;
HXLINE( 638)				::String _hx_tmp3 = pattern.substring(prev,p);
HXDLIN( 638)				buf->push(_hx_tmp3);
HXLINE( 639)				prev = (p + (int)1);
            			}
            		}
HXLINE( 641)		::String _hx_tmp4 = pattern.substring(prev,null());
HXDLIN( 641)		buf->push(_hx_tmp4);
HXLINE( 642)		return buf;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DecimalFormat_obj,splitPattern,return )

::String DecimalFormat_obj::value( ::thx::bigint::DecimalImpl decimal,Int precision,::Array< Int > groupSizes,::String groupSeparator,::String decimalSeparator){
            	HX_STACK_FRAME("thx.format.DecimalFormat","value",0x928381fe,"thx.format.DecimalFormat.value","thx/format/DecimalFormat.hx",645,0x3b00a083)
            	HX_STACK_ARG(decimal,"decimal")
            	HX_STACK_ARG(precision,"precision")
            	HX_STACK_ARG(groupSizes,"groupSizes")
            	HX_STACK_ARG(groupSeparator,"groupSeparator")
            	HX_STACK_ARG(decimalSeparator,"decimalSeparator")
HXLINE( 646)		decimal = decimal->abs();
HXLINE( 647)		HX_VARI( ::Array< ::String >,p) = ::thx::format::DecimalFormat_obj::splitOnDecimalSeparator(decimal);
HXLINE( 649)		Bool _hx_tmp;
HXDLIN( 649)		if ((precision <= (int)0)) {
HXLINE( 649)			_hx_tmp = hx::IsNotNull( p->__get((int)1) );
            		}
            		else {
HXLINE( 649)			_hx_tmp = false;
            		}
HXDLIN( 649)		if (_hx_tmp) {
HXLINE( 650)			Float _hx_tmp1 = ::Std_obj::parseFloat((HX_("0.",fe,29,00,00) + p->__get((int)1)));
HXDLIN( 650)			if ((_hx_tmp1 >= ((Float)0.5))) {
HXLINE( 651)				Int _hx_tmp2 = (p->__get((int)0).length - (int)1);
HXDLIN( 651)				::String _hx_tmp3 = p->__get((int)0).substring((int)0,_hx_tmp2);
HXDLIN( 651)				Int _hx_tmp4 = (p->__get((int)0).length - (int)1);
HXDLIN( 651)				::String _hx_tmp5 = p->__get((int)0).substring(_hx_tmp4,null());
HXDLIN( 651)				Float _hx_tmp6 = ::Std_obj::parseFloat(_hx_tmp5);
HXDLIN( 651)				p[(int)0] = (_hx_tmp3 + (_hx_tmp6 + (int)1));
            			}
            		}
HXLINE( 654)		HX_VARI( ::Array< ::String >,buf) = ::Array_obj< ::String >::__new(0);
HXLINE( 655)		::String _hx_tmp7 = ::thx::format::DecimalFormat_obj::intPart(p->__get((int)0),groupSizes,groupSeparator);
HXDLIN( 655)		buf->push(_hx_tmp7);
HXLINE( 657)		if ((precision > (int)0)) {
HXLINE( 658)			::String _hx_tmp8 = ::thx::format::DecimalFormat_obj::pad(p->__get((int)1),precision,true);
HXDLIN( 658)			buf->push(_hx_tmp8);
            		}
HXLINE( 660)		return buf->join(decimalSeparator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(DecimalFormat_obj,value,return )

Int DecimalFormat_obj::countSymbols(::String pattern,::String symbols){
            	HX_STACK_FRAME("thx.format.DecimalFormat","countSymbols",0xa2c6821f,"thx.format.DecimalFormat.countSymbols","thx/format/DecimalFormat.hx",663,0x3b00a083)
            	HX_STACK_ARG(pattern,"pattern")
            	HX_STACK_ARG(symbols,"symbols")
HXLINE( 664)		HX_VARI( Int,i) = (int)0;
HXDLIN( 664)		HX_VARI( Int,quote) = (int)0;
HXDLIN( 664)		HX_VARI( Int,count) = (int)0;
HXLINE( 667)		while((i < pattern.length)){
HXLINE( 668)			{
HXLINE( 668)				HX_VARI( ::String,_g) = pattern.substring(i,(i + (int)1));
HXDLIN( 668)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("\"",22,00,00,00)) ){
HXLINE( 668)					Int _hx_tmp = quote;
HXDLIN( 668)					switch((int)(_hx_tmp)){
            						case (int)0: {
HXLINE( 673)							quote = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 671)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 668)					goto _hx_goto_17;
            				}
            				if (  (_hx_switch_0==HX_("'",27,00,00,00)) ){
HXLINE( 668)					Int _hx_tmp1 = quote;
HXDLIN( 668)					switch((int)(_hx_tmp1)){
            						case (int)0: {
HXLINE( 672)							quote = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 671)							quote = (int)0;
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 668)					goto _hx_goto_17;
            				}
            				if (  (_hx_switch_0==HX_("\\",5c,00,00,00)) ){
HXLINE( 669)					++i;
HXDLIN( 669)					goto _hx_goto_17;
            				}
            				/* default */{
HXLINE( 668)					if ((quote == (int)0)) {
HXLINE( 674)						Int _hx_tmp2 = symbols.indexOf(_g,null());
HXDLIN( 674)						if ((_hx_tmp2 >= (int)0)) {
HXLINE( 674)							++count;
            						}
            					}
            				}
            				_hx_goto_17:;
            			}
HXLINE( 677)			++i;
            		}
HXLINE( 679)		return count;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DecimalFormat_obj,countSymbols,return )


DecimalFormat_obj::DecimalFormat_obj()
{
}

bool DecimalFormat_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pad") ) { outValue = pad_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"unit") ) { outValue = unit_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { outValue = fixed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"octal") ) { outValue = octal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"value") ) { outValue = value_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { outValue = format_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"number") ) { outValue = number_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"printf") ) { outValue = printf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toBase") ) { outValue = toBase_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"decimal") ) { outValue = decimal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"general") ) { outValue = general_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"integer") ) { outValue = integer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"percent") ) { outValue = percent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intPart") ) { outValue = intPart_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currency") ) { outValue = currency_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"permille") ) { outValue = permille_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hasSymbols") ) { outValue = hasSymbols_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"exponential") ) { outValue = exponential_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"paramOrNull") ) { outValue = paramOrNull_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"customFormat") ) { outValue = customFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"numberFormat") ) { outValue = numberFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"splitPattern") ) { outValue = splitPattern_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"countSymbols") ) { outValue = countSymbols_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"exponentialInfo") ) { outValue = exponentialInfo_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"customFormatDecimal") ) { outValue = customFormatDecimal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"customFormatInteger") ) { outValue = customFormatInteger_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"splitOnDecimalSeparator") ) { outValue = splitOnDecimalSeparator_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"customIntegerAndFraction") ) { outValue = customIntegerAndFraction_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"customFormatDecimalFraction") ) { outValue = customFormatDecimalFraction_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DecimalFormat_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *DecimalFormat_obj_sStaticStorageInfo = 0;
#endif

static void DecimalFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DecimalFormat_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DecimalFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DecimalFormat_obj::__mClass,"__mClass");
};

#endif

hx::Class DecimalFormat_obj::__mClass;

static ::String DecimalFormat_obj_sStaticFields[] = {
	HX_HCSTRING("currency","\x51","\x07","\x45","\x9b"),
	HX_HCSTRING("customFormat","\xc8","\xe5","\x2b","\xfd"),
	HX_HCSTRING("decimal","\x91","\xb4","\xd3","\xe6"),
	HX_HCSTRING("exponential","\x85","\xf6","\x7a","\xf4"),
	HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("general","\x28","\x6b","\x5b","\xb6"),
	HX_HCSTRING("integer","\xbe","\xbd","\x1b","\x17"),
	HX_HCSTRING("number","\xc9","\x86","\x7a","\xa1"),
	HX_HCSTRING("octal","\xcb","\xdd","\x42","\x2b"),
	HX_HCSTRING("percent","\xc5","\xaa","\xda","\x78"),
	HX_HCSTRING("permille","\x0c","\xde","\x1f","\x0b"),
	HX_HCSTRING("printf","\x99","\xcf","\x61","\xb1"),
	HX_HCSTRING("toBase","\x2c","\x53","\xca","\x76"),
	HX_HCSTRING("unit","\x84","\xca","\xa9","\x4d"),
	HX_HCSTRING("exponentialInfo","\x93","\x81","\x0d","\x11"),
	HX_HCSTRING("customFormatDecimalFraction","\xcb","\x62","\x2e","\x87"),
	HX_HCSTRING("customFormatDecimal","\xa9","\xbf","\xd8","\x51"),
	HX_HCSTRING("customFormatInteger","\xd6","\xc8","\x20","\x82"),
	HX_HCSTRING("customIntegerAndFraction","\xec","\x3e","\x7a","\x99"),
	HX_HCSTRING("hasSymbols","\xe1","\xa5","\xcf","\x9d"),
	HX_HCSTRING("intPart","\x82","\xc0","\x35","\x09"),
	HX_HCSTRING("numberFormat","\xe0","\x46","\xa0","\x0d"),
	HX_HCSTRING("pad","\x53","\x51","\x55","\x00"),
	HX_HCSTRING("paramOrNull","\xb7","\x55","\x8f","\xfb"),
	HX_HCSTRING("splitOnDecimalSeparator","\x4d","\x6a","\xc0","\x02"),
	HX_HCSTRING("splitPattern","\x96","\xb2","\x5f","\x58"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("countSymbols","\x0c","\x69","\x84","\x9e"),
	::String(null())
};

void DecimalFormat_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.format.DecimalFormat","\x3b","\xcb","\x83","\x5d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DecimalFormat_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DecimalFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DecimalFormat_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< DecimalFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DecimalFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DecimalFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DecimalFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace format
