// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx__Decimal_Decimal_Impl_
#include <thx/_Decimal/Decimal_Impl_.h>
#endif
#ifndef INCLUDED_thx_bigint_DecimalImpl
#include <thx/bigint/DecimalImpl.h>
#endif
#ifndef INCLUDED_thx_bigint_Decimals
#include <thx/bigint/Decimals.h>
#endif
#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_DateFormatInfo
#include <thx/culture/DateFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif
#ifndef INCLUDED_thx_format_DecimalFormat
#include <thx/format/DecimalFormat.h>
#endif
#ifndef INCLUDED_thx_format_TestDecimalFormat
#include <thx/format/TestDecimalFormat.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace format{

void TestDecimalFormat_obj::__construct(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","new",0xed12a67b,"thx.format.TestDecimalFormat.new","thx/format/TestDecimalFormat.hx",14,0x7ad74375)
            	HX_STACK_THIS(this)
            	}

Dynamic TestDecimalFormat_obj::__CreateEmpty() { return new TestDecimalFormat_obj; }

hx::ObjectPtr< TestDecimalFormat_obj > TestDecimalFormat_obj::__new()
{
	hx::ObjectPtr< TestDecimalFormat_obj > _hx_result = new TestDecimalFormat_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestDecimalFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestDecimalFormat_obj > _hx_result = new TestDecimalFormat_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestDecimalFormat_obj::testNumber(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testNumber",0x3528c000,"thx.format.TestDecimalFormat.testNumber","thx/format/TestDecimalFormat.hx",16,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE(  17)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::number(::thx::bigint::Decimals_obj::fromFloat(((Float)1.0)),(int)2,null());
HXDLIN(  17)		::utest::Assert_obj::equals(HX_("1.00",1d,86,86,20),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),17,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  18)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::number(::thx::bigint::Decimals_obj::fromFloat(((Float)1.2)),(int)1,null());
HXDLIN(  18)		::utest::Assert_obj::equals(HX_("1.2",b5,56,25,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),18,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  19)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::number(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1),(int)0,null());
HXDLIN(  19)		::utest::Assert_obj::equals(HX_("1",31,00,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),19,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  20)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::number(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)10000),(int)0,null());
HXDLIN(  20)		::utest::Assert_obj::equals(HX_("10,000",e3,7f,f2,57),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),20,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  21)		::String _hx_tmp4 = ::thx::format::DecimalFormat_obj::number(::thx::bigint::Decimals_obj::fromFloat(((Float)12345.6789)),(int)3,null());
HXDLIN(  21)		::utest::Assert_obj::equals(HX_("12,345.679",13,36,36,8c),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),21,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  23)		::String _hx_tmp5 = ::thx::format::DecimalFormat_obj::number(::thx::bigint::Decimals_obj::fromFloat(((Float)-1.0)),(int)2,null());
HXDLIN(  23)		::utest::Assert_obj::equals(HX_("-1.00",ca,a0,8e,09),_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),23,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  24)		::String _hx_tmp6 = ::thx::format::DecimalFormat_obj::number(::thx::bigint::Decimals_obj::fromFloat(((Float)-1.2)),(int)1,null());
HXDLIN(  24)		::utest::Assert_obj::equals(HX_("-1.2",a8,f0,e3,1d),_hx_tmp6,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),24,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  25)		::String _hx_tmp7 = ::thx::format::DecimalFormat_obj::number(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1),(int)0,null());
HXDLIN(  25)		::utest::Assert_obj::equals(HX_("-1",64,27,00,00),_hx_tmp7,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),25,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  26)		::String _hx_tmp8 = ::thx::format::DecimalFormat_obj::number(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-10000),(int)0,null());
HXDLIN(  26)		::utest::Assert_obj::equals(HX_("-10,000",d0,5f,38,a7),_hx_tmp8,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),26,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  27)		::String _hx_tmp9 = ::thx::format::DecimalFormat_obj::number(::thx::bigint::Decimals_obj::fromFloat(((Float)-12345.6789)),(int)3,null());
HXDLIN(  27)		::utest::Assert_obj::equals(HX_("-12,345.679",80,10,4f,33),_hx_tmp9,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),27,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  29)		HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this1,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)2);
HXDLIN(  29)		HX_VARI(  ::thx::bigint::DecimalImpl,exp) = this1->pow((int)50);
HXLINE(  30)		::String _hx_tmp10 = ::thx::format::DecimalFormat_obj::number(exp,(int)2,null());
HXDLIN(  30)		::utest::Assert_obj::equals(HX_("1,125,899,906,842,624.00",20,67,05,2b),_hx_tmp10,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),30,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
HXLINE(  32)		HX_VARI_NAME(  ::thx::bigint::DecimalImpl,this2,"this") = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)2);
HXDLIN(  32)		HX_VARI_NAME(  ::thx::bigint::DecimalImpl,exp1,"exp") = this2->pow((int)-18);
HXLINE(  33)		::String _hx_tmp11 = ::thx::format::DecimalFormat_obj::number(exp1,(int)11,null());
HXDLIN(  33)		::utest::Assert_obj::equals(HX_("0.000003814610",9b,ef,4b,e1),_hx_tmp11,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),33,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testNumber",bb,cc,6e,ba)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testNumber,(void))

void TestDecimalFormat_obj::testCurrency(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCurrency",0x21dd3c48,"thx.format.TestDecimalFormat.testCurrency","thx/format/TestDecimalFormat.hx",37,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE(  37)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::currency(::thx::bigint::Decimals_obj::fromFloat(((Float)-12345.6789)),null(),null(),null());
HXDLIN(  37)		::utest::Assert_obj::equals(HX_("(\xc2""\xa4""12,345.68)",2c,9b,d7,d3),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),37,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCurrency",c3,2d,4c,0e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCurrency,(void))

void TestDecimalFormat_obj::testCurrencyIT(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCurrencyIT",0x40db1e33,"thx.format.TestDecimalFormat.testCurrencyIT","thx/format/TestDecimalFormat.hx",41,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE(  41)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::currency(::thx::bigint::Decimals_obj::fromFloat(((Float)-12345.6789)),null(),null(),::thx::format::TestDecimalFormat_obj::it);
HXDLIN(  41)		::utest::Assert_obj::equals(HX_("-\xe2""\x82""\xac"" 12.345,68",46,56,79,4b),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),41,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCurrencyIT",6e,a4,05,5c)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCurrencyIT,(void))

void TestDecimalFormat_obj::testCurrencyUS(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCurrencyUS",0x40db28a6,"thx.format.TestDecimalFormat.testCurrencyUS","thx/format/TestDecimalFormat.hx",45,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE(  45)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::currency(::thx::bigint::Decimals_obj::fromFloat(((Float)-12345.6789)),null(),null(),::thx::format::TestDecimalFormat_obj::us);
HXDLIN(  45)		::utest::Assert_obj::equals(HX_("($12,345.68)",de,6c,66,f1),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),45,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCurrencyUS",e1,ae,05,5c)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCurrencyUS,(void))

void TestDecimalFormat_obj::testPercent(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testPercent",0x1d9e81ae,"thx.format.TestDecimalFormat.testPercent","thx/format/TestDecimalFormat.hx",48,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE(  49)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::percent(::thx::bigint::Decimals_obj::fromFloat(((Float)0.02333)),null(),null());
HXDLIN(  49)		::utest::Assert_obj::equals(HX_("2.33 %",61,6a,23,9c),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),49,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPercent",93,98,a3,35)));
HXLINE(  50)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::percent(::thx::bigint::Decimals_obj::fromFloat(((Float)0.02333)),null(),::thx::format::TestDecimalFormat_obj::it);
HXDLIN(  50)		::utest::Assert_obj::equals(HX_("2,33%",0b,44,45,e7),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),50,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPercent",93,98,a3,35)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testPercent,(void))

void TestDecimalFormat_obj::testPermille(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testPermille",0x91b81303,"thx.format.TestDecimalFormat.testPermille","thx/format/TestDecimalFormat.hx",53,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE(  54)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::permille(::thx::bigint::Decimals_obj::fromFloat(((Float)0.02333)),null(),null());
HXDLIN(  54)		::utest::Assert_obj::equals(HX_("23.33 \xe2""\x80""\xb0""",1f,53,84,e8),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),54,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPermille",7e,04,27,7e)));
HXLINE(  55)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::permille(::thx::bigint::Decimals_obj::fromFloat(((Float)0.02333)),null(),::thx::format::TestDecimalFormat_obj::it);
HXDLIN(  55)		::utest::Assert_obj::equals(HX_("23,33\xe2""\x80""\xb0""",c7,37,26,8c),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),55,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPermille",7e,04,27,7e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testPermille,(void))

void TestDecimalFormat_obj::testUnit(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testUnit",0x9e3877fb,"thx.format.TestDecimalFormat.testUnit","thx/format/TestDecimalFormat.hx",58,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE(  59)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::unit(::thx::bigint::Decimals_obj::fromFloat(((Float)23.3333)),(int)2,HX_("kg.",12,8b,51,00),null());
HXDLIN(  59)		::utest::Assert_obj::equals(HX_("23.33 kg.",9f,f0,29,e8),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),59,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testUnit",f6,4f,dc,50)));
HXLINE(  60)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::unit(::thx::bigint::Decimals_obj::fromFloat(((Float)23.3333)),(int)2,HX_("kg.",12,8b,51,00),::thx::format::TestDecimalFormat_obj::it);
HXDLIN(  60)		::utest::Assert_obj::equals(HX_("23,33kg.",47,d5,cb,8b),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),60,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testUnit",f6,4f,dc,50)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testUnit,(void))

void TestDecimalFormat_obj::testDecimal(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testDecimal",0x8b978b7a,"thx.format.TestDecimalFormat.testDecimal","thx/format/TestDecimalFormat.hx",63,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE(  64)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)12),HX_("d",64,00,00,00),null());
HXDLIN(  64)		::utest::Assert_obj::equals(HX_("12",e1,2a,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),64,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testDecimal",5f,a2,9c,a3)));
HXLINE(  65)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)12),HX_("d4",50,57,00,00),null());
HXDLIN(  65)		::utest::Assert_obj::equals(HX_("0012",e1,d4,de,1f),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),65,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testDecimal",5f,a2,9c,a3)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testDecimal,(void))

void TestDecimalFormat_obj::testFormatFixed(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testFormatFixed",0x647f5226,"thx.format.TestDecimalFormat.testFormatFixed","thx/format/TestDecimalFormat.hx",68,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE(  69)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)1234.5678)),HX_("f",66,00,00,00),null());
HXDLIN(  69)		::utest::Assert_obj::equals(HX_("1234.57",8e,89,65,73),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),69,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testFormatFixed",8b,3f,8a,0e)));
HXLINE(  70)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)1234.5678)),HX_("f",66,00,00,00),::thx::format::TestDecimalFormat_obj::it);
HXDLIN(  70)		::utest::Assert_obj::equals(HX_("1234,57",0c,05,64,73),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),70,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testFormatFixed",8b,3f,8a,0e)));
HXLINE(  71)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)1234.5678)),HX_("f4",0e,59,00,00),null());
HXDLIN(  71)		::utest::Assert_obj::equals(HX_("1234.5678",ee,f6,04,3f),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),71,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testFormatFixed",8b,3f,8a,0e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testFormatFixed,(void))

void TestDecimalFormat_obj::testExponential(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testExponential",0x9f3ef5ee,"thx.format.TestDecimalFormat.testExponential","thx/format/TestDecimalFormat.hx",74,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE(  75)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::exponential(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)10),null(),null(),null(),null());
HXDLIN(  75)		::utest::Assert_obj::equals(HX_("1.000000e+001",0e,54,d2,e9),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),75,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  76)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::exponential(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-10),null(),null(),null(),null());
HXDLIN(  76)		::utest::Assert_obj::equals(HX_("-1.000000e+001",c1,fb,49,22),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),76,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  77)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::exponential(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1),null(),null(),null(),null());
HXDLIN(  77)		::utest::Assert_obj::equals(HX_("1.000000e+000",0d,54,d2,e9),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),77,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  78)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::exponential(::thx::_Decimal::Decimal_Impl__obj::fromInt((int)-1),null(),null(),null(),null());
HXDLIN(  78)		::utest::Assert_obj::equals(HX_("-1.000000e+000",c0,fb,49,22),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),78,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  79)		::String _hx_tmp4 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)0.7)),null(),null(),null(),null());
HXDLIN(  79)		::utest::Assert_obj::equals(HX_("7.000000e-001",52,b2,a7,8d),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),79,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  80)		::String _hx_tmp5 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)-0.7)),null(),null(),null(),null());
HXDLIN(  80)		::utest::Assert_obj::equals(HX_("-7.000000e-001",05,5a,1f,c6),_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),80,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  82)		::String _hx_tmp6 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)1.234e3)),null(),null(),null(),null());
HXDLIN(  82)		::utest::Assert_obj::equals(HX_("1.234000e+003",33,36,34,78),_hx_tmp6,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),82,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  83)		::String _hx_tmp7 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)1.234e-003)),null(),null(),null(),null());
HXDLIN(  83)		::utest::Assert_obj::equals(HX_("1.234000e-003",71,a3,86,79),_hx_tmp7,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),83,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  84)		::String _hx_tmp8 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)0.001234)),null(),null(),null(),null());
HXDLIN(  84)		::utest::Assert_obj::equals(HX_("1.234000e-003",71,a3,86,79),_hx_tmp8,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),84,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  85)		::String _hx_tmp9 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)-1.234e3)),null(),null(),null(),null());
HXDLIN(  85)		::utest::Assert_obj::equals(HX_("-1.234000e+003",e6,dd,ab,b0),_hx_tmp9,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),85,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  86)		::String _hx_tmp10 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)-1.234e-003)),null(),null(),null(),null());
HXDLIN(  86)		::utest::Assert_obj::equals(HX_("-1.234000e-003",24,4b,fe,b1),_hx_tmp10,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),86,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  88)		::String _hx_tmp11 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)1.234e50)),null(),null(),null(),null());
HXDLIN(  88)		::utest::Assert_obj::equals(HX_("1.234000e+050",8b,3a,34,78),_hx_tmp11,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),88,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  89)		::String _hx_tmp12 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)1.234e-50)),null(),null(),null(),null());
HXDLIN(  89)		::utest::Assert_obj::equals(HX_("1.234000e-050",c9,a7,86,79),_hx_tmp12,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),89,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  90)		::String _hx_tmp13 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)-1.234e50)),null(),null(),null(),null());
HXDLIN(  90)		::utest::Assert_obj::equals(HX_("-1.234000e+050",3e,e2,ab,b0),_hx_tmp13,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),90,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  91)		::String _hx_tmp14 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)-1.234e-50)),null(),null(),null(),null());
HXDLIN(  91)		::utest::Assert_obj::equals(HX_("-1.234000e-050",7c,4f,fe,b1),_hx_tmp14,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),91,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  93)		::String _hx_tmp15 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)1.234e3)),(int)2,null(),null(),null());
HXDLIN(  93)		::utest::Assert_obj::equals(HX_("1.23e+003",2f,8d,b3,6e),_hx_tmp15,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),93,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  94)		::String _hx_tmp16 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)1.234e-003)),(int)2,null(),null(),null());
HXDLIN(  94)		::utest::Assert_obj::equals(HX_("1.23e-003",6d,fa,05,70),_hx_tmp16,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),94,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  95)		::String _hx_tmp17 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)-1.234e3)),(int)2,null(),null(),null());
HXDLIN(  95)		::utest::Assert_obj::equals(HX_("-1.23e+003",62,9f,ca,3b),_hx_tmp17,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),95,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  96)		::String _hx_tmp18 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)-1.234e-003)),(int)2,null(),null(),null());
HXDLIN(  96)		::utest::Assert_obj::equals(HX_("-1.23e-003",a0,0c,1d,3d),_hx_tmp18,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),96,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  98)		::String _hx_tmp19 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)1.234e3)),(int)2,null(),null(),::thx::format::TestDecimalFormat_obj::it);
HXDLIN(  98)		::utest::Assert_obj::equals(HX_("1,23e+003",f1,a8,4e,fc),_hx_tmp19,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),98,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE(  99)		::String _hx_tmp20 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)1.234e-003)),(int)2,null(),null(),::thx::format::TestDecimalFormat_obj::it);
HXDLIN(  99)		::utest::Assert_obj::equals(HX_("1,23e-003",2f,16,a1,fd),_hx_tmp20,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),99,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE( 100)		::String _hx_tmp21 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)-1.234e3)),(int)2,null(),null(),::thx::format::TestDecimalFormat_obj::it);
HXDLIN( 100)		::utest::Assert_obj::equals(HX_("-1,23e+003",24,bb,65,c9),_hx_tmp21,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),100,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
HXLINE( 101)		::String _hx_tmp22 = ::thx::format::DecimalFormat_obj::exponential(::thx::bigint::Decimals_obj::fromFloat(((Float)-1.234e-003)),(int)2,null(),null(),::thx::format::TestDecimalFormat_obj::it);
HXDLIN( 101)		::utest::Assert_obj::equals(HX_("-1,23e-003",62,28,b8,ca),_hx_tmp22,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),101,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testExponential",53,e3,49,49)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testExponential,(void))

void TestDecimalFormat_obj::testPrintfd(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testPrintfd",0x28f7ad94,"thx.format.TestDecimalFormat.testPrintfd","thx/format/TestDecimalFormat.hx",104,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 105)		HX_VARI(  ::thx::bigint::DecimalImpl,n) = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)461012);
HXLINE( 106)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::printf(n,HX_("%d",9f,20,00,00),null());
HXDLIN( 106)		::utest::Assert_obj::equals(HX_("461012",02,22,ba,02),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),106,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPrintfd",79,c4,fc,40)));
HXLINE( 107)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::printf(n,HX_("%08d",57,82,99,18),null());
HXDLIN( 107)		::utest::Assert_obj::equals(HX_("00461012",02,cc,35,88),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),107,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPrintfd",79,c4,fc,40)));
HXLINE( 108)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::printf(n,HX_("%+8d",12,b7,95,18),null());
HXDLIN( 108)		::utest::Assert_obj::equals(HX_(" +461012",4d,58,23,25),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),108,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPrintfd",79,c4,fc,40)));
HXLINE( 109)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::printf(n,HX_("%-8d",94,3b,97,18),null());
HXDLIN( 109)		::utest::Assert_obj::equals(HX_("461012  ",82,42,08,bf),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),109,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPrintfd",79,c4,fc,40)));
HXLINE( 110)		::String _hx_tmp4 = ::thx::format::DecimalFormat_obj::printf(n,HX_("%-+8d",af,e2,b2,6b),null());
HXDLIN( 110)		::utest::Assert_obj::equals(HX_("+461012 ",13,cb,9c,fb),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),110,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPrintfd",79,c4,fc,40)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testPrintfd,(void))

void TestDecimalFormat_obj::testPrintfb(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testPrintfb",0x28f7ad92,"thx.format.TestDecimalFormat.testPrintfb","thx/format/TestDecimalFormat.hx",113,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 114)		HX_VARI(  ::thx::bigint::DecimalImpl,n) = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)10);
HXLINE( 115)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::printf(n,HX_("%b",9d,20,00,00),null());
HXDLIN( 115)		::utest::Assert_obj::equals(HX_("1010",7e,0b,88,20),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),115,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPrintfb",77,c4,fc,40)));
HXLINE( 116)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::printf(n,HX_("%#b",44,32,1c,00),null());
HXDLIN( 116)		::utest::Assert_obj::equals(HX_("b1010",e0,e4,cc,8d),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),116,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPrintfb",77,c4,fc,40)));
HXLINE( 117)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::printf(n,HX_("%#B",24,32,1c,00),null());
HXDLIN( 117)		::utest::Assert_obj::equals(HX_("B1010",c0,54,fa,20),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),117,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPrintfb",77,c4,fc,40)));
HXLINE( 118)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::printf(n,HX_("%#10B",e5,46,1b,65),null());
HXDLIN( 118)		::utest::Assert_obj::equals(HX_("     B1010",a0,18,df,ac),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),118,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPrintfb",77,c4,fc,40)));
HXLINE( 119)		::String _hx_tmp4 = ::thx::format::DecimalFormat_obj::printf(n,HX_("%#010B",b1,3d,1a,12),null());
HXDLIN( 119)		::utest::Assert_obj::equals(HX_("00000B1010",90,7a,d1,72),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),119,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testPrintfb",77,c4,fc,40)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testPrintfb,(void))

void TestDecimalFormat_obj::testRounding(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testRounding",0x671bee4b,"thx.format.TestDecimalFormat.testRounding","thx/format/TestDecimalFormat.hx",122,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 123)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::fixed(::thx::bigint::Decimals_obj::fromFloat(((Float)0.89)),(int)1,null());
HXDLIN( 123)		::utest::Assert_obj::equals(HX_("0.9",7b,94,24,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),123,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testRounding",c6,df,8a,53)));
HXLINE( 124)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::fixed(::thx::bigint::Decimals_obj::fromFloat(((Float)0.99)),(int)0,null());
HXDLIN( 124)		::utest::Assert_obj::equals(HX_("1",31,00,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),124,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testRounding",c6,df,8a,53)));
HXLINE( 125)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::fixed(::thx::bigint::Decimals_obj::fromFloat(((Float)0.91)),(int)1,null());
HXDLIN( 125)		::utest::Assert_obj::equals(HX_("0.9",7b,94,24,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),125,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testRounding",c6,df,8a,53)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testRounding,(void))

void TestDecimalFormat_obj::testDifferentGroups(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testDifferentGroups",0xe1e74096,"thx.format.TestDecimalFormat.testDifferentGroups","thx/format/TestDecimalFormat.hx",128,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 129)		HX_VARI(  ::thx::bigint::DecimalImpl,value) = ::thx::bigint::Decimals_obj::fromFloat(((Float)1234567890.123456));
HXLINE( 130)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::number(value,null(),::thx::format::TestDecimalFormat_obj::asIn);
HXDLIN( 130)		::utest::Assert_obj::equals(HX_("1,23,45,67,890.12",50,62,93,85),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),130,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testDifferentGroups",7b,44,e5,77)));
HXLINE( 131)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::number(value,null(),::thx::format::TestDecimalFormat_obj::baRu);
HXDLIN( 131)		::utest::Assert_obj::equals(HX_("1234567\xc2""\xa0""890,12",b0,f3,31,05),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),131,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testDifferentGroups",7b,44,e5,77)));
HXLINE( 133)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::format(value,HX_("0,0000.0",3e,cb,61,d3),::thx::format::TestDecimalFormat_obj::asIn);
HXDLIN( 133)		::utest::Assert_obj::equals(HX_("1,23,45,67,890.1",a2,cb,5e,2d),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),133,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testDifferentGroups",7b,44,e5,77)));
HXLINE( 134)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::format(value,HX_("0,0000.0",3e,cb,61,d3),::thx::format::TestDecimalFormat_obj::baRu);
HXDLIN( 134)		::utest::Assert_obj::equals(HX_("1234567\xc2""\xa0""890,1",42,86,e3,a1),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),134,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testDifferentGroups",7b,44,e5,77)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testDifferentGroups,(void))

void TestDecimalFormat_obj::testCustomFormat0(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCustomFormat0",0x6c8e9511,"thx.format.TestDecimalFormat.testCustomFormat0","thx/format/TestDecimalFormat.hx",137,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 138)		HX_VARI(  ::thx::bigint::DecimalImpl,value) = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)123);
HXLINE( 140)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(value,HX_("00000",30,ac,1a,c3),null());
HXDLIN( 140)		::utest::Assert_obj::equals(HX_("00123",32,70,1b,c3),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),140,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 142)		value = ::thx::bigint::Decimals_obj::fromFloat(((Float)1.2));
HXLINE( 143)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(value,HX_("0.00",7e,4f,dd,1f),null());
HXDLIN( 143)		::utest::Assert_obj::equals(HX_("1.20",db,87,86,20),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),143,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 144)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::format(value,HX_("00.00",ae,27,19,c3),::thx::format::TestDecimalFormat_obj::it);
HXDLIN( 144)		::utest::Assert_obj::equals(HX_("01,20",89,db,c0,c3),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),144,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 145)		value = ::thx::bigint::Decimals_obj::fromFloat(((Float)0.56));
HXLINE( 146)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::format(value,HX_("0.0",72,94,24,00),::thx::format::TestDecimalFormat_obj::it);
HXDLIN( 146)		::utest::Assert_obj::equals(HX_("0,6",ba,92,24,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),146,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 148)		value = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1234567890);
HXLINE( 149)		::String _hx_tmp4 = ::thx::format::DecimalFormat_obj::format(value,HX_("0,0",b4,92,24,00),null());
HXDLIN( 149)		::utest::Assert_obj::equals(HX_("1,234,567,890",c5,af,3b,ca),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),149,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 150)		::String _hx_tmp5 = ::thx::format::DecimalFormat_obj::format(value,HX_("0,0",b4,92,24,00),::thx::format::TestDecimalFormat_obj::it);
HXDLIN( 150)		::utest::Assert_obj::equals(HX_("1.234.567.890",7f,dc,71,c1),_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),150,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 152)		value = ::thx::bigint::Decimals_obj::fromFloat(((Float)1234567890.123456));
HXLINE( 153)		::String _hx_tmp6 = ::thx::format::DecimalFormat_obj::format(value,HX_("0,0.0",f6,cf,75,c0),null());
HXDLIN( 153)		::utest::Assert_obj::equals(HX_("1,234,567,890.1",48,13,5b,94),_hx_tmp6,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),153,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 155)		value = ::thx::bigint::Decimals_obj::fromFloat(((Float)1234.567890));
HXLINE( 156)		::String _hx_tmp7 = ::thx::format::DecimalFormat_obj::format(value,HX_("0,0.00",7a,27,a0,a6),null());
HXDLIN( 156)		::utest::Assert_obj::equals(HX_("1,234.57",b8,0f,22,96),_hx_tmp7,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),156,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 157)		value = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.12345",e0,75,db,b1));
HXLINE( 158)		::String _hx_tmp8 = ::thx::format::DecimalFormat_obj::format(value,HX_("(000) 0,0.000",77,38,1d,86),null());
HXDLIN( 158)		::utest::Assert_obj::equals(HX_("(1,234,567,8) 90.123",78,10,09,34),_hx_tmp8,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),158,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 159)		::String _hx_tmp9 = ::thx::format::DecimalFormat_obj::format(value,HX_("(000) 00.000",e1,16,84,59),null());
HXDLIN( 159)		::utest::Assert_obj::equals(HX_("(12345678) 90.123",de,ba,55,cb),_hx_tmp9,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),159,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 160)		::String _hx_tmp10 = ::thx::format::DecimalFormat_obj::format(value,HX_("(000) 0.000",b3,21,94,ad),null());
HXDLIN( 160)		::utest::Assert_obj::equals(HX_("(123456789) 0.123",50,04,d2,d5),_hx_tmp10,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),160,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 161)		::String _hx_tmp11 = ::thx::format::DecimalFormat_obj::format(value,HX_("0.0",72,94,24,00),null());
HXDLIN( 161)		::utest::Assert_obj::equals(HX_("1234567890.1",5e,e3,cf,e7),_hx_tmp11,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),161,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 162)		::String _hx_tmp12 = ::thx::format::DecimalFormat_obj::format(value,HX_("(000) 0000",5f,44,b5,0f),null());
HXDLIN( 162)		::utest::Assert_obj::equals(HX_("(123456) 7890",9a,34,fa,61),_hx_tmp12,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),162,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 164)		value = ::thx::bigint::Decimals_obj::fromFloat(((Float)1.23));
HXLINE( 165)		::String _hx_tmp13 = ::thx::format::DecimalFormat_obj::format(value,HX_("(000) 0,0.000",77,38,1d,86),null());
HXDLIN( 165)		::utest::Assert_obj::equals(HX_("(00,0) 01.230",25,5c,d1,df),_hx_tmp13,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),165,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 166)		::String _hx_tmp14 = ::thx::format::DecimalFormat_obj::format(value,HX_("(000) 00.000",e1,16,84,59),null());
HXDLIN( 166)		::utest::Assert_obj::equals(HX_("(000) 01.230",81,32,ec,ec),_hx_tmp14,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),166,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 167)		::String _hx_tmp15 = ::thx::format::DecimalFormat_obj::format(value,HX_("(000) 0.000",b3,21,94,ad),null());
HXDLIN( 167)		::utest::Assert_obj::equals(HX_("(000) 1.230",53,3d,fc,40),_hx_tmp15,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),167,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 168)		::String _hx_tmp16 = ::thx::format::DecimalFormat_obj::format(value,HX_("0.0",72,94,24,00),null());
HXDLIN( 168)		::utest::Assert_obj::equals(HX_("1.2",b5,56,25,00),_hx_tmp16,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),168,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 169)		::String _hx_tmp17 = ::thx::format::DecimalFormat_obj::format(value,HX_("(000) 0000",5f,44,b5,0f),null());
HXDLIN( 169)		::utest::Assert_obj::equals(HX_("(000) 0001",60,44,b5,0f),_hx_tmp17,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),169,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 170)		::String _hx_tmp18 = ::thx::format::DecimalFormat_obj::format(value,HX_("(000) 0000;(000) 0000-",72,a9,fe,24),null());
HXDLIN( 170)		::utest::Assert_obj::equals(HX_("(000) 0001",60,44,b5,0f),_hx_tmp18,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),170,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
HXLINE( 171)		::String _hx_tmp19 = ::thx::format::DecimalFormat_obj::format(value->negate(),HX_("(000) 0000;(000) 0000-",72,a9,fe,24),null());
HXDLIN( 171)		::utest::Assert_obj::equals(HX_("(000) 0001-",cd,8f,e6,ae),_hx_tmp19,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),171,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormat0",b6,65,3b,e1)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCustomFormat0,(void))

void TestDecimalFormat_obj::testCustomFormatHash(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCustomFormatHash",0xf86049ad,"thx.format.TestDecimalFormat.testCustomFormatHash","thx/format/TestDecimalFormat.hx",174,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 175)		HX_VARI(  ::thx::bigint::DecimalImpl,value) = ::thx::bigint::Decimals_obj::fromFloat(((Float)1.2));
HXLINE( 177)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(value,HX_("#.##",0b,7e,45,17),null());
HXDLIN( 177)		::utest::Assert_obj::equals(HX_("1.2",b5,56,25,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),177,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 179)		value = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)123);
HXLINE( 180)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(value,HX_("####",40,25,3d,17),null());
HXDLIN( 180)		::utest::Assert_obj::equals(HX_("123",32,5a,25,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),180,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 183)		value = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)123456);
HXLINE( 184)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::format(value,HX_("[##-##-##]",e2,a7,02,96),::thx::format::TestDecimalFormat_obj::it);
HXDLIN( 184)		::utest::Assert_obj::equals(HX_("[12-34-56]",61,71,be,a8),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),184,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 186)		value = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1234567890);
HXLINE( 187)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::format(value,HX_("#",23,00,00,00),null());
HXDLIN( 187)		::utest::Assert_obj::equals(HX_("1234567890",5b,2e,e3,45),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),187,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 188)		::String _hx_tmp4 = ::thx::format::DecimalFormat_obj::format(value,HX_("(###) ###-####\"",26,8c,17,ad),null());
HXDLIN( 188)		::utest::Assert_obj::equals(HX_("(123) 456-7890",91,ed,bd,51),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),188,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 190)		value = ::thx::bigint::Decimals_obj::parse(HX_("1234567890.12345",e0,75,db,b1));
HXLINE( 191)		::String _hx_tmp5 = ::thx::format::DecimalFormat_obj::format(value,HX_("(###) #,#.###",bd,a3,7a,47),null());
HXDLIN( 191)		::utest::Assert_obj::equals(HX_("(1,234,567,8) 90.123",78,10,09,34),_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),191,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 192)		::String _hx_tmp6 = ::thx::format::DecimalFormat_obj::format(value,HX_("(###) ##.###",27,15,4b,a5),null());
HXDLIN( 192)		::utest::Assert_obj::equals(HX_("(12345678) 90.123",de,ba,55,cb),_hx_tmp6,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),192,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 193)		::String _hx_tmp7 = ::thx::format::DecimalFormat_obj::format(value,HX_("(###) #.###",86,77,ba,cf),null());
HXDLIN( 193)		::utest::Assert_obj::equals(HX_("(123456789) 0.123",50,04,d2,d5),_hx_tmp7,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),193,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 194)		::String _hx_tmp8 = ::thx::format::DecimalFormat_obj::format(value,HX_("#.#",18,b7,1a,00),null());
HXDLIN( 194)		::utest::Assert_obj::equals(HX_("1234567890.1",5e,e3,cf,e7),_hx_tmp8,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),194,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 195)		::String _hx_tmp9 = ::thx::format::DecimalFormat_obj::format(value,HX_("(###) ####",32,6d,aa,4c),null());
HXDLIN( 195)		::utest::Assert_obj::equals(HX_("(123456) 7890",9a,34,fa,61),_hx_tmp9,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),195,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 197)		value = ::thx::bigint::Decimals_obj::fromFloat(((Float)1.23));
HXLINE( 198)		::String _hx_tmp10 = ::thx::format::DecimalFormat_obj::format(value,HX_("(###) #,#.###",bd,a3,7a,47),null());
HXDLIN( 198)		::utest::Assert_obj::equals(HX_("() 1.23",5d,71,55,71),_hx_tmp10,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),198,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 199)		::String _hx_tmp11 = ::thx::format::DecimalFormat_obj::format(value,HX_("(###) ##.###",27,15,4b,a5),null());
HXDLIN( 199)		::utest::Assert_obj::equals(HX_("() 1.23",5d,71,55,71),_hx_tmp11,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),199,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 200)		::String _hx_tmp12 = ::thx::format::DecimalFormat_obj::format(value,HX_("(###) #.###",86,77,ba,cf),null());
HXDLIN( 200)		::utest::Assert_obj::equals(HX_("() 1.23",5d,71,55,71),_hx_tmp12,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),200,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 201)		::String _hx_tmp13 = ::thx::format::DecimalFormat_obj::format(value,HX_("#.#",18,b7,1a,00),null());
HXDLIN( 201)		::utest::Assert_obj::equals(HX_("1.2",b5,56,25,00),_hx_tmp13,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),201,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 202)		::String _hx_tmp14 = ::thx::format::DecimalFormat_obj::format(value,HX_("(###) ####",32,6d,aa,4c),null());
HXDLIN( 202)		::utest::Assert_obj::equals(HX_("() 1",52,c1,8f,1a),_hx_tmp14,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),202,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 203)		::String _hx_tmp15 = ::thx::format::DecimalFormat_obj::format(value,HX_("(###) ####;(###) ####-",92,d2,45,28),null());
HXDLIN( 203)		::utest::Assert_obj::equals(HX_("() 1",52,c1,8f,1a),_hx_tmp15,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),203,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
HXLINE( 204)		::String _hx_tmp16 = ::thx::format::DecimalFormat_obj::format(value->negate(),HX_("(###) ####;(###) ####-",92,d2,45,28),null());
HXDLIN( 204)		::utest::Assert_obj::equals(HX_("() 1-",9b,66,39,23),_hx_tmp16,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),204,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomFormatHash",28,ae,a5,a0)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCustomFormatHash,(void))

void TestDecimalFormat_obj::testCustomDecimalSeparator(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCustomDecimalSeparator",0x3847de9c,"thx.format.TestDecimalFormat.testCustomDecimalSeparator","thx/format/TestDecimalFormat.hx",207,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 208)		HX_VARI(  ::thx::bigint::DecimalImpl,value) = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)1234567890);
HXLINE( 210)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(value,HX_("#,#",5a,b5,1a,00),null());
HXDLIN( 210)		::utest::Assert_obj::equals(HX_("1,234,567,890",c5,af,3b,ca),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),210,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomDecimalSeparator",57,51,80,3f)));
HXLINE( 212)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(value,HX_("#,#,,",5a,66,36,44),null());
HXDLIN( 212)		::utest::Assert_obj::equals(HX_("1,235",59,ed,dd,53),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),212,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomDecimalSeparator",57,51,80,3f)));
HXLINE( 213)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::format(value,HX_("#,##0,,",c7,74,70,85),null());
HXDLIN( 213)		::utest::Assert_obj::equals(HX_("1,235",59,ed,dd,53),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),213,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomDecimalSeparator",57,51,80,3f)));
HXLINE( 215)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::format(value,HX_("#,#,,,",92,28,63,6b),null());
HXDLIN( 215)		::utest::Assert_obj::equals(HX_("1",31,00,00,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),215,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomDecimalSeparator",57,51,80,3f)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCustomDecimalSeparator,(void))

void TestDecimalFormat_obj::testCustomDecimalFranction(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCustomDecimalFranction",0x95fb1215,"thx.format.TestDecimalFormat.testCustomDecimalFranction","thx/format/TestDecimalFormat.hx",218,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 219)		HX_VARI(  ::thx::bigint::DecimalImpl,value) = ::thx::bigint::Decimals_obj::fromFloat(((Float)1.2));
HXLINE( 221)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(value,HX_("0.00",7e,4f,dd,1f),null());
HXDLIN( 221)		::utest::Assert_obj::equals(HX_("1.20",db,87,86,20),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),221,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomDecimalFranction",d0,84,33,9d)));
HXLINE( 222)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(value,HX_("00.00",ae,27,19,c3),null());
HXDLIN( 222)		::utest::Assert_obj::equals(HX_("01.20",0b,60,c2,c3),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),222,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomDecimalFranction",d0,84,33,9d)));
HXLINE( 223)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::format(value,HX_("00.00",ae,27,19,c3),::thx::format::TestDecimalFormat_obj::it);
HXDLIN( 223)		::utest::Assert_obj::equals(HX_("01,20",89,db,c0,c3),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),223,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomDecimalFranction",d0,84,33,9d)));
HXLINE( 225)		value = ::thx::bigint::Decimals_obj::fromFloat(((Float)0.086));
HXLINE( 226)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::format(value,HX_("#0.##%",44,f7,3b,c0),null());
HXDLIN( 226)		::utest::Assert_obj::equals(HX_("8.6%",a5,09,27,25),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),226,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomDecimalFranction",d0,84,33,9d)));
HXLINE( 227)		::String _hx_tmp4 = ::thx::format::DecimalFormat_obj::format(value,HX_("#0.00%",e4,df,45,c0),null());
HXDLIN( 227)		::utest::Assert_obj::equals(HX_("8.60%",75,70,01,5d),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),227,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomDecimalFranction",d0,84,33,9d)));
HXLINE( 229)		value = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)86000);
HXLINE( 230)		::String _hx_tmp5 = ::thx::format::DecimalFormat_obj::format(value,HX_("0.###E+0",05,a4,2b,6f),null());
HXDLIN( 230)		::utest::Assert_obj::equals(HX_("8.6E+4",ae,ea,50,04),_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),230,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomDecimalFranction",d0,84,33,9d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCustomDecimalFranction,(void))

void TestDecimalFormat_obj::testCustomPercentSpecifier(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCustomPercentSpecifier",0x20f27ec1,"thx.format.TestDecimalFormat.testCustomPercentSpecifier","thx/format/TestDecimalFormat.hx",234,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 234)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)0.086)),HX_("#0.##%",44,f7,3b,c0),null());
HXDLIN( 234)		::utest::Assert_obj::equals(HX_("8.6%",a5,09,27,25),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),234,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomPercentSpecifier",7c,f1,2a,28)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCustomPercentSpecifier,(void))

void TestDecimalFormat_obj::testCustomPermilleSpecifier(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCustomPermilleSpecifier",0x94e1b78a,"thx.format.TestDecimalFormat.testCustomPermilleSpecifier","thx/format/TestDecimalFormat.hx",238,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 238)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)0.00354)),HX_("#0.##\xe2""\x80""\xb0""",71,2a,2b,41),null());
HXDLIN( 238)		::utest::Assert_obj::equals(HX_("3.54\xe2""\x80""\xb0""",18,06,79,54),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),238,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomPermilleSpecifier",6f,a8,0d,df)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCustomPermilleSpecifier,(void))

void TestDecimalFormat_obj::testCustomE(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCustomE",0x05680a5d,"thx.format.TestDecimalFormat.testCustomE","thx/format/TestDecimalFormat.hx",241,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 242)		HX_VARI(  ::thx::bigint::DecimalImpl,value) = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)86000);
HXLINE( 243)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(value,HX_("0.###E+0",05,a4,2b,6f),null());
HXDLIN( 243)		::utest::Assert_obj::equals(HX_("8.6E+4",ae,ea,50,04),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),243,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomE",42,21,6d,1d)));
HXLINE( 244)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(value,HX_("0.###E+000",45,99,60,4c),null());
HXDLIN( 244)		::utest::Assert_obj::equals(HX_("8.6E+004",2e,93,60,6a),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),244,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomE",42,21,6d,1d)));
HXLINE( 245)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::format(value,HX_("0.###E-000",83,06,b3,4d),null());
HXDLIN( 245)		::utest::Assert_obj::equals(HX_("8.6E004",8f,35,80,c2),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),245,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomE",42,21,6d,1d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCustomE,(void))

void TestDecimalFormat_obj::testCustomEscape(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCustomEscape",0x9b331689,"thx.format.TestDecimalFormat.testCustomEscape","thx/format/TestDecimalFormat.hx",248,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 249)		HX_VARI(  ::thx::bigint::DecimalImpl,value) = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)123);
HXLINE( 250)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(value,HX_("\\#\\#\\# ##0 dollars and \\0\\0 c\\ents \\#\\#\\#",89,82,4c,6d),null());
HXDLIN( 250)		::utest::Assert_obj::equals(HX_("### 123 dollars and 00 cents ###",eb,47,30,88),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),250,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomEscape",84,e1,b7,ba)));
HXLINE( 251)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(value,HX_("\\\\\\\\\\\\ ##0 dollars and \\0\\0 c\\ents \\\\\\\\\\\\",69,eb,ec,ec),null());
HXDLIN( 251)		::utest::Assert_obj::equals(HX_("\\\\\\ 123 dollars and 00 cents \\\\\\",4b,c2,11,d4),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),251,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomEscape",84,e1,b7,ba)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCustomEscape,(void))

void TestDecimalFormat_obj::testSectionSeparator(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testSectionSeparator",0xe04759b7,"thx.format.TestDecimalFormat.testSectionSeparator","thx/format/TestDecimalFormat.hx",254,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 255)		HX_VARI(  ::thx::bigint::DecimalImpl,pos) = ::thx::bigint::Decimals_obj::fromFloat(((Float)1234.0));
HXDLIN( 255)		HX_VARI(  ::thx::bigint::DecimalImpl,neg) = ::thx::bigint::Decimals_obj::fromFloat(((Float)-1234.0));
HXDLIN( 255)		HX_VARI(  ::thx::bigint::DecimalImpl,zero) = ::thx::_Decimal::Decimal_Impl__obj::fromInt((int)0);
HXLINE( 262)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(pos,HX_("##;(##)",7c,4d,1c,c1),null());
HXDLIN( 262)		::utest::Assert_obj::equals(HX_("1234",c2,91,89,20),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),262,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testSectionSeparator",32,be,8c,88)));
HXLINE( 263)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(neg,HX_("##;(##)",7c,4d,1c,c1),null());
HXDLIN( 263)		::utest::Assert_obj::equals(HX_("(1234)",ff,66,1c,56),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),263,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testSectionSeparator",32,be,8c,88)));
HXLINE( 264)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::format(zero,HX_("##;(##)",7c,4d,1c,c1),null());
HXDLIN( 264)		::utest::Assert_obj::equals(HX_("0",30,00,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),264,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testSectionSeparator",32,be,8c,88)));
HXLINE( 266)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::format(pos,HX_("##;(##);**Z\\ero**",c1,4e,ae,37),null());
HXDLIN( 266)		::utest::Assert_obj::equals(HX_("1234",c2,91,89,20),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),266,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testSectionSeparator",32,be,8c,88)));
HXLINE( 267)		::String _hx_tmp4 = ::thx::format::DecimalFormat_obj::format(neg,HX_("##;(##);**Z\\ero**",c1,4e,ae,37),null());
HXDLIN( 267)		::utest::Assert_obj::equals(HX_("(1234)",ff,66,1c,56),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),267,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testSectionSeparator",32,be,8c,88)));
HXLINE( 268)		::String _hx_tmp5 = ::thx::format::DecimalFormat_obj::format(zero,HX_("##;(##);**Z\\ero**",c1,4e,ae,37),null());
HXDLIN( 268)		::utest::Assert_obj::equals(HX_("**Zero**",c8,f6,11,a4),_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),268,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testSectionSeparator",32,be,8c,88)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testSectionSeparator,(void))

void TestDecimalFormat_obj::testCustomRounding(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCustomRounding",0x06fd5e5c,"thx.format.TestDecimalFormat.testCustomRounding","thx/format/TestDecimalFormat.hx",271,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 272)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)0.99)),HX_("0",30,00,00,00),null());
HXDLIN( 272)		::utest::Assert_obj::equals(HX_("1",31,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),272,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomRounding",17,1e,87,a9)));
HXLINE( 273)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)0.99)),HX_("0.0",72,94,24,00),null());
HXDLIN( 273)		::utest::Assert_obj::equals(HX_("1.0",b3,56,25,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),273,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomRounding",17,1e,87,a9)));
HXLINE( 274)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)0.099)),HX_("0.0",72,94,24,00),null());
HXDLIN( 274)		::utest::Assert_obj::equals(HX_("0.1",73,94,24,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),274,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomRounding",17,1e,87,a9)));
HXLINE( 275)		::String _hx_tmp3 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)9.9)),HX_("0",30,00,00,00),null());
HXDLIN( 275)		::utest::Assert_obj::equals(HX_("10",df,2a,00,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),275,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomRounding",17,1e,87,a9)));
HXLINE( 276)		::String _hx_tmp4 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)99.9)),HX_("0",30,00,00,00),null());
HXDLIN( 276)		::utest::Assert_obj::equals(HX_("100",71,58,25,00),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),276,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomRounding",17,1e,87,a9)));
HXLINE( 277)		::String _hx_tmp5 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)-0.99)),HX_("0",30,00,00,00),null());
HXDLIN( 277)		::utest::Assert_obj::equals(HX_("-1",64,27,00,00),_hx_tmp5,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),277,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomRounding",17,1e,87,a9)));
HXLINE( 278)		::String _hx_tmp6 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)-0.99)),HX_("0.0",72,94,24,00),null());
HXDLIN( 278)		::utest::Assert_obj::equals(HX_("-1.0",a6,f0,e3,1d),_hx_tmp6,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),278,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomRounding",17,1e,87,a9)));
HXLINE( 279)		::String _hx_tmp7 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)-0.099)),HX_("0.0",72,94,24,00),null());
HXDLIN( 279)		::utest::Assert_obj::equals(HX_("-0.1",66,2e,e3,1d),_hx_tmp7,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),279,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomRounding",17,1e,87,a9)));
HXLINE( 280)		::String _hx_tmp8 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)-9.9)),HX_("0",30,00,00,00),null());
HXDLIN( 280)		::utest::Assert_obj::equals(HX_("-10",4c,50,22,00),_hx_tmp8,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),280,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomRounding",17,1e,87,a9)));
HXLINE( 281)		::String _hx_tmp9 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)-99.9)),HX_("0",30,00,00,00),null());
HXDLIN( 281)		::utest::Assert_obj::equals(HX_("-100",64,f2,e3,1d),_hx_tmp9,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),281,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomRounding",17,1e,87,a9)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCustomRounding,(void))

void TestDecimalFormat_obj::testCustomEscapedDecimalSeparator(){
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","testCustomEscapedDecimalSeparator",0x8b3dd56f,"thx.format.TestDecimalFormat.testCustomEscapedDecimalSeparator","thx/format/TestDecimalFormat.hx",284,0x7ad74375)
            	HX_STACK_THIS(this)
HXLINE( 285)		::String _hx_tmp = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)12.34)),HX_("0\\.0.0",30,15,8b,48),null());
HXDLIN( 285)		::utest::Assert_obj::equals(HX_("1.2.3",3a,56,30,55),_hx_tmp,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),285,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomEscapedDecimalSeparator",14,00,b1,99)));
HXLINE( 286)		::String _hx_tmp1 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)12.34)),HX_("0'.'0.0",82,ec,4b,fa),null());
HXDLIN( 286)		::utest::Assert_obj::equals(HX_("1.2.3",3a,56,30,55),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),286,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomEscapedDecimalSeparator",14,00,b1,99)));
HXLINE( 287)		::String _hx_tmp2 = ::thx::format::DecimalFormat_obj::format(::thx::bigint::Decimals_obj::fromFloat(((Float)12.34)),HX_("0\".\"0.0",8c,0d,35,f7),null());
HXDLIN( 287)		::utest::Assert_obj::equals(HX_("1.2.3",3a,56,30,55),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDecimalFormat.hx",a8,b5,d2,72),287,HX_("thx.format.TestDecimalFormat",09,4d,91,a8),HX_("testCustomEscapedDecimalSeparator",14,00,b1,99)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDecimalFormat_obj,testCustomEscapedDecimalSeparator,(void))

 ::thx::culture::Culture TestDecimalFormat_obj::it;

 ::thx::culture::Culture TestDecimalFormat_obj::us;

 ::thx::culture::Culture TestDecimalFormat_obj::asIn;

 ::thx::culture::Culture TestDecimalFormat_obj::baRu;


TestDecimalFormat_obj::TestDecimalFormat_obj()
{
}

hx::Val TestDecimalFormat_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"testUnit") ) { return hx::Val( testUnit_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testNumber") ) { return hx::Val( testNumber_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testPercent") ) { return hx::Val( testPercent_dyn()); }
		if (HX_FIELD_EQ(inName,"testDecimal") ) { return hx::Val( testDecimal_dyn()); }
		if (HX_FIELD_EQ(inName,"testPrintfd") ) { return hx::Val( testPrintfd_dyn()); }
		if (HX_FIELD_EQ(inName,"testPrintfb") ) { return hx::Val( testPrintfb_dyn()); }
		if (HX_FIELD_EQ(inName,"testCustomE") ) { return hx::Val( testCustomE_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testCurrency") ) { return hx::Val( testCurrency_dyn()); }
		if (HX_FIELD_EQ(inName,"testPermille") ) { return hx::Val( testPermille_dyn()); }
		if (HX_FIELD_EQ(inName,"testRounding") ) { return hx::Val( testRounding_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testCurrencyIT") ) { return hx::Val( testCurrencyIT_dyn()); }
		if (HX_FIELD_EQ(inName,"testCurrencyUS") ) { return hx::Val( testCurrencyUS_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testFormatFixed") ) { return hx::Val( testFormatFixed_dyn()); }
		if (HX_FIELD_EQ(inName,"testExponential") ) { return hx::Val( testExponential_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testCustomEscape") ) { return hx::Val( testCustomEscape_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testCustomFormat0") ) { return hx::Val( testCustomFormat0_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"testCustomRounding") ) { return hx::Val( testCustomRounding_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testDifferentGroups") ) { return hx::Val( testDifferentGroups_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"testCustomFormatHash") ) { return hx::Val( testCustomFormatHash_dyn()); }
		if (HX_FIELD_EQ(inName,"testSectionSeparator") ) { return hx::Val( testSectionSeparator_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"testCustomDecimalSeparator") ) { return hx::Val( testCustomDecimalSeparator_dyn()); }
		if (HX_FIELD_EQ(inName,"testCustomDecimalFranction") ) { return hx::Val( testCustomDecimalFranction_dyn()); }
		if (HX_FIELD_EQ(inName,"testCustomPercentSpecifier") ) { return hx::Val( testCustomPercentSpecifier_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"testCustomPermilleSpecifier") ) { return hx::Val( testCustomPermilleSpecifier_dyn()); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"testCustomEscapedDecimalSeparator") ) { return hx::Val( testCustomEscapedDecimalSeparator_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestDecimalFormat_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"it") ) { outValue = it; return true; }
		if (HX_FIELD_EQ(inName,"us") ) { outValue = us; return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"asIn") ) { outValue = asIn; return true; }
		if (HX_FIELD_EQ(inName,"baRu") ) { outValue = baRu; return true; }
	}
	return false;
}

bool TestDecimalFormat_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"it") ) { it=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"us") ) { us=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"asIn") ) { asIn=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"baRu") ) { baRu=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestDecimalFormat_obj_sMemberStorageInfo = 0;
static hx::StaticInfo TestDecimalFormat_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestDecimalFormat_obj::it,HX_HCSTRING("it","\xeb","\x5b","\x00","\x00")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestDecimalFormat_obj::us,HX_HCSTRING("us","\x5e","\x66","\x00","\x00")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestDecimalFormat_obj::asIn,HX_HCSTRING("asIn","\x77","\x35","\x75","\x40")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestDecimalFormat_obj::baRu,HX_HCSTRING("baRu","\x62","\xcb","\x10","\x41")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TestDecimalFormat_obj_sMemberFields[] = {
	HX_HCSTRING("testNumber","\xbb","\xcc","\x6e","\xba"),
	HX_HCSTRING("testCurrency","\xc3","\x2d","\x4c","\x0e"),
	HX_HCSTRING("testCurrencyIT","\x6e","\xa4","\x05","\x5c"),
	HX_HCSTRING("testCurrencyUS","\xe1","\xae","\x05","\x5c"),
	HX_HCSTRING("testPercent","\x93","\x98","\xa3","\x35"),
	HX_HCSTRING("testPermille","\x7e","\x04","\x27","\x7e"),
	HX_HCSTRING("testUnit","\xf6","\x4f","\xdc","\x50"),
	HX_HCSTRING("testDecimal","\x5f","\xa2","\x9c","\xa3"),
	HX_HCSTRING("testFormatFixed","\x8b","\x3f","\x8a","\x0e"),
	HX_HCSTRING("testExponential","\x53","\xe3","\x49","\x49"),
	HX_HCSTRING("testPrintfd","\x79","\xc4","\xfc","\x40"),
	HX_HCSTRING("testPrintfb","\x77","\xc4","\xfc","\x40"),
	HX_HCSTRING("testRounding","\xc6","\xdf","\x8a","\x53"),
	HX_HCSTRING("testDifferentGroups","\x7b","\x44","\xe5","\x77"),
	HX_HCSTRING("testCustomFormat0","\xb6","\x65","\x3b","\xe1"),
	HX_HCSTRING("testCustomFormatHash","\x28","\xae","\xa5","\xa0"),
	HX_HCSTRING("testCustomDecimalSeparator","\x57","\x51","\x80","\x3f"),
	HX_HCSTRING("testCustomDecimalFranction","\xd0","\x84","\x33","\x9d"),
	HX_HCSTRING("testCustomPercentSpecifier","\x7c","\xf1","\x2a","\x28"),
	HX_HCSTRING("testCustomPermilleSpecifier","\x6f","\xa8","\x0d","\xdf"),
	HX_HCSTRING("testCustomE","\x42","\x21","\x6d","\x1d"),
	HX_HCSTRING("testCustomEscape","\x84","\xe1","\xb7","\xba"),
	HX_HCSTRING("testSectionSeparator","\x32","\xbe","\x8c","\x88"),
	HX_HCSTRING("testCustomRounding","\x17","\x1e","\x87","\xa9"),
	HX_HCSTRING("testCustomEscapedDecimalSeparator","\x14","\x00","\xb1","\x99"),
	::String(null()) };

static void TestDecimalFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestDecimalFormat_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TestDecimalFormat_obj::it,"it");
	HX_MARK_MEMBER_NAME(TestDecimalFormat_obj::us,"us");
	HX_MARK_MEMBER_NAME(TestDecimalFormat_obj::asIn,"asIn");
	HX_MARK_MEMBER_NAME(TestDecimalFormat_obj::baRu,"baRu");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestDecimalFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestDecimalFormat_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TestDecimalFormat_obj::it,"it");
	HX_VISIT_MEMBER_NAME(TestDecimalFormat_obj::us,"us");
	HX_VISIT_MEMBER_NAME(TestDecimalFormat_obj::asIn,"asIn");
	HX_VISIT_MEMBER_NAME(TestDecimalFormat_obj::baRu,"baRu");
};

#endif

hx::Class TestDecimalFormat_obj::__mClass;

static ::String TestDecimalFormat_obj_sStaticFields[] = {
	HX_HCSTRING("it","\xeb","\x5b","\x00","\x00"),
	HX_HCSTRING("us","\x5e","\x66","\x00","\x00"),
	HX_HCSTRING("asIn","\x77","\x35","\x75","\x40"),
	HX_HCSTRING("baRu","\x62","\xcb","\x10","\x41"),
	::String(null())
};

void TestDecimalFormat_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.format.TestDecimalFormat","\x09","\x4d","\x91","\xa8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestDecimalFormat_obj::__GetStatic;
	__mClass->mSetStaticField = &TestDecimalFormat_obj::__SetStatic;
	__mClass->mMarkFunc = TestDecimalFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestDecimalFormat_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestDecimalFormat_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestDecimalFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestDecimalFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDecimalFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDecimalFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestDecimalFormat_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","boot",0x7b5805b7,"thx.format.TestDecimalFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)9)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(".",2e,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xac""",4c,ef,ab,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("Non un numero reale",f7,bd,ea,94))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("+Infinito",29,76,a7,22))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)2)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinito",2b,48,8a,c8))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(".",2e,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(".",2e,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("italiano",af,a6,00,8b))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Italy",03,12,37,55))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd d MMMM yyyy HH:mm:ss",dc,7e,69,9b))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("calendario gregoriano",45,88,b6,ba))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstFourDayWeek",fa,56,48,9b))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("dd MMMM",60,27,05,da))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd d MMMM yyyy",44,a9,80,93))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("do",8b,57,00,00))->init(1,HX_("lu",89,5e,00,00))->init(2,HX_("ma",54,5f,00,00))->init(3,HX_("me",58,5f,00,00))->init(4,HX_("gi",22,5a,00,00))->init(5,HX_("ve",2f,67,00,00))->init(6,HX_("sa",8e,64,00,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("dom",82,42,4c,00))->init(1,HX_("lun",c5,59,52,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("mer",1a,0e,53,00))->init(4,HX_("gio",0d,84,4e,00))->init(5,HX_("ven",5f,e2,59,00))->init(6,HX_("sab",14,98,57,00)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("HH:mm",1a,83,9d,a4))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("HH:mm:ss",80,50,d2,03))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("domenica",bc,78,e7,64))->init(1,HX_("luned\xc3""\xac""",ed,38,f2,eb))->init(2,HX_("marted\xc3""\xac""",be,1b,56,be))->init(3,HX_("mercoled\xc3""\xac""",0e,02,2a,7a))->init(4,HX_("gioved\xc3""\xac""",f1,38,8e,a7))->init(5,HX_("venerd\xc3""\xac""",e1,9a,99,33))->init(6,HX_("sabato",88,ac,f9,15)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd/MM/yyyy",40,9b,42,af))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)2)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("Italia",0e,a3,f8,3a))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("it-IT",4d,0e,e2,c1))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("it-IT",4d,0e,e2,c1))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("it",eb,5b,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("ita",16,12,50,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1040)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ITA",f6,ad,37,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Italian",a0,09,96,5e)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		it = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","boot",0x7b5805b7,"thx.format.TestDecimalFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)0)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(",",2c,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("$",24,00,00,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("NaN",9b,84,3b,00))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("Infinity",08,d3,1a,b4))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(".",2e,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)0)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)0)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)0)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinity",35,48,8a,c8))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(",",2c,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(".",2e,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(",",2c,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(".",2e,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("English",10,8f,83,c6))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("United States",df,3b,55,64))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd, MMMM dd, yyyy h:mm:ss tt",b8,2b,cf,ac))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("Gregorian Calendar",78,a4,39,8d))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Sunday",70,80,82,d6))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("MMMM dd",e0,38,48,d4))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd, MMMM dd, yyyy",20,cf,04,b3))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("Su",c2,48,00,00))->init(1,HX_("Mo",82,43,00,00))->init(2,HX_("Tu",a1,49,00,00))->init(3,HX_("We",2e,4c,00,00))->init(4,HX_("Th",94,49,00,00))->init(5,HX_("Fr",6c,3d,00,00))->init(6,HX_("Sa",ae,48,00,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("AM",ec,38,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("PM",fd,45,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("Sun",6c,61,3f,00))->init(1,HX_("Mon",ac,ce,3a,00))->init(2,HX_("Tue",a4,23,40,00))->init(3,HX_("Wed",76,5c,42,00))->init(4,HX_("Thu",61,18,40,00))->init(5,HX_("Fri",7d,81,35,00))->init(6,HX_("Sat",06,50,3f,00)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("h:mm tt",2e,56,3d,20))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("h:mm:ss tt",b8,7e,f4,ab))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)0)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM, yyyy",f4,2a,01,54))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("Sunday",70,80,82,d6))->init(1,HX_("Monday",30,db,f6,fb))->init(2,HX_("Tuesday",6d,85,94,e0))->init(3,HX_("Wednesday",76,20,5e,ee))->init(4,HX_("Thursday",3a,c9,04,61))->init(5,HX_("Friday",ff,00,5d,e6))->init(6,HX_("Saturday",59,42,eb,57)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("M/d/yyyy",4d,85,79,32))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(",",2c,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("United States",df,3b,55,64))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("en-US",02,7f,50,70))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("en-US",02,7f,50,70))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("en",69,58,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("eng",de,03,4d,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1033)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ENU",cc,9f,34,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("English",10,8f,83,c6)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		us = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","boot",0x7b5805b7,"thx.format.TestDecimalFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)12)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(",",2c,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xb9""",59,ef,ab,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)2))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("nan",db,cc,53,00))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("infinity",e8,16,69,da))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(".",2e,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)1)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-infinity",15,8c,d8,ee))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(",",2c,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(".",2e,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)2))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(",",2c,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(".",2e,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)2))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("\xe0""\xa6""\x85""\xe0""\xa6""\xb8""\xe0""\xa6""\xae""\xe0""\xa7""\x80""\xe0""\xa7""\x9f""\xe0""\xa6""\xbe""",c4,68,50,d2))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("India",57,0e,42,51))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("yyyy,MMMM dd, dddd tt h:mm:ss",00,9a,90,99))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("\xe0""\xa6""\x87""\xe0""\xa6""\x82""\xe0""\xa7""\xb0""\xe0""\xa6""\xbe""\xe0""\xa6""\x9c""\xe0""\xa7""\x80"" \xe0""\xa6""\x95""\xe0""\xa7""\x87""\xe0""\xa6""\xb2""\xe0""\xa7""\x87""\xe0""\xa6""\xa3""\xe0""\xa7""\x8d""\xe0""\xa6""\xa1""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",ab,4f,b9,90))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstFourDayWeek",fa,56,48,9b))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("\xe0""\xa6""\x9c""\xe0""\xa6""\xbe""\xe0""\xa6""\xa8""\xe0""\xa7""\x81""\xe0""\xa7""\xb1""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""\xe0""\xa7""\x80""",b8,3b,0c,8b))->init(1,HX_("\xe0""\xa6""\xab""\xe0""\xa7""\x87""\xe0""\xa6""\xac""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa7""\x81""\xe0""\xa7""\xb1""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""\xe0""\xa7""\x80""",a9,8d,33,d0))->init(2,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\xbe""\xe0""\xa6""\xb0""\xe0""\xa7""\x8d""\xe0""\xa6""\x9a""",88,6d,d0,26))->init(3,HX_("\xe0""\xa6""\x8f""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa6""\xbf""\xe0""\xa6""\xb2""",d2,2f,84,95))->init(4,HX_("\xe0""\xa6""\xae""\xe0""\xa7""\x87""",b8,c9,22,98))->init(5,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xa8""",1e,02,d1,0e))->init(6,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xb2""\xe0""\xa6""\xbe""\xe0""\xa6""\x87""",f1,42,8f,ce))->init(7,HX_("\xe0""\xa6""\x86""\xe0""\xa6""\x97""\xe0""\xa6""\xb7""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""",b3,cd,7a,18))->init(8,HX_("\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",f7,0d,8e,2c))->init(9,HX_("\xe0""\xa6""\x85""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x8b""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",e5,74,f3,c5))->init(10,HX_("\xe0""\xa6""\xa8""\xe0""\xa6""\xac""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",1e,ee,15,51))->init(11,HX_("\xe0""\xa6""\xa1""\xe0""\xa6""\xbf""\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",cc,e9,4e,8f))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("\xe0""\xa6""\x9c""\xe0""\xa6""\xbe""\xe0""\xa6""\xa8""\xe0""\xa7""\x81""",5a,09,26,60))->init(1,HX_("\xe0""\xa6""\xab""\xe0""\xa7""\x87""\xe0""\xa6""\xac""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa7""\x81""",cb,f5,23,e0))->init(2,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\xbe""\xe0""\xa6""\xb0""\xe0""\xa7""\x8d""\xe0""\xa6""\x9a""",88,6d,d0,26))->init(3,HX_("\xe0""\xa6""\x8f""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa6""\xbf""\xe0""\xa6""\xb2""",d2,2f,84,95))->init(4,HX_("\xe0""\xa6""\xae""\xe0""\xa7""\x87""",b8,c9,22,98))->init(5,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xa8""",1e,02,d1,0e))->init(6,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xb2""\xe0""\xa6""\xbe""\xe0""\xa6""\x87""",f1,42,8f,ce))->init(7,HX_("\xe0""\xa6""\x86""\xe0""\xa6""\x97""\xe0""\xa6""\xb7""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""",b3,cd,7a,18))->init(8,HX_("\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x87""",75,aa,1f,1a))->init(9,HX_("\xe0""\xa6""\x85""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x8b""",61,9a,51,31))->init(10,HX_("\xe0""\xa6""\xa8""\xe0""\xa6""\xac""\xe0""\xa7""\x87""",1c,2c,d8,8a))->init(11,HX_("\xe0""\xa6""\xa1""\xe0""\xa6""\xbf""\xe0""\xa6""\x9a""\xe0""\xa7""\x87""",ca,da,ee,41))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("dd MMMM",60,27,05,da))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("yyyy,MMMM dd, dddd",68,90,ec,32))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("\xe0""\xa6""\xb8""\xe0""\xa7""\x8b""",f2,eb,be,9e))->init(1,HX_("\xe0""\xa6""\xae""",28,8a,aa,00))->init(2,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x81""",74,5c,d0,96))->init(3,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x83""",76,5c,d0,96))->init(4,HX_("\xe0""\xa6""\xb6""\xe0""\xa7""\x81""",aa,7e,6c,9d))->init(5,HX_("\xe0""\xa6""\xb6""",30,8a,aa,00))->init(6,HX_("\xe0""\xa6""\xb0""",2a,8a,aa,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("-",2d,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("\xe0""\xa7""\xb0""\xe0""\xa6""\xbe""\xe0""\xa6""\xa4""\xe0""\xa6""\xbf""\xe0""\xa6""\xaa""\xe0""\xa7""\x81""",a0,f1,69,60))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("\xe0""\xa6""\x86""\xe0""\xa6""\xac""\xe0""\xa7""\x87""\xe0""\xa6""\xb2""\xe0""\xa6""\xbf""",87,21,d1,d0))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("\xe0""\xa6""\xb8""\xe0""\xa7""\x8b""\xe0""\xa6""\xae"".",f8,25,97,eb))->init(1,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\x99""\xe0""\xa7""\x8d""\xe0""\xa6""\x97""\xe0""\xa6""\xb2"".",98,3d,1c,8c))->init(2,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x81""\xe0""\xa6""\xa7"".",61,f9,37,7b))->init(3,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x83""\xe0""\xa6""\xb9"".",11,32,05,a2))->init(4,HX_("\xe0""\xa6""\xb6""\xe0""\xa7""\x81""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0"".",a5,ed,67,69))->init(5,HX_("\xe0""\xa6""\xb6""\xe0""\xa6""\xa8""\xe0""\xa6""\xbf"".",c7,c6,75,c5))->init(6,HX_("\xe0""\xa7""\xb0""\xe0""\xa6""\xac""\xe0""\xa6""\xbf"".",12,d5,d2,8e)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("tt h:mm",52,cd,dc,ea))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("tt h:mm:ss",48,39,c1,fd))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM,yy",4c,66,51,d4))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("\xe0""\xa6""\xb8""\xe0""\xa7""\x8b""\xe0""\xa6""\xae""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",41,de,54,6e))->init(1,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\x99""\xe0""\xa7""\x8d""\xe0""\xa6""\x97""\xe0""\xa6""\xb2""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",e1,95,2a,23))->init(2,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x81""\xe0""\xa6""\xa7""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",aa,c2,84,1c))->init(3,HX_("\xe0""\xa6""\xac""\xe0""\xa7""\x83""\xe0""\xa6""\xb9""\xe0""\xa6""\xb8""\xe0""\xa7""\x8d""\xe0""\xa6""\xaa""\xe0""\xa6""\xa4""\xe0""\xa6""\xbf""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",09,26,8c,b3))->init(4,HX_("\xe0""\xa6""\xb6""\xe0""\xa7""\x81""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",ee,9a,e8,71))->init(5,HX_("\xe0""\xa6""\xb6""\xe0""\xa6""\xa8""\xe0""\xa6""\xbf""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",10,66,07,c9))->init(6,HX_("\xe0""\xa7""\xb0""\xe0""\xa6""\xac""\xe0""\xa6""\xbf""\xe0""\xa6""\xac""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""",5b,37,dc,b7)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("\xe0""\xa6""\x9c""\xe0""\xa6""\xbe""\xe0""\xa6""\xa8""\xe0""\xa7""\x81""",5a,09,26,60))->init(1,HX_("\xe0""\xa6""\xab""\xe0""\xa7""\x87""\xe0""\xa6""\xac""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa7""\x81""",cb,f5,23,e0))->init(2,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\xbe""\xe0""\xa6""\xb0""\xe0""\xa7""\x8d""\xe0""\xa6""\x9a""",88,6d,d0,26))->init(3,HX_("\xe0""\xa6""\x8f""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa6""\xbf""\xe0""\xa6""\xb2""",d2,2f,84,95))->init(4,HX_("\xe0""\xa6""\xae""\xe0""\xa7""\x87""",b8,c9,22,98))->init(5,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xa8""",1e,02,d1,0e))->init(6,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xb2""\xe0""\xa6""\xbe""\xe0""\xa6""\x87""",f1,42,8f,ce))->init(7,HX_("\xe0""\xa6""\x86""\xe0""\xa6""\x97""\xe0""\xa6""\xb7""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""",b3,cd,7a,18))->init(8,HX_("\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x87""",75,aa,1f,1a))->init(9,HX_("\xe0""\xa6""\x85""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x8b""",61,9a,51,31))->init(10,HX_("\xe0""\xa6""\xa8""\xe0""\xa6""\xac""\xe0""\xa7""\x87""",1c,2c,d8,8a))->init(11,HX_("\xe0""\xa6""\xa1""\xe0""\xa6""\xbf""\xe0""\xa6""\x9a""\xe0""\xa7""\x87""",ca,da,ee,41))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("\xe0""\xa6""\x9c""\xe0""\xa6""\xbe""\xe0""\xa6""\xa8""\xe0""\xa7""\x81""\xe0""\xa7""\xb1""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""\xe0""\xa7""\x80""",b8,3b,0c,8b))->init(1,HX_("\xe0""\xa6""\xab""\xe0""\xa7""\x87""\xe0""\xa6""\xac""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa7""\x81""\xe0""\xa7""\xb1""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""\xe0""\xa7""\x80""",a9,8d,33,d0))->init(2,HX_("\xe0""\xa6""\xae""\xe0""\xa6""\xbe""\xe0""\xa6""\xb0""\xe0""\xa7""\x8d""\xe0""\xa6""\x9a""",88,6d,d0,26))->init(3,HX_("\xe0""\xa6""\x8f""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\xb0""\xe0""\xa6""\xbf""\xe0""\xa6""\xb2""",d2,2f,84,95))->init(4,HX_("\xe0""\xa6""\xae""\xe0""\xa7""\x87""",b8,c9,22,98))->init(5,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xa8""",1e,02,d1,0e))->init(6,HX_("\xe0""\xa6""\x9c""\xe0""\xa7""\x81""\xe0""\xa6""\xb2""\xe0""\xa6""\xbe""\xe0""\xa6""\x87""",f1,42,8f,ce))->init(7,HX_("\xe0""\xa6""\x86""\xe0""\xa6""\x97""\xe0""\xa6""\xb7""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""",b3,cd,7a,18))->init(8,HX_("\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xaa""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",f7,0d,8e,2c))->init(9,HX_("\xe0""\xa6""\x85""\xe0""\xa6""\x95""\xe0""\xa7""\x8d""\xe0""\xa6""\x9f""\xe0""\xa7""\x8b""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",e5,74,f3,c5))->init(10,HX_("\xe0""\xa6""\xa8""\xe0""\xa6""\xac""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",1e,ee,15,51))->init(11,HX_("\xe0""\xa6""\xa1""\xe0""\xa6""\xbf""\xe0""\xa6""\x9a""\xe0""\xa7""\x87""\xe0""\xa6""\xae""\xe0""\xa7""\x8d""\xe0""\xa6""\xac""\xe0""\xa6""\xb0""",cc,e9,4e,8f))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd-MM-yyyy",00,8e,10,16))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)2)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(",",2c,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("\xe0""\xa6""\xad""\xe0""\xa6""\xbe""\xe0""\xa7""\xb0""\xe0""\xa6""\xa4""",e6,47,c8,bd))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("as-IN",a0,33,04,26))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("as-IN",a0,33,04,26))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("as",f2,54,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("asm",3b,ff,49,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1101)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ASM",1b,9b,31,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Assamese",0a,60,35,51)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		asIn = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestDecimalFormat","boot",0x7b5805b7,"thx.format.TestDecimalFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)8)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xbd""",5d,ef,ab,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)0))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("NaN",9b,84,3b,00))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("\xd0""\xb1""\xd0""\xb5""\xd1""\x81""\xd0""\xba""\xd0""\xbe""\xd0""\xbd""\xd0""\xb5""\xd1""\x87""\xd0""\xbd""\xd0""\xbe""\xd1""\x81""\xd1""\x82""\xd1""\x8c""",ed,3e,05,12))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)3)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-\xd0""\xb1""\xd0""\xb5""\xd1""\x81""\xd0""\xba""\xd0""\xbe""\xd0""\xbd""\xd0""\xb5""\xd1""\x87""\xd0""\xbd""\xd0""\xbe""\xd1""\x81""\xd1""\x82""\xd1""\x8c""",5a,83,c2,cb))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)0))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(2)->init(0,(int)3)->init(1,(int)0))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("\xd0""\x91""\xd0""\xb0""\xd1""\x88""\xd2""\xa1""\xd0""\xbe""\xd1""\x80""\xd1""\x82""",55,47,9f,ed))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Russia",db,9d,80,73))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("d MMMM yyyy '\xd0""\xb9""' H:mm:ss",3b,8e,42,7f))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("\xd0""\x93""\xd1""\x80""\xd0""\xb8""\xd0""\xb3""\xd0""\xbe""\xd1""\x80""\xd0""\xb8""\xd0""\xb9"" \xd0""\xba""\xd0""\xb0""\xd0""\xbb""\xd0""\xb5""\xd0""\xbd""\xd0""\xb4""\xd0""\xb0""\xd1""\x80""\xd1""\x8b""",c9,d4,d5,63))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd2""\x93""\xd0""\xb8""\xd0""\xbd""\xd1""\x83""\xd0""\xb0""\xd1""\x80""",57,d2,30,7d))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""\xd1""\x80""\xd0""\xb0""\xd0""\xbb""\xd1""\x8c""",0f,c4,9f,df))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""\xd1""\x82""",ac,83,08,0e))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""\xd0""\xb5""\xd0""\xbb""\xd1""\x8c""",49,20,c9,0b))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd0""\xb9""",b5,bf,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""\xd1""\x8c""",cd,5e,f3,39))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""\xd1""\x8c""",4b,da,f1,39))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""\xd1""\x83""\xd1""\x81""\xd1""\x82""",98,90,ea,01))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",1c,a6,86,65))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",52,bb,92,a5))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",84,3e,c7,e6))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""\xd0""\xb0""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",1e,19,4c,ef))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd2""\x93""\xd0""\xb8""\xd0""\xbd""",d6,c1,e1,24))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""",1a,6b,81,1b))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""",5b,c0,92,f3))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""",1e,2c,cf,0a))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd0""\xb9""",b5,bf,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""",b2,d7,87,a6))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""",b0,d7,87,a6))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""",25,4e,c5,0a))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""",a2,ad,4d,61))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""",e9,7f,67,1a))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""",79,f4,03,87))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""",f3,e6,61,58))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("MMMM dd",e0,38,48,d4))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("d MMMM yyyy '\xd0""\xb9""'",93,c7,13,d7))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("\xd0""\x99""\xd1""\x88""",a0,30,f1,89))->init(1,HX_("\xd0""\x94""\xd1""\x88""",5b,65,ed,89))->init(2,HX_("\xd0""\xa8""\xd1""\x88""",6f,92,fc,89))->init(3,HX_("\xd0""\xa8""\xd1""\x80""",67,92,fc,89))->init(4,HX_("\xd0""\x9a""\xd1""\x81""",da,f2,f1,89))->init(5,HX_("\xd0""\x99""\xd0""\xbc""",f5,2f,f1,89))->init(6,HX_("\xd0""\xa8""\xd0""\xb1""",b9,91,fc,89)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_(".",2e,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("\xd0""\x99""\xd1""\x88""",a0,30,f1,89))->init(1,HX_("\xd0""\x94""\xd1""\x88""",5b,65,ed,89))->init(2,HX_("\xd0""\xa8""\xd1""\x88""",6f,92,fc,89))->init(3,HX_("\xd0""\xa8""\xd1""\x80""",67,92,fc,89))->init(4,HX_("\xd0""\x9a""\xd1""\x81""",da,f2,f1,89))->init(5,HX_("\xd0""\x99""\xd0""\xbc""",f5,2f,f1,89))->init(6,HX_("\xd0""\xa8""\xd0""\xb1""",b9,91,fc,89)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("H:mm",d2,be,c3,2f))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("H:mm:ss",c8,37,a2,ed))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("\xd0""\x99""\xd3""\x99""\xd0""\xba""\xd1""\x88""\xd3""\x99""\xd0""\xbc""\xd0""\xb1""\xd0""\xb5""",c8,cb,14,13))->init(1,HX_("\xd0""\x94""\xd2""\xaf""\xd1""\x88""\xd3""\x99""\xd0""\xbc""\xd0""\xb1""\xd0""\xb5""",10,ba,b6,86))->init(2,HX_("\xd0""\xa8""\xd0""\xb8""\xd1""\x88""\xd3""\x99""\xd0""\xbc""\xd0""\xb1""\xd0""\xb5""",2f,72,13,fe))->init(3,HX_("\xd0""\xa8""\xd0""\xb0""\xd1""\x80""\xd1""\x88""\xd0""\xb0""\xd0""\xbc""\xd0""\xb1""\xd1""\x8b""",25,eb,47,ea))->init(4,HX_("\xd0""\x9a""\xd0""\xb5""\xd1""\x81""\xd0""\xb0""\xd2""\x99""\xd0""\xbd""\xd0""\xb0""",73,4f,e7,9c))->init(5,HX_("\xd0""\x99""\xd0""\xbe""\xd0""\xbc""\xd0""\xb0""",43,b6,b9,6d))->init(6,HX_("\xd0""\xa8""\xd3""\x99""\xd0""\xbc""\xd0""\xb1""\xd0""\xb5""",b0,d8,69,9d)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd2""\x93""\xd0""\xb8""\xd0""\xbd""",d6,c1,e1,24))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""",1a,6b,81,1b))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""",5b,c0,92,f3))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""",1e,2c,cf,0a))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd0""\xb9""",b5,bf,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""",b2,d7,87,a6))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""",b0,d7,87,a6))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""",25,4e,c5,0a))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""",a2,ad,4d,61))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""",e9,7f,67,1a))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""",79,f4,03,87))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""",f3,e6,61,58))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd2""\x93""\xd0""\xb8""\xd0""\xbd""\xd1""\x83""\xd0""\xb0""\xd1""\x80""",57,d2,30,7d))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""\xd1""\x80""\xd0""\xb0""\xd0""\xbb""\xd1""\x8c""",0f,c4,9f,df))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""\xd1""\x82""",ac,83,08,0e))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""\xd0""\xb5""\xd0""\xbb""\xd1""\x8c""",49,20,c9,0b))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd0""\xb9""",b5,bf,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""\xd1""\x8c""",cd,5e,f3,39))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""\xd1""\x8c""",4b,da,f1,39))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""\xd1""\x83""\xd1""\x81""\xd1""\x82""",98,90,ea,01))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",1c,a6,86,65))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",52,bb,92,a5))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",84,3e,c7,e6))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""\xd0""\xb0""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",1e,19,4c,ef))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd.MM.yy",c0,fa,64,83))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("\xd0""\xa0""\xd0""\xbe""\xd1""\x81""\xd1""\x81""\xd0""\xb8""\xd1""\x8f""",64,65,09,ca))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("ba-RU",d1,f8,84,ad))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("ba-RU",d1,f8,84,ad))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("ba",bf,55,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("bak",cc,b1,4a,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1133)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("BAS",b4,4d,32,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Bashkir",60,11,4b,fd)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		baRu = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
}

} // end namespace thx
} // end namespace format
