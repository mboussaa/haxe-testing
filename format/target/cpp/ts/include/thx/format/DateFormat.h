// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_format_DateFormat
#define INCLUDED_thx_format_DateFormat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS2(thx,culture,Culture)
HX_DECLARE_CLASS2(thx,culture,DateFormatInfo)
HX_DECLARE_CLASS2(thx,format,DateFormat)

namespace thx{
namespace format{


class HXCPP_CLASS_ATTRIBUTES DateFormat_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef DateFormat_obj OBJ_;
		DateFormat_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.format.DateFormat")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.format.DateFormat"); }
		static hx::ObjectPtr< DateFormat_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DateFormat_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("DateFormat","\x25","\x34","\x37","\x86"); }

		static ::String customFormat(::Array< ::Dynamic> d,::String pattern, ::thx::culture::Culture culture);
		static ::Dynamic customFormat_dyn();

		static ::String format(::Array< ::Dynamic> d,::String pattern, ::thx::culture::Culture culture);
		static ::Dynamic format_dyn();

		static ::String formatTerm(::Array< ::Dynamic> d,::String pattern, ::thx::culture::Culture culture);
		static ::Dynamic formatTerm_dyn();

		static ::String strftime(::Array< ::Dynamic> d,::String pattern, ::thx::culture::Culture culture);
		static ::Dynamic strftime_dyn();

		static ::String dateLong(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic dateLong_dyn();

		static ::String dateShort(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic dateShort_dyn();

		static ::String dateTimeFull(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic dateTimeFull_dyn();

		static ::String dateTimeSortable(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic dateTimeSortable_dyn();

		static ::String monthDay(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic monthDay_dyn();

		static ::String rfc1123(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic rfc1123_dyn();

		static ::String timeLong(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic timeLong_dyn();

		static ::String timeShort(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic timeShort_dyn();

		static ::String universalSortable(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic universalSortable_dyn();

		static ::String iso8601(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic iso8601_dyn();

		static ::String yearMonth(::Array< ::Dynamic> d, ::thx::culture::Culture culture);
		static ::Dynamic yearMonth_dyn();

		static ::String getDecimalsPadded(Int decimals);
		static ::Dynamic getDecimalsPadded_dyn();

		static ::String getDecimalsString(Int decimals);
		static ::Dynamic getDecimalsString_dyn();

		static ::String getDecimalsUpTo(Int decimals,Int to);
		static ::Dynamic getDecimalsUpTo_dyn();

		static ::String getDecimalsPaddedUpTo(Int decimals,Int to);
		static ::Dynamic getDecimalsPaddedUpTo_dyn();

		static  ::thx::culture::DateFormatInfo dateTime( ::thx::culture::Culture culture);
		static ::Dynamic dateTime_dyn();

		static  ::EReg getPattern();
		static ::Dynamic getPattern_dyn();

};

} // end namespace thx
} // end namespace format

#endif /* INCLUDED_thx_format_DateFormat */ 
