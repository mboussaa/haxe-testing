// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_format_DecimalFormat
#define INCLUDED_thx_format_DecimalFormat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,bigint,DecimalImpl)
HX_DECLARE_CLASS2(thx,culture,Culture)
HX_DECLARE_CLASS2(thx,culture,NumberFormatInfo)
HX_DECLARE_CLASS2(thx,format,DecimalFormat)

namespace thx{
namespace format{


class HXCPP_CLASS_ATTRIBUTES DecimalFormat_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef DecimalFormat_obj OBJ_;
		DecimalFormat_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.format.DecimalFormat")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.format.DecimalFormat"); }
		static hx::ObjectPtr< DecimalFormat_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DecimalFormat_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("DecimalFormat","\x88","\x4a","\x4e","\x66"); }

		static ::String currency( ::thx::bigint::DecimalImpl decimal, ::Dynamic precision,::String symbol, ::thx::culture::Culture culture);
		static ::Dynamic currency_dyn();

		static ::String customFormat( ::thx::bigint::DecimalImpl decimal,::String pattern, ::thx::culture::Culture culture);
		static ::Dynamic customFormat_dyn();

		static ::String decimal( ::thx::bigint::DecimalImpl dec, ::Dynamic significantDigits, ::thx::culture::Culture culture);
		static ::Dynamic decimal_dyn();

		static ::String exponential( ::thx::bigint::DecimalImpl decimal, ::Dynamic precision, ::Dynamic digits,::String symbol, ::thx::culture::Culture culture);
		static ::Dynamic exponential_dyn();

		static ::String fixed( ::thx::bigint::DecimalImpl decimal, ::Dynamic precision, ::thx::culture::Culture culture);
		static ::Dynamic fixed_dyn();

		static ::String format( ::thx::bigint::DecimalImpl decimal,::String pattern, ::thx::culture::Culture culture);
		static ::Dynamic format_dyn();

		static ::String general( ::thx::bigint::DecimalImpl decimal, ::Dynamic significantDigits, ::thx::culture::Culture culture);
		static ::Dynamic general_dyn();

		static ::String integer( ::thx::bigint::DecimalImpl decimal, ::thx::culture::Culture culture);
		static ::Dynamic integer_dyn();

		static ::String number( ::thx::bigint::DecimalImpl decimal, ::Dynamic precision, ::thx::culture::Culture culture);
		static ::Dynamic number_dyn();

		static ::String octal( ::thx::bigint::DecimalImpl decimal, ::Dynamic significantDigits, ::thx::culture::Culture culture);
		static ::Dynamic octal_dyn();

		static ::String percent( ::thx::bigint::DecimalImpl decimal, ::Dynamic decimals, ::thx::culture::Culture culture);
		static ::Dynamic percent_dyn();

		static ::String permille( ::thx::bigint::DecimalImpl decimal, ::Dynamic decimals, ::thx::culture::Culture culture);
		static ::Dynamic permille_dyn();

		static ::String printf( ::thx::bigint::DecimalImpl decimal,::String pattern, ::thx::culture::Culture culture);
		static ::Dynamic printf_dyn();

		static ::String toBase( ::thx::bigint::DecimalImpl value,Int base, ::thx::culture::Culture culture);
		static ::Dynamic toBase_dyn();

		static ::String unit( ::thx::bigint::DecimalImpl decimal,Int decimals,::String unitSymbol, ::thx::culture::Culture culture);
		static ::Dynamic unit_dyn();

		static  ::Dynamic exponentialInfo( ::thx::bigint::DecimalImpl decimal);
		static ::Dynamic exponentialInfo_dyn();

		static ::String customFormatDecimalFraction(::String d,::String pattern, ::thx::culture::NumberFormatInfo nf);
		static ::Dynamic customFormatDecimalFraction_dyn();

		static ::String customFormatDecimal( ::thx::bigint::DecimalImpl decimal,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent);
		static ::Dynamic customFormatDecimal_dyn();

		static ::String customFormatInteger(::String v,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent);
		static ::Dynamic customFormatInteger_dyn();

		static ::String customIntegerAndFraction( ::thx::bigint::DecimalImpl decimal,::String pattern, ::thx::culture::NumberFormatInfo nf,Bool isCurrency,Bool isPercent);
		static ::Dynamic customIntegerAndFraction_dyn();

		static Bool hasSymbols(::String pattern,::String symbols);
		static ::Dynamic hasSymbols_dyn();

		static ::String intPart(::String s,::Array< Int > groupSizes,::String groupSeparator);
		static ::Dynamic intPart_dyn();

		static  ::thx::culture::NumberFormatInfo numberFormat( ::thx::culture::Culture culture);
		static ::Dynamic numberFormat_dyn();

		static ::String pad(::String s,Int len,Bool round);
		static ::Dynamic pad_dyn();

		static  ::Dynamic paramOrNull(::String param);
		static ::Dynamic paramOrNull_dyn();

		static ::Array< ::String > splitOnDecimalSeparator( ::thx::bigint::DecimalImpl decimal);
		static ::Dynamic splitOnDecimalSeparator_dyn();

		static ::Array< ::String > splitPattern(::String pattern,::String separator);
		static ::Dynamic splitPattern_dyn();

		static ::String value( ::thx::bigint::DecimalImpl decimal,Int precision,::Array< Int > groupSizes,::String groupSeparator,::String decimalSeparator);
		static ::Dynamic value_dyn();

		static Int countSymbols(::String pattern,::String symbols);
		static ::Dynamic countSymbols_dyn();

};

} // end namespace thx
} // end namespace format

#endif /* INCLUDED_thx_format_DecimalFormat */ 
