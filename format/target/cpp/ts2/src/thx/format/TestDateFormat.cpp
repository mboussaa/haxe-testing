// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_thx__DateTime_DateTime_Impl_
#include <thx/_DateTime/DateTime_Impl_.h>
#endif
#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_DateFormatInfo
#include <thx/culture/DateFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif
#ifndef INCLUDED_thx_format_DateFormat
#include <thx/format/DateFormat.h>
#endif
#ifndef INCLUDED_thx_format_TestDateFormat
#include <thx/format/TestDateFormat.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace format{

void TestDateFormat_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.format.TestDateFormat","new",0x68cf79f6,"thx.format.TestDateFormat.new","thx/format/TestDateFormat.hx",19,0xcb87a01a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  19)		this->x = i;
            	}

Dynamic TestDateFormat_obj::__CreateEmpty() { return new TestDateFormat_obj; }

hx::ObjectPtr< TestDateFormat_obj > TestDateFormat_obj::__new(Int i)
{
	hx::ObjectPtr< TestDateFormat_obj > _hx_result = new TestDateFormat_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestDateFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestDateFormat_obj > _hx_result = new TestDateFormat_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestDateFormat_obj::testFormatU(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormatU",0x6f37dea2,"thx.format.TestDateFormat.testFormatU","thx/format/TestDateFormat.hx",23,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE(  23)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  23)		HX_VARI( Int,_g) = this->x;
HXDLIN(  23)		while((_g1 < _g)){
HXLINE(  23)			++_g1;
HXLINE(  24)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("U",55,00,00,00),null());
HXDLIN(  24)			::utest::Assert_obj::equals(HX_("Monday, 01 June 2009 13:45:30",34,d4,8e,e9),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),24,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatU",0c,af,f7,9b)));
HXLINE(  25)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("U",55,00,00,00),::thx::format::TestDateFormat_obj::it);
HXDLIN(  25)			::utest::Assert_obj::equals(HX_("luned\xc3""\xac"" 1 giugno 2009 13:45:30",4e,0e,a9,14),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),25,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatU",0c,af,f7,9b)));
HXLINE(  26)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("U",55,00,00,00),::thx::format::TestDateFormat_obj::ch);
HXDLIN(  26)			::utest::Assert_obj::equals(HX_("luned\xc3""\xac"", 1. giugno 2009 13:45:30",ce,7e,18,60),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),26,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatU",0c,af,f7,9b)));
HXLINE(  27)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("U",55,00,00,00),::thx::format::TestDateFormat_obj::us);
HXDLIN(  27)			::utest::Assert_obj::equals(HX_("Monday, June 01, 2009 1:45:30 PM",da,3a,33,1f),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),27,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatU",0c,af,f7,9b)));
HXLINE(  28)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("U",55,00,00,00),::thx::format::TestDateFormat_obj::ru);
HXDLIN(  28)			::utest::Assert_obj::equals(HX_("1 \xd0""\x98""\xd1""\x8e""\xd0""\xbd""\xd1""\x8c"" 2009 \xd0""\xb3"". 13:45:30",08,02,51,6a),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),28,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatU",0c,af,f7,9b)));
HXLINE(  29)			::String _hx_tmp5 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("U",55,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN(  29)			::utest::Assert_obj::equals(HX_("lundi 1 juin 2009 13:45:30",8c,eb,6f,56),_hx_tmp5,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),29,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatU",0c,af,f7,9b)));
HXLINE(  30)			::String _hx_tmp6 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("U",55,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN(  30)			::utest::Assert_obj::equals(HX_("2009\xe5""\xb9""\xb4""6\xe6""\x9c""\x88""1\xe6""\x97""\xa5"" 13:45:30",06,2a,7b,bf),_hx_tmp6,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),30,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatU",0c,af,f7,9b)));
HXLINE(  32)			::String _hx_tmp7 = ::thx::format::DateFormat_obj::dateTimeFull(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN(  32)			::utest::Assert_obj::equals(HX_("luned\xc3""\xac"" 1 giugno 2009 13:45:30",4e,0e,a9,14),_hx_tmp7,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),32,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatU",0c,af,f7,9b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormatU,(void))

void TestDateFormat_obj::testFormatd_(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormatd_",0xe1aafc8e,"thx.format.TestDateFormat.testFormatd_","thx/format/TestDateFormat.hx",36,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE(  36)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  36)		HX_VARI( Int,_g) = this->x;
HXDLIN(  36)		while((_g1 < _g)){
HXLINE(  36)			++_g1;
HXLINE(  37)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("d",64,00,00,00),null());
HXDLIN(  37)			::utest::Assert_obj::equals(HX_("06/01/2009",0c,0b,af,a1),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),37,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatd_",e4,88,c1,dc)));
HXLINE(  38)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("d",64,00,00,00),::thx::format::TestDateFormat_obj::us);
HXDLIN(  38)			::utest::Assert_obj::equals(HX_("6/1/2009",1e,13,98,7b),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),38,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatd_",e4,88,c1,dc)));
HXLINE(  39)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("d",64,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN(  39)			::utest::Assert_obj::equals(HX_("01/06/2009",e2,cb,c0,82),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),39,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatd_",e4,88,c1,dc)));
HXLINE(  40)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("d",64,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN(  40)			::utest::Assert_obj::equals(HX_("2009/06/01",a2,17,63,a9),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),40,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatd_",e4,88,c1,dc)));
HXLINE(  42)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::dateShort(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN(  42)			::utest::Assert_obj::equals(HX_("01/06/2009",e2,cb,c0,82),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),42,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatd_",e4,88,c1,dc)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormatd_,(void))

void TestDateFormat_obj::testFormatD(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormatD",0x6f37de91,"thx.format.TestDateFormat.testFormatD","thx/format/TestDateFormat.hx",46,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE(  46)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  46)		HX_VARI( Int,_g) = this->x;
HXDLIN(  46)		while((_g1 < _g)){
HXLINE(  46)			++_g1;
HXLINE(  47)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("D",44,00,00,00),null());
HXDLIN(  47)			::utest::Assert_obj::equals(HX_("Monday, 01 June 2009",0a,f1,0c,11),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),47,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatD",fb,ae,f7,9b)));
HXLINE(  48)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("D",44,00,00,00),::thx::format::TestDateFormat_obj::us);
HXDLIN(  48)			::utest::Assert_obj::equals(HX_("Monday, June 01, 2009",56,d0,f3,0b),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),48,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatD",fb,ae,f7,9b)));
HXLINE(  49)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("D",44,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN(  49)			::utest::Assert_obj::equals(HX_("lundi 1 juin 2009",b2,24,0c,f3),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),49,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatD",fb,ae,f7,9b)));
HXLINE(  50)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("D",44,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN(  50)			::utest::Assert_obj::equals(HX_("2009\xe5""\xb9""\xb4""6\xe6""\x9c""\x88""1\xe6""\x97""\xa5""",78,9d,0a,1c),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),50,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatD",fb,ae,f7,9b)));
HXLINE(  52)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::dateLong(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN(  52)			::utest::Assert_obj::equals(HX_("luned\xc3""\xac"" 1 giugno 2009",30,62,4a,00),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),52,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatD",fb,ae,f7,9b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormatD,(void))

void TestDateFormat_obj::testFormatM(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormatM",0x6f37de9a,"thx.format.TestDateFormat.testFormatM","thx/format/TestDateFormat.hx",56,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE(  56)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  56)		HX_VARI( Int,_g) = this->x;
HXDLIN(  56)		while((_g1 < _g)){
HXLINE(  56)			++_g1;
HXLINE(  57)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("M",4d,00,00,00),null());
HXDLIN(  57)			::utest::Assert_obj::equals(HX_("June 01",7f,59,e4,65),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),57,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatM",04,af,f7,9b)));
HXLINE(  58)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("M",4d,00,00,00),::thx::format::TestDateFormat_obj::us);
HXDLIN(  58)			::utest::Assert_obj::equals(HX_("June 01",7f,59,e4,65),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),58,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatM",04,af,f7,9b)));
HXLINE(  59)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("M",4d,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN(  59)			::utest::Assert_obj::equals(HX_("1 juin",bf,ff,b8,4a),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),59,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatM",04,af,f7,9b)));
HXLINE(  60)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("M",4d,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN(  60)			::utest::Assert_obj::equals(HX_("6\xe6""\x9c""\x88""1\xe6""\x97""\xa5""",5f,71,2a,3c),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),60,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatM",04,af,f7,9b)));
HXLINE(  62)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::monthDay(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN(  62)			::utest::Assert_obj::equals(HX_("01 giugno",74,f2,13,a4),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),62,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatM",04,af,f7,9b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormatM,(void))

void TestDateFormat_obj::testFormatR(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormatR",0x6f37de9f,"thx.format.TestDateFormat.testFormatR","thx/format/TestDateFormat.hx",66,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE(  66)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  66)		HX_VARI( Int,_g) = this->x;
HXDLIN(  66)		while((_g1 < _g)){
HXLINE(  66)			++_g1;
HXLINE(  67)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("R",52,00,00,00),null());
HXDLIN(  67)			::utest::Assert_obj::equals(HX_("Mon, 01 Jun 2009 19:45:30 GMT",2f,8b,d8,01),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),67,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatR",09,af,f7,9b)));
HXLINE(  68)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("R",52,00,00,00),::thx::format::TestDateFormat_obj::us);
HXDLIN(  68)			::utest::Assert_obj::equals(HX_("Mon, 01 Jun 2009 19:45:30 GMT",2f,8b,d8,01),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),68,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatR",09,af,f7,9b)));
HXLINE(  69)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("R",52,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN(  69)			::utest::Assert_obj::equals(HX_("lun., 01 juin 2009 19:45:30 GMT",1d,8f,93,ef),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),69,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatR",09,af,f7,9b)));
HXLINE(  70)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("R",52,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN(  70)			::utest::Assert_obj::equals(HX_("\xe6""\x9c""\x88"", 01 6 2009 19:45:30 GMT",e8,5e,a1,3b),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),70,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatR",09,af,f7,9b)));
HXLINE(  71)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::rfc1123(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN(  71)			::utest::Assert_obj::equals(HX_("lun, 01 giu 2009 19:45:30 GMT",78,c4,3e,af),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),71,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatR",09,af,f7,9b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormatR,(void))

void TestDateFormat_obj::testFormats(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormats",0x6f37dec0,"thx.format.TestDateFormat.testFormats","thx/format/TestDateFormat.hx",75,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE(  75)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  75)		HX_VARI( Int,_g) = this->x;
HXDLIN(  75)		while((_g1 < _g)){
HXLINE(  75)			++_g1;
HXLINE(  76)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("s",73,00,00,00),null());
HXDLIN(  76)			::utest::Assert_obj::equals(HX_("2009-06-01T13:45:30",10,54,0e,fc),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),76,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormats",2a,af,f7,9b)));
HXLINE(  77)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("s",73,00,00,00),::thx::format::TestDateFormat_obj::us);
HXDLIN(  77)			::utest::Assert_obj::equals(HX_("2009-06-01T13:45:30",10,54,0e,fc),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),77,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormats",2a,af,f7,9b)));
HXLINE(  78)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("s",73,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN(  78)			::utest::Assert_obj::equals(HX_("2009-06-01T13:45:30",10,54,0e,fc),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),78,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormats",2a,af,f7,9b)));
HXLINE(  79)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("s",73,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN(  79)			::utest::Assert_obj::equals(HX_("2009-06-01T13:45:30",10,54,0e,fc),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),79,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormats",2a,af,f7,9b)));
HXLINE(  81)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::dateTimeSortable(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN(  81)			::utest::Assert_obj::equals(HX_("2009-06-01T13:45:30",10,54,0e,fc),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),81,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormats",2a,af,f7,9b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormats,(void))

void TestDateFormat_obj::testFormatt_(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormatt_",0xe1ab0a7e,"thx.format.TestDateFormat.testFormatt_","thx/format/TestDateFormat.hx",85,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE(  85)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  85)		HX_VARI( Int,_g) = this->x;
HXDLIN(  85)		while((_g1 < _g)){
HXLINE(  85)			++_g1;
HXLINE(  86)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("t",74,00,00,00),null());
HXDLIN(  86)			::utest::Assert_obj::equals(HX_("13:45",99,7e,84,58),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),86,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatt_",d4,96,c1,dc)));
HXLINE(  87)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("t",74,00,00,00),::thx::format::TestDateFormat_obj::us);
HXDLIN(  87)			::utest::Assert_obj::equals(HX_("1:45 PM",b3,af,45,3a),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),87,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatt_",d4,96,c1,dc)));
HXLINE(  88)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("t",74,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN(  88)			::utest::Assert_obj::equals(HX_("13:45",99,7e,84,58),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),88,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatt_",d4,96,c1,dc)));
HXLINE(  89)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("t",74,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN(  89)			::utest::Assert_obj::equals(HX_("13:45",99,7e,84,58),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),89,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatt_",d4,96,c1,dc)));
HXLINE(  91)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::timeShort(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN(  91)			::utest::Assert_obj::equals(HX_("13:45",99,7e,84,58),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),91,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatt_",d4,96,c1,dc)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormatt_,(void))

void TestDateFormat_obj::testFormatT(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormatT",0x6f37dea1,"thx.format.TestDateFormat.testFormatT","thx/format/TestDateFormat.hx",95,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE(  95)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  95)		HX_VARI( Int,_g) = this->x;
HXDLIN(  95)		while((_g1 < _g)){
HXLINE(  95)			++_g1;
HXLINE(  96)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("T",54,00,00,00),null());
HXDLIN(  96)			::utest::Assert_obj::equals(HX_("13:45:30",5e,16,2c,80),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),96,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatT",0b,af,f7,9b)));
HXLINE(  97)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("T",54,00,00,00),::thx::format::TestDateFormat_obj::us);
HXDLIN(  97)			::utest::Assert_obj::equals(HX_("1:45:30 PM",50,cf,18,81),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),97,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatT",0b,af,f7,9b)));
HXLINE(  98)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("T",54,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN(  98)			::utest::Assert_obj::equals(HX_("13:45:30",5e,16,2c,80),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),98,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatT",0b,af,f7,9b)));
HXLINE(  99)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("T",54,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN(  99)			::utest::Assert_obj::equals(HX_("13:45:30",5e,16,2c,80),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),99,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatT",0b,af,f7,9b)));
HXLINE( 101)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::timeLong(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN( 101)			::utest::Assert_obj::equals(HX_("13:45:30",5e,16,2c,80),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),101,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatT",0b,af,f7,9b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormatT,(void))

void TestDateFormat_obj::testFormatu_(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormatu_",0xe1ab0b5d,"thx.format.TestDateFormat.testFormatu_","thx/format/TestDateFormat.hx",105,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 105)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 105)		HX_VARI( Int,_g) = this->x;
HXDLIN( 105)		while((_g1 < _g)){
HXLINE( 105)			++_g1;
HXLINE( 106)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("u",75,00,00,00),null());
HXDLIN( 106)			::utest::Assert_obj::equals(HX_("2009-06-01 19:45:30Z",b8,8d,89,d8),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),106,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatu_",b3,97,c1,dc)));
HXLINE( 107)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("u",75,00,00,00),::thx::format::TestDateFormat_obj::us);
HXDLIN( 107)			::utest::Assert_obj::equals(HX_("2009-06-01 19:45:30Z",b8,8d,89,d8),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),107,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatu_",b3,97,c1,dc)));
HXLINE( 108)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("u",75,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN( 108)			::utest::Assert_obj::equals(HX_("2009-06-01 19:45:30Z",b8,8d,89,d8),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),108,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatu_",b3,97,c1,dc)));
HXLINE( 109)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("u",75,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN( 109)			::utest::Assert_obj::equals(HX_("2009-06-01 19:45:30Z",b8,8d,89,d8),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),109,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatu_",b3,97,c1,dc)));
HXLINE( 110)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::universalSortable(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN( 110)			::utest::Assert_obj::equals(HX_("2009-06-01 19:45:30Z",b8,8d,89,d8),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),110,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatu_",b3,97,c1,dc)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormatu_,(void))

void TestDateFormat_obj::testFormatO(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormatO",0x6f37de9c,"thx.format.TestDateFormat.testFormatO","thx/format/TestDateFormat.hx",114,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 114)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 114)		HX_VARI( Int,_g) = this->x;
HXDLIN( 114)		while((_g1 < _g)){
HXLINE( 114)			++_g1;
HXLINE( 115)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("O",4f,00,00,00),null());
HXDLIN( 115)			::utest::Assert_obj::equals(HX_("2009-06-01T13:45:30.0000000-06:00",79,18,67,0b),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),115,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatO",06,af,f7,9b)));
HXLINE( 116)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("o",6f,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN( 116)			::utest::Assert_obj::equals(HX_("2009-06-01T13:45:30.0000000-06:00",79,18,67,0b),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),116,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatO",06,af,f7,9b)));
HXLINE( 117)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("O",4f,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN( 117)			::utest::Assert_obj::equals(HX_("2009-06-01T13:45:30.0000000-06:00",79,18,67,0b),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),117,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatO",06,af,f7,9b)));
HXLINE( 118)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::iso8601(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN( 118)			::utest::Assert_obj::equals(HX_("2009-06-01T13:45:30.0000000-06:00",79,18,67,0b),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),118,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormatO",06,af,f7,9b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormatO,(void))

void TestDateFormat_obj::testFormaty(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testFormaty",0x6f37dec6,"thx.format.TestDateFormat.testFormaty","thx/format/TestDateFormat.hx",122,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 122)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 122)		HX_VARI( Int,_g) = this->x;
HXDLIN( 122)		while((_g1 < _g)){
HXLINE( 122)			++_g1;
HXLINE( 123)			::String _hx_tmp = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("y",79,00,00,00),null());
HXDLIN( 123)			::utest::Assert_obj::equals(HX_("2009 June",5b,3f,0f,21),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),123,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormaty",30,af,f7,9b)));
HXLINE( 124)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("y",79,00,00,00),::thx::format::TestDateFormat_obj::us);
HXDLIN( 124)			::utest::Assert_obj::equals(HX_("June, 2009",1d,39,38,1f),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),124,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormaty",30,af,f7,9b)));
HXLINE( 125)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("y",79,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN( 125)			::utest::Assert_obj::equals(HX_("juin 2009",f7,d9,96,13),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),125,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormaty",30,af,f7,9b)));
HXLINE( 126)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::format(::thx::format::TestDateFormat_obj::d1,HX_("y",79,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN( 126)			::utest::Assert_obj::equals(HX_("2009\xe5""\xb9""\xb4""6\xe6""\x9c""\x88""",f5,7f,20,76),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),126,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormaty",30,af,f7,9b)));
HXLINE( 128)			::String _hx_tmp4 = ::thx::format::DateFormat_obj::yearMonth(::thx::format::TestDateFormat_obj::d1,::thx::format::TestDateFormat_obj::it);
HXDLIN( 128)			::utest::Assert_obj::equals(HX_("giugno 2009",12,1f,83,f1),_hx_tmp4,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),128,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testFormaty",30,af,f7,9b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testFormaty,(void))

void TestDateFormat_obj::testd(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testd",0x4b7f3ae8,"thx.format.TestDateFormat.testd","thx/format/TestDateFormat.hx",132,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 132)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 132)		HX_VARI( Int,_g) = this->x;
HXDLIN( 132)		while((_g1 < _g)){
HXLINE( 132)			++_g1;
HXLINE( 133)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("d",64,00,00,00),null());
HXDLIN( 133)			::utest::Assert_obj::equals(HX_("1",31,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),133,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testd",d2,7f,95,0d)));
HXLINE( 134)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d2,HX_("d",64,00,00,00),null());
HXDLIN( 134)			::utest::Assert_obj::equals(HX_("15",e4,2a,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),134,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testd",d2,7f,95,0d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testd,(void))

void TestDateFormat_obj::testdd(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testdd",0xc3d4507c,"thx.format.TestDateFormat.testdd","thx/format/TestDateFormat.hx",138,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 138)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 138)		HX_VARI( Int,_g) = this->x;
HXDLIN( 138)		while((_g1 < _g)){
HXLINE( 138)			++_g1;
HXLINE( 139)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("dd",80,57,00,00),null());
HXDLIN( 139)			::utest::Assert_obj::equals(HX_("01",01,2a,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),139,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testdd",52,58,3a,d5)));
HXLINE( 140)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d2,HX_("dd",80,57,00,00),null());
HXDLIN( 140)			::utest::Assert_obj::equals(HX_("15",e4,2a,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),140,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testdd",52,58,3a,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testdd,(void))

void TestDateFormat_obj::testddd(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testddd",0x95f21c68,"thx.format.TestDateFormat.testddd","thx/format/TestDateFormat.hx",144,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 144)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 144)		HX_VARI( Int,_g) = this->x;
HXDLIN( 144)		while((_g1 < _g)){
HXLINE( 144)			++_g1;
HXLINE( 145)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("ddd",e4,38,4c,00),null());
HXDLIN( 145)			::utest::Assert_obj::equals(HX_("Mon",ac,ce,3a,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),145,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testddd",d2,ef,d2,bd)));
HXLINE( 146)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("ddd",e4,38,4c,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN( 146)			::utest::Assert_obj::equals(HX_("lun.",c9,32,bc,47),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),146,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testddd",d2,ef,d2,bd)));
HXLINE( 147)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("ddd",e4,38,4c,00),::thx::format::TestDateFormat_obj::it);
HXDLIN( 147)			::utest::Assert_obj::equals(HX_("lun",c5,59,52,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),147,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testddd",d2,ef,d2,bd)));
HXLINE( 148)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("ddd",e4,38,4c,00),::thx::format::TestDateFormat_obj::ru);
HXDLIN( 148)			::utest::Assert_obj::equals(HX_("\xd0""\x9f""\xd0""\xbd""",7c,bd,f5,89),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),148,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testddd",d2,ef,d2,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testddd,(void))

void TestDateFormat_obj::testdddd(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testdddd",0x9de6befc,"thx.format.TestDateFormat.testdddd","thx/format/TestDateFormat.hx",152,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 152)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 152)		HX_VARI( Int,_g) = this->x;
HXDLIN( 152)		while((_g1 < _g)){
HXLINE( 152)			++_g1;
HXLINE( 153)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("dddd",00,8f,65,42),null());
HXDLIN( 153)			::utest::Assert_obj::equals(HX_("Monday",30,db,f6,fb),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),153,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testdddd",52,e8,be,5a)));
HXLINE( 154)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("dddd",00,8f,65,42),::thx::format::TestDateFormat_obj::fr);
HXDLIN( 154)			::utest::Assert_obj::equals(HX_("lundi",8a,6c,f0,7c),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),154,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testdddd",52,e8,be,5a)));
HXLINE( 155)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("dddd",00,8f,65,42),::thx::format::TestDateFormat_obj::it);
HXDLIN( 155)			::utest::Assert_obj::equals(HX_("luned\xc3""\xac""",ed,38,f2,eb),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),155,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testdddd",52,e8,be,5a)));
HXLINE( 156)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("dddd",00,8f,65,42),::thx::format::TestDateFormat_obj::ru);
HXDLIN( 156)			::utest::Assert_obj::equals(HX_("\xd0""\xbf""\xd0""\xbe""\xd0""\xbd""\xd0""\xb5""\xd0""\xb4""\xd0""\xb5""\xd0""\xbb""\xd1""\x8c""\xd0""\xbd""\xd0""\xb8""\xd0""\xba""",7d,ab,f1,56),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),156,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testdddd",52,e8,be,5a)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testdddd,(void))

void TestDateFormat_obj::testh_(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testh_",0xc3d453f3,"thx.format.TestDateFormat.testh_","thx/format/TestDateFormat.hx",160,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 160)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 160)		HX_VARI( Int,_g) = this->x;
HXDLIN( 160)		while((_g1 < _g)){
HXLINE( 160)			++_g1;
HXLINE( 161)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("h",68,00,00,00),null());
HXDLIN( 161)			::utest::Assert_obj::equals(HX_("1",31,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),161,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testh_",c9,5b,3a,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testh_,(void))

void TestDateFormat_obj::testhh_(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testhh_",0x95f528e3,"thx.format.TestDateFormat.testhh_","thx/format/TestDateFormat.hx",165,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 165)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 165)		HX_VARI( Int,_g) = this->x;
HXDLIN( 165)		while((_g1 < _g)){
HXLINE( 165)			++_g1;
HXLINE( 166)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("hh",00,5b,00,00),null());
HXDLIN( 166)			::utest::Assert_obj::equals(HX_("01",01,2a,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),166,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testhh_",4d,fc,d5,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testhh_,(void))

void TestDateFormat_obj::testH(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testH",0x4b7f3acc,"thx.format.TestDateFormat.testH","thx/format/TestDateFormat.hx",170,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 170)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 170)		HX_VARI( Int,_g) = this->x;
HXDLIN( 170)		while((_g1 < _g)){
HXLINE( 170)			++_g1;
HXLINE( 171)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("H",48,00,00,00),null());
HXDLIN( 171)			::utest::Assert_obj::equals(HX_("13",e2,2a,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),171,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testH",b6,7f,95,0d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testH,(void))

void TestDateFormat_obj::testHH(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testHH",0xc3d437fc,"thx.format.TestDateFormat.testHH","thx/format/TestDateFormat.hx",175,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 175)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 175)		HX_VARI( Int,_g) = this->x;
HXDLIN( 175)		while((_g1 < _g)){
HXLINE( 175)			++_g1;
HXLINE( 176)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("HH",00,3f,00,00),null());
HXDLIN( 176)			::utest::Assert_obj::equals(HX_("13",e2,2a,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),176,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testHH",d2,3f,3a,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testHH,(void))

void TestDateFormat_obj::testm_(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testm_",0xc3d4584e,"thx.format.TestDateFormat.testm_","thx/format/TestDateFormat.hx",180,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 180)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 180)		HX_VARI( Int,_g) = this->x;
HXDLIN( 180)		while((_g1 < _g)){
HXLINE( 180)			++_g1;
HXLINE( 181)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("m",6d,00,00,00),null());
HXDLIN( 181)			::utest::Assert_obj::equals(HX_("45",81,2d,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),181,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testm_",24,60,3a,d5)));
HXLINE( 182)			::Array< ::Dynamic> _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2009-06-15 13:05:30",95,f8,72,57));
HXDLIN( 182)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(_hx_tmp1,HX_("m",6d,00,00,00),null());
HXDLIN( 182)			::utest::Assert_obj::equals(HX_("5",35,00,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),182,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testm_",24,60,3a,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testm_,(void))

void TestDateFormat_obj::testmm_(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testmm_",0x95f8f883,"thx.format.TestDateFormat.testmm_","thx/format/TestDateFormat.hx",186,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 186)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 186)		HX_VARI( Int,_g) = this->x;
HXDLIN( 186)		while((_g1 < _g)){
HXLINE( 186)			++_g1;
HXLINE( 187)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("mm",60,5f,00,00),null());
HXDLIN( 187)			::utest::Assert_obj::equals(HX_("45",81,2d,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),187,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testmm_",ed,cb,d9,bd)));
HXLINE( 188)			::Array< ::Dynamic> _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2009-06-15 13:05:30",95,f8,72,57));
HXDLIN( 188)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(_hx_tmp1,HX_("mm",60,5f,00,00),null());
HXDLIN( 188)			::utest::Assert_obj::equals(HX_("05",05,2a,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),188,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testmm_",ed,cb,d9,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testmm_,(void))

void TestDateFormat_obj::testM(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testM",0x4b7f3ad1,"thx.format.TestDateFormat.testM","thx/format/TestDateFormat.hx",192,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 192)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 192)		HX_VARI( Int,_g) = this->x;
HXDLIN( 192)		while((_g1 < _g)){
HXLINE( 192)			++_g1;
HXLINE( 193)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("M",4d,00,00,00),null());
HXDLIN( 193)			::utest::Assert_obj::equals(HX_("6",36,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),193,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testM",bb,7f,95,0d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testM,(void))

void TestDateFormat_obj::testMM(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testMM",0xc3d43c5c,"thx.format.TestDateFormat.testMM","thx/format/TestDateFormat.hx",197,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 197)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 197)		HX_VARI( Int,_g) = this->x;
HXDLIN( 197)		while((_g1 < _g)){
HXLINE( 197)			++_g1;
HXLINE( 198)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("MM",60,43,00,00),null());
HXDLIN( 198)			::utest::Assert_obj::equals(HX_("06",06,2a,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),198,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testMM",32,44,3a,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testMM,(void))

void TestDateFormat_obj::testMMM(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testMMM",0x95e09471,"thx.format.TestDateFormat.testMMM","thx/format/TestDateFormat.hx",202,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 202)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 202)		HX_VARI( Int,_g) = this->x;
HXDLIN( 202)		while((_g1 < _g)){
HXLINE( 202)			++_g1;
HXLINE( 203)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("MMM",ed,b0,3a,00),null());
HXDLIN( 203)			::utest::Assert_obj::equals(HX_("Jun",23,8d,38,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),203,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testMMM",db,67,c1,bd)));
HXLINE( 204)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("MMM",ed,b0,3a,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN( 204)			::utest::Assert_obj::equals(HX_("juin",70,c1,69,46),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),204,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testMMM",db,67,c1,bd)));
HXLINE( 205)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("MMM",ed,b0,3a,00),::thx::format::TestDateFormat_obj::it);
HXDLIN( 205)			::utest::Assert_obj::equals(HX_("giu",13,84,4e,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),205,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testMMM",db,67,c1,bd)));
HXLINE( 206)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("MMM",ed,b0,3a,00),::thx::format::TestDateFormat_obj::ru);
HXDLIN( 206)			::utest::Assert_obj::equals(HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""",b2,d7,87,a6),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),206,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testMMM",db,67,c1,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testMMM,(void))

void TestDateFormat_obj::testMMMM(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testMMMM",0x8ea14ebc,"thx.format.TestDateFormat.testMMMM","thx/format/TestDateFormat.hx",210,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 210)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 210)		HX_VARI( Int,_g) = this->x;
HXDLIN( 210)		while((_g1 < _g)){
HXLINE( 210)			++_g1;
HXLINE( 211)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("MMMM",c0,1e,20,33),null());
HXDLIN( 211)			::utest::Assert_obj::equals(HX_("June",e2,f1,42,31),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),211,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testMMMM",12,78,79,4b)));
HXLINE( 212)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("MMMM",c0,1e,20,33),::thx::format::TestDateFormat_obj::fr);
HXDLIN( 212)			::utest::Assert_obj::equals(HX_("juin",70,c1,69,46),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),212,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testMMMM",12,78,79,4b)));
HXLINE( 213)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("MMMM",c0,1e,20,33),::thx::format::TestDateFormat_obj::it);
HXDLIN( 213)			::utest::Assert_obj::equals(HX_("giugno",35,92,79,f1),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),213,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testMMMM",12,78,79,4b)));
HXLINE( 214)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("MMMM",c0,1e,20,33),::thx::format::TestDateFormat_obj::ru);
HXDLIN( 214)			::utest::Assert_obj::equals(HX_("\xd0""\x98""\xd1""\x8e""\xd0""\xbd""\xd1""\x8c""",ad,86,44,07),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),214,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testMMMM",12,78,79,4b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testMMMM,(void))

void TestDateFormat_obj::tests(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","tests",0x4b7f3af7,"thx.format.TestDateFormat.tests","thx/format/TestDateFormat.hx",218,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 218)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 218)		HX_VARI( Int,_g) = this->x;
HXDLIN( 218)		while((_g1 < _g)){
HXLINE( 218)			++_g1;
HXLINE( 219)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("s",73,00,00,00),null());
HXDLIN( 219)			::utest::Assert_obj::equals(HX_("30",9d,2c,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),219,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("tests",e1,7f,95,0d)));
HXLINE( 220)			::Array< ::Dynamic> _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2009-06-15 13:05:03",fb,f5,72,57));
HXDLIN( 220)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(_hx_tmp1,HX_("s",73,00,00,00),null());
HXDLIN( 220)			::utest::Assert_obj::equals(HX_("3",33,00,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),220,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("tests",e1,7f,95,0d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,tests,(void))

void TestDateFormat_obj::testss(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testss",0xc3d45d9c,"thx.format.TestDateFormat.testss","thx/format/TestDateFormat.hx",224,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 224)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 224)		HX_VARI( Int,_g) = this->x;
HXDLIN( 224)		while((_g1 < _g)){
HXLINE( 224)			++_g1;
HXLINE( 225)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("ss",a0,64,00,00),null());
HXDLIN( 225)			::utest::Assert_obj::equals(HX_("30",9d,2c,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),225,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testss",72,65,3a,d5)));
HXLINE( 226)			::Array< ::Dynamic> _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2009-06-15 13:05:03",fb,f5,72,57));
HXDLIN( 226)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(_hx_tmp1,HX_("ss",a0,64,00,00),null());
HXDLIN( 226)			::utest::Assert_obj::equals(HX_("03",03,2a,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),226,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testss",72,65,3a,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testss,(void))

void TestDateFormat_obj::testtt(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testtt",0xc3d45e7c,"thx.format.TestDateFormat.testtt","thx/format/TestDateFormat.hx",230,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 230)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 230)		HX_VARI( Int,_g) = this->x;
HXDLIN( 230)		while((_g1 < _g)){
HXLINE( 230)			++_g1;
HXLINE( 231)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("tt",80,65,00,00),null());
HXDLIN( 231)			::utest::Assert_obj::equals(HX_("PM",fd,45,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),231,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testtt",52,66,3a,d5)));
HXLINE( 232)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("tt",80,65,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN( 232)			::utest::Assert_obj::equals(HX_("",00,00,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),232,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testtt",52,66,3a,d5)));
HXLINE( 233)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("tt",80,65,00,00),::thx::format::TestDateFormat_obj::it);
HXDLIN( 233)			::utest::Assert_obj::equals(HX_("",00,00,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),233,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testtt",52,66,3a,d5)));
HXLINE( 234)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("tt",80,65,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN( 234)			::utest::Assert_obj::equals(HX_("\xe5""\x8d""\x88""\xe5""\xbe""\x8c""",b3,da,cc,19),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),234,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testtt",52,66,3a,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testtt,(void))

void TestDateFormat_obj::testy(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testy",0x4b7f3afd,"thx.format.TestDateFormat.testy","thx/format/TestDateFormat.hx",238,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 238)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 238)		HX_VARI( Int,_g) = this->x;
HXDLIN( 238)		while((_g1 < _g)){
HXLINE( 238)			++_g1;
HXLINE( 239)			::Array< ::Dynamic> _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("1972-06-15 13:05:03",bf,e5,42,1a));
HXDLIN( 239)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(_hx_tmp,HX_("y",79,00,00,00),null());
HXDLIN( 239)			::utest::Assert_obj::equals(HX_("72",1b,30,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),239,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testy",e7,7f,95,0d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testy,(void))

void TestDateFormat_obj::testyy(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testyy",0xc3d462dc,"thx.format.TestDateFormat.testyy","thx/format/TestDateFormat.hx",243,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 243)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 243)		HX_VARI( Int,_g) = this->x;
HXDLIN( 243)		while((_g1 < _g)){
HXLINE( 243)			++_g1;
HXLINE( 244)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("yy",e0,69,00,00),null());
HXDLIN( 244)			::utest::Assert_obj::equals(HX_("09",09,2a,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),244,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testyy",b2,6a,3a,d5)));
HXLINE( 245)			::Array< ::Dynamic> _hx_tmp1 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("1972-06-15 13:05:03",bf,e5,42,1a));
HXDLIN( 245)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(_hx_tmp1,HX_("yy",e0,69,00,00),null());
HXDLIN( 245)			::utest::Assert_obj::equals(HX_("72",1b,30,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),245,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testyy",b2,6a,3a,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testyy,(void))

void TestDateFormat_obj::testyyyy(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testyyyy",0xabd83bbc,"thx.format.TestDateFormat.testyyyy","thx/format/TestDateFormat.hx",249,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 249)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 249)		HX_VARI( Int,_g) = this->x;
HXDLIN( 249)		while((_g1 < _g)){
HXLINE( 249)			++_g1;
HXLINE( 250)			::Array< ::Dynamic> _hx_tmp = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("1980-06-15 13:05:03",82,65,d6,0e));
HXDLIN( 250)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(_hx_tmp,HX_("yyyy",c0,0b,57,50),null());
HXDLIN( 250)			::utest::Assert_obj::equals(HX_("1980",e0,e5,8e,20),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),250,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testyyyy",12,65,b0,68)));
HXLINE( 251)			::Array< ::Dynamic> _hx_tmp2 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2019-06-15 13:05:03",fc,c7,66,da));
HXDLIN( 251)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::formatTerm(_hx_tmp2,HX_("yyyy",c0,0b,57,50),null());
HXDLIN( 251)			::utest::Assert_obj::equals(HX_("2019",26,42,31,21),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),251,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testyyyy",12,65,b0,68)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testyyyy,(void))

void TestDateFormat_obj::testTimeSeprator(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testTimeSeprator",0x62d87733,"thx.format.TestDateFormat.testTimeSeprator","thx/format/TestDateFormat.hx",255,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 255)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 255)		HX_VARI( Int,_g) = this->x;
HXDLIN( 255)		while((_g1 < _g)){
HXLINE( 255)			++_g1;
HXLINE( 256)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_(":",3a,00,00,00),null());
HXDLIN( 256)			::utest::Assert_obj::equals(HX_(":",3a,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),256,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testTimeSeprator",89,e6,9a,3e)));
HXLINE( 257)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_(":",3a,00,00,00),::thx::format::TestDateFormat_obj::fr);
HXDLIN( 257)			::utest::Assert_obj::equals(HX_(":",3a,00,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),257,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testTimeSeprator",89,e6,9a,3e)));
HXLINE( 258)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_(":",3a,00,00,00),::thx::format::TestDateFormat_obj::it);
HXDLIN( 258)			::utest::Assert_obj::equals(HX_(":",3a,00,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),258,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testTimeSeprator",89,e6,9a,3e)));
HXLINE( 259)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_(":",3a,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN( 259)			::utest::Assert_obj::equals(HX_(":",3a,00,00,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),259,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testTimeSeprator",89,e6,9a,3e)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testTimeSeprator,(void))

void TestDateFormat_obj::testDateSeprator(){
            	HX_STACK_FRAME("thx.format.TestDateFormat","testDateSeprator",0x81f78a54,"thx.format.TestDateFormat.testDateSeprator","thx/format/TestDateFormat.hx",263,0xcb87a01a)
            	HX_STACK_THIS(this)
HXLINE( 263)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 263)		HX_VARI( Int,_g) = this->x;
HXDLIN( 263)		while((_g1 < _g)){
HXLINE( 263)			++_g1;
HXLINE( 264)			::String _hx_tmp = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("/",2f,00,00,00),null());
HXDLIN( 264)			::utest::Assert_obj::equals(HX_("/",2f,00,00,00),_hx_tmp,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),264,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testDateSeprator",aa,f9,b9,5d)));
HXLINE( 265)			::String _hx_tmp1 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("/",2f,00,00,00),::thx::format::TestDateFormat_obj::ch);
HXDLIN( 265)			::utest::Assert_obj::equals(HX_(".",2e,00,00,00),_hx_tmp1,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),265,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testDateSeprator",aa,f9,b9,5d)));
HXLINE( 266)			::String _hx_tmp2 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("/",2f,00,00,00),::thx::format::TestDateFormat_obj::it);
HXDLIN( 266)			::utest::Assert_obj::equals(HX_("/",2f,00,00,00),_hx_tmp2,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),266,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testDateSeprator",aa,f9,b9,5d)));
HXLINE( 267)			::String _hx_tmp3 = ::thx::format::DateFormat_obj::formatTerm(::thx::format::TestDateFormat_obj::d1,HX_("/",2f,00,00,00),::thx::format::TestDateFormat_obj::jp);
HXDLIN( 267)			::utest::Assert_obj::equals(HX_("/",2f,00,00,00),_hx_tmp3,null(),hx::SourceInfo(HX_("TestDateFormat.hx",07,20,6d,1f),267,HX_("thx.format.TestDateFormat",04,07,6a,31),HX_("testDateSeprator",aa,f9,b9,5d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormat_obj,testDateSeprator,(void))

 ::thx::culture::Culture TestDateFormat_obj::it;

 ::thx::culture::Culture TestDateFormat_obj::ch;

 ::thx::culture::Culture TestDateFormat_obj::us;

 ::thx::culture::Culture TestDateFormat_obj::ru;

 ::thx::culture::Culture TestDateFormat_obj::fr;

 ::thx::culture::Culture TestDateFormat_obj::jp;

::Array< ::Dynamic> TestDateFormat_obj::d1;

::Array< ::Dynamic> TestDateFormat_obj::d2;


TestDateFormat_obj::TestDateFormat_obj()
{
}

hx::Val TestDateFormat_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"testd") ) { return hx::Val( testd_dyn()); }
		if (HX_FIELD_EQ(inName,"testH") ) { return hx::Val( testH_dyn()); }
		if (HX_FIELD_EQ(inName,"testM") ) { return hx::Val( testM_dyn()); }
		if (HX_FIELD_EQ(inName,"tests") ) { return hx::Val( tests_dyn()); }
		if (HX_FIELD_EQ(inName,"testy") ) { return hx::Val( testy_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"testdd") ) { return hx::Val( testdd_dyn()); }
		if (HX_FIELD_EQ(inName,"testh_") ) { return hx::Val( testh__dyn()); }
		if (HX_FIELD_EQ(inName,"testHH") ) { return hx::Val( testHH_dyn()); }
		if (HX_FIELD_EQ(inName,"testm_") ) { return hx::Val( testm__dyn()); }
		if (HX_FIELD_EQ(inName,"testMM") ) { return hx::Val( testMM_dyn()); }
		if (HX_FIELD_EQ(inName,"testss") ) { return hx::Val( testss_dyn()); }
		if (HX_FIELD_EQ(inName,"testtt") ) { return hx::Val( testtt_dyn()); }
		if (HX_FIELD_EQ(inName,"testyy") ) { return hx::Val( testyy_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testddd") ) { return hx::Val( testddd_dyn()); }
		if (HX_FIELD_EQ(inName,"testhh_") ) { return hx::Val( testhh__dyn()); }
		if (HX_FIELD_EQ(inName,"testmm_") ) { return hx::Val( testmm__dyn()); }
		if (HX_FIELD_EQ(inName,"testMMM") ) { return hx::Val( testMMM_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testdddd") ) { return hx::Val( testdddd_dyn()); }
		if (HX_FIELD_EQ(inName,"testMMMM") ) { return hx::Val( testMMMM_dyn()); }
		if (HX_FIELD_EQ(inName,"testyyyy") ) { return hx::Val( testyyyy_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testFormatU") ) { return hx::Val( testFormatU_dyn()); }
		if (HX_FIELD_EQ(inName,"testFormatD") ) { return hx::Val( testFormatD_dyn()); }
		if (HX_FIELD_EQ(inName,"testFormatM") ) { return hx::Val( testFormatM_dyn()); }
		if (HX_FIELD_EQ(inName,"testFormatR") ) { return hx::Val( testFormatR_dyn()); }
		if (HX_FIELD_EQ(inName,"testFormats") ) { return hx::Val( testFormats_dyn()); }
		if (HX_FIELD_EQ(inName,"testFormatT") ) { return hx::Val( testFormatT_dyn()); }
		if (HX_FIELD_EQ(inName,"testFormatO") ) { return hx::Val( testFormatO_dyn()); }
		if (HX_FIELD_EQ(inName,"testFormaty") ) { return hx::Val( testFormaty_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testFormatd_") ) { return hx::Val( testFormatd__dyn()); }
		if (HX_FIELD_EQ(inName,"testFormatt_") ) { return hx::Val( testFormatt__dyn()); }
		if (HX_FIELD_EQ(inName,"testFormatu_") ) { return hx::Val( testFormatu__dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testTimeSeprator") ) { return hx::Val( testTimeSeprator_dyn()); }
		if (HX_FIELD_EQ(inName,"testDateSeprator") ) { return hx::Val( testDateSeprator_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestDateFormat_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"it") ) { outValue = it; return true; }
		if (HX_FIELD_EQ(inName,"ch") ) { outValue = ch; return true; }
		if (HX_FIELD_EQ(inName,"us") ) { outValue = us; return true; }
		if (HX_FIELD_EQ(inName,"ru") ) { outValue = ru; return true; }
		if (HX_FIELD_EQ(inName,"fr") ) { outValue = fr; return true; }
		if (HX_FIELD_EQ(inName,"jp") ) { outValue = jp; return true; }
		if (HX_FIELD_EQ(inName,"d1") ) { outValue = d1; return true; }
		if (HX_FIELD_EQ(inName,"d2") ) { outValue = d2; return true; }
	}
	return false;
}

hx::Val TestDateFormat_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TestDateFormat_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"it") ) { it=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"ch") ) { ch=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"us") ) { us=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"ru") ) { ru=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"fr") ) { fr=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"jp") ) { jp=ioValue.Cast<  ::thx::culture::Culture >(); return true; }
		if (HX_FIELD_EQ(inName,"d1") ) { d1=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"d2") ) { d2=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void TestDateFormat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestDateFormat_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestDateFormat_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TestDateFormat_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestDateFormat_obj::it,HX_HCSTRING("it","\xeb","\x5b","\x00","\x00")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestDateFormat_obj::ch,HX_HCSTRING("ch","\xa5","\x56","\x00","\x00")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestDateFormat_obj::us,HX_HCSTRING("us","\x5e","\x66","\x00","\x00")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestDateFormat_obj::ru,HX_HCSTRING("ru","\xc3","\x63","\x00","\x00")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestDateFormat_obj::fr,HX_HCSTRING("fr","\x4c","\x59","\x00","\x00")},
	{hx::fsObject /*::thx::culture::Culture*/ ,(void *) &TestDateFormat_obj::jp,HX_HCSTRING("jp","\xc6","\x5c","\x00","\x00")},
	{hx::fsObject /*Array< cpp::Int64Struct >*/ ,(void *) &TestDateFormat_obj::d1,HX_HCSTRING("d1","\x4d","\x57","\x00","\x00")},
	{hx::fsObject /*Array< cpp::Int64Struct >*/ ,(void *) &TestDateFormat_obj::d2,HX_HCSTRING("d2","\x4e","\x57","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TestDateFormat_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testFormatU","\x0c","\xaf","\xf7","\x9b"),
	HX_HCSTRING("testFormatd_","\xe4","\x88","\xc1","\xdc"),
	HX_HCSTRING("testFormatD","\xfb","\xae","\xf7","\x9b"),
	HX_HCSTRING("testFormatM","\x04","\xaf","\xf7","\x9b"),
	HX_HCSTRING("testFormatR","\x09","\xaf","\xf7","\x9b"),
	HX_HCSTRING("testFormats","\x2a","\xaf","\xf7","\x9b"),
	HX_HCSTRING("testFormatt_","\xd4","\x96","\xc1","\xdc"),
	HX_HCSTRING("testFormatT","\x0b","\xaf","\xf7","\x9b"),
	HX_HCSTRING("testFormatu_","\xb3","\x97","\xc1","\xdc"),
	HX_HCSTRING("testFormatO","\x06","\xaf","\xf7","\x9b"),
	HX_HCSTRING("testFormaty","\x30","\xaf","\xf7","\x9b"),
	HX_HCSTRING("testd","\xd2","\x7f","\x95","\x0d"),
	HX_HCSTRING("testdd","\x52","\x58","\x3a","\xd5"),
	HX_HCSTRING("testddd","\xd2","\xef","\xd2","\xbd"),
	HX_HCSTRING("testdddd","\x52","\xe8","\xbe","\x5a"),
	HX_HCSTRING("testh_","\xc9","\x5b","\x3a","\xd5"),
	HX_HCSTRING("testhh_","\x4d","\xfc","\xd5","\xbd"),
	HX_HCSTRING("testH","\xb6","\x7f","\x95","\x0d"),
	HX_HCSTRING("testHH","\xd2","\x3f","\x3a","\xd5"),
	HX_HCSTRING("testm_","\x24","\x60","\x3a","\xd5"),
	HX_HCSTRING("testmm_","\xed","\xcb","\xd9","\xbd"),
	HX_HCSTRING("testM","\xbb","\x7f","\x95","\x0d"),
	HX_HCSTRING("testMM","\x32","\x44","\x3a","\xd5"),
	HX_HCSTRING("testMMM","\xdb","\x67","\xc1","\xbd"),
	HX_HCSTRING("testMMMM","\x12","\x78","\x79","\x4b"),
	HX_HCSTRING("tests","\xe1","\x7f","\x95","\x0d"),
	HX_HCSTRING("testss","\x72","\x65","\x3a","\xd5"),
	HX_HCSTRING("testtt","\x52","\x66","\x3a","\xd5"),
	HX_HCSTRING("testy","\xe7","\x7f","\x95","\x0d"),
	HX_HCSTRING("testyy","\xb2","\x6a","\x3a","\xd5"),
	HX_HCSTRING("testyyyy","\x12","\x65","\xb0","\x68"),
	HX_HCSTRING("testTimeSeprator","\x89","\xe6","\x9a","\x3e"),
	HX_HCSTRING("testDateSeprator","\xaa","\xf9","\xb9","\x5d"),
	::String(null()) };

static void TestDateFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestDateFormat_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TestDateFormat_obj::it,"it");
	HX_MARK_MEMBER_NAME(TestDateFormat_obj::ch,"ch");
	HX_MARK_MEMBER_NAME(TestDateFormat_obj::us,"us");
	HX_MARK_MEMBER_NAME(TestDateFormat_obj::ru,"ru");
	HX_MARK_MEMBER_NAME(TestDateFormat_obj::fr,"fr");
	HX_MARK_MEMBER_NAME(TestDateFormat_obj::jp,"jp");
	HX_MARK_MEMBER_NAME(TestDateFormat_obj::d1,"d1");
	HX_MARK_MEMBER_NAME(TestDateFormat_obj::d2,"d2");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestDateFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestDateFormat_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TestDateFormat_obj::it,"it");
	HX_VISIT_MEMBER_NAME(TestDateFormat_obj::ch,"ch");
	HX_VISIT_MEMBER_NAME(TestDateFormat_obj::us,"us");
	HX_VISIT_MEMBER_NAME(TestDateFormat_obj::ru,"ru");
	HX_VISIT_MEMBER_NAME(TestDateFormat_obj::fr,"fr");
	HX_VISIT_MEMBER_NAME(TestDateFormat_obj::jp,"jp");
	HX_VISIT_MEMBER_NAME(TestDateFormat_obj::d1,"d1");
	HX_VISIT_MEMBER_NAME(TestDateFormat_obj::d2,"d2");
};

#endif

hx::Class TestDateFormat_obj::__mClass;

static ::String TestDateFormat_obj_sStaticFields[] = {
	HX_HCSTRING("it","\xeb","\x5b","\x00","\x00"),
	HX_HCSTRING("ch","\xa5","\x56","\x00","\x00"),
	HX_HCSTRING("us","\x5e","\x66","\x00","\x00"),
	HX_HCSTRING("ru","\xc3","\x63","\x00","\x00"),
	HX_HCSTRING("fr","\x4c","\x59","\x00","\x00"),
	HX_HCSTRING("jp","\xc6","\x5c","\x00","\x00"),
	HX_HCSTRING("d1","\x4d","\x57","\x00","\x00"),
	HX_HCSTRING("d2","\x4e","\x57","\x00","\x00"),
	::String(null())
};

void TestDateFormat_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.format.TestDateFormat","\x04","\x07","\x6a","\x31");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestDateFormat_obj::__GetStatic;
	__mClass->mSetStaticField = &TestDateFormat_obj::__SetStatic;
	__mClass->mMarkFunc = TestDateFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestDateFormat_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestDateFormat_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestDateFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestDateFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDateFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDateFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestDateFormat_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.format.TestDateFormat","boot",0x44d43ddc,"thx.format.TestDateFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)9)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(".",2e,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xac""",4c,ef,ab,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("Non un numero reale",f7,bd,ea,94))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("+Infinito",29,76,a7,22))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)2)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinito",2b,48,8a,c8))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(".",2e,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(".",2e,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("italiano",af,a6,00,8b))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Italy",03,12,37,55))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd d MMMM yyyy HH:mm:ss",dc,7e,69,9b))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("calendario gregoriano",45,88,b6,ba))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstFourDayWeek",fa,56,48,9b))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("dd MMMM",60,27,05,da))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd d MMMM yyyy",44,a9,80,93))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("do",8b,57,00,00))->init(1,HX_("lu",89,5e,00,00))->init(2,HX_("ma",54,5f,00,00))->init(3,HX_("me",58,5f,00,00))->init(4,HX_("gi",22,5a,00,00))->init(5,HX_("ve",2f,67,00,00))->init(6,HX_("sa",8e,64,00,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("dom",82,42,4c,00))->init(1,HX_("lun",c5,59,52,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("mer",1a,0e,53,00))->init(4,HX_("gio",0d,84,4e,00))->init(5,HX_("ven",5f,e2,59,00))->init(6,HX_("sab",14,98,57,00)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("HH:mm",1a,83,9d,a4))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("HH:mm:ss",80,50,d2,03))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("domenica",bc,78,e7,64))->init(1,HX_("luned\xc3""\xac""",ed,38,f2,eb))->init(2,HX_("marted\xc3""\xac""",be,1b,56,be))->init(3,HX_("mercoled\xc3""\xac""",0e,02,2a,7a))->init(4,HX_("gioved\xc3""\xac""",f1,38,8e,a7))->init(5,HX_("venerd\xc3""\xac""",e1,9a,99,33))->init(6,HX_("sabato",88,ac,f9,15)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd/MM/yyyy",40,9b,42,af))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)2)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("Italia",0e,a3,f8,3a))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("it-IT",4d,0e,e2,c1))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("it-IT",4d,0e,e2,c1))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("it",eb,5b,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("ita",16,12,50,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1040)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ITA",f6,ad,37,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Italian",a0,09,96,5e)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		it = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestDateFormat","boot",0x44d43ddc,"thx.format.TestDateFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)2)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_("'",27,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("fr.",62,c9,4d,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("Non un numero reale",f7,bd,ea,94))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("+Infinito",29,76,a7,22))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(".",2e,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)2)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinito",2b,48,8a,c8))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_("'",27,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(".",2e,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_("'",27,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(".",2e,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("italiano",af,a6,00,8b))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Switzerland",03,77,3b,b9))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd, d. MMMM yyyy HH:mm:ss",a2,0c,a0,a0))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("calendario gregoriano",45,88,b6,ba))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstFourDayWeek",fa,56,48,9b))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("d. MMMM",56,ab,bf,42))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd, d. MMMM yyyy",3e,ec,aa,14))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("do",8b,57,00,00))->init(1,HX_("lu",89,5e,00,00))->init(2,HX_("ma",54,5f,00,00))->init(3,HX_("me",58,5f,00,00))->init(4,HX_("gi",22,5a,00,00))->init(5,HX_("ve",2f,67,00,00))->init(6,HX_("sa",8e,64,00,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_(".",2e,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("dom",82,42,4c,00))->init(1,HX_("lun",c5,59,52,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("mer",1a,0e,53,00))->init(4,HX_("gio",0d,84,4e,00))->init(5,HX_("ven",5f,e2,59,00))->init(6,HX_("sab",14,98,57,00)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("HH:mm",1a,83,9d,a4))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("HH:mm:ss",80,50,d2,03))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("domenica",bc,78,e7,64))->init(1,HX_("luned\xc3""\xac""",ed,38,f2,eb))->init(2,HX_("marted\xc3""\xac""",be,1b,56,be))->init(3,HX_("mercoled\xc3""\xac""",0e,02,2a,7a))->init(4,HX_("gioved\xc3""\xac""",f1,38,8e,a7))->init(5,HX_("venerd\xc3""\xac""",e1,9a,99,33))->init(6,HX_("sabato",88,ac,f9,15)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd.MM.yyyy",a0,94,a9,e2))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)2)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("Svizzera",8e,74,8c,41))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("it-CH",07,09,e2,c1))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("it-CH",07,09,e2,c1))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("it",eb,5b,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("ita",16,12,50,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)2064)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ITS",08,ae,37,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Italian",a0,09,96,5e)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		ch = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestDateFormat","boot",0x44d43ddc,"thx.format.TestDateFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)0)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(",",2c,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("$",24,00,00,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("NaN",9b,84,3b,00))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("Infinity",08,d3,1a,b4))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(".",2e,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)0)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)0)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)0)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinity",35,48,8a,c8))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(",",2c,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(".",2e,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(",",2c,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(".",2e,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("English",10,8f,83,c6))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("United States",df,3b,55,64))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd, MMMM dd, yyyy h:mm:ss tt",b8,2b,cf,ac))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("Gregorian Calendar",78,a4,39,8d))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Sunday",70,80,82,d6))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("MMMM dd",e0,38,48,d4))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd, MMMM dd, yyyy",20,cf,04,b3))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("Su",c2,48,00,00))->init(1,HX_("Mo",82,43,00,00))->init(2,HX_("Tu",a1,49,00,00))->init(3,HX_("We",2e,4c,00,00))->init(4,HX_("Th",94,49,00,00))->init(5,HX_("Fr",6c,3d,00,00))->init(6,HX_("Sa",ae,48,00,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("AM",ec,38,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("PM",fd,45,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("Sun",6c,61,3f,00))->init(1,HX_("Mon",ac,ce,3a,00))->init(2,HX_("Tue",a4,23,40,00))->init(3,HX_("Wed",76,5c,42,00))->init(4,HX_("Thu",61,18,40,00))->init(5,HX_("Fri",7d,81,35,00))->init(6,HX_("Sat",06,50,3f,00)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("h:mm tt",2e,56,3d,20))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("h:mm:ss tt",b8,7e,f4,ab))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)0)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM, yyyy",f4,2a,01,54))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("Sunday",70,80,82,d6))->init(1,HX_("Monday",30,db,f6,fb))->init(2,HX_("Tuesday",6d,85,94,e0))->init(3,HX_("Wednesday",76,20,5e,ee))->init(4,HX_("Thursday",3a,c9,04,61))->init(5,HX_("Friday",ff,00,5d,e6))->init(6,HX_("Saturday",59,42,eb,57)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("M/d/yyyy",4d,85,79,32))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(",",2c,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("United States",df,3b,55,64))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("en-US",02,7f,50,70))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("en-US",02,7f,50,70))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("en",69,58,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("eng",de,03,4d,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1033)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ENU",cc,9f,34,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("English",10,8f,83,c6)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		us = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestDateFormat","boot",0x44d43ddc,"thx.format.TestDateFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)8)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xbd""",5d,ef,ab,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("NaN",9b,84,3b,00))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("\xd0""\xb1""\xd0""\xb5""\xd1""\x81""\xd0""\xba""\xd0""\xbe""\xd0""\xbd""\xd0""\xb5""\xd1""\x87""\xd0""\xbd""\xd0""\xbe""\xd1""\x81""\xd1""\x82""\xd1""\x8c""",ed,3e,05,12))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)3)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-\xd0""\xb1""\xd0""\xb5""\xd1""\x81""\xd0""\xba""\xd0""\xbe""\xd0""\xbd""\xd0""\xb5""\xd1""\x87""\xd0""\xbd""\xd0""\xbe""\xd1""\x81""\xd1""\x82""\xd1""\x8c""",5a,83,c2,cb))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("\xd1""\x80""\xd1""\x83""\xd1""\x81""\xd1""\x81""\xd0""\xba""\xd0""\xb8""\xd0""\xb9""",fc,a3,96,2a))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Russia",db,9d,80,73))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("d MMMM yyyy '\xd0""\xb3"".' H:mm:ss",6f,6c,08,f0))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("\xd0""\xb3""\xd1""\x80""\xd0""\xb8""\xd0""\xb3""\xd0""\xbe""\xd1""\x80""\xd0""\xb8""\xd0""\xb0""\xd0""\xbd""\xd1""\x81""\xd0""\xba""\xd0""\xb8""\xd0""\xb9"" \xd0""\xba""\xd0""\xb0""\xd0""\xbb""\xd0""\xb5""\xd0""\xbd""\xd0""\xb4""\xd0""\xb0""\xd1""\x80""\xd1""\x8c""",5b,7d,a2,27))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd1""\x8f""\xd0""\xbd""\xd0""\xb2""\xd0""\xb0""\xd1""\x80""\xd1""\x8f""",3a,33,74,10))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""\xd1""\x80""\xd0""\xb0""\xd0""\xbb""\xd1""\x8f""",12,c4,9f,df))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""\xd1""\x82""\xd0""\xb0""",8c,7c,f2,03))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""\xd0""\xb5""\xd0""\xbb""\xd1""\x8f""",4c,20,c9,0b))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x8f""",6a,c0,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""\xd1""\x8f""",d0,5e,f3,39))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""\xd1""\x8f""",4e,da,f1,39))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""\xd1""\x83""\xd1""\x81""\xd1""\x82""\xd0""\xb0""",78,9c,22,3e))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8f""",1f,a6,86,65))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8f""",55,bb,92,a5))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8f""",87,3e,c7,e6))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""\xd0""\xb0""\xd0""\xb1""\xd1""\x80""\xd1""\x8f""",21,19,4c,ef))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd1""\x8f""\xd0""\xbd""\xd0""\xb2""",ad,de,ef,70))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""",1a,6b,81,1b))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""",5b,c0,92,f3))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""",1e,2c,cf,0a))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd0""\xb9""",b5,bf,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""",b2,d7,87,a6))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""",b0,d7,87,a6))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""",25,4e,c5,0a))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""",a2,ad,4d,61))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""",e9,7f,67,1a))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""",79,f4,03,87))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""",f3,e6,61,58))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("MMMM dd",e0,38,48,d4))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("d MMMM yyyy '\xd0""\xb3"".'",c7,51,36,5a))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("\xd0""\x92""\xd1""\x81""",d2,e0,eb,89))->init(1,HX_("\xd0""\x9f""\xd0""\xbd""",7c,bd,f5,89))->init(2,HX_("\xd0""\x92""\xd1""\x82""",d3,e0,eb,89))->init(3,HX_("\xd0""\xa1""\xd1""\x80""",a0,42,f7,89))->init(4,HX_("\xd0""\xa7""\xd1""\x82""",28,d0,fb,89))->init(5,HX_("\xd0""\x9f""\xd1""\x82""",20,be,f5,89))->init(6,HX_("\xd0""\xa1""\xd0""\xb1""",f2,41,f7,89)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_(".",2e,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("\xd0""\x92""\xd1""\x81""",d2,e0,eb,89))->init(1,HX_("\xd0""\x9f""\xd0""\xbd""",7c,bd,f5,89))->init(2,HX_("\xd0""\x92""\xd1""\x82""",d3,e0,eb,89))->init(3,HX_("\xd0""\xa1""\xd1""\x80""",a0,42,f7,89))->init(4,HX_("\xd0""\xa7""\xd1""\x82""",28,d0,fb,89))->init(5,HX_("\xd0""\x9f""\xd1""\x82""",20,be,f5,89))->init(6,HX_("\xd0""\xa1""\xd0""\xb1""",f2,41,f7,89)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("H:mm",d2,be,c3,2f))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("H:mm:ss",c8,37,a2,ed))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("\xd0""\xb2""\xd0""\xbe""\xd1""\x81""\xd0""\xba""\xd1""\x80""\xd0""\xb5""\xd1""\x81""\xd0""\xb5""\xd0""\xbd""\xd1""\x8c""\xd0""\xb5""",60,35,d8,18))->init(1,HX_("\xd0""\xbf""\xd0""\xbe""\xd0""\xbd""\xd0""\xb5""\xd0""\xb4""\xd0""\xb5""\xd0""\xbb""\xd1""\x8c""\xd0""\xbd""\xd0""\xb8""\xd0""\xba""",7d,ab,f1,56))->init(2,HX_("\xd0""\xb2""\xd1""\x82""\xd0""\xbe""\xd1""\x80""\xd0""\xbd""\xd0""\xb8""\xd0""\xba""",af,3c,7d,9a))->init(3,HX_("\xd1""\x81""\xd1""\x80""\xd0""\xb5""\xd0""\xb4""\xd0""\xb0""",88,0b,24,b1))->init(4,HX_("\xd1""\x87""\xd0""\xb5""\xd1""\x82""\xd0""\xb2""\xd0""\xb5""\xd1""\x80""\xd0""\xb3""",45,1b,64,ab))->init(5,HX_("\xd0""\xbf""\xd1""\x8f""\xd1""\x82""\xd0""\xbd""\xd0""\xb8""\xd1""\x86""\xd0""\xb0""",68,23,32,cf))->init(6,HX_("\xd1""\x81""\xd1""\x83""\xd0""\xb1""\xd0""\xb1""\xd0""\xbe""\xd1""\x82""\xd0""\xb0""",c3,ba,3e,1e)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd1""\x8f""\xd0""\xbd""\xd0""\xb2""",ad,de,ef,70))->init(1,HX_("\xd1""\x84""\xd0""\xb5""\xd0""\xb2""",1a,6b,81,1b))->init(2,HX_("\xd0""\xbc""\xd0""\xb0""\xd1""\x80""",5b,c0,92,f3))->init(3,HX_("\xd0""\xb0""\xd0""\xbf""\xd1""\x80""",1e,2c,cf,0a))->init(4,HX_("\xd0""\xbc""\xd0""\xb0""\xd0""\xb9""",b5,bf,92,f3))->init(5,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbd""",b2,d7,87,a6))->init(6,HX_("\xd0""\xb8""\xd1""\x8e""\xd0""\xbb""",b0,d7,87,a6))->init(7,HX_("\xd0""\xb0""\xd0""\xb2""\xd0""\xb3""",25,4e,c5,0a))->init(8,HX_("\xd1""\x81""\xd0""\xb5""\xd0""\xbd""",a2,ad,4d,61))->init(9,HX_("\xd0""\xbe""\xd0""\xba""\xd1""\x82""",e9,7f,67,1a))->init(10,HX_("\xd0""\xbd""\xd0""\xbe""\xd1""\x8f""",79,f4,03,87))->init(11,HX_("\xd0""\xb4""\xd0""\xb5""\xd0""\xba""",f3,e6,61,58))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("\xd0""\xaf""\xd0""\xbd""\xd0""\xb2""\xd0""\xb0""\xd1""\x80""\xd1""\x8c""",b8,2d,82,ea))->init(1,HX_("\xd0""\xa4""\xd0""\xb5""\xd0""\xb2""\xd1""\x80""\xd0""\xb0""\xd0""\xbb""\xd1""\x8c""",d0,20,02,d5))->init(2,HX_("\xd0""\x9c""\xd0""\xb0""\xd1""\x80""\xd1""\x82""",8c,ab,59,db))->init(3,HX_("\xd0""\x90""\xd0""\xbf""\xd1""\x80""\xd0""\xb5""\xd0""\xbb""\xd1""\x8c""",29,b8,fb,ef))->init(4,HX_("\xd0""\x9c""\xd0""\xb0""\xd0""\xb9""",95,2f,c0,86))->init(5,HX_("\xd0""\x98""\xd1""\x8e""\xd0""\xbd""\xd1""\x8c""",ad,86,44,07))->init(6,HX_("\xd0""\x98""\xd1""\x8e""\xd0""\xbb""\xd1""\x8c""",2b,02,43,07))->init(7,HX_("\xd0""\x90""\xd0""\xb2""\xd0""\xb3""\xd1""\x83""\xd1""\x81""\xd1""\x82""",78,28,1d,e6))->init(8,HX_("\xd0""\xa1""\xd0""\xb5""\xd0""\xbd""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",1d,75,ca,3d))->init(9,HX_("\xd0""\x9e""\xd0""\xba""\xd1""\x82""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",32,0b,83,ed))->init(10,HX_("\xd0""\x9d""\xd0""\xbe""\xd1""\x8f""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",64,d6,f9,ca))->init(11,HX_("\xd0""\x94""\xd0""\xb5""\xd0""\xba""\xd0""\xb0""\xd0""\xb1""\xd1""\x80""\xd1""\x8c""",fe,68,3c,37))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd.MM.yyyy",a0,94,a9,e2))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("\xd0""\xa0""\xd0""\xbe""\xd1""\x81""\xd1""\x81""\xd0""\xb8""\xd1""\x8f""",64,65,09,ca))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("ru-RU",4d,85,26,f1))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("ru-RU",4d,85,26,f1))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("ru",c3,63,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("rus",50,e7,56,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1049)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("RUS",30,83,3e,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Russian",33,82,09,9d)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		ru = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestDateFormat","boot",0x44d43ddc,"thx.format.TestDateFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)8)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xac""",4c,ef,ab,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("Non Num\xc3""\xa9""rique",51,8c,69,6d))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("+Infini",2e,e9,f7,c5))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)0)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)0)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)3)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infini",b0,d6,22,19))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_("\xc2""\xa0""",9e,a9,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("fran\xc3""\xa7""ais",ae,0e,5a,f7))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("France",3b,e4,1a,e1))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd d MMMM yyyy HH:mm:ss",dc,7e,69,9b))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("calendrier gr\xc3""\xa9""gorien",08,63,89,47))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("janvier",b7,2d,e4,a4))->init(1,HX_("f\xc3""\xa9""vrier",6e,b3,35,46))->init(2,HX_("mars",15,40,56,48))->init(3,HX_("avril",00,4f,34,28))->init(4,HX_("mai",95,0a,53,00))->init(5,HX_("juin",70,c1,69,46))->init(6,HX_("juillet",2d,a3,6c,bc))->init(7,HX_("ao\xc3""\xbb""t",ae,8e,d1,23))->init(8,HX_("septembre",57,9a,f2,55))->init(9,HX_("octobre",66,f0,47,b1))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("d\xc3""\xa9""cembre",54,a9,89,70))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("janv.",8f,0e,eb,48))->init(1,HX_("f\xc3""\xa9""vr.",86,e8,98,7f))->init(2,HX_("mars",15,40,56,48))->init(3,HX_("avr.",b1,9f,77,40))->init(4,HX_("mai",95,0a,53,00))->init(5,HX_("juin",70,c1,69,46))->init(6,HX_("juil.",00,7f,1f,56))->init(7,HX_("ao\xc3""\xbb""t",ae,8e,d1,23))->init(8,HX_("sept.",58,a4,2c,7a))->init(9,HX_("oct.",4e,33,aa,49))->init(10,HX_("nov.",79,19,0a,49))->init(11,HX_("d\xc3""\xa9""c.",d5,30,77,15))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("d MMMM",fc,c3,a2,9b))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd d MMMM yyyy",44,a9,80,93))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("di",85,57,00,00))->init(1,HX_("lu",89,5e,00,00))->init(2,HX_("ma",54,5f,00,00))->init(3,HX_("me",58,5f,00,00))->init(4,HX_("je",bb,5c,00,00))->init(5,HX_("ve",2f,67,00,00))->init(6,HX_("sa",8e,64,00,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("dim.",e6,61,69,42))->init(1,HX_("lun.",c9,32,bc,47))->init(2,HX_("mar.",d0,3f,56,48))->init(3,HX_("mer.",d4,48,59,48))->init(4,HX_("jeu.",94,a7,5d,46))->init(5,HX_("ven.",ef,30,4c,4e))->init(6,HX_("sam.",2f,83,4d,4c)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("HH:mm",1a,83,9d,a4))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("HH:mm:ss",80,50,d2,03))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("dimanche",0b,d5,c7,1d))->init(1,HX_("lundi",8a,6c,f0,7c))->init(2,HX_("mardi",a3,c5,21,03))->init(3,HX_("mercredi",81,4f,74,a3))->init(4,HX_("jeudi",5f,29,95,4b))->init(5,HX_("vendredi",9d,75,33,a0))->init(6,HX_("samedi",6b,00,42,1d)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("janv.",8f,0e,eb,48))->init(1,HX_("f\xc3""\xa9""vr.",86,e8,98,7f))->init(2,HX_("mars",15,40,56,48))->init(3,HX_("avr.",b1,9f,77,40))->init(4,HX_("mai",95,0a,53,00))->init(5,HX_("juin",70,c1,69,46))->init(6,HX_("juil.",00,7f,1f,56))->init(7,HX_("ao\xc3""\xbb""t",ae,8e,d1,23))->init(8,HX_("sept.",58,a4,2c,7a))->init(9,HX_("oct.",4e,33,aa,49))->init(10,HX_("nov.",79,19,0a,49))->init(11,HX_("d\xc3""\xa9""c.",d5,30,77,15))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("janvier",b7,2d,e4,a4))->init(1,HX_("f\xc3""\xa9""vrier",6e,b3,35,46))->init(2,HX_("mars",15,40,56,48))->init(3,HX_("avril",00,4f,34,28))->init(4,HX_("mai",95,0a,53,00))->init(5,HX_("juin",70,c1,69,46))->init(6,HX_("juillet",2d,a3,6c,bc))->init(7,HX_("ao\xc3""\xbb""t",ae,8e,d1,23))->init(8,HX_("septembre",57,9a,f2,55))->init(9,HX_("octobre",66,f0,47,b1))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("d\xc3""\xa9""cembre",54,a9,89,70))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd/MM/yyyy",40,9b,42,af))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("France",3b,e4,1a,e1))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("fr-FR",ed,e0,5b,06))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("fr-FR",ed,e0,5b,06))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("fr",4c,59,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("fra",95,c9,4d,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1036)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("FRA",75,65,35,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("French",ba,be,bf,e3)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		fr = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestDateFormat","boot",0x44d43ddc,"thx.format.TestDateFormat.boot","thx/culture/Embed.hx",36,0xb6a59b51)
HXLINE(  36)		HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            			->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            				->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)1)
            				->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(",",2c,00,00,00))
            				->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            				->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xc2""\xa5""",a3,a9,00,00))
            				->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            				->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            				->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("NaN (\xe9""\x9d""\x9e""\xe6""\x95""\xb0""\xe5""\x80""\xa4"")",fa,fe,5d,50))
            				->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            				->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            				->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            				->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("+\xe2""\x88""\x9e""",2d,21,18,1d))
            				->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            				->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(".",2e,00,00,00))
            				->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            				->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            				->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)0)
            				->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-\xe2""\x88""\x9e""",6b,8e,6a,1e))
            				->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)0)
            				->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(",",2c,00,00,00))
            				->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(".",2e,00,00,00))
            				->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            				->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(",",2c,00,00,00))
            				->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(".",2e,00,00,00))
            				->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            			->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("\xe6""\x97""\xa5""\xe6""\x9c""\xac""\xe8""\xaa""\x9e""",fa,ff,f3,49))
            			->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Japan",e6,f0,19,dc))
            			->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            				->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("yyyy'\xe5""\xb9""\xb4""'M'\xe6""\x9c""\x88""'d'\xe6""\x97""\xa5""' H:mm:ss",1b,fc,57,8f))
            				->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("\xe8""\xa5""\xbf""\xe6""\x9a""\xa6"" (\xe6""\x97""\xa5""\xe6""\x9c""\xac""\xe8""\xaa""\x9e"")",07,04,07,a6))
            				->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            				->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Sunday",70,80,82,d6))
            				->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("1\xe6""\x9c""\x88""",41,83,12,21))->init(1,HX_("2\xe6""\x9c""\x88""",e0,b9,bb,21))->init(2,HX_("3\xe6""\x9c""\x88""",7f,f0,64,22))->init(3,HX_("4\xe6""\x9c""\x88""",1e,27,0e,23))->init(4,HX_("5\xe6""\x9c""\x88""",bd,5d,b7,23))->init(5,HX_("6\xe6""\x9c""\x88""",5c,94,60,24))->init(6,HX_("7\xe6""\x9c""\x88""",fb,ca,09,25))->init(7,HX_("8\xe6""\x9c""\x88""",9a,01,b3,25))->init(8,HX_("9\xe6""\x9c""\x88""",39,38,5c,26))->init(9,HX_("10\xe6""\x9c""\x88""",53,b9,0b,57))->init(10,HX_("11\xe6""\x9c""\x88""",f2,ef,b4,57))->init(11,HX_("12\xe6""\x9c""\x88""",91,26,5e,58))->init(12,HX_("",00,00,00,00)))
            				->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("1",31,00,00,00))->init(1,HX_("2",32,00,00,00))->init(2,HX_("3",33,00,00,00))->init(3,HX_("4",34,00,00,00))->init(4,HX_("5",35,00,00,00))->init(5,HX_("6",36,00,00,00))->init(6,HX_("7",37,00,00,00))->init(7,HX_("8",38,00,00,00))->init(8,HX_("9",39,00,00,00))->init(9,HX_("10",df,2a,00,00))->init(10,HX_("11",e0,2a,00,00))->init(11,HX_("12",e1,2a,00,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("M'\xe6""\x9c""\x88""'d'\xe6""\x97""\xa5""'",65,a2,d6,77))
            				->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("yyyy'\xe5""\xb9""\xb4""'M'\xe6""\x9c""\x88""'d'\xe6""\x97""\xa5""'",73,55,18,b9))
            				->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            				->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("\xe6""\x97""\xa5""",94,0a,af,00))->init(1,HX_("\xe6""\x9c""\x88""",d2,0e,af,00))->init(2,HX_("\xe7""\x81""\xab""",b1,b9,af,00))->init(3,HX_("\xe6""\xb0""\xb4""",6a,20,af,00))->init(4,HX_("\xe6""\x9c""\xa8""",f2,0e,af,00))->init(5,HX_("\xe9""\x87""\x91""",53,43,b1,00))->init(6,HX_("\xe5""\x9c""\x9f""",a8,4c,ae,00)))
            				->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            				->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("\xe5""\x8d""\x88""\xe5""\x89""\x8d""",89,ac,cc,19))
            				->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("\xe5""\x8d""\x88""\xe5""\xbe""\x8c""",b3,da,cc,19))
            				->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("\xe6""\x97""\xa5""",94,0a,af,00))->init(1,HX_("\xe6""\x9c""\x88""",d2,0e,af,00))->init(2,HX_("\xe7""\x81""\xab""",b1,b9,af,00))->init(3,HX_("\xe6""\xb0""\xb4""",6a,20,af,00))->init(4,HX_("\xe6""\x9c""\xa8""",f2,0e,af,00))->init(5,HX_("\xe9""\x87""\x91""",53,43,b1,00))->init(6,HX_("\xe5""\x9c""\x9f""",a8,4c,ae,00)))
            				->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("H:mm",d2,be,c3,2f))
            				->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            				->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("H:mm:ss",c8,37,a2,ed))
            				->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)0)
            				->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("yyyy'\xe5""\xb9""\xb4""'M'\xe6""\x9c""\x88""'",dd,25,1c,f3))
            				->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("\xe6""\x97""\xa5""\xe6""\x9b""\x9c""\xe6""\x97""\xa5""",81,6c,f8,ab))->init(1,HX_("\xe6""\x9c""\x88""\xe6""\x9b""\x9c""\xe6""\x97""\xa5""",3f,33,06,14))->init(2,HX_("\xe7""\x81""\xab""\xe6""\x9b""\x9c""\xe6""\x97""\xa5""",5e,cf,14,8e))->init(3,HX_("\xe6""\xb0""\xb4""\xe6""\x9b""\x9c""\xe6""\x97""\xa5""",d7,86,a7,b1))->init(4,HX_("\xe6""\x9c""\xa8""\xe6""\x9b""\x9c""\xe6""\x97""\xa5""",5f,0b,b5,46))->init(5,HX_("\xe9""\x87""\x91""\xe6""\x9b""\x9c""\xe6""\x97""\xa5""",80,3e,f8,51))->init(6,HX_("\xe5""\x9c""\x9f""\xe6""\x9b""\x9c""\xe6""\x97""\xa5""",95,75,82,fd)))
            				->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("1",31,00,00,00))->init(1,HX_("2",32,00,00,00))->init(2,HX_("3",33,00,00,00))->init(3,HX_("4",34,00,00,00))->init(4,HX_("5",35,00,00,00))->init(5,HX_("6",36,00,00,00))->init(6,HX_("7",37,00,00,00))->init(7,HX_("8",38,00,00,00))->init(8,HX_("9",39,00,00,00))->init(9,HX_("10",df,2a,00,00))->init(10,HX_("11",e0,2a,00,00))->init(11,HX_("12",e1,2a,00,00))->init(12,HX_("",00,00,00,00)))
            				->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("1\xe6""\x9c""\x88""",41,83,12,21))->init(1,HX_("2\xe6""\x9c""\x88""",e0,b9,bb,21))->init(2,HX_("3\xe6""\x9c""\x88""",7f,f0,64,22))->init(3,HX_("4\xe6""\x9c""\x88""",1e,27,0e,23))->init(4,HX_("5\xe6""\x9c""\x88""",bd,5d,b7,23))->init(5,HX_("6\xe6""\x9c""\x88""",5c,94,60,24))->init(6,HX_("7\xe6""\x9c""\x88""",fb,ca,09,25))->init(7,HX_("8\xe6""\x9c""\x88""",9a,01,b3,25))->init(8,HX_("9\xe6""\x9c""\x88""",39,38,5c,26))->init(9,HX_("10\xe6""\x9c""\x88""",53,b9,0b,57))->init(10,HX_("11\xe6""\x9c""\x88""",f2,ef,b4,57))->init(11,HX_("12\xe6""\x9c""\x88""",91,26,5e,58))->init(12,HX_("",00,00,00,00)))
            				->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("yyyy/MM/dd",40,6b,74,9b))
            				->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            				->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            			->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            			->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            			->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(",",2c,00,00,00))
            			->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("\xe6""\x97""\xa5""\xe6""\x9c""\xac""",e2,d8,55,55))
            			->setFixed(9,HX_("code",2d,b1,c4,41),HX_("ja-JP",dc,95,b9,48))
            			->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("ja-JP",dc,95,b9,48))
            			->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("ja",b7,5c,00,00))
            			->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("jpn",e8,d0,50,00))
            			->setFixed(13,HX_("lcid",12,86,ae,47),(int)1041)
            			->setFixed(14,HX_("win3",97,70,f8,4e),HX_("JPN",c8,6c,38,00))
            			->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Japanese",11,2b,10,35)));
HXDLIN(  36)		 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp1 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)		 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)		 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)		if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)			_hx_tmp13 = null();
            		}
            		else {
HXLINE(  36)			HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)			_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            		}
HXDLIN(  36)		 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)		jp = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
            	}
{
            	HX_STACK_FRAME("thx.format.TestDateFormat","boot",0x44d43ddc,"thx.format.TestDateFormat.boot","thx/format/TestDateFormat.hx",15,0xcb87a01a)
HXLINE(  15)		d1 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2009-06-01 13:45:30-06:00",03,14,e9,a0));
            	}
{
            	HX_STACK_FRAME("thx.format.TestDateFormat","boot",0x44d43ddc,"thx.format.TestDateFormat.boot","thx/format/TestDateFormat.hx",16,0xcb87a01a)
HXLINE(  16)		d2 = ::thx::_DateTime::DateTime_Impl__obj::fromString(HX_("2009-06-15 13:45:30-06:00",80,8a,9d,40));
            	}
}

} // end namespace thx
} // end namespace format
