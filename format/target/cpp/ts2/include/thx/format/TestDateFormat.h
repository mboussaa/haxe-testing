// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_format_TestDateFormat
#define INCLUDED_thx_format_TestDateFormat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS2(thx,culture,Culture)
HX_DECLARE_CLASS2(thx,format,TestDateFormat)

namespace thx{
namespace format{


class HXCPP_CLASS_ATTRIBUTES TestDateFormat_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestDateFormat_obj OBJ_;
		TestDateFormat_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.format.TestDateFormat")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.format.TestDateFormat"); }
		static hx::ObjectPtr< TestDateFormat_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestDateFormat_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestDateFormat","\x17","\xeb","\xce","\xd9"); }

		static void __boot();
		static  ::thx::culture::Culture it;
		static  ::thx::culture::Culture ch;
		static  ::thx::culture::Culture us;
		static  ::thx::culture::Culture ru;
		static  ::thx::culture::Culture fr;
		static  ::thx::culture::Culture jp;
		static ::Array< ::Dynamic> d1;
		static ::Array< ::Dynamic> d2;
		Int x;
		void testFormatU();
		::Dynamic testFormatU_dyn();

		void testFormatd_();
		::Dynamic testFormatd__dyn();

		void testFormatD();
		::Dynamic testFormatD_dyn();

		void testFormatM();
		::Dynamic testFormatM_dyn();

		void testFormatR();
		::Dynamic testFormatR_dyn();

		void testFormats();
		::Dynamic testFormats_dyn();

		void testFormatt_();
		::Dynamic testFormatt__dyn();

		void testFormatT();
		::Dynamic testFormatT_dyn();

		void testFormatu_();
		::Dynamic testFormatu__dyn();

		void testFormatO();
		::Dynamic testFormatO_dyn();

		void testFormaty();
		::Dynamic testFormaty_dyn();

		void testd();
		::Dynamic testd_dyn();

		void testdd();
		::Dynamic testdd_dyn();

		void testddd();
		::Dynamic testddd_dyn();

		void testdddd();
		::Dynamic testdddd_dyn();

		void testh_();
		::Dynamic testh__dyn();

		void testhh_();
		::Dynamic testhh__dyn();

		void testH();
		::Dynamic testH_dyn();

		void testHH();
		::Dynamic testHH_dyn();

		void testm_();
		::Dynamic testm__dyn();

		void testmm_();
		::Dynamic testmm__dyn();

		void testM();
		::Dynamic testM_dyn();

		void testMM();
		::Dynamic testMM_dyn();

		void testMMM();
		::Dynamic testMMM_dyn();

		void testMMMM();
		::Dynamic testMMMM_dyn();

		void tests();
		::Dynamic tests_dyn();

		void testss();
		::Dynamic testss_dyn();

		void testtt();
		::Dynamic testtt_dyn();

		void testy();
		::Dynamic testy_dyn();

		void testyy();
		::Dynamic testyy_dyn();

		void testyyyy();
		::Dynamic testyyyy_dyn();

		void testTimeSeprator();
		::Dynamic testTimeSeprator_dyn();

		void testDateSeprator();
		::Dynamic testDateSeprator_dyn();

};

} // end namespace thx
} // end namespace format

#endif /* INCLUDED_thx_format_TestDateFormat */ 
