// Generated by Haxe 3.3.0
package thx._DateTimeUtc;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class DateTimeUtc_Impl_
{
	static
	{
		//line 18 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond = 1000;
		//line 19 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute = ( thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond * 60 );
		//line 20 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour = ( thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute * 60 );
		//line 21 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerDay = ( thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour * 24 );
		//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.tenI64 = ((long) (10) );
		//line 24 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.hundredI64 = ((long) (100) );
		//line 25 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64 = ((long) (1000) );
		//line 26 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.tenThousandI64 = ((long) (10000) );
		//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.millionI64 = ((long) (1000000) );
		//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMicrosecondI64 = thx._DateTimeUtc.DateTimeUtc_Impl_.tenI64;
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecond = 10000;
		//line 30 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64 = ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecond) );
		//line 31 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64 = ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) * ((long) (1000) ) )) );
		//line 32 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64 = ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) * ((long) (60) ) )) );
		//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64 = ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) * ((long) (60) ) )) );
		//line 34 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64 = ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) * ((long) (24) ) )) );
		//line 36 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.daysPerYear = 365;
		//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer4Years = ( ( thx._DateTimeUtc.DateTimeUtc_Impl_.daysPerYear * 4 ) + 1 );
		//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer100Years = ( ( thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer4Years * 25 ) - 1 );
		//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer400Years = ( ( thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer100Years * 4 ) + 1 );
		//line 41 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.daysTo1970 = ( ( ( ( thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer400Years * 4 ) + ( thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer100Years * 3 ) ) + ( thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer4Years * 17 ) ) + thx._DateTimeUtc.DateTimeUtc_Impl_.daysPerYear );
		//line 42 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks = ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.daysTo1970) ) )) );
		//line 44 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR = 0;
		//line 45 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY_OF_YEAR = 1;
		//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH = 2;
		//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY = 3;
		//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365});
		//line 50 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366});
	}
	
	public static int millisPerSecond;
	
	public static int millisPerMinute;
	
	public static int millisPerHour;
	
	public static int millisPerDay;
	
	public static long tenI64;
	
	public static long hundredI64;
	
	public static long thousandI64;
	
	public static long tenThousandI64;
	
	public static long millionI64;
	
	public static long ticksPerMicrosecondI64;
	
	public static int ticksPerMillisecond;
	
	public static long ticksPerMillisecondI64;
	
	public static long ticksPerSecondI64;
	
	public static long ticksPerMinuteI64;
	
	public static long ticksPerHourI64;
	
	public static long ticksPerDayI64;
	
	public static int daysPerYear;
	
	public static int daysPer4Years;
	
	public static int daysPer100Years;
	
	public static int daysPer400Years;
	
	public static int daysTo1970;
	
	public static long unixEpochTicks;
	
	public static int DATE_PART_YEAR;
	
	public static int DATE_PART_DAY_OF_YEAR;
	
	public static int DATE_PART_MONTH;
	
	public static int DATE_PART_DAY;
	
	public static haxe.root.Array<java.lang.Object> daysToMonth365;
	
	public static haxe.root.Array<java.lang.Object> daysToMonth366;
	
	public static long now()
	{
		//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.fromDate(haxe.root.Date.now());
	}
	
	
	public static long fromInt64(long ticks)
	{
		//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (ticks) );
	}
	
	
	public static long fromDate(haxe.root.Date date)
	{
		//line 77 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.fromTime(((double) (date.date.getTime()) ));
	}
	
	
	public static long fromTime(double timestamp)
	{
		//line 84 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (( ((long) (( ((long) (thx.Int64s.fromFloat(timestamp)) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) + ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks) ) )) );
	}
	
	
	public static long fromString(java.lang.String s)
	{
		//line 91 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long this1 = haxe.lang.Runtime.toLong(((haxe.root.Array<java.lang.Object>) (thx._DateTime.DateTime_Impl_.fromString(s)) ).__get(0));
		//line 91 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (this1) );
	}
	
	
	public static int compare(long a, long b)
	{
		//line 94 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.compareTo(a, b);
	}
	
	
	public static long create(int year, int month, int day, java.lang.Object hour, java.lang.Object minute, java.lang.Object second, java.lang.Object millisecond)
	{
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		java.lang.Object __temp_millisecond66 = ( (haxe.lang.Runtime.eq(millisecond, null)) ? (((java.lang.Object) (0) )) : (millisecond) );
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		java.lang.Object __temp_second65 = ( (haxe.lang.Runtime.eq(second, null)) ? (((java.lang.Object) (0) )) : (second) );
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		java.lang.Object __temp_minute64 = ( (haxe.lang.Runtime.eq(minute, null)) ? (((java.lang.Object) (0) )) : (minute) );
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		java.lang.Object __temp_hour63 = ( (haxe.lang.Runtime.eq(hour, null)) ? (((java.lang.Object) (0) )) : (hour) );
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		__temp_second65 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_second65, ((int) (java.lang.Math.floor(( ((double) (haxe.lang.Runtime.toDouble(__temp_millisecond66)) ) / ((double) (1000) ) ))) ))) );
		//line 104 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		__temp_millisecond66 = ( ((int) (haxe.lang.Runtime.toInt(__temp_millisecond66)) ) % ((int) (1000) ) );
		//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( haxe.lang.Runtime.compare(__temp_millisecond66, 0) < 0 )) 
		{
			//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			__temp_millisecond66 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_millisecond66, 1000)) );
		}
		
		//line 108 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long ticks = ((long) (( ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.dateToTicks(year, month, day)) ) + ((long) (thx._Time.Time_Impl_.timeToTicks(((int) (haxe.lang.Runtime.toInt(__temp_hour63)) ), ((int) (haxe.lang.Runtime.toInt(__temp_minute64)) ), ((int) (haxe.lang.Runtime.toInt(__temp_second65)) ))) ) )) ) + ((long) (( haxe.lang.Runtime.toLong(__temp_millisecond66) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) )) );
		//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (ticks) );
	}
	
	
	public static boolean isLeapYear(int year)
	{
		//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ( year % 4 ) == 0 )) 
		{
			//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			if (( ( year % 100 ) == 0 )) 
			{
				//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ( ( year % 400 ) == 0 );
			}
			else
			{
				//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return true;
			}
			
		}
		else
		{
			//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return false;
		}
		
	}
	
	
	public static long dateToTicks(int year, int month, int day)
	{
		//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int[] month1 = new int[]{month};
		//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int[] year1 = new int[]{year};
		//line 119 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		haxe.lang.Function fixMonthYear = new thx._DateTimeUtc.DateTimeUtc_Impl__dateToTicks_119__Fun(year1, month1);
		//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		while (( day < 0 ))
		{
			//line 136 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			month1[0]--;
			//line 137 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			fixMonthYear.__hx_invoke0_o();
			//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			day += thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
		}
		
		//line 141 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		fixMonthYear.__hx_invoke0_o();
		//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int days = 0;
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		while (true)
		{
			//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			days = thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
			//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			if ( ! ((( day > days ))) ) 
			{
				//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				break;
			}
			
			//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			month1[0]++;
			//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			fixMonthYear.__hx_invoke0_o();
			//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			day -= days;
		}
		
		//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( day == 0 )) 
		{
			//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			month1[0] -= 1;
			//line 151 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			fixMonthYear.__hx_invoke0_o();
			//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			day = thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
		}
		
		//line 155 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		fixMonthYear.__hx_invoke0_o();
		//line 157 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.rawDateToTicks(year1[0], month1[0], day);
	}
	
	
	public static long rawDateToTicks(int year, int month, int day)
	{
		//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		haxe.root.Array<java.lang.Object> days = ( (thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(year)) ? (thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366) : (thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365) );
		//line 162 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ( day >= 1 ) && ( day <= ( ((int) (haxe.lang.Runtime.toInt(days.__get(month))) ) - ((int) (haxe.lang.Runtime.toInt(days.__get(( month - 1 )))) ) ) ) )) 
		{
			//line 163 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			int y = ( year - 1 );
			//line 164 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			int n = ( ( ( ( ( ( ( y * 365 ) + ((int) (( y / 4 )) ) ) - ((int) (( y / 100 )) ) ) + ((int) (( y / 400 )) ) ) + ((int) (haxe.lang.Runtime.toInt(days.__get(( month - 1 )))) ) ) + day ) - 1 );
			//line 165 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ((long) (( ((long) (n) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
		}
		
		//line 167 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		throw haxe.lang.HaxeException.wrap(new thx.Error(( ( ( ( ( "bad year/month/day " + year ) + "/" ) + month ) + "/" ) + day ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._DateTimeUtc.DateTimeUtc_Impl_", "DateTimeUtc.hx", "rawDateToTicks"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (167) )) )})));
	}
	
	
	public static int daysInMonth(int year, int month)
	{
		//line 171 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		haxe.root.Array<java.lang.Object> days = ( (thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(year)) ? (thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366) : (thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365) );
		//line 172 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( ((int) (haxe.lang.Runtime.toInt(days.__get(month))) ) - ((int) (haxe.lang.Runtime.toInt(days.__get(( month - 1 )))) ) );
	}
	
	
	public static haxe.root.Array<java.lang.Object> daysRange(long start, long end)
	{
		//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long a = ((long) (end) );
		//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long b = ((long) (start) );
		//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( (( (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) < 0 )) 
		{
			//line 181 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		}
		
		//line 182 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		haxe.root.Array<java.lang.Object> days = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 183 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		while ( ! (thx._DateTimeUtc.DateTimeUtc_Impl_.sameDay(start, end)) )
		{
			//line 184 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			days.push(start);
			//line 185 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			start = thx._DateTimeUtc.DateTimeUtc_Impl_.jump(((long) (start) ), thx.TimePeriod.Day, 1);
		}
		
		//line 187 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		days.push(end);
		//line 188 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return days;
	}
	
	
	public static int getDatePart(long this1, int part)
	{
		//line 192 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long x = ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
		//line 192 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 192 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 192 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int n = ((int) (((long) (x) )) );
		//line 193 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int y400 = ((int) (( n / thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer400Years )) );
		//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		n -= ( y400 * thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer400Years );
		//line 195 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int y100 = ((int) (( n / thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer100Years )) );
		//line 196 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( y100 == 4 )) 
		{
			//line 197 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			y100 = 3;
		}
		
		//line 198 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		n -= ( y100 * thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer100Years );
		//line 199 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int y4 = ((int) (( n / thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer4Years )) );
		//line 200 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		n -= ( y4 * thx._DateTimeUtc.DateTimeUtc_Impl_.daysPer4Years );
		//line 201 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int y1 = ((int) (( n / thx._DateTimeUtc.DateTimeUtc_Impl_.daysPerYear )) );
		//line 202 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( y1 == 4 )) 
		{
			//line 203 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			y1 = 3;
		}
		
		//line 204 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( part == thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR )) 
		{
			//line 205 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ( ( ( ( ( y400 * 400 ) + ( y100 * 100 ) ) + ( y4 * 4 ) ) + y1 ) + 1 );
		}
		
		//line 207 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		n -= ( y1 * thx._DateTimeUtc.DateTimeUtc_Impl_.daysPerYear );
		//line 208 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( part == thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY_OF_YEAR )) 
		{
			//line 209 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ( n + 1 );
		}
		
		//line 210 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		boolean leapYear = ( ( y1 == 3 ) && (( ( y4 != 24 ) || ( y100 == 3 ) )) );
		//line 210 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		haxe.root.Array<java.lang.Object> days = ( (leapYear) ? (thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366) : (thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365) );
		//line 210 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int m = ( n >> 6 );
		//line 213 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		while (( n >= ((int) (haxe.lang.Runtime.toInt(days.__get(m))) ) ))
		{
			//line 214 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			 ++ m;
		}
		
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( part == thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH )) 
		{
			//line 216 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return m;
		}
		
		//line 217 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( ( n - ((int) (haxe.lang.Runtime.toInt(days.__get(( m - 1 )))) ) ) + 1 );
	}
	
	
	public static long _new(long ticks)
	{
		//line 220 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (ticks) );
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public static long min(long this1, long other)
	{
		//line 243 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( thx._DateTimeUtc.DateTimeUtc_Impl_.compareTo(this1, other) <= 0 )) 
		{
			//line 243 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ((long) (this1) );
		}
		else
		{
			//line 243 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return other;
		}
		
	}
	
	
	public static long max(long this1, long other)
	{
		//line 246 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( thx._DateTimeUtc.DateTimeUtc_Impl_.compareTo(this1, other) >= 0 )) 
		{
			//line 246 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ((long) (this1) );
		}
		else
		{
			//line 246 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return other;
		}
		
	}
	
	
	public static long jump(long this1, thx.TimePeriod period, int amount)
	{
		//line 257 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int sec = thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1);
		//line 257 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int min = thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1);
		//line 257 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int hr = thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1);
		//line 257 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int day = thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
		//line 257 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int mon = thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
		//line 257 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int yr = thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
		//line 264 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		switch (period)
		{
			case Second:
			{
				//line 265 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				sec += amount;
				//line 265 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				break;
			}
			
			
			case Minute:
			{
				//line 266 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				min += amount;
				//line 266 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				break;
			}
			
			
			case Hour:
			{
				//line 267 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				hr += amount;
				//line 267 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				break;
			}
			
			
			case Day:
			{
				//line 268 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				day += amount;
				//line 268 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				break;
			}
			
			
			case Week:
			{
				//line 269 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				day += ( amount * 7 );
				//line 269 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				break;
			}
			
			
			case Month:
			{
				//line 270 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				mon += amount;
				//line 270 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				break;
			}
			
			
			case Year:
			{
				//line 271 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				yr += amount;
				//line 271 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				break;
			}
			
			
		}
		
		//line 274 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.create(yr, mon, day, hr, min, sec, thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1));
	}
	
	
	public static int daysInThisMonth(long this1)
	{
		//line 283 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH));
	}
	
	
	public static long prevYear(long this1)
	{
		//line 289 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Year, -1);
	}
	
	
	public static long nextYear(long this1)
	{
		//line 295 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Year, 1);
	}
	
	
	public static long prevMonth(long this1)
	{
		//line 301 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Month, -1);
	}
	
	
	public static long nextMonth(long this1)
	{
		//line 307 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Month, 1);
	}
	
	
	public static long prevWeek(long this1)
	{
		//line 313 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Week, -1);
	}
	
	
	public static long nextWeek(long this1)
	{
		//line 319 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Week, 1);
	}
	
	
	public static long prevDay(long this1)
	{
		//line 325 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Day, -1);
	}
	
	
	public static long nextDay(long this1)
	{
		//line 331 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Day, 1);
	}
	
	
	public static long prevHour(long this1)
	{
		//line 337 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Hour, -1);
	}
	
	
	public static long nextHour(long this1)
	{
		//line 343 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Hour, 1);
	}
	
	
	public static long prevMinute(long this1)
	{
		//line 349 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Minute, -1);
	}
	
	
	public static long nextMinute(long this1)
	{
		//line 355 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Minute, 1);
	}
	
	
	public static long prevSecond(long this1)
	{
		//line 361 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Second, -1);
	}
	
	
	public static long nextSecond(long this1)
	{
		//line 367 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Second, 1);
	}
	
	
	public static long snapToWeekDay(long this1, int weekday, java.lang.Object firstDayOfWk)
	{
		//line 377 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		java.lang.Object __temp_firstDayOfWk67 = ( (haxe.lang.Runtime.eq(firstDayOfWk, null)) ? (((java.lang.Object) (0) )) : (firstDayOfWk) );
		//line 378 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int d = thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
		//line 378 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int s = weekday;
		//line 382 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( s < ((int) (haxe.lang.Runtime.toInt(__temp_firstDayOfWk67)) ) )) 
		{
			//line 382 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			s += 7;
		}
		
		//line 383 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( d < ((int) (haxe.lang.Runtime.toInt(__temp_firstDayOfWk67)) ) )) 
		{
			//line 383 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			d += 7;
		}
		
		//line 384 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Day, ( s - d ));
	}
	
	
	public static long snapNextWeekDay(long this1, int weekday)
	{
		//line 395 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int d = thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
		//line 395 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int s = weekday;
		//line 399 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( s < d )) 
		{
			//line 399 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			s += 7;
		}
		
		//line 400 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Day, ( s - d ));
	}
	
	
	public static long snapPrevWeekDay(long this1, int weekday)
	{
		//line 411 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int d = thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
		//line 411 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int s = weekday;
		//line 415 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( s > d )) 
		{
			//line 415 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			s -= 7;
		}
		
		//line 416 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.jump(this1, thx.TimePeriod.Day, ( s - d ));
	}
	
	
	public static long snapNext(long this1, thx.TimePeriod period)
	{
		//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		switch (period)
		{
			case Second:
			{
				//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ((long) (( ((long) (thx.Int64s.divCeil(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64)) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
			}
			
			
			case Minute:
			{
				//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ((long) (( ((long) (thx.Int64s.divCeil(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64)) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) );
			}
			
			
			case Hour:
			{
				//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ((long) (( ((long) (thx.Int64s.divCeil(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64)) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) );
			}
			
			
			case Day:
			{
				//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + 1 ), 0, 0, 0, null);
			}
			
			
			case Week:
			{
				//line 435 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				int wd = thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
				//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( ( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + 7 ) - wd ), 0, 0, 0, null);
			}
			
			
			case Month:
			{
				//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), ( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) + 1 ), 1, 0, 0, 0, null);
			}
			
			
			case Year:
			{
				//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) + 1 ), 1, 1, 0, 0, 0, null);
			}
			
			
		}
		
		//line 424 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return 0L;
	}
	
	
	public static long snapPrev(long this1, thx.TimePeriod period)
	{
		//line 449 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		switch (period)
		{
			case Second:
			{
				//line 449 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ((long) (( ((long) (thx.Int64s.divFloor(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64)) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
			}
			
			
			case Minute:
			{
				//line 449 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ((long) (( ((long) (thx.Int64s.divFloor(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64)) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) );
			}
			
			
			case Hour:
			{
				//line 449 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ((long) (( ((long) (thx.Int64s.divFloor(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64)) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) );
			}
			
			
			case Day:
			{
				//line 449 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), 0, 0, 0, null);
			}
			
			
			case Week:
			{
				//line 459 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				int wd = thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
				//line 449 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) - wd ), 0, 0, 0, null);
			}
			
			
			case Month:
			{
				//line 449 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), 1, 0, 0, 0, null);
			}
			
			
			case Year:
			{
				//line 449 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), 1, 1, 0, 0, 0, null);
			}
			
			
		}
		
		//line 448 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return 0L;
	}
	
	
	public static long snapTo(long this1, thx.TimePeriod period)
	{
		//line 473 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		switch (period)
		{
			case Second:
			{
				//line 473 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ((long) (( ((long) (thx.Int64s.divRound(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64)) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
			}
			
			
			case Minute:
			{
				//line 473 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ((long) (( ((long) (thx.Int64s.divRound(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64)) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) );
			}
			
			
			case Hour:
			{
				//line 473 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ((long) (( ((long) (thx.Int64s.divRound(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64)) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) );
			}
			
			
			case Day:
			{
				//line 481 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				int mod = ( (( thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1) >= 12 )) ? (1) : (0) );
				//line 473 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + mod ), 0, 0, 0, null);
			}
			
			
			case Week:
			{
				//line 484 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				int wd = thx._DateTimeUtc.DateTimeUtc_Impl_.get_dayOfWeek(this1);
				//line 484 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				int mod1 = ( (( wd < 3 )) ? ( - (wd) ) : (( (( wd > 3 )) ? (( 7 - wd )) : (( (( thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1) < 12 )) ? ( - (wd) ) : (( 7 - wd )) )) )) );
				//line 473 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), ( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) + mod1 ), 0, 0, 0, null);
			}
			
			
			case Month:
			{
				//line 488 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				int mod2 = ( (( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) > ((int) (java.lang.Math.round(( ((double) (thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH))) ) / 2 ))) ) )) ? (1) : (0) );
				//line 473 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), ( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) + mod2 ), 1, 0, 0, 0, null);
			}
			
			
			case Year:
			{
				//line 491 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				int mod3 = 0;
				//line 491 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				long b = ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), 6, 2, 0, 0, 0, null)) );
				//line 491 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				if (( (( (((boolean) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) > 0 )) 
				{
					//line 491 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
					mod3 = 1;
				}
				else
				{
					//line 491 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
					mod3 = 0;
				}
				
				//line 473 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return thx._DateTimeUtc.DateTimeUtc_Impl_.create(( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) + mod3 ), 1, 1, 0, 0, 0, null);
			}
			
			
		}
		
		//line 472 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return 0L;
	}
	
	
	public static boolean sameYear(long this1, long other)
	{
		//line 499 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) == thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (other) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) );
	}
	
	
	public static boolean sameMonth(long this1, long other)
	{
		//line 505 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (thx._DateTimeUtc.DateTimeUtc_Impl_.sameYear(this1, other)) 
		{
			//line 505 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) == thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (other) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH) );
		}
		else
		{
			//line 505 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return false;
		}
		
	}
	
	
	public static boolean sameDay(long this1, long other)
	{
		//line 511 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (thx._DateTimeUtc.DateTimeUtc_Impl_.sameMonth(this1, other)) 
		{
			//line 511 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ( thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) == thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (other) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY) );
		}
		else
		{
			//line 511 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return false;
		}
		
	}
	
	
	public static boolean sameHour(long this1, long other)
	{
		//line 517 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (thx._DateTimeUtc.DateTimeUtc_Impl_.sameDay(this1, other)) 
		{
			//line 517 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ( thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1) == thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(other) );
		}
		else
		{
			//line 517 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return false;
		}
		
	}
	
	
	public static boolean sameMinute(long this1, long other)
	{
		//line 523 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (thx._DateTimeUtc.DateTimeUtc_Impl_.sameHour(this1, other)) 
		{
			//line 523 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ( thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1) == thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(other) );
		}
		else
		{
			//line 523 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return false;
		}
		
	}
	
	
	public static boolean sameSecond(long this1, long other)
	{
		//line 529 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (thx._DateTimeUtc.DateTimeUtc_Impl_.sameMinute(this1, other)) 
		{
			//line 529 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ( thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1) == thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(other) );
		}
		else
		{
			//line 529 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return false;
		}
		
	}
	
	
	public static long withYear(long this1, int year)
	{
		//line 532 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.create(year, thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1));
	}
	
	
	public static long withMonth(long this1, int month)
	{
		//line 535 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), month, thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1));
	}
	
	
	public static long withDay(long this1, int day)
	{
		//line 538 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), day, thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1));
	}
	
	
	public static long withHour(long this1, int hour)
	{
		//line 541 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), hour, thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1));
	}
	
	
	public static long withMinute(long this1, int minute)
	{
		//line 544 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), minute, thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1));
	}
	
	
	public static long withSecond(long this1, int second)
	{
		//line 547 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), second, thx._DateTimeUtc.DateTimeUtc_Impl_.get_millisecond(this1));
	}
	
	
	public static long withMillisecond(long this1, int millisecond)
	{
		//line 550 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.create(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(this1), thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(this1), millisecond);
	}
	
	
	public static long add(long this1, long time)
	{
		//line 553 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long this2 = ((long) (( ((long) (this1) ) + ((long) (time) ) )) );
		//line 553 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (this2) );
	}
	
	
	public static long addTicks(long this1, long tickstoadd)
	{
		//line 556 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long this2 = ((long) (( ((long) (this1) ) + ((long) (tickstoadd) ) )) );
		//line 556 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (this2) );
	}
	
	
	public static long subtract(long this1, long time)
	{
		//line 559 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long this2 = ((long) (( ((long) (this1) ) - ((long) (time) ) )) );
		//line 559 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (this2) );
	}
	
	
	public static long subtractDate(long this1, long date)
	{
		//line 562 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long this2 = ((long) (( ((long) (this1) ) - ((long) (date) ) )) );
		//line 562 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (this2) );
	}
	
	
	public static long addScaled(long this1, double value, int scale)
	{
		//line 565 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long millis = ((long) (((int) (( ( value * scale ) + (( (( value >= 0 )) ? (0.5) : (-0.5) )) )) )) );
		//line 566 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (( ((long) (this1) ) + ((long) (( ((long) (millis) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) )) );
	}
	
	
	public static long addDays(long this1, double days)
	{
		//line 570 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(this1, days, thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerDay);
	}
	
	
	public static long addHours(long this1, double hours)
	{
		//line 573 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(this1, hours, thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerHour);
	}
	
	
	public static long addMilliseconds(long this1, int milliseconds)
	{
		//line 576 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(this1, ((double) (milliseconds) ), 1);
	}
	
	
	public static long addMinutes(long this1, double minutes)
	{
		//line 579 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(this1, minutes, thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerMinute);
	}
	
	
	public static long addMonths(long this1, int months)
	{
		//line 582 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int y = thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
		//line 582 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int m = thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
		//line 582 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int d = thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
		//line 582 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int i = ( ( m - 1 ) + months );
		//line 586 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( i >= 0 )) 
		{
			//line 587 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			m = ((int) (( ( i % 12 ) + 1 )) );
			//line 588 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			y = ((int) (( y + ( ((double) (i) ) / 12 ) )) );
		}
		else
		{
			//line 590 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			m = ((int) (( 12 + ( (( i + 1 )) % 12 ) )) );
			//line 591 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			y = ((int) (( y + ( ((double) ((( i - 11 ))) ) / 12 ) )) );
		}
		
		//line 593 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int days = thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(y, m);
		//line 594 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( d > days )) 
		{
			//line 595 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			d = days;
		}
		
		//line 596 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.dateToTicks(y, m, d)) ) + ((long) (( ((long) (this1) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) ) )) );
	}
	
	
	public static long addSeconds(long this1, double seconds)
	{
		//line 600 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.addScaled(this1, seconds, thx._DateTimeUtc.DateTimeUtc_Impl_.millisPerSecond);
	}
	
	
	public static long addYears(long this1, int years)
	{
		//line 603 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.addMonths(this1, ( years * 12 ));
	}
	
	
	public static int compareTo(long this1, long other)
	{
		//line 611 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx.Int64s.compare(((long) (this1) ), ((long) (other) ));
	}
	
	
	public static boolean equalsTo(long this1, long that)
	{
		//line 615 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( ((long) (this1) ) == ((long) (that) ) );
	}
	
	
	public static boolean equals(long self, long that)
	{
		//line 619 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( ((long) (self) ) == ((long) (that) ) );
	}
	
	
	public static boolean notEqualsTo(long this1, long that)
	{
		//line 622 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( ((long) (this1) ) != ((long) (that) ) );
	}
	
	
	public static boolean notEquals(long self, long that)
	{
		//line 626 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( ((long) (self) ) != ((long) (that) ) );
	}
	
	
	public static boolean nearEqualsTo(long this1, long other, long span)
	{
		//line 629 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long ticks = thx.Int64s.abs(((long) (( ((long) (other) ) - ((long) (this1) ) )) ));
		//line 630 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((boolean) (( ((long) (ticks) ) <= ((long) (thx._Time.Time_Impl_.abs(span)) ) )) );
	}
	
	
	public static boolean greaterThan(long this1, long that)
	{
		//line 634 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long b = ((long) (that) );
		//line 634 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( (( (((boolean) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) > 0 );
	}
	
	
	public static boolean greater(long self, long that)
	{
		//line 638 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long a = ((long) (self) );
		//line 638 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long b = ((long) (that) );
		//line 638 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( (( (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) > 0 );
	}
	
	
	public static boolean greaterEqualsTo(long this1, long that)
	{
		//line 641 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long b = ((long) (that) );
		//line 641 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( (( (((boolean) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) >= 0 );
	}
	
	
	public static boolean greaterEquals(long self, long that)
	{
		//line 645 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long a = ((long) (self) );
		//line 645 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long b = ((long) (that) );
		//line 645 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( (( (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) >= 0 );
	}
	
	
	public static boolean lessThan(long this1, long that)
	{
		//line 648 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long b = ((long) (that) );
		//line 648 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( (( (((boolean) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) < 0 );
	}
	
	
	public static boolean less(long self, long that)
	{
		//line 652 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long a = ((long) (self) );
		//line 652 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long b = ((long) (that) );
		//line 652 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( (( (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) < 0 );
	}
	
	
	public static boolean lessEqualsTo(long this1, long that)
	{
		//line 655 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long b = ((long) (that) );
		//line 655 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( (( (((boolean) (( ((long) (this1) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (this1) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) <= 0 );
	}
	
	
	public static boolean lessEquals(long self, long that)
	{
		//line 659 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long a = ((long) (self) );
		//line 659 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long b = ((long) (that) );
		//line 659 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( (( (((boolean) (( ((long) (a) ) < ((long) (b) ) )) )) ? (-1) : (( (((boolean) (( ((long) (a) ) > ((long) (b) ) )) )) ? (1) : (0) )) )) <= 0 );
	}
	
	
	public static double toTime(long this1)
	{
		//line 662 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx.Int64s.toFloat(((long) (( (((long) (( ((long) (this1) ) - ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks) ) )) )) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ));
	}
	
	
	public static haxe.root.Date toDate(long this1)
	{
		//line 668 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return haxe.root.Date.fromTime(thx.Int64s.toFloat(((long) (( (((long) (( ((long) (this1) ) - ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.unixEpochTicks) ) )) )) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) )));
	}
	
	
	public static haxe.root.Array<java.lang.Object> toDateTime(long this1, java.lang.Object offset)
	{
		//line 672 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		haxe.root.Array<java.lang.Object> this2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (this1) ), ((long) (( (( null == offset )) ? (thx._Time.Time_Impl_.zero) : (haxe.lang.Runtime.toLong(offset)) )) )});
		//line 672 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((haxe.root.Array<java.lang.Object>) (this2) );
	}
	
	
	public static haxe.root.Array<java.lang.Object> toLocalDateTime(long this1)
	{
		//line 675 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		haxe.root.Array<java.lang.Object> this2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((long) (this1) ), ((long) (thx._DateTime.DateTime_Impl_.localOffset()) )});
		//line 675 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((haxe.root.Array<java.lang.Object>) (this2) );
	}
	
	
	public static java.lang.String toString(long this1)
	{
		//line 683 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long abs = thx._DateTimeUtc.DateTimeUtc_Impl_.fromInt64(thx.Int64s.abs(((long) (this1) )));
		//line 684 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		java.lang.String decimals = ( (( thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(abs) != 0 )) ? (( "." + thx.Strings.trimCharsRight(thx.Ints.lpad(thx._DateTimeUtc.DateTimeUtc_Impl_.get_tickInSecond(abs), "0", 7), ")") )) : ("") );
		//line 685 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		boolean isneg = ((boolean) (( ((long) (this1) ) < ((long) (thx.Int64s.zero) ) )) );
		//line 686 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( (( (isneg) ? ("-") : ("") )) + (( ( ( ( ( ( ( ( ( ( ( ( ( "" + thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (abs) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR) ) + "-" ) + thx.Ints.lpad(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (abs) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH), "0", 2) ) + "-" ) + thx.Ints.lpad(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (abs) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY), "0", 2) ) + "T" ) + thx.Ints.lpad(thx._DateTimeUtc.DateTimeUtc_Impl_.get_hour(abs), "0", 2) ) + ":" ) + thx.Ints.lpad(thx._DateTimeUtc.DateTimeUtc_Impl_.get_minute(abs), "0", 2) ) + ":" ) + thx.Ints.lpad(thx._DateTimeUtc.DateTimeUtc_Impl_.get_second(abs), "0", 2) ) + decimals ) + "Z" )) );
	}
	
	
	public static long get_ticks(long this1)
	{
		//line 690 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return this1;
	}
	
	
	public static int get_year(long this1)
	{
		//line 693 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR);
	}
	
	
	public static int get_month(long this1)
	{
		//line 696 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH);
	}
	
	
	public static int get_day(long this1)
	{
		//line 699 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY);
	}
	
	
	public static int get_hour(long this1)
	{
		//line 702 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
		//line 702 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 702 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 702 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_minute(long this1)
	{
		//line 705 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 705 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 705 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 705 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_dayOfWeek(long this1)
	{
		//line 708 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long x = ((long) (( (((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) ) + ((long) (1) ) )) )) % ((long) (7) ) )) );
		//line 708 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 708 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 708 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_dayOfYear(long this1)
	{
		//line 711 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(this1, thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_DAY_OF_YEAR);
	}
	
	
	public static int get_millisecond(long this1)
	{
		//line 714 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.thousandI64) ) )) );
		//line 714 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 714 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 714 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_microsecond(long this1)
	{
		//line 717 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMicrosecondI64) ) )) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.millionI64) ) )) );
		//line 717 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 717 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 717 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_tickInSecond(long this1)
	{
		//line 720 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long x = ((long) (( ((long) (this1) ) % ((long) (10000000) ) )) );
		//line 720 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 720 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 720 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static int get_second(long this1)
	{
		//line 723 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long x = ((long) (( ((long) (( ((long) (this1) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
		//line 723 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 723 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 723 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((int) (((long) (x) )) );
	}
	
	
	public static long get_timeOfDay(long this1)
	{
		//line 726 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (( ((long) (this1) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
	}
	
	
	public static boolean get_isInLeapYear(long this1)
	{
		//line 729 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR));
	}
	
	
	public static int get_monthDays(long this1)
	{
		//line 732 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_YEAR), thx._DateTimeUtc.DateTimeUtc_Impl_.getDatePart(((long) (this1) ), thx._DateTimeUtc.DateTimeUtc_Impl_.DATE_PART_MONTH));
	}
	
	
	public static long self(long this1)
	{
		//line 735 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (this1) );
	}
	
	
}


