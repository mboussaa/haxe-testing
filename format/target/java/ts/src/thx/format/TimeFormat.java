// Generated by Haxe 3.3.0
package thx.format;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TimeFormat extends haxe.lang.HxObject
{
	public TimeFormat(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TimeFormat()
	{
		//line 14 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		thx.format.TimeFormat.__hx_ctor_thx_format_TimeFormat(this);
	}
	
	
	public static void __hx_ctor_thx_format_TimeFormat(thx.format.TimeFormat __temp_me174)
	{
	}
	
	
	public static java.lang.String customFormat(long t, java.lang.String pattern, thx.culture.Culture culture)
	{
		//line 19 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		thx.culture.Culture _0 = culture;
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		thx.culture.Culture t1 = ( (( null == _0 )) ? (null) : (_0) );
		//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
		if (( t1 != null )) 
		{
			//line 139 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nulls.hx"
			culture = t1;
		}
		else
		{
			//line 19 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			culture = thx.format.Format.get_defaultCulture();
		}
		
		//line 20 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		haxe.root.EReg ereg = new haxe.root.EReg("(d|H){1,8}|(f|F){1,7}|(h|m|s){1,2}|[:.]|\'[^\']*\'|\"[^\"]*\"", "");
		//line 20 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		boolean escape = false;
		//line 20 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		haxe.root.Array<java.lang.String> buf = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
		//line 23 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		while (( pattern.length() > 0 ))
		{
			//line 24 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			if (escape) 
			{
				//line 25 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
				escape = false;
				//line 26 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
				buf.push(haxe.lang.StringExt.substring(pattern, 0, 1));
				//line 27 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
				pattern = haxe.lang.StringExt.substring(pattern, 1, null);
			}
			else
			{
				//line 28 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
				if (ereg.match(pattern)) 
				{
					//line 29 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					java.lang.String left = ereg.matchedLeft();
					//line 30 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (haxe.lang.Runtime.valEq(haxe.lang.StringExt.substring(left, -1, null), "\\")) 
					{
						//line 31 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						escape = true;
						//line 32 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						pattern = haxe.lang.StringExt.substring(pattern, left.length(), null);
						//line 33 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						buf.push(haxe.lang.StringExt.substring(left, 0, ( left.length() - 1 )));
						//line 34 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						continue;
					}
					
					//line 36 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					buf.push(left);
					//line 37 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					java.lang.String term = ereg.matched(0);
					//line 37 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					java.lang.String right = ereg.matchedRight();
					//line 39 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					pattern = right;
					//line 40 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (( haxe.lang.Runtime.valEq(term, ".") && haxe.lang.Runtime.valEq(haxe.lang.StringExt.substring(right, 0, 1).toLowerCase(), "f") )) 
					{
						//line 41 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 41 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
						{
							//line 41 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 41 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((long) (((int) (((long) (x) )) )) ) == ((long) (thx.Int64s.zero) ) )) 
						{
							//line 42 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							ereg.match(right);
							//line 43 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							pattern = ereg.matchedRight();
							//line 44 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							continue;
						}
						
					}
					
					//line 47 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					buf.push(thx.format.TimeFormat.formatTerm(t, term, culture));
				}
				else
				{
					//line 49 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					buf.push(pattern);
					//line 50 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					pattern = "";
				}
				
			}
			
		}
		
		//line 53 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (escape) 
		{
			//line 54 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			buf.push("\\");
		}
		
		//line 55 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return buf.join("");
	}
	
	
	public static java.lang.String format(long t, java.lang.String pattern, thx.culture.Culture culture)
	{
		//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		{
			//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			java.lang.String __temp_svar1 = (pattern);
			//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			int __temp_hash3 = __temp_svar1.hashCode();
			//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			boolean __temp_executeDef2 = true;
			//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			switch (__temp_hash3)
			{
				case 84:
				case 71:
				{
					//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (( (( ( __temp_hash3 == 84 ) && __temp_svar1.equals("T") )) || __temp_svar1.equals("G") )) 
					{
						//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.TimeFormat.timeLong(t, culture);
					}
					
					//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 116:
				case 103:
				{
					//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (( (( ( __temp_hash3 == 116 ) && __temp_svar1.equals("t") )) || __temp_svar1.equals("g") )) 
					{
						//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.TimeFormat.timeShort(t, culture);
					}
					
					//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 99:
				{
					//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("c")) 
					{
						//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.TimeFormat.invariantTimeLong(t);
					}
					
					//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
			}
			
			//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			if (__temp_executeDef2) 
			{
				//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
				return thx.format.TimeFormat.customFormat(t, pattern, culture);
			}
			else
			{
				//line 71 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public static java.lang.String formatTerm(long t, java.lang.String pattern, thx.culture.Culture culture)
	{
		//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		{
			//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			java.lang.String __temp_svar1 = (pattern);
			//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			boolean __temp_executeDef2 = true;
			//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			switch (__temp_svar1.hashCode())
			{
				case 46:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals(".")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return culture.number.separatorDecimalNumber;
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 3680:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("ss")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 133 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x27 = ((long) (( ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
						//line 133 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x27) ) < -2147483648 )) ) || ((boolean) (( ((long) (x27) ) > 2147483647 )) ) )) 
						{
							//line 133 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + ((int) (((long) (x27) )) ) ), "0", 2);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 58:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals(":")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.dateTime(culture).separatorTime;
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 115:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("s")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 132 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x26 = ((long) (( ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
						//line 132 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x26) ) < -2147483648 )) ) || ((boolean) (( ((long) (x26) ) > 2147483647 )) ) )) 
						{
							//line 132 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return ( "" + ((int) (((long) (x26) )) ) );
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 70:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("F")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 141 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 141 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
						{
							//line 141 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x) )) ), 1);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 3488:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("mm")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 131 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x25 = ((long) (( ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
						//line 131 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x25) ) < -2147483648 )) ) || ((boolean) (( ((long) (x25) ) > 2147483647 )) ) )) 
						{
							//line 131 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + ((int) (((long) (x25) )) ) ), "0", 2);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 2240:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("FF")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 142 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x1 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 142 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
						{
							//line 142 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x1) )) ), 2);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 109:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("m")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 130 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x24 = ((long) (( ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
						//line 130 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x24) ) < -2147483648 )) ) || ((boolean) (( ((long) (x24) ) > 2147483647 )) ) )) 
						{
							//line 130 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return ( "" + ((int) (((long) (x24) )) ) );
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 69510:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("FFF")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 143 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x2 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 143 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x2) ) < -2147483648 )) ) || ((boolean) (( ((long) (x2) ) > 2147483647 )) ) )) 
						{
							//line 143 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x2) )) ), 3);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 3328:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("hh")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 121 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x23 = ((long) (( ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
						//line 121 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x23) ) < -2147483648 )) ) || ((boolean) (( ((long) (x23) ) > 2147483647 )) ) )) 
						{
							//line 121 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Ints.lpad(((int) (((long) (x23) )) ), "0", 2);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 2154880:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("FFFF")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 144 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x3 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 144 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x3) ) < -2147483648 )) ) || ((boolean) (( ((long) (x3) ) > 2147483647 )) ) )) 
						{
							//line 144 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x3) )) ), 4);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 104:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("h")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 120 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x22 = ((long) (( ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
						//line 120 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x22) ) < -2147483648 )) ) || ((boolean) (( ((long) (x22) ) > 2147483647 )) ) )) 
						{
							//line 120 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return ( "" + ((int) (((long) (x22) )) ) );
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 66801350:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("FFFFF")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 145 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x4 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 145 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x4) ) < -2147483648 )) ) || ((boolean) (( ((long) (x4) ) > 2147483647 )) ) )) 
						{
							//line 145 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x4) )) ), 5);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case -946392538:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("fffffff")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 140 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x21 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 140 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x21) ) < -2147483648 )) ) || ((boolean) (( ((long) (x21) ) > 2147483647 )) ) )) 
						{
							//line 140 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsPadded(((int) (((long) (x21) )) ));
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 2070841920:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("FFFFFF")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 146 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x5 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 146 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x5) ) < -2147483648 )) ) || ((boolean) (( ((long) (x5) ) > 2147483647 )) ) )) 
						{
							//line 146 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsUpTo(((int) (((long) (x5) )) ), 6);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case -1277454784:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("ffffff")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 139 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x20 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 139 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x20) ) < -2147483648 )) ) || ((boolean) (( ((long) (x20) ) > 2147483647 )) ) )) 
						{
							//line 139 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x20) )) ), 6);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case -228409850:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("FFFFFFF")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 147 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x6 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 147 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x6) ) < -2147483648 )) ) || ((boolean) (( ((long) (x6) ) > 2147483647 )) ) )) 
						{
							//line 147 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsString(((int) (((long) (x6) )) ));
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 97339110:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("fffff")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 138 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x19 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 138 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x19) ) < -2147483648 )) ) || ((boolean) (( ((long) (x19) ) > 2147483647 )) ) )) 
						{
							//line 138 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x19) )) ), 5);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 72:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("H")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return ( "" + (( "" + haxe.root.Std.string(((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) )) );
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 3139968:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("ffff")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 137 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x18 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 137 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x18) ) < -2147483648 )) ) || ((boolean) (( ((long) (x18) ) > 2147483647 )) ) )) 
						{
							//line 137 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x18) )) ), 4);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 2304:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("HH")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + (( "" + haxe.root.Std.string(((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) )) ), "0", 2);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 101286:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("fff")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 136 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x17 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 136 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x17) ) < -2147483648 )) ) || ((boolean) (( ((long) (x17) ) > 2147483647 )) ) )) 
						{
							//line 136 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x17) )) ), 3);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 71496:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("HHH")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + (( "" + haxe.root.Std.string(((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) )) ), "0", 3);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 3264:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("ff")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 135 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x16 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 135 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x16) ) < -2147483648 )) ) || ((boolean) (( ((long) (x16) ) > 2147483647 )) ) )) 
						{
							//line 135 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x16) )) ), 2);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 2216448:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("HHHH")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + (( "" + haxe.root.Std.string(((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) )) ), "0", 4);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 102:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("f")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 134 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x15 = ((long) (( ((long) (t) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
						//line 134 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x15) ) < -2147483648 )) ) || ((boolean) (( ((long) (x15) ) > 2147483647 )) ) )) 
						{
							//line 134 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.format.DateFormat.getDecimalsPaddedUpTo(((int) (((long) (x15) )) ), 1);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 68709960:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("HHHHH")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + (( "" + haxe.root.Std.string(((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) )) ), "0", 5);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case -298225152:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("dddddddd")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 119 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x14 = ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						//line 119 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x14) ) < -2147483648 )) ) || ((boolean) (( ((long) (x14) ) > 2147483647 )) ) )) 
						{
							//line 119 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + ((int) (((long) (x14) )) ) ), "0", 8);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 2130008832:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("HHHHHH")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + (( "" + haxe.root.Std.string(((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) )) ), "0", 6);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 1514400484:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("ddddddd")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 118 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x13 = ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						//line 118 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x13) ) < -2147483648 )) ) || ((boolean) (( ((long) (x13) ) > 2147483647 )) ) )) 
						{
							//line 118 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + ((int) (((long) (x13) )) ) ), "0", 7);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 1605764424:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("HHHHHHH")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + (( "" + haxe.root.Std.string(((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) )) ), "0", 7);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case -1336621696:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("dddddd")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 117 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x12 = ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						//line 117 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x12) ) < -2147483648 )) ) || ((boolean) (( ((long) (x12) ) > 2147483647 )) ) )) 
						{
							//line 117 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + ((int) (((long) (x12) )) ) ), "0", 6);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case -1760910336:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("HHHHHHHH")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + (( "" + haxe.root.Std.string(((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) )) ), "0", 8);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 95430500:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("ddddd")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 116 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x11 = ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						//line 116 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x11) ) < -2147483648 )) ) || ((boolean) (( ((long) (x11) ) > 2147483647 )) ) )) 
						{
							//line 116 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + ((int) (((long) (x11) )) ) ), "0", 5);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 100:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("d")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 112 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x7 = ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						//line 112 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x7) ) < -2147483648 )) ) || ((boolean) (( ((long) (x7) ) > 2147483647 )) ) )) 
						{
							//line 112 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return ( "" + ((int) (((long) (x7) )) ) );
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 3078400:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("dddd")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 115 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x10 = ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						//line 115 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x10) ) < -2147483648 )) ) || ((boolean) (( ((long) (x10) ) > 2147483647 )) ) )) 
						{
							//line 115 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + ((int) (((long) (x10) )) ) ), "0", 4);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 3200:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("dd")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 113 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x8 = ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						//line 113 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x8) ) < -2147483648 )) ) || ((boolean) (( ((long) (x8) ) > 2147483647 )) ) )) 
						{
							//line 113 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + ((int) (((long) (x8) )) ) ), "0", 2);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
				case 99300:
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					if (__temp_svar1.equals("ddd")) 
					{
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						__temp_executeDef2 = false;
						//line 114 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						long x9 = ((long) (( ((long) (t) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
						//line 114 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						if (( ((boolean) (( ((long) (x9) ) < -2147483648 )) ) || ((boolean) (( ((long) (x9) ) > 2147483647 )) ) )) 
						{
							//line 114 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
							throw haxe.lang.HaxeException.wrap("Overflow");
						}
						
						//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
						return thx.Strings.lpad(( "" + ((int) (((long) (x9) )) ) ), "0", 3);
					}
					
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					break;
				}
				
				
			}
			
			//line 150 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			if (__temp_executeDef2) 
			{
				//line 150 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
				if (( ( ( ( pattern != null ) && ( pattern.length() > 1 ) ) && (( haxe.lang.Runtime.valEq(haxe.lang.StringExt.substring(pattern, 0, 1), "\'") && haxe.lang.Runtime.valEq(haxe.lang.StringExt.substring(pattern, ( pattern.length() - 1 ), null), "\'") )) ) || ( haxe.lang.Runtime.valEq(haxe.lang.StringExt.substring(pattern, 0, 1), "\"") && haxe.lang.Runtime.valEq(haxe.lang.StringExt.substring(pattern, ( pattern.length() - 1 ), null), "\"") ) )) 
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					return haxe.lang.StringExt.substring(pattern, 1, ( pattern.length() - 1 ));
				}
				else
				{
					//line 111 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
					return pattern;
				}
				
			}
			else
			{
				//line 150 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public static java.lang.String timeLong(long time, thx.culture.Culture culture)
	{
		//line 161 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long abs = thx._Time.Time_Impl_.abs(time);
		//line 161 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		thx.culture.DateFormatInfo dt = thx.format.DateFormat.dateTime(culture);
		//line 161 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		thx.culture.NumberFormatInfo n = (( (( null == culture )) ? (thx.format.Format.get_defaultCulture()) : (culture) )).number;
		//line 164 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x = ((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
		//line 164 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 164 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 161 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		int days = ((int) (((long) (x) )) );
		//line 165 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x1 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
		//line 165 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
		{
			//line 165 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 161 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		int hours = ((int) (((long) (x1) )) );
		//line 166 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x2 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 166 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x2) ) < -2147483648 )) ) || ((boolean) (( ((long) (x2) ) > 2147483647 )) ) )) 
		{
			//line 166 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 161 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		int minutes = ((int) (((long) (x2) )) );
		//line 167 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x3 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
		//line 167 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x3) ) < -2147483648 )) ) || ((boolean) (( ((long) (x3) ) > 2147483647 )) ) )) 
		{
			//line 167 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 161 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		int seconds = ((int) (((long) (x3) )) );
		//line 161 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		java.lang.String buf = "";
		//line 169 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (((boolean) (( ((long) (time) ) < ((long) (0) ) )) )) 
		{
			//line 170 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			buf = ( "" + n.signNegative );
		}
		
		//line 171 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( days != 0 )) 
		{
			//line 172 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			buf += ( days + n.separatorDecimalNumber );
		}
		
		//line 173 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		buf += thx.Ints.lpad(hours, "0", 2);
		//line 174 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		buf += dt.separatorTime;
		//line 175 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		buf += thx.Ints.lpad(minutes, "0", 2);
		//line 176 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		buf += dt.separatorTime;
		//line 177 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		buf += thx.Ints.lpad(seconds, "0", 2);
		//line 178 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x4 = ((long) (( ((long) (abs) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
		//line 178 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x4) ) < -2147483648 )) ) || ((boolean) (( ((long) (x4) ) > 2147483647 )) ) )) 
		{
			//line 178 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 178 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		int t = ((int) (((long) (x4) )) );
		//line 179 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( t != 0 )) 
		{
			//line 180 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			buf += ( n.separatorDecimalNumber + thx.format.DateFormat.getDecimalsPadded(t) );
		}
		
		//line 181 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return buf;
	}
	
	
	public static java.lang.String timeShort(long time, thx.culture.Culture culture)
	{
		//line 188 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long abs = thx._Time.Time_Impl_.abs(time);
		//line 188 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		thx.culture.DateFormatInfo dt = thx.format.DateFormat.dateTime(culture);
		//line 188 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		thx.culture.NumberFormatInfo n = (( (( null == culture )) ? (thx.format.Format.get_defaultCulture()) : (culture) )).number;
		//line 191 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x = ((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
		//line 191 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 191 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 188 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		int days = ((int) (((long) (x) )) );
		//line 192 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x1 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) ) % ((long) (24) ) )) );
		//line 192 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x1) ) < -2147483648 )) ) || ((boolean) (( ((long) (x1) ) > 2147483647 )) ) )) 
		{
			//line 192 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 188 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		int hours = ((int) (((long) (x1) )) );
		//line 193 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x2 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 193 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x2) ) < -2147483648 )) ) || ((boolean) (( ((long) (x2) ) > 2147483647 )) ) )) 
		{
			//line 193 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 188 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		int minutes = ((int) (((long) (x2) )) );
		//line 194 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x3 = ((long) (( ((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) ) % ((long) (60) ) )) );
		//line 194 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x3) ) < -2147483648 )) ) || ((boolean) (( ((long) (x3) ) > 2147483647 )) ) )) 
		{
			//line 194 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 188 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		int seconds = ((int) (((long) (x3) )) );
		//line 188 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		java.lang.String buf = "";
		//line 196 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (((boolean) (( ((long) (time) ) < ((long) (0) ) )) )) 
		{
			//line 197 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			buf = ( "" + n.signNegative );
		}
		
		//line 198 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( days != 0 )) 
		{
			//line 199 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			buf += ( days + dt.separatorTime );
		}
		
		//line 200 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		buf += thx.Ints.lpad(hours, "0", 2);
		//line 201 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		buf += dt.separatorTime;
		//line 202 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		buf += thx.Ints.lpad(minutes, "0", 2);
		//line 203 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		buf += dt.separatorTime;
		//line 204 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		buf += thx.Ints.lpad(seconds, "0", 2);
		//line 205 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x4 = ((long) (( ((long) (abs) ) % ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
		//line 205 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x4) ) < -2147483648 )) ) || ((boolean) (( ((long) (x4) ) > 2147483647 )) ) )) 
		{
			//line 205 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 205 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		int t = ((int) (((long) (x4) )) );
		//line 206 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( t != 0 )) 
		{
			//line 207 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			buf += ( n.separatorDecimalNumber + thx.format.DateFormat.getDecimalsString(t) );
		}
		
		//line 209 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return buf;
	}
	
	
	public static java.lang.String invariantTimeLong(long time)
	{
		//line 213 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return thx.format.TimeFormat.timeLong(time, thx.culture.Culture.invariant);
	}
	
	
	public static java.lang.String offsetHoursShort(long offset, thx.culture.Culture culture)
	{
		//line 216 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		thx.culture.NumberFormatInfo n = (( (( null == culture )) ? (thx.format.Format.get_defaultCulture()) : (culture) )).number;
		//line 216 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long abs = thx._Time.Time_Impl_.abs(offset);
		//line 218 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return ( (( (((boolean) (( ((long) (offset) ) < ((long) (0) ) )) )) ? (n.signNegative) : (n.signPositive) )) + (( "" + haxe.root.Std.string(((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) )) );
	}
	
	
	public static java.lang.String offsetHoursLong(long offset, thx.culture.Culture culture)
	{
		//line 223 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		thx.culture.NumberFormatInfo n = (( (( null == culture )) ? (thx.format.Format.get_defaultCulture()) : (culture) )).number;
		//line 223 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long abs = thx._Time.Time_Impl_.abs(offset);
		//line 225 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return ( (( (((boolean) (( ((long) (offset) ) < ((long) (0) ) )) )) ? (n.signNegative) : (n.signPositive) )) + thx.Strings.lpad(( "" + haxe.root.Std.string(((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) ), "0", 2) );
	}
	
	
	public static java.lang.String offsetLong(long offset, thx.culture.Culture culture)
	{
		//line 230 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		thx.culture.DateFormatInfo dt = thx.format.DateFormat.dateTime(culture);
		//line 230 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		thx.culture.NumberFormatInfo n = (( (( null == culture )) ? (thx.format.Format.get_defaultCulture()) : (culture) )).number;
		//line 230 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long abs = thx._Time.Time_Impl_.abs(offset);
		//line 233 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		java.lang.String tmp = ( ( (( (((boolean) (( ((long) (offset) ) < ((long) (0) ) )) )) ? (n.signNegative) : (n.signPositive) )) + thx.Strings.lpad(( "" + haxe.root.Std.string(((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) ), "0", 2) ) + dt.separatorTime );
		//line 236 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x = ((long) (( ((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 236 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 236 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 233 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return ( tmp + thx.Ints.lpad(((int) (((long) (x) )) ), "0", 2) );
	}
	
	
	public static java.lang.String iso8601OffsetShort(long offset)
	{
		//line 240 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long abs = thx._Time.Time_Impl_.abs(offset);
		//line 241 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		java.lang.String tmp = ( (( (((boolean) (( ((long) (offset) ) < ((long) (0) ) )) )) ? ("-") : ("+") )) + thx.Strings.lpad(( "" + haxe.root.Std.string(((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) )) )) ), "0", 2) );
		//line 243 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		long x = ((long) (( ((long) (( ((long) (abs) ) / ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) )) ) % ((long) (60) ) )) );
		//line 243 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		if (( ((boolean) (( ((long) (x) ) < -2147483648 )) ) || ((boolean) (( ((long) (x) ) > 2147483647 )) ) )) 
		{
			//line 243 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
			throw haxe.lang.HaxeException.wrap("Overflow");
		}
		
		//line 241 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return ( tmp + thx.Ints.lpad(((int) (((long) (x) )) ), "0", 2) );
	}
	
	
	public static haxe.root.EReg getPattern()
	{
		//line 246 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return new haxe.root.EReg("(d|H){1,8}|(f|F){1,7}|(h|m|s){1,2}|[:.]|\'[^\']*\'|\"[^\"]*\"", "");
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 14 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return new thx.format.TimeFormat(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 14 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/TimeFormat.hx"
		return new thx.format.TimeFormat();
	}
	
	
}


