// Generated by Haxe 3.3.0
package thx.format;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestBigIntFormat extends haxe.lang.HxObject
{
	static
	{
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt9 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl1 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", ".", ".", ".", "-", "+", "\u20ac", "Non un numero reale", "-Infinito", "%", "\u2030", "+Infinito"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (9) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl2 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "", "", "Monday", "Gregorian", "calendario gregoriano", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it-IT", __temp_odecl2, "it-IT", false, false, "it", "ita", "Gregorian", "Italian", "italiano", "Italy", "Italia", __temp_odecl1, ";", "ITA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1040) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt9 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 10 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		thx.format.TestBigIntFormat.it = ((thx.culture.Culture) (__temp_stmt9) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt10 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl3 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ".", ".", ".", ",", ",", ",", "-", "+", "$", "NaN", "-Infinity", "%", "\u2030", "Infinity"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (0) )) ), ((double) (((double) (1) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl4 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "AM", "PM", "Sunday", "Gregorian", "Gregorian Calendar", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), "dddd, MMMM dd, yyyy", "M/d/yyyy", "dddd, MMMM dd, yyyy h:mm:ss tt", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "MMMM dd", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "h:mm:ss tt", "h:mm tt", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM, yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (0) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"en-US", __temp_odecl4, "en-US", false, false, "en", "eng", "Gregorian", "English", "English", "United States", "United States", __temp_odecl3, ",", "ENU"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1033) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt10 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 11 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		thx.format.TestBigIntFormat.us = ((thx.culture.Culture) (__temp_stmt10) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt11 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl5 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 2}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 2}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 2}), ".", ".", ".", ",", ",", ",", "-", "+", "\u20b9", "nan", "-infinity", "%", "\u2030", "infinity"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (12) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl6 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "\u09f0\u09be\u09a4\u09bf\u09aa\u09c1", "\u0986\u09ac\u09c7\u09b2\u09bf", "Monday", "Gregorian", "\u0987\u0982\u09f0\u09be\u099c\u09c0 \u0995\u09c7\u09b2\u09c7\u09a3\u09cd\u09a1\u09be\u09f0", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u09b8\u09cb\u09ae\u09ac\u09be\u09f0", "\u09ae\u0999\u09cd\u0997\u09b2\u09ac\u09be\u09f0", "\u09ac\u09c1\u09a7\u09ac\u09be\u09f0", "\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf\u09ac\u09be\u09f0", "\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09f0", "\u09b6\u09a8\u09bf\u09ac\u09be\u09f0", "\u09f0\u09ac\u09bf\u09ac\u09be\u09f0"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u09b8\u09cb\u09ae.", "\u09ae\u0999\u09cd\u0997\u09b2.", "\u09ac\u09c1\u09a7.", "\u09ac\u09c3\u09b9.", "\u09b6\u09c1\u0995\u09cd\u09b0.", "\u09b6\u09a8\u09bf.", "\u09f0\u09ac\u09bf."}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u09b8\u09cb", "\u09ae", "\u09ac\u09c1", "\u09ac\u09c3", "\u09b6\u09c1", "\u09b6", "\u09b0"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u099c\u09be\u09a8\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0", "\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0", "\u09a8\u09ac\u09c7\u09ae\u09cd\u09ac\u09b0", "\u09a1\u09bf\u099a\u09c7\u09ae\u09cd\u09ac\u09b0", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u099c\u09be\u09a8\u09c1", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7", "\u0985\u0995\u09cd\u099f\u09cb", "\u09a8\u09ac\u09c7", "\u09a1\u09bf\u099a\u09c7", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u099c\u09be\u09a8\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0", "\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0", "\u09a8\u09ac\u09c7\u09ae\u09cd\u09ac\u09b0", "\u09a1\u09bf\u099a\u09c7\u09ae\u09cd\u09ac\u09b0", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u099c\u09be\u09a8\u09c1", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7", "\u0985\u0995\u09cd\u099f\u09cb", "\u09a8\u09ac\u09c7", "\u09a1\u09bf\u099a\u09c7", ""}), "yyyy,MMMM dd, dddd", "dd-MM-yyyy", "yyyy,MMMM dd, dddd tt h:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "tt h:mm:ss", "tt h:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM,yy", "-", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"as-IN", __temp_odecl6, "as-IN", false, false, "as", "asm", "Gregorian", "Assamese", "\u0985\u09b8\u09ae\u09c0\u09df\u09be", "India", "\u09ad\u09be\u09f0\u09a4", __temp_odecl5, ",", "ASM"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1101) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt11 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 12 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		thx.format.TestBigIntFormat.asIn = ((thx.culture.Culture) (__temp_stmt11) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt12 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl7 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 0}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 0}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 0}), ",", ",", ",", "\u00a0", "\u00a0", "\u00a0", "-", "+", "\u20bd", "NaN", "-\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c", "%", "\u2030", "\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (8) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (3) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl8 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "", "", "Monday", "Gregorian", "\u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044b", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0419\u04d9\u043a\u0448\u04d9\u043c\u0431\u0435", "\u0414\u04af\u0448\u04d9\u043c\u0431\u0435", "\u0428\u0438\u0448\u04d9\u043c\u0431\u0435", "\u0428\u0430\u0440\u0448\u0430\u043c\u0431\u044b", "\u041a\u0435\u0441\u0430\u0499\u043d\u0430", "\u0419\u043e\u043c\u0430", "\u0428\u04d9\u043c\u0431\u0435"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0419\u0448", "\u0414\u0448", "\u0428\u0448", "\u0428\u0440", "\u041a\u0441", "\u0419\u043c", "\u0428\u0431"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0419\u0448", "\u0414\u0448", "\u0428\u0448", "\u0428\u0440", "\u041a\u0441", "\u0419\u043c", "\u0428\u0431"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0493\u0438\u043d\u0443\u0430\u0440", "\u0444\u0435\u0432\u0440\u0430\u043b\u044c", "\u043c\u0430\u0440\u0442", "\u0430\u043f\u0440\u0435\u043b\u044c", "\u043c\u0430\u0439", "\u0438\u044e\u043d\u044c", "\u0438\u044e\u043b\u044c", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u043e\u043a\u0442\u044f\u0431\u0440\u044c", "\u043d\u043e\u044f\u0431\u0440\u044c", "\u0434\u0435\u043a\u0430\u0431\u0440\u044c", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0493\u0438\u043d", "\u0444\u0435\u0432", "\u043c\u0430\u0440", "\u0430\u043f\u0440", "\u043c\u0430\u0439", "\u0438\u044e\u043d", "\u0438\u044e\u043b", "\u0430\u0432\u0433", "\u0441\u0435\u043d", "\u043e\u043a\u0442", "\u043d\u043e\u044f", "\u0434\u0435\u043a", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0493\u0438\u043d\u0443\u0430\u0440", "\u0444\u0435\u0432\u0440\u0430\u043b\u044c", "\u043c\u0430\u0440\u0442", "\u0430\u043f\u0440\u0435\u043b\u044c", "\u043c\u0430\u0439", "\u0438\u044e\u043d\u044c", "\u0438\u044e\u043b\u044c", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u043e\u043a\u0442\u044f\u0431\u0440\u044c", "\u043d\u043e\u044f\u0431\u0440\u044c", "\u0434\u0435\u043a\u0430\u0431\u0440\u044c", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0493\u0438\u043d", "\u0444\u0435\u0432", "\u043c\u0430\u0440", "\u0430\u043f\u0440", "\u043c\u0430\u0439", "\u0438\u044e\u043d", "\u0438\u044e\u043b", "\u0430\u0432\u0433", "\u0441\u0435\u043d", "\u043e\u043a\u0442", "\u043d\u043e\u044f", "\u0434\u0435\u043a", ""}), "d MMMM yyyy \'\u0439\'", "dd.MM.yy", "d MMMM yyyy \'\u0439\' H:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "MMMM dd", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "H:mm:ss", "H:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", ".", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"ba-RU", __temp_odecl8, "ba-RU", false, false, "ba", "bak", "Gregorian", "Bashkir", "\u0411\u0430\u0448\u04a1\u043e\u0440\u0442", "Russia", "\u0420\u043e\u0441\u0441\u0438\u044f", __temp_odecl7, ";", "BAS"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1133) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt12 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 13 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		thx.format.TestBigIntFormat.baRu = ((thx.culture.Culture) (__temp_stmt12) );
	}
	
	public TestBigIntFormat(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestBigIntFormat()
	{
		//line 14 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		thx.format.TestBigIntFormat.__hx_ctor_thx_format_TestBigIntFormat(this);
	}
	
	
	public static void __hx_ctor_thx_format_TestBigIntFormat(thx.format.TestBigIntFormat __temp_me169)
	{
	}
	
	
	public static thx.culture.Culture it;
	
	public static thx.culture.Culture us;
	
	public static thx.culture.Culture asIn;
	
	public static thx.culture.Culture baRu;
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		return new thx.format.TestBigIntFormat(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		return new thx.format.TestBigIntFormat();
	}
	
	
	public void testInteger()
	{
		//line 17 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		utest.Assert.equals("12,345", thx.format.BigIntFormat.integer(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(12345)) ), null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestBigIntFormat", "TestBigIntFormat.hx", "testInteger"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
	}
	
	
	public void testFormatHex()
	{
		//line 21 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		utest.Assert.equals("7b", thx.format.BigIntFormat.format(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(123)) ), "x", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestBigIntFormat", "TestBigIntFormat.hx", "testFormatHex"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
		//line 22 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		utest.Assert.equals("7B", thx.format.BigIntFormat.format(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(123)) ), "X", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestBigIntFormat", "TestBigIntFormat.hx", "testFormatHex"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
		//line 23 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		utest.Assert.equals("007b", thx.format.BigIntFormat.format(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(123)) ), "x4", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestBigIntFormat", "TestBigIntFormat.hx", "testFormatHex"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
		//line 24 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		utest.Assert.equals("00007B", thx.format.BigIntFormat.format(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(123)) ), "X6", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestBigIntFormat", "TestBigIntFormat.hx", "testFormatHex"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
	}
	
	
	public void testOctal()
	{
		//line 28 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		utest.Assert.equals("112", thx.format.BigIntFormat.octal(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(74)) ), null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestBigIntFormat", "TestBigIntFormat.hx", "testOctal"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
	}
	
	
	public void testHex()
	{
		//line 32 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		utest.Assert.equals("2af3", thx.format.BigIntFormat.hex(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(10995)) ), null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestBigIntFormat", "TestBigIntFormat.hx", "testHex"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
	}
	
	
	public void testBinary()
	{
		//line 36 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		utest.Assert.equals("11001", thx.format.BigIntFormat.binary(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(25)) ), null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestBigIntFormat", "TestBigIntFormat.hx", "testBinary"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
		//line 37 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		utest.Assert.equals("-10000101", thx.format.BigIntFormat.binary(((thx.bigint.BigIntImpl) (thx.bigint.Bigs.fromInt(-133)) ), null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestBigIntFormat", "TestBigIntFormat.hx", "testBinary"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
			switch (field.hashCode())
			{
				case 1230767923:
				{
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					if (field.equals("testBinary")) 
					{
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBinary")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					break;
				}
				
				
				case 1565453388:
				{
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					if (field.equals("testInteger")) 
					{
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testInteger")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					break;
				}
				
				
				case -1422478039:
				{
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					if (field.equals("testHex")) 
					{
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testHex")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					break;
				}
				
				
				case -1813714126:
				{
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					if (field.equals("testFormatHex")) 
					{
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatHex")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					break;
				}
				
				
				case -1195391015:
				{
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					if (field.equals("testOctal")) 
					{
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testOctal")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
			switch (field.hashCode())
			{
				case 1230767923:
				{
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					if (field.equals("testBinary")) 
					{
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						this.testBinary();
					}
					
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					break;
				}
				
				
				case 1565453388:
				{
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					if (field.equals("testInteger")) 
					{
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						this.testInteger();
					}
					
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					break;
				}
				
				
				case -1422478039:
				{
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					if (field.equals("testHex")) 
					{
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						this.testHex();
					}
					
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					break;
				}
				
				
				case -1813714126:
				{
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					if (field.equals("testFormatHex")) 
					{
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						this.testFormatHex();
					}
					
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					break;
				}
				
				
				case -1195391015:
				{
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					if (field.equals("testOctal")) 
					{
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
						this.testOctal();
					}
					
					//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 9 "/shared/format/test/thx/format/TestBigIntFormat.hx"
		return null;
	}
	
	
}


