// Generated by Haxe 3.3.0
package thx.culture;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class NumberFormatInfo extends haxe.lang.HxObject
{
	static
	{
		//line 4 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		thx.culture.NumberFormatInfo.invariant = new thx.culture.NumberFormatInfo(2, 2, 2, new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), 0, 1, 0, 0, 0, ".", ".", ".", ",", ",", ",", "-", "+", "\u00a4", "NaN", "-Infinity", "%", "\u2030", "Infinity");
	}
	
	public NumberFormatInfo(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public NumberFormatInfo(int decimalDigitsCurrency, int decimalDigitsNumber, int decimalDigitsPercent, haxe.root.Array<java.lang.Object> groupSizesCurrency, haxe.root.Array<java.lang.Object> groupSizesNumber, haxe.root.Array<java.lang.Object> groupSizesPercent, int patternNegativeCurrency, int patternNegativeNumber, int patternNegativePercent, int patternPositiveCurrency, int patternPositivePercent, java.lang.String separatorDecimalCurrency, java.lang.String separatorDecimalNumber, java.lang.String separatorDecimalPercent, java.lang.String separatorGroupCurrency, java.lang.String separatorGroupNumber, java.lang.String separatorGroupPercent, java.lang.String signNegative, java.lang.String signPositive, java.lang.String symbolCurrency, java.lang.String symbolNaN, java.lang.String symbolNegativeInfinity, java.lang.String symbolPercent, java.lang.String symbolPermille, java.lang.String symbolPositiveInfinity)
	{
		//line 32 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		thx.culture.NumberFormatInfo.__hx_ctor_thx_culture_NumberFormatInfo(this, decimalDigitsCurrency, decimalDigitsNumber, decimalDigitsPercent, groupSizesCurrency, groupSizesNumber, groupSizesPercent, patternNegativeCurrency, patternNegativeNumber, patternNegativePercent, patternPositiveCurrency, patternPositivePercent, separatorDecimalCurrency, separatorDecimalNumber, separatorDecimalPercent, separatorGroupCurrency, separatorGroupNumber, separatorGroupPercent, signNegative, signPositive, symbolCurrency, symbolNaN, symbolNegativeInfinity, symbolPercent, symbolPermille, symbolPositiveInfinity);
	}
	
	
	public static void __hx_ctor_thx_culture_NumberFormatInfo(thx.culture.NumberFormatInfo __temp_me142, int decimalDigitsCurrency, int decimalDigitsNumber, int decimalDigitsPercent, haxe.root.Array<java.lang.Object> groupSizesCurrency, haxe.root.Array<java.lang.Object> groupSizesNumber, haxe.root.Array<java.lang.Object> groupSizesPercent, int patternNegativeCurrency, int patternNegativeNumber, int patternNegativePercent, int patternPositiveCurrency, int patternPositivePercent, java.lang.String separatorDecimalCurrency, java.lang.String separatorDecimalNumber, java.lang.String separatorDecimalPercent, java.lang.String separatorGroupCurrency, java.lang.String separatorGroupNumber, java.lang.String separatorGroupPercent, java.lang.String signNegative, java.lang.String signPositive, java.lang.String symbolCurrency, java.lang.String symbolNaN, java.lang.String symbolNegativeInfinity, java.lang.String symbolPercent, java.lang.String symbolPermille, java.lang.String symbolPositiveInfinity)
	{
		//line 59 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.decimalDigitsCurrency = decimalDigitsCurrency;
		//line 60 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.decimalDigitsNumber = decimalDigitsNumber;
		//line 61 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.decimalDigitsPercent = decimalDigitsPercent;
		//line 62 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.groupSizesCurrency = groupSizesCurrency;
		//line 63 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.groupSizesNumber = groupSizesNumber;
		//line 64 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.groupSizesPercent = groupSizesPercent;
		//line 65 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.patternNegativeCurrency = patternNegativeCurrency;
		//line 66 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.patternNegativeNumber = patternNegativeNumber;
		//line 67 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.patternNegativePercent = patternNegativePercent;
		//line 68 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.patternPositiveCurrency = patternPositiveCurrency;
		//line 69 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.patternPositivePercent = patternPositivePercent;
		//line 70 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.separatorDecimalCurrency = separatorDecimalCurrency;
		//line 71 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.separatorDecimalNumber = separatorDecimalNumber;
		//line 72 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.separatorDecimalPercent = separatorDecimalPercent;
		//line 73 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.separatorGroupCurrency = separatorGroupCurrency;
		//line 74 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.separatorGroupNumber = separatorGroupNumber;
		//line 75 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.separatorGroupPercent = separatorGroupPercent;
		//line 76 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.signNegative = signNegative;
		//line 77 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.signPositive = signPositive;
		//line 78 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.symbolCurrency = symbolCurrency;
		//line 79 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.symbolNaN = symbolNaN;
		//line 80 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.symbolNegativeInfinity = symbolNegativeInfinity;
		//line 81 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.symbolPercent = symbolPercent;
		//line 82 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.symbolPermille = symbolPermille;
		//line 83 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		__temp_me142.symbolPositiveInfinity = symbolPositiveInfinity;
	}
	
	
	public static thx.culture.NumberFormatInfo invariant;
	
	public static thx.culture.NumberFormatInfo fromObject(java.lang.Object o)
	{
		//line 116 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		return new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "symbolPositiveInfinity", true)));
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		return new thx.culture.NumberFormatInfo(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		return new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(arr.__get(1))) ), ((int) (haxe.lang.Runtime.toInt(arr.__get(2))) ), ((haxe.root.Array<java.lang.Object>) (arr.__get(3)) ), ((haxe.root.Array<java.lang.Object>) (arr.__get(4)) ), ((haxe.root.Array<java.lang.Object>) (arr.__get(5)) ), ((int) (haxe.lang.Runtime.toInt(arr.__get(6))) ), ((int) (haxe.lang.Runtime.toInt(arr.__get(7))) ), ((int) (haxe.lang.Runtime.toInt(arr.__get(8))) ), ((int) (haxe.lang.Runtime.toInt(arr.__get(9))) ), ((int) (haxe.lang.Runtime.toInt(arr.__get(10))) ), haxe.lang.Runtime.toString(arr.__get(11)), haxe.lang.Runtime.toString(arr.__get(12)), haxe.lang.Runtime.toString(arr.__get(13)), haxe.lang.Runtime.toString(arr.__get(14)), haxe.lang.Runtime.toString(arr.__get(15)), haxe.lang.Runtime.toString(arr.__get(16)), haxe.lang.Runtime.toString(arr.__get(17)), haxe.lang.Runtime.toString(arr.__get(18)), haxe.lang.Runtime.toString(arr.__get(19)), haxe.lang.Runtime.toString(arr.__get(20)), haxe.lang.Runtime.toString(arr.__get(21)), haxe.lang.Runtime.toString(arr.__get(22)), haxe.lang.Runtime.toString(arr.__get(23)), haxe.lang.Runtime.toString(arr.__get(24)));
	}
	
	
	public int decimalDigitsCurrency;
	
	public int decimalDigitsNumber;
	
	public int decimalDigitsPercent;
	
	public haxe.root.Array<java.lang.Object> groupSizesCurrency;
	
	public haxe.root.Array<java.lang.Object> groupSizesNumber;
	
	public haxe.root.Array<java.lang.Object> groupSizesPercent;
	
	public int patternNegativeCurrency;
	
	public int patternNegativeNumber;
	
	public int patternNegativePercent;
	
	public int patternPositiveCurrency;
	
	public int patternPositivePercent;
	
	public java.lang.String separatorDecimalCurrency;
	
	public java.lang.String separatorDecimalNumber;
	
	public java.lang.String separatorDecimalPercent;
	
	public java.lang.String separatorGroupCurrency;
	
	public java.lang.String separatorGroupNumber;
	
	public java.lang.String separatorGroupPercent;
	
	public java.lang.String signNegative;
	
	public java.lang.String signPositive;
	
	public java.lang.String symbolCurrency;
	
	public java.lang.String symbolNaN;
	
	public java.lang.String symbolNegativeInfinity;
	
	public java.lang.String symbolPercent;
	
	public java.lang.String symbolPermille;
	
	public java.lang.String symbolPositiveInfinity;
	
	public java.lang.Object toObject()
	{
		//line 87 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		return new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{this.groupSizesCurrency, this.groupSizesNumber, this.groupSizesPercent, this.separatorDecimalCurrency, this.separatorDecimalNumber, this.separatorDecimalPercent, this.separatorGroupCurrency, this.separatorGroupNumber, this.separatorGroupPercent, this.signNegative, this.signPositive, this.symbolCurrency, this.symbolNaN, this.symbolNegativeInfinity, this.symbolPercent, this.symbolPermille, this.symbolPositiveInfinity}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (this.decimalDigitsCurrency) )) ), ((double) (((double) (this.decimalDigitsNumber) )) ), ((double) (((double) (this.decimalDigitsPercent) )) ), ((double) (((double) (this.patternNegativeCurrency) )) ), ((double) (((double) (this.patternNegativeNumber) )) ), ((double) (((double) (this.patternNegativePercent) )) ), ((double) (((double) (this.patternPositiveCurrency) )) ), ((double) (((double) (this.patternPositivePercent) )) )});
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			switch (field.hashCode())
			{
				case -1254612388:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternPositivePercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.patternPositivePercent = ((int) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1617561400:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.decimalDigitsCurrency = ((int) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -90966822:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternPositiveCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.patternPositiveCurrency = ((int) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1456757312:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.decimalDigitsNumber = ((int) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1020922720:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativePercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.patternNegativePercent = ((int) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -888215378:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.decimalDigitsPercent = ((int) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1461038194:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativeNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.patternNegativeNumber = ((int) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1436521706:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativeCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.patternNegativeCurrency = ((int) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			switch (field.hashCode())
			{
				case 1943398649:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolPositiveInfinity")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.symbolPositiveInfinity = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1617561400:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.decimalDigitsCurrency = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 258185860:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolPermille")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.symbolPermille = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1456757312:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.decimalDigitsNumber = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 146574221:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.symbolPercent = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -888215378:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.decimalDigitsPercent = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 597843765:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolNegativeInfinity")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.symbolNegativeInfinity = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 1176027780:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("groupSizesCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.groupSizesCurrency = ((haxe.root.Array<java.lang.Object>) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -407063485:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolNaN")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.symbolNaN = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -2146587012:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("groupSizesNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.groupSizesNumber = ((haxe.root.Array<java.lang.Object>) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 396145097:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.symbolCurrency = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -798099598:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("groupSizesPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.groupSizesPercent = ((haxe.root.Array<java.lang.Object>) (value) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1241788714:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("signPositive")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.signPositive = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1436521706:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativeCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.patternNegativeCurrency = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1068482286:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("signNegative")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.signNegative = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1461038194:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativeNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.patternNegativeNumber = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1900375989:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorGroupPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.separatorGroupPercent = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1020922720:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativePercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.patternNegativePercent = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -103934333:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorGroupNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.separatorGroupNumber = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -90966822:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternPositiveCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.patternPositiveCurrency = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 1365198027:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorGroupCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.separatorGroupCurrency = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1254612388:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternPositivePercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.patternPositivePercent = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -2123762183:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorDecimalPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.separatorDecimalPercent = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1264806691:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorDecimalCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.separatorDecimalCurrency = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 165954325:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorDecimalNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						this.separatorDecimalNumber = haxe.lang.Runtime.toString(value);
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return value;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			switch (field.hashCode())
			{
				case -1908304486:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("toObject")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toObject")) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1617561400:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.decimalDigitsCurrency;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 1943398649:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolPositiveInfinity")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.symbolPositiveInfinity;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1456757312:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.decimalDigitsNumber;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 258185860:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolPermille")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.symbolPermille;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -888215378:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.decimalDigitsPercent;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 146574221:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.symbolPercent;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 1176027780:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("groupSizesCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.groupSizesCurrency;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 597843765:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolNegativeInfinity")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.symbolNegativeInfinity;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -2146587012:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("groupSizesNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.groupSizesNumber;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -407063485:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolNaN")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.symbolNaN;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -798099598:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("groupSizesPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.groupSizesPercent;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 396145097:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("symbolCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.symbolCurrency;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1436521706:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativeCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.patternNegativeCurrency;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1241788714:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("signPositive")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.signPositive;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1461038194:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativeNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.patternNegativeNumber;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1068482286:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("signNegative")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.signNegative;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1020922720:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativePercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.patternNegativePercent;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1900375989:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorGroupPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.separatorGroupPercent;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -90966822:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternPositiveCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.patternPositiveCurrency;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -103934333:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorGroupNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.separatorGroupNumber;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1254612388:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternPositivePercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.patternPositivePercent;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 1365198027:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorGroupCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.separatorGroupCurrency;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1264806691:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorDecimalCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.separatorDecimalCurrency;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -2123762183:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorDecimalPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.separatorDecimalPercent;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case 165954325:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("separatorDecimalNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.separatorDecimalNumber;
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			switch (field.hashCode())
			{
				case -1254612388:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternPositivePercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return ((double) (this.patternPositivePercent) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1617561400:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return ((double) (this.decimalDigitsCurrency) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -90966822:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternPositiveCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return ((double) (this.patternPositiveCurrency) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1456757312:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return ((double) (this.decimalDigitsNumber) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1020922720:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativePercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return ((double) (this.patternNegativePercent) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -888215378:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("decimalDigitsPercent")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return ((double) (this.decimalDigitsPercent) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1461038194:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativeNumber")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return ((double) (this.patternNegativeNumber) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
				case -1436521706:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("patternNegativeCurrency")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return ((double) (this.patternNegativeCurrency) );
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			boolean __temp_executeDef1 = true;
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			switch (field.hashCode())
			{
				case -1908304486:
				{
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					if (field.equals("toObject")) 
					{
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
						return this.toObject();
					}
					
					//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
					break;
				}
				
				
			}
			
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			if (__temp_executeDef1) 
			{
				//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			else
			{
				//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("symbolPositiveInfinity");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("symbolPermille");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("symbolPercent");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("symbolNegativeInfinity");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("symbolNaN");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("symbolCurrency");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("signPositive");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("signNegative");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("separatorGroupPercent");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("separatorGroupNumber");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("separatorGroupCurrency");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("separatorDecimalPercent");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("separatorDecimalNumber");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("separatorDecimalCurrency");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("patternPositivePercent");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("patternPositiveCurrency");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("patternNegativePercent");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("patternNegativeNumber");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("patternNegativeCurrency");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("groupSizesPercent");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("groupSizesNumber");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("groupSizesCurrency");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("decimalDigitsPercent");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("decimalDigitsNumber");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		baseArr.push("decimalDigitsCurrency");
		//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
		{
			//line 3 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/NumberFormatInfo.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


