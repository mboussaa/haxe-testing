// Generated by Haxe 3.3.0
package thx.format;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class DecimalFormat_printf_302__Fun extends haxe.lang.Function
{
	public DecimalFormat_printf_302__Fun(int width, boolean prefix, java.lang.String padding, boolean negativeSignOnly, boolean justifyRight, boolean emptySpaceForSign)
	{
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		super(5, 0);
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		this.width = width;
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		this.prefix = prefix;
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		this.padding = padding;
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		this.negativeSignOnly = negativeSignOnly;
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		this.justifyRight = justifyRight;
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		this.emptySpaceForSign = emptySpaceForSign;
	}
	
	
	@Override public java.lang.Object __hx_invoke5_o(double __fn_float1, java.lang.Object __fn_dyn1, double __fn_float2, java.lang.Object __fn_dyn2, double __fn_float3, java.lang.Object __fn_dyn3, double __fn_float4, java.lang.Object __fn_dyn4, double __fn_float5, java.lang.Object __fn_dyn5)
	{
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		java.lang.String ps = ( (( __fn_dyn5 == haxe.lang.Runtime.undefined )) ? (haxe.lang.Runtime.toString(__fn_float5)) : (haxe.lang.Runtime.toString(__fn_dyn5)) );
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		java.lang.String ns = ( (( __fn_dyn4 == haxe.lang.Runtime.undefined )) ? (haxe.lang.Runtime.toString(__fn_float4)) : (haxe.lang.Runtime.toString(__fn_dyn4)) );
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		java.lang.String p1 = ( (( __fn_dyn3 == haxe.lang.Runtime.undefined )) ? (haxe.lang.Runtime.toString(__fn_float3)) : (haxe.lang.Runtime.toString(__fn_dyn3)) );
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		thx.bigint.DecimalImpl decimal1 = ( (( __fn_dyn2 == haxe.lang.Runtime.undefined )) ? (((thx.bigint.DecimalImpl) (((java.lang.Object) (__fn_float2) )) )) : (((thx.bigint.DecimalImpl) (__fn_dyn2) )) );
		//line 302 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		java.lang.String s = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (haxe.lang.Runtime.toString(__fn_float1)) : (haxe.lang.Runtime.toString(__fn_dyn1)) );
		//line 303 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		if (this.prefix) 
		{
			//line 304 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
			s = ( p1 + s );
		}
		
		//line 305 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		if (((thx.bigint.DecimalImpl) (decimal1) ).isNegative()) 
		{
			//line 306 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
			s = ( ns + s );
		}
		else
		{
			//line 307 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
			if ( ! (this.negativeSignOnly) ) 
			{
				//line 308 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
				s = ( ps + s );
			}
			else
			{
				//line 309 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
				if (this.emptySpaceForSign) 
				{
					//line 310 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
					s = ( " " + s );
				}
				
			}
			
		}
		
		//line 312 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
		if (this.justifyRight) 
		{
			//line 313 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
			return haxe.root.StringTools.lpad(s, this.padding, this.width);
		}
		else
		{
			//line 315 "/usr/lib/haxe/lib/thx,format/0,5,1/src/thx/format/DecimalFormat.hx"
			return haxe.root.StringTools.rpad(s, this.padding, this.width);
		}
		
	}
	
	
	public int width;
	
	public boolean prefix;
	
	public java.lang.String padding;
	
	public boolean negativeSignOnly;
	
	public boolean justifyRight;
	
	public boolean emptySpaceForSign;
	
}


