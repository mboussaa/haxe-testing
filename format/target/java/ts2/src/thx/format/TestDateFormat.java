// Generated by Haxe 3.3.0
package thx.format;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestDateFormat extends haxe.lang.HxObject
{
	static
	{
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt13 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl1 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", ".", ".", ".", "-", "+", "\u20ac", "Non un numero reale", "-Infinito", "%", "\u2030", "+Infinito"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (9) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl2 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "", "", "Monday", "Gregorian", "calendario gregoriano", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it-IT", __temp_odecl2, "it-IT", false, false, "it", "ita", "Gregorian", "Italian", "italiano", "Italy", "Italia", __temp_odecl1, ";", "ITA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1040) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt13 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 9 "/shared/format/test/thx/format/TestDateFormat.hx"
		thx.format.TestDateFormat.it = ((thx.culture.Culture) (__temp_stmt13) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt14 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl3 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ".", ".", ".", "\'", "\'", "\'", "-", "+", "fr.", "Non un numero reale", "-Infinito", "%", "\u2030", "+Infinito"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl4 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "", "", "Monday", "Gregorian", "calendario gregoriano", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "dddd, d. MMMM yyyy", "dd.MM.yyyy", "dddd, d. MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "d. MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", ".", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it-CH", __temp_odecl4, "it-CH", false, false, "it", "ita", "Gregorian", "Italian", "italiano", "Switzerland", "Svizzera", __temp_odecl3, ";", "ITS"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (2064) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt14 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 10 "/shared/format/test/thx/format/TestDateFormat.hx"
		thx.format.TestDateFormat.ch = ((thx.culture.Culture) (__temp_stmt14) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt15 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl5 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ".", ".", ".", ",", ",", ",", "-", "+", "$", "NaN", "-Infinity", "%", "\u2030", "Infinity"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (0) )) ), ((double) (((double) (1) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl6 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "AM", "PM", "Sunday", "Gregorian", "Gregorian Calendar", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), "dddd, MMMM dd, yyyy", "M/d/yyyy", "dddd, MMMM dd, yyyy h:mm:ss tt", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "MMMM dd", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "h:mm:ss tt", "h:mm tt", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM, yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (0) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"en-US", __temp_odecl6, "en-US", false, false, "en", "eng", "Gregorian", "English", "English", "United States", "United States", __temp_odecl5, ",", "ENU"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1033) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt15 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 11 "/shared/format/test/thx/format/TestDateFormat.hx"
		thx.format.TestDateFormat.us = ((thx.culture.Culture) (__temp_stmt15) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt16 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl7 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", "\u00a0", "\u00a0", "\u00a0", "-", "+", "\u20bd", "NaN", "-\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c", "%", "\u2030", "\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (8) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (3) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl8 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "", "", "Monday", "Gregorian", "\u0433\u0440\u0438\u0433\u043e\u0440\u0438\u0430\u043d\u0441\u043a\u0438\u0439 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435", "\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a", "\u0432\u0442\u043e\u0440\u043d\u0438\u043a", "\u0441\u0440\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0435\u0440\u0433", "\u043f\u044f\u0442\u043d\u0438\u0446\u0430", "\u0441\u0443\u0431\u0431\u043e\u0442\u0430"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0412\u0441", "\u041f\u043d", "\u0412\u0442", "\u0421\u0440", "\u0427\u0442", "\u041f\u0442", "\u0421\u0431"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0412\u0441", "\u041f\u043d", "\u0412\u0442", "\u0421\u0440", "\u0427\u0442", "\u041f\u0442", "\u0421\u0431"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u044f\u043d\u0432\u0430\u0440\u044f", "\u0444\u0435\u0432\u0440\u0430\u043b\u044f", "\u043c\u0430\u0440\u0442\u0430", "\u0430\u043f\u0440\u0435\u043b\u044f", "\u043c\u0430\u044f", "\u0438\u044e\u043d\u044f", "\u0438\u044e\u043b\u044f", "\u0430\u0432\u0433\u0443\u0441\u0442\u0430", "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f", "\u043e\u043a\u0442\u044f\u0431\u0440\u044f", "\u043d\u043e\u044f\u0431\u0440\u044f", "\u0434\u0435\u043a\u0430\u0431\u0440\u044f", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u044f\u043d\u0432", "\u0444\u0435\u0432", "\u043c\u0430\u0440", "\u0430\u043f\u0440", "\u043c\u0430\u0439", "\u0438\u044e\u043d", "\u0438\u044e\u043b", "\u0430\u0432\u0433", "\u0441\u0435\u043d", "\u043e\u043a\u0442", "\u043d\u043e\u044f", "\u0434\u0435\u043a", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u042f\u043d\u0432\u0430\u0440\u044c", "\u0424\u0435\u0432\u0440\u0430\u043b\u044c", "\u041c\u0430\u0440\u0442", "\u0410\u043f\u0440\u0435\u043b\u044c", "\u041c\u0430\u0439", "\u0418\u044e\u043d\u044c", "\u0418\u044e\u043b\u044c", "\u0410\u0432\u0433\u0443\u0441\u0442", "\u0421\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u041e\u043a\u0442\u044f\u0431\u0440\u044c", "\u041d\u043e\u044f\u0431\u0440\u044c", "\u0414\u0435\u043a\u0430\u0431\u0440\u044c", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u044f\u043d\u0432", "\u0444\u0435\u0432", "\u043c\u0430\u0440", "\u0430\u043f\u0440", "\u043c\u0430\u0439", "\u0438\u044e\u043d", "\u0438\u044e\u043b", "\u0430\u0432\u0433", "\u0441\u0435\u043d", "\u043e\u043a\u0442", "\u043d\u043e\u044f", "\u0434\u0435\u043a", ""}), "d MMMM yyyy \'\u0433.\'", "dd.MM.yyyy", "d MMMM yyyy \'\u0433.\' H:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "MMMM dd", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "H:mm:ss", "H:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", ".", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"ru-RU", __temp_odecl8, "ru-RU", false, false, "ru", "rus", "Gregorian", "Russian", "\u0440\u0443\u0441\u0441\u043a\u0438\u0439", "Russia", "\u0420\u043e\u0441\u0441\u0438\u044f", __temp_odecl7, ";", "RUS"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1049) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt16 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 12 "/shared/format/test/thx/format/TestDateFormat.hx"
		thx.format.TestDateFormat.ru = ((thx.culture.Culture) (__temp_stmt16) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt17 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl9 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", "\u00a0", "\u00a0", "\u00a0", "-", "+", "\u20ac", "Non Num\u00e9rique", "-Infini", "%", "\u2030", "+Infini"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (8) )) ), ((double) (((double) (1) )) ), ((double) (((double) (0) )) ), ((double) (((double) (3) )) ), ((double) (((double) (0) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl10 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "", "", "Monday", "Gregorian", "calendrier gr\u00e9gorien", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"di", "lu", "ma", "me", "je", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janvier", "f\u00e9vrier", "mars", "avril", "mai", "juin", "juillet", "ao\u00fbt", "septembre", "octobre", "novembre", "d\u00e9cembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janv.", "f\u00e9vr.", "mars", "avr.", "mai", "juin", "juil.", "ao\u00fbt", "sept.", "oct.", "nov.", "d\u00e9c.", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janvier", "f\u00e9vrier", "mars", "avril", "mai", "juin", "juillet", "ao\u00fbt", "septembre", "octobre", "novembre", "d\u00e9cembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janv.", "f\u00e9vr.", "mars", "avr.", "mai", "juin", "juil.", "ao\u00fbt", "sept.", "oct.", "nov.", "d\u00e9c.", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "d MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"fr-FR", __temp_odecl10, "fr-FR", false, false, "fr", "fra", "Gregorian", "French", "fran\u00e7ais", "France", "France", __temp_odecl9, ";", "FRA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1036) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt17 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 13 "/shared/format/test/thx/format/TestDateFormat.hx"
		thx.format.TestDateFormat.fr = ((thx.culture.Culture) (__temp_stmt17) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt18 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl11 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ".", ".", ".", ",", ",", ",", "-", "+", "\u00a5", "NaN (\u975e\u6570\u5024)", "-\u221e", "%", "\u2030", "+\u221e"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (0) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl12 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "\u5348\u524d", "\u5348\u5f8c", "Sunday", "Gregorian", "\u897f\u66a6 (\u65e5\u672c\u8a9e)", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u65e5\u66dc\u65e5", "\u6708\u66dc\u65e5", "\u706b\u66dc\u65e5", "\u6c34\u66dc\u65e5", "\u6728\u66dc\u65e5", "\u91d1\u66dc\u65e5", "\u571f\u66dc\u65e5"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u65e5", "\u6708", "\u706b", "\u6c34", "\u6728", "\u91d1", "\u571f"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u65e5", "\u6708", "\u706b", "\u6c34", "\u6728", "\u91d1", "\u571f"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""}), "yyyy\'\u5e74\'M\'\u6708\'d\'\u65e5\'", "yyyy/MM/dd", "yyyy\'\u5e74\'M\'\u6708\'d\'\u65e5\' H:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "M\'\u6708\'d\'\u65e5\'", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "H:mm:ss", "H:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "yyyy\'\u5e74\'M\'\u6708\'", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (0) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"ja-JP", __temp_odecl12, "ja-JP", false, false, "ja", "jpn", "Gregorian", "Japanese", "\u65e5\u672c\u8a9e", "Japan", "\u65e5\u672c", __temp_odecl11, ",", "JPN"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1041) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt18 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 14 "/shared/format/test/thx/format/TestDateFormat.hx"
		thx.format.TestDateFormat.jp = ((thx.culture.Culture) (__temp_stmt18) );
		//line 15 "/shared/format/test/thx/format/TestDateFormat.hx"
		thx.format.TestDateFormat.d1 = thx._DateTime.DateTime_Impl_.fromString("2009-06-01 13:45:30-06:00");
		//line 16 "/shared/format/test/thx/format/TestDateFormat.hx"
		thx.format.TestDateFormat.d2 = thx._DateTime.DateTime_Impl_.fromString("2009-06-15 13:45:30-06:00");
	}
	
	public TestDateFormat(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestDateFormat(int i)
	{
		//line 18 "/shared/format/test/thx/format/TestDateFormat.hx"
		thx.format.TestDateFormat.__hx_ctor_thx_format_TestDateFormat(this, i);
	}
	
	
	public static void __hx_ctor_thx_format_TestDateFormat(thx.format.TestDateFormat __temp_me139, int i)
	{
		//line 19 "/shared/format/test/thx/format/TestDateFormat.hx"
		__temp_me139.x = i;
	}
	
	
	public static thx.culture.Culture it;
	
	public static thx.culture.Culture ch;
	
	public static thx.culture.Culture us;
	
	public static thx.culture.Culture ru;
	
	public static thx.culture.Culture fr;
	
	public static thx.culture.Culture jp;
	
	public static haxe.root.Array<java.lang.Object> d1;
	
	public static haxe.root.Array<java.lang.Object> d2;
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
		return new thx.format.TestDateFormat(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
		return new thx.format.TestDateFormat(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testFormatU()
	{
		//line 23 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 23 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 23 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 23 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 24 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("Monday, 01 June 2009 13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "U", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatU"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
			//line 25 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("luned\u00ec 1 giugno 2009 13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "U", thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatU"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
			//line 26 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("luned\u00ec, 1. giugno 2009 13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "U", thx.format.TestDateFormat.ch), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatU"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
			//line 27 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("Monday, June 01, 2009 1:45:30 PM", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "U", thx.format.TestDateFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatU"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
			//line 28 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("1 \u0418\u044e\u043d\u044c 2009 \u0433. 13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "U", thx.format.TestDateFormat.ru), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatU"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
			//line 29 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("lundi 1 juin 2009 13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "U", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatU"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
			//line 30 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009\u5e746\u67081\u65e5 13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "U", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatU"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
			//line 32 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("luned\u00ec 1 giugno 2009 13:45:30", thx.format.DateFormat.dateTimeFull(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatU"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
		}
		
	}
	
	
	public void testFormatd_()
	{
		//line 36 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 36 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 36 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 36 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 37 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("06/01/2009", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "d", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatd_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
			//line 38 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("6/1/2009", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "d", thx.format.TestDateFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatd_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (38) )) )}));
			//line 39 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("01/06/2009", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "d", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatd_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (39) )) )}));
			//line 40 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009/06/01", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "d", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatd_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
			//line 42 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("01/06/2009", thx.format.DateFormat.dateShort(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatd_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
		}
		
	}
	
	
	public void testFormatD()
	{
		//line 46 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 46 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 46 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 46 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 47 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("Monday, 01 June 2009", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "D", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatD"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
			//line 48 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("Monday, June 01, 2009", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "D", thx.format.TestDateFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatD"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (48) )) )}));
			//line 49 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("lundi 1 juin 2009", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "D", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatD"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
			//line 50 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009\u5e746\u67081\u65e5", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "D", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatD"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (50) )) )}));
			//line 52 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("luned\u00ec 1 giugno 2009", thx.format.DateFormat.dateLong(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatD"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
		}
		
	}
	
	
	public void testFormatM()
	{
		//line 56 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 56 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 56 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 56 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 57 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("June 01", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "M", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
			//line 58 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("June 01", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "M", thx.format.TestDateFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
			//line 59 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("1 juin", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "M", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (59) )) )}));
			//line 60 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("6\u67081\u65e5", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "M", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (60) )) )}));
			//line 62 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("01 giugno", thx.format.DateFormat.monthDay(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (62) )) )}));
		}
		
	}
	
	
	public void testFormatR()
	{
		//line 66 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 66 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 66 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 66 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 67 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("Mon, 01 Jun 2009 19:45:30 GMT", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "R", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatR"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (67) )) )}));
			//line 68 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("Mon, 01 Jun 2009 19:45:30 GMT", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "R", thx.format.TestDateFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatR"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (68) )) )}));
			//line 69 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("lun., 01 juin 2009 19:45:30 GMT", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "R", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatR"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (69) )) )}));
			//line 70 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("\u6708, 01 6 2009 19:45:30 GMT", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "R", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatR"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (70) )) )}));
			//line 71 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("lun, 01 giu 2009 19:45:30 GMT", thx.format.DateFormat.rfc1123(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatR"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (71) )) )}));
		}
		
	}
	
	
	public void testFormats()
	{
		//line 75 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 75 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 75 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 75 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 76 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01T13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "s", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (76) )) )}));
			//line 77 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01T13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "s", thx.format.TestDateFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )}));
			//line 78 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01T13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "s", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
			//line 79 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01T13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "s", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
			//line 81 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01T13:45:30", thx.format.DateFormat.dateTimeSortable(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormats"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
		}
		
	}
	
	
	public void testFormatt_()
	{
		//line 85 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 85 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 85 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 85 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 86 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("13:45", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "t", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatt_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (86) )) )}));
			//line 87 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("1:45 PM", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "t", thx.format.TestDateFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatt_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (87) )) )}));
			//line 88 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("13:45", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "t", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatt_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (88) )) )}));
			//line 89 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("13:45", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "t", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatt_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (89) )) )}));
			//line 91 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("13:45", thx.format.DateFormat.timeShort(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatt_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (91) )) )}));
		}
		
	}
	
	
	public void testFormatT()
	{
		//line 95 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 95 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 95 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 95 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 96 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "T", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatT"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (96) )) )}));
			//line 97 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("1:45:30 PM", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "T", thx.format.TestDateFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatT"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (97) )) )}));
			//line 98 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "T", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatT"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
			//line 99 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("13:45:30", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "T", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatT"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (99) )) )}));
			//line 101 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("13:45:30", thx.format.DateFormat.timeLong(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatT"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (101) )) )}));
		}
		
	}
	
	
	public void testFormatu_()
	{
		//line 105 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 105 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 105 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 105 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 106 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01 19:45:30Z", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "u", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatu_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (106) )) )}));
			//line 107 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01 19:45:30Z", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "u", thx.format.TestDateFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatu_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (107) )) )}));
			//line 108 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01 19:45:30Z", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "u", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatu_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (108) )) )}));
			//line 109 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01 19:45:30Z", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "u", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatu_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (109) )) )}));
			//line 110 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01 19:45:30Z", thx.format.DateFormat.universalSortable(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatu_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (110) )) )}));
		}
		
	}
	
	
	public void testFormatO()
	{
		//line 114 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 114 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 114 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 114 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 115 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01T13:45:30.0000000-06:00", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "O", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatO"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (115) )) )}));
			//line 116 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01T13:45:30.0000000-06:00", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "o", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatO"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (116) )) )}));
			//line 117 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01T13:45:30.0000000-06:00", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "O", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatO"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (117) )) )}));
			//line 118 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009-06-01T13:45:30.0000000-06:00", thx.format.DateFormat.iso8601(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormatO"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (118) )) )}));
		}
		
	}
	
	
	public void testFormaty()
	{
		//line 122 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 122 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 122 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 122 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 123 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009 June", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "y", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormaty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (123) )) )}));
			//line 124 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("June, 2009", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "y", thx.format.TestDateFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormaty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (124) )) )}));
			//line 125 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("juin 2009", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "y", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormaty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (125) )) )}));
			//line 126 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2009\u5e746\u6708", thx.format.DateFormat.format(thx.format.TestDateFormat.d1, "y", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormaty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (126) )) )}));
			//line 128 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("giugno 2009", thx.format.DateFormat.yearMonth(thx.format.TestDateFormat.d1, thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testFormaty"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (128) )) )}));
		}
		
	}
	
	
	public void testd()
	{
		//line 132 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 132 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 132 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 132 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 133 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("1", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "d", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (133) )) )}));
			//line 134 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("15", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d2, "d", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )}));
		}
		
	}
	
	
	public void testdd()
	{
		//line 138 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 138 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 138 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 138 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 139 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("01", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "dd", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (139) )) )}));
			//line 140 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("15", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d2, "dd", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testdd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (140) )) )}));
		}
		
	}
	
	
	public void testddd()
	{
		//line 144 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 144 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 144 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 144 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 145 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("Mon", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "ddd", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testddd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (145) )) )}));
			//line 146 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("lun.", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "ddd", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testddd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (146) )) )}));
			//line 147 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("lun", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "ddd", thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testddd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (147) )) )}));
			//line 148 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("\u041f\u043d", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "ddd", thx.format.TestDateFormat.ru), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testddd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (148) )) )}));
		}
		
	}
	
	
	public void testdddd()
	{
		//line 152 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 152 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 152 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 152 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 153 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("Monday", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "dddd", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testdddd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (153) )) )}));
			//line 154 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("lundi", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "dddd", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testdddd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (154) )) )}));
			//line 155 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("luned\u00ec", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "dddd", thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testdddd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (155) )) )}));
			//line 156 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "dddd", thx.format.TestDateFormat.ru), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testdddd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (156) )) )}));
		}
		
	}
	
	
	public void testh_()
	{
		//line 160 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 160 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 160 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 160 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 161 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("1", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "h", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testh_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (161) )) )}));
		}
		
	}
	
	
	public void testhh_()
	{
		//line 165 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 165 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 165 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 165 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 166 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("01", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "hh", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testhh_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (166) )) )}));
		}
		
	}
	
	
	public void testH()
	{
		//line 170 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 170 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 170 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 170 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 171 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("13", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "H", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testH"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (171) )) )}));
		}
		
	}
	
	
	public void testHH()
	{
		//line 175 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 175 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 175 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 175 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 176 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("13", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "HH", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testHH"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (176) )) )}));
		}
		
	}
	
	
	public void testm_()
	{
		//line 180 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 180 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 180 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 180 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 181 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("45", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "m", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testm_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (181) )) )}));
			//line 182 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("5", thx.format.DateFormat.formatTerm(thx._DateTime.DateTime_Impl_.fromString("2009-06-15 13:05:30"), "m", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testm_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (182) )) )}));
		}
		
	}
	
	
	public void testmm_()
	{
		//line 186 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 186 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 186 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 186 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 187 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("45", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "mm", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testmm_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (187) )) )}));
			//line 188 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("05", thx.format.DateFormat.formatTerm(thx._DateTime.DateTime_Impl_.fromString("2009-06-15 13:05:30"), "mm", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testmm_"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (188) )) )}));
		}
		
	}
	
	
	public void testM()
	{
		//line 192 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 192 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 192 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 192 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 193 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("6", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "M", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (193) )) )}));
		}
		
	}
	
	
	public void testMM()
	{
		//line 197 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 197 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 197 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 197 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 198 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("06", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "MM", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testMM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (198) )) )}));
		}
		
	}
	
	
	public void testMMM()
	{
		//line 202 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 202 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 202 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 202 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 203 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("Jun", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "MMM", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testMMM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (203) )) )}));
			//line 204 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("juin", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "MMM", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testMMM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (204) )) )}));
			//line 205 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("giu", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "MMM", thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testMMM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (205) )) )}));
			//line 206 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("\u0438\u044e\u043d", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "MMM", thx.format.TestDateFormat.ru), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testMMM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (206) )) )}));
		}
		
	}
	
	
	public void testMMMM()
	{
		//line 210 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 210 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 210 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 210 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 211 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("June", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "MMMM", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testMMMM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (211) )) )}));
			//line 212 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("juin", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "MMMM", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testMMMM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (212) )) )}));
			//line 213 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("giugno", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "MMMM", thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testMMMM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (213) )) )}));
			//line 214 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("\u0418\u044e\u043d\u044c", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "MMMM", thx.format.TestDateFormat.ru), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testMMMM"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (214) )) )}));
		}
		
	}
	
	
	public void tests()
	{
		//line 218 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 218 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 218 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 218 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 219 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("30", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "s", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "tests"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (219) )) )}));
			//line 220 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("3", thx.format.DateFormat.formatTerm(thx._DateTime.DateTime_Impl_.fromString("2009-06-15 13:05:03"), "s", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "tests"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (220) )) )}));
		}
		
	}
	
	
	public void testss()
	{
		//line 224 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 224 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 224 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 224 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 225 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("30", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "ss", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testss"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (225) )) )}));
			//line 226 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("03", thx.format.DateFormat.formatTerm(thx._DateTime.DateTime_Impl_.fromString("2009-06-15 13:05:03"), "ss", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testss"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (226) )) )}));
		}
		
	}
	
	
	public void testtt()
	{
		//line 230 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 230 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 230 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 230 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 231 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("PM", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "tt", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testtt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (231) )) )}));
			//line 232 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "tt", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testtt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (232) )) )}));
			//line 233 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "tt", thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testtt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (233) )) )}));
			//line 234 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("\u5348\u5f8c", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "tt", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testtt"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (234) )) )}));
		}
		
	}
	
	
	public void testy()
	{
		//line 238 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 238 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 238 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 238 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 239 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("72", thx.format.DateFormat.formatTerm(thx._DateTime.DateTime_Impl_.fromString("1972-06-15 13:05:03"), "y", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (239) )) )}));
		}
		
	}
	
	
	public void testyy()
	{
		//line 243 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 243 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 243 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 243 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 244 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("09", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "yy", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testyy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (244) )) )}));
			//line 245 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("72", thx.format.DateFormat.formatTerm(thx._DateTime.DateTime_Impl_.fromString("1972-06-15 13:05:03"), "yy", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testyy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (245) )) )}));
		}
		
	}
	
	
	public void testyyyy()
	{
		//line 249 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 249 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 249 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 249 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 250 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("1980", thx.format.DateFormat.formatTerm(thx._DateTime.DateTime_Impl_.fromString("1980-06-15 13:05:03"), "yyyy", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testyyyy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (250) )) )}));
			//line 251 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("2019", thx.format.DateFormat.formatTerm(thx._DateTime.DateTime_Impl_.fromString("2019-06-15 13:05:03"), "yyyy", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testyyyy"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (251) )) )}));
		}
		
	}
	
	
	public void testTimeSeprator()
	{
		//line 255 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 255 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 255 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 255 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 256 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals(":", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, ":", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testTimeSeprator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (256) )) )}));
			//line 257 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals(":", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, ":", thx.format.TestDateFormat.fr), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testTimeSeprator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (257) )) )}));
			//line 258 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals(":", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, ":", thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testTimeSeprator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (258) )) )}));
			//line 259 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals(":", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, ":", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testTimeSeprator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (259) )) )}));
		}
		
	}
	
	
	public void testDateSeprator()
	{
		//line 263 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g1 = 0;
		//line 263 "/shared/format/test/thx/format/TestDateFormat.hx"
		int _g = this.x;
		//line 263 "/shared/format/test/thx/format/TestDateFormat.hx"
		while (( _g1 < _g ))
		{
			//line 263 "/shared/format/test/thx/format/TestDateFormat.hx"
			 ++ _g1;
			//line 264 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("/", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "/", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testDateSeprator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (264) )) )}));
			//line 265 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals(".", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "/", thx.format.TestDateFormat.ch), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testDateSeprator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (265) )) )}));
			//line 266 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("/", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "/", thx.format.TestDateFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testDateSeprator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (266) )) )}));
			//line 267 "/shared/format/test/thx/format/TestDateFormat.hx"
			utest.Assert.equals("/", thx.format.DateFormat.formatTerm(thx.format.TestDateFormat.d1, "/", thx.format.TestDateFormat.jp), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDateFormat", "TestDateFormat.hx", "testDateSeprator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (267) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
		{
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("x")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.x = ((int) (value) );
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return value;
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
		{
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("x")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return value;
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
		{
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			switch (field.hashCode())
			{
				case 741520042:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testDateSeprator")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDateSeprator")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 120:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("x")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return this.x;
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1603238199:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testTimeSeprator")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTimeSeprator")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042548:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatU")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatU")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1145667118:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testyyyy")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testyyyy")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 1188419940:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatd_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatd_")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877168846:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testyy")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testyy")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042565:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatD")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatD")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 110251559:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testy")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testy")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042556:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatM")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatM")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877169006:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testtt")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testtt")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042551:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatR")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatR")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877169038:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testss")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testss")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042518:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormats")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormats")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 110251553:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("tests")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "tests")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 1188420436:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatt_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatt_")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1147021614:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testMMMM")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMMMM")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042549:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatT")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatT")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1422474021:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testMMM")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMMM")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 1188420467:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatu_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatu_")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877170254:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testMM")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMM")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042554:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatO")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatO")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 110251515:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testM")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testM")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042512:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormaty")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormaty")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1422442259:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testmm_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testmm_")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 110251538:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testd")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testd")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877169244:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testm_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testm_")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877169518:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testdd")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testdd")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877170414:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testHH")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testHH")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1422451182:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testddd")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testddd")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 110251510:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testH")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testH")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1146313582:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testdddd")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testdddd")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1422447219:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testhh_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testhh_")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877169399:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testh_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testh_")) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
		{
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("x")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						return ((double) (this.x) );
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
		{
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			switch (field.hashCode())
			{
				case 741520042:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testDateSeprator")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testDateSeprator();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042548:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatU")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormatU();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1603238199:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testTimeSeprator")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testTimeSeprator();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 1188419940:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatd_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormatd_();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1145667118:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testyyyy")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testyyyy();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042565:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatD")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormatD();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877168846:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testyy")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testyy();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042556:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatM")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormatM();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 110251559:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testy")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testy();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042551:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatR")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormatR();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877169006:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testtt")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testtt();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042518:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormats")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormats();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877169038:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testss")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testss();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 1188420436:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatt_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormatt_();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 110251553:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("tests")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.tests();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042549:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatT")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormatT();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1147021614:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testMMMM")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testMMMM();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 1188420467:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatu_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormatu_();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1422474021:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testMMM")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testMMM();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042554:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormatO")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormatO();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877170254:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testMM")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testMM();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1070042512:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testFormaty")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testFormaty();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 110251515:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testM")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testM();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 110251538:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testd")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testd();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1422442259:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testmm_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testmm_();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877169518:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testdd")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testdd();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877169244:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testm_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testm_();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1422451182:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testddd")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testddd();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877170414:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testHH")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testHH();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1146313582:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testdddd")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testdddd();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case 110251510:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testH")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testH();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -877169399:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testh_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testh_();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
				case -1422447219:
				{
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					if (field.equals("testhh_")) 
					{
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
						this.testhh_();
					}
					
					//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
		baseArr.push("x");
		//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
		{
			//line 8 "/shared/format/test/thx/format/TestDateFormat.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


