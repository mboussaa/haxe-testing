// Generated by Haxe 3.3.0
package thx.format;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestFormat extends haxe.lang.HxObject
{
	static
	{
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt3 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl1 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", ".", ".", ".", "-", "+", "\u20ac", "Non un numero reale", "-Infinito", "%", "\u2030", "+Infinito"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (9) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl2 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "", "", "Monday", "Gregorian", "calendario gregoriano", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it-IT", __temp_odecl2, "it-IT", false, false, "it", "ita", "Gregorian", "Italian", "italiano", "Italy", "Italia", __temp_odecl1, ";", "ITA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1040) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt3 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 10 "/shared/format/test/thx/format/TestFormat.hx"
		thx.format.TestFormat.it = ((thx.culture.Culture) (__temp_stmt3) );
	}
	
	public TestFormat(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestFormat(int i)
	{
		//line 13 "/shared/format/test/thx/format/TestFormat.hx"
		thx.format.TestFormat.__hx_ctor_thx_format_TestFormat(this, i);
	}
	
	
	public static void __hx_ctor_thx_format_TestFormat(thx.format.TestFormat __temp_me147, int i)
	{
		//line 14 "/shared/format/test/thx/format/TestFormat.hx"
		__temp_me147.x = i;
	}
	
	
	public static thx.culture.Culture it;
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 9 "/shared/format/test/thx/format/TestFormat.hx"
		return new thx.format.TestFormat(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 9 "/shared/format/test/thx/format/TestFormat.hx"
		return new thx.format.TestFormat(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testF()
	{
		//line 18 "/shared/format/test/thx/format/TestFormat.hx"
		int _g1 = 0;
		//line 18 "/shared/format/test/thx/format/TestFormat.hx"
		int _g = this.x;
		//line 18 "/shared/format/test/thx/format/TestFormat.hx"
		while (( _g1 < _g ))
		{
			//line 18 "/shared/format/test/thx/format/TestFormat.hx"
			 ++ _g1;
			//line 19 "/shared/format/test/thx/format/TestFormat.hx"
			haxe.root.Array<java.lang.Object> date = thx._DateTime.DateTime_Impl_.fromString("2014-01-01");
			//line 20 "/shared/format/test/thx/format/TestFormat.hx"
			utest.Assert.equals("Wednesday, 01 January 2014", thx.format.DateFormat.format(date, "D", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestFormat", "TestFormat.hx", "testF"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (20) )) )}));
			//line 21 "/shared/format/test/thx/format/TestFormat.hx"
			utest.Assert.equals("Wednesday, 01 January 2014", thx.format.DateFormat.format(thx._DateTime.DateTime_Impl_.fromString("2014-01-01"), "D", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestFormat", "TestFormat.hx", "testF"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
			//line 22 "/shared/format/test/thx/format/TestFormat.hx"
			utest.Assert.equals("1,000.00", thx.format.NumberFormat.format(((double) (1000) ), "n", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestFormat", "TestFormat.hx", "testF"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
			//line 24 "/shared/format/test/thx/format/TestFormat.hx"
			utest.Assert.equals("mercoled\u00ec 1 gennaio 2014", thx.format.DateFormat.format(thx._DateTime.DateTime_Impl_.fromString("2014-01-01"), "D", thx.format.TestFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestFormat", "TestFormat.hx", "testF"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
			//line 25 "/shared/format/test/thx/format/TestFormat.hx"
			utest.Assert.equals("1.000,00", thx.format.NumberFormat.format(((double) (1000) ), "n", thx.format.TestFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestFormat", "TestFormat.hx", "testF"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 9 "/shared/format/test/thx/format/TestFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						this.x = ((int) (value) );
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						return value;
					}
					
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestFormat.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 9 "/shared/format/test/thx/format/TestFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 9 "/shared/format/test/thx/format/TestFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						return value;
					}
					
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestFormat.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 9 "/shared/format/test/thx/format/TestFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 9 "/shared/format/test/thx/format/TestFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			switch (field.hashCode())
			{
				case 110251508:
				{
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					if (field.equals("testF")) 
					{
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testF")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					break;
				}
				
				
				case 120:
				{
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						return this.x;
					}
					
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestFormat.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 9 "/shared/format/test/thx/format/TestFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 9 "/shared/format/test/thx/format/TestFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						return ((double) (this.x) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestFormat.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 9 "/shared/format/test/thx/format/TestFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 9 "/shared/format/test/thx/format/TestFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			switch (field.hashCode())
			{
				case 110251508:
				{
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					if (field.equals("testF")) 
					{
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestFormat.hx"
						this.testF();
					}
					
					//line 9 "/shared/format/test/thx/format/TestFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestFormat.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 9 "/shared/format/test/thx/format/TestFormat.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 9 "/shared/format/test/thx/format/TestFormat.hx"
		baseArr.push("x");
		//line 9 "/shared/format/test/thx/format/TestFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestFormat.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


