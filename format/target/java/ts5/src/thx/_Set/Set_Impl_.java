// Generated by Haxe 3.3.0
package thx._Set;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class Set_Impl_
{
	public static haxe.ds.StringMap<java.lang.Object> createString(java.lang.Object it)
	{
		//line 13 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.ds.StringMap<java.lang.Object> map = new haxe.ds.StringMap<java.lang.Object>();
		//line 14 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.ds.StringMap<java.lang.Object> set = ((haxe.ds.StringMap<java.lang.Object>) (map) );
		//line 15 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		if (( ! (( null == it )) )) 
		{
			//line 16 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			thx._Set.Set_Impl_.pushMany(((haxe.IMap<java.lang.String, java.lang.Object>) (set) ), ((java.lang.Object) (it) ));
		}
		
		//line 17 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return set;
	}
	
	
	public static haxe.ds.IntMap<java.lang.Object> createInt(java.lang.Object it)
	{
		//line 24 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.ds.IntMap<java.lang.Object> map = new haxe.ds.IntMap<java.lang.Object>();
		//line 25 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.ds.IntMap<java.lang.Object> set = ((haxe.ds.IntMap<java.lang.Object>) (map) );
		//line 26 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		if (( ! (( null == it )) )) 
		{
			//line 27 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			thx._Set.Set_Impl_.pushMany(((haxe.IMap<java.lang.Object, java.lang.Object>) (((haxe.IMap) (set) )) ), ((java.lang.Object) (it) ));
		}
		
		//line 28 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return set;
	}
	
	
	public static haxe.ds.ObjectMap<java.lang.Object, java.lang.Object> createObject(java.lang.Object it)
	{
		//line 35 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.ds.ObjectMap<java.lang.Object, java.lang.Object> map = new haxe.ds.ObjectMap<java.lang.Object, java.lang.Object>();
		//line 36 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.ds.ObjectMap<java.lang.Object, java.lang.Object> set = ((haxe.ds.ObjectMap<java.lang.Object, java.lang.Object>) (map) );
		//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		if (( ! (( null == it )) )) 
		{
			//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			thx._Set.Set_Impl_.pushMany(((haxe.IMap<java.lang.Object, java.lang.Object>) (set) ), ((java.lang.Object) (it) ));
		}
		
		//line 39 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return set;
	}
	
	
	public static haxe.ds.EnumValueMap createEnum(java.lang.Object arr)
	{
		//line 46 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.ds.EnumValueMap map = new haxe.ds.EnumValueMap();
		//line 47 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.ds.EnumValueMap set = ((haxe.ds.EnumValueMap) (map) );
		//line 48 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		if (( ! (( null == arr )) )) 
		{
			//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			thx._Set.Set_Impl_.pushMany(((haxe.IMap) (set) ), ((java.lang.Object) (arr) ));
		}
		
		//line 50 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return set;
	}
	
	
	
	
	public static <T> haxe.IMap<T, java.lang.Object> _new(haxe.IMap<T, java.lang.Object> map)
	{
		//line 55 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return ((haxe.IMap<T, java.lang.Object>) (map) );
	}
	
	
	public static <T> boolean add(haxe.IMap<T, java.lang.Object> this1, T v)
	{
		//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		if (this1.exists(v)) 
		{
			//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			return false;
		}
		else
		{
			//line 67 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			this1.set(v, true);
			//line 64 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			return true;
		}
		
	}
	
	
	public static <T> haxe.IMap<T, java.lang.Object> copy(haxe.IMap<T, java.lang.Object> this1)
	{
		//line 75 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.IMap<T, java.lang.Object> inst = ((haxe.IMap<T, java.lang.Object>) (thx._Set.Set_Impl_.empty(((haxe.IMap<T, java.lang.Object>) (this1) ))) );
		//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		{
			//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			java.lang.Object tmp = this1.keys();
			//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				T k = ((T) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 77 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				((haxe.IMap<T, java.lang.Object>) (inst) ).set(k, true);
			}
			
		}
		
		//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return inst;
	}
	
	
	public static <T> haxe.IMap<T, java.lang.Object> empty(haxe.IMap<T, java.lang.Object> this1)
	{
		//line 85 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.IMap<T, java.lang.Object> inst = ((haxe.IMap<T, java.lang.Object>) (haxe.root.Type.createInstance(((java.lang.Class) (haxe.root.Type.getClass(((haxe.IMap<T, java.lang.Object>) (this1) ))) ), ((haxe.root.Array) (new haxe.root.Array(new java.lang.Object[]{})) ))) );
		//line 86 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return ((haxe.IMap<T, java.lang.Object>) (inst) );
	}
	
	
	public static <T> haxe.IMap<T, java.lang.Object> difference(haxe.IMap<T, java.lang.Object> this1, haxe.IMap<T, java.lang.Object> set)
	{
		//line 94 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.IMap<T, java.lang.Object> result = ((haxe.IMap<T, java.lang.Object>) (thx._Set.Set_Impl_.copy(((haxe.IMap<T, java.lang.Object>) (this1) ))) );
		//line 95 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		{
			//line 95 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			java.lang.Object tmp = ((java.lang.Object) (thx._Set.Set_Impl_.iterator(((haxe.IMap<T, java.lang.Object>) (set) ))) );
			//line 95 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 95 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				T item = ((T) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 96 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				((haxe.IMap<T, java.lang.Object>) (result) ).remove(item);
			}
			
		}
		
		//line 97 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return result;
	}
	
	
	public static <T> haxe.IMap<T, java.lang.Object> filter(haxe.IMap<T, java.lang.Object> this1, haxe.lang.Function predicate)
	{
		//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.IMap<T, java.lang.Object> tmp = ((haxe.IMap<T, java.lang.Object>) (thx._Set.Set_Impl_.empty(((haxe.IMap<T, java.lang.Object>) (this1) ))) );
		//line 101 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return ((haxe.IMap<T, java.lang.Object>) (thx._Set.Set_Impl_.reduce(((haxe.IMap<T, java.lang.Object>) (this1) ), ((haxe.lang.Function) (new thx._Set.Set_Impl__filter_101__Fun<T>(predicate)) ), ((java.lang.Object) (tmp) ))) );
	}
	
	
	public static <TOut, T> haxe.root.Array<TOut> map(haxe.IMap<T, java.lang.Object> this1, haxe.lang.Function f)
	{
		//line 108 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return ((haxe.root.Array<TOut>) (thx._Set.Set_Impl_.reduce(((haxe.IMap<T, java.lang.Object>) (this1) ), ((haxe.lang.Function) (new thx._Set.Set_Impl__map_108__Fun<T, TOut>(f)) ), ((java.lang.Object) (new haxe.root.Array<TOut>(( (TOut[]) (new java.lang.Object[] {}) ))) ))) );
	}
	
	
	public static <T> boolean exists(haxe.IMap<T, java.lang.Object> this1, T v)
	{
		//line 117 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return this1.exists(v);
	}
	
	
	public static <T> boolean remove(haxe.IMap<T, java.lang.Object> this1, T v)
	{
		//line 120 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return this1.remove(v);
	}
	
	
	public static <T> haxe.IMap<T, java.lang.Object> intersection(haxe.IMap<T, java.lang.Object> this1, haxe.IMap<T, java.lang.Object> set)
	{
		//line 126 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.IMap<T, java.lang.Object> result = ((haxe.IMap<T, java.lang.Object>) (thx._Set.Set_Impl_.empty(((haxe.IMap<T, java.lang.Object>) (this1) ))) );
		//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		{
			//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			java.lang.Object tmp = ((java.lang.Object) (thx._Set.Set_Impl_.iterator(((haxe.IMap<T, java.lang.Object>) (this1) ))) );
			//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				T item = ((T) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 128 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				if (((haxe.IMap<T, java.lang.Object>) (set) ).exists(item)) 
				{
					//line 129 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
					((haxe.IMap<T, java.lang.Object>) (result) ).set(item, true);
				}
				
			}
			
		}
		
		//line 130 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return result;
	}
	
	
	public static <T> void push(haxe.IMap<T, java.lang.Object> this1, T v)
	{
		//line 137 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		this1.set(v, true);
	}
	
	
	public static <T> void pushMany(haxe.IMap<T, java.lang.Object> this1, java.lang.Object values)
	{
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(values, "iterator", null)) );
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
		{
			//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			T value = ((T) (haxe.lang.Runtime.callField(tmp, "next", null)) );
			//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			((haxe.IMap<T, java.lang.Object>) (this1) ).set(value, true);
		}
		
	}
	
	
	public static <TOut, T> TOut reduce(haxe.IMap<T, java.lang.Object> this1, haxe.lang.Function handler, TOut acc)
	{
		//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		{
			//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			java.lang.Object tmp = ((java.lang.Object) (thx._Set.Set_Impl_.iterator(((haxe.IMap<T, java.lang.Object>) (this1) ))) );
			//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 147 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				T v = ((T) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 148 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				acc = ((TOut) (handler.__hx_invoke2_o(0.0, acc, 0.0, v)) );
			}
			
		}
		
		//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return acc;
	}
	
	
	public static <T> java.lang.Object iterator(haxe.IMap<T, java.lang.Object> this1)
	{
		//line 157 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return this1.keys();
	}
	
	
	public static <T> haxe.IMap<T, java.lang.Object> union(haxe.IMap<T, java.lang.Object> this1, haxe.IMap<T, java.lang.Object> set)
	{
		//line 163 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.IMap<T, java.lang.Object> newset = ((haxe.IMap<T, java.lang.Object>) (thx._Set.Set_Impl_.copy(((haxe.IMap<T, java.lang.Object>) (this1) ))) );
		//line 164 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		thx._Set.Set_Impl_.pushMany(((haxe.IMap<T, java.lang.Object>) (newset) ), ((haxe.root.Array<T>) (thx._Set.Set_Impl_.toArray(((haxe.IMap<T, java.lang.Object>) (set) ))) ));
		//line 165 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return newset;
	}
	
	
	public static <T> haxe.root.Array<T> toArray(haxe.IMap<T, java.lang.Object> this1)
	{
		//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		haxe.root.Array<T> arr = new haxe.root.Array<T>(( (T[]) (new java.lang.Object[] {}) ));
		//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		{
			//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			java.lang.Object tmp = this1.keys();
			//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 175 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				T k = ((T) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 176 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				arr.push(k);
			}
			
		}
		
		//line 177 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return arr;
	}
	
	
	public static <T> java.lang.String toString(haxe.IMap<T, java.lang.Object> this1)
	{
		//line 185 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return ( ( "{" + ((haxe.root.Array<T>) (thx._Set.Set_Impl_.toArray(((haxe.IMap<T, java.lang.Object>) (this1) ))) ).join(", ") ) + "}" );
	}
	
	
	public static <T> int get_length(haxe.IMap<T, java.lang.Object> this1)
	{
		//line 188 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		int l = 0;
		//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		{
			//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			java.lang.Object tmp = this1.iterator();
			//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 189 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				haxe.lang.Runtime.callField(tmp, "next", null);
				//line 190 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
				 ++ l;
			}
			
		}
		
		//line 191 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Set.hx"
		return l;
	}
	
	
}


