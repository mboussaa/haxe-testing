// Generated by Haxe 3.3.0
package thx.format;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestDecimalFormat extends haxe.lang.HxObject
{
	static
	{
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt9 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl1 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", ".", ".", ".", "-", "+", "\u20ac", "Non un numero reale", "-Infinito", "%", "\u2030", "+Infinito"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (9) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl2 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "", "", "Monday", "Gregorian", "calendario gregoriano", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it-IT", __temp_odecl2, "it-IT", false, false, "it", "ita", "Gregorian", "Italian", "italiano", "Italy", "Italia", __temp_odecl1, ";", "ITA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1040) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt9 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 10 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		thx.format.TestDecimalFormat.it = ((thx.culture.Culture) (__temp_stmt9) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt10 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl3 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ".", ".", ".", ",", ",", ",", "-", "+", "$", "NaN", "-Infinity", "%", "\u2030", "Infinity"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (0) )) ), ((double) (((double) (1) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl4 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "AM", "PM", "Sunday", "Gregorian", "Gregorian Calendar", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), "dddd, MMMM dd, yyyy", "M/d/yyyy", "dddd, MMMM dd, yyyy h:mm:ss tt", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "MMMM dd", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "h:mm:ss tt", "h:mm tt", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM, yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (0) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"en-US", __temp_odecl4, "en-US", false, false, "en", "eng", "Gregorian", "English", "English", "United States", "United States", __temp_odecl3, ",", "ENU"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1033) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt10 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 11 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		thx.format.TestDecimalFormat.us = ((thx.culture.Culture) (__temp_stmt10) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt11 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl5 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 2}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 2}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 2}), ".", ".", ".", ",", ",", ",", "-", "+", "\u20b9", "nan", "-infinity", "%", "\u2030", "infinity"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (12) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl6 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "\u09f0\u09be\u09a4\u09bf\u09aa\u09c1", "\u0986\u09ac\u09c7\u09b2\u09bf", "Monday", "Gregorian", "\u0987\u0982\u09f0\u09be\u099c\u09c0 \u0995\u09c7\u09b2\u09c7\u09a3\u09cd\u09a1\u09be\u09f0", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u09b8\u09cb\u09ae\u09ac\u09be\u09f0", "\u09ae\u0999\u09cd\u0997\u09b2\u09ac\u09be\u09f0", "\u09ac\u09c1\u09a7\u09ac\u09be\u09f0", "\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf\u09ac\u09be\u09f0", "\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09f0", "\u09b6\u09a8\u09bf\u09ac\u09be\u09f0", "\u09f0\u09ac\u09bf\u09ac\u09be\u09f0"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u09b8\u09cb\u09ae.", "\u09ae\u0999\u09cd\u0997\u09b2.", "\u09ac\u09c1\u09a7.", "\u09ac\u09c3\u09b9.", "\u09b6\u09c1\u0995\u09cd\u09b0.", "\u09b6\u09a8\u09bf.", "\u09f0\u09ac\u09bf."}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u09b8\u09cb", "\u09ae", "\u09ac\u09c1", "\u09ac\u09c3", "\u09b6\u09c1", "\u09b6", "\u09b0"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u099c\u09be\u09a8\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0", "\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0", "\u09a8\u09ac\u09c7\u09ae\u09cd\u09ac\u09b0", "\u09a1\u09bf\u099a\u09c7\u09ae\u09cd\u09ac\u09b0", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u099c\u09be\u09a8\u09c1", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7", "\u0985\u0995\u09cd\u099f\u09cb", "\u09a8\u09ac\u09c7", "\u09a1\u09bf\u099a\u09c7", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u099c\u09be\u09a8\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09f1\u09be\u09f0\u09c0", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0", "\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0", "\u09a8\u09ac\u09c7\u09ae\u09cd\u09ac\u09b0", "\u09a1\u09bf\u099a\u09c7\u09ae\u09cd\u09ac\u09b0", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u099c\u09be\u09a8\u09c1", "\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1", "\u09ae\u09be\u09b0\u09cd\u099a", "\u098f\u09aa\u09cd\u09b0\u09bf\u09b2", "\u09ae\u09c7", "\u099c\u09c1\u09a8", "\u099c\u09c1\u09b2\u09be\u0987", "\u0986\u0997\u09b7\u09cd\u099f", "\u099a\u09c7\u09aa\u09cd\u099f\u09c7", "\u0985\u0995\u09cd\u099f\u09cb", "\u09a8\u09ac\u09c7", "\u09a1\u09bf\u099a\u09c7", ""}), "yyyy,MMMM dd, dddd", "dd-MM-yyyy", "yyyy,MMMM dd, dddd tt h:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "tt h:mm:ss", "tt h:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM,yy", "-", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"as-IN", __temp_odecl6, "as-IN", false, false, "as", "asm", "Gregorian", "Assamese", "\u0985\u09b8\u09ae\u09c0\u09df\u09be", "India", "\u09ad\u09be\u09f0\u09a4", __temp_odecl5, ",", "ASM"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1101) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt11 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 12 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		thx.format.TestDecimalFormat.asIn = ((thx.culture.Culture) (__temp_stmt11) );
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		java.lang.Object __temp_stmt12 = null;
		//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
		{
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl7 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 0}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 0}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3, 0}), ",", ",", ",", "\u00a0", "\u00a0", "\u00a0", "-", "+", "\u20bd", "NaN", "-\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c", "%", "\u2030", "\u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (8) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (3) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl8 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "", "", "Monday", "Gregorian", "\u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044b", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0419\u04d9\u043a\u0448\u04d9\u043c\u0431\u0435", "\u0414\u04af\u0448\u04d9\u043c\u0431\u0435", "\u0428\u0438\u0448\u04d9\u043c\u0431\u0435", "\u0428\u0430\u0440\u0448\u0430\u043c\u0431\u044b", "\u041a\u0435\u0441\u0430\u0499\u043d\u0430", "\u0419\u043e\u043c\u0430", "\u0428\u04d9\u043c\u0431\u0435"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0419\u0448", "\u0414\u0448", "\u0428\u0448", "\u0428\u0440", "\u041a\u0441", "\u0419\u043c", "\u0428\u0431"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0419\u0448", "\u0414\u0448", "\u0428\u0448", "\u0428\u0440", "\u041a\u0441", "\u0419\u043c", "\u0428\u0431"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0493\u0438\u043d\u0443\u0430\u0440", "\u0444\u0435\u0432\u0440\u0430\u043b\u044c", "\u043c\u0430\u0440\u0442", "\u0430\u043f\u0440\u0435\u043b\u044c", "\u043c\u0430\u0439", "\u0438\u044e\u043d\u044c", "\u0438\u044e\u043b\u044c", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u043e\u043a\u0442\u044f\u0431\u0440\u044c", "\u043d\u043e\u044f\u0431\u0440\u044c", "\u0434\u0435\u043a\u0430\u0431\u0440\u044c", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0493\u0438\u043d", "\u0444\u0435\u0432", "\u043c\u0430\u0440", "\u0430\u043f\u0440", "\u043c\u0430\u0439", "\u0438\u044e\u043d", "\u0438\u044e\u043b", "\u0430\u0432\u0433", "\u0441\u0435\u043d", "\u043e\u043a\u0442", "\u043d\u043e\u044f", "\u0434\u0435\u043a", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0493\u0438\u043d\u0443\u0430\u0440", "\u0444\u0435\u0432\u0440\u0430\u043b\u044c", "\u043c\u0430\u0440\u0442", "\u0430\u043f\u0440\u0435\u043b\u044c", "\u043c\u0430\u0439", "\u0438\u044e\u043d\u044c", "\u0438\u044e\u043b\u044c", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u043e\u043a\u0442\u044f\u0431\u0440\u044c", "\u043d\u043e\u044f\u0431\u0440\u044c", "\u0434\u0435\u043a\u0430\u0431\u0440\u044c", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"\u0493\u0438\u043d", "\u0444\u0435\u0432", "\u043c\u0430\u0440", "\u0430\u043f\u0440", "\u043c\u0430\u0439", "\u0438\u044e\u043d", "\u0438\u044e\u043b", "\u0430\u0432\u0433", "\u0441\u0435\u043d", "\u043e\u043a\u0442", "\u043d\u043e\u044f", "\u0434\u0435\u043a", ""}), "d MMMM yyyy \'\u0439\'", "dd.MM.yy", "d MMMM yyyy \'\u0439\' H:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "MMMM dd", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "H:mm:ss", "H:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", ".", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"ba-RU", __temp_odecl8, "ba-RU", false, false, "ba", "bak", "Gregorian", "Bashkir", "\u0411\u0430\u0448\u04a1\u043e\u0440\u0442", "Russia", "\u0420\u043e\u0441\u0441\u0438\u044f", __temp_odecl7, ";", "BAS"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1133) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			__temp_stmt12 = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
		}
		
		//line 13 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		thx.format.TestDecimalFormat.baRu = ((thx.culture.Culture) (__temp_stmt12) );
	}
	
	public TestDecimalFormat(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestDecimalFormat(int i)
	{
		//line 15 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		thx.format.TestDecimalFormat.__hx_ctor_thx_format_TestDecimalFormat(this, i);
	}
	
	
	public static void __hx_ctor_thx_format_TestDecimalFormat(thx.format.TestDecimalFormat __temp_me144, int i)
	{
		//line 16 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		__temp_me144.x = i;
	}
	
	
	public static thx.culture.Culture it;
	
	public static thx.culture.Culture us;
	
	public static thx.culture.Culture asIn;
	
	public static thx.culture.Culture baRu;
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		return new thx.format.TestDecimalFormat(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		return new thx.format.TestDecimalFormat(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testNumber()
	{
		//line 20 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 20 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 20 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 20 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 21 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.00", thx.format.DecimalFormat.number(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.0)) ), 2, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
			//line 22 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.2", thx.format.DecimalFormat.number(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.2)) ), 1, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
			//line 23 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1", thx.format.DecimalFormat.number(thx._Decimal.Decimal_Impl_.fromInt(1), 0, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
			//line 24 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("10,000", thx.format.DecimalFormat.number(thx._Decimal.Decimal_Impl_.fromInt(10000), 0, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
			//line 25 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("12,345.679", thx.format.DecimalFormat.number(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(12345.6789)) ), 3, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
			//line 27 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.00", thx.format.DecimalFormat.number(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1.0)) ), 2, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
			//line 28 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.2", thx.format.DecimalFormat.number(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1.2)) ), 1, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
			//line 29 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1", thx.format.DecimalFormat.number(thx._Decimal.Decimal_Impl_.fromInt(-1), 0, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
			//line 30 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-10,000", thx.format.DecimalFormat.number(thx._Decimal.Decimal_Impl_.fromInt(-10000), 0, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
			//line 31 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-12,345.679", thx.format.DecimalFormat.number(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-12345.6789)) ), 3, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
			//line 33 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl exp = ((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(2)) ).pow(50);
			//line 34 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,125,899,906,842,624.00", thx.format.DecimalFormat.number(exp, 2, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
			//line 36 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl exp1 = ((thx.bigint.DecimalImpl) (thx._Decimal.Decimal_Impl_.fromInt(2)) ).pow(-18);
			//line 37 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("0.000003814610", thx.format.DecimalFormat.number(exp1, 11, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testNumber"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (37) )) )}));
		}
		
	}
	
	
	public void testCurrency()
	{
		//line 41 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 41 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 41 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 41 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 42 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(\u00a412,345.68)", thx.format.DecimalFormat.currency(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-12345.6789)) ), null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCurrency"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
		}
		
	}
	
	
	public void testCurrencyIT()
	{
		//line 46 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 46 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 46 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 46 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 47 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-\u20ac 12.345,68", thx.format.DecimalFormat.currency(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-12345.6789)) ), null, null, thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCurrencyIT"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (47) )) )}));
		}
		
	}
	
	
	public void testCurrencyUS()
	{
		//line 51 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 51 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 51 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 51 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 52 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("($12,345.68)", thx.format.DecimalFormat.currency(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-12345.6789)) ), null, null, thx.format.TestDecimalFormat.us), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCurrencyUS"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (52) )) )}));
		}
		
	}
	
	
	public void testPercent()
	{
		//line 56 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 56 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 56 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 56 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 57 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("2.33 %", thx.format.DecimalFormat.percent(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.02333)) ), null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPercent"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (57) )) )}));
			//line 58 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("2,33%", thx.format.DecimalFormat.percent(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.02333)) ), null, thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPercent"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
		}
		
	}
	
	
	public void testPermille()
	{
		//line 62 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 62 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 62 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 62 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 63 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("23.33 \u2030", thx.format.DecimalFormat.permille(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.02333)) ), null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPermille"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (63) )) )}));
			//line 64 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("23,33\u2030", thx.format.DecimalFormat.permille(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.02333)) ), null, thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPermille"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (64) )) )}));
		}
		
	}
	
	
	public void testUnit()
	{
		//line 68 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 68 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 68 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 68 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 69 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("23.33 kg.", thx.format.DecimalFormat.unit(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(23.3333)) ), 2, "kg.", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testUnit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (69) )) )}));
			//line 70 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("23,33kg.", thx.format.DecimalFormat.unit(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(23.3333)) ), 2, "kg.", thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testUnit"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (70) )) )}));
		}
		
	}
	
	
	public void testDecimal()
	{
		//line 74 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 74 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 74 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 74 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 75 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("12", thx.format.DecimalFormat.format(thx._Decimal.Decimal_Impl_.fromInt(12), "d", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testDecimal"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (75) )) )}));
			//line 76 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("0012", thx.format.DecimalFormat.format(thx._Decimal.Decimal_Impl_.fromInt(12), "d4", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testDecimal"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (76) )) )}));
		}
		
	}
	
	
	public void testFormatFixed()
	{
		//line 80 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 80 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 80 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 80 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 81 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1234.57", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1234.5678)) ), "f", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testFormatFixed"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
			//line 82 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1234,57", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1234.5678)) ), "f", thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testFormatFixed"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
			//line 83 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1234.5678", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1234.5678)) ), "f4", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testFormatFixed"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (83) )) )}));
		}
		
	}
	
	
	public void testExponential()
	{
		//line 87 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 87 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 87 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 87 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 88 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.000000e+001", thx.format.DecimalFormat.exponential(thx._Decimal.Decimal_Impl_.fromInt(10), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (88) )) )}));
			//line 89 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.000000e+001", thx.format.DecimalFormat.exponential(thx._Decimal.Decimal_Impl_.fromInt(-10), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (89) )) )}));
			//line 90 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.000000e+000", thx.format.DecimalFormat.exponential(thx._Decimal.Decimal_Impl_.fromInt(1), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (90) )) )}));
			//line 91 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.000000e+000", thx.format.DecimalFormat.exponential(thx._Decimal.Decimal_Impl_.fromInt(-1), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (91) )) )}));
			//line 92 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("7.000000e-001", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.7)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (92) )) )}));
			//line 93 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-7.000000e-001", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-0.7)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (93) )) )}));
			//line 95 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.234000e+003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.234e3)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (95) )) )}));
			//line 96 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.234000e-003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.234e-003)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (96) )) )}));
			//line 97 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.234000e-003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.001234)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (97) )) )}));
			//line 98 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.234000e+003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1.234e3)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (98) )) )}));
			//line 99 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.234000e-003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1.234e-003)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (99) )) )}));
			//line 101 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.234000e+050", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.234e50)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (101) )) )}));
			//line 102 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.234000e-050", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.234e-50)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (102) )) )}));
			//line 103 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.234000e+050", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1.234e50)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (103) )) )}));
			//line 104 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.234000e-050", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1.234e-50)) ), null, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (104) )) )}));
			//line 106 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.23e+003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.234e3)) ), 2, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (106) )) )}));
			//line 107 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.23e-003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.234e-003)) ), 2, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (107) )) )}));
			//line 108 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.23e+003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1.234e3)) ), 2, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (108) )) )}));
			//line 109 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.23e-003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1.234e-003)) ), 2, null, null, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (109) )) )}));
			//line 111 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,23e+003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.234e3)) ), 2, null, null, thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (111) )) )}));
			//line 112 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,23e-003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.234e-003)) ), 2, null, null, thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (112) )) )}));
			//line 113 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1,23e+003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1.234e3)) ), 2, null, null, thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (113) )) )}));
			//line 114 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1,23e-003", thx.format.DecimalFormat.exponential(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1.234e-003)) ), 2, null, null, thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testExponential"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (114) )) )}));
		}
		
	}
	
	
	public void testPrintfd()
	{
		//line 118 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 118 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 118 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 118 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 119 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl n = thx._Decimal.Decimal_Impl_.fromInt(461012);
			//line 120 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("461012", thx.format.DecimalFormat.printf(n, "%d", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPrintfd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (120) )) )}));
			//line 121 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("00461012", thx.format.DecimalFormat.printf(n, "%08d", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPrintfd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (121) )) )}));
			//line 122 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals(" +461012", thx.format.DecimalFormat.printf(n, "%+8d", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPrintfd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (122) )) )}));
			//line 123 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("461012  ", thx.format.DecimalFormat.printf(n, "%-8d", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPrintfd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (123) )) )}));
			//line 124 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("+461012 ", thx.format.DecimalFormat.printf(n, "%-+8d", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPrintfd"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (124) )) )}));
		}
		
	}
	
	
	public void testPrintfb()
	{
		//line 128 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 128 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 128 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 128 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 129 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl n = thx._Decimal.Decimal_Impl_.fromInt(10);
			//line 130 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1010", thx.format.DecimalFormat.printf(n, "%b", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPrintfb"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (130) )) )}));
			//line 131 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("b1010", thx.format.DecimalFormat.printf(n, "%#b", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPrintfb"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (131) )) )}));
			//line 132 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("B1010", thx.format.DecimalFormat.printf(n, "%#B", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPrintfb"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (132) )) )}));
			//line 133 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("     B1010", thx.format.DecimalFormat.printf(n, "%#10B", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPrintfb"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (133) )) )}));
			//line 134 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("00000B1010", thx.format.DecimalFormat.printf(n, "%#010B", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testPrintfb"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (134) )) )}));
		}
		
	}
	
	
	public void testRounding()
	{
		//line 138 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 138 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 138 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 138 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 139 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("0.9", thx.format.DecimalFormat.fixed(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.89)) ), 1, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (139) )) )}));
			//line 140 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1", thx.format.DecimalFormat.fixed(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.99)) ), 0, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (140) )) )}));
			//line 141 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("0.9", thx.format.DecimalFormat.fixed(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.91)) ), 1, null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (141) )) )}));
		}
		
	}
	
	
	public void testDifferentGroups()
	{
		//line 145 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 145 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 145 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 145 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 146 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1234567890.123456)) );
			//line 147 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,23,45,67,890.12", thx.format.DecimalFormat.number(value, null, thx.format.TestDecimalFormat.asIn), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testDifferentGroups"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (147) )) )}));
			//line 148 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1234567\u00a0890,12", thx.format.DecimalFormat.number(value, null, thx.format.TestDecimalFormat.baRu), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testDifferentGroups"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (148) )) )}));
			//line 150 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,23,45,67,890.1", thx.format.DecimalFormat.format(value, "0,0000.0", thx.format.TestDecimalFormat.asIn), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testDifferentGroups"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (150) )) )}));
			//line 151 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1234567\u00a0890,1", thx.format.DecimalFormat.format(value, "0,0000.0", thx.format.TestDecimalFormat.baRu), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testDifferentGroups"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (151) )) )}));
		}
		
	}
	
	
	public void testCustomFormat0()
	{
		//line 155 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 155 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 155 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 155 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 156 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl value = thx._Decimal.Decimal_Impl_.fromInt(123);
			//line 158 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("00123", thx.format.DecimalFormat.format(value, "00000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (158) )) )}));
			//line 160 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.2)) );
			//line 161 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.20", thx.format.DecimalFormat.format(value, "0.00", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (161) )) )}));
			//line 162 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("01,20", thx.format.DecimalFormat.format(value, "00.00", thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (162) )) )}));
			//line 163 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.56)) );
			//line 164 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("0,6", thx.format.DecimalFormat.format(value, "0.0", thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (164) )) )}));
			//line 166 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = thx._Decimal.Decimal_Impl_.fromInt(1234567890);
			//line 167 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,234,567,890", thx.format.DecimalFormat.format(value, "0,0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (167) )) )}));
			//line 168 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.234.567.890", thx.format.DecimalFormat.format(value, "0,0", thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (168) )) )}));
			//line 170 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1234567890.123456)) );
			//line 171 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,234,567,890.1", thx.format.DecimalFormat.format(value, "0,0.0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (171) )) )}));
			//line 173 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1234.567890)) );
			//line 174 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,234.57", thx.format.DecimalFormat.format(value, "0,0.00", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (174) )) )}));
			//line 175 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.12345")) );
			//line 176 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(1,234,567,8) 90.123", thx.format.DecimalFormat.format(value, "(000) 0,0.000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (176) )) )}));
			//line 177 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(12345678) 90.123", thx.format.DecimalFormat.format(value, "(000) 00.000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (177) )) )}));
			//line 178 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(123456789) 0.123", thx.format.DecimalFormat.format(value, "(000) 0.000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (178) )) )}));
			//line 179 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1234567890.1", thx.format.DecimalFormat.format(value, "0.0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (179) )) )}));
			//line 180 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(123456) 7890", thx.format.DecimalFormat.format(value, "(000) 0000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (180) )) )}));
			//line 182 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.23)) );
			//line 183 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(00,0) 01.230", thx.format.DecimalFormat.format(value, "(000) 0,0.000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (183) )) )}));
			//line 184 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(000) 01.230", thx.format.DecimalFormat.format(value, "(000) 00.000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (184) )) )}));
			//line 185 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(000) 1.230", thx.format.DecimalFormat.format(value, "(000) 0.000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (185) )) )}));
			//line 186 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.2", thx.format.DecimalFormat.format(value, "0.0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (186) )) )}));
			//line 187 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(000) 0001", thx.format.DecimalFormat.format(value, "(000) 0000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (187) )) )}));
			//line 188 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(000) 0001", thx.format.DecimalFormat.format(value, "(000) 0000;(000) 0000-", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (188) )) )}));
			//line 189 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(000) 0001-", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (value) ).negate()) ), "(000) 0000;(000) 0000-", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormat0"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (189) )) )}));
		}
		
	}
	
	
	public void testCustomFormatHash()
	{
		//line 193 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 193 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 193 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 193 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 194 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.2)) );
			//line 196 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.2", thx.format.DecimalFormat.format(value, "#.##", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (196) )) )}));
			//line 198 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = thx._Decimal.Decimal_Impl_.fromInt(123);
			//line 199 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("123", thx.format.DecimalFormat.format(value, "####", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (199) )) )}));
			//line 202 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = thx._Decimal.Decimal_Impl_.fromInt(123456);
			//line 203 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("[12-34-56]", thx.format.DecimalFormat.format(value, "[##-##-##]", thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (203) )) )}));
			//line 205 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = thx._Decimal.Decimal_Impl_.fromInt(1234567890);
			//line 206 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1234567890", thx.format.DecimalFormat.format(value, "#", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (206) )) )}));
			//line 207 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(123) 456-7890", thx.format.DecimalFormat.format(value, "(###) ###-####\"", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (207) )) )}));
			//line 209 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.parse("1234567890.12345")) );
			//line 210 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(1,234,567,8) 90.123", thx.format.DecimalFormat.format(value, "(###) #,#.###", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (210) )) )}));
			//line 211 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(12345678) 90.123", thx.format.DecimalFormat.format(value, "(###) ##.###", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (211) )) )}));
			//line 212 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(123456789) 0.123", thx.format.DecimalFormat.format(value, "(###) #.###", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (212) )) )}));
			//line 213 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1234567890.1", thx.format.DecimalFormat.format(value, "#.#", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (213) )) )}));
			//line 214 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(123456) 7890", thx.format.DecimalFormat.format(value, "(###) ####", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (214) )) )}));
			//line 216 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.23)) );
			//line 217 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("() 1.23", thx.format.DecimalFormat.format(value, "(###) #,#.###", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (217) )) )}));
			//line 218 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("() 1.23", thx.format.DecimalFormat.format(value, "(###) ##.###", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (218) )) )}));
			//line 219 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("() 1.23", thx.format.DecimalFormat.format(value, "(###) #.###", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (219) )) )}));
			//line 220 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.2", thx.format.DecimalFormat.format(value, "#.#", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (220) )) )}));
			//line 221 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("() 1", thx.format.DecimalFormat.format(value, "(###) ####", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (221) )) )}));
			//line 222 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("() 1", thx.format.DecimalFormat.format(value, "(###) ####;(###) ####-", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (222) )) )}));
			//line 223 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("() 1-", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (((thx.bigint.DecimalImpl) (value) ).negate()) ), "(###) ####;(###) ####-", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomFormatHash"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (223) )) )}));
		}
		
	}
	
	
	public void testCustomDecimalSeparator()
	{
		//line 227 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 227 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 227 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 227 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 228 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl value = thx._Decimal.Decimal_Impl_.fromInt(1234567890);
			//line 230 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,234,567,890", thx.format.DecimalFormat.format(value, "#,#", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomDecimalSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (230) )) )}));
			//line 232 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,235", thx.format.DecimalFormat.format(value, "#,#,,", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomDecimalSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (232) )) )}));
			//line 233 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1,235", thx.format.DecimalFormat.format(value, "#,##0,,", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomDecimalSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (233) )) )}));
			//line 235 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1", thx.format.DecimalFormat.format(value, "#,#,,,", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomDecimalSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (235) )) )}));
		}
		
	}
	
	
	public void testCustomDecimalFranction()
	{
		//line 239 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 239 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 239 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 239 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 240 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1.2)) );
			//line 242 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.20", thx.format.DecimalFormat.format(value, "0.00", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomDecimalFranction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (242) )) )}));
			//line 243 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("01.20", thx.format.DecimalFormat.format(value, "00.00", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomDecimalFranction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (243) )) )}));
			//line 244 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("01,20", thx.format.DecimalFormat.format(value, "00.00", thx.format.TestDecimalFormat.it), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomDecimalFranction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (244) )) )}));
			//line 246 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.086)) );
			//line 247 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("8.6%", thx.format.DecimalFormat.format(value, "#0.##%", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomDecimalFranction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (247) )) )}));
			//line 248 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("8.60%", thx.format.DecimalFormat.format(value, "#0.00%", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomDecimalFranction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (248) )) )}));
			//line 250 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			value = thx._Decimal.Decimal_Impl_.fromInt(86000);
			//line 251 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("8.6E+4", thx.format.DecimalFormat.format(value, "0.###E+0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomDecimalFranction"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (251) )) )}));
		}
		
	}
	
	
	public void testCustomPercentSpecifier()
	{
		//line 255 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 255 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 255 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 255 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 256 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("8.6%", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.086)) ), "#0.##%", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomPercentSpecifier"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (256) )) )}));
		}
		
	}
	
	
	public void testCustomPermilleSpecifier()
	{
		//line 260 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 260 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 260 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 260 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 261 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("3.54\u2030", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.00354)) ), "#0.##\u2030", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomPermilleSpecifier"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (261) )) )}));
		}
		
	}
	
	
	public void testCustomE()
	{
		//line 265 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 265 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 265 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 265 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 266 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl value = thx._Decimal.Decimal_Impl_.fromInt(86000);
			//line 267 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("8.6E+4", thx.format.DecimalFormat.format(value, "0.###E+0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomE"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (267) )) )}));
			//line 268 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("8.6E+004", thx.format.DecimalFormat.format(value, "0.###E+000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomE"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (268) )) )}));
			//line 269 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("8.6E004", thx.format.DecimalFormat.format(value, "0.###E-000", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomE"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (269) )) )}));
		}
		
	}
	
	
	public void testCustomEscape()
	{
		//line 273 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 273 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 273 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 273 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 274 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl value = thx._Decimal.Decimal_Impl_.fromInt(123);
			//line 275 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("### 123 dollars and 00 cents ###", thx.format.DecimalFormat.format(value, "\\#\\#\\# ##0 dollars and \\0\\0 c\\ents \\#\\#\\#", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomEscape"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (275) )) )}));
			//line 276 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("\\\\\\ 123 dollars and 00 cents \\\\\\", thx.format.DecimalFormat.format(value, "\\\\\\\\\\\\ ##0 dollars and \\0\\0 c\\ents \\\\\\\\\\\\", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomEscape"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (276) )) )}));
		}
		
	}
	
	
	public void testSectionSeparator()
	{
		//line 280 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 280 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 280 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 280 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 281 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl pos = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(1234.0)) );
			//line 281 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl neg = ((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-1234.0)) );
			//line 281 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			thx.bigint.DecimalImpl zero = thx._Decimal.Decimal_Impl_.fromInt(0);
			//line 288 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1234", thx.format.DecimalFormat.format(pos, "##;(##)", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testSectionSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (288) )) )}));
			//line 289 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(1234)", thx.format.DecimalFormat.format(neg, "##;(##)", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testSectionSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (289) )) )}));
			//line 290 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("0", thx.format.DecimalFormat.format(zero, "##;(##)", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testSectionSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (290) )) )}));
			//line 292 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1234", thx.format.DecimalFormat.format(pos, "##;(##);**Z\\ero**", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testSectionSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (292) )) )}));
			//line 293 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("(1234)", thx.format.DecimalFormat.format(neg, "##;(##);**Z\\ero**", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testSectionSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (293) )) )}));
			//line 294 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("**Zero**", thx.format.DecimalFormat.format(zero, "##;(##);**Z\\ero**", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testSectionSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (294) )) )}));
		}
		
	}
	
	
	public void testCustomRounding()
	{
		//line 298 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 298 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 298 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 298 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 299 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.99)) ), "0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (299) )) )}));
			//line 300 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.0", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.99)) ), "0.0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (300) )) )}));
			//line 301 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("0.1", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(0.099)) ), "0.0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (301) )) )}));
			//line 302 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("10", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(9.9)) ), "0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (302) )) )}));
			//line 303 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("100", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(99.9)) ), "0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (303) )) )}));
			//line 304 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-0.99)) ), "0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (304) )) )}));
			//line 305 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-1.0", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-0.99)) ), "0.0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (305) )) )}));
			//line 306 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-0.1", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-0.099)) ), "0.0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (306) )) )}));
			//line 307 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-10", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-9.9)) ), "0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (307) )) )}));
			//line 308 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("-100", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(-99.9)) ), "0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomRounding"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (308) )) )}));
		}
		
	}
	
	
	public void testCustomEscapedDecimalSeparator()
	{
		//line 312 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g1 = 0;
		//line 312 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		int _g = this.x;
		//line 312 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		while (( _g1 < _g ))
		{
			//line 312 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			 ++ _g1;
			//line 313 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.2.3", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(12.34)) ), "0\\.0.0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomEscapedDecimalSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (313) )) )}));
			//line 314 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.2.3", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(12.34)) ), "0\'.\'0.0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomEscapedDecimalSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (314) )) )}));
			//line 315 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			utest.Assert.equals("1.2.3", thx.format.DecimalFormat.format(((thx.bigint.DecimalImpl) (thx.bigint.Decimals.fromFloat(12.34)) ), "0\".\"0.0", null), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.format.TestDecimalFormat", "TestDecimalFormat.hx", "testCustomEscapedDecimalSeparator"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (315) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.x = ((int) (value) );
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return value;
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return value;
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			switch (field.hashCode())
			{
				case -876801388:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomEscapedDecimalSeparator")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCustomEscapedDecimalSeparator")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 120:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return this.x;
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 222391127:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomRounding")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCustomRounding")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1585370747:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testNumber")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testNumber")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -2090952142:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testSectionSeparator")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSectionSeparator")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1289742019:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCurrency")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCurrency")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1016671492:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomEscape")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCustomEscape")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -1803465938:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCurrencyIT")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCurrencyIT")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 735333890:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomE")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCustomE")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -1803465567:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCurrencyUS")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCurrencyUS")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1650335215:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomPermilleSpecifier")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCustomPermilleSpecifier")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -1071526061:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testPercent")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPercent")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 599858108:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomPercentSpecifier")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCustomPercentSpecifier")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1151782782:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testPermille")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPermille")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 2127135760:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomDecimalFranction")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCustomDecimalFranction")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -1146750666:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testUnit")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testUnit")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -1007861929:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomDecimalSeparator")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCustomDecimalSeparator")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1149664863:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testDecimal")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDecimal")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -570159960:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomFormatHash")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCustomFormatHash")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 775722443:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testFormatFixed")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFormatFixed")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -2055738634:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomFormat0")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testCustomFormat0")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1870077267:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testExponential")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testExponential")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -317995909:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testDifferentGroups")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDifferentGroups")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -707316935:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testPrintfd")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPrintfd")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 714197574:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testRounding")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRounding")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -707316937:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testPrintfb")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testPrintfb")) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("x")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						return ((double) (this.x) );
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			boolean __temp_executeDef1 = true;
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			switch (field.hashCode())
			{
				case -876801388:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomEscapedDecimalSeparator")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCustomEscapedDecimalSeparator();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1585370747:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testNumber")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testNumber();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 222391127:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomRounding")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCustomRounding();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1289742019:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCurrency")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCurrency();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -2090952142:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testSectionSeparator")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testSectionSeparator();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -1803465938:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCurrencyIT")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCurrencyIT();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1016671492:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomEscape")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCustomEscape();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -1803465567:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCurrencyUS")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCurrencyUS();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 735333890:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomE")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCustomE();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -1071526061:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testPercent")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testPercent();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1650335215:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomPermilleSpecifier")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCustomPermilleSpecifier();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1151782782:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testPermille")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testPermille();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 599858108:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomPercentSpecifier")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCustomPercentSpecifier();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -1146750666:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testUnit")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testUnit();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 2127135760:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomDecimalFranction")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCustomDecimalFranction();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1149664863:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testDecimal")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testDecimal();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -1007861929:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomDecimalSeparator")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCustomDecimalSeparator();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 775722443:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testFormatFixed")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testFormatFixed();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -570159960:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomFormatHash")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCustomFormatHash();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 1870077267:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testExponential")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testExponential();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -2055738634:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testCustomFormat0")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testCustomFormat0();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -707316935:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testPrintfd")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testPrintfd();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -317995909:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testDifferentGroups")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testDifferentGroups();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case -707316937:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testPrintfb")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testPrintfb();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
				case 714197574:
				{
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					if (field.equals("testRounding")) 
					{
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						__temp_executeDef1 = false;
						//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
						this.testRounding();
					}
					
					//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
					break;
				}
				
				
			}
			
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			if (__temp_executeDef1) 
			{
				//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		baseArr.push("x");
		//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
		{
			//line 9 "/shared/format/test/thx/format/TestDecimalFormat.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


