// Generated by Haxe 3.3.0
package thx;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Assert extends haxe.lang.HxObject
{
	static
	{
		//line 23 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.behavior = ((thx.IAssertBehavior) (new thx.DefaultAssertBehavior()) );
	}
	
	public Assert(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Assert()
	{
		//line 21 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.__hx_ctor_thx_Assert(this);
	}
	
	
	public static void __hx_ctor_thx_Assert(thx.Assert __temp_me55)
	{
	}
	
	
	public static thx.IAssertBehavior behavior;
	
	public static <T> void contains(haxe.root.Array<T> possibilities, T value, java.lang.String msg, java.lang.Object pos)
	{
		//line 37 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (((boolean) (thx.Arrays.contains(((haxe.root.Array<T>) (possibilities) ), ((T) (value) ), ((haxe.lang.Function) (null) ))) )) 
		{
			//line 38 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.pass(msg, pos);
		}
		else
		{
			//line 40 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.fail(( (( msg == null )) ? (( ( ( "value " + haxe.root.Std.string(value) ) + " not found in the expected possibilities " ) + haxe.root.Std.string(possibilities) )) : (msg) ), pos);
		}
		
	}
	
	
	public static void equals(java.lang.Object expected, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( msg == null )) 
		{
			//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			msg = ( ( ( "expected " + haxe.root.Std.string(expected) ) + " but it is " ) + haxe.root.Std.string(value) );
		}
		
		//line 60 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.isTrue(haxe.lang.Runtime.eq(expected, value), msg, pos);
	}
	
	
	public static <T> void excludes(T match, haxe.root.Array<T> values, java.lang.String msg, java.lang.Object pos)
	{
		//line 75 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if ( ! (((boolean) (thx.Arrays.contains(((haxe.root.Array<T>) (values) ), ((T) (match) ), ((haxe.lang.Function) (null) ))) )) ) 
		{
			//line 76 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.pass(msg, pos);
		}
		else
		{
			//line 78 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.fail(( (( msg == null )) ? (( ( ( "values " + haxe.root.Std.string(values) ) + " do contain " ) + haxe.root.Std.string(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static void fail(java.lang.String msg, java.lang.Object pos)
	{
		//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( msg == null )) 
		{
			//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			msg = "failure expected";
		}
		
		//line 92 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.isTrue(false, msg, pos);
	}
	
	
	public static <T> void isContainedIn(T match, haxe.root.Array<T> values, java.lang.String msg, java.lang.Object pos)
	{
		//line 107 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (((boolean) (thx.Arrays.contains(((haxe.root.Array<T>) (values) ), ((T) (match) ), ((haxe.lang.Function) (null) ))) )) 
		{
			//line 108 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.pass(msg, pos);
		}
		else
		{
			//line 110 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.fail(( (( msg == null )) ? (( ( ( "values " + haxe.root.Std.string(values) ) + " do not contain " ) + haxe.root.Std.string(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static void isFalse(boolean value, java.lang.String msg, java.lang.Object pos)
	{
		//line 125 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( null == msg )) 
		{
			//line 126 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			msg = "expected false";
		}
		
		//line 127 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.isTrue(( value == false ), msg, pos);
	}
	
	
	public static void is(java.lang.Object value, java.lang.Object type, java.lang.String msg, java.lang.Object pos)
	{
		//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( msg == null )) 
		{
			//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			msg = ( ( ( "expected type " + (( (( type instanceof haxe.root.ValueType )) ? (thx.Types.toString(((haxe.root.ValueType) (type) ))) : (( (( type instanceof java.lang.Class )) ? (haxe.root.Type.getClassName(((java.lang.Class) (type) ))) : (( (( type instanceof java.lang.Class )) ? (haxe.root.Type.getEnumName(((java.lang.Class) (type) ))) : (thx.Types.toString(haxe.root.Type.typeof(((java.lang.Object) (type) )))) )) )) )) ) + " but it is " ) + thx.Types.toString(haxe.root.Type.typeof(((java.lang.Object) (value) ))) );
		}
		
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.isTrue(haxe.root.Std.is(value, type), msg, pos);
	}
	
	
	public static void isNull(java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 157 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( msg == null )) 
		{
			//line 158 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			msg = ( "expected null but it is " + haxe.root.Std.string(value) );
		}
		
		//line 159 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.isTrue(( value == null ), msg, pos);
	}
	
	
	public static void isTrue(boolean cond, java.lang.String msg, java.lang.Object pos)
	{
		//line 173 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (cond) 
		{
			//line 174 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.behavior.success(pos);
		}
		else
		{
			//line 176 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.behavior.fail(msg, pos);
		}
		
	}
	
	
	public static void matches(haxe.root.EReg pattern, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( msg == null )) 
		{
			//line 194 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			msg = ( ( "the value " + haxe.root.Std.string(value) ) + " does not match the provided pattern" );
		}
		
		//line 195 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.isTrue(pattern.match(haxe.lang.Runtime.toString(value)), msg, pos);
	}
	
	
	public static void nearEquals(double expected, double value, java.lang.Object approx, java.lang.String msg, java.lang.Object pos)
	{
		//line 214 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( msg == null )) 
		{
			//line 214 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			msg = ( ( ( "expected " + haxe.lang.Runtime.toString(expected) ) + " but it is " ) + haxe.lang.Runtime.toString(value) );
		}
		
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.isTrue(thx.Floats.nearEquals(expected, value, approx), msg, pos);
		//line 215 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		return ;
	}
	
	
	public static void notEquals(java.lang.Object expected, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 233 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( msg == null )) 
		{
			//line 233 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			msg = ( ( ( ( "expected " + haxe.root.Std.string(expected) ) + " and test value " ) + haxe.root.Std.string(value) ) + " should be different" );
		}
		
		//line 234 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.isFalse(haxe.lang.Runtime.eq(expected, value), msg, pos);
	}
	
	
	public static void notNull(java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 248 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( null == msg )) 
		{
			//line 249 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			msg = "expected not null";
		}
		
		//line 250 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.isTrue(( ! (( value == null )) ), msg, pos);
	}
	
	
	public static void pass(java.lang.String msg, java.lang.Object pos)
	{
		//line 263 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( msg == null )) 
		{
			//line 263 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			msg = "pass expected";
		}
		
		//line 263 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.isTrue(true, msg, pos);
	}
	
	
	public static void raises(haxe.lang.Function method, java.lang.Object type, java.lang.String msgNotThrown, java.lang.String msgWrongType, java.lang.Object pos)
	{
		//line 286 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		try 
		{
			//line 287 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			method.__hx_invoke0_o();
			//line 288 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			if (( null == msgNotThrown )) 
			{
				//line 289 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				java.lang.String name = ( (( null == type )) ? ("Dynamic") : (( (( type instanceof haxe.root.ValueType )) ? (thx.Types.toString(((haxe.root.ValueType) (type) ))) : (( (( type instanceof java.lang.Class )) ? (haxe.root.Type.getClassName(((java.lang.Class) (type) ))) : (( (( type instanceof java.lang.Class )) ? (haxe.root.Type.getEnumName(((java.lang.Class) (type) ))) : (thx.Types.toString(haxe.root.Type.typeof(((java.lang.Object) (type) )))) )) )) )) );
				//line 290 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				msgNotThrown = ( ( "exception of type " + name ) + " not raised" );
			}
			
			//line 292 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.fail(msgNotThrown, pos);
		}
		catch (java.lang.Throwable __temp_catchallException1)
		{
			//line 286 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException1);
			//line 294 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			java.lang.Object __temp_catchall2 = __temp_catchallException1;
			//line 294 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			if (( __temp_catchall2 instanceof haxe.lang.HaxeException )) 
			{
				//line 294 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				__temp_catchall2 = ((haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
			}
			
			//line 294 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			{
				//line 294 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				java.lang.Object ex = __temp_catchall2;
				//line 294 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( null == type )) 
				{
					//line 295 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					thx.Assert.pass(null, pos);
				}
				else
				{
					//line 297 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( null == msgWrongType )) 
					{
						//line 298 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						java.lang.String name1 = ( (( type instanceof haxe.root.ValueType )) ? (thx.Types.toString(((haxe.root.ValueType) (type) ))) : (( (( type instanceof java.lang.Class )) ? (haxe.root.Type.getClassName(((java.lang.Class) (type) ))) : (( (( type instanceof java.lang.Class )) ? (haxe.root.Type.getEnumName(((java.lang.Class) (type) ))) : (thx.Types.toString(haxe.root.Type.typeof(((java.lang.Object) (type) )))) )) )) );
						//line 299 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						msgWrongType = ( ( ( "expected throw of type " + name1 ) + " but it is " ) + haxe.root.Std.string(ex) );
					}
					
					//line 301 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					thx.Assert.isTrue(haxe.root.Std.is(ex, type), msgWrongType, pos);
				}
				
			}
			
		}
		
		
	}
	
	
	public static void same(java.lang.Object expected, java.lang.Object value, java.lang.Object recursive, java.lang.String msg, java.lang.Object pos)
	{
		//line 322 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		java.lang.Object __temp_recursive54 = ( (haxe.lang.Runtime.eq(recursive, null)) ? (((java.lang.Object) (true) )) : (recursive) );
		//line 324 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		java.lang.Object status = new haxe.lang.DynamicObject(new java.lang.String[]{"error", "path", "recursive"}, new java.lang.Object[]{null, "", __temp_recursive54}, new java.lang.String[]{}, new double[]{});
		//line 325 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (thx.Assert.sameAs(expected, value, status)) 
		{
			//line 326 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.pass(msg, pos);
		}
		else
		{
			//line 328 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.fail(( (( msg == null )) ? (haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "error", true))) : (msg) ), pos);
		}
		
	}
	
	
	public static void stringContains(java.lang.String match, java.lang.String value, java.lang.String msg, java.lang.Object pos)
	{
		//line 343 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( ( value != null ) && ( haxe.lang.StringExt.indexOf(value, match, null) >= 0 ) )) 
		{
			//line 344 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.pass(msg, pos);
		}
		else
		{
			//line 346 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.fail(( (( msg == null )) ? (( ( ( "value " + thx.Strings.quote(value) ) + " does not contain " ) + thx.Strings.quote(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static void stringSequence(haxe.root.Array<java.lang.String> sequence, java.lang.String value, java.lang.String msg, java.lang.Object pos)
	{
		//line 362 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if (( null == value )) 
		{
			//line 363 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			thx.Assert.fail(( (( msg == null )) ? ("null argument value") : (msg) ), pos);
			//line 364 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			return ;
		}
		
		//line 366 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		int p = 0;
		//line 367 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		{
			//line 367 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			int _g = 0;
			//line 367 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			while (( _g < sequence.length ))
			{
				//line 367 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				java.lang.String s = sequence.__get(_g);
				//line 367 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				 ++ _g;
				//line 368 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				int p2 = haxe.lang.StringExt.indexOf(value, s, p);
				//line 369 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( p2 < 0 )) 
				{
					//line 370 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( msg == null )) 
					{
						//line 371 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						msg = ( ( "expected " + thx.Strings.quote(s) ) + " after " );
						//line 372 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						if (( p > 0 )) 
						{
							//line 373 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							msg += ( " " + thx.Strings.quote(thx.Strings.ellipsis(value, 30, null)) );
						}
						else
						{
							//line 375 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							msg += " begin";
						}
						
					}
					
					//line 377 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					thx.Assert.fail(msg, pos);
					//line 378 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return ;
				}
				
				//line 380 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				p = ( p2 + s.length() );
			}
			
		}
		
		//line 382 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.pass(msg, pos);
	}
	
	
	public static void warn(java.lang.String msg, java.lang.Object pos)
	{
		//line 395 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		thx.Assert.behavior.warn(msg, pos);
	}
	
	
	public static boolean sameAs(java.lang.Object expected, java.lang.Object value, java.lang.Object status)
	{
		//line 401 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		haxe.lang.Function withPath = new thx.Assert_sameAs_401__Fun(status);
		//line 404 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		if ( ! (((boolean) (thx.Types.sameType(((java.lang.Object) (expected) ), ((java.lang.Object) (value) ))) )) ) 
		{
			//line 405 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			java.lang.String texpected = thx.Types.toString(haxe.root.Type.typeof(((java.lang.Object) (expected) )));
			//line 405 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			java.lang.String tvalue = thx.Types.toString(haxe.root.Type.typeof(((java.lang.Object) (value) )));
			//line 407 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected type " + texpected ) + " but it is " ) + tvalue ))));
			//line 408 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
			return false;
		}
		
		//line 410 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		haxe.root.ValueType _g = haxe.root.Type.typeof(expected);
		//line 410 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		switch (_g.index)
		{
			case 0:
			case 1:
			case 3:
			{
				//line 418 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( ! (haxe.lang.Runtime.eq(expected, value)) )) 
				{
					//line 419 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + haxe.root.Std.string(expected) ) + " but it is " ) + haxe.root.Std.string(value) ))));
					//line 420 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return false;
				}
				
				//line 422 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				return true;
			}
			
			
			case 2:
			{
				//line 412 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if ( ! (thx.Floats.nearEquals(((double) (haxe.lang.Runtime.toDouble(expected)) ), ((double) (haxe.lang.Runtime.toDouble(value)) ), null)) ) 
				{
					//line 413 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + haxe.root.Std.string(expected) ) + " but it is " ) + haxe.root.Std.string(value) ))));
					//line 414 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return false;
				}
				
				//line 416 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				return true;
			}
			
			
			case 4:
			{
				//line 585 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
				{
					//line 586 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					haxe.root.Array<java.lang.String> tfields = haxe.root.Reflect.fields(value);
					//line 586 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					haxe.root.Array<java.lang.String> fields = haxe.root.Reflect.fields(expected);
					//line 586 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					java.lang.String path = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 589 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					{
						//line 589 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						int _g1 = 0;
						//line 589 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						while (( _g1 < fields.length ))
						{
							//line 589 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							java.lang.String field = fields.__get(_g1);
							//line 589 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							 ++ _g1;
							//line 590 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							tfields.remove(field);
							//line 591 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path, "")) ? (field) : (( ( ( "" + path ) + "." ) + field )) ));
							//line 592 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							if ( ! (haxe.root.Reflect.hasField(value, field)) ) 
							{
								//line 593 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) ) + " does not exist in " ) + haxe.root.Std.string(value) ))));
								//line 594 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								return false;
							}
							
							//line 596 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							java.lang.Object e = haxe.root.Reflect.field(expected, field);
							//line 597 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							if (haxe.root.Reflect.isFunction(e)) 
							{
								//line 598 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								continue;
							}
							
							//line 599 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							java.lang.Object v = haxe.root.Reflect.field(value, field);
							//line 600 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							if ( ! (thx.Assert.sameAs(e, v, status)) ) 
							{
								//line 601 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								return false;
							}
							
						}
						
					}
					
					//line 603 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( tfields.length > 0 )) 
					{
						//line 604 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( "the tested object has extra field(s) (" + tfields.join(", ") ) + ") not included in the expected ones" ))));
						//line 605 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						return false;
					}
					
				}
				
				//line 610 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (thx.Iterators.isIterator(expected)) 
				{
					//line 611 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if ( ! (thx.Iterators.isIterator(value)) ) 
					{
						//line 612 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, "expected an Iterable")));
						//line 613 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						return false;
					}
					
					//line 615 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 616 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.root.Array evalues = ((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (expected) ))) );
						//line 616 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.root.Array vvalues = ((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (value) ))) );
						//line 618 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						if (( evalues.length != vvalues.length )) 
						{
							//line 619 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + evalues.length ) + " values in Iterator but they are " ) + vvalues.length ))));
							//line 620 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							return false;
						}
						
						//line 622 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						java.lang.String path1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 623 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						{
							//line 623 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g11 = 0;
							//line 623 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g2 = evalues.length;
							//line 623 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							while (( _g11 < _g2 ))
							{
								//line 623 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								int i = _g11++;
								//line 624 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path1, "")) ? (( ( "iterator[" + i ) + "]" )) : (( path1 + (( ( "[" + i ) + "]" )) )) ));
								//line 625 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								if ( ! (thx.Assert.sameAs(evalues.__get(i), vvalues.__get(i), status)) ) 
								{
									//line 626 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + haxe.root.Std.string(expected) ) + " but it is " ) + haxe.root.Std.string(value) ))));
									//line 627 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 631 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return true;
				}
				
				//line 635 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (thx.Iterables.isIterable(expected)) 
				{
					//line 636 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if ( ! (thx.Iterables.isIterable(value)) ) 
					{
						//line 637 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, "expected an Iterator")));
						//line 638 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						return false;
					}
					
					//line 640 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 641 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.root.Array evalues1 = ((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (haxe.lang.Runtime.callField(((java.lang.Object) (expected) ), "iterator", null)) ))) );
						//line 641 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.root.Array vvalues1 = ((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (haxe.lang.Runtime.callField(((java.lang.Object) (value) ), "iterator", null)) ))) );
						//line 643 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						if (( evalues1.length != vvalues1.length )) 
						{
							//line 644 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + evalues1.length ) + " values in Iterable but they are " ) + vvalues1.length ))));
							//line 645 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							return false;
						}
						
						//line 647 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						java.lang.String path2 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 648 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						{
							//line 648 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g12 = 0;
							//line 648 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g3 = evalues1.length;
							//line 648 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							while (( _g12 < _g3 ))
							{
								//line 648 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								int i1 = _g12++;
								//line 649 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path2, "")) ? (( ( "iterable[" + i1 ) + "]" )) : (( path2 + (( ( "[" + i1 ) + "]" )) )) ));
								//line 650 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								if ( ! (thx.Assert.sameAs(evalues1.__get(i1), vvalues1.__get(i1), status)) ) 
								{
									//line 651 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 654 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return true;
				}
				
				//line 656 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				return true;
			}
			
			
			case 5:
			{
				//line 424 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if ( ! (haxe.root.Reflect.compareMethods(expected, value)) ) 
				{
					//line 425 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, "expected same function reference")));
					//line 426 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return false;
				}
				
				//line 428 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				return true;
			}
			
			
			case 6:
			{
				//line 431 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( ( expected instanceof java.lang.String ) && ( ! (haxe.lang.Runtime.eq(expected, value)) ) )) 
				{
					//line 432 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + thx.Strings.quote(haxe.lang.Runtime.toString(expected)) ) + " but it is " ) + thx.Strings.quote(haxe.lang.Runtime.toString(value)) ))));
					//line 433 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return false;
				}
				
				//line 437 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( expected instanceof haxe.root.Array )) 
				{
					//line 438 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 439 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						if (( ! (haxe.lang.Runtime.eq(haxe.lang.Runtime.getField(expected, "length", true), haxe.lang.Runtime.getField(value, "length", true))) )) 
						{
							//line 440 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + haxe.root.Std.string(haxe.lang.Runtime.getField(expected, "length", true)) ) + " elements but they are " ) + haxe.root.Std.string(haxe.lang.Runtime.getField(value, "length", true)) ))));
							//line 441 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							return false;
						}
						
						//line 443 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						java.lang.String path3 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 444 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						{
							//line 444 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g13 = 0;
							//line 444 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g4 = ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(expected, "length", true))) );
							//line 444 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							while (( _g13 < _g4 ))
							{
								//line 444 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								int i2 = _g13++;
								//line 445 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path3, "")) ? (( ( "array[" + i2 ) + "]" )) : (( path3 + (( ( "[" + i2 ) + "]" )) )) ));
								//line 446 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								if ( ! (thx.Assert.sameAs(((java.lang.Object) (haxe.lang.Runtime.callField(expected, "__get", new haxe.root.Array(new java.lang.Object[]{i2}))) ), ((java.lang.Object) (haxe.lang.Runtime.callField(value, "__get", new haxe.root.Array(new java.lang.Object[]{i2}))) ), status)) ) 
								{
									//line 448 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + haxe.root.Std.string(((java.lang.Object) (haxe.lang.Runtime.callField(expected, "__get", new haxe.root.Array(new java.lang.Object[]{i2}))) )) ) + " but it is " ) + haxe.root.Std.string(((java.lang.Object) (haxe.lang.Runtime.callField(value, "__get", new haxe.root.Array(new java.lang.Object[]{i2}))) )) ))));
									//line 449 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 453 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return true;
				}
				
				//line 457 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( expected instanceof haxe.root.Date )) 
				{
					//line 458 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( ((double) (((haxe.root.Date) (expected) ).date.getTime()) ) != ((double) (((haxe.root.Date) (value) ).date.getTime()) ) )) 
					{
						//line 459 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + haxe.root.Std.string(expected) ) + " but it is " ) + haxe.root.Std.string(value) ))));
						//line 460 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						return false;
					}
					
					//line 462 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return true;
				}
				
				//line 466 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( expected instanceof haxe.io.Bytes )) 
				{
					//line 467 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 468 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.io.Bytes ebytes = ((haxe.io.Bytes) (expected) );
						//line 468 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.io.Bytes vbytes = ((haxe.io.Bytes) (value) );
						//line 470 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						if (( ebytes.length != vbytes.length )) 
						{
							//line 470 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							return false;
						}
						
						//line 471 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						{
							//line 471 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g14 = 0;
							//line 471 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g5 = ebytes.length;
							//line 471 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							while (( _g14 < _g5 ))
							{
								//line 471 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								int i3 = _g14++;
								//line 472 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								if (( (( ebytes.b[i3] & 255 )) != (( vbytes.b[i3] & 255 )) )) 
								{
									//line 473 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected byte " + (( ebytes.b[i3] & 255 )) ) + " but it is " ) + (( vbytes.b[i3] & 255 )) ))));
									//line 474 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 477 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return true;
				}
				
				//line 481 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( expected instanceof haxe.IMap )) 
				{
					//line 482 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 483 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.IMap map = ((haxe.IMap) (expected) );
						//line 483 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.IMap vmap = ((haxe.IMap) (value) );
						//line 485 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.root.Array _g6 = new haxe.root.Array(new java.lang.Object[]{});
						//line 485 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						{
							//line 485 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							java.lang.Object tmp = map.keys();
							//line 485 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
							{
								//line 485 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								java.lang.Object k = ((java.lang.Object) (haxe.lang.Runtime.callField(tmp, "next", null)) );
								//line 485 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								_g6.push(k);
							}
							
						}
						
						//line 486 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.root.Array _g15 = new haxe.root.Array(new java.lang.Object[]{});
						//line 486 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						{
							//line 486 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							java.lang.Object tmp1 = vmap.keys();
							//line 486 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp1, "hasNext", null)))
							{
								//line 486 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								java.lang.Object k1 = ((java.lang.Object) (haxe.lang.Runtime.callField(tmp1, "next", null)) );
								//line 486 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								_g15.push(k1);
							}
							
						}
						
						//line 488 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						if (( _g6.length != _g15.length )) 
						{
							//line 489 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + _g6.length ) + " keys but they are " ) + _g15.length ))));
							//line 490 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							return false;
						}
						
						//line 492 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						java.lang.String path4 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 493 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						{
							//line 493 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g21 = 0;
							//line 493 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							while (( _g21 < _g6.length ))
							{
								//line 493 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								java.lang.Object key = _g6.__get(_g21);
								//line 493 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								 ++ _g21;
								//line 494 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path4, "")) ? (( ( "hash[" + haxe.root.Std.string(key) ) + "]" )) : (( path4 + (( ( "[" + haxe.root.Std.string(key) ) + "]" )) )) ));
								//line 495 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								if ( ! (thx.Assert.sameAs(map.get(key), vmap.get(key), status)) ) 
								{
									//line 496 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + haxe.root.Std.string(expected) ) + " but it is " ) + haxe.root.Std.string(value) ))));
									//line 497 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 501 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return true;
				}
				
				//line 505 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (thx.Iterators.isIterator(expected)) 
				{
					//line 506 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 507 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.root.Array evalues2 = ((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (expected) ))) );
						//line 507 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.root.Array vvalues2 = ((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (value) ))) );
						//line 509 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						if (( evalues2.length != vvalues2.length )) 
						{
							//line 510 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + evalues2.length ) + " values in Iterator but they are " ) + vvalues2.length ))));
							//line 511 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							return false;
						}
						
						//line 513 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						java.lang.String path5 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 514 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						{
							//line 514 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g16 = 0;
							//line 514 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g7 = evalues2.length;
							//line 514 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							while (( _g16 < _g7 ))
							{
								//line 514 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								int i4 = _g16++;
								//line 515 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path5, "")) ? (( ( "iterator[" + i4 ) + "]" )) : (( path5 + (( ( ( ( "" + path5 ) + "[" ) + i4 ) + "]" )) )) ));
								//line 516 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								if ( ! (thx.Assert.sameAs(evalues2.__get(i4), vvalues2.__get(i4), status)) ) 
								{
									//line 517 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + haxe.root.Std.string(expected) ) + " but it is " ) + haxe.root.Std.string(value) ))));
									//line 518 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 522 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return true;
				}
				
				//line 526 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (thx.Iterables.isIterable(expected)) 
				{
					//line 527 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 528 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.root.Array evalues3 = ((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (haxe.lang.Runtime.callField(((java.lang.Object) (expected) ), "iterator", null)) ))) );
						//line 528 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.root.Array vvalues3 = ((haxe.root.Array) (thx.Iterators.toArray(((java.lang.Object) (haxe.lang.Runtime.callField(((java.lang.Object) (value) ), "iterator", null)) ))) );
						//line 530 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						if (( evalues3.length != vvalues3.length )) 
						{
							//line 531 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + evalues3.length ) + " values in Iterable but they are " ) + vvalues3.length ))));
							//line 532 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							return false;
						}
						
						//line 534 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						java.lang.String path6 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 535 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						{
							//line 535 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g17 = 0;
							//line 535 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int _g8 = evalues3.length;
							//line 535 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							while (( _g17 < _g8 ))
							{
								//line 535 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								int i5 = _g17++;
								//line 536 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path6, "")) ? (( ( "iterable[" + i5 ) + "]" )) : (( path6 + (( ( "[" + i5 ) + "]" )) )) ));
								//line 537 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								if ( ! (thx.Assert.sameAs(evalues3.__get(i5), vvalues3.__get(i5), status)) ) 
								{
									//line 538 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 541 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return true;
				}
				
				//line 545 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
				{
					//line 546 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					haxe.root.Array<java.lang.String> fields1 = haxe.root.Type.getInstanceFields(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (expected) ))) ));
					//line 546 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					java.lang.String path7 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 548 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					{
						//line 548 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						int _g9 = 0;
						//line 548 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						while (( _g9 < fields1.length ))
						{
							//line 548 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							java.lang.String field1 = fields1.__get(_g9);
							//line 548 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							 ++ _g9;
							//line 549 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path7, "")) ? (field1) : (( ( ( "" + path7 ) + "." ) + field1 )) ));
							//line 550 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							java.lang.Object e1 = haxe.root.Reflect.field(expected, field1);
							//line 551 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							if (haxe.root.Reflect.isFunction(e1)) 
							{
								//line 551 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								continue;
							}
							
							//line 552 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							java.lang.Object v1 = haxe.root.Reflect.field(value, field1);
							//line 553 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							if ( ! (thx.Assert.sameAs(e1, v1, status)) ) 
							{
								//line 554 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				//line 558 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				return true;
			}
			
			
			case 7:
			{
				//line 559 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				java.lang.Class e2 = ((java.lang.Class) (_g.params[0]) );
				//line 560 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				java.lang.String eexpected = haxe.root.Type.getEnumName(e2);
				//line 560 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				java.lang.String evalue = haxe.root.Type.getEnumName(haxe.root.Type.getEnum(value));
				//line 562 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if ( ! (haxe.lang.Runtime.valEq(eexpected, evalue)) ) 
				{
					//line 563 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected enumeration of " + eexpected ) + " but it is " ) + evalue ))));
					//line 564 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					return false;
				}
				
				//line 566 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
				{
					//line 567 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					if (( haxe.root.Type.enumIndex(expected) != haxe.root.Type.enumIndex(value) )) 
					{
						//line 568 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + haxe.root.Type.enumConstructor(expected) ) + " but it is " ) + haxe.root.Type.enumConstructor(value) ))));
						//line 569 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						return false;
					}
					
					//line 571 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					haxe.root.Array eparams = haxe.root.Type.enumParameters(expected);
					//line 571 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					haxe.root.Array vparams = haxe.root.Type.enumParameters(value);
					//line 571 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					java.lang.String path8 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 574 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
					{
						//line 574 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						int _g18 = 0;
						//line 574 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						int _g10 = eparams.length;
						//line 574 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
						while (( _g18 < _g10 ))
						{
							//line 574 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							int i6 = _g18++;
							//line 575 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path8, "")) ? (( ( "enum[" + i6 ) + "]" )) : (( path8 + (( ( "[" + i6 ) + "]" )) )) ));
							//line 576 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
							if ( ! (thx.Assert.sameAs(eparams.__get(i6), vparams.__get(i6), status)) ) 
							{
								//line 577 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								haxe.lang.Runtime.setField(status, "error", haxe.lang.Runtime.toString(withPath.__hx_invoke1_o(0.0, ( ( ( "expected " + haxe.root.Std.string(expected) ) + " but it is " ) + haxe.root.Std.string(value) ))));
								//line 578 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				//line 582 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				return true;
			}
			
			
			case 8:
			{
				//line 658 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
				throw haxe.lang.HaxeException.wrap("Unable to compare two unknown types");
			}
			
			
		}
		
		//line 400 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		return false;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 21 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		return new thx.Assert(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 21 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Assert.hx"
		return new thx.Assert();
	}
	
	
}


