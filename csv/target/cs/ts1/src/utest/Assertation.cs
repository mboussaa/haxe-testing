// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assertation : global::haxe.lang.ParamEnum {
		
		public Assertation(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"Success", "Failure", "Error", "SetupError", "TeardownError", "TimeoutError", "AsyncError", "Warning"};
		
		public static global::utest.Assertation Success(object pos) {
			return new global::utest.Assertation(0, new object[]{pos});
		}
		
		
		public static global::utest.Assertation Failure(string msg, object pos) {
			unchecked {
				return new global::utest.Assertation(1, new object[]{msg, pos});
			}
		}
		
		
		public static global::utest.Assertation Error(object e, global::Array<object> stack) {
			unchecked {
				return new global::utest.Assertation(2, new object[]{e, stack});
			}
		}
		
		
		public static global::utest.Assertation SetupError(object e, global::Array<object> stack) {
			unchecked {
				return new global::utest.Assertation(3, new object[]{e, stack});
			}
		}
		
		
		public static global::utest.Assertation TeardownError(object e, global::Array<object> stack) {
			unchecked {
				return new global::utest.Assertation(4, new object[]{e, stack});
			}
		}
		
		
		public static global::utest.Assertation TimeoutError(int missedAsyncs, global::Array<object> stack) {
			unchecked {
				return new global::utest.Assertation(5, new object[]{missedAsyncs, stack});
			}
		}
		
		
		public static global::utest.Assertation AsyncError(object e, global::Array<object> stack) {
			unchecked {
				return new global::utest.Assertation(6, new object[]{e, stack});
			}
		}
		
		
		public static global::utest.Assertation Warning(string msg) {
			unchecked {
				return new global::utest.Assertation(7, new object[]{msg});
			}
		}
		
		
		public override string getTag() {
			return global::utest.Assertation.__hx_constructs[this.index];
		}
		
		
	}
}


