// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.csv {
	public class Dsv : global::haxe.lang.HxObject {
		
		public Dsv(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Dsv() {
			global::thx.csv.Dsv.__hx_ctor_thx_csv_Dsv(this);
		}
		
		
		public static void __hx_ctor_thx_csv_Dsv(global::thx.csv.Dsv __temp_me134) {
		}
		
		
		public static global::Array<object> decode(string dsv, object options) {
			if (string.Equals(null, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "quote", 1576149820, true)))) {
				global::haxe.lang.Runtime.setField(options, "quote", 1576149820, "\"");
			}
			
			if (string.Equals(null, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "escapedQuote", 2039415417, true)))) {
				global::haxe.lang.Runtime.setField(options, "escapedQuote", 2039415417, ( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "quote", 1576149820, true)), "\"")) ? ("\"\"") : (global::haxe.lang.Runtime.concat("\\", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "quote", 1576149820, true)))) ));
			}
			
			if ( ! (global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.getField(options, "trimValues", 1071573604, true)).hasValue) ) {
				global::haxe.lang.Runtime.setField(options, "trimValues", 1071573604, false);
			}
			
			if ( ! (global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.getField(options, "trimEmptyLines", 142541748, true)).hasValue) ) {
				global::haxe.lang.Runtime.setField(options, "trimEmptyLines", 142541748, true);
			}
			
			if (((global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.getField(options, "trimEmptyLines", 142541748, true)))).@value) {
				dsv = global::thx.Strings.trimCharsRight(global::thx.Strings.trimCharsLeft(dsv, "\n\r"), "\n\r");
			}
			
			global::Array<object> result = ( (string.Equals(dsv, "")) ? (new global::Array<object>(new object[]{})) : (new global::thx.csv.core.Parser(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "delimiter", 103286535, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "quote", 1576149820, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "escapedQuote", 2039415417, true))).parse(dsv)) );
			if (((global::haxe.lang.Null<object>.ofDynamic<bool>(global::haxe.lang.Runtime.getField(options, "trimValues", 1071573604, true)))).@value) {
				int _g = 0;
				while (( _g < result.length )) {
					global::Array<object> row = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (result[_g]) ))) );
					 ++ _g;
					{
						int _g2 = 0;
						int _g1 = row.length;
						while (( _g2 < _g1 )) {
							int i = _g2++;
							row[i] = global::haxe.lang.Runtime.toString(row[i]).Trim();
						}
						
					}
					
				}
				
			}
			
			return result;
		}
		
		
		public static global::Array<object> decodeObjects(string dsv, object options) {
			return global::thx.csv.Dsv.arrayToObjects(global::thx.csv.Dsv.decode(dsv, options));
		}
		
		
		public static global::Array<object> arrayToObjects(global::Array<object> arr) {
			unchecked {
				global::Array<object> columns = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (arr[0]) ))) );
				if (( null == columns )) {
					return new global::Array<object>(new object[]{});
				}
				
				global::Array<object> result = new global::Array<object>(new object[]{});
				int len = columns.length;
				global::Array<object> row = null;
				object ob = null;
				{
					int _g1 = 1;
					int _g = arr.length;
					while (( _g1 < _g )) {
						int r = _g1++;
						ob = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{});
						row = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (arr[r]) ))) );
						{
							int _g3 = 0;
							while (( _g3 < len )) {
								int i = _g3++;
								global::Reflect.setField(ob, global::haxe.lang.Runtime.toString(columns[i]), global::haxe.lang.Runtime.toString(row[i]));
							}
							
						}
						
						result.push(ob);
					}
					
				}
				
				return result;
			}
		}
		
		
		public static string encode(global::Array<object> data, object options) {
			if (string.Equals(null, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "quote", 1576149820, true)))) {
				global::haxe.lang.Runtime.setField(options, "quote", 1576149820, "\"");
			}
			
			if (string.Equals(null, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "escapedQuote", 2039415417, true)))) {
				global::haxe.lang.Runtime.setField(options, "escapedQuote", 2039415417, ( (string.Equals(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "quote", 1576149820, true)), "\"")) ? ("\"\"") : (global::haxe.lang.Runtime.concat("\\", global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "quote", 1576149820, true)))) ));
			}
			
			if (string.Equals(null, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "newline", 212244564, true)))) {
				global::haxe.lang.Runtime.setField(options, "newline", 212244564, "\n");
			}
			
			return data.map<object>(((global::haxe.lang.Function) (new global::thx.csv.Dsv_encode_49__Fun(options)) )).@join(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(options, "newline", 212244564, true)));
		}
		
		
		public static string encodeObjects(global::Array<object> data, object options) {
			return global::thx.csv.Dsv.encode(global::thx.csv.Dsv.objectsToArray(data, new global::Array<object>(new object[]{})), options);
		}
		
		
		public static global::Array<object> objectsToArray(global::Array<object> objects, global::Array<object> columns) {
			if (( null == columns )) {
				return global::thx.csv.Dsv.objectsToArray(objects, new global::Array<object>(new object[]{}));
			}
			
			global::haxe.ds.StringMap<int> map = new global::haxe.ds.StringMap<int>();
			global::Array<object> result = new global::Array<object>(new object[]{columns});
			global::Array<object> collector = null;
			global::Array<object> row = null;
			{
				int _g1 = 0;
				int _g = columns.length;
				while (( _g1 < _g )) {
					int i = _g1++;
					map.@set(global::haxe.lang.Runtime.toString(columns[i]), ((int) (i) ));
				}
				
			}
			
			{
				int _g2 = 0;
				while (( _g2 < objects.length )) {
					object @object = objects[_g2];
					 ++ _g2;
					collector = new global::Array<object>(new object[]{});
					row = new global::Array<object>(new object[]{});
					{
						int _g11 = 0;
						global::Array<object> _g21 = global::Reflect.fields(@object);
						while (( _g11 < _g21.length )) {
							string field = global::haxe.lang.Runtime.toString(_g21[_g11]);
							 ++ _g11;
							global::haxe.lang.Null<int> index = ((global::haxe.lang.Null<int>) (map.@get(((string) (field) ))) );
							if ( ! (index.hasValue) ) {
								collector.push(field);
							}
							else {
								row[(index).@value] = global::haxe.lang.Runtime.toString(global::Reflect.field(@object, field));
							}
							
						}
						
					}
					
					if (( collector.length > 0 )) {
						return global::thx.csv.Dsv.objectsToArray(objects, columns.concat(collector));
					}
					else {
						result.push(row);
					}
					
				}
				
			}
			
			return result;
		}
		
		
		public static bool requiresQuotes(string @value, string delimiter, string quote) {
			if ( ! ((( ( ( global::haxe.lang.StringExt.indexOf(@value, delimiter, default(global::haxe.lang.Null<int>)) >= 0 ) || ( global::haxe.lang.StringExt.indexOf(@value, quote, default(global::haxe.lang.Null<int>)) >= 0 ) ) || ( global::haxe.lang.StringExt.indexOf(@value, "\n", default(global::haxe.lang.Null<int>)) >= 0 ) ))) ) {
				return ( global::haxe.lang.StringExt.indexOf(@value, "\r", default(global::haxe.lang.Null<int>)) >= 0 );
			}
			else {
				return true;
			}
			
		}
		
		
		public static string applyQuotes(string @value, string quote, string escapedQuote) {
			@value = global::StringTools.replace(@value, quote, escapedQuote);
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", quote), @value), quote);
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.csv.Dsv(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.csv.Dsv();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.csv {
	public class Dsv_encode_50__Fun : global::haxe.lang.Function {
		
		public Dsv_encode_50__Fun(object options) : base(1, 0) {
			this.options = options;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string cell = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			if (global::thx.csv.Dsv.requiresQuotes(cell, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.options, "delimiter", 103286535, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.options, "quote", 1576149820, true)))) {
				return global::thx.csv.Dsv.applyQuotes(cell, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.options, "quote", 1576149820, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.options, "escapedQuote", 2039415417, true)));
			}
			else {
				return cell;
			}
			
		}
		
		
		public object options;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.csv {
	public class Dsv_encode_49__Fun : global::haxe.lang.Function {
		
		public Dsv_encode_49__Fun(object options) : base(1, 0) {
			this.options = options;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::Array<object> row = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn1) ))) )) );
			return row.map<object>(((global::haxe.lang.Function) (new global::thx.csv.Dsv_encode_50__Fun(this.options)) )).@join(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(this.options, "delimiter", 103286535, true)));
		}
		
		
		public object options;
		
	}
}


