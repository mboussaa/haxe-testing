// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.csv.core {
	public class Parser : global::haxe.lang.HxObject {
		
		public Parser(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Parser(string delimiter, string quote, string escapedQuote) {
			global::thx.csv.core.Parser.__hx_ctor_thx_csv_core_Parser(this, delimiter, quote, escapedQuote);
		}
		
		
		public static void __hx_ctor_thx_csv_core_Parser(global::thx.csv.core.Parser __temp_me137, string delimiter, string quote, string escapedQuote) {
			__temp_me137.delimiter = delimiter;
			__temp_me137.quote = quote;
			__temp_me137.escapedQuote = escapedQuote;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.csv.core.Parser(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::thx.csv.core.Parser(global::haxe.lang.Runtime.toString(arr[0]), global::haxe.lang.Runtime.toString(arr[1]), global::haxe.lang.Runtime.toString(arr[2]));
			}
		}
		
		
		public string delimiter;
		
		public string quote;
		
		public string escapedQuote;
		
		public global::Array<object> result;
		
		public int pos;
		
		public int len;
		
		public int delimiterLength;
		
		public int quoteLength;
		
		public int escapedQuoteLength;
		
		public global::StringBuf buffer;
		
		public global::Array<object> row;
		
		public string s;
		
		public virtual global::Array<object> parse(string s) {
			unchecked {
				this.s = s;
				this.result = new global::Array<object>(new object[]{});
				this.pos = 0;
				this.len = s.Length;
				this.delimiterLength = this.delimiter.Length;
				this.quoteLength = this.quote.Length;
				this.escapedQuoteLength = this.escapedQuote.Length;
				this.buffer = new global::StringBuf();
				this.row = new global::Array<object>(new object[]{});
				try {
					string t = null;
					while (( this.pos < this.len )) {
						if (( string.Equals(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + this.quoteLength ), true)), this.quote) && ( this.buffer.b.Length == 0 ) )) {
							this.pos += this.quoteLength;
							while (( this.pos < this.len )) {
								if (string.Equals(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + this.escapedQuoteLength ), true)), this.escapedQuote)) {
									this.pushBuffer(this.quote);
									this.pos += this.escapedQuoteLength;
								}
								else if (string.Equals(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + this.quoteLength ), true)), this.quote)) {
									this.pos += this.quoteLength;
									string next = global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 1 ), true));
									while (( string.Equals(next, " ") || (  ! (string.Equals(this.delimiter, "\t"))  && string.Equals(next, "\t") ) )) {
										 ++ this.pos;
										next = global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 1 ), true));
									}
									
									break;
								}
								else {
									this.pushBuffer(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 1 ), true)));
									 ++ this.pos;
								}
								
							}
							
						}
						else if (string.Equals(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + this.delimiterLength ), true)), this.delimiter)) {
							this.pushCell();
							this.pos += this.delimiterLength;
						}
						else {
							t = global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 2 ), true));
							if (( string.Equals(t, "\n\r") || string.Equals(t, "\r\n") )) {
								this.pos += 2;
								this.pushCell();
								this.pushRow();
								continue;
							}
							
							t = global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 1 ), true));
							if (( string.Equals(t, "\n") || string.Equals(t, "\r") )) {
								 ++ this.pos;
								this.pushCell();
								this.pushRow();
								continue;
							}
							
							this.pushBuffer(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 1 ), true)));
							 ++ this.pos;
						}
						
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						global::haxe.Log.trace.__hx_invoke2_o(default(double), e, default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"parse", "thx.csv.core.Parser", "Parser.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
						throw global::haxe.lang.HaxeException.wrap(new global::thx.Error(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("unable to parse at pos ", global::haxe.lang.Runtime.toString(this.pos)), ": "), global::Std.@string(e)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"parse", "thx.csv.core.Parser", "Parser.hx"}, new int[]{1981972957}, new double[]{((double) (40) )})));
					}
					
				}
				
				
				this.pushCell();
				this.pushRow();
				return this.result;
			}
		}
		
		
		public virtual void pushCell() {
			this.row.push(this.buffer.b.ToString());
			this.buffer = new global::StringBuf();
		}
		
		
		public virtual void pushBuffer(string @char) {
			this.buffer.b.Append(((string) (global::Std.@string(@char)) ));
		}
		
		
		public virtual void pushRow() {
			this.result.push(this.row);
			this.row = new global::Array<object>(new object[]{});
		}
		
		
		public void loop() {
			unchecked {
				string t = null;
				while (( this.pos < this.len )) {
					if (( string.Equals(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + this.quoteLength ), true)), this.quote) && ( this.buffer.b.Length == 0 ) )) {
						this.pos += this.quoteLength;
						while (( this.pos < this.len )) {
							if (string.Equals(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + this.escapedQuoteLength ), true)), this.escapedQuote)) {
								this.pushBuffer(this.quote);
								this.pos += this.escapedQuoteLength;
							}
							else if (string.Equals(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + this.quoteLength ), true)), this.quote)) {
								this.pos += this.quoteLength;
								string next = global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 1 ), true));
								while (( string.Equals(next, " ") || (  ! (string.Equals(this.delimiter, "\t"))  && string.Equals(next, "\t") ) )) {
									 ++ this.pos;
									next = global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 1 ), true));
								}
								
								break;
							}
							else {
								this.pushBuffer(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 1 ), true)));
								 ++ this.pos;
							}
							
						}
						
					}
					else if (string.Equals(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + this.delimiterLength ), true)), this.delimiter)) {
						this.pushCell();
						this.pos += this.delimiterLength;
					}
					else {
						t = global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 2 ), true));
						if (( string.Equals(t, "\n\r") || string.Equals(t, "\r\n") )) {
							this.pos += 2;
							this.pushCell();
							this.pushRow();
							continue;
						}
						
						t = global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 1 ), true));
						if (( string.Equals(t, "\n") || string.Equals(t, "\r") )) {
							 ++ this.pos;
							this.pushCell();
							this.pushRow();
							continue;
						}
						
						this.pushBuffer(global::haxe.lang.StringExt.substring(this.s, this.pos, new global::haxe.lang.Null<int>(( this.pos + 1 ), true)));
						 ++ this.pos;
					}
					
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 889039935:
					{
						this.escapedQuoteLength = ((int) (@value) );
						return @value;
					}
					
					
					case 1632780610:
					{
						this.quoteLength = ((int) (@value) );
						return @value;
					}
					
					
					case 555323213:
					{
						this.delimiterLength = ((int) (@value) );
						return @value;
					}
					
					
					case 5393365:
					{
						this.len = ((int) (@value) );
						return @value;
					}
					
					
					case 5594516:
					{
						this.pos = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 115:
					{
						this.s = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 5693978:
					{
						this.row = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1351924992:
					{
						this.buffer = ((global::StringBuf) (@value) );
						return @value;
					}
					
					
					case 889039935:
					{
						this.escapedQuoteLength = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1632780610:
					{
						this.quoteLength = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 555323213:
					{
						this.delimiterLength = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 5393365:
					{
						this.len = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 5594516:
					{
						this.pos = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 142895325:
					{
						this.result = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 2039415417:
					{
						this.escapedQuote = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1576149820:
					{
						this.quote = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 103286535:
					{
						this.delimiter = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1203218020:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "loop", 1203218020)) );
					}
					
					
					case 1966517344:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pushRow", 1966517344)) );
					}
					
					
					case 611590778:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pushBuffer", 611590778)) );
					}
					
					
					case 279860380:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pushCell", 279860380)) );
					}
					
					
					case 1029017651:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "parse", 1029017651)) );
					}
					
					
					case 115:
					{
						return this.s;
					}
					
					
					case 5693978:
					{
						return this.row;
					}
					
					
					case 1351924992:
					{
						return this.buffer;
					}
					
					
					case 889039935:
					{
						return this.escapedQuoteLength;
					}
					
					
					case 1632780610:
					{
						return this.quoteLength;
					}
					
					
					case 555323213:
					{
						return this.delimiterLength;
					}
					
					
					case 5393365:
					{
						return this.len;
					}
					
					
					case 5594516:
					{
						return this.pos;
					}
					
					
					case 142895325:
					{
						return this.result;
					}
					
					
					case 2039415417:
					{
						return this.escapedQuote;
					}
					
					
					case 1576149820:
					{
						return this.quote;
					}
					
					
					case 103286535:
					{
						return this.delimiter;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 889039935:
					{
						return ((double) (this.escapedQuoteLength) );
					}
					
					
					case 1632780610:
					{
						return ((double) (this.quoteLength) );
					}
					
					
					case 555323213:
					{
						return ((double) (this.delimiterLength) );
					}
					
					
					case 5393365:
					{
						return ((double) (this.len) );
					}
					
					
					case 5594516:
					{
						return ((double) (this.pos) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1203218020:
					{
						this.loop();
						break;
					}
					
					
					case 1966517344:
					{
						this.pushRow();
						break;
					}
					
					
					case 611590778:
					{
						this.pushBuffer(global::haxe.lang.Runtime.toString(dynargs[0]));
						break;
					}
					
					
					case 279860380:
					{
						this.pushCell();
						break;
					}
					
					
					case 1029017651:
					{
						return this.parse(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("s");
			baseArr.push("row");
			baseArr.push("buffer");
			baseArr.push("escapedQuoteLength");
			baseArr.push("quoteLength");
			baseArr.push("delimiterLength");
			baseArr.push("len");
			baseArr.push("pos");
			baseArr.push("result");
			baseArr.push("escapedQuote");
			baseArr.push("quote");
			baseArr.push("delimiter");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


