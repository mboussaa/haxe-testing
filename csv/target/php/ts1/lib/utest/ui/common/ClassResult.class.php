<?php

// Generated by Haxe 3.3.0
class utest_ui_common_ClassResult {
	public function __construct($className, $setupName, $teardownName) {
		if(!php_Boot::$skip_constructor) {
		$this->fixtures = new haxe_ds_StringMap();
		$this->className = $className;
		$this->setupName = $setupName;
		$this->hasSetup = $setupName !== null;
		$this->teardownName = $teardownName;
		$this->hasTeardown = $teardownName !== null;
		$this->methods = 0;
		$this->stats = new utest_ui_common_ResultStats();
	}}
	public $fixtures;
	public $className;
	public $setupName;
	public $teardownName;
	public $hasSetup;
	public $hasTeardown;
	public $methods;
	public $stats;
	public function add($result) {
		$tmp = $this->fixtures->exists($result->methodName);
		if($tmp) {
			throw new HException("invalid duplicated fixture result");
		}
		$this->stats->wire($result->stats);
		$this->methods++;
		$this->fixtures->set($result->methodName, $result);
	}
	public function get($method) {
		return $this->fixtures->get($method);
	}
	public function exists($method) {
		return $this->fixtures->exists($method);
	}
	public function methodNames($errorsHavePriority = null) {
		if($errorsHavePriority === null) {
			$errorsHavePriority = true;
		}
		$names = (new _hx_array(array()));
		{
			$tmp = $this->fixtures->keys();
			while(true) {
				$tmp1 = !$tmp->hasNext();
				if($tmp1) {
					break;
				}
				$name = $tmp->next();
				$names->push($name);
				unset($tmp1,$name);
			}
		}
		if($errorsHavePriority) {
			$me = $this;
			$names->sort(array(new _hx_lambda(array(&$me), "utest_ui_common_ClassResult_0"), 'execute'));
		} else {
			$names->sort(array(new _hx_lambda(array(), "utest_ui_common_ClassResult_1"), 'execute'));
		}
		return $names;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'utest.ui.common.ClassResult'; }
}
function utest_ui_common_ClassResult_0(&$me, $a, $b) {
	{
		$as = $me->get($a)->stats;
		$bs = $me->get($b)->stats;
		$tmp2 = $as->hasErrors;
		if($tmp2) {
			$tmp3 = !$bs->hasErrors;
			if($tmp3) {
				return -1;
			} else {
				$tmp4 = $as->errors === $bs->errors;
				if($tmp4) {
					return Reflect::compare($a, $b);
				} else {
					return Reflect::compare($as->errors, $bs->errors);
				}
			}
		} else {
			$tmp5 = $bs->hasErrors;
			if($tmp5) {
				return 1;
			} else {
				$tmp6 = $as->hasFailures;
				if($tmp6) {
					$tmp7 = !$bs->hasFailures;
					if($tmp7) {
						return -1;
					} else {
						$tmp8 = $as->failures === $bs->failures;
						if($tmp8) {
							return Reflect::compare($a, $b);
						} else {
							return Reflect::compare($as->failures, $bs->failures);
						}
					}
				} else {
					$tmp9 = $bs->hasFailures;
					if($tmp9) {
						return 1;
					} else {
						$tmp10 = $as->hasWarnings;
						if($tmp10) {
							$tmp11 = !$bs->hasWarnings;
							if($tmp11) {
								return -1;
							} else {
								$tmp12 = $as->warnings === $bs->warnings;
								if($tmp12) {
									return Reflect::compare($a, $b);
								} else {
									return Reflect::compare($as->warnings, $bs->warnings);
								}
							}
						} else {
							$tmp13 = $bs->hasWarnings;
							if($tmp13) {
								return 1;
							} else {
								return Reflect::compare($a, $b);
							}
						}
					}
				}
			}
		}
	}
}
function utest_ui_common_ClassResult_1($a1, $b1) {
	{
		return Reflect::compare($a1, $b1);
	}
}
