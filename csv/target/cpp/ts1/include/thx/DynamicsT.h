// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_DynamicsT
#define INCLUDED_thx_DynamicsT

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,DynamicsT)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES DynamicsT_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef DynamicsT_obj OBJ_;
		DynamicsT_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.DynamicsT")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.DynamicsT"); }
		static hx::ObjectPtr< DynamicsT_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DynamicsT_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("DynamicsT","\xa0","\x01","\x2f","\xc0"); }

		static Bool isEmpty( ::Dynamic o);
		static ::Dynamic isEmpty_dyn();

		static Bool exists( ::Dynamic o,::String name);
		static ::Dynamic exists_dyn();

		static ::Array< ::String > fields( ::Dynamic o);
		static ::Dynamic fields_dyn();

		static  ::Dynamic merge( ::Dynamic to, ::Dynamic from, ::Dynamic replacef);
		static ::Dynamic merge_dyn();

		static Int size( ::Dynamic o);
		static ::Dynamic size_dyn();

		static ::cpp::VirtualArray values( ::Dynamic o);
		static ::Dynamic values_dyn();

		static ::Array< ::Dynamic> tuples( ::Dynamic o);
		static ::Dynamic tuples_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_DynamicsT */ 
