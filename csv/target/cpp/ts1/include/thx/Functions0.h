// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_Functions0
#define INCLUDED_thx_Functions0

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,Functions0)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES Functions0_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Functions0_obj OBJ_;
		Functions0_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.Functions0")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.Functions0"); }
		static hx::ObjectPtr< Functions0_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Functions0_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Functions0","\x95","\x09","\x57","\xc5"); }

		static  ::Dynamic after( ::Dynamic callback,Int n);
		static ::Dynamic after_dyn();

		static  ::Dynamic join( ::Dynamic fa, ::Dynamic fb);
		static ::Dynamic join_dyn();

		static  ::Dynamic once( ::Dynamic f);
		static ::Dynamic once_dyn();

		static  ::Dynamic negate( ::Dynamic callback);
		static ::Dynamic negate_dyn();

		static  ::Dynamic times(Int n, ::Dynamic callback);
		static ::Dynamic times_dyn();

		static  ::Dynamic timesi(Int n, ::Dynamic callback);
		static ::Dynamic timesi_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_Functions0 */ 
