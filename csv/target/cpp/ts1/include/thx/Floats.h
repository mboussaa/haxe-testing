// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_Floats
#define INCLUDED_thx_Floats

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS1(thx,Floats)
HX_DECLARE_CLASS1(thx,OrderingImpl)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES Floats_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Floats_obj OBJ_;
		Floats_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.Floats")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.Floats"); }
		static hx::ObjectPtr< Floats_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Floats_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Floats","\x77","\x97","\xea","\x75"); }

		static void __boot();
		static Float TOLERANCE;
		static Float EPSILON;
		static  ::EReg pattern_parse;
		static Float angleDifference(Float a,Float b, ::Dynamic turn);
		static ::Dynamic angleDifference_dyn();

		static Float ceilTo(Float f,Int decimals);
		static ::Dynamic ceilTo_dyn();

		static Bool canParse(::String s);
		static ::Dynamic canParse_dyn();

		static Float clamp(Float v,Float min,Float max);
		static ::Dynamic clamp_dyn();

		static Float clampSym(Float v,Float max);
		static ::Dynamic clampSym_dyn();

		static Int compare(Float a,Float b);
		static ::Dynamic compare_dyn();

		static Float floorTo(Float f,Int decimals);
		static ::Dynamic floorTo_dyn();

		static Float interpolate(Float f,Float a,Float b);
		static ::Dynamic interpolate_dyn();

		static Float interpolateAngle(Float f,Float a,Float b,hx::Null< Float >  turn);
		static ::Dynamic interpolateAngle_dyn();

		static Float interpolateAngleWidest(Float f,Float a,Float b,hx::Null< Float >  turn);
		static ::Dynamic interpolateAngleWidest_dyn();

		static Float interpolateAngleCW(Float f,Float a,Float b,hx::Null< Float >  turn);
		static ::Dynamic interpolateAngleCW_dyn();

		static Float interpolateAngleCCW(Float f,Float a,Float b,hx::Null< Float >  turn);
		static ::Dynamic interpolateAngleCCW_dyn();

		static  ::Dynamic max( ::Dynamic a, ::Dynamic b);
		static ::Dynamic max_dyn();

		static  ::Dynamic min( ::Dynamic a, ::Dynamic b);
		static ::Dynamic min_dyn();

		static Bool nearEquals(Float a,Float b, ::Dynamic tollerance);
		static ::Dynamic nearEquals_dyn();

		static Bool nearEqualAngles(Float a,Float b, ::Dynamic turn, ::Dynamic tollerance);
		static ::Dynamic nearEqualAngles_dyn();

		static Bool nearZero(Float n, ::Dynamic tollerance);
		static ::Dynamic nearZero_dyn();

		static Float normalize(Float v);
		static ::Dynamic normalize_dyn();

		static Float parse(::String s);
		static ::Dynamic parse_dyn();

		static Float root(Float base,Float index);
		static ::Dynamic root_dyn();

		static Float roundTo(Float f,Int decimals);
		static ::Dynamic roundTo_dyn();

		static Int sign( ::Dynamic value);
		static ::Dynamic sign_dyn();

		static ::String toString(Float v);
		static ::Dynamic toString_dyn();

		static Float toFloat(::String s);
		static ::Dynamic toFloat_dyn();

		static Int trunc(Float value);
		static ::Dynamic trunc_dyn();

		static Float ftrunc(Float value);
		static ::Dynamic ftrunc_dyn();

		static Float wrap(Float v,Float min,Float max);
		static ::Dynamic wrap_dyn();

		static Float wrapCircular(Float v,Float max);
		static ::Dynamic wrapCircular_dyn();

		static  ::Dynamic order;
		static  ::Dynamic &order_dyn() { return order;}
		static  ::Dynamic monoid;
};

} // end namespace thx

#endif /* INCLUDED_thx_Floats */ 
