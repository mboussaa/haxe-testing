// Generated by Haxe 3.3.0
#ifndef INCLUDED_utest_TestFixture
#define INCLUDED_utest_TestFixture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(utest,TestFixture)

namespace utest{


class HXCPP_CLASS_ATTRIBUTES TestFixture_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestFixture_obj OBJ_;
		TestFixture_obj();

	public:
		void __construct( ::Dynamic target,::String method,::String setup,::String teardown);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="utest.TestFixture")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"utest.TestFixture"); }
		static hx::ObjectPtr< TestFixture_obj > __new( ::Dynamic target,::String method,::String setup,::String teardown);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestFixture_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("TestFixture","\x77","\x41","\x1d","\x93"); }

		 ::Dynamic target;
		::String method;
		::String setup;
		::String teardown;
		void checkMethod(::String name,::String arg);
		::Dynamic checkMethod_dyn();

};

} // end namespace utest

#endif /* INCLUDED_utest_TestFixture */ 
