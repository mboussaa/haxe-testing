// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_utest_ui_common_ClassResult
#include <utest/ui/common/ClassResult.h>
#endif
#ifndef INCLUDED_utest_ui_common_FixtureResult
#include <utest/ui/common/FixtureResult.h>
#endif
#ifndef INCLUDED_utest_ui_common_ResultStats
#include <utest/ui/common/ResultStats.h>
#endif

namespace utest{
namespace ui{
namespace common{

void ClassResult_obj::__construct(::String className,::String setupName,::String teardownName){
            	HX_STACK_FRAME("utest.ui.common.ClassResult","new",0x8da27e37,"utest.ui.common.ClassResult.new","utest/ui/common/ClassResult.hx",16,0xe4199a3a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(className,"className")
            	HX_STACK_ARG(setupName,"setupName")
            	HX_STACK_ARG(teardownName,"teardownName")
HXLINE(  17)		this->fixtures =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  18)		this->className = className;
HXLINE(  19)		this->setupName = setupName;
HXLINE(  20)		this->hasSetup = hx::IsNotNull( setupName );
HXLINE(  21)		this->teardownName = teardownName;
HXLINE(  22)		this->hasTeardown = hx::IsNotNull( teardownName );
HXLINE(  24)		this->methods = (int)0;
HXLINE(  25)		this->stats =  ::utest::ui::common::ResultStats_obj::__new();
            	}

Dynamic ClassResult_obj::__CreateEmpty() { return new ClassResult_obj; }

hx::ObjectPtr< ClassResult_obj > ClassResult_obj::__new(::String className,::String setupName,::String teardownName)
{
	hx::ObjectPtr< ClassResult_obj > _hx_result = new ClassResult_obj();
	_hx_result->__construct(className,setupName,teardownName);
	return _hx_result;
}

Dynamic ClassResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ClassResult_obj > _hx_result = new ClassResult_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void ClassResult_obj::add( ::utest::ui::common::FixtureResult result){
            	HX_STACK_FRAME("utest.ui.common.ClassResult","add",0x8d989ff8,"utest.ui.common.ClassResult.add","utest/ui/common/ClassResult.hx",28,0xe4199a3a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE(  29)		Bool _hx_tmp = this->fixtures->exists(result->methodName);
HXDLIN(  29)		if (_hx_tmp) {
HXLINE(  29)			HX_STACK_DO_THROW(HX_("invalid duplicated fixture result",b2,5f,82,0c));
            		}
HXLINE(  31)		this->stats->wire(result->stats);
HXLINE(  33)		this->methods++;
HXLINE(  34)		this->fixtures->set(result->methodName,result);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClassResult_obj,add,(void))

 ::utest::ui::common::FixtureResult ClassResult_obj::get(::String method){
            	HX_STACK_FRAME("utest.ui.common.ClassResult","get",0x8d9d2e6d,"utest.ui.common.ClassResult.get","utest/ui/common/ClassResult.hx",38,0xe4199a3a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(method,"method")
HXLINE(  38)		return this->fixtures->get(method).StaticCast<  ::utest::ui::common::FixtureResult >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClassResult_obj,get,return )

Bool ClassResult_obj::exists(::String method){
            	HX_STACK_FRAME("utest.ui.common.ClassResult","exists",0xdf587065,"utest.ui.common.ClassResult.exists","utest/ui/common/ClassResult.hx",41,0xe4199a3a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(method,"method")
HXLINE(  41)		return this->fixtures->exists(method);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClassResult_obj,exists,return )

::Array< ::String > ClassResult_obj::methodNames(hx::Null< Bool >  __o_errorsHavePriority){
Bool errorsHavePriority = __o_errorsHavePriority.Default(true);
            	HX_STACK_FRAME("utest.ui.common.ClassResult","methodNames",0x932a55fe,"utest.ui.common.ClassResult.methodNames","utest/ui/common/ClassResult.hx",43,0xe4199a3a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(errorsHavePriority,"errorsHavePriority")
HXLINE(  44)		HX_VARI( ::Array< ::String >,names) = ::Array_obj< ::String >::__new(0);
HXLINE(  45)		{
HXLINE(  45)			HX_VARI(  ::Dynamic,tmp) = this->fixtures->keys();
HXDLIN(  45)			while(true){
HXLINE(  45)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  45)				if (_hx_tmp) {
HXLINE(  45)					goto _hx_goto_0;
            				}
HXDLIN(  45)				HX_VARI( ::String,name) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  46)				names->push(name);
            			}
            			_hx_goto_0:;
            		}
HXLINE(  47)		if (errorsHavePriority) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::utest::ui::common::ClassResult,me) HXARGC(2)
            			Int _hx_run(::String a,::String b){
            				HX_STACK_FRAME("utest.ui.common.ClassResult","methodNames",0x932a55fe,"utest.ui.common.ClassResult.methodNames","utest/ui/common/ClassResult.hx",49,0xe4199a3a)
            				HX_STACK_ARG(a,"a")
            				HX_STACK_ARG(b,"b")
HXLINE(  50)				HX_VARI(  ::utest::ui::common::ResultStats,as) = me->get(a)->stats;
HXLINE(  51)				HX_VARI(  ::utest::ui::common::ResultStats,bs) = me->get(b)->stats;
HXLINE(  52)				if (as->hasErrors) {
HXLINE(  53)					if (!(bs->hasErrors)) {
HXLINE(  53)						return (int)-1;
            					}
            					else {
HXLINE(  53)						if ((as->errors == bs->errors)) {
HXLINE(  53)							return ::Reflect_obj::compare(a,b);
            						}
            						else {
HXLINE(  53)							return ::Reflect_obj::compare(as->errors,bs->errors);
            						}
            					}
            				}
            				else {
HXLINE(  54)					if (bs->hasErrors) {
HXLINE(  55)						return (int)1;
            					}
            					else {
HXLINE(  56)						if (as->hasFailures) {
HXLINE(  57)							if (!(bs->hasFailures)) {
HXLINE(  57)								return (int)-1;
            							}
            							else {
HXLINE(  57)								if ((as->failures == bs->failures)) {
HXLINE(  57)									return ::Reflect_obj::compare(a,b);
            								}
            								else {
HXLINE(  57)									return ::Reflect_obj::compare(as->failures,bs->failures);
            								}
            							}
            						}
            						else {
HXLINE(  58)							if (bs->hasFailures) {
HXLINE(  59)								return (int)1;
            							}
            							else {
HXLINE(  60)								if (as->hasWarnings) {
HXLINE(  61)									if (!(bs->hasWarnings)) {
HXLINE(  61)										return (int)-1;
            									}
            									else {
HXLINE(  61)										if ((as->warnings == bs->warnings)) {
HXLINE(  61)											return ::Reflect_obj::compare(a,b);
            										}
            										else {
HXLINE(  61)											return ::Reflect_obj::compare(as->warnings,bs->warnings);
            										}
            									}
            								}
            								else {
HXLINE(  62)									if (bs->hasWarnings) {
HXLINE(  63)										return (int)1;
            									}
            									else {
HXLINE(  65)										return ::Reflect_obj::compare(a,b);
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE(  52)				return (int)0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  48)			HX_VARI(  ::utest::ui::common::ClassResult,me) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  49)			names->sort( ::Dynamic(new _hx_Closure_0(me)));
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            			Int _hx_run(::String a1,::String b1){
            				HX_STACK_FRAME("utest.ui.common.ClassResult","methodNames",0x932a55fe,"utest.ui.common.ClassResult.methodNames","utest/ui/common/ClassResult.hx",70,0xe4199a3a)
            				HX_STACK_ARG(a1,"a1")
            				HX_STACK_ARG(b1,"b1")
HXLINE(  70)				return ::Reflect_obj::compare(a1,b1);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  69)			names->sort( ::Dynamic(new _hx_Closure_1()));
            		}
HXLINE(  73)		return names;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClassResult_obj,methodNames,return )


ClassResult_obj::ClassResult_obj()
{
}

void ClassResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ClassResult);
	HX_MARK_MEMBER_NAME(fixtures,"fixtures");
	HX_MARK_MEMBER_NAME(className,"className");
	HX_MARK_MEMBER_NAME(setupName,"setupName");
	HX_MARK_MEMBER_NAME(teardownName,"teardownName");
	HX_MARK_MEMBER_NAME(hasSetup,"hasSetup");
	HX_MARK_MEMBER_NAME(hasTeardown,"hasTeardown");
	HX_MARK_MEMBER_NAME(methods,"methods");
	HX_MARK_MEMBER_NAME(stats,"stats");
	HX_MARK_END_CLASS();
}

void ClassResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fixtures,"fixtures");
	HX_VISIT_MEMBER_NAME(className,"className");
	HX_VISIT_MEMBER_NAME(setupName,"setupName");
	HX_VISIT_MEMBER_NAME(teardownName,"teardownName");
	HX_VISIT_MEMBER_NAME(hasSetup,"hasSetup");
	HX_VISIT_MEMBER_NAME(hasTeardown,"hasTeardown");
	HX_VISIT_MEMBER_NAME(methods,"methods");
	HX_VISIT_MEMBER_NAME(stats,"stats");
}

hx::Val ClassResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stats") ) { return hx::Val( stats); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"methods") ) { return hx::Val( methods); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fixtures") ) { return hx::Val( fixtures); }
		if (HX_FIELD_EQ(inName,"hasSetup") ) { return hx::Val( hasSetup); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"className") ) { return hx::Val( className); }
		if (HX_FIELD_EQ(inName,"setupName") ) { return hx::Val( setupName); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hasTeardown") ) { return hx::Val( hasTeardown); }
		if (HX_FIELD_EQ(inName,"methodNames") ) { return hx::Val( methodNames_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"teardownName") ) { return hx::Val( teardownName); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ClassResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"stats") ) { stats=inValue.Cast<  ::utest::ui::common::ResultStats >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"methods") ) { methods=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fixtures") ) { fixtures=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hasSetup") ) { hasSetup=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"className") ) { className=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"setupName") ) { setupName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hasTeardown") ) { hasTeardown=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"teardownName") ) { teardownName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ClassResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fixtures","\x8a","\x94","\x62","\xeb"));
	outFields->push(HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc"));
	outFields->push(HX_HCSTRING("setupName","\x68","\xcf","\x8d","\xa3"));
	outFields->push(HX_HCSTRING("teardownName","\x6f","\x9a","\x1d","\xec"));
	outFields->push(HX_HCSTRING("hasSetup","\xc3","\xf8","\x87","\x06"));
	outFields->push(HX_HCSTRING("hasTeardown","\x7e","\x8f","\x44","\xd4"));
	outFields->push(HX_HCSTRING("methods","\x72","\x0e","\x3d","\x26"));
	outFields->push(HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ClassResult_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(ClassResult_obj,fixtures),HX_HCSTRING("fixtures","\x8a","\x94","\x62","\xeb")},
	{hx::fsString,(int)offsetof(ClassResult_obj,className),HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc")},
	{hx::fsString,(int)offsetof(ClassResult_obj,setupName),HX_HCSTRING("setupName","\x68","\xcf","\x8d","\xa3")},
	{hx::fsString,(int)offsetof(ClassResult_obj,teardownName),HX_HCSTRING("teardownName","\x6f","\x9a","\x1d","\xec")},
	{hx::fsBool,(int)offsetof(ClassResult_obj,hasSetup),HX_HCSTRING("hasSetup","\xc3","\xf8","\x87","\x06")},
	{hx::fsBool,(int)offsetof(ClassResult_obj,hasTeardown),HX_HCSTRING("hasTeardown","\x7e","\x8f","\x44","\xd4")},
	{hx::fsInt,(int)offsetof(ClassResult_obj,methods),HX_HCSTRING("methods","\x72","\x0e","\x3d","\x26")},
	{hx::fsObject /*::utest::ui::common::ResultStats*/ ,(int)offsetof(ClassResult_obj,stats),HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ClassResult_obj_sStaticStorageInfo = 0;
#endif

static ::String ClassResult_obj_sMemberFields[] = {
	HX_HCSTRING("fixtures","\x8a","\x94","\x62","\xeb"),
	HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc"),
	HX_HCSTRING("setupName","\x68","\xcf","\x8d","\xa3"),
	HX_HCSTRING("teardownName","\x6f","\x9a","\x1d","\xec"),
	HX_HCSTRING("hasSetup","\xc3","\xf8","\x87","\x06"),
	HX_HCSTRING("hasTeardown","\x7e","\x8f","\x44","\xd4"),
	HX_HCSTRING("methods","\x72","\x0e","\x3d","\x26"),
	HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("methodNames","\x27","\x79","\x27","\xbb"),
	::String(null()) };

static void ClassResult_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ClassResult_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ClassResult_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ClassResult_obj::__mClass,"__mClass");
};

#endif

hx::Class ClassResult_obj::__mClass;

void ClassResult_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.ui.common.ClassResult","\xc5","\x96","\x73","\x30");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ClassResult_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ClassResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ClassResult_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ClassResult_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ClassResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ClassResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
} // end namespace ui
} // end namespace common
