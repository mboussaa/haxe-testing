// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Dynamics
#include <thx/Dynamics.h>
#endif
#ifndef INCLUDED_thx_Iterators
#include <thx/Iterators.h>
#endif
#ifndef INCLUDED_thx_Maps
#include <thx/Maps.h>
#endif

namespace thx{

void Maps_obj::__construct() { }

Dynamic Maps_obj::__CreateEmpty() { return new Maps_obj; }

hx::ObjectPtr< Maps_obj > Maps_obj::__new()
{
	hx::ObjectPtr< Maps_obj > _hx_result = new Maps_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Maps_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Maps_obj > _hx_result = new Maps_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Dynamic Maps_obj::copyTo(::Dynamic src,::Dynamic dst){
            	HX_STACK_FRAME("thx.Maps","copyTo",0xf7821ebd,"thx.Maps.copyTo","thx/Maps.hx",22,0xf80ff4dc)
            	HX_STACK_ARG(src,"src")
            	HX_STACK_ARG(dst,"dst")
HXLINE(  23)		{
HXLINE(  23)			HX_VARI(  ::Dynamic,tmp) = ::haxe::IMap_obj::keys(src);
HXDLIN(  23)			while(true){
HXLINE(  23)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  23)				if (_hx_tmp) {
HXLINE(  23)					goto _hx_goto_0;
            				}
HXDLIN(  23)				HX_VARI(  ::Dynamic,key) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE(  24)				 ::Dynamic _hx_tmp1 = ::haxe::IMap_obj::get(src,key);
HXDLIN(  24)				::haxe::IMap_obj::set(dst,key,_hx_tmp1);
            			}
            			_hx_goto_0:;
            		}
HXLINE(  25)		return dst;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Maps_obj,copyTo,return )

::Array< ::Dynamic> Maps_obj::tuples(::Dynamic map){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Dynamic,map) HXARGC(1)
            		 ::Dynamic _hx_run( ::Dynamic key){
            			HX_STACK_FRAME("thx.Maps","tuples",0x37f0ed98,"thx.Maps.tuples","thx/Maps.hx",33,0xf80ff4dc)
            			HX_STACK_ARG(key,"key")
HXLINE(  33)			HX_VARI(  ::Dynamic,_1) = ::haxe::IMap_obj::get(map,key);
HXDLIN(  33)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("_0",f1,52,00,00),key)
            				->setFixed(1,HX_("_1",f2,52,00,00),_1));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Maps","tuples",0x37f0ed98,"thx.Maps.tuples","thx/Maps.hx",32,0xf80ff4dc)
            	HX_STACK_ARG(map,"map")
HXLINE(  32)		 ::Dynamic _hx_tmp = ::haxe::IMap_obj::keys(map);
HXDLIN(  32)		return ::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0(map)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Maps_obj,tuples,return )

::Dynamic Maps_obj::mapValues(::Dynamic map, ::Dynamic f,::Dynamic acc){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(2)
            		::Dynamic _hx_run(::Dynamic m, ::Dynamic t){
            			HX_STACK_FRAME("thx.Maps","mapValues",0x0fd33791,"thx.Maps.mapValues","thx/Maps.hx",40,0xf80ff4dc)
            			HX_STACK_ARG(m,"m")
            			HX_STACK_ARG(t,"t")
HXLINE(  41)			{
HXLINE(  41)				HX_VARI(  ::Dynamic,value) = f( ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)));
HXDLIN(  41)				::haxe::IMap_obj::set(m, ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),value);
            			}
HXLINE(  42)			return m;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.Maps","mapValues",0x0fd33791,"thx.Maps.mapValues","thx/Maps.hx",40,0xf80ff4dc)
            	HX_STACK_ARG(map,"map")
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(acc,"acc")
HXLINE(  40)		return ::thx::Maps_obj::reduce(map, ::Dynamic(new _hx_Closure_0(f)),acc);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Maps_obj,mapValues,return )

 ::Dynamic Maps_obj::reduce(::Dynamic map, ::Dynamic f, ::Dynamic acc){
            	HX_STACK_FRAME("thx.Maps","reduce",0x2ce92fd3,"thx.Maps.reduce","thx/Maps.hx",49,0xf80ff4dc)
            	HX_STACK_ARG(map,"map")
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(acc,"acc")
HXLINE(  49)		::Array< ::Dynamic> _hx_tmp = ::thx::Maps_obj::tuples(map);
HXDLIN(  49)		return ::thx::Arrays_obj::reduce(_hx_tmp,f,acc);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Maps_obj,reduce,return )

::cpp::VirtualArray Maps_obj::values(::Dynamic map){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Dynamic,map) HXARGC(1)
            		 ::Dynamic _hx_run( ::Dynamic key){
            			HX_STACK_FRAME("thx.Maps","values",0x7e06060f,"thx.Maps.values","thx/Maps.hx",56,0xf80ff4dc)
            			HX_STACK_ARG(key,"key")
HXLINE(  56)			return ::haxe::IMap_obj::get(map,key);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Maps","values",0x7e06060f,"thx.Maps.values","thx/Maps.hx",55,0xf80ff4dc)
            	HX_STACK_ARG(map,"map")
HXLINE(  55)		 ::Dynamic _hx_tmp = ::haxe::IMap_obj::keys(map);
HXDLIN(  55)		return ::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0(map)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Maps_obj,values,return )

::hx::EnumBase Maps_obj::getOption(::Dynamic map, ::Dynamic key){
            	HX_STACK_FRAME("thx.Maps","getOption",0x850e349e,"thx.Maps.getOption","thx/Maps.hx",63,0xf80ff4dc)
            	HX_STACK_ARG(map,"map")
            	HX_STACK_ARG(key,"key")
HXLINE(  63)		HX_VARI(  ::Dynamic,value) = ::haxe::IMap_obj::get(map,key);
HXDLIN(  63)		if (hx::IsNull( value )) {
HXLINE(  63)			return ::haxe::ds::Option_obj::None_dyn();
            		}
            		else {
HXLINE(  63)			return ::haxe::ds::Option_obj::Some(value);
            		}
HXDLIN(  63)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Maps_obj,getOption,return )

 ::Dynamic Maps_obj::toObject( ::haxe::ds::StringMap map){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		 ::Dynamic _hx_run( ::Dynamic o, ::Dynamic t){
            			HX_STACK_FRAME("thx.Maps","toObject",0xde33ce07,"thx.Maps.toObject","thx/Maps.hx",69,0xf80ff4dc)
            			HX_STACK_ARG(o,"o")
            			HX_STACK_ARG(t,"t")
HXLINE(  70)			::Reflect_obj::setField(o, ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)), ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)));
HXLINE(  71)			return o;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.Maps","toObject",0xde33ce07,"thx.Maps.toObject","thx/Maps.hx",69,0xf80ff4dc)
            	HX_STACK_ARG(map,"map")
HXLINE(  69)		::Array< ::Dynamic> _hx_tmp = ::thx::Maps_obj::tuples(map);
HXDLIN(  69)		return ::thx::Arrays_obj::reduce(_hx_tmp, ::Dynamic(new _hx_Closure_0()), ::Dynamic(hx::Anon_obj::Create(0)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Maps_obj,toObject,return )

 ::Dynamic Maps_obj::getAlt(::Dynamic map, ::Dynamic key, ::Dynamic alt){
            	HX_STACK_FRAME("thx.Maps","getAlt",0xd1683460,"thx.Maps.getAlt","thx/Maps.hx",78,0xf80ff4dc)
            	HX_STACK_ARG(map,"map")
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(alt,"alt")
HXLINE(  79)		HX_VARI(  ::Dynamic,v) = ::haxe::IMap_obj::get(map,key);
HXLINE(  80)		if (hx::IsNull( v )) {
HXLINE(  80)			return alt;
            		}
            		else {
HXLINE(  80)			return v;
            		}
HXDLIN(  80)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Maps_obj,getAlt,return )

Bool Maps_obj::isMap( ::Dynamic v){
            	HX_STACK_FRAME("thx.Maps","isMap",0x24405745,"thx.Maps.isMap","thx/Maps.hx",87,0xf80ff4dc)
            	HX_STACK_ARG(v,"v")
HXLINE(  87)		return ::Std_obj::is(v,hx::ClassOf< ::haxe::IMap >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Maps_obj,isMap,return )

::String Maps_obj::string(::Dynamic m){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run( ::Dynamic t){
            			HX_STACK_FRAME("thx.Maps","string",0x3f7f2afe,"thx.Maps.string","thx/Maps.hx",91,0xf80ff4dc)
            			HX_STACK_ARG(t,"t")
HXLINE(  91)			::String _hx_tmp1 = ::thx::Dynamics_obj::string( ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)));
HXDLIN(  91)			::String _hx_tmp2 = (_hx_tmp1 + HX_(" => ",7f,53,55,15));
HXDLIN(  91)			::String _hx_tmp3 = ::thx::Dynamics_obj::string( ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)));
HXDLIN(  91)			return (_hx_tmp2 + _hx_tmp3);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.Maps","string",0x3f7f2afe,"thx.Maps.string","thx/Maps.hx",90,0xf80ff4dc)
            	HX_STACK_ARG(m,"m")
HXLINE(  90)		::String _hx_tmp = ::thx::Maps_obj::tuples(m)->map( ::Dynamic(new _hx_Closure_0()))->join(HX_(", ",74,26,00,00));
HXDLIN(  90)		return ((HX_("[",5b,00,00,00) + _hx_tmp) + HX_("]",5d,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Maps_obj,string,return )

::Dynamic Maps_obj::merge(::Dynamic dest,::Array< ::Dynamic> sources){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		::Dynamic _hx_run(::Dynamic result,::Dynamic source){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Dynamic,source) HXARGC(2)
            			::Dynamic _hx_run(::Dynamic result1, ::Dynamic key){
            				HX_STACK_FRAME("thx.Maps","merge",0x68b5c52b,"thx.Maps.merge","thx/Maps.hx",107,0xf80ff4dc)
            				HX_STACK_ARG(result1,"result1")
            				HX_STACK_ARG(key,"key")
HXLINE( 108)				 ::Dynamic _hx_tmp1 = ::haxe::IMap_obj::get(source,key);
HXDLIN( 108)				::haxe::IMap_obj::set(result1,key,_hx_tmp1);
HXLINE( 109)				return result1;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_STACK_FRAME("thx.Maps","merge",0x68b5c52b,"thx.Maps.merge","thx/Maps.hx",107,0xf80ff4dc)
            			HX_STACK_ARG(result,"result")
            			HX_STACK_ARG(source,"source")
HXLINE( 107)			 ::Dynamic _hx_tmp = ::haxe::IMap_obj::keys(source);
HXDLIN( 107)			return ::thx::Iterators_obj::reduce(_hx_tmp, ::Dynamic(new _hx_Closure_0(source)),result);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.Maps","merge",0x68b5c52b,"thx.Maps.merge","thx/Maps.hx",106,0xf80ff4dc)
            	HX_STACK_ARG(dest,"dest")
            	HX_STACK_ARG(sources,"sources")
HXLINE( 106)		return ::thx::Arrays_obj::reduce(sources, ::Dynamic(new _hx_Closure_1()),dest);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Maps_obj,merge,return )


Maps_obj::Maps_obj()
{
}

bool Maps_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isMap") ) { outValue = isMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"copyTo") ) { outValue = copyTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tuples") ) { outValue = tuples_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reduce") ) { outValue = reduce_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"values") ) { outValue = values_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getAlt") ) { outValue = getAlt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"string") ) { outValue = string_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toObject") ) { outValue = toObject_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mapValues") ) { outValue = mapValues_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getOption") ) { outValue = getOption_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Maps_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Maps_obj_sStaticStorageInfo = 0;
#endif

static void Maps_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Maps_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Maps_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Maps_obj::__mClass,"__mClass");
};

#endif

hx::Class Maps_obj::__mClass;

static ::String Maps_obj_sStaticFields[] = {
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("tuples","\x6b","\xeb","\xa1","\x09"),
	HX_HCSTRING("mapValues","\x9e","\x5f","\x96","\x32"),
	HX_HCSTRING("reduce","\xa6","\x2d","\x9a","\xfe"),
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("getOption","\xab","\x5c","\xd1","\xa7"),
	HX_HCSTRING("toObject","\x9a","\x26","\x7e","\x3c"),
	HX_HCSTRING("getAlt","\x33","\x32","\x19","\xa3"),
	HX_HCSTRING("isMap","\xd2","\x34","\x51","\xc1"),
	HX_HCSTRING("string","\xd1","\x28","\x30","\x11"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	::String(null())
};

void Maps_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Maps","\xa1","\x5a","\x05","\x7a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Maps_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Maps_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Maps_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Maps_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Maps_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Maps_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Maps_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
