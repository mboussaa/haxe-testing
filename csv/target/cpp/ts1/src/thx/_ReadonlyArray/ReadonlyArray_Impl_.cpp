// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Functions
#include <thx/Functions.h>
#endif
#ifndef INCLUDED_thx__ReadonlyArray_ReadonlyArray_Impl_
#include <thx/_ReadonlyArray/ReadonlyArray_Impl_.h>
#endif

namespace thx{
namespace _ReadonlyArray{

void ReadonlyArray_Impl__obj::__construct() { }

Dynamic ReadonlyArray_Impl__obj::__CreateEmpty() { return new ReadonlyArray_Impl__obj; }

hx::ObjectPtr< ReadonlyArray_Impl__obj > ReadonlyArray_Impl__obj::__new()
{
	hx::ObjectPtr< ReadonlyArray_Impl__obj > _hx_result = new ReadonlyArray_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ReadonlyArray_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ReadonlyArray_Impl__obj > _hx_result = new ReadonlyArray_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::cpp::VirtualArray ReadonlyArray_Impl__obj::empty(){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","empty",0x695574ea,"thx._ReadonlyArray.ReadonlyArray_Impl_.empty","thx/ReadonlyArray.hx",9,0x323851f2)
HXLINE(   9)		return ::cpp::VirtualArray_obj::__new(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ReadonlyArray_Impl__obj,empty,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::flatten(::Array< ::Dynamic> array){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::cpp::VirtualArray _hx_run(::cpp::VirtualArray acc,::cpp::VirtualArray element){
            			HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","flatten",0xa17ff761,"thx._ReadonlyArray.ReadonlyArray_Impl_.flatten","thx/ReadonlyArray.hx",16,0x323851f2)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(element,"element")
HXLINE(  16)			return acc->concat(element);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","flatten",0xa17ff761,"thx._ReadonlyArray.ReadonlyArray_Impl_.flatten","thx/ReadonlyArray.hx",16,0x323851f2)
            	HX_STACK_ARG(array,"array")
HXLINE(  16)		return ( (::cpp::VirtualArray)(::thx::Arrays_obj::reduce(array, ::Dynamic(new _hx_Closure_0()),::cpp::VirtualArray_obj::__new(0))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReadonlyArray_Impl__obj,flatten,return )

Int ReadonlyArray_Impl__obj::indexOf(::cpp::VirtualArray this1, ::Dynamic el, ::Dynamic eq){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","indexOf",0x9b439466,"thx._ReadonlyArray.ReadonlyArray_Impl_.indexOf","thx/ReadonlyArray.hx",19,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(el,"el")
            	HX_STACK_ARG(eq,"eq")
HXLINE(  20)		Bool _hx_tmp = hx::IsNull( eq );
HXDLIN(  20)		if (_hx_tmp) {
HXLINE(  20)			eq = ::thx::Functions_obj::equality_dyn();
            		}
HXLINE(  21)		{
HXLINE(  21)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  21)			HX_VARI( Int,_g) = this1->get_length();
HXDLIN(  21)			while((_g1 < _g)){
HXLINE(  21)				HX_VARI( Int,i) = _g1++;
HXLINE(  22)				Bool _hx_tmp1 = ( (Bool)(eq(el,this1->__get(i))) );
HXDLIN(  22)				if (_hx_tmp1) {
HXLINE(  23)					return i;
            				}
            			}
            		}
HXLINE(  24)		return (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ReadonlyArray_Impl__obj,indexOf,return )

Int ReadonlyArray_Impl__obj::lastIndexOf(::cpp::VirtualArray this1, ::Dynamic el, ::Dynamic eq){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","lastIndexOf",0x5559db30,"thx._ReadonlyArray.ReadonlyArray_Impl_.lastIndexOf","thx/ReadonlyArray.hx",27,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(el,"el")
            	HX_STACK_ARG(eq,"eq")
HXLINE(  28)		Bool _hx_tmp = hx::IsNull( eq );
HXDLIN(  28)		if (_hx_tmp) {
HXLINE(  28)			eq = ::thx::Functions_obj::equality_dyn();
            		}
HXLINE(  29)		HX_VARI( Int,len) = this1->get_length();
HXLINE(  30)		{
HXLINE(  30)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  30)			while((_g1 < len)){
HXLINE(  30)				HX_VARI( Int,i) = _g1++;
HXLINE(  31)				Bool _hx_tmp1 = ( (Bool)(eq(el,this1->__get(((len - i) - (int)1)))) );
HXDLIN(  31)				if (_hx_tmp1) {
HXLINE(  32)					return i;
            				}
            			}
            		}
HXLINE(  33)		return (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ReadonlyArray_Impl__obj,lastIndexOf,return )

 ::Dynamic ReadonlyArray_Impl__obj::get(::cpp::VirtualArray this1,Int index){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","get",0x77c379b3,"thx._ReadonlyArray.ReadonlyArray_Impl_.get","thx/ReadonlyArray.hx",38,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE(  38)		return this1->__get(index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ReadonlyArray_Impl__obj,get,return )

 ::Dynamic ReadonlyArray_Impl__obj::head(::cpp::VirtualArray this1){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","head",0x53f02963,"thx._ReadonlyArray.ReadonlyArray_Impl_.head","thx/ReadonlyArray.hx",41,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  41)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReadonlyArray_Impl__obj,head,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::tail(::cpp::VirtualArray this1){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","tail",0x5bdbb6d3,"thx._ReadonlyArray.ReadonlyArray_Impl_.tail","thx/ReadonlyArray.hx",44,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  44)		return this1->slice((int)1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReadonlyArray_Impl__obj,tail,return )

 ::Dynamic ReadonlyArray_Impl__obj::reduce(::cpp::VirtualArray this1,::cpp::VirtualArray arr, ::Dynamic f, ::Dynamic initial){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","reduce",0x50f204a9,"thx._ReadonlyArray.ReadonlyArray_Impl_.reduce","thx/ReadonlyArray.hx",46,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(arr,"arr")
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(initial,"initial")
HXLINE(  47)		{
HXLINE(  47)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  47)			while((_g < arr->get_length())){
HXLINE(  47)				HX_VARI(  ::Dynamic,v) = arr->__get(_g);
HXDLIN(  47)				++_g;
HXLINE(  48)				initial = f(initial,v);
            			}
            		}
HXLINE(  49)		return initial;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ReadonlyArray_Impl__obj,reduce,return )

 ::Dynamic ReadonlyArray_Impl__obj::reducei(::cpp::VirtualArray array, ::Dynamic f, ::Dynamic initial){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","reducei",0x82d20fa0,"thx._ReadonlyArray.ReadonlyArray_Impl_.reducei","thx/ReadonlyArray.hx",55,0x323851f2)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(initial,"initial")
HXLINE(  56)		{
HXLINE(  56)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  56)			HX_VARI( Int,_g) = array->get_length();
HXDLIN(  56)			while((_g1 < _g)){
HXLINE(  56)				HX_VARI( Int,i) = _g1++;
HXLINE(  57)				initial = f(initial,array->__get(i),i);
            			}
            		}
HXLINE(  58)		return initial;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ReadonlyArray_Impl__obj,reducei,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::reverse(::cpp::VirtualArray this1){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","reverse",0xd58084bf,"thx._ReadonlyArray.ReadonlyArray_Impl_.reverse","thx/ReadonlyArray.hx",61,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  62)		HX_VARI( ::cpp::VirtualArray,arr) = this1->copy();
HXLINE(  63)		arr->reverse();
HXLINE(  64)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReadonlyArray_Impl__obj,reverse,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::toArray(::cpp::VirtualArray this1){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","toArray",0xac9805bb,"thx._ReadonlyArray.ReadonlyArray_Impl_.toArray","thx/ReadonlyArray.hx",68,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  68)		return this1->copy();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReadonlyArray_Impl__obj,toArray,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::unsafe(::cpp::VirtualArray this1){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","unsafe",0xbc7a5b29,"thx._ReadonlyArray.ReadonlyArray_Impl_.unsafe","thx/ReadonlyArray.hx",71,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  71)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReadonlyArray_Impl__obj,unsafe,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::concat(::cpp::VirtualArray this1,::cpp::VirtualArray that){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","concat",0x1a27e017,"thx._ReadonlyArray.ReadonlyArray_Impl_.concat","thx/ReadonlyArray.hx",74,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(that,"that")
HXLINE(  74)		return this1->concat(that);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ReadonlyArray_Impl__obj,concat,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::insertAt(::cpp::VirtualArray this1,Int pos, ::Dynamic el){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","insertAt",0x3b5d5a4f,"thx._ReadonlyArray.ReadonlyArray_Impl_.insertAt","thx/ReadonlyArray.hx",77,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(el,"el")
HXLINE(  77)		::cpp::VirtualArray _hx_tmp = this1->slice((int)0,pos)->concat(::cpp::VirtualArray_obj::__new(1)->init(0,el));
HXDLIN(  77)		::cpp::VirtualArray _hx_tmp1 = this1->slice(pos,null());
HXDLIN(  77)		return _hx_tmp->concat(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ReadonlyArray_Impl__obj,insertAt,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::insertAfter(::cpp::VirtualArray this1, ::Dynamic ref, ::Dynamic el, ::Dynamic eq){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","insertAfter",0x25462240,"thx._ReadonlyArray.ReadonlyArray_Impl_.insertAfter","thx/ReadonlyArray.hx",79,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(ref,"ref")
            	HX_STACK_ARG(el,"el")
            	HX_STACK_ARG(eq,"eq")
HXLINE(  80)		HX_VARI( Int,pos) = ::thx::_ReadonlyArray::ReadonlyArray_Impl__obj::indexOf(this1,ref,eq);
HXLINE(  81)		Bool _hx_tmp = (pos < (int)0);
HXDLIN(  81)		if (_hx_tmp) {
HXLINE(  82)			pos = (this1->get_length() - (int)1);
            		}
HXLINE(  83)		HX_VARI_NAME( Int,pos1,"pos") = (pos + (int)1);
HXDLIN(  83)		::cpp::VirtualArray _hx_tmp1 = this1->slice((int)0,pos1)->concat(::cpp::VirtualArray_obj::__new(1)->init(0,el));
HXDLIN(  83)		::cpp::VirtualArray _hx_tmp2 = this1->slice(pos1,null());
HXDLIN(  83)		return _hx_tmp1->concat(_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ReadonlyArray_Impl__obj,insertAfter,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::insertBefore(::cpp::VirtualArray this1, ::Dynamic ref, ::Dynamic el, ::Dynamic eq){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","insertBefore",0x41d337db,"thx._ReadonlyArray.ReadonlyArray_Impl_.insertBefore","thx/ReadonlyArray.hx",87,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(ref,"ref")
            	HX_STACK_ARG(el,"el")
            	HX_STACK_ARG(eq,"eq")
HXLINE(  87)		HX_VARI( Int,pos) = ::thx::_ReadonlyArray::ReadonlyArray_Impl__obj::indexOf(this1,ref,eq);
HXDLIN(  87)		::cpp::VirtualArray _hx_tmp = this1->slice((int)0,pos)->concat(::cpp::VirtualArray_obj::__new(1)->init(0,el));
HXDLIN(  87)		::cpp::VirtualArray _hx_tmp1 = this1->slice(pos,null());
HXDLIN(  87)		return _hx_tmp->concat(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ReadonlyArray_Impl__obj,insertBefore,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::replace(::cpp::VirtualArray this1, ::Dynamic ref, ::Dynamic el, ::Dynamic eq){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","replace",0x65ac93d1,"thx._ReadonlyArray.ReadonlyArray_Impl_.replace","thx/ReadonlyArray.hx",89,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(ref,"ref")
            	HX_STACK_ARG(el,"el")
            	HX_STACK_ARG(eq,"eq")
HXLINE(  90)		HX_VARI( Int,pos) = ::thx::_ReadonlyArray::ReadonlyArray_Impl__obj::indexOf(this1,ref,eq);
HXLINE(  91)		if ((pos < (int)0)) {
HXLINE(  91)			HX_STACK_DO_THROW( ::thx::Error_obj::__new(HX_("unable to find reference element",d8,a1,15,ff),null(),hx::SourceInfo(HX_("ReadonlyArray.hx",c7,f8,b1,15),91,HX_("thx._ReadonlyArray.ReadonlyArray_Impl_",0b,47,f5,f1),HX_("replace",34,48,28,ab))));
            		}
HXLINE(  92)		::cpp::VirtualArray _hx_tmp = this1->slice((int)0,pos)->concat(::cpp::VirtualArray_obj::__new(1)->init(0,el));
HXDLIN(  92)		::cpp::VirtualArray _hx_tmp1 = this1->slice((pos + (int)1),null());
HXDLIN(  92)		return _hx_tmp->concat(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ReadonlyArray_Impl__obj,replace,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::replaceAt(::cpp::VirtualArray this1,Int pos, ::Dynamic el){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","replaceAt",0x98d62324,"thx._ReadonlyArray.ReadonlyArray_Impl_.replaceAt","thx/ReadonlyArray.hx",96,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(el,"el")
HXLINE(  96)		::cpp::VirtualArray _hx_tmp = this1->slice((int)0,pos)->concat(::cpp::VirtualArray_obj::__new(1)->init(0,el));
HXDLIN(  96)		::cpp::VirtualArray _hx_tmp1 = this1->slice((pos + (int)1),null());
HXDLIN(  96)		return _hx_tmp->concat(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ReadonlyArray_Impl__obj,replaceAt,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::remove(::cpp::VirtualArray this1, ::Dynamic el, ::Dynamic eq){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","remove",0x56e07347,"thx._ReadonlyArray.ReadonlyArray_Impl_.remove","thx/ReadonlyArray.hx",99,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(el,"el")
            	HX_STACK_ARG(eq,"eq")
HXLINE(  99)		HX_VARI( Int,pos) = ::thx::_ReadonlyArray::ReadonlyArray_Impl__obj::indexOf(this1,el,eq);
HXDLIN(  99)		::cpp::VirtualArray _hx_tmp = this1->slice((int)0,pos);
HXDLIN(  99)		::cpp::VirtualArray _hx_tmp1 = this1->slice((pos + (int)1),null());
HXDLIN(  99)		return _hx_tmp->concat(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ReadonlyArray_Impl__obj,remove,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::removeAt(::cpp::VirtualArray this1,Int pos){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","removeAt",0x26594c1a,"thx._ReadonlyArray.ReadonlyArray_Impl_.removeAt","thx/ReadonlyArray.hx",102,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(pos,"pos")
HXLINE( 102)		::cpp::VirtualArray _hx_tmp = this1->slice((int)0,pos);
HXDLIN( 102)		::cpp::VirtualArray _hx_tmp1 = this1->slice((pos + (int)1),null());
HXDLIN( 102)		return _hx_tmp->concat(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ReadonlyArray_Impl__obj,removeAt,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::prepend(::cpp::VirtualArray this1, ::Dynamic el){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","prepend",0xf264e2ab,"thx._ReadonlyArray.ReadonlyArray_Impl_.prepend","thx/ReadonlyArray.hx",105,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(el,"el")
HXLINE( 105)		return ::cpp::VirtualArray_obj::__new(1)->init(0,el)->concat(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ReadonlyArray_Impl__obj,prepend,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::append(::cpp::VirtualArray this1, ::Dynamic el){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","append",0xe22bb8dd,"thx._ReadonlyArray.ReadonlyArray_Impl_.append","thx/ReadonlyArray.hx",108,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(el,"el")
HXLINE( 108)		return this1->concat(::cpp::VirtualArray_obj::__new(1)->init(0,el));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ReadonlyArray_Impl__obj,append,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::unshift(::cpp::VirtualArray this1, ::Dynamic el){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","unshift",0x33382f26,"thx._ReadonlyArray.ReadonlyArray_Impl_.unshift","thx/ReadonlyArray.hx",114,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(el,"el")
HXLINE( 114)		return ::cpp::VirtualArray_obj::__new(1)->init(0,el)->concat(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ReadonlyArray_Impl__obj,unshift,return )

 ::Dynamic ReadonlyArray_Impl__obj::shift(::cpp::VirtualArray this1){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","shift",0x759e26df,"thx._ReadonlyArray.ReadonlyArray_Impl_.shift","thx/ReadonlyArray.hx",119,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 120)		if ((this1->get_length() == (int)0)) {
HXLINE( 120)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("_0",f1,52,00,00),null())
            				->setFixed(1,HX_("_1",f2,52,00,00),this1));
            		}
HXLINE( 121)		HX_VARI(  ::Dynamic,value) = this1->__get((int)0);
HXLINE( 122)		::cpp::VirtualArray _hx_tmp = this1->slice((int)0,(int)0);
HXDLIN( 122)		::cpp::VirtualArray _hx_tmp1 = this1->slice((int)1,null());
HXDLIN( 122)		HX_VARI( ::cpp::VirtualArray,array) = _hx_tmp->concat(_hx_tmp1);
HXLINE( 123)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),value)
            			->setFixed(1,HX_("_1",f2,52,00,00),array));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReadonlyArray_Impl__obj,shift,return )

::cpp::VirtualArray ReadonlyArray_Impl__obj::push(::cpp::VirtualArray this1, ::Dynamic el){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","push",0x5946121d,"thx._ReadonlyArray.ReadonlyArray_Impl_.push","thx/ReadonlyArray.hx",130,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(el,"el")
HXLINE( 130)		return this1->concat(::cpp::VirtualArray_obj::__new(1)->init(0,el));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ReadonlyArray_Impl__obj,push,return )

 ::Dynamic ReadonlyArray_Impl__obj::pop(::cpp::VirtualArray this1){
            	HX_STACK_FRAME("thx._ReadonlyArray.ReadonlyArray_Impl_","pop",0x77ca56ae,"thx._ReadonlyArray.ReadonlyArray_Impl_.pop","thx/ReadonlyArray.hx",135,0x323851f2)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 136)		if ((this1->get_length() == (int)0)) {
HXLINE( 136)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("_0",f1,52,00,00),null())
            				->setFixed(1,HX_("_1",f2,52,00,00),this1));
            		}
HXLINE( 137)		HX_VARI(  ::Dynamic,value) = this1->__get((this1->get_length() - (int)1));
HXLINE( 138)		HX_VARI( Int,pos) = (this1->get_length() - (int)1);
HXDLIN( 138)		::cpp::VirtualArray _hx_tmp = this1->slice((int)0,pos);
HXDLIN( 138)		::cpp::VirtualArray _hx_tmp1 = this1->slice((pos + (int)1),null());
HXDLIN( 138)		HX_VARI( ::cpp::VirtualArray,array) = _hx_tmp->concat(_hx_tmp1);
HXLINE( 139)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),value)
            			->setFixed(1,HX_("_1",f2,52,00,00),array));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReadonlyArray_Impl__obj,pop,return )


ReadonlyArray_Impl__obj::ReadonlyArray_Impl__obj()
{
}

bool ReadonlyArray_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pop") ) { outValue = pop_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { outValue = head_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tail") ) { outValue = tail_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"push") ) { outValue = push_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { outValue = empty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shift") ) { outValue = shift_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"reduce") ) { outValue = reduce_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unsafe") ) { outValue = unsafe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"concat") ) { outValue = concat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"append") ) { outValue = append_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatten") ) { outValue = flatten_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"indexOf") ) { outValue = indexOf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reducei") ) { outValue = reducei_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reverse") ) { outValue = reverse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"replace") ) { outValue = replace_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prepend") ) { outValue = prepend_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unshift") ) { outValue = unshift_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"insertAt") ) { outValue = insertAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeAt") ) { outValue = removeAt_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"replaceAt") ) { outValue = replaceAt_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastIndexOf") ) { outValue = lastIndexOf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"insertAfter") ) { outValue = insertAfter_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"insertBefore") ) { outValue = insertBefore_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ReadonlyArray_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ReadonlyArray_Impl__obj_sStaticStorageInfo = 0;
#endif

static void ReadonlyArray_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ReadonlyArray_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ReadonlyArray_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ReadonlyArray_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class ReadonlyArray_Impl__obj::__mClass;

static ::String ReadonlyArray_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("flatten","\xc4","\xab","\xfb","\xe6"),
	HX_HCSTRING("indexOf","\xc9","\x48","\xbf","\xe0"),
	HX_HCSTRING("lastIndexOf","\x13","\xfd","\x6a","\x95"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("head","\x20","\x29","\x0b","\x45"),
	HX_HCSTRING("tail","\x90","\xb6","\xf6","\x4c"),
	HX_HCSTRING("reduce","\xa6","\x2d","\x9a","\xfe"),
	HX_HCSTRING("reducei","\x03","\xc4","\x4d","\xc8"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("unsafe","\x26","\x84","\x22","\x6a"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("insertAt","\x8c","\x7c","\x1f","\xc2"),
	HX_HCSTRING("insertAfter","\x23","\x44","\x57","\x65"),
	HX_HCSTRING("insertBefore","\x98","\xbc","\xbf","\x10"),
	HX_HCSTRING("replace","\x34","\x48","\x28","\xab"),
	HX_HCSTRING("replaceAt","\x47","\xf6","\xf1","\xfb"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("removeAt","\x57","\x6e","\x1b","\xad"),
	HX_HCSTRING("prepend","\x0e","\x97","\xe0","\x37"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("unshift","\x89","\xe3","\xb3","\x78"),
	HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	::String(null())
};

void ReadonlyArray_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._ReadonlyArray.ReadonlyArray_Impl_","\x0b","\x47","\xf5","\xf1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ReadonlyArray_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ReadonlyArray_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ReadonlyArray_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ReadonlyArray_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ReadonlyArray_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ReadonlyArray_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ReadonlyArray_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace _ReadonlyArray
