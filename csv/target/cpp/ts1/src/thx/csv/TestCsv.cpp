// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_csv_Csv
#include <thx/csv/Csv.h>
#endif
#ifndef INCLUDED_thx_csv_Dsv
#include <thx/csv/Dsv.h>
#endif
#ifndef INCLUDED_thx_csv_TestCsv
#include <thx/csv/TestCsv.h>
#endif
#ifndef INCLUDED_thx_csv_Tsv
#include <thx/csv/Tsv.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace csv{

void TestCsv_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.csv.TestCsv","new",0xb899d8d4,"thx.csv.TestCsv.new","thx/csv/TestCsv.hx",8,0x00de281e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   8)		this->x = i;
            	}

Dynamic TestCsv_obj::__CreateEmpty() { return new TestCsv_obj; }

hx::ObjectPtr< TestCsv_obj > TestCsv_obj::__new(Int i)
{
	hx::ObjectPtr< TestCsv_obj > _hx_result = new TestCsv_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestCsv_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestCsv_obj > _hx_result = new TestCsv_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestCsv_obj::testEncode(){
            	HX_STACK_FRAME("thx.csv.TestCsv","testEncode",0x0dbee614,"thx.csv.TestCsv.testEncode","thx/csv/TestCsv.hx",12,0x00de281e)
            	HX_STACK_THIS(this)
HXLINE(  12)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  12)		HX_VARI( Int,_g) = this->x;
HXDLIN(  12)		while((_g1 < _g)){
HXLINE(  12)			++_g1;
HXLINE(  13)			::String _hx_tmp = ::thx::csv::Dsv_obj::encode(::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< ::String >::__new(3)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))),::thx::csv::Csv_obj::encodeOptions);
HXDLIN(  13)			::utest::Assert_obj::same(HX_("1997,Ford,E350",b4,3d,c3,a9),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),13,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testEncode",08,38,d8,12)));
HXLINE(  14)			::String _hx_tmp1 = ::thx::csv::Dsv_obj::encode(::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< ::String >::__new(4)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))->init(3,HX_("Super, luxurious truck",80,3f,7d,39))),::thx::csv::Csv_obj::encodeOptions);
HXDLIN(  14)			::utest::Assert_obj::same(HX_("1997,Ford,E350,\"Super, luxurious truck\"",b8,fc,48,1f),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),14,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testEncode",08,38,d8,12)));
HXLINE(  15)			::String _hx_tmp2 = ::thx::csv::Dsv_obj::encode(::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< ::String >::__new(4)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))->init(3,HX_("Super, \"luxurious\" truck",24,d2,81,57))),::thx::csv::Csv_obj::encodeOptions);
HXDLIN(  15)			::utest::Assert_obj::same(HX_("1997,Ford,E350,\"Super, \"\"luxurious\"\" truck\"",38,8f,a9,80),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),15,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testEncode",08,38,d8,12)));
HXLINE(  16)			::String _hx_tmp3 = ::thx::csv::Dsv_obj::encode(::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< ::String >::__new(4)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))->init(3,HX_("Go get one now\nthey are going fast",76,33,72,3e))),::thx::csv::Csv_obj::encodeOptions);
HXDLIN(  16)			::utest::Assert_obj::same(HX_("1997,Ford,E350,\"Go get one now\nthey are going fast\"",02,49,86,d0),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),16,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testEncode",08,38,d8,12)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCsv_obj,testEncode,(void))

void TestCsv_obj::testDecode(){
            	HX_STACK_FRAME("thx.csv.TestCsv","testDecode",0x78c8512c,"thx.csv.TestCsv.testDecode","thx/csv/TestCsv.hx",20,0x00de281e)
            	HX_STACK_THIS(this)
HXLINE(  20)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  20)		HX_VARI( Int,_g) = this->x;
HXDLIN(  20)		while((_g1 < _g)){
HXLINE(  20)			++_g1;
HXLINE(  21)			::Array< ::Dynamic> _hx_tmp = ::thx::csv::Dsv_obj::decode(HX_("",00,00,00,00),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  21)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(0),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),21,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  22)			::Array< ::Dynamic> _hx_tmp1 = ::thx::csv::Dsv_obj::decode(HX_(",",2c,00,00,00),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  22)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))),_hx_tmp1,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),22,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  23)			::Array< ::Dynamic> _hx_tmp2 = ::thx::csv::Dsv_obj::decode(HX_("f,",06,59,00,00),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  23)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("f",66,00,00,00))->init(1,HX_("",00,00,00,00))),_hx_tmp2,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),23,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  24)			::Array< ::Dynamic> _hx_tmp3 = ::thx::csv::Dsv_obj::decode(HX_(",f",ba,26,00,00),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  24)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,HX_("f",66,00,00,00))),_hx_tmp3,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),24,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  25)			::Array< ::Dynamic> _hx_tmp4 = ::thx::csv::Dsv_obj::decode(HX_("x,y",45,35,5b,00),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  25)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("x",78,00,00,00))->init(1,HX_("y",79,00,00,00))),_hx_tmp4,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),25,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  26)			::Array< ::Dynamic> _hx_tmp5 = ::thx::csv::Dsv_obj::decode(HX_(",\n,",0e,6c,21,00),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  26)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00)))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))),_hx_tmp5,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),26,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  27)			::Array< ::Dynamic> _hx_tmp6 = ::thx::csv::Dsv_obj::decode(HX_(",\n\n,",c0,02,1d,1d),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  27)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00)))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("",00,00,00,00)))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))),_hx_tmp6,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),27,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  28)			::Array< ::Dynamic> _hx_tmp7 = ::thx::csv::Dsv_obj::decode(HX_(",\n\"\"\n,",00,c4,48,70),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  28)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(3)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00)))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("",00,00,00,00)))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))),_hx_tmp7,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),28,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  29)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))),::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))),null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),29,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  30)			::Array< ::Dynamic> _hx_tmp8 = ::thx::csv::Dsv_obj::decode(HX_("1997,Ford,E350",b4,3d,c3,a9),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  30)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))),_hx_tmp8,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),30,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  31)			::Array< ::Dynamic> _hx_tmp9 = ::thx::csv::Dsv_obj::decode(HX_("\"1997\",\"Ford\",\"E350\"",4c,bc,d0,34),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  31)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))),_hx_tmp9,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),31,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  32)			::Array< ::Dynamic> _hx_tmp10 = ::thx::csv::Dsv_obj::decode(HX_("1997,Ford,E350,\"Super, luxurious truck\"",b8,fc,48,1f),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  32)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))->init(3,HX_("Super, luxurious truck",80,3f,7d,39))),_hx_tmp10,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),32,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  33)			::Array< ::Dynamic> _hx_tmp11 = ::thx::csv::Dsv_obj::decode(HX_("1997,Ford,E350,\"Super, \"\"luxurious\"\" truck\"",38,8f,a9,80),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  33)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))->init(3,HX_("Super, \"luxurious\" truck",24,d2,81,57))),_hx_tmp11,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),33,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
HXLINE(  34)			::Array< ::Dynamic> _hx_tmp12 = ::thx::csv::Dsv_obj::decode(HX_("1997,Ford,E350,\"Go get one now\nthey are going fast\"",02,49,86,d0),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  34)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))->init(3,HX_("Go get one now\nthey are going fast",76,33,72,3e))),_hx_tmp12,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),34,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testDecode",20,a3,e1,7d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCsv_obj,testDecode,(void))

void TestCsv_obj::testIssue20160125(){
            	HX_STACK_FRAME("thx.csv.TestCsv","testIssue20160125",0x08c9ec42,"thx.csv.TestCsv.testIssue20160125","thx/csv/TestCsv.hx",38,0x00de281e)
            	HX_STACK_THIS(this)
HXLINE(  38)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  38)		HX_VARI( Int,_g) = this->x;
HXDLIN(  38)		while((_g1 < _g)){
HXLINE(  38)			++_g1;
HXLINE(  40)			HX_VARI( ::Array< ::Dynamic>,decoded) = ::thx::csv::Dsv_obj::decode(HX_("265671209,\"Dynagreen Environmental Protection Group Co., Ltd.\",1330,China,HKD,",ca,88,53,2f),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  40)			HX_VARI( ::String,encoded) = ::thx::csv::Dsv_obj::encode(decoded,::thx::csv::Csv_obj::encodeOptions);
HXLINE(  42)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(6)->init(0,HX_("265671209",9c,1d,95,42))->init(1,HX_("Dynagreen Environmental Protection Group Co., Ltd.",47,23,20,3b))->init(2,HX_("1330",ff,53,8a,20))->init(3,HX_("China",37,1b,e7,d8))->init(4,HX_("HKD",e1,e3,36,00))->init(5,HX_("",00,00,00,00))),decoded,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),42,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testIssue20160125",ce,80,01,43)));
HXLINE(  45)			::utest::Assert_obj::same(HX_("265671209,\"Dynagreen Environmental Protection Group Co., Ltd.\",1330,China,HKD,",ca,88,53,2f),encoded,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),45,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testIssue20160125",ce,80,01,43)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCsv_obj,testIssue20160125,(void))

void TestCsv_obj::testTerminalComma(){
            	HX_STACK_FRAME("thx.csv.TestCsv","testTerminalComma",0xd2af467b,"thx.csv.TestCsv.testTerminalComma","thx/csv/TestCsv.hx",49,0x00de281e)
            	HX_STACK_THIS(this)
HXLINE(  49)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  49)		HX_VARI( Int,_g) = this->x;
HXDLIN(  49)		while((_g1 < _g)){
HXLINE(  49)			++_g1;
HXLINE(  52)			HX_VARI( ::Array< ::Dynamic>,decoded) = ::thx::csv::Dsv_obj::decode(HX_("Company ID,Name,Ticker,Country,Currency,\n24085,1-800-Flowers.com Inc.,FLWS,United States,USD,",3c,0d,62,58),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  52)			HX_VARI( ::String,encoded) = ::thx::csv::Dsv_obj::encode(decoded,::thx::csv::Csv_obj::encodeOptions);
HXLINE(  54)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(2)->init(0,::cpp::VirtualArray_obj::__new(6)->init(0,HX_("Company ID",fe,9a,cd,c4))->init(1,HX_("Name",6b,9e,d8,33))->init(2,HX_("Ticker",2a,e1,ce,4c))->init(3,HX_("Country",36,e2,aa,ea))->init(4,HX_("Currency",71,c3,f6,74))->init(5,HX_("",00,00,00,00)))->init(1,::cpp::VirtualArray_obj::__new(6)->init(0,HX_("24085",ab,b6,8c,ec))->init(1,HX_("1-800-Flowers.com Inc.",d6,84,26,ba))->init(2,HX_("FLWS",e2,e6,7e,2e))->init(3,HX_("United States",df,3b,55,64))->init(4,HX_("USD",26,c8,40,00))->init(5,HX_("",00,00,00,00))),decoded,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),54,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testTerminalComma",07,db,e6,0c)));
HXLINE(  58)			::utest::Assert_obj::same(HX_("Company ID,Name,Ticker,Country,Currency,\n24085,1-800-Flowers.com Inc.,FLWS,United States,USD,",3c,0d,62,58),encoded,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),58,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testTerminalComma",07,db,e6,0c)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCsv_obj,testTerminalComma,(void))

void TestCsv_obj::testRoundtrip(){
            	HX_STACK_FRAME("thx.csv.TestCsv","testRoundtrip",0x3129f2f5,"thx.csv.TestCsv.testRoundtrip","thx/csv/TestCsv.hx",63,0x00de281e)
            	HX_STACK_THIS(this)
HXLINE(  63)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  63)		HX_VARI( Int,_g) = this->x;
HXDLIN(  63)		while((_g1 < _g)){
HXLINE(  63)			++_g1;
HXLINE(  70)			HX_VARI( ::Array< ::Dynamic>,decoded) = ::thx::csv::Dsv_obj::decode(HX_("Year,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL!\nair, moon roof, loaded\",4799.00",b0,b0,6c,f4),::thx::csv::Csv_obj::decodeOptions);
HXDLIN(  70)			HX_VARI( ::String,encoded) = ::thx::csv::Dsv_obj::encode(decoded,::thx::csv::Csv_obj::encodeOptions);
HXLINE(  72)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(5)->init(0,::cpp::VirtualArray_obj::__new(5)->init(0,HX_("Year",dd,f5,20,3b))->init(1,HX_("Make",0e,66,2f,33))->init(2,HX_("Model",89,93,85,9f))->init(3,HX_("Description",dc,a0,4f,43))->init(4,HX_("Price",69,be,b8,5b)))->init(1,::cpp::VirtualArray_obj::__new(5)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))->init(3,HX_("ac, abs, moon",d1,7c,54,d8))->init(4,HX_("3000.00",f1,21,01,3d)))->init(2,::cpp::VirtualArray_obj::__new(5)->init(0,HX_("1999",c8,e6,8e,20))->init(1,HX_("Chevy",43,19,e4,d8))->init(2,HX_("Venture \"Extended Edition\"",16,1d,46,79))->init(3,HX_("",00,00,00,00))->init(4,HX_("4900.00",09,d8,cc,ff)))->init(3,::cpp::VirtualArray_obj::__new(5)->init(0,HX_("1999",c8,e6,8e,20))->init(1,HX_("Chevy",43,19,e4,d8))->init(2,HX_("Venture \"Extended Edition, Very Large\"",31,63,42,e4))->init(3,HX_("",00,00,00,00))->init(4,HX_("5000.00",73,0f,2c,90)))->init(4,::cpp::VirtualArray_obj::__new(5)->init(0,HX_("1996",c5,e6,8e,20))->init(1,HX_("Jeep",06,c6,36,31))->init(2,HX_("Grand Cherokee",22,7d,7e,fe))->init(3,HX_("MUST SELL!\nair, moon roof, loaded",60,c0,f3,91))->init(4,HX_("4799.00",6b,43,a4,67))),decoded,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),72,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testRoundtrip",81,51,41,cd)));
HXLINE(  79)			::utest::Assert_obj::same(HX_("Year,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",,4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL!\nair, moon roof, loaded\",4799.00",70,94,28,a7),encoded,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),79,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testRoundtrip",81,51,41,cd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCsv_obj,testRoundtrip,(void))

void TestCsv_obj::testSemicolon(){
            	HX_STACK_FRAME("thx.csv.TestCsv","testSemicolon",0xe4f534f3,"thx.csv.TestCsv.testSemicolon","thx/csv/TestCsv.hx",88,0x00de281e)
            	HX_STACK_THIS(this)
HXLINE(  88)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  88)		HX_VARI( Int,_g) = this->x;
HXDLIN(  88)		while((_g1 < _g)){
HXLINE(  88)			++_g1;
HXLINE(  89)			HX_VARI( ::Array< ::Dynamic>,encoded) = ::thx::csv::Dsv_obj::decode(HX_("Year;Make;Model;Length\n1997;Ford;E350;2,34\n2000;Mercury;Cougar;2,38",d1,2c,b4,6d), ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("delimiter",07,07,28,86),HX_(";",3b,00,00,00))
            				->setFixed(1,HX_("trimValues",64,ea,de,bf),false)
            				->setFixed(2,HX_("quote",3c,23,f2,5d),HX_("\"",22,00,00,00))
            				->setFixed(3,HX_("escapedQuote",79,02,8f,79),HX_("\"\"",c0,1d,00,00))));
HXDLIN(  89)			HX_VARI( ::String,decoded) = ::thx::csv::Dsv_obj::encode(encoded, ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("delimiter",07,07,28,86),HX_(";",3b,00,00,00))
            				->setFixed(1,HX_("newline",54,98,a6,0c),HX_("\n",0a,00,00,00))
            				->setFixed(2,HX_("quote",3c,23,f2,5d),HX_("\"",22,00,00,00))
            				->setFixed(3,HX_("escapedQuote",79,02,8f,79),HX_("\"\"",c0,1d,00,00))));
HXLINE(  94)			::utest::Assert_obj::equals(HX_("Year;Make;Model;Length\n1997;Ford;E350;2,34\n2000;Mercury;Cougar;2,38",d1,2c,b4,6d),decoded,null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),94,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testSemicolon",7f,93,0c,81)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCsv_obj,testSemicolon,(void))

void TestCsv_obj::testAutoTrim(){
            	HX_STACK_FRAME("thx.csv.TestCsv","testAutoTrim",0x27a7fb6f,"thx.csv.TestCsv.testAutoTrim","thx/csv/TestCsv.hx",98,0x00de281e)
            	HX_STACK_THIS(this)
HXLINE(  98)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  98)		HX_VARI( Int,_g) = this->x;
HXDLIN(  98)		while((_g1 < _g)){
HXLINE(  98)			++_g1;
HXLINE(  99)			HX_VARI( ::Array< ::Dynamic>,encoded) = ::thx::csv::Dsv_obj::decode(HX_("1997 , Ford, E350",46,53,97,7e), ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("delimiter",07,07,28,86),HX_(",",2c,00,00,00))
            				->setFixed(1,HX_("trimValues",64,ea,de,bf),true)
            				->setFixed(2,HX_("quote",3c,23,f2,5d),HX_("\"",22,00,00,00))
            				->setFixed(3,HX_("escapedQuote",79,02,8f,79),HX_("\"\"",c0,1d,00,00))));
HXLINE( 101)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))),encoded,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),101,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testAutoTrim",63,b2,30,a3)));
HXLINE( 102)			encoded = ::thx::csv::Dsv_obj::decode(HX_("1997 , Ford, E350",46,53,97,7e), ::Dynamic(hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("delimiter",07,07,28,86),HX_(",",2c,00,00,00))
            				->setFixed(1,HX_("trimValues",64,ea,de,bf),false)
            				->setFixed(2,HX_("quote",3c,23,f2,5d),HX_("\"",22,00,00,00))
            				->setFixed(3,HX_("escapedQuote",79,02,8f,79),HX_("\"\"",c0,1d,00,00))));
HXLINE( 103)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("1997 ",9a,06,7b,5c))->init(1,HX_(" Ford",7b,1d,6c,9b))->init(2,HX_(" E350",49,2a,95,9a))),encoded,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),103,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testAutoTrim",63,b2,30,a3)));
HXLINE( 104)			::Array< ::Dynamic> _hx_tmp = ::thx::csv::Dsv_obj::decode(HX_("1997,Ford,E350,\" Super, luxurious truck \"",38,f9,15,d9),::thx::csv::Csv_obj::decodeOptions);
HXDLIN( 104)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_("Ford",5b,8d,99,2e))->init(2,HX_("E350",29,9a,c2,2d))->init(3,HX_(" Super, luxurious truck ",80,54,b6,9b))),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),104,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testAutoTrim",63,b2,30,a3)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCsv_obj,testAutoTrim,(void))

void TestCsv_obj::testSurroundingWhitespaces(){
            	HX_STACK_FRAME("thx.csv.TestCsv","testSurroundingWhitespaces",0xdcd627d0,"thx.csv.TestCsv.testSurroundingWhitespaces","thx/csv/TestCsv.hx",108,0x00de281e)
            	HX_STACK_THIS(this)
HXLINE( 108)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 108)		HX_VARI( Int,_g) = this->x;
HXDLIN( 108)		while((_g1 < _g)){
HXLINE( 108)			++_g1;
HXLINE( 109)			::Array< ::Dynamic> _hx_tmp = ::thx::csv::Dsv_obj::decode(HX_("1997, \"Ford\" ,E350",b4,9e,73,ab),::thx::csv::Csv_obj::decodeOptions);
HXDLIN( 109)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("1997",c6,e6,8e,20))->init(1,HX_(" \"Ford\" ",5b,01,44,de))->init(2,HX_("E350",29,9a,c2,2d))),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),109,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testSurroundingWhitespaces",c4,a1,c5,59)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCsv_obj,testSurroundingWhitespaces,(void))

void TestCsv_obj::testTsv(){
            	HX_STACK_FRAME("thx.csv.TestCsv","testTsv",0x102c2b59,"thx.csv.TestCsv.testTsv","thx/csv/TestCsv.hx",113,0x00de281e)
            	HX_STACK_THIS(this)
HXLINE( 113)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 113)		HX_VARI( Int,_g) = this->x;
HXDLIN( 113)		while((_g1 < _g)){
HXLINE( 113)			++_g1;
HXLINE( 114)			::Array< ::Dynamic> _hx_tmp = ::thx::csv::Dsv_obj::decode(HX_("1997   Ford    E350",9e,6e,ce,51),::thx::csv::Tsv_obj::decodeOptions);
HXDLIN( 114)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("1997 ",9a,06,7b,5c))->init(1,HX_(" Ford ",45,ae,2d,63))->init(2,HX_(" E350",49,2a,95,9a))),_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestCsv.hx",ca,28,31,2a),114,HX_("thx.csv.TestCsv",e2,1e,e8,5f),HX_("testTsv",e5,d8,c6,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCsv_obj,testTsv,(void))


TestCsv_obj::TestCsv_obj()
{
}

hx::Val TestCsv_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testTsv") ) { return hx::Val( testTsv_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testEncode") ) { return hx::Val( testEncode_dyn()); }
		if (HX_FIELD_EQ(inName,"testDecode") ) { return hx::Val( testDecode_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testAutoTrim") ) { return hx::Val( testAutoTrim_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testRoundtrip") ) { return hx::Val( testRoundtrip_dyn()); }
		if (HX_FIELD_EQ(inName,"testSemicolon") ) { return hx::Val( testSemicolon_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testIssue20160125") ) { return hx::Val( testIssue20160125_dyn()); }
		if (HX_FIELD_EQ(inName,"testTerminalComma") ) { return hx::Val( testTerminalComma_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"testSurroundingWhitespaces") ) { return hx::Val( testSurroundingWhitespaces_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestCsv_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestCsv_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestCsv_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestCsv_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestCsv_obj_sStaticStorageInfo = 0;
#endif

static ::String TestCsv_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testEncode","\x08","\x38","\xd8","\x12"),
	HX_HCSTRING("testDecode","\x20","\xa3","\xe1","\x7d"),
	HX_HCSTRING("testIssue20160125","\xce","\x80","\x01","\x43"),
	HX_HCSTRING("testTerminalComma","\x07","\xdb","\xe6","\x0c"),
	HX_HCSTRING("testRoundtrip","\x81","\x51","\x41","\xcd"),
	HX_HCSTRING("testSemicolon","\x7f","\x93","\x0c","\x81"),
	HX_HCSTRING("testAutoTrim","\x63","\xb2","\x30","\xa3"),
	HX_HCSTRING("testSurroundingWhitespaces","\xc4","\xa1","\xc5","\x59"),
	HX_HCSTRING("testTsv","\xe5","\xd8","\xc6","\xbd"),
	::String(null()) };

static void TestCsv_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestCsv_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestCsv_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestCsv_obj::__mClass,"__mClass");
};

#endif

hx::Class TestCsv_obj::__mClass;

void TestCsv_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.csv.TestCsv","\xe2","\x1e","\xe8","\x5f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestCsv_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestCsv_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestCsv_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestCsv_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestCsv_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestCsv_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace csv
