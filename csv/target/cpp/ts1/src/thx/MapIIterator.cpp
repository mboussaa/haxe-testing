// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_MapIIterator
#include <thx/MapIIterator.h>
#endif

namespace thx{

void MapIIterator_obj::__construct( ::Dynamic base, ::Dynamic f){
            	HX_STACK_FRAME("thx.MapIIterator","new",0x9f3d76f7,"thx.MapIIterator.new","thx/Iterators.hx",365,0x9e2b98e4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(base,"base")
            	HX_STACK_ARG(f,"f")
HXLINE( 368)		this->i = (int)0;
HXLINE( 371)		this->base = base;
HXLINE( 372)		this->f = f;
            	}

Dynamic MapIIterator_obj::__CreateEmpty() { return new MapIIterator_obj; }

hx::ObjectPtr< MapIIterator_obj > MapIIterator_obj::__new( ::Dynamic base, ::Dynamic f)
{
	hx::ObjectPtr< MapIIterator_obj > _hx_result = new MapIIterator_obj();
	_hx_result->__construct(base,f);
	return _hx_result;
}

Dynamic MapIIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MapIIterator_obj > _hx_result = new MapIIterator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

 ::Dynamic MapIIterator_obj::next(){
            	HX_STACK_FRAME("thx.MapIIterator","next",0xb68aa27c,"thx.MapIIterator.next","thx/Iterators.hx",375,0x9e2b98e4)
            	HX_STACK_THIS(this)
HXLINE( 376)		 ::Dynamic _hx_tmp =  ::Dynamic(this->base->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXDLIN( 376)		HX_VARI(  ::Dynamic,result) = this->f(_hx_tmp,this->i);
HXLINE( 377)		this->i++;
HXLINE( 378)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MapIIterator_obj,next,return )

Bool MapIIterator_obj::hasNext(){
            	HX_STACK_FRAME("thx.MapIIterator","hasNext",0x557ce384,"thx.MapIIterator.hasNext","thx/Iterators.hx",382,0x9e2b98e4)
            	HX_STACK_THIS(this)
HXLINE( 382)		return ( (Bool)( ::Dynamic(this->base->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(MapIIterator_obj,hasNext,return )


MapIIterator_obj::MapIIterator_obj()
{
}

void MapIIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MapIIterator);
	HX_MARK_MEMBER_NAME(base,"base");
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_END_CLASS();
}

void MapIIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(base,"base");
	HX_VISIT_MEMBER_NAME(f,"f");
	HX_VISIT_MEMBER_NAME(i,"i");
}

hx::Val MapIIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"f") ) { return hx::Val( f); }
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"base") ) { return hx::Val( base); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MapIIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"base") ) { base=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MapIIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("base","\x11","\xe8","\x10","\x41"));
	outFields->push(HX_HCSTRING("i","\x69","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MapIIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(MapIIterator_obj,base),HX_HCSTRING("base","\x11","\xe8","\x10","\x41")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(MapIIterator_obj,f),HX_HCSTRING("f","\x66","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(MapIIterator_obj,i),HX_HCSTRING("i","\x69","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MapIIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String MapIIterator_obj_sMemberFields[] = {
	HX_HCSTRING("base","\x11","\xe8","\x10","\x41"),
	HX_HCSTRING("f","\x66","\x00","\x00","\x00"),
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	::String(null()) };

static void MapIIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MapIIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MapIIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MapIIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class MapIIterator_obj::__mClass;

void MapIIterator_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.MapIIterator","\x85","\x2f","\x73","\xe1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MapIIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MapIIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MapIIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MapIIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MapIIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MapIIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
