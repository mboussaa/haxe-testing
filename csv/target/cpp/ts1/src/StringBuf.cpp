// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif


void StringBuf_obj::__construct(){
            	HX_STACK_FRAME("StringBuf","new",0xaaa8f4b4,"StringBuf.new","/usr/lib/haxe/std/cpp/_std/StringBuf.hx",30,0x629ed4da)
            	HX_STACK_THIS(this)
HXLINE(  30)		this->b = ::Array_obj< ::String >::__new();
            	}

Dynamic StringBuf_obj::__CreateEmpty() { return new StringBuf_obj; }

hx::ObjectPtr< StringBuf_obj > StringBuf_obj::__new()
{
	hx::ObjectPtr< StringBuf_obj > _hx_result = new StringBuf_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic StringBuf_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StringBuf_obj > _hx_result = new StringBuf_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int StringBuf_obj::get_length(){
            	HX_STACK_FRAME("StringBuf","get_length",0xe673d2db,"StringBuf.get_length","/usr/lib/haxe/std/cpp/_std/StringBuf.hx",33,0x629ed4da)
            	HX_STACK_THIS(this)
HXLINE(  34)		HX_VARI( Int,len) = (int)0;
HXLINE(  35)		{
HXLINE(  35)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  35)			HX_VARI( ::Array< ::String >,_g1) = this->b;
HXDLIN(  35)			while((_g < _g1->length)){
HXLINE(  35)				HX_VARI( ::String,s) = _g1->__get(_g);
HXDLIN(  35)				++_g;
HXLINE(  36)				Int _hx_tmp;
HXDLIN(  36)				if (hx::IsNull( s )) {
HXLINE(  36)					_hx_tmp = (int)4;
            				}
            				else {
HXLINE(  36)					_hx_tmp = s.length;
            				}
HXDLIN(  36)				hx::AddEq(len,_hx_tmp);
            			}
            		}
HXLINE(  37)		return len;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringBuf_obj,get_length,return )

void StringBuf_obj::add( ::Dynamic x){
            	HX_STACK_FRAME("StringBuf","add",0xaa9f1675,"StringBuf.add","/usr/lib/haxe/std/cpp/_std/StringBuf.hx",41,0x629ed4da)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(  41)		::String _hx_tmp = ::Std_obj::string(x);
HXDLIN(  41)		this->b->push(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StringBuf_obj,add,(void))


StringBuf_obj::StringBuf_obj()
{
}

void StringBuf_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StringBuf);
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_END_CLASS();
}

void StringBuf_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(b,"b");
}

hx::Val StringBuf_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val StringBuf_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StringBuf_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo StringBuf_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(StringBuf_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *StringBuf_obj_sStaticStorageInfo = 0;
#endif

static ::String StringBuf_obj_sMemberFields[] = {
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	::String(null()) };

static void StringBuf_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StringBuf_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StringBuf_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StringBuf_obj::__mClass,"__mClass");
};

#endif

hx::Class StringBuf_obj::__mClass;

void StringBuf_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("StringBuf","\xc2","\xca","\x83","\x69");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StringBuf_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StringBuf_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StringBuf_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StringBuf_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringBuf_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringBuf_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

