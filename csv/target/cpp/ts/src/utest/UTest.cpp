// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_utest_Dispatcher
#include <utest/Dispatcher.h>
#endif
#ifndef INCLUDED_utest_Runner
#include <utest/Runner.h>
#endif
#ifndef INCLUDED_utest_UTest
#include <utest/UTest.h>
#endif
#ifndef INCLUDED_utest_ui_Report
#include <utest/ui/Report.h>
#endif
#ifndef INCLUDED_utest_ui_common_HeaderDisplayMode
#include <utest/ui/common/HeaderDisplayMode.h>
#endif
#ifndef INCLUDED_utest_ui_common_IReport
#include <utest/ui/common/IReport.h>
#endif
#ifndef INCLUDED_utest_ui_common_SuccessResultsDisplayMode
#include <utest/ui/common/SuccessResultsDisplayMode.h>
#endif

namespace utest{

void UTest_obj::__construct() { }

Dynamic UTest_obj::__CreateEmpty() { return new UTest_obj; }

hx::ObjectPtr< UTest_obj > UTest_obj::__new()
{
	hx::ObjectPtr< UTest_obj > _hx_result = new UTest_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic UTest_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UTest_obj > _hx_result = new UTest_obj();
	_hx_result->__construct();
	return _hx_result;
}

void UTest_obj::run(::Array< ::Dynamic> cases, ::Dynamic callback){
            	HX_STACK_FRAME("utest.UTest","run",0x68955abd,"utest.UTest.run","utest/UTest.hx",7,0xcdac04df)
            	HX_STACK_ARG(cases,"cases")
            	HX_STACK_ARG(callback,"callback")
HXLINE(   9)		HX_VARI(  ::utest::Runner,runner) =  ::utest::Runner_obj::__new();
HXLINE(  10)		{
HXLINE(  10)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  10)			while((_g < cases->length)){
HXLINE(  10)				HX_VARI(  ::Dynamic,eachCase) = cases->__get(_g);
HXDLIN(  10)				++_g;
HXLINE(  11)				runner->addCase(eachCase,null(),null(),null(),null());
            			}
            		}
HXLINE(  12)		::utest::ui::Report_obj::create(runner,null(),null());
HXLINE(  13)		if (hx::IsNotNull( callback )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,callback) HXARGC(1)
            			void _hx_run( ::utest::Runner _){
            				HX_STACK_FRAME("utest.UTest","run",0x68955abd,"utest.UTest.run","utest/UTest.hx",14,0xcdac04df)
            				HX_STACK_ARG(_,"_")
HXLINE(  14)				callback();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  14)			runner->onComplete->add( ::Dynamic(new _hx_Closure_0(callback)));
            		}
HXLINE(  15)		runner->run();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UTest_obj,run,(void))


UTest_obj::UTest_obj()
{
}

bool UTest_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { outValue = run_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *UTest_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *UTest_obj_sStaticStorageInfo = 0;
#endif

static void UTest_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UTest_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UTest_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UTest_obj::__mClass,"__mClass");
};

#endif

hx::Class UTest_obj::__mClass;

static ::String UTest_obj_sStaticFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null())
};

void UTest_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.UTest","\xe0","\xb2","\x53","\x57");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UTest_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UTest_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(UTest_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< UTest_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UTest_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UTest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UTest_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
