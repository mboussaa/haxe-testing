// Generated by Haxe 3.3.0
package thx.csv;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestCsv extends haxe.lang.HxObject
{
	public TestCsv(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestCsv(int i)
	{
		//line 7 "/shared/csv/test/thx/csv/TestCsv.hx"
		thx.csv.TestCsv.__hx_ctor_thx_csv_TestCsv(this, i);
	}
	
	
	public static void __hx_ctor_thx_csv_TestCsv(thx.csv.TestCsv __temp_me115, int i)
	{
		//line 8 "/shared/csv/test/thx/csv/TestCsv.hx"
		__temp_me115.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
		return new thx.csv.TestCsv(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
		return new thx.csv.TestCsv(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testEncode()
	{
		//line 12 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g1 = 0;
		//line 12 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g = this.x;
		//line 12 "/shared/csv/test/thx/csv/TestCsv.hx"
		while (( _g1 < _g ))
		{
			//line 12 "/shared/csv/test/thx/csv/TestCsv.hx"
			 ++ _g1;
			//line 13 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same("1997,Ford,E350", thx.csv.Dsv.encode(new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1997", "Ford", "E350"})}), thx.csv.Csv.encodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testEncode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (13) )) )}));
			//line 14 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same("1997,Ford,E350,\"Super, luxurious truck\"", thx.csv.Dsv.encode(new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1997", "Ford", "E350", "Super, luxurious truck"})}), thx.csv.Csv.encodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testEncode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
			//line 15 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same("1997,Ford,E350,\"Super, \"\"luxurious\"\" truck\"", thx.csv.Dsv.encode(new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1997", "Ford", "E350", "Super, \"luxurious\" truck"})}), thx.csv.Csv.encodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testEncode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
			//line 16 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same("1997,Ford,E350,\"Go get one now\nthey are going fast\"", thx.csv.Dsv.encode(new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.String>(new java.lang.String[]{"1997", "Ford", "E350", "Go get one now\nthey are going fast"})}), thx.csv.Csv.encodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testEncode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
		}
		
	}
	
	
	public void testDecode()
	{
		//line 20 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g1 = 0;
		//line 20 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g = this.x;
		//line 20 "/shared/csv/test/thx/csv/TestCsv.hx"
		while (( _g1 < _g ))
		{
			//line 20 "/shared/csv/test/thx/csv/TestCsv.hx"
			 ++ _g1;
			//line 21 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{}), thx.csv.Dsv.decode("", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
			//line 22 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"", ""})}), thx.csv.Dsv.decode(",", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )}));
			//line 23 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"f", ""})}), thx.csv.Dsv.decode("f,", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
			//line 24 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"", "f"})}), thx.csv.Dsv.decode(",f", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
			//line 25 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"x", "y"})}), thx.csv.Dsv.decode("x,y", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )}));
			//line 26 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"", ""}), new haxe.root.Array(new java.lang.Object[]{"", ""})}), thx.csv.Dsv.decode(",\n,", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )}));
			//line 27 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"", ""}), new haxe.root.Array(new java.lang.Object[]{""}), new haxe.root.Array(new java.lang.Object[]{"", ""})}), thx.csv.Dsv.decode(",\n\n,", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )}));
			//line 28 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"", ""}), new haxe.root.Array(new java.lang.Object[]{""}), new haxe.root.Array(new java.lang.Object[]{"", ""})}), thx.csv.Dsv.decode(",\n\"\"\n,", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (28) )) )}));
			//line 29 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350"})}), new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350"})}), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
			//line 30 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350"})}), thx.csv.Dsv.decode("1997,Ford,E350", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
			//line 31 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350"})}), thx.csv.Dsv.decode("\"1997\",\"Ford\",\"E350\"", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
			//line 32 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350", "Super, luxurious truck"})}), thx.csv.Dsv.decode("1997,Ford,E350,\"Super, luxurious truck\"", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
			//line 33 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350", "Super, \"luxurious\" truck"})}), thx.csv.Dsv.decode("1997,Ford,E350,\"Super, \"\"luxurious\"\" truck\"", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
			//line 34 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350", "Go get one now\nthey are going fast"})}), thx.csv.Dsv.decode("1997,Ford,E350,\"Go get one now\nthey are going fast\"", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testDecode"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
		}
		
	}
	
	
	public void testIssue20160125()
	{
		//line 38 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g1 = 0;
		//line 38 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g = this.x;
		//line 38 "/shared/csv/test/thx/csv/TestCsv.hx"
		while (( _g1 < _g ))
		{
			//line 38 "/shared/csv/test/thx/csv/TestCsv.hx"
			 ++ _g1;
			//line 40 "/shared/csv/test/thx/csv/TestCsv.hx"
			haxe.root.Array<haxe.root.Array<java.lang.String>> decoded = thx.csv.Dsv.decode("265671209,\"Dynagreen Environmental Protection Group Co., Ltd.\",1330,China,HKD,", thx.csv.Csv.decodeOptions);
			//line 40 "/shared/csv/test/thx/csv/TestCsv.hx"
			java.lang.String encoded = thx.csv.Dsv.encode(decoded, thx.csv.Csv.encodeOptions);
			//line 42 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"265671209", "Dynagreen Environmental Protection Group Co., Ltd.", "1330", "China", "HKD", ""})}), decoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testIssue20160125"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
			//line 45 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same("265671209,\"Dynagreen Environmental Protection Group Co., Ltd.\",1330,China,HKD,", encoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testIssue20160125"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (45) )) )}));
		}
		
	}
	
	
	public void testTerminalComma()
	{
		//line 49 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g1 = 0;
		//line 49 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g = this.x;
		//line 49 "/shared/csv/test/thx/csv/TestCsv.hx"
		while (( _g1 < _g ))
		{
			//line 49 "/shared/csv/test/thx/csv/TestCsv.hx"
			 ++ _g1;
			//line 52 "/shared/csv/test/thx/csv/TestCsv.hx"
			haxe.root.Array<haxe.root.Array<java.lang.String>> decoded = thx.csv.Dsv.decode("Company ID,Name,Ticker,Country,Currency,\n24085,1-800-Flowers.com Inc.,FLWS,United States,USD,", thx.csv.Csv.decodeOptions);
			//line 52 "/shared/csv/test/thx/csv/TestCsv.hx"
			java.lang.String encoded = thx.csv.Dsv.encode(decoded, thx.csv.Csv.encodeOptions);
			//line 54 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"Company ID", "Name", "Ticker", "Country", "Currency", ""}), new haxe.root.Array(new java.lang.Object[]{"24085", "1-800-Flowers.com Inc.", "FLWS", "United States", "USD", ""})}), decoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testTerminalComma"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (54) )) )}));
			//line 58 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same("Company ID,Name,Ticker,Country,Currency,\n24085,1-800-Flowers.com Inc.,FLWS,United States,USD,", encoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testTerminalComma"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
		}
		
	}
	
	
	public void testRoundtrip()
	{
		//line 63 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g1 = 0;
		//line 63 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g = this.x;
		//line 63 "/shared/csv/test/thx/csv/TestCsv.hx"
		while (( _g1 < _g ))
		{
			//line 63 "/shared/csv/test/thx/csv/TestCsv.hx"
			 ++ _g1;
			//line 70 "/shared/csv/test/thx/csv/TestCsv.hx"
			haxe.root.Array<haxe.root.Array<java.lang.String>> decoded = thx.csv.Dsv.decode("Year,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL!\nair, moon roof, loaded\",4799.00", thx.csv.Csv.decodeOptions);
			//line 70 "/shared/csv/test/thx/csv/TestCsv.hx"
			java.lang.String encoded = thx.csv.Dsv.encode(decoded, thx.csv.Csv.encodeOptions);
			//line 72 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"Year", "Make", "Model", "Description", "Price"}), new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350", "ac, abs, moon", "3000.00"}), new haxe.root.Array(new java.lang.Object[]{"1999", "Chevy", "Venture \"Extended Edition\"", "", "4900.00"}), new haxe.root.Array(new java.lang.Object[]{"1999", "Chevy", "Venture \"Extended Edition, Very Large\"", "", "5000.00"}), new haxe.root.Array(new java.lang.Object[]{"1996", "Jeep", "Grand Cherokee", "MUST SELL!\nair, moon roof, loaded", "4799.00"})}), decoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (72) )) )}));
			//line 79 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same("Year,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",,4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL!\nair, moon roof, loaded\",4799.00", encoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
		}
		
	}
	
	
	public void testSemicolon()
	{
		//line 88 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g1 = 0;
		//line 88 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g = this.x;
		//line 88 "/shared/csv/test/thx/csv/TestCsv.hx"
		while (( _g1 < _g ))
		{
			//line 88 "/shared/csv/test/thx/csv/TestCsv.hx"
			 ++ _g1;
			//line 89 "/shared/csv/test/thx/csv/TestCsv.hx"
			haxe.root.Array<haxe.root.Array<java.lang.String>> encoded = thx.csv.Dsv.decode("Year;Make;Model;Length\n1997;Ford;E350;2,34\n2000;Mercury;Cougar;2,38", new haxe.lang.DynamicObject(new java.lang.String[]{"delimiter", "escapedQuote", "quote", "trimValues"}, new java.lang.Object[]{";", "\"\"", "\"", false}, new java.lang.String[]{}, new double[]{}));
			//line 89 "/shared/csv/test/thx/csv/TestCsv.hx"
			java.lang.String decoded = thx.csv.Dsv.encode(encoded, new haxe.lang.DynamicObject(new java.lang.String[]{"delimiter", "escapedQuote", "newline", "quote"}, new java.lang.Object[]{";", "\"\"", "\n", "\""}, new java.lang.String[]{}, new double[]{}));
			//line 94 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.equals("Year;Make;Model;Length\n1997;Ford;E350;2,34\n2000;Mercury;Cougar;2,38", decoded, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testSemicolon"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (94) )) )}));
		}
		
	}
	
	
	public void testAutoTrim()
	{
		//line 98 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g1 = 0;
		//line 98 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g = this.x;
		//line 98 "/shared/csv/test/thx/csv/TestCsv.hx"
		while (( _g1 < _g ))
		{
			//line 98 "/shared/csv/test/thx/csv/TestCsv.hx"
			 ++ _g1;
			//line 99 "/shared/csv/test/thx/csv/TestCsv.hx"
			haxe.root.Array<haxe.root.Array<java.lang.String>> encoded = thx.csv.Dsv.decode("1997 , Ford, E350", new haxe.lang.DynamicObject(new java.lang.String[]{"delimiter", "escapedQuote", "quote", "trimValues"}, new java.lang.Object[]{",", "\"\"", "\"", true}, new java.lang.String[]{}, new double[]{}));
			//line 101 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350"})}), encoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testAutoTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (101) )) )}));
			//line 102 "/shared/csv/test/thx/csv/TestCsv.hx"
			encoded = thx.csv.Dsv.decode("1997 , Ford, E350", new haxe.lang.DynamicObject(new java.lang.String[]{"delimiter", "escapedQuote", "quote", "trimValues"}, new java.lang.Object[]{",", "\"\"", "\"", false}, new java.lang.String[]{}, new double[]{}));
			//line 103 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997 ", " Ford", " E350"})}), encoded, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testAutoTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (103) )) )}));
			//line 104 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", "Ford", "E350", " Super, luxurious truck "})}), thx.csv.Dsv.decode("1997,Ford,E350,\" Super, luxurious truck \"", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testAutoTrim"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (104) )) )}));
		}
		
	}
	
	
	public void testSurroundingWhitespaces()
	{
		//line 108 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g1 = 0;
		//line 108 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g = this.x;
		//line 108 "/shared/csv/test/thx/csv/TestCsv.hx"
		while (( _g1 < _g ))
		{
			//line 108 "/shared/csv/test/thx/csv/TestCsv.hx"
			 ++ _g1;
			//line 109 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997", " \"Ford\" ", "E350"})}), thx.csv.Dsv.decode("1997, \"Ford\" ,E350", thx.csv.Csv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testSurroundingWhitespaces"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (109) )) )}));
		}
		
	}
	
	
	public void testTsv()
	{
		//line 113 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g1 = 0;
		//line 113 "/shared/csv/test/thx/csv/TestCsv.hx"
		int _g = this.x;
		//line 113 "/shared/csv/test/thx/csv/TestCsv.hx"
		while (( _g1 < _g ))
		{
			//line 113 "/shared/csv/test/thx/csv/TestCsv.hx"
			 ++ _g1;
			//line 114 "/shared/csv/test/thx/csv/TestCsv.hx"
			utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{new haxe.root.Array(new java.lang.Object[]{"1997 ", " Ford ", " E350"})}), thx.csv.Dsv.decode("1997   Ford    E350", thx.csv.Tsv.decodeOptions), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.csv.TestCsv", "TestCsv.hx", "testTsv"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (114) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
		{
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("x")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.x = ((int) (value) );
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return value;
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
		{
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("x")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return value;
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
		{
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			switch (field.hashCode())
			{
				case -1422466075:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testTsv")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTsv")) );
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 120:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("x")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return this.x;
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case -1493114812:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testSurroundingWhitespaces")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSurroundingWhitespaces")) );
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 1320958280:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testEncode")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEncode")) );
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case -2141893341:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testAutoTrim")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testAutoTrim")) );
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 1284017440:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testDecode")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDecode")) );
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case -44387265:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testSemicolon")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testSemicolon")) );
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 1289683918:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testIssue20160125")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testIssue20160125")) );
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 665620033:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testRoundtrip")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testRoundtrip")) );
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 419776071:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testTerminalComma")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testTerminalComma")) );
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
		{
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("x")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						return ((double) (this.x) );
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
		{
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			switch (field.hashCode())
			{
				case -1422466075:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testTsv")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.testTsv();
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 1320958280:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testEncode")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.testEncode();
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case -1493114812:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testSurroundingWhitespaces")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.testSurroundingWhitespaces();
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 1284017440:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testDecode")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.testDecode();
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case -2141893341:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testAutoTrim")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.testAutoTrim();
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 1289683918:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testIssue20160125")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.testIssue20160125();
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case -44387265:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testSemicolon")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.testSemicolon();
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 419776071:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testTerminalComma")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.testTerminalComma();
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
				case 665620033:
				{
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					if (field.equals("testRoundtrip")) 
					{
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
						this.testRoundtrip();
					}
					
					//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
		baseArr.push("x");
		//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
		{
			//line 5 "/shared/csv/test/thx/csv/TestCsv.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


