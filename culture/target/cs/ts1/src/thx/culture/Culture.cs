// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.culture {
	public class Culture : global::haxe.lang.HxObject {
		
		static Culture() {
			unchecked {
				{
					global::thx.culture.Culture.cultures = new global::haxe.ds.StringMap<object>();
					global::thx.culture.Culture.list = new global::Array<object>(new object[]{});
				}
				
				global::thx.culture.Culture.invariant = new global::thx.culture.Culture("", global::thx.culture.DateFormatInfo.invariant, "", false, "iv", "IVL", false, 127, "Gregorian", "Invariant Language", "Invariant Language", "Invariant Country", "Invariant Country", global::thx.culture.NumberFormatInfo.invariant, ",", "IVL");
			}
		}
		
		
		public Culture(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Culture(string code, global::thx.culture.DateFormatInfo dateTime, string ietf, bool isNeutral, string iso2, string iso3, bool isRightToLeft, int lcid, string nameCalendar, string nameEnglish, string nameNative, string nameRegionEnglish, string nameRegionNative, global::thx.culture.NumberFormatInfo number, string separatorList, string win3) {
			global::thx.culture.Culture.__hx_ctor_thx_culture_Culture(this, code, dateTime, ietf, isNeutral, iso2, iso3, isRightToLeft, lcid, nameCalendar, nameEnglish, nameNative, nameRegionEnglish, nameRegionNative, number, separatorList, win3);
		}
		
		
		public static void __hx_ctor_thx_culture_Culture(global::thx.culture.Culture __temp_me40, string code, global::thx.culture.DateFormatInfo dateTime, string ietf, bool isNeutral, string iso2, string iso3, bool isRightToLeft, int lcid, string nameCalendar, string nameEnglish, string nameNative, string nameRegionEnglish, string nameRegionNative, global::thx.culture.NumberFormatInfo number, string separatorList, string win3) {
			__temp_me40.code = code;
			__temp_me40.dateTime = dateTime;
			__temp_me40.ietf = ietf;
			__temp_me40.isNeutral = isNeutral;
			__temp_me40.iso2 = iso2;
			__temp_me40.iso3 = iso3;
			__temp_me40.isRightToLeft = isRightToLeft;
			__temp_me40.lcid = lcid;
			__temp_me40.nameCalendar = nameCalendar;
			__temp_me40.nameEnglish = nameEnglish;
			__temp_me40.nameNative = nameNative;
			__temp_me40.nameRegionEnglish = nameRegionEnglish;
			__temp_me40.nameRegionNative = nameRegionNative;
			__temp_me40.number = number;
			__temp_me40.separatorList = separatorList;
			__temp_me40.win3 = win3;
		}
		
		
		public static global::thx.culture.Culture invariant;
		
		public static global::thx.culture.Culture fromObject(object o) {
			object tmp = global::haxe.lang.Runtime.getField(o, "code", 1103409453, true);
			global::thx.culture.DateFormatInfo tmp1 = null;
			if (( null == global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true) )) {
				tmp1 = null;
			}
			else {
				object o1 = global::haxe.lang.Runtime.getField(o, "dateTime", 1510669659, true);
				tmp1 = new global::thx.culture.DateFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", 1812362308, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", 554059097, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorAm", 726839840, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "designatorPm", 726843185, true)), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", 931922363, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", 665670594, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendar", 106319913, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "nameCalendarNative", 529765024, true)), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDays", 1055554178, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", 742587063, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameDaysShortest", 635699692, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonths", 1273872862, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", 1079146715, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitives", 667371489, true)) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", 699988920, true)) ))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateLong", 584411450, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateShort", 1528104702, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeFull", 453240570, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", 602680035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternMonthDay", 990364012, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternRfc1123", 1700034528, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeLong", 908638873, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternTimeShort", 816375999, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternUniversalSortable", 354602035, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "patternYearMonth", 980455379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorDate", 694450483, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o1, "separatorTime", 872279826, true)));
			}
			
			object tmp2 = global::haxe.lang.Runtime.getField(o, "ietf", 1169453134, true);
			object tmp3 = global::haxe.lang.Runtime.getField(o, "isNeutral", 1864919677, true);
			object tmp4 = global::haxe.lang.Runtime.getField(o, "iso2", 1170148173, true);
			object tmp5 = global::haxe.lang.Runtime.getField(o, "iso3", 1170148174, true);
			object tmp6 = global::haxe.lang.Runtime.getField(o, "isRightToLeft", 1880264788, true);
			object tmp7 = global::haxe.lang.Runtime.getField(o, "lcid", 1202619922, true);
			object tmp8 = global::haxe.lang.Runtime.getField(o, "nameCalendar", 106319913, true);
			object tmp9 = global::haxe.lang.Runtime.getField(o, "nameEnglish", 1677577253, true);
			object tmp10 = global::haxe.lang.Runtime.getField(o, "nameNative", 647756354, true);
			object tmp11 = global::haxe.lang.Runtime.getField(o, "nameRegionEnglish", 1285332817, true);
			object tmp12 = global::haxe.lang.Runtime.getField(o, "nameRegionNative", 1050456214, true);
			global::thx.culture.NumberFormatInfo tmp13 = null;
			if (( null == global::haxe.lang.Runtime.getField(o, "number", 561678025, true) )) {
				tmp13 = null;
			}
			else {
				object o2 = global::haxe.lang.Runtime.getField(o, "number", 561678025, true);
				tmp13 = new global::thx.culture.NumberFormatInfo(((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", 1531979784, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", 1437940672, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", 2013154798, true))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesCurrency", 1798631236, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesNumber", 1293712380, true)) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(o2, "groupSizesPercent", 2062500402, true)) ))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", 45312342, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativeNumber", 1747840398, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternNegativePercent", 253833312, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", 822857114, true))) ), ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.getField(o2, "patternPositivePercent", 652148892, true))) ), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", 2058605085, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", 1660995221, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", 214711673, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", 2037785099, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupNumber", 193568515, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "separatorGroupPercent", 1543554379, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signNegative", 282949586, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "signPositive", 177600534, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolCurrency", 311921353, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNaN", 1610611779, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", 1484698101, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPercent", 1112096333, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPermille", 41050500, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", 114759225, true)));
			}
			
			return new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(tmp), tmp1, global::haxe.lang.Runtime.toString(tmp2), global::haxe.lang.Runtime.toBool(tmp3), global::haxe.lang.Runtime.toString(tmp4), global::haxe.lang.Runtime.toString(tmp5), global::haxe.lang.Runtime.toBool(tmp6), ((int) (global::haxe.lang.Runtime.toInt(tmp7)) ), global::haxe.lang.Runtime.toString(tmp8), global::haxe.lang.Runtime.toString(tmp9), global::haxe.lang.Runtime.toString(tmp10), global::haxe.lang.Runtime.toString(tmp11), global::haxe.lang.Runtime.toString(tmp12), tmp13, global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "separatorList", 783564643, true)), global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(o, "win3", 1324904599, true)));
		}
		
		
		public static global::haxe.ds.StringMap<object> cultures;
		
		public static global::Array<object> list;
		
		public static global::thx.culture.Culture register(global::thx.culture.Culture culture) {
			string code = global::haxe.lang.Runtime.concat("C:", culture.code.ToLowerInvariant());
			if (global::thx.culture.Culture.cultures.exists(code)) {
				return ((global::thx.culture.Culture) ((global::thx.culture.Culture.cultures.@get(((string) (code) ))).@value) );
			}
			
			global::thx.culture.Culture.list.push(culture);
			global::thx.culture.Culture.cultures.@set(code, culture);
			global::thx.culture.Culture.cultures.@set(global::haxe.lang.Runtime.concat("I2:", culture.iso2.ToLowerInvariant()), culture);
			global::thx.culture.Culture.cultures.@set(global::haxe.lang.Runtime.concat("I3:", culture.iso3.ToLowerInvariant()), culture);
			return culture;
		}
		
		
		public static global::thx.culture.Culture getByCode(string code) {
			return ((global::thx.culture.Culture) ((global::thx.culture.Culture.cultures.@get(((string) (global::haxe.lang.Runtime.concat("C:", code.ToLowerInvariant())) ))).@value) );
		}
		
		
		public static global::thx.culture.Culture getByIso2(string iso2) {
			return ((global::thx.culture.Culture) ((global::thx.culture.Culture.cultures.@get(((string) (global::haxe.lang.Runtime.concat("I2:", iso2.ToLowerInvariant())) ))).@value) );
		}
		
		
		public static global::thx.culture.Culture getByIso3(string iso3) {
			return ((global::thx.culture.Culture) ((global::thx.culture.Culture.cultures.@get(((string) (global::haxe.lang.Runtime.concat("I3:", iso3.ToLowerInvariant())) ))).@value) );
		}
		
		
		public static object iterator() {
			return ((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (global::thx.culture.Culture.list) ))) );
		}
		
		
		public static string getCodeKey(string key) {
			return global::haxe.lang.Runtime.concat("C:", key.ToLowerInvariant());
		}
		
		
		public static string getIso2Key(string key) {
			return global::haxe.lang.Runtime.concat("I2:", key.ToLowerInvariant());
		}
		
		
		public static string getIso3Key(string key) {
			return global::haxe.lang.Runtime.concat("I3:", key.ToLowerInvariant());
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.culture.Culture(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::thx.culture.Culture(global::haxe.lang.Runtime.toString(arr[0]), ((global::thx.culture.DateFormatInfo) (arr[1]) ), global::haxe.lang.Runtime.toString(arr[2]), global::haxe.lang.Runtime.toBool(arr[3]), global::haxe.lang.Runtime.toString(arr[4]), global::haxe.lang.Runtime.toString(arr[5]), global::haxe.lang.Runtime.toBool(arr[6]), ((int) (global::haxe.lang.Runtime.toInt(arr[7])) ), global::haxe.lang.Runtime.toString(arr[8]), global::haxe.lang.Runtime.toString(arr[9]), global::haxe.lang.Runtime.toString(arr[10]), global::haxe.lang.Runtime.toString(arr[11]), global::haxe.lang.Runtime.toString(arr[12]), ((global::thx.culture.NumberFormatInfo) (arr[13]) ), global::haxe.lang.Runtime.toString(arr[14]), global::haxe.lang.Runtime.toString(arr[15]));
			}
		}
		
		
		public string code;
		
		public global::thx.culture.DateFormatInfo dateTime;
		
		public string ietf;
		
		public bool isNeutral;
		
		public string iso2;
		
		public string iso3;
		
		public bool isRightToLeft;
		
		public int lcid;
		
		public string nameCalendar;
		
		public string nameDisplayEnglish;
		
		public string nameDisplayNative;
		
		public string nameEnglish;
		
		public string nameNative;
		
		public string nameRegionEnglish;
		
		public string nameRegionNative;
		
		public global::thx.culture.NumberFormatInfo number;
		
		public string separatorList;
		
		public string win3;
		
		public virtual object toObject() {
			object tmp = ( (( null == this.dateTime )) ? (null) : (this.dateTime.toObject()) );
			object tmp1 = ( (( null == this.number )) ? (null) : (this.number.toObject()) );
			return new global::haxe.lang.DynamicObject(new int[]{106319913, 561678025, 647756354, 783564643, 1050456214, 1103409453, 1169453134, 1170148173, 1170148174, 1285332817, 1324904599, 1510669659, 1677577253, 1864919677, 1880264788}, new object[]{this.nameCalendar, tmp1, this.nameNative, this.separatorList, this.nameRegionNative, this.code, this.ietf, this.iso2, this.iso3, this.nameRegionEnglish, this.win3, tmp, this.nameEnglish, this.isNeutral, this.isRightToLeft}, new int[]{1202619922}, new double[]{((double) (this.lcid) )});
		}
		
		
		public string get_nameDisplayEnglish() {
			return global::haxe.lang.Runtime.concat(this.nameEnglish, (( (string.Equals(null, this.nameRegionEnglish)) ? ("") : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" (", this.nameRegionEnglish), ")")) )));
		}
		
		
		public string get_nameDisplayNative() {
			return global::haxe.lang.Runtime.concat(this.nameNative, (( (string.Equals(null, this.nameRegionNative)) ? ("") : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" (", this.nameRegionNative), ")")) )));
		}
		
		
		public string toString() {
			return global::haxe.lang.Runtime.concat(this.nameEnglish, (( (string.Equals(null, this.nameRegionEnglish)) ? ("") : (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" (", this.nameRegionEnglish), ")")) )));
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1202619922:
					{
						this.lcid = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1324904599:
					{
						this.win3 = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 783564643:
					{
						this.separatorList = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 561678025:
					{
						this.number = ((global::thx.culture.NumberFormatInfo) (@value) );
						return @value;
					}
					
					
					case 1050456214:
					{
						this.nameRegionNative = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1285332817:
					{
						this.nameRegionEnglish = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 647756354:
					{
						this.nameNative = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1677577253:
					{
						this.nameEnglish = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 653824046:
					{
						this.nameDisplayNative = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 883188921:
					{
						this.nameDisplayEnglish = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 106319913:
					{
						this.nameCalendar = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1202619922:
					{
						this.lcid = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1880264788:
					{
						this.isRightToLeft = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1170148174:
					{
						this.iso3 = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1170148173:
					{
						this.iso2 = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1864919677:
					{
						this.isNeutral = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1169453134:
					{
						this.ietf = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1510669659:
					{
						this.dateTime = ((global::thx.culture.DateFormatInfo) (@value) );
						return @value;
					}
					
					
					case 1103409453:
					{
						this.code = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 631673605:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_nameDisplayNative", 631673605)) );
					}
					
					
					case 238607874:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_nameDisplayEnglish", 238607874)) );
					}
					
					
					case 1014900378:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toObject", 1014900378)) );
					}
					
					
					case 1324904599:
					{
						return this.win3;
					}
					
					
					case 783564643:
					{
						return this.separatorList;
					}
					
					
					case 561678025:
					{
						return this.number;
					}
					
					
					case 1050456214:
					{
						return this.nameRegionNative;
					}
					
					
					case 1285332817:
					{
						return this.nameRegionEnglish;
					}
					
					
					case 647756354:
					{
						return this.nameNative;
					}
					
					
					case 1677577253:
					{
						return this.nameEnglish;
					}
					
					
					case 653824046:
					{
						if (handleProperties) {
							return this.get_nameDisplayNative();
						}
						else {
							return this.nameDisplayNative;
						}
						
					}
					
					
					case 883188921:
					{
						if (handleProperties) {
							return this.get_nameDisplayEnglish();
						}
						else {
							return this.nameDisplayEnglish;
						}
						
					}
					
					
					case 106319913:
					{
						return this.nameCalendar;
					}
					
					
					case 1202619922:
					{
						return this.lcid;
					}
					
					
					case 1880264788:
					{
						return this.isRightToLeft;
					}
					
					
					case 1170148174:
					{
						return this.iso3;
					}
					
					
					case 1170148173:
					{
						return this.iso2;
					}
					
					
					case 1864919677:
					{
						return this.isNeutral;
					}
					
					
					case 1169453134:
					{
						return this.ietf;
					}
					
					
					case 1510669659:
					{
						return this.dateTime;
					}
					
					
					case 1103409453:
					{
						return this.code;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1202619922:
					{
						return ((double) (this.lcid) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 631673605:
					{
						return this.get_nameDisplayNative();
					}
					
					
					case 238607874:
					{
						return this.get_nameDisplayEnglish();
					}
					
					
					case 1014900378:
					{
						return this.toObject();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("win3");
			baseArr.push("separatorList");
			baseArr.push("number");
			baseArr.push("nameRegionNative");
			baseArr.push("nameRegionEnglish");
			baseArr.push("nameNative");
			baseArr.push("nameEnglish");
			baseArr.push("nameDisplayNative");
			baseArr.push("nameDisplayEnglish");
			baseArr.push("nameCalendar");
			baseArr.push("lcid");
			baseArr.push("isRightToLeft");
			baseArr.push("iso3");
			baseArr.push("iso2");
			baseArr.push("isNeutral");
			baseArr.push("ietf");
			baseArr.push("dateTime");
			baseArr.push("code");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


