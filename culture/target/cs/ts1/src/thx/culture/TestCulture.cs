// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.culture {
	public class TestCulture : global::haxe.lang.HxObject {
		
		public TestCulture(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestCulture(int i) {
			global::thx.culture.TestCulture.__hx_ctor_thx_culture_TestCulture(this, i);
		}
		
		
		public static void __hx_ctor_thx_culture_TestCulture(global::thx.culture.TestCulture __temp_me41, int i) {
			__temp_me41.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.culture.TestCulture(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.culture.TestCulture(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testInvariant() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isFalse(global::thx.culture.Culture.invariant.isNeutral, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvariant", "thx.culture.TestCulture", "TestCulture.hx"}, new int[]{1981972957}, new double[]{((double) (14) )}));
					global::utest.Assert.isFalse(global::thx.culture.Culture.invariant.isRightToLeft, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvariant", "thx.culture.TestCulture", "TestCulture.hx"}, new int[]{1981972957}, new double[]{((double) (15) )}));
					global::utest.Assert.@equals("", global::thx.culture.Culture.invariant.code, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvariant", "thx.culture.TestCulture", "TestCulture.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
					global::utest.Assert.@equals("iv", global::thx.culture.Culture.invariant.iso2, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvariant", "thx.culture.TestCulture", "TestCulture.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
					global::utest.Assert.@equals("IVL", global::thx.culture.Culture.invariant.iso3, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvariant", "thx.culture.TestCulture", "TestCulture.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
					global::utest.Assert.@equals("Invariant Language", global::thx.culture.Culture.invariant.nameEnglish, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvariant", "thx.culture.TestCulture", "TestCulture.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					global::utest.Assert.@equals("Invariant Language", global::thx.culture.Culture.invariant.nameNative, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvariant", "thx.culture.TestCulture", "TestCulture.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 684578958:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testInvariant", 684578958)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 684578958:
					{
						this.testInvariant();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


