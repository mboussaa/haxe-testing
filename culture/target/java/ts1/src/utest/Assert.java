// Generated by Haxe 3.3.0
package utest;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Assert extends haxe.lang.HxObject
{
	static
	{
		//line 693 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.createAsync = ( (( utest.Assert_Anon_693__Fun.__hx_current != null )) ? (utest.Assert_Anon_693__Fun.__hx_current) : (utest.Assert_Anon_693__Fun.__hx_current = ((utest.Assert_Anon_693__Fun) (new utest.Assert_Anon_693__Fun()) )) );
		//line 705 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.createEvent = ( (( utest.Assert_Anon_705__Fun.__hx_current != null )) ? (utest.Assert_Anon_705__Fun.__hx_current) : (utest.Assert_Anon_705__Fun.__hx_current = ((utest.Assert_Anon_705__Fun) (new utest.Assert_Anon_705__Fun()) )) );
	}
	
	public Assert(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Assert()
	{
		//line 18 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.__hx_ctor_utest_Assert(this);
	}
	
	
	public static void __hx_ctor_utest_Assert(utest.Assert __temp_me36)
	{
	}
	
	
	public static haxe.root.List<utest.Assertation> results;
	
	public static void isTrue(boolean cond, java.lang.String msg, java.lang.Object pos)
	{
		//line 32 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 32 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			throw haxe.lang.HaxeException.wrap("Assert.results is not currently bound to any assert context");
		}
		
		//line 33 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( null == msg )) 
		{
			//line 34 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = "expected true";
		}
		
		//line 35 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (cond) 
		{
			//line 36 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 38 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(msg, pos));
		}
		
	}
	
	
	public static void isFalse(boolean value, java.lang.String msg, java.lang.Object pos)
	{
		//line 48 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( null == msg )) 
		{
			//line 49 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = "expected false";
		}
		
		//line 50 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isTrue(( value == false ), msg, pos);
	}
	
	
	public static void isNull(java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 60 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( msg == null )) 
		{
			//line 61 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = ( "expected null but it is " + utest.Assert.q(value) );
		}
		
		//line 62 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isTrue(( value == null ), msg, pos);
	}
	
	
	public static void notNull(java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 72 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( null == msg )) 
		{
			//line 73 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = "expected not null";
		}
		
		//line 74 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isTrue(( ! (( value == null )) ), msg, pos);
	}
	
	
	public static void is(java.lang.Object value, java.lang.Object type, java.lang.String msg, java.lang.Object pos)
	{
		//line 85 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( msg == null )) 
		{
			//line 85 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = ( ( ( "expected type " + utest.Assert.typeToString(type) ) + " but it is " ) + utest.Assert.typeToString(value) );
		}
		
		//line 86 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isTrue(haxe.root.Std.is(value, type), msg, pos);
	}
	
	
	public static void notEquals(java.lang.Object expected, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 101 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( msg == null )) 
		{
			//line 101 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = ( ( ( ( "expected " + utest.Assert.q(expected) ) + " and test value " ) + utest.Assert.q(value) ) + " should be different" );
		}
		
		//line 102 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.eq(expected, value), msg, pos);
	}
	
	
	public static void equals(java.lang.Object expected, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 117 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( msg == null )) 
		{
			//line 117 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) );
		}
		
		//line 118 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.eq(expected, value), msg, pos);
	}
	
	
	public static void match(haxe.root.EReg pattern, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 133 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( msg == null )) 
		{
			//line 133 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = ( ( "the value " + utest.Assert.q(value) ) + " does not match the provided pattern" );
		}
		
		//line 134 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isTrue(pattern.match(haxe.lang.Runtime.toString(value)), msg, pos);
	}
	
	
	public static void floatEquals(double expected, double value, java.lang.Object approx, java.lang.String msg, java.lang.Object pos)
	{
		//line 151 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( msg == null )) 
		{
			//line 151 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) );
		}
		
		//line 152 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isTrue(utest.Assert._floatEquals(expected, value, approx), msg, pos);
		//line 152 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		return ;
	}
	
	
	public static boolean _floatEquals(double expected, double value, java.lang.Object approx)
	{
		//line 157 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (java.lang.Double.isNaN(expected)) 
		{
			//line 158 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return java.lang.Double.isNaN(value);
		}
		else
		{
			//line 159 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (java.lang.Double.isNaN(value)) 
			{
				//line 160 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return false;
			}
			else
			{
				//line 161 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if ((  ! (haxe.lang.Runtime.isFinite(expected))  &&  ! (haxe.lang.Runtime.isFinite(value))  )) 
				{
					//line 162 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return ( ( expected > 0 ) == ( value > 0 ) );
				}
				
			}
			
		}
		
		//line 163 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( null == approx )) 
		{
			//line 164 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			approx = 1e-5;
		}
		
		//line 165 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		return ( haxe.lang.Runtime.compare(java.lang.Math.abs(( value - expected )), approx) <= 0 );
	}
	
	
	public static java.lang.String getTypeName(java.lang.Object v)
	{
		//line 169 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		haxe.root.ValueType _g = haxe.root.Type.typeof(v);
		//line 169 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		switch (_g.index)
		{
			case 0:
			{
				//line 171 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return "`null`";
			}
			
			
			case 1:
			{
				//line 172 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return "Int";
			}
			
			
			case 2:
			{
				//line 173 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return "Float";
			}
			
			
			case 3:
			{
				//line 174 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return "Bool";
			}
			
			
			case 4:
			{
				//line 178 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return "Object";
			}
			
			
			case 5:
			{
				//line 175 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return "function";
			}
			
			
			case 6:
			{
				//line 176 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Class c = ((java.lang.Class) (_g.params[0]) );
				//line 176 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return haxe.root.Type.getClassName(c);
			}
			
			
			case 7:
			{
				//line 177 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Class e = ((java.lang.Class) (_g.params[0]) );
				//line 177 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return haxe.root.Type.getEnumName(e);
			}
			
			
			case 8:
			{
				//line 179 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return "`Unknown`";
			}
			
			
		}
		
		//line 168 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		return null;
	}
	
	
	public static boolean isIterable(java.lang.Object v, boolean isAnonym)
	{
		//line 184 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		haxe.root.Array<java.lang.String> fields = ( (isAnonym) ? (haxe.root.Reflect.fields(v)) : (haxe.root.Type.getInstanceFields(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (v) ))) ))) );
		//line 185 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if ( ! (((boolean) (haxe.root.Lambda.has(((java.lang.Object) (fields) ), haxe.lang.Runtime.toString("iterator"))) )) ) 
		{
			//line 185 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return false;
		}
		
		//line 186 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		return haxe.root.Reflect.isFunction(haxe.lang.Runtime.getField(v, "iterator", false));
	}
	
	
	public static boolean isIterator(java.lang.Object v, boolean isAnonym)
	{
		//line 190 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		haxe.root.Array<java.lang.String> fields = ( (isAnonym) ? (haxe.root.Reflect.fields(v)) : (haxe.root.Type.getInstanceFields(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (v) ))) ))) );
		//line 191 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if ((  ! (((boolean) (haxe.root.Lambda.has(((java.lang.Object) (fields) ), haxe.lang.Runtime.toString("next"))) ))  ||  ! (((boolean) (haxe.root.Lambda.has(((java.lang.Object) (fields) ), haxe.lang.Runtime.toString("hasNext"))) ))  )) 
		{
			//line 191 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return false;
		}
		
		//line 192 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (haxe.root.Reflect.isFunction(haxe.lang.Runtime.getField(v, "next", false))) 
		{
			//line 192 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return haxe.root.Reflect.isFunction(haxe.lang.Runtime.getField(v, "hasNext", false));
		}
		else
		{
			//line 192 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return false;
		}
		
	}
	
	
	public static boolean sameAs(java.lang.Object expected, java.lang.Object value, java.lang.Object status, double approx)
	{
		//line 196 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		java.lang.String texpected = utest.Assert.getTypeName(expected);
		//line 197 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		java.lang.String tvalue = utest.Assert.getTypeName(value);
		//line 199 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if ((  ! (haxe.lang.Runtime.valEq(texpected, tvalue))  &&  ! ((( ( haxe.lang.Runtime.valEq(texpected, "Int") && haxe.lang.Runtime.valEq(tvalue, "Float") ) || ( haxe.lang.Runtime.valEq(texpected, "Float") && haxe.lang.Runtime.valEq(tvalue, "Int") ) )))  )) 
		{
			//line 201 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected type " + texpected ) + " but it is " ) + tvalue ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
			//line 202 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return false;
		}
		
		//line 204 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		haxe.root.ValueType _g = haxe.root.Type.typeof(expected);
		//line 204 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		switch (_g.index)
		{
			case 0:
			case 3:
			{
				//line 214 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( ! (haxe.lang.Runtime.eq(expected, value)) )) 
				{
					//line 215 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
					//line 216 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return false;
				}
				
				//line 218 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return true;
			}
			
			
			case 1:
			case 2:
			{
				//line 207 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if ( ! (utest.Assert._floatEquals(((double) (haxe.lang.Runtime.toDouble(expected)) ), ((double) (haxe.lang.Runtime.toDouble(value)) ), approx)) ) 
				{
					//line 209 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
					//line 210 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return false;
				}
				
				//line 212 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return true;
			}
			
			
			case 4:
			{
				//line 399 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
				{
					//line 400 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.root.Array<java.lang.String> tfields = haxe.root.Reflect.fields(value);
					//line 401 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.root.Array<java.lang.String> fields = haxe.root.Reflect.fields(expected);
					//line 402 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					java.lang.String path = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 403 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					{
						//line 403 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						int _g1 = 0;
						//line 403 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						while (( _g1 < fields.length ))
						{
							//line 403 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							java.lang.String field = fields.__get(_g1);
							//line 403 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							 ++ _g1;
							//line 404 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							tfields.remove(field);
							//line 405 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path, "")) ? (field) : (( ( path + "." ) + field )) ));
							//line 406 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							if ( ! (haxe.root.Reflect.hasField(value, field)) ) 
							{
								//line 407 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								haxe.lang.Runtime.setField(status, "error", ( ( ( "expected field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) ) + " does not exist in " ) + utest.Assert.q(value) ));
								//line 408 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								return false;
							}
							
							//line 410 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							java.lang.Object e = haxe.root.Reflect.field(expected, field);
							//line 411 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							if (haxe.root.Reflect.isFunction(e)) 
							{
								//line 412 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								continue;
							}
							
							//line 413 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							java.lang.Object v = haxe.root.Reflect.field(value, field);
							//line 414 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							if ( ! (utest.Assert.sameAs(e, v, status, approx)) ) 
							{
								//line 415 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								return false;
							}
							
						}
						
					}
					
					//line 417 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( tfields.length > 0 )) 
					{
						//line 419 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( ( "the tested object has extra field(s) (" + tfields.join(", ") ) + ") not included in the expected ones" ));
						//line 420 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						return false;
					}
					
				}
				
				//line 425 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (utest.Assert.isIterator(expected, true)) 
				{
					//line 426 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if ( ! (utest.Assert.isIterator(value, true)) ) 
					{
						//line 427 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( "expected Iterable but it is not " + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
						//line 428 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						return false;
					}
					
					//line 430 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 431 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						java.lang.Object __temp_stmt6 = null;
						//line 431 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 431 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Function __temp_odecl1 = new utest.Assert_sameAs_431__Fun(expected);
							//line 431 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							__temp_stmt6 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl1}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 431 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array __temp_stmt5 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt6) ));
						//line 431 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array evalues = ((haxe.root.Array) (__temp_stmt5) );
						//line 432 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						java.lang.Object __temp_stmt8 = null;
						//line 432 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 432 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Function __temp_odecl2 = new utest.Assert_sameAs_432__Fun(value);
							//line 432 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							__temp_stmt8 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl2}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 432 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array __temp_stmt7 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt8) ));
						//line 432 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array vvalues = ((haxe.root.Array) (__temp_stmt7) );
						//line 433 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						if (( evalues.length != vvalues.length )) 
						{
							//line 434 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues.length ) + " values in Iterator but they are " ) + vvalues.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 435 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							return false;
						}
						
						//line 437 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						java.lang.String path1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 438 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 438 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g11 = 0;
							//line 438 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g2 = evalues.length;
							//line 438 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							while (( _g11 < _g2 ))
							{
								//line 438 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								int i = _g11++;
								//line 439 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path1, "")) ? (( ( "iterator[" + i ) + "]" )) : (( ( ( path1 + "[" ) + i ) + "]" )) ));
								//line 440 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues.__get(i), vvalues.__get(i), status, approx)) ) 
								{
									//line 442 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
									//line 443 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 447 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return true;
				}
				
				//line 451 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (utest.Assert.isIterable(expected, true)) 
				{
					//line 452 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if ( ! (utest.Assert.isIterable(value, true)) ) 
					{
						//line 453 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( "expected Iterator but it is not " + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
						//line 454 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						return false;
					}
					
					//line 456 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 457 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array evalues1 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (expected) ))) );
						//line 458 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array vvalues1 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (value) ))) );
						//line 459 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						if (( evalues1.length != vvalues1.length )) 
						{
							//line 460 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues1.length ) + " values in Iterable but they are " ) + vvalues1.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 461 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							return false;
						}
						
						//line 463 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						java.lang.String path2 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 464 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 464 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g12 = 0;
							//line 464 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g3 = evalues1.length;
							//line 464 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							while (( _g12 < _g3 ))
							{
								//line 464 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								int i1 = _g12++;
								//line 465 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path2, "")) ? (( ( "iterable[" + i1 ) + "]" )) : (( ( ( path2 + "[" ) + i1 ) + "]" )) ));
								//line 466 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues1.__get(i1), vvalues1.__get(i1), status, approx)) ) 
								{
									//line 467 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 470 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return true;
				}
				
				//line 472 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return true;
			}
			
			
			case 5:
			{
				//line 220 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if ( ! (haxe.root.Reflect.compareMethods(expected, value)) ) 
				{
					//line 222 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( "expected same function reference" + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
					//line 223 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return false;
				}
				
				//line 225 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return true;
			}
			
			
			case 6:
			{
				//line 226 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Class c = ((java.lang.Class) (_g.params[0]) );
				//line 227 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.String cexpected = haxe.root.Type.getClassName(c);
				//line 228 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.String cvalue = haxe.root.Type.getClassName(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (value) ))) ));
				//line 229 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if ( ! (haxe.lang.Runtime.valEq(cexpected, cvalue)) ) 
				{
					//line 231 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected instance of " + utest.Assert.q(cexpected) ) + " but it is " ) + utest.Assert.q(cvalue) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
					//line 232 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return false;
				}
				
				//line 236 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( ( expected instanceof java.lang.String ) && ( ! (haxe.lang.Runtime.eq(expected, value)) ) )) 
				{
					//line 238 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected \'" + haxe.root.Std.string(expected) ) + "\' but it is \'" ) + haxe.root.Std.string(value) ) + "\'" ));
					//line 239 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return false;
				}
				
				//line 243 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( expected instanceof haxe.root.Array )) 
				{
					//line 244 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 245 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						if (( ! (haxe.lang.Runtime.eq(haxe.lang.Runtime.getField(expected, "length", true), haxe.lang.Runtime.getField(value, "length", true))) )) 
						{
							//line 246 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + haxe.root.Std.string(haxe.lang.Runtime.getField(expected, "length", true)) ) + " elements but they are " ) + haxe.root.Std.string(haxe.lang.Runtime.getField(value, "length", true)) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 247 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							return false;
						}
						
						//line 249 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						java.lang.String path3 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 250 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 250 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g13 = 0;
							//line 250 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g4 = ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(expected, "length", true))) );
							//line 250 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							while (( _g13 < _g4 ))
							{
								//line 250 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								int i2 = _g13++;
								//line 251 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path3, "")) ? (( ( "array[" + i2 ) + "]" )) : (( ( ( path3 + "[" ) + i2 ) + "]" )) ));
								//line 252 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(((java.lang.Object) (haxe.lang.Runtime.callField(expected, "__get", new haxe.root.Array(new java.lang.Object[]{i2}))) ), ((java.lang.Object) (haxe.lang.Runtime.callField(value, "__get", new haxe.root.Array(new java.lang.Object[]{i2}))) ), status, approx)) ) 
								{
									//line 254 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(((java.lang.Object) (haxe.lang.Runtime.callField(expected, "__get", new haxe.root.Array(new java.lang.Object[]{i2}))) )) ) + " but it is " ) + utest.Assert.q(((java.lang.Object) (haxe.lang.Runtime.callField(value, "__get", new haxe.root.Array(new java.lang.Object[]{i2}))) )) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
									//line 255 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 259 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return true;
				}
				
				//line 263 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( expected instanceof haxe.root.Date )) 
				{
					//line 264 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( ! (haxe.lang.Runtime.eq(((java.lang.Object) (haxe.lang.Runtime.callField(expected, "getTime", null)) ), ((java.lang.Object) (haxe.lang.Runtime.callField(value, "getTime", null)) ))) )) 
					{
						//line 265 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
						//line 266 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						return false;
					}
					
					//line 268 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return true;
				}
				
				//line 272 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( expected instanceof haxe.io.Bytes )) 
				{
					//line 273 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 274 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.io.Bytes ebytes = ((haxe.io.Bytes) (expected) );
						//line 275 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.io.Bytes vbytes = ((haxe.io.Bytes) (value) );
						//line 276 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						if (( ebytes.length != vbytes.length )) 
						{
							//line 276 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							return false;
						}
						
						//line 277 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 277 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g14 = 0;
							//line 277 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g5 = ebytes.length;
							//line 277 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							while (( _g14 < _g5 ))
							{
								//line 277 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								int i3 = _g14++;
								//line 278 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								if (( (( ebytes.b[i3] & 255 )) != (( vbytes.b[i3] & 255 )) )) 
								{
									//line 280 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected byte " + (( ebytes.b[i3] & 255 )) ) + " but it is " ) + (( vbytes.b[i3] & 255 )) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
									//line 281 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 284 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return true;
				}
				
				//line 288 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( expected instanceof haxe.IMap )) 
				{
					//line 289 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 290 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.IMap map = ((haxe.IMap) (expected) );
						//line 291 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.IMap vmap = ((haxe.IMap) (value) );
						//line 292 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array _g6 = new haxe.root.Array(new java.lang.Object[]{});
						//line 292 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 292 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							java.lang.Object tmp = map.keys();
							//line 292 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
							{
								//line 292 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								java.lang.Object k = ((java.lang.Object) (haxe.lang.Runtime.callField(tmp, "next", null)) );
								//line 292 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								_g6.push(k);
							}
							
						}
						
						//line 293 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array _g15 = new haxe.root.Array(new java.lang.Object[]{});
						//line 293 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 293 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							java.lang.Object tmp1 = vmap.keys();
							//line 293 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp1, "hasNext", null)))
							{
								//line 293 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								java.lang.Object k1 = ((java.lang.Object) (haxe.lang.Runtime.callField(tmp1, "next", null)) );
								//line 293 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								_g15.push(k1);
							}
							
						}
						
						//line 295 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						if (( _g6.length != _g15.length )) 
						{
							//line 296 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + _g6.length ) + " keys but they are " ) + _g15.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 297 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							return false;
						}
						
						//line 299 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						java.lang.String path4 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 300 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 300 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g21 = 0;
							//line 300 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							while (( _g21 < _g6.length ))
							{
								//line 300 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								java.lang.Object key = _g6.__get(_g21);
								//line 300 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								 ++ _g21;
								//line 301 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path4, "")) ? (( ( "hash[" + haxe.root.Std.string(key) ) + "]" )) : (( ( ( path4 + "[" ) + haxe.root.Std.string(key) ) + "]" )) ));
								//line 302 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(map.get(key), vmap.get(key), status, approx)) ) 
								{
									//line 304 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
									//line 305 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 309 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return true;
				}
				
				//line 313 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (utest.Assert.isIterator(expected, false)) 
				{
					//line 314 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 315 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						java.lang.Object __temp_stmt10 = null;
						//line 315 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 315 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Function __temp_odecl3 = new utest.Assert_sameAs_315__Fun(expected);
							//line 315 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							__temp_stmt10 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl3}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 315 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array __temp_stmt9 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt10) ));
						//line 315 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array evalues2 = ((haxe.root.Array) (__temp_stmt9) );
						//line 316 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						java.lang.Object __temp_stmt12 = null;
						//line 316 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 316 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Function __temp_odecl4 = new utest.Assert_sameAs_316__Fun(value);
							//line 316 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							__temp_stmt12 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl4}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 316 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array __temp_stmt11 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt12) ));
						//line 316 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array vvalues2 = ((haxe.root.Array) (__temp_stmt11) );
						//line 317 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						if (( evalues2.length != vvalues2.length )) 
						{
							//line 318 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues2.length ) + " values in Iterator but they are " ) + vvalues2.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 319 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							return false;
						}
						
						//line 321 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						java.lang.String path5 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 322 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 322 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g16 = 0;
							//line 322 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g7 = evalues2.length;
							//line 322 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							while (( _g16 < _g7 ))
							{
								//line 322 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								int i4 = _g16++;
								//line 323 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path5, "")) ? (( ( "iterator[" + i4 ) + "]" )) : (( ( ( path5 + "[" ) + i4 ) + "]" )) ));
								//line 324 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues2.__get(i4), vvalues2.__get(i4), status, approx)) ) 
								{
									//line 326 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
									//line 327 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 331 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return true;
				}
				
				//line 335 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (utest.Assert.isIterable(expected, false)) 
				{
					//line 336 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
					{
						//line 337 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array evalues3 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (expected) ))) );
						//line 338 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.root.Array vvalues3 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (value) ))) );
						//line 339 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						if (( evalues3.length != vvalues3.length )) 
						{
							//line 340 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues3.length ) + " values in Iterable but they are " ) + vvalues3.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 341 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							return false;
						}
						
						//line 343 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						java.lang.String path6 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 344 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						{
							//line 344 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g17 = 0;
							//line 344 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int _g8 = evalues3.length;
							//line 344 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							while (( _g17 < _g8 ))
							{
								//line 344 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								int i5 = _g17++;
								//line 345 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path6, "")) ? (( ( "iterable[" + i5 ) + "]" )) : (( ( ( path6 + "[" ) + i5 ) + "]" )) ));
								//line 346 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues3.__get(i5), vvalues3.__get(i5), status, approx)) ) 
								{
									//line 347 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 350 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return true;
				}
				
				//line 354 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
				{
					//line 355 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.root.Array<java.lang.String> fields1 = haxe.root.Type.getInstanceFields(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (expected) ))) ));
					//line 356 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					java.lang.String path7 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 357 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					{
						//line 357 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						int _g9 = 0;
						//line 357 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						while (( _g9 < fields1.length ))
						{
							//line 357 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							java.lang.String field1 = fields1.__get(_g9);
							//line 357 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							 ++ _g9;
							//line 358 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path7, "")) ? (field1) : (( ( path7 + "." ) + field1 )) ));
							//line 359 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							java.lang.Object e1 = haxe.root.Reflect.field(expected, field1);
							//line 360 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							if (haxe.root.Reflect.isFunction(e1)) 
							{
								//line 360 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								continue;
							}
							
							//line 361 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							java.lang.Object v1 = haxe.root.Reflect.field(value, field1);
							//line 362 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							if ( ! (utest.Assert.sameAs(e1, v1, status, approx)) ) 
							{
								//line 363 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				//line 367 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return true;
			}
			
			
			case 7:
			{
				//line 368 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Class e2 = ((java.lang.Class) (_g.params[0]) );
				//line 369 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.String eexpected = haxe.root.Type.getEnumName(e2);
				//line 370 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.String evalue = haxe.root.Type.getEnumName(haxe.root.Type.getEnum(value));
				//line 371 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if ( ! (haxe.lang.Runtime.valEq(eexpected, evalue)) ) 
				{
					//line 373 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected enumeration of " + utest.Assert.q(eexpected) ) + " but it is " ) + utest.Assert.q(evalue) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
					//line 374 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return false;
				}
				
				//line 376 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(status, "recursive", true)) || ((boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ) )) 
				{
					//line 378 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( haxe.root.Type.enumIndex(expected) != haxe.root.Type.enumIndex(value) )) 
					{
						//line 380 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(haxe.root.Type.enumConstructor(expected)) ) + " but it is " ) + utest.Assert.q(haxe.root.Type.enumConstructor(value)) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
						//line 381 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						return false;
					}
					
					//line 383 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.root.Array eparams = haxe.root.Type.enumParameters(expected);
					//line 384 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					haxe.root.Array vparams = haxe.root.Type.enumParameters(value);
					//line 385 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					java.lang.String path8 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 386 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					{
						//line 386 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						int _g18 = 0;
						//line 386 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						int _g10 = eparams.length;
						//line 386 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						while (( _g18 < _g10 ))
						{
							//line 386 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							int i6 = _g18++;
							//line 388 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path8, "")) ? (( ( "enum[" + i6 ) + "]" )) : (( ( ( path8 + "[" ) + i6 ) + "]" )) ));
							//line 389 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							if ( ! (utest.Assert.sameAs(eparams.__get(i6), vparams.__get(i6), status, approx)) ) 
							{
								//line 391 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
								//line 392 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				//line 396 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				return true;
			}
			
			
			case 8:
			{
				//line 474 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				throw haxe.lang.HaxeException.wrap("Unable to compare two unknown types");
			}
			
			
		}
		
		//line 195 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		return false;
	}
	
	
	public static java.lang.String q(java.lang.Object v)
	{
		//line 481 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( v instanceof java.lang.String )) 
		{
			//line 482 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return ( ( "\"" + haxe.root.StringTools.replace(haxe.lang.Runtime.toString(v), "\"", "\\\"") ) + "\"" );
		}
		else
		{
			//line 484 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return haxe.root.Std.string(v);
		}
		
	}
	
	
	public static void same(java.lang.Object expected, java.lang.Object value, java.lang.Object recursive, java.lang.String msg, java.lang.Object approx, java.lang.Object pos)
	{
		//line 503 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( null == approx )) 
		{
			//line 504 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			approx = 1e-5;
		}
		
		//line 505 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		java.lang.Object status = new haxe.lang.DynamicObject(new java.lang.String[]{"error", "path", "recursive"}, new java.lang.Object[]{null, "", ( (( null == recursive )) ? (true) : (recursive) )}, new java.lang.String[]{}, new double[]{});
		//line 506 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (utest.Assert.sameAs(expected, value, status, ((double) (haxe.lang.Runtime.toDouble(approx)) ))) 
		{
			//line 507 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.pass(msg, pos);
		}
		else
		{
			//line 509 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? (haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "error", true))) : (msg) ), pos);
		}
		
	}
	
	
	public static void raises(haxe.lang.Function method, java.lang.Class type, java.lang.String msgNotThrown, java.lang.String msgWrongType, java.lang.Object pos)
	{
		//line 530 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		try 
		{
			//line 531 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			method.__hx_invoke0_o();
			//line 532 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			java.lang.String name = haxe.root.Type.getClassName(type);
			//line 533 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( name == null )) 
			{
				//line 533 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				name = "Dynamic";
			}
			
			//line 534 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( null == msgNotThrown )) 
			{
				//line 535 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				msgNotThrown = ( ( "exception of type " + name ) + " not raised" );
			}
			
			//line 536 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.fail(msgNotThrown, pos);
		}
		catch (java.lang.Throwable __temp_catchallException1)
		{
			//line 530 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException1);
			//line 538 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			java.lang.Object __temp_catchall2 = __temp_catchallException1;
			//line 538 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( __temp_catchall2 instanceof haxe.lang.HaxeException )) 
			{
				//line 538 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				__temp_catchall2 = ((haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
			}
			
			//line 538 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			{
				//line 538 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Object ex = __temp_catchall2;
				//line 538 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( ((java.lang.Object) (null) ) == ((java.lang.Object) (type) ) )) 
				{
					//line 539 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					utest.Assert.pass(null, pos);
				}
				else
				{
					//line 541 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					java.lang.String name1 = haxe.root.Type.getClassName(type);
					//line 542 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( null == msgWrongType )) 
					{
						//line 543 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						msgWrongType = ( ( ( "expected throw of type " + name1 ) + " but it is " ) + haxe.root.Std.string(ex) );
					}
					
					//line 544 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					utest.Assert.isTrue(haxe.root.Std.is(ex, type), msgWrongType, pos);
				}
				
			}
			
		}
		
		
	}
	
	
	public static <T> void allows(haxe.root.Array<T> possibilities, T value, java.lang.String msg, java.lang.Object pos)
	{
		//line 558 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (((boolean) (haxe.root.Lambda.has(((java.lang.Object) (possibilities) ), ((T) (value) ))) )) 
		{
			//line 559 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 561 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? (( ( ( "value " + utest.Assert.q(value) ) + " not found in the expected possibilities " ) + haxe.root.Std.string(possibilities) )) : (msg) ), pos);
		}
		
	}
	
	
	public static <T> void contains(T match, haxe.root.Array<T> values, java.lang.String msg, java.lang.Object pos)
	{
		//line 574 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (((boolean) (haxe.root.Lambda.has(((java.lang.Object) (values) ), ((T) (match) ))) )) 
		{
			//line 575 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 577 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? (( ( ( "values " + utest.Assert.q(values) ) + " do not contain " ) + haxe.root.Std.string(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static <T> void notContains(T match, haxe.root.Array<T> values, java.lang.String msg, java.lang.Object pos)
	{
		//line 590 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if ( ! (((boolean) (haxe.root.Lambda.has(((java.lang.Object) (values) ), ((T) (match) ))) )) ) 
		{
			//line 591 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 593 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? (( ( ( "values " + utest.Assert.q(values) ) + " do contain " ) + haxe.root.Std.string(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static void stringContains(java.lang.String match, java.lang.String value, java.lang.String msg, java.lang.Object pos)
	{
		//line 605 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( ( value != null ) && ( haxe.lang.StringExt.indexOf(value, match, null) >= 0 ) )) 
		{
			//line 606 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 608 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? (( ( ( "value " + utest.Assert.q(value) ) + " does not contain " ) + utest.Assert.q(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static void stringSequence(haxe.root.Array<java.lang.String> sequence, java.lang.String value, java.lang.String msg, java.lang.Object pos)
	{
		//line 621 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( null == value )) 
		{
			//line 623 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? ("null argument value") : (msg) ), pos);
			//line 624 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return ;
		}
		
		//line 626 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		int p = 0;
		//line 627 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		{
			//line 627 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			int _g = 0;
			//line 627 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			while (( _g < sequence.length ))
			{
				//line 627 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.String s = sequence.__get(_g);
				//line 627 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				 ++ _g;
				//line 629 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				int p2 = haxe.lang.StringExt.indexOf(value, s, p);
				//line 630 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				if (( p2 < 0 )) 
				{
					//line 632 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					if (( msg == null )) 
					{
						//line 634 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						msg = ( ( "expected \'" + s ) + "\' after " );
						//line 635 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
						if (( p > 0 )) 
						{
							//line 637 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							java.lang.String cut = haxe.lang.StringExt.substr(value, 0, p);
							//line 638 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							if (( cut.length() > 30 )) 
							{
								//line 639 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
								cut = ( "..." + haxe.lang.StringExt.substr(cut, -27, null) );
							}
							
							//line 640 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							msg += ( ( " \'" + cut ) + "\'" );
						}
						else
						{
							//line 642 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
							msg += " begin";
						}
						
					}
					
					//line 644 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					utest.Assert.fail(msg, pos);
					//line 645 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
					return ;
				}
				
				//line 647 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				p = ( p2 + s.length() );
			}
			
		}
		
		//line 649 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isTrue(true, msg, pos);
	}
	
	
	public static void pass(java.lang.String msg, java.lang.Object pos)
	{
		//line 659 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( msg == null )) 
		{
			//line 659 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = "pass expected";
		}
		
		//line 659 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isTrue(true, msg, pos);
	}
	
	
	public static void fail(java.lang.String msg, java.lang.Object pos)
	{
		//line 669 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		if (( msg == null )) 
		{
			//line 669 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			msg = "failure expected";
		}
		
		//line 669 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.isTrue(false, msg, pos);
	}
	
	
	public static void warn(java.lang.String msg)
	{
		//line 679 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		utest.Assert.results.add(utest.Assertation.Warning(msg));
	}
	
	
	public static haxe.lang.Function createAsync;
	
	public static haxe.lang.Function createEvent;
	
	public static java.lang.String typeToString(java.lang.Object t)
	{
		//line 710 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		try 
		{
			//line 711 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			java.lang.Class _t = ((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (t) ))) );
			//line 712 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( ((java.lang.Object) (_t) ) != ((java.lang.Object) (null) ) )) 
			{
				//line 713 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				t = _t;
			}
			
		}
		catch (java.lang.Throwable __temp_catchallException1)
		{
			//line 710 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException1);
			//line 714 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			java.lang.Object __temp_catchall2 = __temp_catchallException1;
			//line 714 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( __temp_catchall2 instanceof haxe.lang.HaxeException )) 
			{
				//line 714 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				__temp_catchall2 = ((haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
			}
			
			//line 714 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			{
				//line 714 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Object e = __temp_catchall2;
			}
			
		}
		
		
		//line 715 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		try 
		{
			//line 715 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return haxe.root.Type.getClassName(((java.lang.Class) (t) ));
		}
		catch (java.lang.Throwable __temp_catchallException3)
		{
			//line 715 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException3);
			//line 715 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			java.lang.Object __temp_catchall4 = __temp_catchallException3;
			//line 715 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( __temp_catchall4 instanceof haxe.lang.HaxeException )) 
			{
				//line 715 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				__temp_catchall4 = ((haxe.lang.HaxeException) (__temp_catchallException3) ).obj;
			}
			
			//line 715 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			{
				//line 715 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Object e1 = __temp_catchall4;
			}
			
		}
		
		
		//line 716 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		try 
		{
			//line 717 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			java.lang.Class _t1 = haxe.root.Type.getEnum(t);
			//line 718 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( ((java.lang.Object) (_t1) ) != ((java.lang.Object) (null) ) )) 
			{
				//line 719 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				t = _t1;
			}
			
		}
		catch (java.lang.Throwable __temp_catchallException5)
		{
			//line 716 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException5);
			//line 720 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			java.lang.Object __temp_catchall6 = __temp_catchallException5;
			//line 720 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( __temp_catchall6 instanceof haxe.lang.HaxeException )) 
			{
				//line 720 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				__temp_catchall6 = ((haxe.lang.HaxeException) (__temp_catchallException5) ).obj;
			}
			
			//line 720 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			{
				//line 720 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Object e2 = __temp_catchall6;
			}
			
		}
		
		
		//line 721 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		try 
		{
			//line 721 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return haxe.root.Type.getEnumName(((java.lang.Class) (t) ));
		}
		catch (java.lang.Throwable __temp_catchallException7)
		{
			//line 721 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException7);
			//line 721 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			java.lang.Object __temp_catchall8 = __temp_catchallException7;
			//line 721 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( __temp_catchall8 instanceof haxe.lang.HaxeException )) 
			{
				//line 721 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				__temp_catchall8 = ((haxe.lang.HaxeException) (__temp_catchallException7) ).obj;
			}
			
			//line 721 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			{
				//line 721 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Object e3 = __temp_catchall8;
			}
			
		}
		
		
		//line 722 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		try 
		{
			//line 722 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return haxe.root.Std.string(haxe.root.Type.typeof(t));
		}
		catch (java.lang.Throwable __temp_catchallException9)
		{
			//line 722 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException9);
			//line 722 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			java.lang.Object __temp_catchall10 = __temp_catchallException9;
			//line 722 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( __temp_catchall10 instanceof haxe.lang.HaxeException )) 
			{
				//line 722 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				__temp_catchall10 = ((haxe.lang.HaxeException) (__temp_catchallException9) ).obj;
			}
			
			//line 722 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			{
				//line 722 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Object e4 = __temp_catchall10;
			}
			
		}
		
		
		//line 723 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		try 
		{
			//line 723 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			return haxe.root.Std.string(t);
		}
		catch (java.lang.Throwable __temp_catchallException11)
		{
			//line 723 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			haxe.lang.Exceptions.setException(__temp_catchallException11);
			//line 723 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			java.lang.Object __temp_catchall12 = __temp_catchallException11;
			//line 723 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			if (( __temp_catchall12 instanceof haxe.lang.HaxeException )) 
			{
				//line 723 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				__temp_catchall12 = ((haxe.lang.HaxeException) (__temp_catchallException11) ).obj;
			}
			
			//line 723 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
			{
				//line 723 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
				java.lang.Object e5 = __temp_catchall12;
			}
			
		}
		
		
		//line 724 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		return "<unable to retrieve type name>";
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 18 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		return new utest.Assert(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 18 "/usr/lib/haxe/lib/utest/1,4,1/src/utest/Assert.hx"
		return new utest.Assert();
	}
	
	
}


