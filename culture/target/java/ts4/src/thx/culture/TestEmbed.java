// Generated by Haxe 3.3.0
package thx.culture;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestEmbed extends haxe.lang.HxObject
{
	public TestEmbed(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestEmbed(int i)
	{
		//line 7 "/shared/culture/test/thx/culture/TestEmbed.hx"
		thx.culture.TestEmbed.__hx_ctor_thx_culture_TestEmbed(this, i);
	}
	
	
	public static void __hx_ctor_thx_culture_TestEmbed(thx.culture.TestEmbed __temp_me36, int i)
	{
		//line 8 "/shared/culture/test/thx/culture/TestEmbed.hx"
		__temp_me36.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
		return new thx.culture.TestEmbed(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
		return new thx.culture.TestEmbed(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testEmbed()
	{
		//line 12 "/shared/culture/test/thx/culture/TestEmbed.hx"
		int _g1 = 0;
		//line 12 "/shared/culture/test/thx/culture/TestEmbed.hx"
		int _g = this.x;
		//line 12 "/shared/culture/test/thx/culture/TestEmbed.hx"
		while (( _g1 < _g ))
		{
			//line 12 "/shared/culture/test/thx/culture/TestEmbed.hx"
			 ++ _g1;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object o = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl1 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", ".", ".", ".", "-", "+", "\u20ac", "Non un numero reale", "-Infinito", "%", "\u2030", "+Infinito"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (9) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl2 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "", "", "Monday", "Gregorian", "calendario gregoriano", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it-IT", __temp_odecl2, "it-IT", false, false, "it", "ita", "Gregorian", "Italian", "italiano", "Italy", "Italia", __temp_odecl1, ";", "ITA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1040) )) )});
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.DateFormatInfo tmp1 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
			}
			
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			thx.culture.NumberFormatInfo tmp13 = null;
			//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
			if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = null;
			}
			else
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
			}
			
			//line 13 "/shared/culture/test/thx/culture/TestEmbed.hx"
			thx.culture.Culture itit = thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
			//line 14 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.equals("italiano (Italia)", ( itit.nameNative + (( (( null == itit.nameRegionNative )) ? ("") : (( ( " (" + itit.nameRegionNative ) + ")" )) )) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbed"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
			//line 15 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.equals("italiano", itit.nameNative, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbed"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
			//line 16 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.equals("Italia", itit.nameRegionNative, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbed"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
		}
		
	}
	
	
	public void testListLanguages()
	{
		//line 20 "/shared/culture/test/thx/culture/TestEmbed.hx"
		int _g1 = 0;
		//line 20 "/shared/culture/test/thx/culture/TestEmbed.hx"
		int _g = this.x;
		//line 20 "/shared/culture/test/thx/culture/TestEmbed.hx"
		while (( _g1 < _g ))
		{
			//line 20 "/shared/culture/test/thx/culture/TestEmbed.hx"
			 ++ _g1;
			//line 21 "/shared/culture/test/thx/culture/TestEmbed.hx"
			haxe.root.Array<java.lang.String> list = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"mr", "en-ph", "es-ec", "pt-br", "en-my", "sq-al", "ne", "az-cyrl", "fa", "zh", "sma", "fr-lu", "sr-cyrl-rs", "rm-ch", "fil-ph", "hsb-de", "en-ie", "es-cr", "en", "mr-in", "hr-ba", "zh-chs", "be-by", "arn-cl", "mn", "pl", "es-py", "km", "is-is", "id", "ml", "hy", "ta-in", "nso-za", "ro", "es-pe", "ms", "uz-cyrl-uz", "fr-mc", "gu", "hy-am", "ky", "tr", "sv-se", "es-ni", "smj-no", "uz-latn", "ur-pk", "eu", "fr-be", "fo", "qut", "ar-qa", "es-pr", "ug", "fr-fr", "cs", "ps-af", "tzm", "fr-ch", "bs-cyrl", "te", "mk-mk", "quz", "ko", "ru", "tt", "fy-nl", "smn", "kn-in", "gsw", "prs", "ig", "kl-gl", "ga", "kl", "mn-mong", "tzm-latn", "gd", "wo-sn", "cy", "ba-ru", "it-ch", "es-bo", "pt", "ar-ye", "se", "arn", "zh-mo", "sr-cyrl-ba", "kn", "tg-cyrl-tj", "vi-vn", "uk-ua", "tg-cyrl", "en-nz", "ar-tn", "nn-no", "de-li", "fil", "zh-cht", "lt", "qut-gt", "en-au", "en-sg", "ne-np", "zh-tw", "es-mx", "lb-lu", "ha-latn-ng", "bn", "sms-fi", "hsb", "tzm-latn-dz", "sr-cyrl-me", "te-in", "ar-kw", "es-gt", "ba", "br-fr", "yo", "hu-hu", "ta", "ko-kr", "syr", "gu-in", "ar-lb", "es-pa", "quz-pe", "nl-nl", "zh-hant", "dsb", "sa", "ar-bh", "kok", "es-sv", "ca", "bn-in", "en-bz", "en-gb", "vi", "or-in", "sr-cyrl-cs", "fo-fo", "nl-be", "zh-sg", "az-latn-az", "es-us", "sw-ke", "et-ee", "el-gr", "bs-cyrl-ba", "hr", "da-dk", "sr-latn-rs", "el", "ka", "mn-mn", "oc", "smj", "sah-ru", "no", "mn-mong-cn", "sv-fi", "or", "xh", "bs-latn", "ar-ae", "es-es", "es-ar", "en-za", "be", "pa", "hr-hr", "nn", "he", "ms-bn", "da", "ar-ly", "ar-sa", "sk", "en-tt", "en-029", "dsb-de", "am-et", "prs-af", "uz", "fa-ir", "pt-pt", "ii-cn", "az-cyrl-az", "tr-tr", "nso", "ru-ru", "ar-eg", "ga-ie", "se-se", "wo", "de-at", "si-lk", "es", "dv-mv", "syr-sy", "sr-cyrl", "pa-in", "dv", "ha", "sah", "as-in", "pl-pl", "sma-se", "id-id", "cs-cz", "fi-fi", "kok-in", "en-us", "lo-la", "az", "tk-tm", "sa-in", "uz-latn-uz", "ar-dz", "nb", "it-it", "bg-bg", "iu-latn", "iu-cans", "es-uy", "tn", "af", "kk", "gl", "uk", "iu-latn-ca", "ro-ro", "zu-za", "fy", "iu-cans-ca", "hu", "smn-fi", "rw", "uz-cyrl", "az-latn", "de-lu", "es-do", "bs-latn-ba", "ar-jo", "bs", "moh-ca", "eu-es", "hi-in", "zu", "de-ch", "sr-latn-ba", "ky-kg", "en-ca", "ha-latn", "ms-my", "en-in", "lb", "ar-om", "nl", "es-ve", "br", "he-il", "ca-es", "af-za", "quz-ec", "sl-si", "is", "iu", "sq", "de-de", "nb-no", "mi", "gd-gb", "tk", "en-jm", "fr-ca", "quz-bo", "bo-cn", "rw-rw", "smj-se", "de", "mt-mt", "fi", "lo", "yo-ng", "sw", "sk-sk", "lt-lt", "sl", "ii", "ja-jp", "se-no", "cy-gb", "lv", "th-th", "ml-in", "co-fr", "sma-no", "fr", "ka-ge", "mt", "zh-cn", "ar-ma", "se-fi", "ar-iq", "es-cl", "gl-es", "mi-nz", "et", "xh-za", "ar-sy", "bo", "it", "mn-cyrl", "sr", "co", "zh-hk", "si", "gsw-fr", "rm", "ps", "ig-ng", "es-hn", "tn-za", "ur", "lv-lv", "zh-hans", "tg", "moh", "tt-ru", "kk-kz", "as", "th", "en-zw", "sr-latn-cs", "ja", "es-co", "sr-latn-me", "sv", "hi", "mk", "bg", "ar", "oc-fr", "km-kh", "sms", "am", "bn-bd", "sr-latn", "ug-cn"});
			//line 22 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("it"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )})) ));
			//line 23 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("en"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )})) ));
			//line 24 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("fr"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )})) ));
			//line 25 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("it-it"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )})) ));
			//line 26 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("en-us"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )})) ));
			//line 27 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("en-gb"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )})) ));
		}
		
	}
	
	
	public void testEmbedMany()
	{
		//line 31 "/shared/culture/test/thx/culture/TestEmbed.hx"
		int _g1 = 0;
		//line 31 "/shared/culture/test/thx/culture/TestEmbed.hx"
		int _g = this.x;
		//line 31 "/shared/culture/test/thx/culture/TestEmbed.hx"
		while (( _g1 < _g ))
		{
			//line 31 "/shared/culture/test/thx/culture/TestEmbed.hx"
			 ++ _g1;
			//line 32 "/shared/culture/test/thx/culture/TestEmbed.hx"
			{
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it", null, "it", true, false, "it", "ita", "Gregorian", "Italian", "italiano", null, null, null, ";", "ITA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (16) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp = haxe.lang.Runtime.getField(o, "code", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.DateFormatInfo tmp1 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o, "dateTime", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp1 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o1 = haxe.lang.Runtime.getField(o, "dateTime", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp1 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o1, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o1, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o1, "separatorTime", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp2 = haxe.lang.Runtime.getField(o, "ietf", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp3 = haxe.lang.Runtime.getField(o, "isNeutral", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp4 = haxe.lang.Runtime.getField(o, "iso2", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp5 = haxe.lang.Runtime.getField(o, "iso3", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp6 = haxe.lang.Runtime.getField(o, "isRightToLeft", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp7 = haxe.lang.Runtime.getField(o, "lcid", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp8 = haxe.lang.Runtime.getField(o, "nameCalendar", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp9 = haxe.lang.Runtime.getField(o, "nameEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp10 = haxe.lang.Runtime.getField(o, "nameNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp11 = haxe.lang.Runtime.getField(o, "nameRegionEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp12 = haxe.lang.Runtime.getField(o, "nameRegionNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.NumberFormatInfo tmp13 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o, "number", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp13 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o2 = haxe.lang.Runtime.getField(o, "number", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp13 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o2, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o2, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o2, "symbolPositiveInfinity", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp), tmp1, haxe.lang.Runtime.toString(tmp2), haxe.lang.Runtime.toBool(tmp3), haxe.lang.Runtime.toString(tmp4), haxe.lang.Runtime.toString(tmp5), haxe.lang.Runtime.toBool(tmp6), ((int) (haxe.lang.Runtime.toInt(tmp7)) ), haxe.lang.Runtime.toString(tmp8), haxe.lang.Runtime.toString(tmp9), haxe.lang.Runtime.toString(tmp10), haxe.lang.Runtime.toString(tmp11), haxe.lang.Runtime.toString(tmp12), tmp13, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o, "win3", true))));
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o3 = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"en", null, "en", true, false, "en", "eng", "Gregorian", "English", "English", null, null, null, ",", "ENU"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (9) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp14 = haxe.lang.Runtime.getField(o3, "code", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.DateFormatInfo tmp15 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o3, "dateTime", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp15 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o4 = haxe.lang.Runtime.getField(o3, "dateTime", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp15 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o4, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o4, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o4, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o4, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o4, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o4, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o4, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o4, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o4, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o4, "separatorTime", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp16 = haxe.lang.Runtime.getField(o3, "ietf", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp17 = haxe.lang.Runtime.getField(o3, "isNeutral", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp18 = haxe.lang.Runtime.getField(o3, "iso2", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp19 = haxe.lang.Runtime.getField(o3, "iso3", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp20 = haxe.lang.Runtime.getField(o3, "isRightToLeft", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp21 = haxe.lang.Runtime.getField(o3, "lcid", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp22 = haxe.lang.Runtime.getField(o3, "nameCalendar", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp23 = haxe.lang.Runtime.getField(o3, "nameEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp24 = haxe.lang.Runtime.getField(o3, "nameNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp25 = haxe.lang.Runtime.getField(o3, "nameRegionEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp26 = haxe.lang.Runtime.getField(o3, "nameRegionNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.NumberFormatInfo tmp27 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o3, "number", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp27 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o5 = haxe.lang.Runtime.getField(o3, "number", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp27 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o5, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o5, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o5, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o5, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o5, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o5, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o5, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o5, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o5, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o5, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o5, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o5, "symbolPositiveInfinity", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp14), tmp15, haxe.lang.Runtime.toString(tmp16), haxe.lang.Runtime.toBool(tmp17), haxe.lang.Runtime.toString(tmp18), haxe.lang.Runtime.toString(tmp19), haxe.lang.Runtime.toBool(tmp20), ((int) (haxe.lang.Runtime.toInt(tmp21)) ), haxe.lang.Runtime.toString(tmp22), haxe.lang.Runtime.toString(tmp23), haxe.lang.Runtime.toString(tmp24), haxe.lang.Runtime.toString(tmp25), haxe.lang.Runtime.toString(tmp26), tmp27, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o3, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o3, "win3", true))));
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o6 = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"fr", null, "fr", true, false, "fr", "fra", "Gregorian", "French", "fran\u00e7ais", null, null, null, ";", "FRA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (12) )) )});
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp28 = haxe.lang.Runtime.getField(o6, "code", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.DateFormatInfo tmp29 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o6, "dateTime", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp29 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o7 = haxe.lang.Runtime.getField(o6, "dateTime", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp29 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o7, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o7, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o7, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o7, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o7, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o7, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o7, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o7, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o7, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o7, "separatorTime", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp30 = haxe.lang.Runtime.getField(o6, "ietf", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp31 = haxe.lang.Runtime.getField(o6, "isNeutral", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp32 = haxe.lang.Runtime.getField(o6, "iso2", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp33 = haxe.lang.Runtime.getField(o6, "iso3", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp34 = haxe.lang.Runtime.getField(o6, "isRightToLeft", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp35 = haxe.lang.Runtime.getField(o6, "lcid", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp36 = haxe.lang.Runtime.getField(o6, "nameCalendar", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp37 = haxe.lang.Runtime.getField(o6, "nameEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp38 = haxe.lang.Runtime.getField(o6, "nameNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp39 = haxe.lang.Runtime.getField(o6, "nameRegionEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp40 = haxe.lang.Runtime.getField(o6, "nameRegionNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.NumberFormatInfo tmp41 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o6, "number", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp41 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o8 = haxe.lang.Runtime.getField(o6, "number", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp41 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o8, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o8, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o8, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o8, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o8, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o8, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o8, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o8, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o8, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o8, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o8, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o8, "symbolPositiveInfinity", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp28), tmp29, haxe.lang.Runtime.toString(tmp30), haxe.lang.Runtime.toBool(tmp31), haxe.lang.Runtime.toString(tmp32), haxe.lang.Runtime.toString(tmp33), haxe.lang.Runtime.toBool(tmp34), ((int) (haxe.lang.Runtime.toInt(tmp35)) ), haxe.lang.Runtime.toString(tmp36), haxe.lang.Runtime.toString(tmp37), haxe.lang.Runtime.toString(tmp38), haxe.lang.Runtime.toString(tmp39), haxe.lang.Runtime.toString(tmp40), tmp41, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o6, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o6, "win3", true))));
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o9 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl1 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", ".", ".", ".", "-", "+", "\u20ac", "Non un numero reale", "-Infinito", "%", "\u2030", "+Infinito"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (9) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl2 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "", "", "Monday", "Gregorian", "calendario gregoriano", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					o9 = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it-IT", __temp_odecl2, "it-IT", false, false, "it", "ita", "Gregorian", "Italian", "italiano", "Italy", "Italia", __temp_odecl1, ";", "ITA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1040) )) )});
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp42 = haxe.lang.Runtime.getField(o9, "code", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.DateFormatInfo tmp43 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o9, "dateTime", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp43 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o10 = haxe.lang.Runtime.getField(o9, "dateTime", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp43 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o10, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o10, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o10, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o10, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o10, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o10, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o10, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o10, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o10, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o10, "separatorTime", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp44 = haxe.lang.Runtime.getField(o9, "ietf", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp45 = haxe.lang.Runtime.getField(o9, "isNeutral", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp46 = haxe.lang.Runtime.getField(o9, "iso2", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp47 = haxe.lang.Runtime.getField(o9, "iso3", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp48 = haxe.lang.Runtime.getField(o9, "isRightToLeft", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp49 = haxe.lang.Runtime.getField(o9, "lcid", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp50 = haxe.lang.Runtime.getField(o9, "nameCalendar", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp51 = haxe.lang.Runtime.getField(o9, "nameEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp52 = haxe.lang.Runtime.getField(o9, "nameNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp53 = haxe.lang.Runtime.getField(o9, "nameRegionEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp54 = haxe.lang.Runtime.getField(o9, "nameRegionNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.NumberFormatInfo tmp55 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o9, "number", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp55 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o11 = haxe.lang.Runtime.getField(o9, "number", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp55 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o11, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o11, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o11, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o11, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o11, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o11, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o11, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o11, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o11, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o11, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o11, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o11, "symbolPositiveInfinity", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp42), tmp43, haxe.lang.Runtime.toString(tmp44), haxe.lang.Runtime.toBool(tmp45), haxe.lang.Runtime.toString(tmp46), haxe.lang.Runtime.toString(tmp47), haxe.lang.Runtime.toBool(tmp48), ((int) (haxe.lang.Runtime.toInt(tmp49)) ), haxe.lang.Runtime.toString(tmp50), haxe.lang.Runtime.toString(tmp51), haxe.lang.Runtime.toString(tmp52), haxe.lang.Runtime.toString(tmp53), haxe.lang.Runtime.toString(tmp54), tmp55, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o9, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o9, "win3", true))));
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o12 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl3 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ".", ".", ".", ",", ",", ",", "-", "+", "\u00a3", "NaN", "-Infinity", "%", "\u2030", "Infinity"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) )});
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl4 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "AM", "PM", "Monday", "Gregorian", "Gregorian Calendar", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), "dd MMMM yyyy", "dd/MM/yyyy", "dd MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (1) )) )});
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					o12 = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"en-GB", __temp_odecl4, "en-GB", false, false, "en", "eng", "Gregorian", "English", "English", "United Kingdom", "United Kingdom", __temp_odecl3, ",", "ENG"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (2057) )) )});
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp56 = haxe.lang.Runtime.getField(o12, "code", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.DateFormatInfo tmp57 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o12, "dateTime", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp57 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o13 = haxe.lang.Runtime.getField(o12, "dateTime", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp57 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o13, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o13, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o13, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o13, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o13, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o13, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o13, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o13, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o13, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o13, "separatorTime", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp58 = haxe.lang.Runtime.getField(o12, "ietf", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp59 = haxe.lang.Runtime.getField(o12, "isNeutral", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp60 = haxe.lang.Runtime.getField(o12, "iso2", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp61 = haxe.lang.Runtime.getField(o12, "iso3", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp62 = haxe.lang.Runtime.getField(o12, "isRightToLeft", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp63 = haxe.lang.Runtime.getField(o12, "lcid", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp64 = haxe.lang.Runtime.getField(o12, "nameCalendar", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp65 = haxe.lang.Runtime.getField(o12, "nameEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp66 = haxe.lang.Runtime.getField(o12, "nameNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp67 = haxe.lang.Runtime.getField(o12, "nameRegionEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp68 = haxe.lang.Runtime.getField(o12, "nameRegionNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.NumberFormatInfo tmp69 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o12, "number", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp69 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o14 = haxe.lang.Runtime.getField(o12, "number", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp69 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o14, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o14, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o14, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o14, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o14, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o14, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o14, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o14, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o14, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o14, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o14, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o14, "symbolPositiveInfinity", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp56), tmp57, haxe.lang.Runtime.toString(tmp58), haxe.lang.Runtime.toBool(tmp59), haxe.lang.Runtime.toString(tmp60), haxe.lang.Runtime.toString(tmp61), haxe.lang.Runtime.toBool(tmp62), ((int) (haxe.lang.Runtime.toInt(tmp63)) ), haxe.lang.Runtime.toString(tmp64), haxe.lang.Runtime.toString(tmp65), haxe.lang.Runtime.toString(tmp66), haxe.lang.Runtime.toString(tmp67), haxe.lang.Runtime.toString(tmp68), tmp69, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o12, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o12, "win3", true))));
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object o15 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl5 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", "\u00a0", "\u00a0", "\u00a0", "-", "+", "\u20ac", "Non Num\u00e9rique", "-Infini", "%", "\u2030", "+Infini"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (8) )) ), ((double) (((double) (1) )) ), ((double) (((double) (0) )) ), ((double) (((double) (3) )) ), ((double) (((double) (0) )) )});
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl6 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "", "", "Monday", "Gregorian", "calendrier gr\u00e9gorien", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"di", "lu", "ma", "me", "je", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janvier", "f\u00e9vrier", "mars", "avril", "mai", "juin", "juillet", "ao\u00fbt", "septembre", "octobre", "novembre", "d\u00e9cembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janv.", "f\u00e9vr.", "mars", "avr.", "mai", "juin", "juil.", "ao\u00fbt", "sept.", "oct.", "nov.", "d\u00e9c.", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janvier", "f\u00e9vrier", "mars", "avril", "mai", "juin", "juillet", "ao\u00fbt", "septembre", "octobre", "novembre", "d\u00e9cembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janv.", "f\u00e9vr.", "mars", "avr.", "mai", "juin", "juil.", "ao\u00fbt", "sept.", "oct.", "nov.", "d\u00e9c.", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "d MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (1) )) )});
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					o15 = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"fr-FR", __temp_odecl6, "fr-FR", false, false, "fr", "fra", "Gregorian", "French", "fran\u00e7ais", "France", "France", __temp_odecl5, ";", "FRA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1036) )) )});
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp70 = haxe.lang.Runtime.getField(o15, "code", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.DateFormatInfo tmp71 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o15, "dateTime", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp71 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o16 = haxe.lang.Runtime.getField(o15, "dateTime", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp71 = new thx.culture.DateFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o16, "calendarWeekRuleIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "calendarWeekRuleName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "designatorAm", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "designatorPm", true)), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o16, "firstDayOfWeekIndex", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "firstDayOfWeekName", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "nameCalendar", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "nameCalendarNative", true)), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o16, "nameDays", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o16, "nameDaysAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o16, "nameDaysShortest", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o16, "nameMonths", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o16, "nameMonthsAbbreviated", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o16, "nameMonthGenitives", true)) ), ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(o16, "nameMonthGenitivesAbbreviated", true)) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "patternDateLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "patternDateShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "patternDateTimeFull", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "patternDateTimeSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "patternMonthDay", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "patternRfc1123", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "patternTimeLong", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "patternTimeShort", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "patternUniversalSortable", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "patternYearMonth", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "separatorDate", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o16, "separatorTime", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp72 = haxe.lang.Runtime.getField(o15, "ietf", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp73 = haxe.lang.Runtime.getField(o15, "isNeutral", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp74 = haxe.lang.Runtime.getField(o15, "iso2", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp75 = haxe.lang.Runtime.getField(o15, "iso3", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp76 = haxe.lang.Runtime.getField(o15, "isRightToLeft", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp77 = haxe.lang.Runtime.getField(o15, "lcid", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp78 = haxe.lang.Runtime.getField(o15, "nameCalendar", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp79 = haxe.lang.Runtime.getField(o15, "nameEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp80 = haxe.lang.Runtime.getField(o15, "nameNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp81 = haxe.lang.Runtime.getField(o15, "nameRegionEnglish", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				java.lang.Object tmp82 = haxe.lang.Runtime.getField(o15, "nameRegionNative", true);
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.NumberFormatInfo tmp83 = null;
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				if (( null == haxe.lang.Runtime.getField(o15, "number", true) )) 
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp83 = null;
				}
				else
				{
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					java.lang.Object o17 = haxe.lang.Runtime.getField(o15, "number", true);
					//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
					tmp83 = new thx.culture.NumberFormatInfo(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o17, "decimalDigitsCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o17, "decimalDigitsNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o17, "decimalDigitsPercent", true))) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o17, "groupSizesCurrency", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o17, "groupSizesNumber", true)) ), ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(o17, "groupSizesPercent", true)) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o17, "patternNegativeCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o17, "patternNegativeNumber", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o17, "patternNegativePercent", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o17, "patternPositiveCurrency", true))) ), ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(o17, "patternPositivePercent", true))) ), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "separatorDecimalCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "separatorDecimalNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "separatorDecimalPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "separatorGroupCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "separatorGroupNumber", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "separatorGroupPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "signNegative", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "signPositive", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "symbolCurrency", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "symbolNaN", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "symbolNegativeInfinity", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "symbolPercent", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "symbolPermille", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o17, "symbolPositiveInfinity", true)));
				}
				
				//line 36 "/usr/lib/haxe/lib/thx,culture/0,5,0/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(new thx.culture.Culture(haxe.lang.Runtime.toString(tmp70), tmp71, haxe.lang.Runtime.toString(tmp72), haxe.lang.Runtime.toBool(tmp73), haxe.lang.Runtime.toString(tmp74), haxe.lang.Runtime.toString(tmp75), haxe.lang.Runtime.toBool(tmp76), ((int) (haxe.lang.Runtime.toInt(tmp77)) ), haxe.lang.Runtime.toString(tmp78), haxe.lang.Runtime.toString(tmp79), haxe.lang.Runtime.toString(tmp80), haxe.lang.Runtime.toString(tmp81), haxe.lang.Runtime.toString(tmp82), tmp83, haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o15, "separatorList", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(o15, "win3", true))));
			}
			
			//line 33 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.notNull(thx.culture.Culture.getByIso2("fr"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbedMany"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
			//line 34 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.notNull(thx.culture.Culture.getByIso3("fra"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbedMany"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
			//line 35 "/shared/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.notNull(thx.culture.Culture.getByCode("fr-fr"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbedMany"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("x")) 
					{
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						this.x = ((int) (value) );
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						return value;
					}
					
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("x")) 
					{
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						return value;
					}
					
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			switch (field.hashCode())
			{
				case -739470234:
				{
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testEmbedMany")) 
					{
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEmbedMany")) );
					}
					
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
				case 120:
				{
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("x")) 
					{
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						return this.x;
					}
					
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
				case -1639087701:
				{
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testListLanguages")) 
					{
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testListLanguages")) );
					}
					
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
				case -1204345497:
				{
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testEmbed")) 
					{
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEmbed")) );
					}
					
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("x")) 
					{
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						return ((double) (this.x) );
					}
					
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			switch (field.hashCode())
			{
				case -739470234:
				{
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testEmbedMany")) 
					{
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						this.testEmbedMany();
					}
					
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
				case -1204345497:
				{
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testEmbed")) 
					{
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						this.testEmbed();
					}
					
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
				case -1639087701:
				{
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testListLanguages")) 
					{
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
						this.testListLanguages();
					}
					
					//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
			}
			
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
		baseArr.push("x");
		//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/shared/culture/test/thx/culture/TestEmbed.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


