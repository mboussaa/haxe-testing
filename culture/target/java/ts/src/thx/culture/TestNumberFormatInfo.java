// Generated by Haxe 3.3.0
package thx.culture;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestNumberFormatInfo extends haxe.lang.HxObject
{
	public TestNumberFormatInfo(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestNumberFormatInfo()
	{
		//line 7 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		thx.culture.TestNumberFormatInfo.__hx_ctor_thx_culture_TestNumberFormatInfo(this);
	}
	
	
	public static void __hx_ctor_thx_culture_TestNumberFormatInfo(thx.culture.TestNumberFormatInfo __temp_me40)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		return new thx.culture.TestNumberFormatInfo(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		return new thx.culture.TestNumberFormatInfo();
	}
	
	
	public void testInvariant()
	{
		//line 10 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		thx.culture.NumberFormatInfo n = thx.culture.NumberFormatInfo.invariant;
		//line 12 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		utest.Assert.same(new haxe.root.Array(new java.lang.Object[]{3}), n.groupSizesNumber, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestNumberFormatInfo", "TestNumberFormatInfo.hx", "testInvariant"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (12) )) )}));
		//line 13 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		utest.Assert.equals(".", n.separatorDecimalNumber, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestNumberFormatInfo", "TestNumberFormatInfo.hx", "testInvariant"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (13) )) )}));
		//line 14 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		utest.Assert.equals(",", n.separatorGroupNumber, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestNumberFormatInfo", "TestNumberFormatInfo.hx", "testInvariant"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
		//line 15 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		utest.Assert.equals("-", n.signNegative, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestNumberFormatInfo", "TestNumberFormatInfo.hx", "testInvariant"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
		//line 16 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		utest.Assert.equals("+", n.signPositive, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestNumberFormatInfo", "TestNumberFormatInfo.hx", "testInvariant"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
		//line 17 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		utest.Assert.equals("NaN", n.symbolNaN, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestNumberFormatInfo", "TestNumberFormatInfo.hx", "testInvariant"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		{
			//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
			switch (field.hashCode())
			{
				case -1462059186:
				{
					//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
					if (field.equals("testInvariant")) 
					{
						//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testInvariant")) );
					}
					
					//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		{
			//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
			switch (field.hashCode())
			{
				case -1462059186:
				{
					//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
					if (field.equals("testInvariant")) 
					{
						//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
						this.testInvariant();
					}
					
					//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 6 "/shared/culture/thx/culture/TestNumberFormatInfo.hx"
		return null;
	}
	
	
}


