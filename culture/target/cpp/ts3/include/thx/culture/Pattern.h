// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_culture_Pattern
#define INCLUDED_thx_culture_Pattern

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,culture,Pattern)

namespace thx{
namespace culture{


class HXCPP_CLASS_ATTRIBUTES Pattern_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Pattern_obj OBJ_;
		Pattern_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.culture.Pattern")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.culture.Pattern"); }
		static hx::ObjectPtr< Pattern_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Pattern_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Pattern","\x30","\x2e","\xc8","\xde"); }

		static void __boot();
		static ::Array< ::String > currencyNegatives;
		static ::Array< ::String > currencyPositives;
		static ::Array< ::String > numberNegatives;
		static ::Array< ::String > percentNegatives;
		static ::Array< ::String > percentPositives;
};

} // end namespace thx
} // end namespace culture

#endif /* INCLUDED_thx_culture_Pattern */ 
