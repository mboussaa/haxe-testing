// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_TestNumberFormatInfo
#include <thx/culture/TestNumberFormatInfo.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace culture{

void TestNumberFormatInfo_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.culture.TestNumberFormatInfo","new",0xf39f869c,"thx.culture.TestNumberFormatInfo.new","thx/culture/TestNumberFormatInfo.hx",9,0x8592b792)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   9)		this->x = i;
            	}

Dynamic TestNumberFormatInfo_obj::__CreateEmpty() { return new TestNumberFormatInfo_obj; }

hx::ObjectPtr< TestNumberFormatInfo_obj > TestNumberFormatInfo_obj::__new(Int i)
{
	hx::ObjectPtr< TestNumberFormatInfo_obj > _hx_result = new TestNumberFormatInfo_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestNumberFormatInfo_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestNumberFormatInfo_obj > _hx_result = new TestNumberFormatInfo_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestNumberFormatInfo_obj::testInvariant(){
            	HX_STACK_FRAME("thx.culture.TestNumberFormatInfo","testInvariant",0x9c3a31ca,"thx.culture.TestNumberFormatInfo.testInvariant","thx/culture/TestNumberFormatInfo.hx",13,0x8592b792)
            	HX_STACK_THIS(this)
HXLINE(  13)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  13)		HX_VARI( Int,_g) = this->x;
HXDLIN(  13)		while((_g1 < _g)){
HXLINE(  13)			++_g1;
HXLINE(  14)			HX_VARI(  ::thx::culture::NumberFormatInfo,n) = ::thx::culture::NumberFormatInfo_obj::invariant;
HXLINE(  16)			::utest::Assert_obj::same(::cpp::VirtualArray_obj::__new(1)->init(0,(int)3),n->groupSizesNumber,null(),null(),null(),hx::SourceInfo(HX_("TestNumberFormatInfo.hx",be,52,7e,b0),16,HX_("thx.culture.TestNumberFormatInfo",aa,48,81,44),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  17)			::utest::Assert_obj::equals(HX_(".",2e,00,00,00),n->separatorDecimalNumber,null(),hx::SourceInfo(HX_("TestNumberFormatInfo.hx",be,52,7e,b0),17,HX_("thx.culture.TestNumberFormatInfo",aa,48,81,44),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  18)			::utest::Assert_obj::equals(HX_(",",2c,00,00,00),n->separatorGroupNumber,null(),hx::SourceInfo(HX_("TestNumberFormatInfo.hx",be,52,7e,b0),18,HX_("thx.culture.TestNumberFormatInfo",aa,48,81,44),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  19)			::utest::Assert_obj::equals(HX_("-",2d,00,00,00),n->signNegative,null(),hx::SourceInfo(HX_("TestNumberFormatInfo.hx",be,52,7e,b0),19,HX_("thx.culture.TestNumberFormatInfo",aa,48,81,44),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  20)			::utest::Assert_obj::equals(HX_("+",2b,00,00,00),n->signPositive,null(),hx::SourceInfo(HX_("TestNumberFormatInfo.hx",be,52,7e,b0),20,HX_("thx.culture.TestNumberFormatInfo",aa,48,81,44),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  21)			::utest::Assert_obj::equals(HX_("NaN",9b,84,3b,00),n->symbolNaN,null(),hx::SourceInfo(HX_("TestNumberFormatInfo.hx",be,52,7e,b0),21,HX_("thx.culture.TestNumberFormatInfo",aa,48,81,44),HX_("testInvariant",8e,d8,cd,28)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestNumberFormatInfo_obj,testInvariant,(void))


TestNumberFormatInfo_obj::TestNumberFormatInfo_obj()
{
}

hx::Val TestNumberFormatInfo_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testInvariant") ) { return hx::Val( testInvariant_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestNumberFormatInfo_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestNumberFormatInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestNumberFormatInfo_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestNumberFormatInfo_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestNumberFormatInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String TestNumberFormatInfo_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testInvariant","\x8e","\xd8","\xcd","\x28"),
	::String(null()) };

static void TestNumberFormatInfo_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestNumberFormatInfo_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestNumberFormatInfo_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestNumberFormatInfo_obj::__mClass,"__mClass");
};

#endif

hx::Class TestNumberFormatInfo_obj::__mClass;

void TestNumberFormatInfo_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.culture.TestNumberFormatInfo","\xaa","\x48","\x81","\x44");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestNumberFormatInfo_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestNumberFormatInfo_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestNumberFormatInfo_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestNumberFormatInfo_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestNumberFormatInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestNumberFormatInfo_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace culture
