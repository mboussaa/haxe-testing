// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_culture_Pattern
#include <thx/culture/Pattern.h>
#endif

namespace thx{
namespace culture{

void Pattern_obj::__construct() { }

Dynamic Pattern_obj::__CreateEmpty() { return new Pattern_obj; }

hx::ObjectPtr< Pattern_obj > Pattern_obj::__new()
{
	hx::ObjectPtr< Pattern_obj > _hx_result = new Pattern_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Pattern_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Pattern_obj > _hx_result = new Pattern_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< ::String > Pattern_obj::currencyNegatives;

::Array< ::String > Pattern_obj::currencyPositives;

::Array< ::String > Pattern_obj::numberNegatives;

::Array< ::String > Pattern_obj::percentNegatives;

::Array< ::String > Pattern_obj::percentPositives;


Pattern_obj::Pattern_obj()
{
}

bool Pattern_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"numberNegatives") ) { outValue = numberNegatives; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"percentNegatives") ) { outValue = percentNegatives; return true; }
		if (HX_FIELD_EQ(inName,"percentPositives") ) { outValue = percentPositives; return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currencyNegatives") ) { outValue = currencyNegatives; return true; }
		if (HX_FIELD_EQ(inName,"currencyPositives") ) { outValue = currencyPositives; return true; }
	}
	return false;
}

bool Pattern_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"numberNegatives") ) { numberNegatives=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"percentNegatives") ) { percentNegatives=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"percentPositives") ) { percentPositives=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currencyNegatives") ) { currencyNegatives=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"currencyPositives") ) { currencyPositives=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Pattern_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Pattern_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Pattern_obj::currencyNegatives,HX_HCSTRING("currencyNegatives","\xcd","\x66","\x64","\x9f")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Pattern_obj::currencyPositives,HX_HCSTRING("currencyPositives","\x09","\x22","\x1c","\xa7")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Pattern_obj::numberNegatives,HX_HCSTRING("numberNegatives","\x55","\x38","\xef","\xbe")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Pattern_obj::percentNegatives,HX_HCSTRING("percentNegatives","\xd9","\xb4","\x40","\x73")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Pattern_obj::percentPositives,HX_HCSTRING("percentPositives","\x15","\x70","\xf8","\x7a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Pattern_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Pattern_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Pattern_obj::currencyNegatives,"currencyNegatives");
	HX_MARK_MEMBER_NAME(Pattern_obj::currencyPositives,"currencyPositives");
	HX_MARK_MEMBER_NAME(Pattern_obj::numberNegatives,"numberNegatives");
	HX_MARK_MEMBER_NAME(Pattern_obj::percentNegatives,"percentNegatives");
	HX_MARK_MEMBER_NAME(Pattern_obj::percentPositives,"percentPositives");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Pattern_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Pattern_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Pattern_obj::currencyNegatives,"currencyNegatives");
	HX_VISIT_MEMBER_NAME(Pattern_obj::currencyPositives,"currencyPositives");
	HX_VISIT_MEMBER_NAME(Pattern_obj::numberNegatives,"numberNegatives");
	HX_VISIT_MEMBER_NAME(Pattern_obj::percentNegatives,"percentNegatives");
	HX_VISIT_MEMBER_NAME(Pattern_obj::percentPositives,"percentPositives");
};

#endif

hx::Class Pattern_obj::__mClass;

static ::String Pattern_obj_sStaticFields[] = {
	HX_HCSTRING("currencyNegatives","\xcd","\x66","\x64","\x9f"),
	HX_HCSTRING("currencyPositives","\x09","\x22","\x1c","\xa7"),
	HX_HCSTRING("numberNegatives","\x55","\x38","\xef","\xbe"),
	HX_HCSTRING("percentNegatives","\xd9","\xb4","\x40","\x73"),
	HX_HCSTRING("percentPositives","\x15","\x70","\xf8","\x7a"),
	::String(null())
};

void Pattern_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.culture.Pattern","\xc6","\x0f","\xd8","\xa3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Pattern_obj::__GetStatic;
	__mClass->mSetStaticField = &Pattern_obj::__SetStatic;
	__mClass->mMarkFunc = Pattern_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Pattern_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Pattern_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Pattern_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pattern_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pattern_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Pattern_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.culture.Pattern","boot",0xafc535da,"thx.culture.Pattern.boot","thx/culture/Pattern.hx",4,0x464a523a)
HXLINE(   4)		currencyNegatives = ::Array_obj< ::String >::__new(16)->init(0,HX_("($n)",f7,39,8c,1a))->init(1,HX_("-$n",37,45,22,00))->init(2,HX_("$-n",c5,78,1b,00))->init(3,HX_("$n-",23,b1,1b,00))->init(4,HX_("(n$)",4b,20,c4,1a))->init(5,HX_("-n$",63,85,22,00))->init(6,HX_("n-$",45,9f,53,00))->init(7,HX_("n$-",77,97,53,00))->init(8,HX_("-n $",e5,2d,12,1e))->init(9,HX_("-$ n",65,07,da,1d))->init(10,HX_("n $-",fb,df,cd,48))->init(11,HX_("$ n-",7b,56,e4,17))->init(12,HX_("$ -n",1d,1e,e4,17))->init(13,HX_("n- $",c3,b9,d7,48))->init(14,HX_("($ n)",9f,8a,eb,1f))->init(15,HX_("(n $)",1f,14,d5,50));
            	}
{
            	HX_STACK_FRAME("thx.culture.Pattern","boot",0xafc535da,"thx.culture.Pattern.boot","thx/culture/Pattern.hx",5,0x464a523a)
HXLINE(   5)		currencyPositives = ::Array_obj< ::String >::__new(4)->init(0,HX_("$n",ca,1f,00,00))->init(1,HX_("n$",f6,5f,00,00))->init(2,HX_("$ n",72,6d,1b,00))->init(3,HX_("n $",f2,93,53,00));
            	}
{
            	HX_STACK_FRAME("thx.culture.Pattern","boot",0xafc535da,"thx.culture.Pattern.boot","thx/culture/Pattern.hx",6,0x464a523a)
HXLINE(   6)		numberNegatives = ::Array_obj< ::String >::__new(5)->init(0,HX_("(n)",23,ba,1e,00))->init(1,HX_("-n",a1,27,00,00))->init(2,HX_("- n",bb,41,22,00))->init(3,HX_("n-",ff,5f,00,00))->init(4,HX_("n -",fb,93,53,00));
            	}
{
            	HX_STACK_FRAME("thx.culture.Pattern","boot",0xafc535da,"thx.culture.Pattern.boot","thx/culture/Pattern.hx",7,0x464a523a)
HXLINE(   7)		percentNegatives = ::Array_obj< ::String >::__new(12)->init(0,HX_("-n %",e6,2d,12,1e))->init(1,HX_("-n%",64,85,22,00))->init(2,HX_("-%n",16,46,22,00))->init(3,HX_("%-n",06,3b,1c,00))->init(4,HX_("%n-",64,73,1c,00))->init(5,HX_("n-%",46,9f,53,00))->init(6,HX_("n%-",56,98,53,00))->init(7,HX_("-%n",16,46,22,00))->init(8,HX_("n %-",da,e0,cd,48))->init(9,HX_("% n-",1a,8d,8d,18))->init(10,HX_("% -n",bc,54,8d,18))->init(11,HX_("n- %",c4,b9,d7,48));
            	}
{
            	HX_STACK_FRAME("thx.culture.Pattern","boot",0xafc535da,"thx.culture.Pattern.boot","thx/culture/Pattern.hx",8,0x464a523a)
HXLINE(   8)		percentPositives = ::Array_obj< ::String >::__new(4)->init(0,HX_("n %",f3,93,53,00))->init(1,HX_("n%",f7,5f,00,00))->init(2,HX_("%n",a9,20,00,00))->init(3,HX_("% n",b3,2f,1c,00));
            	}
}

} // end namespace thx
} // end namespace culture
