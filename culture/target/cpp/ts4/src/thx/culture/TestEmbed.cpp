// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_DateFormatInfo
#include <thx/culture/DateFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_NumberFormatInfo
#include <thx/culture/NumberFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_TestEmbed
#include <thx/culture/TestEmbed.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace culture{

void TestEmbed_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.culture.TestEmbed","new",0x4436928f,"thx.culture.TestEmbed.new","thx/culture/TestEmbed.hx",8,0x5b0717c3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   8)		this->x = i;
            	}

Dynamic TestEmbed_obj::__CreateEmpty() { return new TestEmbed_obj; }

hx::ObjectPtr< TestEmbed_obj > TestEmbed_obj::__new(Int i)
{
	hx::ObjectPtr< TestEmbed_obj > _hx_result = new TestEmbed_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestEmbed_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestEmbed_obj > _hx_result = new TestEmbed_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestEmbed_obj::testEmbed(){
            	HX_STACK_FRAME("thx.culture.TestEmbed","testEmbed",0x78a2db96,"thx.culture.TestEmbed.testEmbed","thx/culture/TestEmbed.hx",12,0x5b0717c3)
            	HX_STACK_THIS(this)
HXLINE(  12)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  12)		HX_VARI( Int,_g) = this->x;
HXDLIN(  12)		while((_g1 < _g)){
HXLINE(  12)			++_g1;
HXLINE(  36)			HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            				->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            				->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            					->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)9)
            					->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(".",2e,00,00,00))
            					->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            					->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xac""",4c,ef,ab,00))
            					->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            					->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            					->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            					->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("Non un numero reale",f7,bd,ea,94))
            					->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            					->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            					->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            					->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("+Infinito",29,76,a7,22))
            					->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            					->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            					->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            					->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            					->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)2)
            					->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinito",2b,48,8a,c8))
            					->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            					->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(".",2e,00,00,00))
            					->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            					->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            					->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(".",2e,00,00,00))
            					->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            					->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            				->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("italiano",af,a6,00,8b))
            				->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Italy",03,12,37,55))
            				->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            					->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            					->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            					->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd d MMMM yyyy HH:mm:ss",dc,7e,69,9b))
            					->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("calendario gregoriano",45,88,b6,ba))
            					->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstFourDayWeek",fa,56,48,9b))
            					->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            					->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            					->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            					->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("dd MMMM",60,27,05,da))
            					->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd d MMMM yyyy",44,a9,80,93))
            					->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            					->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("do",8b,57,00,00))->init(1,HX_("lu",89,5e,00,00))->init(2,HX_("ma",54,5f,00,00))->init(3,HX_("me",58,5f,00,00))->init(4,HX_("gi",22,5a,00,00))->init(5,HX_("ve",2f,67,00,00))->init(6,HX_("sa",8e,64,00,00)))
            					->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            					->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            					->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            					->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("dom",82,42,4c,00))->init(1,HX_("lun",c5,59,52,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("mer",1a,0e,53,00))->init(4,HX_("gio",0d,84,4e,00))->init(5,HX_("ven",5f,e2,59,00))->init(6,HX_("sab",14,98,57,00)))
            					->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("HH:mm",1a,83,9d,a4))
            					->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            					->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("HH:mm:ss",80,50,d2,03))
            					->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            					->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            					->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("domenica",bc,78,e7,64))->init(1,HX_("luned\xc3""\xac""",ed,38,f2,eb))->init(2,HX_("marted\xc3""\xac""",be,1b,56,be))->init(3,HX_("mercoled\xc3""\xac""",0e,02,2a,7a))->init(4,HX_("gioved\xc3""\xac""",f1,38,8e,a7))->init(5,HX_("venerd\xc3""\xac""",e1,9a,99,33))->init(6,HX_("sabato",88,ac,f9,15)))
            					->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            					->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            					->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd/MM/yyyy",40,9b,42,af))
            					->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            					->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)2)))
            				->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            				->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            				->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            				->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("Italia",0e,a3,f8,3a))
            				->setFixed(9,HX_("code",2d,b1,c4,41),HX_("it-IT",4d,0e,e2,c1))
            				->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("it-IT",4d,0e,e2,c1))
            				->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("it",eb,5b,00,00))
            				->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("ita",16,12,50,00))
            				->setFixed(13,HX_("lcid",12,86,ae,47),(int)1040)
            				->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ITA",f6,ad,37,00))
            				->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Italian",a0,09,96,5e)));
HXDLIN(  36)			 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)			 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)			if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)				_hx_tmp1 = null();
            			}
            			else {
HXLINE(  36)				HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)				_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            			}
HXDLIN(  36)			 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)			 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)			 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)			 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)			 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)			 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)			 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)			 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)			 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)			 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)			 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)			 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)			if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)				_hx_tmp13 = null();
            			}
            			else {
HXLINE(  36)				HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)				_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            			}
HXDLIN(  36)			 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXLINE(  13)			HX_VARI(  ::thx::culture::Culture,itit) = ::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
HXLINE(  14)			::String _hx_tmp15;
HXDLIN(  14)			if (hx::IsNull( itit->nameRegionNative )) {
HXLINE(  14)				_hx_tmp15 = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(  14)				_hx_tmp15 = ((HX_(" (",08,1c,00,00) + itit->nameRegionNative) + HX_(")",29,00,00,00));
            			}
HXDLIN(  14)			::utest::Assert_obj::equals(HX_("italiano (Italia)",c4,89,47,7e),(itit->nameNative + _hx_tmp15),null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),14,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testEmbed",27,cc,d1,38)));
HXLINE(  15)			::utest::Assert_obj::equals(HX_("italiano",af,a6,00,8b),itit->nameNative,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),15,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testEmbed",27,cc,d1,38)));
HXLINE(  16)			::utest::Assert_obj::equals(HX_("Italia",0e,a3,f8,3a),itit->nameRegionNative,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),16,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testEmbed",27,cc,d1,38)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestEmbed_obj,testEmbed,(void))

void TestEmbed_obj::testListLanguages(){
            	HX_STACK_FRAME("thx.culture.TestEmbed","testListLanguages",0x4e15e79a,"thx.culture.TestEmbed.testListLanguages","thx/culture/TestEmbed.hx",20,0x5b0717c3)
            	HX_STACK_THIS(this)
HXLINE(  20)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  20)		HX_VARI( Int,_g) = this->x;
HXDLIN(  20)		while((_g1 < _g)){
HXLINE(  20)			++_g1;
HXLINE(  21)			HX_VARI( ::Array< ::String >,list) = ::Array_obj< ::String >::__new(353)->init(0,HX_("en-zw",61,9f,50,70))->init(1,HX_("bo",cd,55,00,00))->init(2,HX_("sk",98,64,00,00))->init(3,HX_("dsb",f3,45,4c,00))->init(4,HX_("smn-fi",9c,b0,8f,06))->init(5,HX_("km",a2,5d,00,00))->init(6,HX_("sr-latn-ba",6f,02,d2,c5))->init(7,HX_("es-cl",68,9c,9e,73))->init(8,HX_("be",c3,55,00,00))->init(9,HX_("yo-ng",90,65,fd,f4))->init(10,HX_("en-nz",f0,94,50,70))->init(11,HX_("mk-mk",2d,94,89,09))->init(12,HX_("sma-no",87,f1,f7,fd))->init(13,HX_("ca-es",fd,9d,eb,40))->init(14,HX_("en",69,58,00,00))->init(15,HX_("en-ie",80,90,50,70))->init(16,HX_("cy-gb",92,be,c8,50))->init(17,HX_("ar-bh",e2,12,5b,25))->init(18,HX_("zh-sg",13,80,c3,83))->init(19,HX_("ky",ae,5d,00,00))->init(20,HX_("ar-tn",96,22,5b,25))->init(21,HX_("uz-latn",57,71,8e,f9))->init(22,HX_("km-kh",a8,d6,0e,e4))->init(23,HX_("am",ec,54,00,00))->init(24,HX_("gd",1d,5a,00,00))->init(25,HX_("te",71,65,00,00))->init(26,HX_("sms",99,a2,57,00))->init(27,HX_("prs",31,60,55,00))->init(28,HX_("ka",96,5d,00,00))->init(29,HX_("sl-si",0a,4b,9a,7e))->init(30,HX_("sma-se",d8,f5,f7,fd))->init(31,HX_("quz-bo",e4,27,fc,dc))->init(32,HX_("ar-ye",e8,26,5b,25))->init(33,HX_("ar",f1,54,00,00))->init(34,HX_("kl",a1,5d,00,00))->init(35,HX_("es-sv",62,aa,9e,73))->init(36,HX_("sw-ke",e3,9c,df,85))->init(37,HX_("sr-latn-cs",60,03,d2,c5))->init(38,HX_("hy-am",e8,9f,c9,31))->init(39,HX_("rw",c5,63,00,00))->init(40,HX_("or",23,61,00,00))->init(41,HX_("nl-be",b2,55,99,9d))->init(42,HX_("wo",18,68,00,00))->init(43,HX_("it-it",4d,2a,e2,c1))->init(44,HX_("bg-bg",8d,4e,7c,b1))->init(45,HX_("ar-ae",00,12,5b,25))->init(46,HX_("ca",9e,56,00,00))->init(47,HX_("arn-cl",d9,15,24,b5))->init(48,HX_("quz-pe",0c,34,fc,dc))->init(49,HX_("ta",6d,65,00,00))->init(50,HX_("fi",43,59,00,00))->init(51,HX_("da",7d,57,00,00))->init(52,HX_("tzm",27,70,58,00))->init(53,HX_("vi-vn",52,67,d2,36))->init(54,HX_("ar-sa",aa,21,5b,25))->init(55,HX_("es",6e,58,00,00))->init(56,HX_("es-gt",ec,9f,9e,73))->init(57,HX_("ar-sy",c2,21,5b,25))->init(58,HX_("sv",a3,64,00,00))->init(59,HX_("ig-ng",88,68,4a,b9))->init(60,HX_("zu-za",39,4c,5b,8c))->init(61,HX_("se",92,64,00,00))->init(62,HX_("mk",5e,5f,00,00))->init(63,HX_("de-at",7f,09,f7,d6))->init(64,HX_("es-ve",ee,ac,9e,73))->init(65,HX_("lb",76,5e,00,00))->init(66,HX_("sr-latn",dd,a0,88,73))->init(67,HX_("yo",d6,69,00,00))->init(68,HX_("moh",c6,16,53,00))->init(69,HX_("cs",b0,56,00,00))->init(70,HX_("am-et",70,04,0d,22))->init(71,HX_("xh-za",24,5d,f6,5c))->init(72,HX_("quz-ec",75,2a,fc,dc))->init(73,HX_("xh",f0,68,00,00))->init(74,HX_("gu-in",e4,37,be,9b))->init(75,HX_("mn-mong",c7,37,4e,e1))->init(76,HX_("oc",14,61,00,00))->init(77,HX_("smn",94,a2,57,00))->init(78,HX_("el-gr",91,21,fe,6e))->init(79,HX_("ba",bf,55,00,00))->init(80,HX_("rw-rw",8d,0e,79,f2))->init(81,HX_("en-ca",42,8b,50,70))->init(82,HX_("mn-mn",0d,38,85,0b))->init(83,HX_("or-in",0f,38,f7,34))->init(84,HX_("br-fr",e9,aa,c1,b8))->init(85,HX_("cy",b6,56,00,00))->init(86,HX_("pt-br",b9,33,b0,c9))->init(87,HX_("ba-ru",d1,14,85,ad))->init(88,HX_("az-latn-az",03,dc,20,d8))->init(89,HX_("he-il",73,62,91,24))->init(90,HX_("ig",de,5b,00,00))->init(91,HX_("ga-ie",6f,f3,85,8e))->init(92,HX_("tn-za",da,52,53,13))->init(93,HX_("en-ph",9c,96,50,70))->init(94,HX_("mn",61,5f,00,00))->init(95,HX_("ja-jp",dc,b1,b9,48))->init(96,HX_("zh-hans",bd,64,68,94))->init(97,HX_("sms-fi",b7,c1,dd,09))->init(98,HX_("nso-za",ca,a5,d7,7b))->init(99,HX_("mr-in",0d,0f,2a,0e))->init(100,HX_("se-no",5c,c8,f9,79))->init(101,HX_("tg-cyrl",4a,68,50,31))->init(102,HX_("en-sg",38,99,50,70))->init(103,HX_("as",f2,54,00,00))->init(104,HX_("et-ee",be,d4,47,74))->init(105,HX_("dsb-de",db,30,ae,73))->init(106,HX_("ka-ge",b5,43,20,dc))->init(107,HX_("ms-bn",93,3f,d3,0e))->init(108,HX_("es-uy",23,ac,9e,73))->init(109,HX_("be-by",61,e1,29,b0))->init(110,HX_("en-tt",24,9a,50,70))->init(111,HX_("fil-ph",3c,49,ff,84))->init(112,HX_("tzm-latn",55,c8,b1,81))->init(113,HX_("gd-gb",8b,95,81,90))->init(114,HX_("id",db,5b,00,00))->init(115,HX_("ha-latn",43,64,0b,de))->init(116,HX_("es-cr",6e,9c,9e,73))->init(117,HX_("sq-al",7a,4c,e8,81))->init(118,HX_("dv-mv",84,b4,33,e2))->init(119,HX_("zu",bb,6a,00,00))->init(120,HX_("es-bo",8c,9b,9e,73))->init(121,HX_("ar-lb",92,1b,5b,25))->init(122,HX_("ga",1a,5a,00,00))->init(123,HX_("ps",03,62,00,00))->init(124,HX_("dv",92,57,00,00))->init(125,HX_("ug-cn",06,55,19,a2))->init(126,HX_("prs-af",c1,8e,cc,b7))->init(127,HX_("de-de",0d,0c,f7,d6))->init(128,HX_("se-se",ad,cc,f9,79))->init(129,HX_("lo",83,5e,00,00))->init(130,HX_("fi-fi",4d,11,69,00))->init(131,HX_("es-pa",b0,a7,9e,73))->init(132,HX_("gl",25,5a,00,00))->init(133,HX_("sah-ru",56,7d,c9,19))->init(134,HX_("az-cyrl-az",e2,c1,50,d2))->init(135,HX_("sah",1a,98,57,00))->init(136,HX_("tr",7e,65,00,00))->init(137,HX_("ru-ru",4d,a1,26,f1))->init(138,HX_("ky-kg",1b,66,fd,eb))->init(139,HX_("fil",c9,c1,4d,00))->init(140,HX_("ps-af",2f,fc,06,c9))->init(141,HX_("ar-ma",70,1c,5b,25))->init(142,HX_("mi-nz",dd,27,37,08))->init(143,HX_("fr-be",64,f9,5b,06))->init(144,HX_("ne-np",d8,e1,f8,98))->init(145,HX_("uz-latn-uz",db,4a,f2,dd))->init(146,HX_("ar-om",3a,1e,5b,25))->init(147,HX_("sr-cyrl-rs",50,f6,01,c0))->init(148,HX_("zh-tw",02,81,c3,83))->init(149,HX_("fr-fr",ed,fc,5b,06))->init(150,HX_("nso",8a,dc,53,00))->init(151,HX_("pt",04,62,00,00))->init(152,HX_("es-ec",1d,9e,9e,73))->init(153,HX_("mt",67,5f,00,00))->init(154,HX_("en-in",89,90,50,70))->init(155,HX_("ar-jo",e1,19,5b,25))->init(156,HX_("en-029",d3,72,02,d6))->init(157,HX_("vi",33,67,00,00))->init(158,HX_("ko-kr",f0,43,61,e5))->init(159,HX_("it",eb,5b,00,00))->init(160,HX_("es-co",6b,9c,9e,73))->init(161,HX_("co",ac,56,00,00))->init(162,HX_("ha-latn-ng",43,ed,96,80))->init(163,HX_("is",ea,5b,00,00))->init(164,HX_("ur-pk",2b,b9,5e,a9))->init(165,HX_("tt-ru",b0,93,4a,17))->init(166,HX_("es-ni",fa,a5,9e,73))->init(167,HX_("se-fi",5e,c1,f9,79))->init(168,HX_("en-us",02,9b,50,70))->init(169,HX_("smj",90,a2,57,00))->init(170,HX_("ms-my",33,49,d3,0e))->init(171,HX_("en-gb",bf,8e,50,70))->init(172,HX_("lt-lt",6d,ea,15,7c))->init(173,HX_("th",74,65,00,00))->init(174,HX_("bs-cyrl",2c,63,16,11))->init(175,HX_("gu",2e,5a,00,00))->init(176,HX_("ms",66,5f,00,00))->init(177,HX_("cs-cz",74,73,d1,4c))->init(178,HX_("sq",9e,64,00,00))->init(179,HX_("hsb-de",57,a2,1b,0d))->init(180,HX_("ml-in",53,c7,32,0a))->init(181,HX_("fr-lu",2a,02,5c,06))->init(182,HX_("fo",49,59,00,00))->init(183,HX_("et",6f,58,00,00))->init(184,HX_("co-fr",8d,9b,2c,4a))->init(185,HX_("sr-cyrl",9e,e9,a7,6d))->init(186,HX_("pl",fc,61,00,00))->init(187,HX_("ko",a4,5d,00,00))->init(188,HX_("no",41,60,00,00))->init(189,HX_("en-my",10,94,50,70))->init(190,HX_("ar-eg",7e,15,5b,25))->init(191,HX_("fr",4c,59,00,00))->init(192,HX_("iu-cans",a4,21,d1,00))->init(193,HX_("en-za",4b,9f,50,70))->init(194,HX_("sr-latn-me",08,0c,d2,c5))->init(195,HX_("de-ch",31,0b,f7,d6))->init(196,HX_("tzm-latn-dz",ce,d7,ec,4d))->init(197,HX_("pt-pt",ed,3f,b0,c9))->init(198,HX_("hr",0a,5b,00,00))->init(199,HX_("hr-ba",62,22,29,2d))->init(200,HX_("te-in",81,58,60,0d))->init(201,HX_("tk-tm",cf,a9,57,11))->init(202,HX_("bs-latn",6b,1a,f7,16))->init(203,HX_("ar-ly",a9,1b,5b,25))->init(204,HX_("es-hn",c5,a0,9e,73))->init(205,HX_("zh-cht",d0,6d,40,c7))->init(206,HX_("nb-no",fa,3d,fd,96))->init(207,HX_("hr-hr",ad,27,29,2d))->init(208,HX_("ru",c3,63,00,00))->init(209,HX_("kk-kz",7c,69,bc,e2))->init(210,HX_("sl",99,64,00,00))->init(211,HX_("nb",34,60,00,00))->init(212,HX_("zh-hk",82,76,c3,83))->init(213,HX_("si",96,64,00,00))->init(214,HX_("zh",ae,6a,00,00))->init(215,HX_("bo-cn",6b,04,c6,b6))->init(216,HX_("nl",3e,60,00,00))->init(217,HX_("es-mx",2a,a5,9e,73))->init(218,HX_("uz-cyrl",18,ba,ad,f3))->init(219,HX_("bs-latn-ba",a1,75,d1,d3))->init(220,HX_("da-dk",97,31,52,d4))->init(221,HX_("sr",9f,64,00,00))->init(222,HX_("is-is",ad,f3,38,c1))->init(223,HX_("es-es",2d,9e,9e,73))->init(224,HX_("iu-latn-ca",9b,8f,bd,bb))->init(225,HX_("tk",77,65,00,00))->init(226,HX_("rm-ch",37,df,dc,eb))->init(227,HX_("mi",5c,5f,00,00))->init(228,HX_("uk-ua",23,3f,be,a4))->init(229,HX_("en-bz",7c,8a,50,70))->init(230,HX_("es-py",c8,a7,9e,73))->init(231,HX_("ml",5f,5f,00,00))->init(232,HX_("smj-no",1e,dd,ea,03))->init(233,HX_("bn-in",06,d3,1c,b6))->init(234,HX_("id-id",4d,c0,4e,b7))->init(235,HX_("th-th",ed,05,5c,0f))->init(236,HX_("smj-se",6f,e1,ea,03))->init(237,HX_("pa-in",01,2c,21,bd))->init(238,HX_("bg",c5,55,00,00))->init(239,HX_("lv",8a,5e,00,00))->init(240,HX_("az-latn",43,2a,e1,b9))->init(241,HX_("pl-pl",ed,8a,66,c4))->init(242,HX_("arn",5d,fe,49,00))->init(243,HX_("es-us",1d,ac,9e,73))->init(244,HX_("moh-ca",05,65,41,c3))->init(245,HX_("en-jm",67,91,50,70))->init(246,HX_("rm",bb,63,00,00))->init(247,HX_("kn-in",8f,0b,b8,e4))->init(248,HX_("fa-ir",fb,5e,1f,fb))->init(249,HX_("he",fd,5a,00,00))->init(250,HX_("sa",8e,64,00,00))->init(251,HX_("hy",11,5b,00,00))->init(252,HX_("az",f9,54,00,00))->init(253,HX_("nn",40,60,00,00))->init(254,HX_("ar-iq",04,19,5b,25))->init(255,HX_("ha",f9,5a,00,00))->init(256,HX_("ar-dz",b2,14,5b,25))->init(257,HX_("fr-ch",46,fa,5b,06))->init(258,HX_("sr-latn-rs",71,10,d2,c5))->init(259,HX_("zh-chs",cf,6d,40,c7))->init(260,HX_("tg",73,65,00,00))->init(261,HX_("sr-cyrl-me",e7,f1,01,c0))->init(262,HX_("es-pr",c1,a7,9e,73))->init(263,HX_("qut",10,25,56,00))->init(264,HX_("bs",d1,55,00,00))->init(265,HX_("it-ch",07,25,e2,c1))->init(266,HX_("es-pe",b4,a7,9e,73))->init(267,HX_("nn-no",6e,cd,eb,9e))->init(268,HX_("de",81,57,00,00))->init(269,HX_("uk",56,66,00,00))->init(270,HX_("hu-hu",8d,cb,24,2f))->init(271,HX_("ug",52,66,00,00))->init(272,HX_("br",d0,55,00,00))->init(273,HX_("quz",16,25,56,00))->init(274,HX_("pa",f1,61,00,00))->init(275,HX_("fy",53,59,00,00))->init(276,HX_("nl-nl",2d,60,99,9d))->init(277,HX_("lv-lv",ad,57,68,7d))->init(278,HX_("ar-qa",ec,1f,5b,25))->init(279,HX_("bn",cc,55,00,00))->init(280,HX_("bs-cyrl-ba",80,5b,01,ce))->init(281,HX_("kn",a3,5d,00,00))->init(282,HX_("bn-bd",e3,cc,1c,b6))->init(283,HX_("ro-ro",8d,59,2f,ed))->init(284,HX_("mr",65,5f,00,00))->init(285,HX_("uz",65,66,00,00))->init(286,HX_("eu",70,58,00,00))->init(287,HX_("as-in",a0,4f,04,26))->init(288,HX_("sw",a4,64,00,00))->init(289,HX_("ii",e0,5b,00,00))->init(290,HX_("tg-cyrl-tj",d9,ec,ec,6f))->init(291,HX_("ne",37,60,00,00))->init(292,HX_("sv-se",3c,6d,36,85))->init(293,HX_("iu",ec,5b,00,00))->init(294,HX_("mt-mt",cd,7f,7c,0f))->init(295,HX_("ro",bd,63,00,00))->init(296,HX_("de-li",09,13,f7,d6))->init(297,HX_("ii-cn",38,cc,9c,ba))->init(298,HX_("iu-cans-ca",e7,f8,62,d4))->init(299,HX_("fr-ca",3f,fa,5b,06))->init(300,HX_("uz-cyrl-uz",ba,30,22,d8))->init(301,HX_("lb-lu",40,13,30,70))->init(302,HX_("sr-cyrl-cs",3f,e9,01,c0))->init(303,HX_("el",67,58,00,00))->init(304,HX_("ja",b7,5c,00,00))->init(305,HX_("kl-gl",91,9c,65,e3))->init(306,HX_("oc-fr",25,02,0d,2b))->init(307,HX_("syr-sy",87,8c,03,f2))->init(308,HX_("zh-mo",e1,7a,c3,83))->init(309,HX_("tr-tr",2d,28,f8,15))->init(310,HX_("sma",87,a2,57,00))->init(311,HX_("sk-sk",6d,14,f1,7d))->init(312,HX_("ur",5d,66,00,00))->init(313,HX_("eu-es",6b,0b,f1,74))->init(314,HX_("hi",01,5b,00,00))->init(315,HX_("gsw",cb,8c,4e,00))->init(316,HX_("tn",7a,65,00,00))->init(317,HX_("sa-in",84,e9,54,77))->init(318,HX_("kok-in",6b,55,86,f8))->init(319,HX_("gsw-fr",ce,c2,a1,b4))->init(320,HX_("hu",0d,5b,00,00))->init(321,HX_("mn-cyrl",9c,af,b9,da))->init(322,HX_("kk",a0,5d,00,00))->init(323,HX_("tt",80,65,00,00))->init(324,HX_("es-ar",b0,9a,9e,73))->init(325,HX_("ar-kw",c8,1a,5b,25))->init(326,HX_("qut-gt",8a,e4,04,d9))->init(327,HX_("lo-la",3f,d9,c7,78))->init(328,HX_("syr",0c,ad,57,00))->init(329,HX_("de-lu",15,13,f7,d6))->init(330,HX_("az-cyrl",04,73,00,b4))->init(331,HX_("fo-fo",0d,59,60,04))->init(332,HX_("sv-fi",ed,61,36,85))->init(333,HX_("fa",3b,59,00,00))->init(334,HX_("iu-latn",70,12,c4,06))->init(335,HX_("si-lk",16,a1,9e,7c))->init(336,HX_("fy-nl",38,82,fc,0a))->init(337,HX_("en-au",98,89,50,70))->init(338,HX_("fr-mc",f7,02,5c,06))->init(339,HX_("mn-mong-cn",b1,1a,da,41))->init(340,HX_("sr-cyrl-ba",4e,e8,01,c0))->init(341,HX_("ta-in",05,7e,bb,0a))->init(342,HX_("kok",47,92,51,00))->init(343,HX_("zh-hant",be,64,68,94))->init(344,HX_("hi-in",f1,3c,36,27))->init(345,HX_("wo-sn",f0,40,30,ce))->init(346,HX_("zh-cn",2a,72,c3,83))->init(347,HX_("gl-es",d6,48,cb,95))->init(348,HX_("af-za",4f,98,6c,1d))->init(349,HX_("es-do",4a,9d,9e,73))->init(350,HX_("lt",88,5e,00,00))->init(351,HX_("af",e5,54,00,00))->init(352,HX_("hsb",f7,4e,4f,00));
HXLINE(  22)			::utest::Assert_obj::contains(HX_("it",eb,5b,00,00),list,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),22,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testListLanguages",2b,51,71,b9)));
HXLINE(  23)			::utest::Assert_obj::contains(HX_("en",69,58,00,00),list,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),23,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testListLanguages",2b,51,71,b9)));
HXLINE(  24)			::utest::Assert_obj::contains(HX_("fr",4c,59,00,00),list,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),24,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testListLanguages",2b,51,71,b9)));
HXLINE(  25)			::utest::Assert_obj::contains(HX_("it-it",4d,2a,e2,c1),list,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),25,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testListLanguages",2b,51,71,b9)));
HXLINE(  26)			::utest::Assert_obj::contains(HX_("en-us",02,9b,50,70),list,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),26,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testListLanguages",2b,51,71,b9)));
HXLINE(  27)			::utest::Assert_obj::contains(HX_("en-gb",bf,8e,50,70),list,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),27,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testListLanguages",2b,51,71,b9)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestEmbed_obj,testListLanguages,(void))

void TestEmbed_obj::testEmbedMany(){
            	HX_STACK_FRAME("thx.culture.TestEmbed","testEmbedMany",0xc3f6c755,"thx.culture.TestEmbed.testEmbedMany","thx/culture/TestEmbed.hx",31,0x5b0717c3)
            	HX_STACK_THIS(this)
HXLINE(  31)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  31)		HX_VARI( Int,_g) = this->x;
HXDLIN(  31)		while((_g1 < _g)){
HXLINE(  31)			++_g1;
HXLINE(  32)			{
HXLINE(  36)				HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(16)
            					->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            					->setFixed(1,HX_("number",c9,86,7a,a1),null())
            					->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("italiano",af,a6,00,8b))
            					->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),null())
            					->setFixed(4,HX_("dateTime",5b,fd,0a,da),null())
            					->setFixed(5,HX_("isNeutral",7d,6a,28,ef),true)
            					->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            					->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            					->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),null())
            					->setFixed(9,HX_("code",2d,b1,c4,41),HX_("it",eb,5b,00,00))
            					->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("it",eb,5b,00,00))
            					->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("it",eb,5b,00,00))
            					->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("ita",16,12,50,00))
            					->setFixed(13,HX_("lcid",12,86,ae,47),(int)16)
            					->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ITA",f6,ad,37,00))
            					->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Italian",a0,09,96,5e)));
HXDLIN(  36)				 ::Dynamic _hx_tmp =  ::Dynamic(o->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::DateFormatInfo _hx_tmp1;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp1 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o1,"o") =  ::Dynamic(o->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp1 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o1->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o1->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::Dynamic _hx_tmp2 =  ::Dynamic(o->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp3 =  ::Dynamic(o->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp4 =  ::Dynamic(o->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp5 =  ::Dynamic(o->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp6 =  ::Dynamic(o->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp7 =  ::Dynamic(o->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp8 =  ::Dynamic(o->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp9 =  ::Dynamic(o->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp10 =  ::Dynamic(o->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp11 =  ::Dynamic(o->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp12 =  ::Dynamic(o->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::NumberFormatInfo _hx_tmp13;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp13 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o2,"o") =  ::Dynamic(o->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp13 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o2->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o2->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::thx::culture::Culture _hx_tmp14 =  ::thx::culture::Culture_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13, ::Dynamic(o->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)				::thx::culture::Culture_obj::_hx_register(_hx_tmp14);
HXDLIN(  36)				HX_VARI_NAME(  ::Dynamic,o3,"o") =  ::Dynamic(hx::Anon_obj::Create(16)
            					->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            					->setFixed(1,HX_("number",c9,86,7a,a1),null())
            					->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("English",10,8f,83,c6))
            					->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),null())
            					->setFixed(4,HX_("dateTime",5b,fd,0a,da),null())
            					->setFixed(5,HX_("isNeutral",7d,6a,28,ef),true)
            					->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            					->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(",",2c,00,00,00))
            					->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),null())
            					->setFixed(9,HX_("code",2d,b1,c4,41),HX_("en",69,58,00,00))
            					->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("en",69,58,00,00))
            					->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("en",69,58,00,00))
            					->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("eng",de,03,4d,00))
            					->setFixed(13,HX_("lcid",12,86,ae,47),(int)9)
            					->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ENU",cc,9f,34,00))
            					->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("English",10,8f,83,c6)));
HXDLIN(  36)				 ::Dynamic _hx_tmp15 =  ::Dynamic(o3->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::DateFormatInfo _hx_tmp16;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o3->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp16 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o4,"o") =  ::Dynamic(o3->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp16 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o4->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o4->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::Dynamic _hx_tmp17 =  ::Dynamic(o3->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp18 =  ::Dynamic(o3->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp19 =  ::Dynamic(o3->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp20 =  ::Dynamic(o3->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp21 =  ::Dynamic(o3->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp22 =  ::Dynamic(o3->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp23 =  ::Dynamic(o3->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp24 =  ::Dynamic(o3->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp25 =  ::Dynamic(o3->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp26 =  ::Dynamic(o3->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp27 =  ::Dynamic(o3->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::NumberFormatInfo _hx_tmp28;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o3->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp28 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o5,"o") =  ::Dynamic(o3->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp28 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o5->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o5->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::thx::culture::Culture _hx_tmp29 =  ::thx::culture::Culture_obj::__new(_hx_tmp15,_hx_tmp16,_hx_tmp17,_hx_tmp18,_hx_tmp19,_hx_tmp20,_hx_tmp21,_hx_tmp22,_hx_tmp23,_hx_tmp24,_hx_tmp25,_hx_tmp26,_hx_tmp27,_hx_tmp28, ::Dynamic(o3->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o3->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)				::thx::culture::Culture_obj::_hx_register(_hx_tmp29);
HXDLIN(  36)				HX_VARI_NAME(  ::Dynamic,o6,"o") =  ::Dynamic(hx::Anon_obj::Create(16)
            					->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            					->setFixed(1,HX_("number",c9,86,7a,a1),null())
            					->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("fran\xc3""\xa7""ais",ae,0e,5a,f7))
            					->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),null())
            					->setFixed(4,HX_("dateTime",5b,fd,0a,da),null())
            					->setFixed(5,HX_("isNeutral",7d,6a,28,ef),true)
            					->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            					->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            					->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),null())
            					->setFixed(9,HX_("code",2d,b1,c4,41),HX_("fr",4c,59,00,00))
            					->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("fr",4c,59,00,00))
            					->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("fr",4c,59,00,00))
            					->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("fra",95,c9,4d,00))
            					->setFixed(13,HX_("lcid",12,86,ae,47),(int)12)
            					->setFixed(14,HX_("win3",97,70,f8,4e),HX_("FRA",75,65,35,00))
            					->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("French",ba,be,bf,e3)));
HXDLIN(  36)				 ::Dynamic _hx_tmp30 =  ::Dynamic(o6->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::DateFormatInfo _hx_tmp31;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o6->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp31 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o7,"o") =  ::Dynamic(o6->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp31 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o7->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o7->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::Dynamic _hx_tmp32 =  ::Dynamic(o6->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp33 =  ::Dynamic(o6->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp34 =  ::Dynamic(o6->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp35 =  ::Dynamic(o6->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp36 =  ::Dynamic(o6->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp37 =  ::Dynamic(o6->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp38 =  ::Dynamic(o6->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp39 =  ::Dynamic(o6->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp40 =  ::Dynamic(o6->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp41 =  ::Dynamic(o6->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp42 =  ::Dynamic(o6->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::NumberFormatInfo _hx_tmp43;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o6->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp43 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o8,"o") =  ::Dynamic(o6->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp43 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o8->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o8->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::thx::culture::Culture _hx_tmp44 =  ::thx::culture::Culture_obj::__new(_hx_tmp30,_hx_tmp31,_hx_tmp32,_hx_tmp33,_hx_tmp34,_hx_tmp35,_hx_tmp36,_hx_tmp37,_hx_tmp38,_hx_tmp39,_hx_tmp40,_hx_tmp41,_hx_tmp42,_hx_tmp43, ::Dynamic(o6->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o6->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)				::thx::culture::Culture_obj::_hx_register(_hx_tmp44);
HXDLIN(  36)				HX_VARI_NAME(  ::Dynamic,o9,"o") =  ::Dynamic(hx::Anon_obj::Create(16)
            					->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            					->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            						->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)9)
            						->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(".",2e,00,00,00))
            						->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            						->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xac""",4c,ef,ab,00))
            						->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            						->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            						->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            						->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("Non un numero reale",f7,bd,ea,94))
            						->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            						->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            						->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            						->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("+Infinito",29,76,a7,22))
            						->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            						->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            						->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)1)
            						->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)1)
            						->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)2)
            						->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinito",2b,48,8a,c8))
            						->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            						->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(".",2e,00,00,00))
            						->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            						->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            						->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(".",2e,00,00,00))
            						->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            						->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            					->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("italiano",af,a6,00,8b))
            					->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("Italy",03,12,37,55))
            					->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            						->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            						->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            						->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd d MMMM yyyy HH:mm:ss",dc,7e,69,9b))
            						->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("calendario gregoriano",45,88,b6,ba))
            						->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstFourDayWeek",fa,56,48,9b))
            						->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            						->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            						->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            						->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("dd MMMM",60,27,05,da))
            						->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd d MMMM yyyy",44,a9,80,93))
            						->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            						->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("do",8b,57,00,00))->init(1,HX_("lu",89,5e,00,00))->init(2,HX_("ma",54,5f,00,00))->init(3,HX_("me",58,5f,00,00))->init(4,HX_("gi",22,5a,00,00))->init(5,HX_("ve",2f,67,00,00))->init(6,HX_("sa",8e,64,00,00)))
            						->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            						->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            						->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            						->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("dom",82,42,4c,00))->init(1,HX_("lun",c5,59,52,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("mer",1a,0e,53,00))->init(4,HX_("gio",0d,84,4e,00))->init(5,HX_("ven",5f,e2,59,00))->init(6,HX_("sab",14,98,57,00)))
            						->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("HH:mm",1a,83,9d,a4))
            						->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            						->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("HH:mm:ss",80,50,d2,03))
            						->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            						->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            						->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("domenica",bc,78,e7,64))->init(1,HX_("luned\xc3""\xac""",ed,38,f2,eb))->init(2,HX_("marted\xc3""\xac""",be,1b,56,be))->init(3,HX_("mercoled\xc3""\xac""",0e,02,2a,7a))->init(4,HX_("gioved\xc3""\xac""",f1,38,8e,a7))->init(5,HX_("venerd\xc3""\xac""",e1,9a,99,33))->init(6,HX_("sabato",88,ac,f9,15)))
            						->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("gen",90,80,4e,00))->init(1,HX_("feb",43,be,4d,00))->init(2,HX_("mar",9e,0a,53,00))->init(3,HX_("apr",a3,fc,49,00))->init(4,HX_("mag",93,0a,53,00))->init(5,HX_("giu",13,84,4e,00))->init(6,HX_("lug",be,59,52,00))->init(7,HX_("ago",c9,f4,49,00))->init(8,HX_("set",a2,9b,57,00))->init(9,HX_("ott",af,9f,54,00))->init(10,HX_("nov",15,d9,53,00))->init(11,HX_("dic",3e,3d,4c,00))->init(12,HX_("",00,00,00,00)))
            						->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("gennaio",69,77,41,bc))->init(1,HX_("febbraio",94,d1,f3,19))->init(2,HX_("marzo",d3,d8,21,03))->init(3,HX_("aprile",5f,56,29,91))->init(4,HX_("maggio",5a,17,28,b3))->init(5,HX_("giugno",35,92,79,f1))->init(6,HX_("luglio",54,20,d4,d0))->init(7,HX_("agosto",85,17,9a,60))->init(8,HX_("settembre",5b,75,48,fc))->init(9,HX_("ottobre",b5,12,59,7d))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("dicembre",2f,9b,26,6b))->init(12,HX_("",00,00,00,00)))
            						->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd/MM/yyyy",40,9b,42,af))
            						->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            						->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)2)))
            					->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            					->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            					->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            					->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("Italia",0e,a3,f8,3a))
            					->setFixed(9,HX_("code",2d,b1,c4,41),HX_("it-IT",4d,0e,e2,c1))
            					->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("it-IT",4d,0e,e2,c1))
            					->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("it",eb,5b,00,00))
            					->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("ita",16,12,50,00))
            					->setFixed(13,HX_("lcid",12,86,ae,47),(int)1040)
            					->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ITA",f6,ad,37,00))
            					->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("Italian",a0,09,96,5e)));
HXDLIN(  36)				 ::Dynamic _hx_tmp45 =  ::Dynamic(o9->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::DateFormatInfo _hx_tmp46;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o9->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp46 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o10,"o") =  ::Dynamic(o9->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp46 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o10->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o10->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::Dynamic _hx_tmp47 =  ::Dynamic(o9->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp48 =  ::Dynamic(o9->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp49 =  ::Dynamic(o9->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp50 =  ::Dynamic(o9->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp51 =  ::Dynamic(o9->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp52 =  ::Dynamic(o9->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp53 =  ::Dynamic(o9->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp54 =  ::Dynamic(o9->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp55 =  ::Dynamic(o9->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp56 =  ::Dynamic(o9->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp57 =  ::Dynamic(o9->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::NumberFormatInfo _hx_tmp58;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o9->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp58 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o11,"o") =  ::Dynamic(o9->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp58 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o11->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o11->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::thx::culture::Culture _hx_tmp59 =  ::thx::culture::Culture_obj::__new(_hx_tmp45,_hx_tmp46,_hx_tmp47,_hx_tmp48,_hx_tmp49,_hx_tmp50,_hx_tmp51,_hx_tmp52,_hx_tmp53,_hx_tmp54,_hx_tmp55,_hx_tmp56,_hx_tmp57,_hx_tmp58, ::Dynamic(o9->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o9->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)				::thx::culture::Culture_obj::_hx_register(_hx_tmp59);
HXDLIN(  36)				HX_VARI_NAME(  ::Dynamic,o12,"o") =  ::Dynamic(hx::Anon_obj::Create(16)
            					->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            					->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            						->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)1)
            						->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_(",",2c,00,00,00))
            						->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            						->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xc2""\xa3""",a1,a9,00,00))
            						->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            						->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            						->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            						->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("NaN",9b,84,3b,00))
            						->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            						->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            						->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            						->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("Infinity",08,d3,1a,b4))
            						->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            						->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(".",2e,00,00,00))
            						->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)0)
            						->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)0)
            						->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)0)
            						->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infinity",35,48,8a,c8))
            						->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            						->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_(",",2c,00,00,00))
            						->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(".",2e,00,00,00))
            						->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            						->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_(",",2c,00,00,00))
            						->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(".",2e,00,00,00))
            						->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            					->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("English",10,8f,83,c6))
            					->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("United Kingdom",4e,78,43,27))
            					->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            						->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            						->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            						->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dd MMMM yyyy HH:mm:ss",20,a8,ea,3b))
            						->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("Gregorian Calendar",78,a4,39,8d))
            						->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            						->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            						->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)))
            						->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)))
            						->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("dd MMMM",60,27,05,da))
            						->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dd MMMM yyyy",80,b8,59,be))
            						->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            						->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("Su",c2,48,00,00))->init(1,HX_("Mo",82,43,00,00))->init(2,HX_("Tu",a1,49,00,00))->init(3,HX_("We",2e,4c,00,00))->init(4,HX_("Th",94,49,00,00))->init(5,HX_("Fr",6c,3d,00,00))->init(6,HX_("Sa",ae,48,00,00)))
            						->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            						->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("AM",ec,38,00,00))
            						->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("PM",fd,45,00,00))
            						->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("Sun",6c,61,3f,00))->init(1,HX_("Mon",ac,ce,3a,00))->init(2,HX_("Tue",a4,23,40,00))->init(3,HX_("Wed",76,5c,42,00))->init(4,HX_("Thu",61,18,40,00))->init(5,HX_("Fri",7d,81,35,00))->init(6,HX_("Sat",06,50,3f,00)))
            						->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("HH:mm",1a,83,9d,a4))
            						->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            						->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("HH:mm:ss",80,50,d2,03))
            						->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            						->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            						->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("Sunday",70,80,82,d6))->init(1,HX_("Monday",30,db,f6,fb))->init(2,HX_("Tuesday",6d,85,94,e0))->init(3,HX_("Wednesday",76,20,5e,ee))->init(4,HX_("Thursday",3a,c9,04,61))->init(5,HX_("Friday",ff,00,5d,e6))->init(6,HX_("Saturday",59,42,eb,57)))
            						->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("Jan",b7,7b,38,00))->init(1,HX_("Feb",23,76,35,00))->init(2,HX_("Mar",7e,c2,3a,00))->init(3,HX_("Apr",83,b4,31,00))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("Jun",23,8d,38,00))->init(6,HX_("Jul",21,8d,38,00))->init(7,HX_("Aug",d3,b8,31,00))->init(8,HX_("Sep",7e,53,3f,00))->init(9,HX_("Oct",c0,48,3c,00))->init(10,HX_("Nov",f5,90,3b,00))->init(11,HX_("Dec",a2,f1,33,00))->init(12,HX_("",00,00,00,00)))
            						->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("January",4a,18,86,71))->init(1,HX_("February",82,81,0a,2c))->init(2,HX_("March",a3,34,4f,96))->init(3,HX_("April",26,77,6a,b7))->init(4,HX_("May",85,c2,3a,00))->init(5,HX_("June",e2,f1,42,31))->init(6,HX_("July",38,f0,42,31))->init(7,HX_("August",63,79,82,9f))->init(8,HX_("September",f1,6e,c5,f7))->init(9,HX_("October",00,0d,99,7e))->init(10,HX_("November",d2,64,19,13))->init(11,HX_("December",05,71,82,9e))->init(12,HX_("",00,00,00,00)))
            						->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd/MM/yyyy",40,9b,42,af))
            						->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            						->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            					->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            					->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            					->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(",",2c,00,00,00))
            					->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("United Kingdom",4e,78,43,27))
            					->setFixed(9,HX_("code",2d,b1,c4,41),HX_("en-GB",bf,72,50,70))
            					->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("en-GB",bf,72,50,70))
            					->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("en",69,58,00,00))
            					->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("eng",de,03,4d,00))
            					->setFixed(13,HX_("lcid",12,86,ae,47),(int)2057)
            					->setFixed(14,HX_("win3",97,70,f8,4e),HX_("ENG",be,9f,34,00))
            					->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("English",10,8f,83,c6)));
HXDLIN(  36)				 ::Dynamic _hx_tmp60 =  ::Dynamic(o12->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::DateFormatInfo _hx_tmp61;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o12->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp61 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o13,"o") =  ::Dynamic(o12->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp61 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o13->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o13->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::Dynamic _hx_tmp62 =  ::Dynamic(o12->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp63 =  ::Dynamic(o12->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp64 =  ::Dynamic(o12->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp65 =  ::Dynamic(o12->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp66 =  ::Dynamic(o12->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp67 =  ::Dynamic(o12->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp68 =  ::Dynamic(o12->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp69 =  ::Dynamic(o12->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp70 =  ::Dynamic(o12->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp71 =  ::Dynamic(o12->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp72 =  ::Dynamic(o12->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::NumberFormatInfo _hx_tmp73;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o12->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp73 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o14,"o") =  ::Dynamic(o12->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp73 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o14->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o14->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::thx::culture::Culture _hx_tmp74 =  ::thx::culture::Culture_obj::__new(_hx_tmp60,_hx_tmp61,_hx_tmp62,_hx_tmp63,_hx_tmp64,_hx_tmp65,_hx_tmp66,_hx_tmp67,_hx_tmp68,_hx_tmp69,_hx_tmp70,_hx_tmp71,_hx_tmp72,_hx_tmp73, ::Dynamic(o12->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o12->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)				::thx::culture::Culture_obj::_hx_register(_hx_tmp74);
HXDLIN(  36)				HX_VARI_NAME(  ::Dynamic,o15,"o") =  ::Dynamic(hx::Anon_obj::Create(16)
            					->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            					->setFixed(1,HX_("number",c9,86,7a,a1), ::Dynamic(hx::Anon_obj::Create(25)
            						->setFixed(0,HX_("patternNegativeCurrency",56,69,b3,82),(int)8)
            						->setFixed(1,HX_("separatorGroupNumber",03,9f,89,8b),HX_("\xc2""\xa0""",9e,a9,00,00))
            						->setFixed(2,HX_("signNegative",d2,77,dd,90),HX_("-",2d,00,00,00))
            						->setFixed(3,HX_("symbolCurrency",c9,8a,97,92),HX_("\xe2""\x82""\xac""",4c,ef,ab,00))
            						->setFixed(4,HX_("symbolPercent",4d,3e,49,c2),HX_("%",25,00,00,00))
            						->setFixed(5,HX_("groupSizesNumber",fc,7b,1c,cd),::Array_obj< Int >::__new(1)->init(0,(int)3))
            						->setFixed(6,HX_("decimalDigitsNumber",c0,3b,b5,d5),(int)2)
            						->setFixed(7,HX_("symbolNaN",43,fc,ff,df),HX_("Non Num\xc3""\xa9""rique",51,8c,69,6d))
            						->setFixed(8,HX_("patternNegativeNumber",8e,ed,2d,e8),(int)1)
            						->setFixed(9,HX_("decimalDigitsPercent",ee,4d,fe,f7),(int)2)
            						->setFixed(10,HX_("symbolPermille",84,61,72,02),HX_("\xe2""\x80""\xb0""",92,ed,ab,00))
            						->setFixed(11,HX_("symbolPositiveInfinity",39,16,d7,06),HX_("+Infini",2e,e9,f7,c5))
            						->setFixed(12,HX_("signPositive",16,f8,95,0a),HX_("+",2b,00,00,00))
            						->setFixed(13,HX_("separatorDecimalPercent",79,3d,cc,0c),HX_(",",2c,00,00,00))
            						->setFixed(14,HX_("patternNegativePercent",60,30,21,0f),(int)0)
            						->setFixed(15,HX_("patternPositivePercent",9c,00,df,26),(int)0)
            						->setFixed(16,HX_("patternPositiveCurrency",9a,cd,0b,31),(int)3)
            						->setFixed(17,HX_("symbolNegativeInfinity",f5,b1,7e,58),HX_("-Infini",b0,d6,22,19))
            						->setFixed(18,HX_("decimalDigitsCurrency",08,28,50,5b),(int)2)
            						->setFixed(19,HX_("separatorGroupPercent",4b,c5,00,5c),HX_("\xc2""\xa0""",9e,a9,00,00))
            						->setFixed(20,HX_("separatorDecimalNumber",95,c6,00,63),HX_(",",2c,00,00,00))
            						->setFixed(21,HX_("groupSizesCurrency",44,ef,34,6b),::Array_obj< Int >::__new(1)->init(0,(int)3))
            						->setFixed(22,HX_("separatorGroupCurrency",0b,22,76,79),HX_("\xc2""\xa0""",9e,a9,00,00))
            						->setFixed(23,HX_("separatorDecimalCurrency",1d,d2,b3,7a),HX_(",",2c,00,00,00))
            						->setFixed(24,HX_("groupSizesPercent",32,42,ef,7a),::Array_obj< Int >::__new(1)->init(0,(int)3))))
            					->setFixed(2,HX_("nameNative",42,fa,9b,a6),HX_("fran\xc3""\xa7""ais",ae,0e,5a,f7))
            					->setFixed(3,HX_("nameRegionEnglish",51,9f,9c,cc),HX_("France",3b,e4,1a,e1))
            					->setFixed(4,HX_("dateTime",5b,fd,0a,da), ::Dynamic(hx::Anon_obj::Create(27)
            						->setFixed(0,HX_("nameCalendar",29,50,56,86),HX_("Gregorian",c6,ad,49,c5))
            						->setFixed(1,HX_("patternUniversalSortable",33,cc,22,95),HX_("yyyy'-'MM'-'dd HH':'mm':'ss'Z'",d4,92,25,cb))
            						->setFixed(2,HX_("patternDateTimeFull",fa,e6,03,9b),HX_("dddd d MMMM yyyy HH:mm:ss",dc,7e,69,9b))
            						->setFixed(3,HX_("nameCalendarNative",a0,92,93,9f),HX_("calendrier gr\xc3""\xa9""gorien",08,63,89,47))
            						->setFixed(4,HX_("calendarWeekRuleName",59,45,06,a1),HX_("FirstDay",2c,70,bd,ca))
            						->setFixed(5,HX_("firstDayOfWeekName",c2,53,ad,a7),HX_("Monday",30,db,f6,fb))
            						->setFixed(6,HX_("nameMonthGenitives",e1,47,c7,a7),::Array_obj< ::String >::__new(13)->init(0,HX_("janvier",b7,2d,e4,a4))->init(1,HX_("f\xc3""\xa9""vrier",6e,b3,35,46))->init(2,HX_("mars",15,40,56,48))->init(3,HX_("avril",00,4f,34,28))->init(4,HX_("mai",95,0a,53,00))->init(5,HX_("juin",70,c1,69,46))->init(6,HX_("juillet",2d,a3,6c,bc))->init(7,HX_("ao\xc3""\xbb""t",ae,8e,d1,23))->init(8,HX_("septembre",57,9a,f2,55))->init(9,HX_("octobre",66,f0,47,b1))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("d\xc3""\xa9""cembre",54,a9,89,70))->init(12,HX_("",00,00,00,00)))
            						->setFixed(7,HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),::Array_obj< ::String >::__new(13)->init(0,HX_("janv.",8f,0e,eb,48))->init(1,HX_("f\xc3""\xa9""vr.",86,e8,98,7f))->init(2,HX_("mars",15,40,56,48))->init(3,HX_("avr.",b1,9f,77,40))->init(4,HX_("mai",95,0a,53,00))->init(5,HX_("juin",70,c1,69,46))->init(6,HX_("juil.",00,7f,1f,56))->init(7,HX_("ao\xc3""\xbb""t",ae,8e,d1,23))->init(8,HX_("sept.",58,a4,2c,7a))->init(9,HX_("oct.",4e,33,aa,49))->init(10,HX_("nov.",79,19,0a,49))->init(11,HX_("d\xc3""\xa9""c.",d5,30,77,15))->init(12,HX_("",00,00,00,00)))
            						->setFixed(8,HX_("patternMonthDay",6c,c1,07,bb),HX_("d MMMM",fc,c3,a2,9b))
            						->setFixed(9,HX_("patternDateLong",3a,69,d5,22),HX_("dddd d MMMM yyyy",44,a9,80,93))
            						->setFixed(10,HX_("patternDateTimeSortable",e3,2a,ec,23),HX_("yyyy'-'MM'-'dd'T'HH':'mm':'ss",ba,67,48,1c))
            						->setFixed(11,HX_("nameDaysShortest",ec,01,e4,25),::Array_obj< ::String >::__new(7)->init(0,HX_("di",85,57,00,00))->init(1,HX_("lu",89,5e,00,00))->init(2,HX_("ma",54,5f,00,00))->init(3,HX_("me",58,5f,00,00))->init(4,HX_("je",bb,5c,00,00))->init(5,HX_("ve",2f,67,00,00))->init(6,HX_("sa",8e,64,00,00)))
            						->setFixed(12,HX_("separatorDate",33,79,64,29),HX_("/",2f,00,00,00))
            						->setFixed(13,HX_("designatorAm",20,b2,52,2b),HX_("",00,00,00,00))
            						->setFixed(14,HX_("designatorPm",31,bf,52,2b),HX_("",00,00,00,00))
            						->setFixed(15,HX_("nameDaysAbbreviated",b7,fa,42,2c),::Array_obj< ::String >::__new(7)->init(0,HX_("dim.",e6,61,69,42))->init(1,HX_("lun.",c9,32,bc,47))->init(2,HX_("mar.",d0,3f,56,48))->init(3,HX_("mer.",d4,48,59,48))->init(4,HX_("jeu.",94,a7,5d,46))->init(5,HX_("ven.",ef,30,4c,4e))->init(6,HX_("sam.",2f,83,4d,4c)))
            						->setFixed(16,HX_("patternTimeShort",bf,e8,a8,30),HX_("HH:mm",1a,83,9d,a4))
            						->setFixed(17,HX_("separatorTime",12,ef,fd,33),HX_(":",3a,00,00,00))
            						->setFixed(18,HX_("patternTimeLong",99,ba,28,36),HX_("HH:mm:ss",80,50,d2,03))
            						->setFixed(19,HX_("firstDayOfWeekIndex",bb,01,8c,37),(int)1)
            						->setFixed(20,HX_("patternYearMonth",d3,8f,70,3a),HX_("MMMM yyyy",20,05,62,af))
            						->setFixed(21,HX_("nameDays",82,7a,ea,3e),::Array_obj< ::String >::__new(7)->init(0,HX_("dimanche",0b,d5,c7,1d))->init(1,HX_("lundi",8a,6c,f0,7c))->init(2,HX_("mardi",a3,c5,21,03))->init(3,HX_("mercredi",81,4f,74,a3))->init(4,HX_("jeudi",5f,29,95,4b))->init(5,HX_("vendredi",9d,75,33,a0))->init(6,HX_("samedi",6b,00,42,1d)))
            						->setFixed(22,HX_("nameMonthsAbbreviated",db,78,52,40),::Array_obj< ::String >::__new(13)->init(0,HX_("janv.",8f,0e,eb,48))->init(1,HX_("f\xc3""\xa9""vr.",86,e8,98,7f))->init(2,HX_("mars",15,40,56,48))->init(3,HX_("avr.",b1,9f,77,40))->init(4,HX_("mai",95,0a,53,00))->init(5,HX_("juin",70,c1,69,46))->init(6,HX_("juil.",00,7f,1f,56))->init(7,HX_("ao\xc3""\xbb""t",ae,8e,d1,23))->init(8,HX_("sept.",58,a4,2c,7a))->init(9,HX_("oct.",4e,33,aa,49))->init(10,HX_("nov.",79,19,0a,49))->init(11,HX_("d\xc3""\xa9""c.",d5,30,77,15))->init(12,HX_("",00,00,00,00)))
            						->setFixed(23,HX_("nameMonths",de,c1,ed,4b),::Array_obj< ::String >::__new(13)->init(0,HX_("janvier",b7,2d,e4,a4))->init(1,HX_("f\xc3""\xa9""vrier",6e,b3,35,46))->init(2,HX_("mars",15,40,56,48))->init(3,HX_("avril",00,4f,34,28))->init(4,HX_("mai",95,0a,53,00))->init(5,HX_("juin",70,c1,69,46))->init(6,HX_("juillet",2d,a3,6c,bc))->init(7,HX_("ao\xc3""\xbb""t",ae,8e,d1,23))->init(8,HX_("septembre",57,9a,f2,55))->init(9,HX_("octobre",66,f0,47,b1))->init(10,HX_("novembre",f8,b3,67,39))->init(11,HX_("d\xc3""\xa9""cembre",54,a9,89,70))->init(12,HX_("",00,00,00,00)))
            						->setFixed(24,HX_("patternDateShort",fe,06,15,5b),HX_("dd/MM/yyyy",40,9b,42,af))
            						->setFixed(25,HX_("patternRfc1123",e0,77,54,65),HX_("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",25,56,2d,9d))
            						->setFixed(26,HX_("calendarWeekRuleIndex",44,74,06,6c),(int)0)))
            					->setFixed(5,HX_("isNeutral",7d,6a,28,ef),false)
            					->setFixed(6,HX_("isRightToLeft",54,90,12,f0),false)
            					->setFixed(7,HX_("separatorList",63,3f,b4,2e),HX_(";",3b,00,00,00))
            					->setFixed(8,HX_("nameRegionNative",96,b0,9c,3e),HX_("France",3b,e4,1a,e1))
            					->setFixed(9,HX_("code",2d,b1,c4,41),HX_("fr-FR",ed,e0,5b,06))
            					->setFixed(10,HX_("ietf",4e,70,b4,45),HX_("fr-FR",ed,e0,5b,06))
            					->setFixed(11,HX_("iso2",4d,0b,bf,45),HX_("fr",4c,59,00,00))
            					->setFixed(12,HX_("iso3",4e,0b,bf,45),HX_("fra",95,c9,4d,00))
            					->setFixed(13,HX_("lcid",12,86,ae,47),(int)1036)
            					->setFixed(14,HX_("win3",97,70,f8,4e),HX_("FRA",75,65,35,00))
            					->setFixed(15,HX_("nameEnglish",25,cc,fd,63),HX_("French",ba,be,bf,e3)));
HXDLIN(  36)				 ::Dynamic _hx_tmp75 =  ::Dynamic(o15->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::DateFormatInfo _hx_tmp76;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o15->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp76 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o16,"o") =  ::Dynamic(o15->__Field(HX_("dateTime",5b,fd,0a,da),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp76 =  ::thx::culture::DateFormatInfo_obj::__new( ::Dynamic(o16->__Field(HX_("calendarWeekRuleIndex",44,74,06,6c),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("calendarWeekRuleName",59,45,06,a1),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("designatorAm",20,b2,52,2b),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("designatorPm",31,bf,52,2b),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("firstDayOfWeekIndex",bb,01,8c,37),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("firstDayOfWeekName",c2,53,ad,a7),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("nameCalendarNative",a0,92,93,9f),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("nameDays",82,7a,ea,3e),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("nameDaysAbbreviated",b7,fa,42,2c),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("nameDaysShortest",ec,01,e4,25),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("nameMonths",de,c1,ed,4b),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("nameMonthsAbbreviated",db,78,52,40),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("nameMonthGenitives",e1,47,c7,a7),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("nameMonthGenitivesAbbreviated",b8,fb,b8,a9),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("patternDateLong",3a,69,d5,22),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("patternDateShort",fe,06,15,5b),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("patternDateTimeFull",fa,e6,03,9b),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("patternDateTimeSortable",e3,2a,ec,23),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("patternMonthDay",6c,c1,07,bb),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("patternRfc1123",e0,77,54,65),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("patternTimeLong",99,ba,28,36),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("patternTimeShort",bf,e8,a8,30),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("patternUniversalSortable",33,cc,22,95),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("patternYearMonth",d3,8f,70,3a),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("separatorDate",33,79,64,29),hx::paccDynamic)), ::Dynamic(o16->__Field(HX_("separatorTime",12,ef,fd,33),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::Dynamic _hx_tmp77 =  ::Dynamic(o15->__Field(HX_("ietf",4e,70,b4,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp78 =  ::Dynamic(o15->__Field(HX_("isNeutral",7d,6a,28,ef),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp79 =  ::Dynamic(o15->__Field(HX_("iso2",4d,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp80 =  ::Dynamic(o15->__Field(HX_("iso3",4e,0b,bf,45),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp81 =  ::Dynamic(o15->__Field(HX_("isRightToLeft",54,90,12,f0),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp82 =  ::Dynamic(o15->__Field(HX_("lcid",12,86,ae,47),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp83 =  ::Dynamic(o15->__Field(HX_("nameCalendar",29,50,56,86),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp84 =  ::Dynamic(o15->__Field(HX_("nameEnglish",25,cc,fd,63),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp85 =  ::Dynamic(o15->__Field(HX_("nameNative",42,fa,9b,a6),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp86 =  ::Dynamic(o15->__Field(HX_("nameRegionEnglish",51,9f,9c,cc),hx::paccDynamic));
HXDLIN(  36)				 ::Dynamic _hx_tmp87 =  ::Dynamic(o15->__Field(HX_("nameRegionNative",96,b0,9c,3e),hx::paccDynamic));
HXDLIN(  36)				 ::thx::culture::NumberFormatInfo _hx_tmp88;
HXDLIN(  36)				if (hx::IsNull(  ::Dynamic(o15->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic)) )) {
HXLINE(  36)					_hx_tmp88 = null();
            				}
            				else {
HXLINE(  36)					HX_VARI_NAME(  ::Dynamic,o17,"o") =  ::Dynamic(o15->__Field(HX_("number",c9,86,7a,a1),hx::paccDynamic));
HXDLIN(  36)					_hx_tmp88 =  ::thx::culture::NumberFormatInfo_obj::__new( ::Dynamic(o17->__Field(HX_("decimalDigitsCurrency",08,28,50,5b),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("decimalDigitsNumber",c0,3b,b5,d5),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("decimalDigitsPercent",ee,4d,fe,f7),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("groupSizesCurrency",44,ef,34,6b),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("groupSizesNumber",fc,7b,1c,cd),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("groupSizesPercent",32,42,ef,7a),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("patternNegativeCurrency",56,69,b3,82),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("patternNegativeNumber",8e,ed,2d,e8),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("patternNegativePercent",60,30,21,0f),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("patternPositiveCurrency",9a,cd,0b,31),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("patternPositivePercent",9c,00,df,26),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("separatorDecimalCurrency",1d,d2,b3,7a),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("separatorDecimalNumber",95,c6,00,63),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("separatorDecimalPercent",79,3d,cc,0c),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("separatorGroupCurrency",0b,22,76,79),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("separatorGroupNumber",03,9f,89,8b),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("separatorGroupPercent",4b,c5,00,5c),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("signNegative",d2,77,dd,90),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("signPositive",16,f8,95,0a),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("symbolCurrency",c9,8a,97,92),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("symbolNaN",43,fc,ff,df),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("symbolNegativeInfinity",f5,b1,7e,58),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("symbolPercent",4d,3e,49,c2),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("symbolPermille",84,61,72,02),hx::paccDynamic)), ::Dynamic(o17->__Field(HX_("symbolPositiveInfinity",39,16,d7,06),hx::paccDynamic)));
            				}
HXDLIN(  36)				 ::thx::culture::Culture _hx_tmp89 =  ::thx::culture::Culture_obj::__new(_hx_tmp75,_hx_tmp76,_hx_tmp77,_hx_tmp78,_hx_tmp79,_hx_tmp80,_hx_tmp81,_hx_tmp82,_hx_tmp83,_hx_tmp84,_hx_tmp85,_hx_tmp86,_hx_tmp87,_hx_tmp88, ::Dynamic(o15->__Field(HX_("separatorList",63,3f,b4,2e),hx::paccDynamic)), ::Dynamic(o15->__Field(HX_("win3",97,70,f8,4e),hx::paccDynamic)));
HXDLIN(  36)				::thx::culture::Culture_obj::_hx_register(_hx_tmp89);
            			}
HXLINE(  33)			 ::thx::culture::Culture _hx_tmp90 = ::thx::culture::Culture_obj::getByIso2(HX_("fr",4c,59,00,00));
HXDLIN(  33)			::utest::Assert_obj::notNull(_hx_tmp90,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),33,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testEmbedMany",66,d4,77,db)));
HXLINE(  34)			 ::thx::culture::Culture _hx_tmp91 = ::thx::culture::Culture_obj::getByIso3(HX_("fra",95,c9,4d,00));
HXDLIN(  34)			::utest::Assert_obj::notNull(_hx_tmp91,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),34,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testEmbedMany",66,d4,77,db)));
HXLINE(  35)			 ::thx::culture::Culture _hx_tmp92 = ::thx::culture::Culture_obj::getByCode(HX_("fr-fr",ed,fc,5b,06));
HXDLIN(  35)			::utest::Assert_obj::notNull(_hx_tmp92,null(),hx::SourceInfo(HX_("TestEmbed.hx",17,95,52,19),35,HX_("thx.culture.TestEmbed",1d,9f,a0,ec),HX_("testEmbedMany",66,d4,77,db)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestEmbed_obj,testEmbedMany,(void))


TestEmbed_obj::TestEmbed_obj()
{
}

hx::Val TestEmbed_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testEmbed") ) { return hx::Val( testEmbed_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testEmbedMany") ) { return hx::Val( testEmbedMany_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testListLanguages") ) { return hx::Val( testListLanguages_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestEmbed_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestEmbed_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestEmbed_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestEmbed_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestEmbed_obj_sStaticStorageInfo = 0;
#endif

static ::String TestEmbed_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testEmbed","\x27","\xcc","\xd1","\x38"),
	HX_HCSTRING("testListLanguages","\x2b","\x51","\x71","\xb9"),
	HX_HCSTRING("testEmbedMany","\x66","\xd4","\x77","\xdb"),
	::String(null()) };

static void TestEmbed_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestEmbed_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestEmbed_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestEmbed_obj::__mClass,"__mClass");
};

#endif

hx::Class TestEmbed_obj::__mClass;

void TestEmbed_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.culture.TestEmbed","\x1d","\x9f","\xa0","\xec");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestEmbed_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestEmbed_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestEmbed_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestEmbed_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestEmbed_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestEmbed_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace culture
