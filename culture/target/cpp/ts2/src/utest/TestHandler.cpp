// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif
#ifndef INCLUDED_utest_Assertation
#include <utest/Assertation.h>
#endif
#ifndef INCLUDED_utest_Dispatcher
#include <utest/Dispatcher.h>
#endif
#ifndef INCLUDED_utest_TestFixture
#include <utest/TestFixture.h>
#endif
#ifndef INCLUDED_utest_TestHandler
#include <utest/TestHandler.h>
#endif

namespace utest{

void TestHandler_obj::__construct( ::utest::TestFixture fixture){
            	HX_STACK_FRAME("utest.TestHandler","new",0x12013b43,"utest.TestHandler.new","utest/TestHandler.hx",18,0x9078bd4e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fixture,"fixture")
HXLINE(  19)		if (hx::IsNull( fixture )) {
HXLINE(  19)			HX_STACK_DO_THROW(HX_("fixture argument is null",11,0c,5c,5e));
            		}
HXLINE(  20)		this->fixture = fixture;
HXLINE(  21)		this->results =  ::List_obj::__new();
HXLINE(  22)		this->asyncStack =  ::List_obj::__new();
HXLINE(  23)		this->onTested =  ::utest::Dispatcher_obj::__new();
HXLINE(  24)		this->onTimeout =  ::utest::Dispatcher_obj::__new();
HXLINE(  25)		this->onComplete =  ::utest::Dispatcher_obj::__new();
HXLINE(  26)		this->onPrecheck =  ::utest::Dispatcher_obj::__new();
            	}

Dynamic TestHandler_obj::__CreateEmpty() { return new TestHandler_obj; }

hx::ObjectPtr< TestHandler_obj > TestHandler_obj::__new( ::utest::TestFixture fixture)
{
	hx::ObjectPtr< TestHandler_obj > _hx_result = new TestHandler_obj();
	_hx_result->__construct(fixture);
	return _hx_result;
}

Dynamic TestHandler_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestHandler_obj > _hx_result = new TestHandler_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestHandler_obj::execute(){
            	HX_STACK_FRAME("utest.TestHandler","execute",0xe5ad2298,"utest.TestHandler.execute","utest/TestHandler.hx",29,0x9078bd4e)
            	HX_STACK_THIS(this)
HXLINE(  30)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  31)			this->executeMethod(this->fixture->setup);
HXLINE(  32)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  33)				this->executeMethod(this->fixture->method);
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE(  35)					::Array< ::Dynamic> _hx_tmp = ::utest::TestHandler_obj::exceptionStack(null());
HXDLIN(  35)					::hx::EnumBase _hx_tmp1 = ::utest::Assertation_obj::Error(e,_hx_tmp);
HXDLIN(  35)					this->results->add(_hx_tmp1);
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e1 = _hx_e;
HXLINE(  38)				::Array< ::Dynamic> _hx_tmp2 = ::utest::TestHandler_obj::exceptionStack(null());
HXDLIN(  38)				::hx::EnumBase _hx_tmp3 = ::utest::Assertation_obj::SetupError(e1,_hx_tmp2);
HXDLIN(  38)				this->results->add(_hx_tmp3);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  40)		this->onPrecheck->dispatch(hx::ObjectPtr<OBJ_>(this));
HXLINE(  41)		this->checkTested();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHandler_obj,execute,(void))

void TestHandler_obj::checkTested(){
            	HX_STACK_FRAME("utest.TestHandler","checkTested",0xbf83b1fc,"utest.TestHandler.checkTested","utest/TestHandler.hx",64,0x9078bd4e)
            	HX_STACK_THIS(this)
HXLINE(  64)		Bool _hx_tmp = (this->asyncStack->length == (int)0);
HXDLIN(  64)		if (_hx_tmp) {
HXLINE(  65)			this->tested();
            		}
            		else {
HXLINE(  67)			this->timeout();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHandler_obj,checkTested,(void))

void TestHandler_obj::setTimeout(Int timeout){
            	HX_STACK_FRAME("utest.TestHandler","setTimeout",0xf4c5469c,"utest.TestHandler.setTimeout","utest/TestHandler.hx",72,0x9078bd4e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(timeout,"timeout")
HXLINE(  73)		Float _hx_tmp = ::haxe::Timer_obj::stamp();
HXDLIN(  73)		HX_VARI( Float,newexpire) = (_hx_tmp + ((Float)timeout / (Float)(int)1000));
HXLINE(  74)		 ::Dynamic _hx_tmp1;
HXDLIN(  74)		if (hx::IsNull( this->expireson )) {
HXLINE(  74)			_hx_tmp1 = newexpire;
            		}
            		else {
HXLINE(  74)			if (hx::IsGreater( newexpire,this->expireson )) {
HXLINE(  74)				_hx_tmp1 = newexpire;
            			}
            			else {
HXLINE(  74)				_hx_tmp1 = this->expireson;
            			}
            		}
HXDLIN(  74)		this->expireson = _hx_tmp1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestHandler_obj,setTimeout,(void))

void TestHandler_obj::bindHandler(){
            	HX_STACK_FRAME("utest.TestHandler","bindHandler",0x4a7e4970,"utest.TestHandler.bindHandler","utest/TestHandler.hx",77,0x9078bd4e)
            	HX_STACK_THIS(this)
HXLINE(  78)		::utest::Assert_obj::results = this->results;
HXLINE(  79)		::utest::Assert_obj::createAsync = this->addAsync_dyn();
HXLINE(  80)		::utest::Assert_obj::createEvent = this->addEvent_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHandler_obj,bindHandler,(void))

void TestHandler_obj::unbindHandler(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		 ::Dynamic _hx_run( ::Dynamic f, ::Dynamic t){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("utest.TestHandler","unbindHandler",0x8d103e77,"utest.TestHandler.unbindHandler","utest/TestHandler.hx",85,0x9078bd4e)
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_STACK_FRAME("utest.TestHandler","unbindHandler",0x8d103e77,"utest.TestHandler.unbindHandler","utest/TestHandler.hx",85,0x9078bd4e)
            			HX_STACK_ARG(f,"f")
            			HX_STACK_ARG(t,"t")
HXLINE(  85)			return  ::Dynamic(new _hx_Closure_0());
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_3) HXARGC(2)
            		 ::Dynamic _hx_run( ::Dynamic f1, ::Dynamic t1){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			void _hx_run( ::Dynamic e){
            				HX_STACK_FRAME("utest.TestHandler","unbindHandler",0x8d103e77,"utest.TestHandler.unbindHandler","utest/TestHandler.hx",86,0x9078bd4e)
            				HX_STACK_ARG(e,"e")
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_FRAME("utest.TestHandler","unbindHandler",0x8d103e77,"utest.TestHandler.unbindHandler","utest/TestHandler.hx",86,0x9078bd4e)
            			HX_STACK_ARG(f1,"f1")
            			HX_STACK_ARG(t1,"t1")
HXLINE(  86)			return  ::Dynamic(new _hx_Closure_2());
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("utest.TestHandler","unbindHandler",0x8d103e77,"utest.TestHandler.unbindHandler","utest/TestHandler.hx",83,0x9078bd4e)
            	HX_STACK_THIS(this)
HXLINE(  84)		::utest::Assert_obj::results = null();
HXLINE(  85)		::utest::Assert_obj::createAsync =  ::Dynamic(new _hx_Closure_1());
HXLINE(  86)		::utest::Assert_obj::createEvent =  ::Dynamic(new _hx_Closure_3());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHandler_obj,unbindHandler,(void))

 ::Dynamic TestHandler_obj::addAsync( ::Dynamic f,hx::Null< Int >  __o_timeout){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::Dynamic,f, ::utest::TestHandler,handler) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("utest.TestHandler","addAsync",0xf2106398,"utest.TestHandler.addAsync","utest/TestHandler.hx",119,0x9078bd4e)
HXLINE( 120)			Bool _hx_tmp1 = !(handler->asyncStack->remove(f));
HXDLIN( 120)			if (_hx_tmp1) {
HXLINE( 121)				::hx::EnumBase _hx_tmp2 = ::utest::Assertation_obj::AsyncError(HX_("async function already executed",3b,2a,0d,78),::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 121)				handler->results->add(_hx_tmp2);
HXLINE( 122)				return;
            			}
HXLINE( 124)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 125)				handler->bindHandler();
HXLINE( 126)				f();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 128)					::Array< ::Dynamic> _hx_tmp3 = ::utest::TestHandler_obj::exceptionStack((int)0);
HXDLIN( 128)					::hx::EnumBase _hx_tmp4 = ::utest::Assertation_obj::AsyncError(e,_hx_tmp3);
HXDLIN( 128)					handler->results->add(_hx_tmp4);
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

Int timeout = __o_timeout.Default(250);
            	HX_STACK_FRAME("utest.TestHandler","addAsync",0xf2106398,"utest.TestHandler.addAsync","utest/TestHandler.hx",113,0x9078bd4e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(timeout,"timeout")
HXLINE( 114)		Bool _hx_tmp = hx::IsNull( f );
HXDLIN( 114)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("utest.TestHandler","addAsync",0xf2106398,"utest.TestHandler.addAsync","utest/TestHandler.hx",115,0x9078bd4e)
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 115)			f =  ::Dynamic(new _hx_Closure_0());
            		}
HXLINE( 116)		this->asyncStack->add(f);
HXLINE( 117)		HX_VARI(  ::utest::TestHandler,handler) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 118)		this->setTimeout(timeout);
HXLINE( 119)		return  ::Dynamic(new _hx_Closure_1(f,handler));
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestHandler_obj,addAsync,return )

 ::Dynamic TestHandler_obj::addEvent( ::Dynamic f,hx::Null< Int >  __o_timeout){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::utest::TestHandler,handler) HXARGC(1)
            		void _hx_run( ::Dynamic e){
            			HX_STACK_FRAME("utest.TestHandler","addEvent",0x41972c76,"utest.TestHandler.addEvent","utest/TestHandler.hx",137,0x9078bd4e)
            			HX_STACK_ARG(e,"e")
HXLINE( 138)			Bool _hx_tmp = !(handler->asyncStack->remove(f));
HXDLIN( 138)			if (_hx_tmp) {
HXLINE( 139)				::hx::EnumBase _hx_tmp1 = ::utest::Assertation_obj::AsyncError(HX_("event already executed",dd,74,a8,e7),::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 139)				handler->results->add(_hx_tmp1);
HXLINE( 140)				return;
            			}
HXLINE( 142)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 143)				handler->bindHandler();
HXLINE( 144)				f(e);
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e1 = _hx_e;
HXLINE( 146)					::Array< ::Dynamic> _hx_tmp2 = ::utest::TestHandler_obj::exceptionStack((int)0);
HXDLIN( 146)					::hx::EnumBase _hx_tmp3 = ::utest::Assertation_obj::AsyncError(e1,_hx_tmp2);
HXDLIN( 146)					handler->results->add(_hx_tmp3);
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

Int timeout = __o_timeout.Default(250);
            	HX_STACK_FRAME("utest.TestHandler","addEvent",0x41972c76,"utest.TestHandler.addEvent","utest/TestHandler.hx",133,0x9078bd4e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(f,"f")
            	HX_STACK_ARG(timeout,"timeout")
HXLINE( 134)		this->asyncStack->add(f);
HXLINE( 135)		HX_VARI(  ::utest::TestHandler,handler) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 136)		this->setTimeout(timeout);
HXLINE( 137)		return  ::Dynamic(new _hx_Closure_0(f,handler));
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestHandler_obj,addEvent,return )

void TestHandler_obj::executeMethod(::String name){
            	HX_STACK_FRAME("utest.TestHandler","executeMethod",0xade08f99,"utest.TestHandler.executeMethod","utest/TestHandler.hx",151,0x9078bd4e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 152)		if (hx::IsNull( name )) {
HXLINE( 152)			return;
            		}
HXLINE( 153)		this->bindHandler();
HXLINE( 154)		 ::Dynamic _hx_tmp = ::Reflect_obj::field(this->fixture->target,name);
HXDLIN( 154)		::Reflect_obj::callMethod(this->fixture->target,_hx_tmp,::cpp::VirtualArray_obj::__new(0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestHandler_obj,executeMethod,(void))

void TestHandler_obj::tested(){
            	HX_STACK_FRAME("utest.TestHandler","tested",0xf4569e2e,"utest.TestHandler.tested","utest/TestHandler.hx",157,0x9078bd4e)
            	HX_STACK_THIS(this)
HXLINE( 158)		Bool _hx_tmp = (this->results->length == (int)0);
HXDLIN( 158)		if (_hx_tmp) {
HXLINE( 159)			::hx::EnumBase _hx_tmp1 = ::utest::Assertation_obj::Warning(HX_("no assertions",f0,00,b5,f3));
HXDLIN( 159)			this->results->add(_hx_tmp1);
            		}
HXLINE( 160)		this->onTested->dispatch(hx::ObjectPtr<OBJ_>(this));
HXLINE( 161)		this->completed();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHandler_obj,tested,(void))

void TestHandler_obj::timeout(){
            	HX_STACK_FRAME("utest.TestHandler","timeout",0xf2973304,"utest.TestHandler.timeout","utest/TestHandler.hx",164,0x9078bd4e)
            	HX_STACK_THIS(this)
HXLINE( 165)		::hx::EnumBase _hx_tmp = ::utest::Assertation_obj::TimeoutError(this->asyncStack->length,::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 165)		this->results->add(_hx_tmp);
HXLINE( 166)		this->onTimeout->dispatch(hx::ObjectPtr<OBJ_>(this));
HXLINE( 167)		this->completed();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHandler_obj,timeout,(void))

void TestHandler_obj::completed(){
            	HX_STACK_FRAME("utest.TestHandler","completed",0x2359d8ae,"utest.TestHandler.completed","utest/TestHandler.hx",170,0x9078bd4e)
            	HX_STACK_THIS(this)
HXLINE( 171)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 172)			this->executeMethod(this->fixture->teardown);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 174)				::Array< ::Dynamic> _hx_tmp = ::utest::TestHandler_obj::exceptionStack((int)2);
HXDLIN( 174)				::hx::EnumBase _hx_tmp1 = ::utest::Assertation_obj::TeardownError(e,_hx_tmp);
HXDLIN( 174)				this->results->add(_hx_tmp1);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 176)		this->unbindHandler();
HXLINE( 177)		this->onComplete->dispatch(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHandler_obj,completed,(void))

Int TestHandler_obj::POLLING_TIME;

::Array< ::Dynamic> TestHandler_obj::exceptionStack(hx::Null< Int >  __o_pops){
Int pops = __o_pops.Default(2);
            	HX_STACK_FRAME("utest.TestHandler","exceptionStack",0x3eeb5276,"utest.TestHandler.exceptionStack","utest/TestHandler.hx",45,0x9078bd4e)
            	HX_STACK_ARG(pops,"pops")
HXLINE(  46)		HX_VARI( ::Array< ::Dynamic>,stack) = ::haxe::CallStack_obj::exceptionStack();
HXLINE(  47)		while(true){
HXLINE(  47)			Int _hx_tmp = pops--;
HXDLIN(  47)			if (!((_hx_tmp > (int)0))) {
HXLINE(  47)				goto _hx_goto_0;
            			}
HXLINE(  49)			stack->pop().StaticCast< ::hx::EnumBase >();
            		}
            		_hx_goto_0:;
HXLINE(  51)		return stack;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TestHandler_obj,exceptionStack,return )


TestHandler_obj::TestHandler_obj()
{
}

void TestHandler_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestHandler);
	HX_MARK_MEMBER_NAME(results,"results");
	HX_MARK_MEMBER_NAME(fixture,"fixture");
	HX_MARK_MEMBER_NAME(asyncStack,"asyncStack");
	HX_MARK_MEMBER_NAME(onTested,"onTested");
	HX_MARK_MEMBER_NAME(onTimeout,"onTimeout");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(onPrecheck,"onPrecheck");
	HX_MARK_MEMBER_NAME(precheck,"precheck");
	HX_MARK_MEMBER_NAME(expireson,"expireson");
	HX_MARK_END_CLASS();
}

void TestHandler_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(results,"results");
	HX_VISIT_MEMBER_NAME(fixture,"fixture");
	HX_VISIT_MEMBER_NAME(asyncStack,"asyncStack");
	HX_VISIT_MEMBER_NAME(onTested,"onTested");
	HX_VISIT_MEMBER_NAME(onTimeout,"onTimeout");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(onPrecheck,"onPrecheck");
	HX_VISIT_MEMBER_NAME(precheck,"precheck");
	HX_VISIT_MEMBER_NAME(expireson,"expireson");
}

hx::Val TestHandler_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"tested") ) { return hx::Val( tested_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"results") ) { return hx::Val( results); }
		if (HX_FIELD_EQ(inName,"fixture") ) { return hx::Val( fixture); }
		if (HX_FIELD_EQ(inName,"execute") ) { return hx::Val( execute_dyn()); }
		if (HX_FIELD_EQ(inName,"timeout") ) { return hx::Val( timeout_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onTested") ) { return hx::Val( onTested); }
		if (HX_FIELD_EQ(inName,"precheck") ) { return hx::Val( precheck); }
		if (HX_FIELD_EQ(inName,"addAsync") ) { return hx::Val( addAsync_dyn()); }
		if (HX_FIELD_EQ(inName,"addEvent") ) { return hx::Val( addEvent_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onTimeout") ) { return hx::Val( onTimeout); }
		if (HX_FIELD_EQ(inName,"expireson") ) { return hx::Val( expireson); }
		if (HX_FIELD_EQ(inName,"completed") ) { return hx::Val( completed_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"asyncStack") ) { return hx::Val( asyncStack); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete); }
		if (HX_FIELD_EQ(inName,"onPrecheck") ) { return hx::Val( onPrecheck); }
		if (HX_FIELD_EQ(inName,"setTimeout") ) { return hx::Val( setTimeout_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"checkTested") ) { return hx::Val( checkTested_dyn()); }
		if (HX_FIELD_EQ(inName,"bindHandler") ) { return hx::Val( bindHandler_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"unbindHandler") ) { return hx::Val( unbindHandler_dyn()); }
		if (HX_FIELD_EQ(inName,"executeMethod") ) { return hx::Val( executeMethod_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"exceptionStack") ) { outValue = exceptionStack_dyn(); return true; }
	}
	return false;
}

hx::Val TestHandler_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"results") ) { results=inValue.Cast<  ::List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fixture") ) { fixture=inValue.Cast<  ::utest::TestFixture >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onTested") ) { onTested=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"precheck") ) { precheck=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onTimeout") ) { onTimeout=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"expireson") ) { expireson=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"asyncStack") ) { asyncStack=inValue.Cast<  ::List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPrecheck") ) { onPrecheck=inValue.Cast<  ::utest::Dispatcher >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestHandler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("results","\xf6","\x58","\x57","\x6b"));
	outFields->push(HX_HCSTRING("fixture","\xc9","\xbb","\x21","\xf2"));
	outFields->push(HX_HCSTRING("asyncStack","\x6c","\x1e","\x48","\x32"));
	outFields->push(HX_HCSTRING("onTested","\xb0","\x4f","\xe7","\xb4"));
	outFields->push(HX_HCSTRING("onTimeout","\x42","\xd3","\xa1","\xb0"));
	outFields->push(HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"));
	outFields->push(HX_HCSTRING("onPrecheck","\x04","\xae","\x19","\x10"));
	outFields->push(HX_HCSTRING("expireson","\xd3","\x15","\x89","\x1c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestHandler_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::List*/ ,(int)offsetof(TestHandler_obj,results),HX_HCSTRING("results","\xf6","\x58","\x57","\x6b")},
	{hx::fsObject /*::utest::TestFixture*/ ,(int)offsetof(TestHandler_obj,fixture),HX_HCSTRING("fixture","\xc9","\xbb","\x21","\xf2")},
	{hx::fsObject /*::List*/ ,(int)offsetof(TestHandler_obj,asyncStack),HX_HCSTRING("asyncStack","\x6c","\x1e","\x48","\x32")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(TestHandler_obj,onTested),HX_HCSTRING("onTested","\xb0","\x4f","\xe7","\xb4")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(TestHandler_obj,onTimeout),HX_HCSTRING("onTimeout","\x42","\xd3","\xa1","\xb0")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(TestHandler_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsObject /*::utest::Dispatcher*/ ,(int)offsetof(TestHandler_obj,onPrecheck),HX_HCSTRING("onPrecheck","\x04","\xae","\x19","\x10")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TestHandler_obj,precheck),HX_HCSTRING("precheck","\xc5","\xd9","\x62","\x32")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TestHandler_obj,expireson),HX_HCSTRING("expireson","\xd3","\x15","\x89","\x1c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TestHandler_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TestHandler_obj::POLLING_TIME,HX_HCSTRING("POLLING_TIME","\x29","\x25","\x4e","\x4f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TestHandler_obj_sMemberFields[] = {
	HX_HCSTRING("results","\xf6","\x58","\x57","\x6b"),
	HX_HCSTRING("fixture","\xc9","\xbb","\x21","\xf2"),
	HX_HCSTRING("asyncStack","\x6c","\x1e","\x48","\x32"),
	HX_HCSTRING("onTested","\xb0","\x4f","\xe7","\xb4"),
	HX_HCSTRING("onTimeout","\x42","\xd3","\xa1","\xb0"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("onPrecheck","\x04","\xae","\x19","\x10"),
	HX_HCSTRING("precheck","\xc5","\xd9","\x62","\x32"),
	HX_HCSTRING("execute","\x35","\x0a","\x0d","\xcc"),
	HX_HCSTRING("checkTested","\x19","\x2c","\x4c","\xb7"),
	HX_HCSTRING("expireson","\xd3","\x15","\x89","\x1c"),
	HX_HCSTRING("setTimeout","\x1f","\x3f","\xd6","\x2b"),
	HX_HCSTRING("bindHandler","\x8d","\xc3","\x46","\x42"),
	HX_HCSTRING("unbindHandler","\xd4","\x39","\x81","\x63"),
	HX_HCSTRING("addAsync","\x5b","\x25","\x9b","\x9f"),
	HX_HCSTRING("addEvent","\x39","\xee","\x21","\xef"),
	HX_HCSTRING("executeMethod","\xf6","\x8a","\x51","\x84"),
	HX_HCSTRING("tested","\x31","\x59","\x3a","\xd5"),
	HX_HCSTRING("timeout","\xa1","\x1a","\xf7","\xd8"),
	HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f"),
	::String(null()) };

static void TestHandler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestHandler_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TestHandler_obj::POLLING_TIME,"POLLING_TIME");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestHandler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestHandler_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TestHandler_obj::POLLING_TIME,"POLLING_TIME");
};

#endif

hx::Class TestHandler_obj::__mClass;

static ::String TestHandler_obj_sStaticFields[] = {
	HX_HCSTRING("POLLING_TIME","\x29","\x25","\x4e","\x4f"),
	HX_HCSTRING("exceptionStack","\x79","\x48","\x56","\x0b"),
	::String(null())
};

void TestHandler_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.TestHandler","\xd1","\xdd","\xd3","\xa8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestHandler_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestHandler_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestHandler_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestHandler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestHandler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestHandler_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestHandler_obj::__boot()
{
{
            	HX_STACK_FRAME("utest.TestHandler","boot",0xa72b9fef,"utest.TestHandler.boot","utest/TestHandler.hx",6,0x9078bd4e)
HXLINE(   6)		POLLING_TIME = (int)10;
            	}
}

} // end namespace utest
