// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_culture_DateFormatInfo
#include <thx/culture/DateFormatInfo.h>
#endif
#ifndef INCLUDED_thx_culture_TestDateFormatInfo
#include <thx/culture/TestDateFormatInfo.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace culture{

void TestDateFormatInfo_obj::__construct(){
            	HX_STACK_FRAME("thx.culture.TestDateFormatInfo","new",0x334815c1,"thx.culture.TestDateFormatInfo.new","thx/culture/TestDateFormatInfo.hx",6,0x5432288d)
            	HX_STACK_THIS(this)
            	}

Dynamic TestDateFormatInfo_obj::__CreateEmpty() { return new TestDateFormatInfo_obj; }

hx::ObjectPtr< TestDateFormatInfo_obj > TestDateFormatInfo_obj::__new()
{
	hx::ObjectPtr< TestDateFormatInfo_obj > _hx_result = new TestDateFormatInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestDateFormatInfo_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestDateFormatInfo_obj > _hx_result = new TestDateFormatInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestDateFormatInfo_obj::testInvariant(){
            	HX_STACK_FRAME("thx.culture.TestDateFormatInfo","testInvariant",0xdbf1012f,"thx.culture.TestDateFormatInfo.testInvariant","thx/culture/TestDateFormatInfo.hx",8,0x5432288d)
            	HX_STACK_THIS(this)
HXLINE(   9)		HX_VARI(  ::thx::culture::DateFormatInfo,dt) = ::thx::culture::DateFormatInfo_obj::invariant;
HXLINE(  11)		::utest::Assert_obj::equals(HX_("Gregorian",c6,ad,49,c5),dt->nameCalendar,null(),hx::SourceInfo(HX_("TestDateFormatInfo.hx",b9,60,7e,69),11,HX_("thx.culture.TestDateFormatInfo",4f,21,c0,fe),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  12)		::utest::Assert_obj::equals(HX_("Sunday",70,80,82,d6),dt->firstDayOfWeekName,null(),hx::SourceInfo(HX_("TestDateFormatInfo.hx",b9,60,7e,69),12,HX_("thx.culture.TestDateFormatInfo",4f,21,c0,fe),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  13)		::utest::Assert_obj::equals(HX_("AM",ec,38,00,00),dt->designatorAm,null(),hx::SourceInfo(HX_("TestDateFormatInfo.hx",b9,60,7e,69),13,HX_("thx.culture.TestDateFormatInfo",4f,21,c0,fe),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  14)		::utest::Assert_obj::equals(HX_("PM",fd,45,00,00),dt->designatorPm,null(),hx::SourceInfo(HX_("TestDateFormatInfo.hx",b9,60,7e,69),14,HX_("thx.culture.TestDateFormatInfo",4f,21,c0,fe),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  15)		::utest::Assert_obj::equals(HX_("January",4a,18,86,71),dt->nameMonths->__get((int)0),null(),hx::SourceInfo(HX_("TestDateFormatInfo.hx",b9,60,7e,69),15,HX_("thx.culture.TestDateFormatInfo",4f,21,c0,fe),HX_("testInvariant",8e,d8,cd,28)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestDateFormatInfo_obj,testInvariant,(void))


TestDateFormatInfo_obj::TestDateFormatInfo_obj()
{
}

hx::Val TestDateFormatInfo_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"testInvariant") ) { return hx::Val( testInvariant_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestDateFormatInfo_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestDateFormatInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String TestDateFormatInfo_obj_sMemberFields[] = {
	HX_HCSTRING("testInvariant","\x8e","\xd8","\xcd","\x28"),
	::String(null()) };

static void TestDateFormatInfo_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestDateFormatInfo_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestDateFormatInfo_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestDateFormatInfo_obj::__mClass,"__mClass");
};

#endif

hx::Class TestDateFormatInfo_obj::__mClass;

void TestDateFormatInfo_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.culture.TestDateFormatInfo","\x4f","\x21","\xc0","\xfe");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestDateFormatInfo_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestDateFormatInfo_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestDateFormatInfo_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestDateFormatInfo_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestDateFormatInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestDateFormatInfo_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace culture
