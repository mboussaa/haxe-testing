// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_culture_Culture
#include <thx/culture/Culture.h>
#endif
#ifndef INCLUDED_thx_culture_TestCulture
#include <thx/culture/TestCulture.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace culture{

void TestCulture_obj::__construct(){
            	HX_STACK_FRAME("thx.culture.TestCulture","new",0xe51a4224,"thx.culture.TestCulture.new","thx/culture/TestCulture.hx",7,0x309cb64e)
            	HX_STACK_THIS(this)
            	}

Dynamic TestCulture_obj::__CreateEmpty() { return new TestCulture_obj; }

hx::ObjectPtr< TestCulture_obj > TestCulture_obj::__new()
{
	hx::ObjectPtr< TestCulture_obj > _hx_result = new TestCulture_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestCulture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestCulture_obj > _hx_result = new TestCulture_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestCulture_obj::testInvariant(){
            	HX_STACK_FRAME("thx.culture.TestCulture","testInvariant",0xd8b5a752,"thx.culture.TestCulture.testInvariant","thx/culture/TestCulture.hx",9,0x309cb64e)
            	HX_STACK_THIS(this)
HXLINE(  10)		::utest::Assert_obj::isFalse(::thx::culture::Culture_obj::invariant->isNeutral,null(),hx::SourceInfo(HX_("TestCulture.hx",a2,30,c1,b6),10,HX_("thx.culture.TestCulture",32,a0,05,79),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  11)		::utest::Assert_obj::isFalse(::thx::culture::Culture_obj::invariant->isRightToLeft,null(),hx::SourceInfo(HX_("TestCulture.hx",a2,30,c1,b6),11,HX_("thx.culture.TestCulture",32,a0,05,79),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  12)		::utest::Assert_obj::equals(HX_("",00,00,00,00),::thx::culture::Culture_obj::invariant->code,null(),hx::SourceInfo(HX_("TestCulture.hx",a2,30,c1,b6),12,HX_("thx.culture.TestCulture",32,a0,05,79),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  13)		::utest::Assert_obj::equals(HX_("iv",ed,5b,00,00),::thx::culture::Culture_obj::invariant->iso2,null(),hx::SourceInfo(HX_("TestCulture.hx",a2,30,c1,b6),13,HX_("thx.culture.TestCulture",32,a0,05,79),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  14)		::utest::Assert_obj::equals(HX_("IVL",bf,af,37,00),::thx::culture::Culture_obj::invariant->iso3,null(),hx::SourceInfo(HX_("TestCulture.hx",a2,30,c1,b6),14,HX_("thx.culture.TestCulture",32,a0,05,79),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  15)		::utest::Assert_obj::equals(HX_("Invariant Language",78,bd,b9,30),::thx::culture::Culture_obj::invariant->nameEnglish,null(),hx::SourceInfo(HX_("TestCulture.hx",a2,30,c1,b6),15,HX_("thx.culture.TestCulture",32,a0,05,79),HX_("testInvariant",8e,d8,cd,28)));
HXLINE(  16)		::utest::Assert_obj::equals(HX_("Invariant Language",78,bd,b9,30),::thx::culture::Culture_obj::invariant->nameNative,null(),hx::SourceInfo(HX_("TestCulture.hx",a2,30,c1,b6),16,HX_("thx.culture.TestCulture",32,a0,05,79),HX_("testInvariant",8e,d8,cd,28)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCulture_obj,testInvariant,(void))


TestCulture_obj::TestCulture_obj()
{
}

hx::Val TestCulture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"testInvariant") ) { return hx::Val( testInvariant_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestCulture_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestCulture_obj_sStaticStorageInfo = 0;
#endif

static ::String TestCulture_obj_sMemberFields[] = {
	HX_HCSTRING("testInvariant","\x8e","\xd8","\xcd","\x28"),
	::String(null()) };

static void TestCulture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestCulture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestCulture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestCulture_obj::__mClass,"__mClass");
};

#endif

hx::Class TestCulture_obj::__mClass;

void TestCulture_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.culture.TestCulture","\x32","\xa0","\x05","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestCulture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestCulture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestCulture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestCulture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestCulture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestCulture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace culture
