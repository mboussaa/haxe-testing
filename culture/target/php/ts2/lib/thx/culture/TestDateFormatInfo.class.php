<?php

// Generated by Haxe 3.3.0
class thx_culture_TestDateFormatInfo {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testInvariant() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$dt = thx_culture_DateFormatInfo::$invariant;
			utest_Assert::equals("Gregorian", $dt->nameCalendar, null, _hx_anonymous(array("fileName" => "TestDateFormatInfo.hx", "lineNumber" => 15, "className" => "thx.culture.TestDateFormatInfo", "methodName" => "testInvariant")));
			utest_Assert::equals("Sunday", $dt->firstDayOfWeekName, null, _hx_anonymous(array("fileName" => "TestDateFormatInfo.hx", "lineNumber" => 16, "className" => "thx.culture.TestDateFormatInfo", "methodName" => "testInvariant")));
			utest_Assert::equals("AM", $dt->designatorAm, null, _hx_anonymous(array("fileName" => "TestDateFormatInfo.hx", "lineNumber" => 17, "className" => "thx.culture.TestDateFormatInfo", "methodName" => "testInvariant")));
			utest_Assert::equals("PM", $dt->designatorPm, null, _hx_anonymous(array("fileName" => "TestDateFormatInfo.hx", "lineNumber" => 18, "className" => "thx.culture.TestDateFormatInfo", "methodName" => "testInvariant")));
			utest_Assert::equals("January", $dt->nameMonths[0], null, _hx_anonymous(array("fileName" => "TestDateFormatInfo.hx", "lineNumber" => 19, "className" => "thx.culture.TestDateFormatInfo", "methodName" => "testInvariant")));
			unset($dt);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.culture.TestDateFormatInfo'; }
}
