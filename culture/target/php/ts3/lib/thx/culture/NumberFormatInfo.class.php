<?php

// Generated by Haxe 3.3.0
class thx_culture_NumberFormatInfo {
	public function __construct($decimalDigitsCurrency, $decimalDigitsNumber, $decimalDigitsPercent, $groupSizesCurrency, $groupSizesNumber, $groupSizesPercent, $patternNegativeCurrency, $patternNegativeNumber, $patternNegativePercent, $patternPositiveCurrency, $patternPositivePercent, $separatorDecimalCurrency, $separatorDecimalNumber, $separatorDecimalPercent, $separatorGroupCurrency, $separatorGroupNumber, $separatorGroupPercent, $signNegative, $signPositive, $symbolCurrency, $symbolNaN, $symbolNegativeInfinity, $symbolPercent, $symbolPermille, $symbolPositiveInfinity) {
		if(!php_Boot::$skip_constructor) {
		$this->decimalDigitsCurrency = $decimalDigitsCurrency;
		$this->decimalDigitsNumber = $decimalDigitsNumber;
		$this->decimalDigitsPercent = $decimalDigitsPercent;
		$this->groupSizesCurrency = $groupSizesCurrency;
		$this->groupSizesNumber = $groupSizesNumber;
		$this->groupSizesPercent = $groupSizesPercent;
		$this->patternNegativeCurrency = $patternNegativeCurrency;
		$this->patternNegativeNumber = $patternNegativeNumber;
		$this->patternNegativePercent = $patternNegativePercent;
		$this->patternPositiveCurrency = $patternPositiveCurrency;
		$this->patternPositivePercent = $patternPositivePercent;
		$this->separatorDecimalCurrency = $separatorDecimalCurrency;
		$this->separatorDecimalNumber = $separatorDecimalNumber;
		$this->separatorDecimalPercent = $separatorDecimalPercent;
		$this->separatorGroupCurrency = $separatorGroupCurrency;
		$this->separatorGroupNumber = $separatorGroupNumber;
		$this->separatorGroupPercent = $separatorGroupPercent;
		$this->signNegative = $signNegative;
		$this->signPositive = $signPositive;
		$this->symbolCurrency = $symbolCurrency;
		$this->symbolNaN = $symbolNaN;
		$this->symbolNegativeInfinity = $symbolNegativeInfinity;
		$this->symbolPercent = $symbolPercent;
		$this->symbolPermille = $symbolPermille;
		$this->symbolPositiveInfinity = $symbolPositiveInfinity;
	}}
	public $decimalDigitsCurrency;
	public $decimalDigitsNumber;
	public $decimalDigitsPercent;
	public $groupSizesCurrency;
	public $groupSizesNumber;
	public $groupSizesPercent;
	public $patternNegativeCurrency;
	public $patternNegativeNumber;
	public $patternNegativePercent;
	public $patternPositiveCurrency;
	public $patternPositivePercent;
	public $separatorDecimalCurrency;
	public $separatorDecimalNumber;
	public $separatorDecimalPercent;
	public $separatorGroupCurrency;
	public $separatorGroupNumber;
	public $separatorGroupPercent;
	public $signNegative;
	public $signPositive;
	public $symbolCurrency;
	public $symbolNaN;
	public $symbolNegativeInfinity;
	public $symbolPercent;
	public $symbolPermille;
	public $symbolPositiveInfinity;
	public function toObject() {
		return _hx_anonymous(array("decimalDigitsCurrency" => $this->decimalDigitsCurrency, "decimalDigitsNumber" => $this->decimalDigitsNumber, "decimalDigitsPercent" => $this->decimalDigitsPercent, "groupSizesCurrency" => $this->groupSizesCurrency, "groupSizesNumber" => $this->groupSizesNumber, "groupSizesPercent" => $this->groupSizesPercent, "patternNegativeCurrency" => $this->patternNegativeCurrency, "patternNegativeNumber" => $this->patternNegativeNumber, "patternNegativePercent" => $this->patternNegativePercent, "patternPositiveCurrency" => $this->patternPositiveCurrency, "patternPositivePercent" => $this->patternPositivePercent, "separatorDecimalCurrency" => $this->separatorDecimalCurrency, "separatorDecimalNumber" => $this->separatorDecimalNumber, "separatorDecimalPercent" => $this->separatorDecimalPercent, "separatorGroupCurrency" => $this->separatorGroupCurrency, "separatorGroupNumber" => $this->separatorGroupNumber, "separatorGroupPercent" => $this->separatorGroupPercent, "signNegative" => $this->signNegative, "signPositive" => $this->signPositive, "symbolCurrency" => $this->symbolCurrency, "symbolNaN" => $this->symbolNaN, "symbolNegativeInfinity" => $this->symbolNegativeInfinity, "symbolPercent" => $this->symbolPercent, "symbolPermille" => $this->symbolPermille, "symbolPositiveInfinity" => $this->symbolPositiveInfinity));
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $invariant;
	static function fromObject($o) {
		return new thx_culture_NumberFormatInfo($o->decimalDigitsCurrency, $o->decimalDigitsNumber, $o->decimalDigitsPercent, $o->groupSizesCurrency, $o->groupSizesNumber, $o->groupSizesPercent, $o->patternNegativeCurrency, $o->patternNegativeNumber, $o->patternNegativePercent, $o->patternPositiveCurrency, $o->patternPositivePercent, $o->separatorDecimalCurrency, $o->separatorDecimalNumber, $o->separatorDecimalPercent, $o->separatorGroupCurrency, $o->separatorGroupNumber, $o->separatorGroupPercent, $o->signNegative, $o->signPositive, $o->symbolCurrency, $o->symbolNaN, $o->symbolNegativeInfinity, $o->symbolPercent, $o->symbolPermille, $o->symbolPositiveInfinity);
	}
	function __toString() { return 'thx.culture.NumberFormatInfo'; }
}
thx_culture_NumberFormatInfo::$invariant = new thx_culture_NumberFormatInfo(2, 2, 2, (new _hx_array(array(3))), (new _hx_array(array(3))), (new _hx_array(array(3))), 0, 1, 0, 0, 0, ".", ".", ".", ",", ",", ",", "-", "+", "¤", "NaN", "-Infinity", "%", "‰", "Infinity");
