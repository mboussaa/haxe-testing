<?php

// Generated by Haxe 3.3.0
class thx_culture_TestNumberFormatInfo {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testInvariant() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$n = thx_culture_NumberFormatInfo::$invariant;
			utest_Assert::same((new _hx_array(array(3))), $n->groupSizesNumber, null, null, null, _hx_anonymous(array("fileName" => "TestNumberFormatInfo.hx", "lineNumber" => 16, "className" => "thx.culture.TestNumberFormatInfo", "methodName" => "testInvariant")));
			utest_Assert::equals(".", $n->separatorDecimalNumber, null, _hx_anonymous(array("fileName" => "TestNumberFormatInfo.hx", "lineNumber" => 17, "className" => "thx.culture.TestNumberFormatInfo", "methodName" => "testInvariant")));
			utest_Assert::equals(",", $n->separatorGroupNumber, null, _hx_anonymous(array("fileName" => "TestNumberFormatInfo.hx", "lineNumber" => 18, "className" => "thx.culture.TestNumberFormatInfo", "methodName" => "testInvariant")));
			utest_Assert::equals("-", $n->signNegative, null, _hx_anonymous(array("fileName" => "TestNumberFormatInfo.hx", "lineNumber" => 19, "className" => "thx.culture.TestNumberFormatInfo", "methodName" => "testInvariant")));
			utest_Assert::equals("+", $n->signPositive, null, _hx_anonymous(array("fileName" => "TestNumberFormatInfo.hx", "lineNumber" => 20, "className" => "thx.culture.TestNumberFormatInfo", "methodName" => "testInvariant")));
			utest_Assert::equals("NaN", $n->symbolNaN, null, _hx_anonymous(array("fileName" => "TestNumberFormatInfo.hx", "lineNumber" => 21, "className" => "thx.culture.TestNumberFormatInfo", "methodName" => "testInvariant")));
			unset($n);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.culture.TestNumberFormatInfo'; }
}
