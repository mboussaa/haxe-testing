<?php

// Generated by Haxe 3.3.0
class thx_culture_TestEmbed {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testEmbed() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$o = _hx_anonymous(array("nameRegionNative" => "Italia", "separatorList" => ";", "nameNative" => "italiano", "number" => _hx_anonymous(array("patternPositiveCurrency" => 2, "patternPositivePercent" => 1, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ",", "separatorGroupNumber" => ".", "signPositive" => "+", "symbolPositiveInfinity" => "+Infinito", "patternNegativeCurrency" => 9, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => ".", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non un numero reale", "separatorGroupPercent" => ".", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinito", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Italian", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dom", "lun", "mar", "mer", "gio", "ven", "sab"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("do", "lu", "ma", "me", "gi", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstFourDayWeek", "nameCalendarNative" => "calendario gregoriano", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 2, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))))), "win3" => "ITA", "nameRegionEnglish" => "Italy", "lcid" => 1040, "iso3" => "ita", "iso2" => "it", "ietf" => "it-IT", "code" => "it-IT"));
			$tmp = $o->code;
			$tmp1 = null;
			if(null === _hx_field($o, "dateTime")) {
				$tmp1 = null;
			} else {
				$o1 = $o->dateTime;
				$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
				unset($o1);
			}
			$tmp2 = $o->ietf;
			$tmp3 = $o->isNeutral;
			$tmp4 = $o->iso2;
			$tmp5 = $o->iso3;
			$tmp6 = $o->isRightToLeft;
			$tmp7 = $o->lcid;
			$tmp8 = $o->nameCalendar;
			$tmp9 = $o->nameEnglish;
			$tmp10 = $o->nameNative;
			$tmp11 = $o->nameRegionEnglish;
			$tmp12 = $o->nameRegionNative;
			$tmp13 = null;
			if(null === _hx_field($o, "number")) {
				$tmp13 = null;
			} else {
				$o2 = $o->number;
				$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
				unset($o2);
			}
			$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
			$itit = thx_culture_Culture::register($tmp14);
			$tmp15 = null;
			if(null === $itit->nameRegionNative) {
				$tmp15 = "";
			} else {
				$tmp15 = " (" . _hx_string_or_null($itit->nameRegionNative) . ")";
			}
			utest_Assert::equals("italiano (Italia)", _hx_string_or_null($itit->nameNative) . _hx_string_or_null($tmp15), null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 14, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbed")));
			utest_Assert::equals("italiano", $itit->nameNative, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 15, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbed")));
			utest_Assert::equals("Italia", $itit->nameRegionNative, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 16, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbed")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$o,$itit);
		}
	}
	public function testListLanguages() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$list = (new _hx_array(array("mr", "en-ph", "es-ec", "pt-br", "en-my", "sq-al", "ne", "az-cyrl", "fa", "zh", "sma", "fr-lu", "sr-cyrl-rs", "rm-ch", "fil-ph", "hsb-de", "en-ie", "es-cr", "en", "mr-in", "hr-ba", "zh-chs", "be-by", "arn-cl", "mn", "pl", "es-py", "km", "is-is", "id", "ml", "hy", "ta-in", "nso-za", "ro", "es-pe", "ms", "uz-cyrl-uz", "fr-mc", "gu", "hy-am", "ky", "tr", "sv-se", "es-ni", "smj-no", "uz-latn", "ur-pk", "eu", "fr-be", "fo", "qut", "ar-qa", "es-pr", "ug", "fr-fr", "cs", "ps-af", "tzm", "fr-ch", "bs-cyrl", "te", "mk-mk", "quz", "ko", "ru", "tt", "fy-nl", "smn", "kn-in", "gsw", "prs", "ig", "kl-gl", "ga", "kl", "mn-mong", "tzm-latn", "gd", "wo-sn", "cy", "ba-ru", "it-ch", "es-bo", "pt", "ar-ye", "se", "arn", "zh-mo", "sr-cyrl-ba", "kn", "tg-cyrl-tj", "vi-vn", "uk-ua", "tg-cyrl", "en-nz", "ar-tn", "nn-no", "de-li", "fil", "zh-cht", "lt", "qut-gt", "en-au", "en-sg", "ne-np", "zh-tw", "es-mx", "lb-lu", "ha-latn-ng", "bn", "sms-fi", "hsb", "tzm-latn-dz", "sr-cyrl-me", "te-in", "ar-kw", "es-gt", "ba", "br-fr", "yo", "hu-hu", "ta", "ko-kr", "syr", "gu-in", "ar-lb", "es-pa", "quz-pe", "nl-nl", "zh-hant", "dsb", "sa", "ar-bh", "kok", "es-sv", "ca", "bn-in", "en-bz", "en-gb", "vi", "or-in", "sr-cyrl-cs", "fo-fo", "nl-be", "zh-sg", "az-latn-az", "es-us", "sw-ke", "et-ee", "el-gr", "bs-cyrl-ba", "hr", "da-dk", "sr-latn-rs", "el", "ka", "mn-mn", "oc", "smj", "sah-ru", "no", "mn-mong-cn", "sv-fi", "or", "xh", "bs-latn", "ar-ae", "es-es", "es-ar", "en-za", "be", "pa", "hr-hr", "nn", "he", "ms-bn", "da", "ar-ly", "ar-sa", "sk", "en-tt", "en-029", "dsb-de", "am-et", "prs-af", "uz", "fa-ir", "pt-pt", "ii-cn", "az-cyrl-az", "tr-tr", "nso", "ru-ru", "ar-eg", "ga-ie", "se-se", "wo", "de-at", "si-lk", "es", "dv-mv", "syr-sy", "sr-cyrl", "pa-in", "dv", "ha", "sah", "as-in", "pl-pl", "sma-se", "id-id", "cs-cz", "fi-fi", "kok-in", "en-us", "lo-la", "az", "tk-tm", "sa-in", "uz-latn-uz", "ar-dz", "nb", "it-it", "bg-bg", "iu-latn", "iu-cans", "es-uy", "tn", "af", "kk", "gl", "uk", "iu-latn-ca", "ro-ro", "zu-za", "fy", "iu-cans-ca", "hu", "smn-fi", "rw", "uz-cyrl", "az-latn", "de-lu", "es-do", "bs-latn-ba", "ar-jo", "bs", "moh-ca", "eu-es", "hi-in", "zu", "de-ch", "sr-latn-ba", "ky-kg", "en-ca", "ha-latn", "ms-my", "en-in", "lb", "ar-om", "nl", "es-ve", "br", "he-il", "ca-es", "af-za", "quz-ec", "sl-si", "is", "iu", "sq", "de-de", "nb-no", "mi", "gd-gb", "tk", "en-jm", "fr-ca", "quz-bo", "bo-cn", "rw-rw", "smj-se", "de", "mt-mt", "fi", "lo", "yo-ng", "sw", "sk-sk", "lt-lt", "sl", "ii", "ja-jp", "se-no", "cy-gb", "lv", "th-th", "ml-in", "co-fr", "sma-no", "fr", "ka-ge", "mt", "zh-cn", "ar-ma", "se-fi", "ar-iq", "es-cl", "gl-es", "mi-nz", "et", "xh-za", "ar-sy", "bo", "it", "mn-cyrl", "sr", "co", "zh-hk", "si", "gsw-fr", "rm", "ps", "ig-ng", "es-hn", "tn-za", "ur", "lv-lv", "zh-hans", "tg", "moh", "tt-ru", "kk-kz", "as", "th", "en-zw", "sr-latn-cs", "ja", "es-co", "sr-latn-me", "sv", "hi", "mk", "bg", "ar", "oc-fr", "km-kh", "sms", "am", "bn-bd", "sr-latn", "ug-cn")));
			utest_Assert::contains("it", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 22, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			utest_Assert::contains("en", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 23, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			utest_Assert::contains("fr", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 24, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			utest_Assert::contains("it-it", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 25, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			utest_Assert::contains("en-us", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 26, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			utest_Assert::contains("en-gb", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 27, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			unset($list);
		}
	}
	public function testEmbedMany() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			{
				$o = _hx_anonymous(array("nameRegionNative" => null, "separatorList" => ";", "nameNative" => "italiano", "number" => null, "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => true, "nameEnglish" => "Italian", "dateTime" => null, "win3" => "ITA", "nameRegionEnglish" => null, "lcid" => 16, "iso3" => "ita", "iso2" => "it", "ietf" => "it", "code" => "it"));
				$tmp = $o->code;
				$tmp1 = null;
				if(null === _hx_field($o, "dateTime")) {
					$tmp1 = null;
				} else {
					$o1 = $o->dateTime;
					$tmp1 = new thx_culture_DateFormatInfo($o1->calendarWeekRuleIndex, $o1->calendarWeekRuleName, $o1->designatorAm, $o1->designatorPm, $o1->firstDayOfWeekIndex, $o1->firstDayOfWeekName, $o1->nameCalendar, $o1->nameCalendarNative, $o1->nameDays, $o1->nameDaysAbbreviated, $o1->nameDaysShortest, $o1->nameMonths, $o1->nameMonthsAbbreviated, $o1->nameMonthGenitives, $o1->nameMonthGenitivesAbbreviated, $o1->patternDateLong, $o1->patternDateShort, $o1->patternDateTimeFull, $o1->patternDateTimeSortable, $o1->patternMonthDay, $o1->patternRfc1123, $o1->patternTimeLong, $o1->patternTimeShort, $o1->patternUniversalSortable, $o1->patternYearMonth, $o1->separatorDate, $o1->separatorTime);
					unset($o1);
				}
				$tmp2 = $o->ietf;
				$tmp3 = $o->isNeutral;
				$tmp4 = $o->iso2;
				$tmp5 = $o->iso3;
				$tmp6 = $o->isRightToLeft;
				$tmp7 = $o->lcid;
				$tmp8 = $o->nameCalendar;
				$tmp9 = $o->nameEnglish;
				$tmp10 = $o->nameNative;
				$tmp11 = $o->nameRegionEnglish;
				$tmp12 = $o->nameRegionNative;
				$tmp13 = null;
				if(null === _hx_field($o, "number")) {
					$tmp13 = null;
				} else {
					$o2 = $o->number;
					$tmp13 = new thx_culture_NumberFormatInfo($o2->decimalDigitsCurrency, $o2->decimalDigitsNumber, $o2->decimalDigitsPercent, $o2->groupSizesCurrency, $o2->groupSizesNumber, $o2->groupSizesPercent, $o2->patternNegativeCurrency, $o2->patternNegativeNumber, $o2->patternNegativePercent, $o2->patternPositiveCurrency, $o2->patternPositivePercent, $o2->separatorDecimalCurrency, $o2->separatorDecimalNumber, $o2->separatorDecimalPercent, $o2->separatorGroupCurrency, $o2->separatorGroupNumber, $o2->separatorGroupPercent, $o2->signNegative, $o2->signPositive, $o2->symbolCurrency, $o2->symbolNaN, $o2->symbolNegativeInfinity, $o2->symbolPercent, $o2->symbolPermille, $o2->symbolPositiveInfinity);
					unset($o2);
				}
				$tmp14 = new thx_culture_Culture($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5, $tmp6, $tmp7, $tmp8, $tmp9, $tmp10, $tmp11, $tmp12, $tmp13, $o->separatorList, $o->win3);
				thx_culture_Culture::register($tmp14);
				$o3 = _hx_anonymous(array("nameRegionNative" => null, "separatorList" => ",", "nameNative" => "English", "number" => null, "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => true, "nameEnglish" => "English", "dateTime" => null, "win3" => "ENU", "nameRegionEnglish" => null, "lcid" => 9, "iso3" => "eng", "iso2" => "en", "ietf" => "en", "code" => "en"));
				$tmp15 = $o3->code;
				$tmp16 = null;
				if(null === _hx_field($o3, "dateTime")) {
					$tmp16 = null;
				} else {
					$o4 = $o3->dateTime;
					$tmp16 = new thx_culture_DateFormatInfo($o4->calendarWeekRuleIndex, $o4->calendarWeekRuleName, $o4->designatorAm, $o4->designatorPm, $o4->firstDayOfWeekIndex, $o4->firstDayOfWeekName, $o4->nameCalendar, $o4->nameCalendarNative, $o4->nameDays, $o4->nameDaysAbbreviated, $o4->nameDaysShortest, $o4->nameMonths, $o4->nameMonthsAbbreviated, $o4->nameMonthGenitives, $o4->nameMonthGenitivesAbbreviated, $o4->patternDateLong, $o4->patternDateShort, $o4->patternDateTimeFull, $o4->patternDateTimeSortable, $o4->patternMonthDay, $o4->patternRfc1123, $o4->patternTimeLong, $o4->patternTimeShort, $o4->patternUniversalSortable, $o4->patternYearMonth, $o4->separatorDate, $o4->separatorTime);
					unset($o4);
				}
				$tmp17 = $o3->ietf;
				$tmp18 = $o3->isNeutral;
				$tmp19 = $o3->iso2;
				$tmp20 = $o3->iso3;
				$tmp21 = $o3->isRightToLeft;
				$tmp22 = $o3->lcid;
				$tmp23 = $o3->nameCalendar;
				$tmp24 = $o3->nameEnglish;
				$tmp25 = $o3->nameNative;
				$tmp26 = $o3->nameRegionEnglish;
				$tmp27 = $o3->nameRegionNative;
				$tmp28 = null;
				if(null === _hx_field($o3, "number")) {
					$tmp28 = null;
				} else {
					$o5 = $o3->number;
					$tmp28 = new thx_culture_NumberFormatInfo($o5->decimalDigitsCurrency, $o5->decimalDigitsNumber, $o5->decimalDigitsPercent, $o5->groupSizesCurrency, $o5->groupSizesNumber, $o5->groupSizesPercent, $o5->patternNegativeCurrency, $o5->patternNegativeNumber, $o5->patternNegativePercent, $o5->patternPositiveCurrency, $o5->patternPositivePercent, $o5->separatorDecimalCurrency, $o5->separatorDecimalNumber, $o5->separatorDecimalPercent, $o5->separatorGroupCurrency, $o5->separatorGroupNumber, $o5->separatorGroupPercent, $o5->signNegative, $o5->signPositive, $o5->symbolCurrency, $o5->symbolNaN, $o5->symbolNegativeInfinity, $o5->symbolPercent, $o5->symbolPermille, $o5->symbolPositiveInfinity);
					unset($o5);
				}
				$tmp29 = new thx_culture_Culture($tmp15, $tmp16, $tmp17, $tmp18, $tmp19, $tmp20, $tmp21, $tmp22, $tmp23, $tmp24, $tmp25, $tmp26, $tmp27, $tmp28, $o3->separatorList, $o3->win3);
				thx_culture_Culture::register($tmp29);
				$o6 = _hx_anonymous(array("nameRegionNative" => null, "separatorList" => ";", "nameNative" => "français", "number" => null, "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => true, "nameEnglish" => "French", "dateTime" => null, "win3" => "FRA", "nameRegionEnglish" => null, "lcid" => 12, "iso3" => "fra", "iso2" => "fr", "ietf" => "fr", "code" => "fr"));
				$tmp30 = $o6->code;
				$tmp31 = null;
				if(null === _hx_field($o6, "dateTime")) {
					$tmp31 = null;
				} else {
					$o7 = $o6->dateTime;
					$tmp31 = new thx_culture_DateFormatInfo($o7->calendarWeekRuleIndex, $o7->calendarWeekRuleName, $o7->designatorAm, $o7->designatorPm, $o7->firstDayOfWeekIndex, $o7->firstDayOfWeekName, $o7->nameCalendar, $o7->nameCalendarNative, $o7->nameDays, $o7->nameDaysAbbreviated, $o7->nameDaysShortest, $o7->nameMonths, $o7->nameMonthsAbbreviated, $o7->nameMonthGenitives, $o7->nameMonthGenitivesAbbreviated, $o7->patternDateLong, $o7->patternDateShort, $o7->patternDateTimeFull, $o7->patternDateTimeSortable, $o7->patternMonthDay, $o7->patternRfc1123, $o7->patternTimeLong, $o7->patternTimeShort, $o7->patternUniversalSortable, $o7->patternYearMonth, $o7->separatorDate, $o7->separatorTime);
					unset($o7);
				}
				$tmp32 = $o6->ietf;
				$tmp33 = $o6->isNeutral;
				$tmp34 = $o6->iso2;
				$tmp35 = $o6->iso3;
				$tmp36 = $o6->isRightToLeft;
				$tmp37 = $o6->lcid;
				$tmp38 = $o6->nameCalendar;
				$tmp39 = $o6->nameEnglish;
				$tmp40 = $o6->nameNative;
				$tmp41 = $o6->nameRegionEnglish;
				$tmp42 = $o6->nameRegionNative;
				$tmp43 = null;
				if(null === _hx_field($o6, "number")) {
					$tmp43 = null;
				} else {
					$o8 = $o6->number;
					$tmp43 = new thx_culture_NumberFormatInfo($o8->decimalDigitsCurrency, $o8->decimalDigitsNumber, $o8->decimalDigitsPercent, $o8->groupSizesCurrency, $o8->groupSizesNumber, $o8->groupSizesPercent, $o8->patternNegativeCurrency, $o8->patternNegativeNumber, $o8->patternNegativePercent, $o8->patternPositiveCurrency, $o8->patternPositivePercent, $o8->separatorDecimalCurrency, $o8->separatorDecimalNumber, $o8->separatorDecimalPercent, $o8->separatorGroupCurrency, $o8->separatorGroupNumber, $o8->separatorGroupPercent, $o8->signNegative, $o8->signPositive, $o8->symbolCurrency, $o8->symbolNaN, $o8->symbolNegativeInfinity, $o8->symbolPercent, $o8->symbolPermille, $o8->symbolPositiveInfinity);
					unset($o8);
				}
				$tmp44 = new thx_culture_Culture($tmp30, $tmp31, $tmp32, $tmp33, $tmp34, $tmp35, $tmp36, $tmp37, $tmp38, $tmp39, $tmp40, $tmp41, $tmp42, $tmp43, $o6->separatorList, $o6->win3);
				thx_culture_Culture::register($tmp44);
				$o9 = _hx_anonymous(array("nameRegionNative" => "Italia", "separatorList" => ";", "nameNative" => "italiano", "number" => _hx_anonymous(array("patternPositiveCurrency" => 2, "patternPositivePercent" => 1, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ",", "separatorGroupNumber" => ".", "signPositive" => "+", "symbolPositiveInfinity" => "+Infinito", "patternNegativeCurrency" => 9, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => ".", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non un numero reale", "separatorGroupPercent" => ".", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinito", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Italian", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dom", "lun", "mar", "mer", "gio", "ven", "sab"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("do", "lu", "ma", "me", "gi", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstFourDayWeek", "nameCalendarNative" => "calendario gregoriano", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 2, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))))), "win3" => "ITA", "nameRegionEnglish" => "Italy", "lcid" => 1040, "iso3" => "ita", "iso2" => "it", "ietf" => "it-IT", "code" => "it-IT"));
				$tmp45 = $o9->code;
				$tmp46 = null;
				if(null === _hx_field($o9, "dateTime")) {
					$tmp46 = null;
				} else {
					$o10 = $o9->dateTime;
					$tmp46 = new thx_culture_DateFormatInfo($o10->calendarWeekRuleIndex, $o10->calendarWeekRuleName, $o10->designatorAm, $o10->designatorPm, $o10->firstDayOfWeekIndex, $o10->firstDayOfWeekName, $o10->nameCalendar, $o10->nameCalendarNative, $o10->nameDays, $o10->nameDaysAbbreviated, $o10->nameDaysShortest, $o10->nameMonths, $o10->nameMonthsAbbreviated, $o10->nameMonthGenitives, $o10->nameMonthGenitivesAbbreviated, $o10->patternDateLong, $o10->patternDateShort, $o10->patternDateTimeFull, $o10->patternDateTimeSortable, $o10->patternMonthDay, $o10->patternRfc1123, $o10->patternTimeLong, $o10->patternTimeShort, $o10->patternUniversalSortable, $o10->patternYearMonth, $o10->separatorDate, $o10->separatorTime);
					unset($o10);
				}
				$tmp47 = $o9->ietf;
				$tmp48 = $o9->isNeutral;
				$tmp49 = $o9->iso2;
				$tmp50 = $o9->iso3;
				$tmp51 = $o9->isRightToLeft;
				$tmp52 = $o9->lcid;
				$tmp53 = $o9->nameCalendar;
				$tmp54 = $o9->nameEnglish;
				$tmp55 = $o9->nameNative;
				$tmp56 = $o9->nameRegionEnglish;
				$tmp57 = $o9->nameRegionNative;
				$tmp58 = null;
				if(null === _hx_field($o9, "number")) {
					$tmp58 = null;
				} else {
					$o11 = $o9->number;
					$tmp58 = new thx_culture_NumberFormatInfo($o11->decimalDigitsCurrency, $o11->decimalDigitsNumber, $o11->decimalDigitsPercent, $o11->groupSizesCurrency, $o11->groupSizesNumber, $o11->groupSizesPercent, $o11->patternNegativeCurrency, $o11->patternNegativeNumber, $o11->patternNegativePercent, $o11->patternPositiveCurrency, $o11->patternPositivePercent, $o11->separatorDecimalCurrency, $o11->separatorDecimalNumber, $o11->separatorDecimalPercent, $o11->separatorGroupCurrency, $o11->separatorGroupNumber, $o11->separatorGroupPercent, $o11->signNegative, $o11->signPositive, $o11->symbolCurrency, $o11->symbolNaN, $o11->symbolNegativeInfinity, $o11->symbolPercent, $o11->symbolPermille, $o11->symbolPositiveInfinity);
					unset($o11);
				}
				$tmp59 = new thx_culture_Culture($tmp45, $tmp46, $tmp47, $tmp48, $tmp49, $tmp50, $tmp51, $tmp52, $tmp53, $tmp54, $tmp55, $tmp56, $tmp57, $tmp58, $o9->separatorList, $o9->win3);
				thx_culture_Culture::register($tmp59);
				$o12 = _hx_anonymous(array("nameRegionNative" => "United Kingdom", "separatorList" => ",", "nameNative" => "English", "number" => _hx_anonymous(array("patternPositiveCurrency" => 0, "patternPositivePercent" => 0, "symbolCurrency" => "£", "signNegative" => "-", "patternNegativePercent" => 0, "separatorDecimalPercent" => ".", "separatorGroupNumber" => ",", "signPositive" => "+", "symbolPositiveInfinity" => "Infinity", "patternNegativeCurrency" => 1, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ".", "separatorGroupCurrency" => ",", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ".", "symbolNaN" => "NaN", "separatorGroupPercent" => ",", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinity", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "English", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))), "designatorPm" => "PM", "designatorAm" => "AM", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dd MMMM yyyy", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "Gregorian Calendar", "patternDateTimeFull" => "dd MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))))), "win3" => "ENG", "nameRegionEnglish" => "United Kingdom", "lcid" => 2057, "iso3" => "eng", "iso2" => "en", "ietf" => "en-GB", "code" => "en-GB"));
				$tmp60 = $o12->code;
				$tmp61 = null;
				if(null === _hx_field($o12, "dateTime")) {
					$tmp61 = null;
				} else {
					$o13 = $o12->dateTime;
					$tmp61 = new thx_culture_DateFormatInfo($o13->calendarWeekRuleIndex, $o13->calendarWeekRuleName, $o13->designatorAm, $o13->designatorPm, $o13->firstDayOfWeekIndex, $o13->firstDayOfWeekName, $o13->nameCalendar, $o13->nameCalendarNative, $o13->nameDays, $o13->nameDaysAbbreviated, $o13->nameDaysShortest, $o13->nameMonths, $o13->nameMonthsAbbreviated, $o13->nameMonthGenitives, $o13->nameMonthGenitivesAbbreviated, $o13->patternDateLong, $o13->patternDateShort, $o13->patternDateTimeFull, $o13->patternDateTimeSortable, $o13->patternMonthDay, $o13->patternRfc1123, $o13->patternTimeLong, $o13->patternTimeShort, $o13->patternUniversalSortable, $o13->patternYearMonth, $o13->separatorDate, $o13->separatorTime);
					unset($o13);
				}
				$tmp62 = $o12->ietf;
				$tmp63 = $o12->isNeutral;
				$tmp64 = $o12->iso2;
				$tmp65 = $o12->iso3;
				$tmp66 = $o12->isRightToLeft;
				$tmp67 = $o12->lcid;
				$tmp68 = $o12->nameCalendar;
				$tmp69 = $o12->nameEnglish;
				$tmp70 = $o12->nameNative;
				$tmp71 = $o12->nameRegionEnglish;
				$tmp72 = $o12->nameRegionNative;
				$tmp73 = null;
				if(null === _hx_field($o12, "number")) {
					$tmp73 = null;
				} else {
					$o14 = $o12->number;
					$tmp73 = new thx_culture_NumberFormatInfo($o14->decimalDigitsCurrency, $o14->decimalDigitsNumber, $o14->decimalDigitsPercent, $o14->groupSizesCurrency, $o14->groupSizesNumber, $o14->groupSizesPercent, $o14->patternNegativeCurrency, $o14->patternNegativeNumber, $o14->patternNegativePercent, $o14->patternPositiveCurrency, $o14->patternPositivePercent, $o14->separatorDecimalCurrency, $o14->separatorDecimalNumber, $o14->separatorDecimalPercent, $o14->separatorGroupCurrency, $o14->separatorGroupNumber, $o14->separatorGroupPercent, $o14->signNegative, $o14->signPositive, $o14->symbolCurrency, $o14->symbolNaN, $o14->symbolNegativeInfinity, $o14->symbolPercent, $o14->symbolPermille, $o14->symbolPositiveInfinity);
					unset($o14);
				}
				$tmp74 = new thx_culture_Culture($tmp60, $tmp61, $tmp62, $tmp63, $tmp64, $tmp65, $tmp66, $tmp67, $tmp68, $tmp69, $tmp70, $tmp71, $tmp72, $tmp73, $o12->separatorList, $o12->win3);
				thx_culture_Culture::register($tmp74);
				$o15 = _hx_anonymous(array("nameRegionNative" => "France", "separatorList" => ";", "nameNative" => "français", "number" => _hx_anonymous(array("patternPositiveCurrency" => 3, "patternPositivePercent" => 0, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 0, "separatorDecimalPercent" => ",", "separatorGroupNumber" => " ", "signPositive" => "+", "symbolPositiveInfinity" => "+Infini", "patternNegativeCurrency" => 8, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => " ", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non Numérique", "separatorGroupPercent" => " ", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infini", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "French", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"))), "patternMonthDay" => "d MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("di", "lu", "ma", "me", "je", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "calendrier grégorien", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""))))), "win3" => "FRA", "nameRegionEnglish" => "France", "lcid" => 1036, "iso3" => "fra", "iso2" => "fr", "ietf" => "fr-FR", "code" => "fr-FR"));
				$tmp75 = $o15->code;
				$tmp76 = null;
				if(null === _hx_field($o15, "dateTime")) {
					$tmp76 = null;
				} else {
					$o16 = $o15->dateTime;
					$tmp76 = new thx_culture_DateFormatInfo($o16->calendarWeekRuleIndex, $o16->calendarWeekRuleName, $o16->designatorAm, $o16->designatorPm, $o16->firstDayOfWeekIndex, $o16->firstDayOfWeekName, $o16->nameCalendar, $o16->nameCalendarNative, $o16->nameDays, $o16->nameDaysAbbreviated, $o16->nameDaysShortest, $o16->nameMonths, $o16->nameMonthsAbbreviated, $o16->nameMonthGenitives, $o16->nameMonthGenitivesAbbreviated, $o16->patternDateLong, $o16->patternDateShort, $o16->patternDateTimeFull, $o16->patternDateTimeSortable, $o16->patternMonthDay, $o16->patternRfc1123, $o16->patternTimeLong, $o16->patternTimeShort, $o16->patternUniversalSortable, $o16->patternYearMonth, $o16->separatorDate, $o16->separatorTime);
					unset($o16);
				}
				$tmp77 = $o15->ietf;
				$tmp78 = $o15->isNeutral;
				$tmp79 = $o15->iso2;
				$tmp80 = $o15->iso3;
				$tmp81 = $o15->isRightToLeft;
				$tmp82 = $o15->lcid;
				$tmp83 = $o15->nameCalendar;
				$tmp84 = $o15->nameEnglish;
				$tmp85 = $o15->nameNative;
				$tmp86 = $o15->nameRegionEnglish;
				$tmp87 = $o15->nameRegionNative;
				$tmp88 = null;
				if(null === _hx_field($o15, "number")) {
					$tmp88 = null;
				} else {
					$o17 = $o15->number;
					$tmp88 = new thx_culture_NumberFormatInfo($o17->decimalDigitsCurrency, $o17->decimalDigitsNumber, $o17->decimalDigitsPercent, $o17->groupSizesCurrency, $o17->groupSizesNumber, $o17->groupSizesPercent, $o17->patternNegativeCurrency, $o17->patternNegativeNumber, $o17->patternNegativePercent, $o17->patternPositiveCurrency, $o17->patternPositivePercent, $o17->separatorDecimalCurrency, $o17->separatorDecimalNumber, $o17->separatorDecimalPercent, $o17->separatorGroupCurrency, $o17->separatorGroupNumber, $o17->separatorGroupPercent, $o17->signNegative, $o17->signPositive, $o17->symbolCurrency, $o17->symbolNaN, $o17->symbolNegativeInfinity, $o17->symbolPercent, $o17->symbolPermille, $o17->symbolPositiveInfinity);
					unset($o17);
				}
				$tmp89 = new thx_culture_Culture($tmp75, $tmp76, $tmp77, $tmp78, $tmp79, $tmp80, $tmp81, $tmp82, $tmp83, $tmp84, $tmp85, $tmp86, $tmp87, $tmp88, $o15->separatorList, $o15->win3);
				thx_culture_Culture::register($tmp89);
				unset($tmp9,$tmp89,$tmp88,$tmp87,$tmp86,$tmp85,$tmp84,$tmp83,$tmp82,$tmp81,$tmp80,$tmp8,$tmp79,$tmp78,$tmp77,$tmp76,$tmp75,$tmp74,$tmp73,$tmp72,$tmp71,$tmp70,$tmp7,$tmp69,$tmp68,$tmp67,$tmp66,$tmp65,$tmp64,$tmp63,$tmp62,$tmp61,$tmp60,$tmp6,$tmp59,$tmp58,$tmp57,$tmp56,$tmp55,$tmp54,$tmp53,$tmp52,$tmp51,$tmp50,$tmp5,$tmp49,$tmp48,$tmp47,$tmp46,$tmp45,$tmp44,$tmp43,$tmp42,$tmp41,$tmp40,$tmp4,$tmp39,$tmp38,$tmp37,$tmp36,$tmp35,$tmp34,$tmp33,$tmp32,$tmp31,$tmp30,$tmp3,$tmp29,$tmp28,$tmp27,$tmp26,$tmp25,$tmp24,$tmp23,$tmp22,$tmp21,$tmp20,$tmp2,$tmp19,$tmp18,$tmp17,$tmp16,$tmp15,$tmp14,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp,$o9,$o6,$o3,$o15,$o12,$o);
			}
			$tmp90 = thx_culture_Culture::getByIso2("fr");
			utest_Assert::notNull($tmp90, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 33, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbedMany")));
			$tmp91 = thx_culture_Culture::getByIso3("fra");
			utest_Assert::notNull($tmp91, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 34, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbedMany")));
			$tmp92 = thx_culture_Culture::getByCode("fr-fr");
			utest_Assert::notNull($tmp92, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 35, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbedMany")));
			unset($tmp92,$tmp91,$tmp90);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.culture.TestEmbed'; }
}
