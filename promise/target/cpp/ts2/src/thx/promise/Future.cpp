// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Nil
#include <thx/Nil.h>
#endif
#ifndef INCLUDED_thx_Options
#include <thx/Options.h>
#endif
#ifndef INCLUDED_thx_promise_Future
#include <thx/promise/Future.h>
#endif
#ifndef INCLUDED_thx_promise__Promise_Promise_Impl_
#include <thx/promise/_Promise/Promise_Impl_.h>
#endif

namespace thx{
namespace promise{

void Future_obj::__construct(){
            	HX_STACK_FRAME("thx.promise.Future","new",0x3cc03872,"thx.promise.Future.new","thx/promise/Future.hx",64,0xf68a81fc)
            	HX_STACK_THIS(this)
HXLINE(  65)		this->handlers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  66)		this->state = ::haxe::ds::Option_obj::None_dyn();
            	}

Dynamic Future_obj::__CreateEmpty() { return new Future_obj; }

hx::ObjectPtr< Future_obj > Future_obj::__new()
{
	hx::ObjectPtr< Future_obj > _hx_result = new Future_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Future_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Future_obj > _hx_result = new Future_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool Future_obj::hasValue(){
            	HX_STACK_FRAME("thx.promise.Future","hasValue",0x4a17e065,"thx.promise.Future.hasValue","thx/promise/Future.hx",79,0xf68a81fc)
            	HX_STACK_THIS(this)
HXLINE(  79)		return ::thx::Options_obj::toBool(this->state);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Future_obj,hasValue,return )

 ::thx::promise::Future Future_obj::map( ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::thx::promise::Future,_gthis, ::Dynamic,handler) HXARGC(1)
            		void _hx_run( ::Dynamic callback){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler, ::Dynamic,callback) HXARGC(1)
            			void _hx_run( ::Dynamic v){
            				HX_STACK_FRAME("thx.promise.Future","map",0x3cbf72ae,"thx.promise.Future.map","thx/promise/Future.hx",83,0xf68a81fc)
            				HX_STACK_ARG(v,"v")
HXLINE(  83)				 ::Dynamic _hx_tmp = handler(v);
HXDLIN(  83)				callback(_hx_tmp);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_FRAME("thx.promise.Future","map",0x3cbf72ae,"thx.promise.Future.map","thx/promise/Future.hx",83,0xf68a81fc)
            			HX_STACK_ARG(callback,"callback")
HXLINE(  83)			_gthis->then( ::Dynamic(new _hx_Closure_0(handler,callback)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.Future","map",0x3cbf72ae,"thx.promise.Future.map","thx/promise/Future.hx",81,0xf68a81fc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(handler,"handler")
HXLINE(  81)		HX_VARI(  ::thx::promise::Future,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  82)		return ::thx::promise::Future_obj::create( ::Dynamic(new _hx_Closure_1(_gthis,handler)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,map,return )

 ::thx::promise::Future Future_obj::mapAsync( ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::thx::promise::Future,_gthis, ::Dynamic,handler) HXARGC(1)
            		void _hx_run( ::Dynamic callback){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler, ::Dynamic,callback) HXARGC(1)
            			void _hx_run( ::Dynamic result){
            				HX_STACK_FRAME("thx.promise.Future","mapAsync",0x298785ae,"thx.promise.Future.mapAsync","thx/promise/Future.hx",88,0xf68a81fc)
            				HX_STACK_ARG(result,"result")
HXLINE(  88)				handler(result,callback);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_FRAME("thx.promise.Future","mapAsync",0x298785ae,"thx.promise.Future.mapAsync","thx/promise/Future.hx",87,0xf68a81fc)
            			HX_STACK_ARG(callback,"callback")
HXLINE(  87)			_gthis->then( ::Dynamic(new _hx_Closure_0(handler,callback)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.Future","mapAsync",0x298785ae,"thx.promise.Future.mapAsync","thx/promise/Future.hx",85,0xf68a81fc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(handler,"handler")
HXLINE(  85)		HX_VARI(  ::thx::promise::Future,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  86)		return ::thx::promise::Future_obj::create( ::Dynamic(new _hx_Closure_1(_gthis,handler)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,mapAsync,return )

 ::thx::promise::Future Future_obj::mapPromise( ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::thx::promise::Future,_gthis, ::Dynamic,handler) HXARGC(2)
            		void _hx_run( ::Dynamic resolve, ::Dynamic reject){
            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::Dynamic,resolve, ::Dynamic,reject, ::Dynamic,handler) HXARGC(1)
            			void _hx_run( ::Dynamic result){
            				HX_STACK_FRAME("thx.promise.Future","mapPromise",0x8577548d,"thx.promise.Future.mapPromise","thx/promise/Future.hx",93,0xf68a81fc)
            				HX_STACK_ARG(result,"result")
HXLINE(  93)				 ::thx::promise::Future _hx_tmp = ( ( ::thx::promise::Future)(handler(result)) );
HXDLIN(  93)				 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp,resolve);
HXDLIN(  93)				::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp1,reject);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_FRAME("thx.promise.Future","mapPromise",0x8577548d,"thx.promise.Future.mapPromise","thx/promise/Future.hx",92,0xf68a81fc)
            			HX_STACK_ARG(resolve,"resolve")
            			HX_STACK_ARG(reject,"reject")
HXLINE(  92)			_gthis->then( ::Dynamic(new _hx_Closure_0(resolve,reject,handler)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACK_FRAME("thx.promise.Future","mapPromise",0x8577548d,"thx.promise.Future.mapPromise","thx/promise/Future.hx",90,0xf68a81fc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(handler,"handler")
HXLINE(  90)		HX_VARI(  ::thx::promise::Future,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  91)		return ::thx::promise::_Promise::Promise_Impl__obj::create( ::Dynamic(new _hx_Closure_1(_gthis,handler)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,mapPromise,return )

 ::thx::promise::Future Future_obj::nil(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::hx::EnumBase _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.promise.Future","nil",0x3cc03be3,"thx.promise.Future.nil","thx/promise/Future.hx",98,0xf68a81fc)
            			HX_STACK_ARG(_,"_")
HXLINE(  98)			return ::thx::Nil_obj::nil_dyn();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.promise.Future","nil",0x3cc03be3,"thx.promise.Future.nil","thx/promise/Future.hx",98,0xf68a81fc)
            	HX_STACK_THIS(this)
HXLINE(  98)		return this->map( ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Future_obj,nil,return )

 ::thx::promise::Future Future_obj::mapFuture( ::Dynamic handler){
            	HX_STACK_FRAME("thx.promise.Future","mapFuture",0x505ab591,"thx.promise.Future.mapFuture","thx/promise/Future.hx",102,0xf68a81fc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(handler,"handler")
HXLINE( 102)		return this->flatMap(handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,mapFuture,return )

 ::thx::promise::Future Future_obj::flatMap( ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::thx::promise::Future,_gthis, ::Dynamic,handler) HXARGC(1)
            		void _hx_run( ::Dynamic callback){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler, ::Dynamic,callback) HXARGC(1)
            			void _hx_run( ::Dynamic v){
            				HX_STACK_FRAME("thx.promise.Future","flatMap",0xd2d4e975,"thx.promise.Future.flatMap","thx/promise/Future.hx",106,0xf68a81fc)
            				HX_STACK_ARG(v,"v")
HXLINE( 106)				( ( ::thx::promise::Future)(handler(v)) )->then(callback);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_FRAME("thx.promise.Future","flatMap",0xd2d4e975,"thx.promise.Future.flatMap","thx/promise/Future.hx",106,0xf68a81fc)
            			HX_STACK_ARG(callback,"callback")
HXLINE( 106)			_gthis->then( ::Dynamic(new _hx_Closure_0(handler,callback)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.Future","flatMap",0xd2d4e975,"thx.promise.Future.flatMap","thx/promise/Future.hx",104,0xf68a81fc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(handler,"handler")
HXLINE( 104)		HX_VARI(  ::thx::promise::Future,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 105)		return ::thx::promise::Future_obj::create( ::Dynamic(new _hx_Closure_1(_gthis,handler)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,flatMap,return )

 ::thx::promise::Future Future_obj::then( ::Dynamic handler){
            	HX_STACK_FRAME("thx.promise.Future","then",0xef6aaa8b,"thx.promise.Future.then","thx/promise/Future.hx",108,0xf68a81fc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(handler,"handler")
HXLINE( 109)		this->handlers->push(handler);
HXLINE( 110)		this->update();
HXLINE( 111)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,then,return )

::String Future_obj::toString(){
            	HX_STACK_FRAME("thx.promise.Future","toString",0xc475e75a,"thx.promise.Future.toString","thx/promise/Future.hx",114,0xf68a81fc)
            	HX_STACK_THIS(this)
HXLINE( 114)		return HX_("Future",63,0c,e3,a7);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Future_obj,toString,return )

 ::thx::promise::Future Future_obj::setState( ::Dynamic newstate){
            	HX_STACK_FRAME("thx.promise.Future","setState",0x1e46f5bd,"thx.promise.Future.setState","thx/promise/Future.hx",116,0xf68a81fc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newstate,"newstate")
HXLINE( 117)		{
HXLINE( 117)			HX_VARI( ::hx::EnumBase,_g) = this->state;
HXDLIN( 117)			Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 117)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 121)					::String _hx_tmp1 = ::Std_obj::string(_g->_hx_getObject(0));
HXDLIN( 121)					::String _hx_tmp2 = ((HX_("future was already \"",46,a7,18,6f) + _hx_tmp1) + HX_("\", can't apply the new state \"",79,24,f7,c2));
HXDLIN( 121)					::String _hx_tmp3 = ::Std_obj::string(newstate);
HXDLIN( 121)					HX_STACK_DO_THROW( ::thx::Error_obj::__new(((_hx_tmp2 + _hx_tmp3) + HX_("\"",22,00,00,00)),null(),hx::SourceInfo(HX_("Future.hx",3b,d6,1f,58),121,HX_("thx.promise.Future",80,d7,02,9b),HX_("setState",0f,df,3f,92))));
            				}
            				break;
            				case (int)1: {
HXLINE( 119)					this->state = ::haxe::ds::Option_obj::Some(newstate);
            				}
            				break;
            			}
            		}
HXLINE( 123)		this->update();
HXLINE( 124)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,setState,return )

void Future_obj::update(){
            	HX_STACK_FRAME("thx.promise.Future","update",0xa02ff537,"thx.promise.Future.update","thx/promise/Future.hx",128,0xf68a81fc)
            	HX_STACK_THIS(this)
HXLINE( 128)		HX_VARI( ::hx::EnumBase,_g) = this->state;
HXDLIN( 128)		Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 128)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 130)				HX_VARI(  ::Dynamic,result) = _g->_hx_getObject(0);
HXDLIN( 130)				{
HXLINE( 131)					HX_VARI( Int,index) = (int)-1;
HXLINE( 132)					while(true){
HXLINE( 132)						Int _hx_tmp1 = ++index;
HXDLIN( 132)						if (!((_hx_tmp1 < this->handlers->length))) {
HXLINE( 132)							goto _hx_goto_0;
            						}
HXLINE( 134)						this->handlers->__get(index)(result);
            					}
            					_hx_goto_0:;
HXLINE( 136)					this->handlers = ::Array_obj< ::Dynamic>::__new(0);
            				}
            			}
            			break;
            			case (int)1: {
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Future_obj,update,(void))

 ::thx::promise::Future Future_obj::sequence(::Array< ::Dynamic> arr){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2,::Array< ::Dynamic>,arr) HXARGC(1)
            		void _hx_run( ::Dynamic callback){
            			HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1,::cpp::VirtualArray,acc,::Array< ::Dynamic>,arr,::Array< ::Dynamic>,poll, ::Dynamic,callback) HXARGC(1)
            			void _hx_run(Int index){
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,acc,Int,index,::Array< ::Dynamic>,poll) HXARGC(1)
            				void _hx_run( ::Dynamic v){
            					HX_STACK_FRAME("thx.promise.Future","sequence",0x74f434ef,"thx.promise.Future.sequence","thx/promise/Future.hx",18,0xf68a81fc)
            					HX_STACK_ARG(v,"v")
HXLINE(  19)					acc->set(index,v);
HXLINE(  20)					poll->__get((int)0)((index + (int)1));
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_STACK_FRAME("thx.promise.Future","sequence",0x74f434ef,"thx.promise.Future.sequence","thx/promise/Future.hx",14,0xf68a81fc)
            				HX_STACK_ARG(index,"index")
HXLINE(  15)				Bool _hx_tmp = (index == arr->length);
HXDLIN(  15)				if (_hx_tmp) {
HXLINE(  16)					callback(acc);
HXDLIN(  16)					return;
            				}
HXLINE(  17)				arr->__get(index).StaticCast<  ::thx::promise::Future >()->then( ::Dynamic(new _hx_Closure_0(acc,index,poll)));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_FRAME("thx.promise.Future","sequence",0x74f434ef,"thx.promise.Future.sequence","thx/promise/Future.hx",12,0xf68a81fc)
            			HX_STACK_ARG(callback,"callback")
HXLINE(  13)			HX_VARI( ::cpp::VirtualArray,acc) = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  14)			HX_VARI( ::Array< ::Dynamic>,poll) = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(  14)			poll[(int)0] =  ::Dynamic(new _hx_Closure_1(acc,arr,poll,callback));
HXLINE(  23)			poll->__get((int)0)((int)0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.Future","sequence",0x74f434ef,"thx.promise.Future.sequence","thx/promise/Future.hx",12,0xf68a81fc)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  12)		return ::thx::promise::Future_obj::create( ::Dynamic(new _hx_Closure_2(arr)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_obj,sequence,return )

 ::thx::promise::Future Future_obj::afterAll(::Array< ::Dynamic> arr){
            	HX_STACK_FRAME("thx.promise.Future","afterAll",0x9e1c1b13,"thx.promise.Future.afterAll","thx/promise/Future.hx",41,0xf68a81fc)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  41)		return ::thx::promise::Future_obj::sequence(arr)->nil();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_obj,afterAll,return )

 ::thx::promise::Future Future_obj::all(::Array< ::Dynamic> arr){
            	HX_STACK_FRAME("thx.promise.Future","all",0x3cb66133,"thx.promise.Future.all","thx/promise/Future.hx",46,0xf68a81fc)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  46)		return ::thx::promise::Future_obj::sequence(arr);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_obj,all,return )

 ::thx::promise::Future Future_obj::create( ::Dynamic handler){
            	HX_STACK_FRAME("thx.promise.Future","create",0x9539d62a,"thx.promise.Future.create","thx/promise/Future.hx",48,0xf68a81fc)
            	HX_STACK_ARG(handler,"handler")
HXLINE(  49)		HX_VARI(  ::thx::promise::Future,future) =  ::thx::promise::Future_obj::__new();
HXLINE(  50)		handler(future->setState_dyn());
HXLINE(  51)		return future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_obj,create,return )

 ::thx::promise::Future Future_obj::flatten( ::thx::promise::Future future){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::thx::promise::Future,future) HXARGC(1)
            		void _hx_run( ::Dynamic callback){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,callback) HXARGC(1)
            			void _hx_run( ::thx::promise::Future future1){
            				HX_STACK_FRAME("thx.promise.Future","flatten",0xd2f284d6,"thx.promise.Future.flatten","thx/promise/Future.hx",56,0xf68a81fc)
            				HX_STACK_ARG(future1,"future1")
HXLINE(  56)				future1->then(callback);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_FRAME("thx.promise.Future","flatten",0xd2f284d6,"thx.promise.Future.flatten","thx/promise/Future.hx",56,0xf68a81fc)
            			HX_STACK_ARG(callback,"callback")
HXLINE(  56)			future->then( ::Dynamic(new _hx_Closure_0(callback)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.Future","flatten",0xd2f284d6,"thx.promise.Future.flatten","thx/promise/Future.hx",55,0xf68a81fc)
            	HX_STACK_ARG(future,"future")
HXLINE(  55)		return ::thx::promise::Future_obj::create( ::Dynamic(new _hx_Closure_1(future)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_obj,flatten,return )

 ::thx::promise::Future Future_obj::value( ::Dynamic v){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,v) HXARGC(1)
            		void _hx_run( ::Dynamic callback){
            			HX_STACK_FRAME("thx.promise.Future","value",0xb01c9003,"thx.promise.Future.value","thx/promise/Future.hx",60,0xf68a81fc)
            			HX_STACK_ARG(callback,"callback")
HXLINE(  60)			callback(v);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.Future","value",0xb01c9003,"thx.promise.Future.value","thx/promise/Future.hx",60,0xf68a81fc)
            	HX_STACK_ARG(v,"v")
HXLINE(  60)		return ::thx::promise::Future_obj::create( ::Dynamic(new _hx_Closure_0(v)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_obj,value,return )


Future_obj::Future_obj()
{
}

void Future_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Future);
	HX_MARK_MEMBER_NAME(handlers,"handlers");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_END_CLASS();
}

void Future_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(handlers,"handlers");
	HX_VISIT_MEMBER_NAME(state,"state");
}

hx::Val Future_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map_dyn()); }
		if (HX_FIELD_EQ(inName,"nil") ) { return hx::Val( nil_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"then") ) { return hx::Val( then_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { return hx::Val( flatMap_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"handlers") ) { return hx::Val( handlers); }
		if (HX_FIELD_EQ(inName,"hasValue") ) { return hx::Val( hasValue_dyn()); }
		if (HX_FIELD_EQ(inName,"mapAsync") ) { return hx::Val( mapAsync_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		if (HX_FIELD_EQ(inName,"setState") ) { return hx::Val( setState_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mapFuture") ) { return hx::Val( mapFuture_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mapPromise") ) { return hx::Val( mapPromise_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Future_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { outValue = all_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { outValue = value_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatten") ) { outValue = flatten_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sequence") ) { outValue = sequence_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"afterAll") ) { outValue = afterAll_dyn(); return true; }
	}
	return false;
}

hx::Val Future_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"handlers") ) { handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Future_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("handlers","\x69","\x21","\x24","\xd5"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Future_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Future_obj,handlers),HX_HCSTRING("handlers","\x69","\x21","\x24","\xd5")},
	{hx::fsObject /*::haxe::ds::Option*/ ,(int)offsetof(Future_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Future_obj_sStaticStorageInfo = 0;
#endif

static ::String Future_obj_sMemberFields[] = {
	HX_HCSTRING("handlers","\x69","\x21","\x24","\xd5"),
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("hasValue","\xb7","\xc9","\x10","\xbe"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("mapAsync","\x00","\x6f","\x80","\x9d"),
	HX_HCSTRING("mapPromise","\x5f","\xb6","\x7a","\x98"),
	HX_HCSTRING("nil","\xd1","\xd3","\x53","\x00"),
	HX_HCSTRING("mapFuture","\xff","\xf3","\x2d","\x56"),
	HX_HCSTRING("flatMap","\x63","\x10","\xde","\xe6"),
	HX_HCSTRING("then","\xdd","\x02","\xfc","\x4c"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("setState","\x0f","\xdf","\x3f","\x92"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Future_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Future_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Future_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Future_obj::__mClass,"__mClass");
};

#endif

hx::Class Future_obj::__mClass;

static ::String Future_obj_sStaticFields[] = {
	HX_HCSTRING("sequence","\x41","\x1e","\xed","\xe8"),
	HX_HCSTRING("afterAll","\x65","\x04","\x15","\x12"),
	HX_HCSTRING("all","\x21","\xf9","\x49","\x00"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("flatten","\xc4","\xab","\xfb","\xe6"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	::String(null())
};

void Future_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.promise.Future","\x80","\xd7","\x02","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Future_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Future_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Future_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Future_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Future_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Future_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Future_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Future_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace promise
