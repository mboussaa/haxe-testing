// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_thx_promise_Future
#include <thx/promise/Future.h>
#endif
#ifndef INCLUDED_thx_promise_Futures
#include <thx/promise/Futures.h>
#endif

namespace thx{
namespace promise{

void Futures_obj::__construct() { }

Dynamic Futures_obj::__CreateEmpty() { return new Futures_obj; }

hx::ObjectPtr< Futures_obj > Futures_obj::__new()
{
	hx::ObjectPtr< Futures_obj > _hx_result = new Futures_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Futures_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Futures_obj > _hx_result = new Futures_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::thx::promise::Future Futures_obj::join( ::thx::promise::Future p1, ::thx::promise::Future p2){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::thx::promise::Future,p2, ::thx::promise::Future,p1) HXARGC(1)
            		void _hx_run( ::Dynamic callback){
            			HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,v1,::Array< Int >,counter,::cpp::VirtualArray,v2, ::Dynamic,callback) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("thx.promise.Futures","join",0xd7d7d945,"thx.promise.Futures.join","thx/promise/Future.hx",149,0xf68a81fc)
HXLINE( 150)				if ((counter->__get((int)0) < (int)2)) {
HXLINE( 151)					return;
            				}
HXLINE( 152)				callback( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("_0",f1,52,00,00),v1->__get((int)0))
            					->setFixed(1,HX_("_1",f2,52,00,00),v2->__get((int)0))));
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_1,::cpp::VirtualArray,v1,::Array< Int >,counter, ::Dynamic,complete) HXARGC(1)
            			void _hx_run( ::Dynamic v){
            				HX_STACK_FRAME("thx.promise.Futures","join",0xd7d7d945,"thx.promise.Futures.join","thx/promise/Future.hx",155,0xf68a81fc)
            				HX_STACK_ARG(v,"v")
HXLINE( 156)				counter[(int)0]++;
HXLINE( 157)				v1->set((int)0,v);
HXLINE( 158)				complete();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_2,::Array< Int >,counter, ::Dynamic,complete,::cpp::VirtualArray,v2) HXARGC(1)
            			void _hx_run( ::Dynamic v3){
            				HX_STACK_FRAME("thx.promise.Futures","join",0xd7d7d945,"thx.promise.Futures.join","thx/promise/Future.hx",161,0xf68a81fc)
            				HX_STACK_ARG(v3,"v3")
HXLINE( 162)				counter[(int)0]++;
HXLINE( 163)				v2->set((int)0,v3);
HXLINE( 164)				complete();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_FRAME("thx.promise.Futures","join",0xd7d7d945,"thx.promise.Futures.join","thx/promise/Future.hx",144,0xf68a81fc)
            			HX_STACK_ARG(callback,"callback")
HXLINE( 145)			HX_VARI( ::Array< Int >,counter) = ::Array_obj< Int >::__new(1)->init(0,(int)0);
HXDLIN( 145)			HX_VARI( ::cpp::VirtualArray,v1) = ::cpp::VirtualArray_obj::__new(1)->init(0,null());
HXDLIN( 145)			HX_VARI( ::cpp::VirtualArray,v2) = ::cpp::VirtualArray_obj::__new(1)->init(0,null());
HXLINE( 149)			HX_VARI(  ::Dynamic,complete) =  ::Dynamic(new _hx_Closure_0(v1,counter,v2,callback));
HXLINE( 155)			p1->then( ::Dynamic(new _hx_Closure_1(v1,counter,complete)));
HXLINE( 161)			p2->then( ::Dynamic(new _hx_Closure_2(counter,complete,v2)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.Futures","join",0xd7d7d945,"thx.promise.Futures.join","thx/promise/Future.hx",144,0xf68a81fc)
            	HX_STACK_ARG(p1,"p1")
            	HX_STACK_ARG(p2,"p2")
HXLINE( 144)		return ::thx::promise::Future_obj::create( ::Dynamic(new _hx_Closure_3(p2,p1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Futures_obj,join,return )

 ::thx::promise::Future Futures_obj::log( ::thx::promise::Future future,::String __o_prefix){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,prefix) HXARGC(1)
            		void _hx_run( ::Dynamic r){
            			HX_STACK_FRAME("thx.promise.Futures","log",0x7bced389,"thx.promise.Futures.log","thx/promise/Future.hx",171,0xf68a81fc)
            			HX_STACK_ARG(r,"r")
HXLINE( 171)			::String _hx_tmp = ((HX_("",00,00,00,00) + prefix) + HX_(" VALUE: ",17,64,8e,16));
HXDLIN( 171)			::String _hx_tmp1 = ::Std_obj::string(r);
HXDLIN( 171)			::haxe::Log_obj::trace((_hx_tmp + _hx_tmp1),hx::SourceInfo(HX_("Future.hx",3b,d6,1f,58),171,HX_("thx.promise.Futures",f3,b8,79,07),HX_("log",84,54,52,00)));
            		}
            		HX_END_LOCAL_FUNC1((void))

::String prefix = __o_prefix.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx.promise.Futures","log",0x7bced389,"thx.promise.Futures.log","thx/promise/Future.hx",170,0xf68a81fc)
            	HX_STACK_ARG(future,"future")
            	HX_STACK_ARG(prefix,"prefix")
HXLINE( 170)		return future->then( ::Dynamic(new _hx_Closure_0(prefix)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Futures_obj,log,return )


Futures_obj::Futures_obj()
{
}

bool Futures_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { outValue = log_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"join") ) { outValue = join_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Futures_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Futures_obj_sStaticStorageInfo = 0;
#endif

static void Futures_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Futures_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Futures_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Futures_obj::__mClass,"__mClass");
};

#endif

hx::Class Futures_obj::__mClass;

static ::String Futures_obj_sStaticFields[] = {
	HX_HCSTRING("join","\xea","\x33","\x65","\x46"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	::String(null())
};

void Futures_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.promise.Futures","\xf3","\xb8","\x79","\x07");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Futures_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Futures_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Futures_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Futures_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Futures_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Futures_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Futures_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace promise
