// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Nil
#include <thx/Nil.h>
#endif
#ifndef INCLUDED_thx__Tuple_Tuple2_Impl_
#include <thx/_Tuple/Tuple2_Impl_.h>
#endif
#ifndef INCLUDED_thx_promise_Future
#include <thx/promise/Future.h>
#endif
#ifndef INCLUDED_thx_promise_PromiseTuple2
#include <thx/promise/PromiseTuple2.h>
#endif
#ifndef INCLUDED_thx_promise_PromiseTuple3
#include <thx/promise/PromiseTuple3.h>
#endif
#ifndef INCLUDED_thx_promise_Promises
#include <thx/promise/Promises.h>
#endif
#ifndef INCLUDED_thx_promise_TestPromise
#include <thx/promise/TestPromise.h>
#endif
#ifndef INCLUDED_thx_promise__Promise_Promise_Impl_
#include <thx/promise/_Promise/Promise_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace promise{

void TestPromise_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.promise.TestPromise","new",0xdf0535fe,"thx.promise.TestPromise.new","thx/promise/TestPromise.hx",12,0x643e7bb4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  12)		this->x = i;
            	}

Dynamic TestPromise_obj::__CreateEmpty() { return new TestPromise_obj; }

hx::ObjectPtr< TestPromise_obj > TestPromise_obj::__new(Int i)
{
	hx::ObjectPtr< TestPromise_obj > _hx_result = new TestPromise_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestPromise_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestPromise_obj > _hx_result = new TestPromise_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestPromise_obj::testResolveBefore(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testResolveBefore",0x3a0ccef7,"thx.promise.TestPromise.testResolveBefore","thx/promise/TestPromise.hx",16,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE(  16)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  16)		HX_VARI( Int,_g) = this->x;
HXDLIN(  16)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run(Int v){
            				HX_STACK_FRAME("thx.promise.TestPromise","testResolveBefore",0x3a0ccef7,"thx.promise.TestPromise.testResolveBefore","thx/promise/TestPromise.hx",19,0x643e7bb4)
            				HX_STACK_ARG(v,"v")
HXLINE(  20)				::utest::Assert_obj::equals((int)1,v,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),20,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testResolveBefore",d9,10,48,2e)));
HXLINE(  21)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  16)			++_g1;
HXLINE(  17)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE(  18)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN(  18)			::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp, ::Dynamic(new _hx_Closure_0(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testResolveBefore,(void))

void TestPromise_obj::testRejectBefore(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testRejectBefore",0x2be32252,"thx.promise.TestPromise.testRejectBefore","thx/promise/TestPromise.hx",68,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE(  68)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  68)		HX_VARI( Int,_g) = this->x;
HXDLIN(  68)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::thx::Error,error, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error e){
            				HX_STACK_FRAME("thx.promise.TestPromise","testRejectBefore",0x2be32252,"thx.promise.TestPromise.testRejectBefore","thx/promise/TestPromise.hx",73,0x643e7bb4)
            				HX_STACK_ARG(e,"e")
HXLINE(  74)				::utest::Assert_obj::equals(error,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),74,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testRejectBefore",b0,32,56,9c)));
HXLINE(  75)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  68)			++_g1;
HXLINE(  69)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN(  69)			HX_VARI(  ::thx::Error,error) =  ::thx::Error_obj::__new(HX_("Nooooo!",e0,e9,54,40),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),70,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testRejectBefore",b0,32,56,9c)));
HXLINE(  72)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::error(error);
HXDLIN(  72)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp, ::Dynamic(new _hx_Closure_0(error,done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testRejectBefore,(void))

void TestPromise_obj::testMapSuccessWithValue(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithValue",0x06d5bf70,"thx.promise.TestPromise.testMapSuccessWithValue","thx/promise/TestPromise.hx",80,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE(  80)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  80)		HX_VARI( Int,_g) = this->x;
HXDLIN(  80)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			 ::thx::promise::Future _hx_run(Int v){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithValue",0x06d5bf70,"thx.promise.TestPromise.testMapSuccessWithValue","thx/promise/TestPromise.hx",83,0x643e7bb4)
            				HX_STACK_ARG(v,"v")
HXLINE(  83)				return ::thx::promise::_Promise::Promise_Impl__obj::value((v * (int)2));
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			 ::thx::promise::Future _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithValue",0x06d5bf70,"thx.promise.TestPromise.testMapSuccessWithValue","thx/promise/TestPromise.hx",82,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE(  82)				return ::thx::promise::_Promise::Promise_Impl__obj::error(err);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Dynamic,done) HXARGC(1)
            			void _hx_run(Int v1){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithValue",0x06d5bf70,"thx.promise.TestPromise.testMapSuccessWithValue","thx/promise/TestPromise.hx",84,0x643e7bb4)
            				HX_STACK_ARG(v1,"v1")
HXLINE(  85)				::utest::Assert_obj::equals((int)2,v1,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),85,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessWithValue",d2,96,6a,02)));
HXLINE(  86)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  80)			++_g1;
HXLINE(  81)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE(  82)			HX_VARI_NAME(  ::thx::promise::Future,this1,"this") = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN(  82)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::flatMapEither(this1, ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()));
HXDLIN(  82)			::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp, ::Dynamic(new _hx_Closure_2(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testMapSuccessWithValue,(void))

void TestPromise_obj::testMapSuccessWithFailure(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithFailure",0x5de6ee09,"thx.promise.TestPromise.testMapSuccessWithFailure","thx/promise/TestPromise.hx",91,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE(  91)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  91)		HX_VARI( Int,_g) = this->x;
HXDLIN(  91)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			 ::thx::promise::Future _hx_run(Int v){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithFailure",0x5de6ee09,"thx.promise.TestPromise.testMapSuccessWithFailure","thx/promise/TestPromise.hx",94,0x643e7bb4)
            				HX_STACK_ARG(v,"v")
HXLINE(  95)				::utest::Assert_obj::fail(HX_("should never touch this",00,16,03,7d),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),95,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessWithFailure",eb,e1,e9,09)));
HXLINE(  96)				return ::thx::promise::_Promise::Promise_Impl__obj::value((v * (int)2));
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			 ::thx::promise::Future _hx_run( ::thx::Error err1){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithFailure",0x5de6ee09,"thx.promise.TestPromise.testMapSuccessWithFailure","thx/promise/TestPromise.hx",94,0x643e7bb4)
            				HX_STACK_ARG(err1,"err1")
HXLINE(  94)				return ::thx::promise::_Promise::Promise_Impl__obj::error(err1);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::thx::Error,err, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error e){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithFailure",0x5de6ee09,"thx.promise.TestPromise.testMapSuccessWithFailure","thx/promise/TestPromise.hx",97,0x643e7bb4)
            				HX_STACK_ARG(e,"e")
HXLINE(  98)				::utest::Assert_obj::equals(err,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),98,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessWithFailure",eb,e1,e9,09)));
HXLINE(  99)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  91)			++_g1;
HXLINE(  92)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN(  92)			HX_VARI(  ::thx::Error,err) =  ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),93,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessWithFailure",eb,e1,e9,09)));
HXLINE(  94)			HX_VARI_NAME(  ::thx::promise::Future,this1,"this") = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXDLIN(  94)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::flatMapEither(this1, ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()));
HXDLIN(  94)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp, ::Dynamic(new _hx_Closure_2(err,done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testMapSuccessWithFailure,(void))

void TestPromise_obj::testAllSuccess(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testAllSuccess",0xe83eb4b6,"thx.promise.TestPromise.testAllSuccess","thx/promise/TestPromise.hx",104,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 104)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 104)		HX_VARI( Int,_g) = this->x;
HXDLIN( 104)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run(::Array< Int > arr){
            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            				Int _hx_run(Int acc,Int v){
            					HX_STACK_FRAME("thx.promise.TestPromise","testAllSuccess",0xe83eb4b6,"thx.promise.TestPromise.testAllSuccess","thx/promise/TestPromise.hx",110,0x643e7bb4)
            					HX_STACK_ARG(acc,"acc")
            					HX_STACK_ARG(v,"v")
HXLINE( 110)					return (acc + v);
            				}
            				HX_END_LOCAL_FUNC2(return)

            				HX_STACK_FRAME("thx.promise.TestPromise","testAllSuccess",0xe83eb4b6,"thx.promise.TestPromise.testAllSuccess","thx/promise/TestPromise.hx",109,0x643e7bb4)
            				HX_STACK_ARG(arr,"arr")
HXLINE( 110)				Int _hx_tmp3 = ( (Int)(::thx::Arrays_obj::reduce(arr, ::Dynamic(new _hx_Closure_0()),(int)0)) );
HXDLIN( 110)				::utest::Assert_obj::equals((int)3,_hx_tmp3,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),110,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllSuccess",94,51,ea,20)));
HXLINE( 111)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 104)			++_g1;
HXLINE( 105)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 107)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXLINE( 108)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value((int)2);
HXLINE( 106)			 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::sequence(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_hx_tmp1));
HXDLIN( 106)			::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp2, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAllSuccess,(void))

void TestPromise_obj::testAllFailure1(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure1",0xc6b45654,"thx.promise.TestPromise.testAllFailure1","thx/promise/TestPromise.hx",116,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 116)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 116)		HX_VARI( Int,_g) = this->x;
HXDLIN( 116)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run(::Array< Int > arr){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure1",0xc6b45654,"thx.promise.TestPromise.testAllFailure1","thx/promise/TestPromise.hx",124,0x643e7bb4)
            				HX_STACK_ARG(arr,"arr")
HXLINE( 124)				::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),124,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllFailure1",b6,fb,31,24)));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::thx::Error,err, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error e){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure1",0xc6b45654,"thx.promise.TestPromise.testAllFailure1","thx/promise/TestPromise.hx",126,0x643e7bb4)
            				HX_STACK_ARG(e,"e")
HXLINE( 127)				::utest::Assert_obj::equals(err,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),127,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllFailure1",b6,fb,31,24)));
HXLINE( 128)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 116)			++_g1;
HXLINE( 117)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN( 117)			HX_VARI(  ::thx::Error,err) =  ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),118,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllFailure1",b6,fb,31,24)));
HXLINE( 120)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXLINE( 121)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXLINE( 119)			 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::sequence(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_hx_tmp1));
HXDLIN( 119)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp2, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 119)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp3, ::Dynamic(new _hx_Closure_1(err,done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAllFailure1,(void))

void TestPromise_obj::testAllFailure2(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure2",0xc6b45655,"thx.promise.TestPromise.testAllFailure2","thx/promise/TestPromise.hx",133,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 133)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 133)		HX_VARI( Int,_g) = this->x;
HXDLIN( 133)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run(::Array< ::String > arr){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure2",0xc6b45655,"thx.promise.TestPromise.testAllFailure2","thx/promise/TestPromise.hx",137,0x643e7bb4)
            				HX_STACK_ARG(arr,"arr")
HXLINE( 137)				::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),137,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllFailure2",b7,fb,31,24)));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error e){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure2",0xc6b45655,"thx.promise.TestPromise.testAllFailure2","thx/promise/TestPromise.hx",139,0x643e7bb4)
            				HX_STACK_ARG(e,"e")
HXLINE( 140)				::utest::Assert_obj::pass(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),140,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllFailure2",b7,fb,31,24)));
HXLINE( 141)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 133)			++_g1;
HXLINE( 134)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 135)			 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 135)			 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 135)			 ::thx::promise::Future _hx_tmp2 = this->rej(null());
HXDLIN( 135)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::sequence(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2));
HXDLIN( 135)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 135)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAllFailure2,(void))

void TestPromise_obj::testAfterAllSuccess(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllSuccess",0x81213d4a,"thx.promise.TestPromise.testAfterAllSuccess","thx/promise/TestPromise.hx",146,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 146)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 146)		HX_VARI( Int,_g) = this->x;
HXDLIN( 146)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run(::hx::EnumBase n){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllSuccess",0x81213d4a,"thx.promise.TestPromise.testAfterAllSuccess","thx/promise/TestPromise.hx",149,0x643e7bb4)
            				HX_STACK_ARG(n,"n")
HXLINE( 150)				::utest::Assert_obj::equals(::thx::Nil_obj::nil_dyn(),n,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),150,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllSuccess",ac,3b,1a,6c)));
HXLINE( 151)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllSuccess",0x81213d4a,"thx.promise.TestPromise.testAfterAllSuccess","thx/promise/TestPromise.hx",153,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 154)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),154,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllSuccess",ac,3b,1a,6c)));
HXLINE( 155)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 146)			++_g1;
HXLINE( 147)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 148)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN( 148)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value((int)2);
HXDLIN( 148)			 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::value((int)3);
HXDLIN( 148)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::afterAll(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2));
HXDLIN( 148)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 148)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAfterAllSuccess,(void))

void TestPromise_obj::testAfterAllFailure1(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure1",0xf4094f40,"thx.promise.TestPromise.testAfterAllFailure1","thx/promise/TestPromise.hx",160,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 160)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 160)		HX_VARI( Int,_g) = this->x;
HXDLIN( 160)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run(::hx::EnumBase n){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure1",0xf4094f40,"thx.promise.TestPromise.testAfterAllFailure1","thx/promise/TestPromise.hx",163,0x643e7bb4)
            				HX_STACK_ARG(n,"n")
HXLINE( 164)				::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),164,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllFailure1",9e,e6,ee,a2)));
HXLINE( 165)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure1",0xf4094f40,"thx.promise.TestPromise.testAfterAllFailure1","thx/promise/TestPromise.hx",167,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 168)				::utest::Assert_obj::pass(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),168,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllFailure1",9e,e6,ee,a2)));
HXLINE( 169)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 160)			++_g1;
HXLINE( 161)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 162)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN( 162)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value((int)2);
HXDLIN( 162)			 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(HX_("rejected",7e,ff,83,ab),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),162,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllFailure1",9e,e6,ee,a2))));
HXDLIN( 162)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::afterAll(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2));
HXDLIN( 162)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 162)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAfterAllFailure1,(void))

void TestPromise_obj::testAfterAllFailure2(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure2",0xf4094f41,"thx.promise.TestPromise.testAfterAllFailure2","thx/promise/TestPromise.hx",175,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 175)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 175)		HX_VARI( Int,_g) = this->x;
HXDLIN( 175)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run(::hx::EnumBase n){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure2",0xf4094f41,"thx.promise.TestPromise.testAfterAllFailure2","thx/promise/TestPromise.hx",178,0x643e7bb4)
            				HX_STACK_ARG(n,"n")
HXLINE( 179)				::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),179,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllFailure2",9f,e6,ee,a2)));
HXLINE( 180)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure2",0xf4094f41,"thx.promise.TestPromise.testAfterAllFailure2","thx/promise/TestPromise.hx",182,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 183)				::utest::Assert_obj::pass(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),183,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllFailure2",9f,e6,ee,a2)));
HXLINE( 184)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 175)			++_g1;
HXLINE( 176)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 177)			 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 177)			 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 177)			 ::thx::promise::Future _hx_tmp2 = this->rej(null());
HXDLIN( 177)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::afterAll(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2));
HXDLIN( 177)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 177)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAfterAllFailure2,(void))

void TestPromise_obj::testJoinSuccess(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoinSuccess",0x52041265,"thx.promise.TestPromise.testJoinSuccess","thx/promise/TestPromise.hx",189,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 189)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 189)		HX_VARI( Int,_g) = this->x;
HXDLIN( 189)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic t){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoinSuccess",0x52041265,"thx.promise.TestPromise.testJoinSuccess","thx/promise/TestPromise.hx",193,0x643e7bb4)
            				HX_STACK_ARG(t,"t")
HXLINE( 194)				::utest::Assert_obj::equals((int)1, ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),194,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoinSuccess",c7,b7,81,af)));
HXLINE( 195)				::utest::Assert_obj::equals((int)2, ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),195,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoinSuccess",c7,b7,81,af)));
HXLINE( 196)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 189)			++_g1;
HXLINE( 190)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 191)			HX_VARI(  ::thx::promise::Future,p1) = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN( 191)			HX_VARI(  ::thx::promise::Future,p2) = ::thx::promise::_Promise::Promise_Impl__obj::value((int)2);
HXDLIN( 191)			 ::thx::promise::Future _hx_tmp = ::thx::promise::Promises_obj::par(::thx::_Tuple::Tuple2_Impl__obj::of_dyn(),p1,p2);
HXDLIN( 191)			::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp, ::Dynamic(new _hx_Closure_0(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoinSuccess,(void))

void TestPromise_obj::testJoinFailure(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoinFailure",0xb0b05cec,"thx.promise.TestPromise.testJoinFailure","thx/promise/TestPromise.hx",201,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 201)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 201)		HX_VARI( Int,_g) = this->x;
HXDLIN( 201)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::thx::Error,err, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error e){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoinFailure",0xb0b05cec,"thx.promise.TestPromise.testJoinFailure","thx/promise/TestPromise.hx",206,0x643e7bb4)
            				HX_STACK_ARG(e,"e")
HXLINE( 207)				::utest::Assert_obj::equals(err,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),207,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoinFailure",4e,02,2e,0e)));
HXLINE( 208)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::Dynamic t){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoinFailure",0xb0b05cec,"thx.promise.TestPromise.testJoinFailure","thx/promise/TestPromise.hx",211,0x643e7bb4)
            				HX_STACK_ARG(t,"t")
HXLINE( 211)				::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),211,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoinFailure",4e,02,2e,0e)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 201)			++_g1;
HXLINE( 202)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN( 202)			HX_VARI(  ::thx::Error,err) =  ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),203,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoinFailure",4e,02,2e,0e)));
HXLINE( 204)			HX_VARI(  ::thx::promise::Future,p1) = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN( 204)			HX_VARI(  ::thx::promise::Future,p2) = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXDLIN( 204)			 ::thx::promise::Future _hx_tmp = ::thx::promise::Promises_obj::par(::thx::_Tuple::Tuple2_Impl__obj::of_dyn(),p1,p2);
HXDLIN( 204)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp, ::Dynamic(new _hx_Closure_0(err,done)));
HXDLIN( 204)			::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp1, ::Dynamic(new _hx_Closure_1()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoinFailure,(void))

void TestPromise_obj::testJoin3Success(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Success",0xf6736ece,"thx.promise.TestPromise.testJoin3Success","thx/promise/TestPromise.hx",216,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 216)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 216)		HX_VARI( Int,_g) = this->x;
HXDLIN( 216)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Success",0xf6736ece,"thx.promise.TestPromise.testJoin3Success","thx/promise/TestPromise.hx",219,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 220)				::utest::Assert_obj::same(HX_("1",31,00,00,00), ::Dynamic(tuple->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),220,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Success",2c,7f,e6,66)));
HXLINE( 221)				::utest::Assert_obj::same(HX_("2",32,00,00,00), ::Dynamic(tuple->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),221,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Success",2c,7f,e6,66)));
HXLINE( 222)				::utest::Assert_obj::same(HX_("3",33,00,00,00), ::Dynamic(tuple->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),222,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Success",2c,7f,e6,66)));
HXLINE( 223)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Success",0xf6736ece,"thx.promise.TestPromise.testJoin3Success","thx/promise/TestPromise.hx",226,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 226)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),226,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Success",2c,7f,e6,66)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 216)			++_g1;
HXLINE( 217)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 218)			 ::thx::promise::Future _hx_tmp = this->res(HX_("1",31,00,00,00));
HXDLIN( 218)			 ::thx::promise::Future _hx_tmp1 = this->res(HX_("2",32,00,00,00));
HXDLIN( 218)			 ::thx::promise::Future _hx_tmp2 = this->res(HX_("3",33,00,00,00));
HXDLIN( 218)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::Promises_obj::join3(_hx_tmp,_hx_tmp1,_hx_tmp2);
HXDLIN( 218)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 218)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin3Success,(void))

void TestPromise_obj::testJoin3Failure1(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure1",0x26a2713c,"thx.promise.TestPromise.testJoin3Failure1","thx/promise/TestPromise.hx",231,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 231)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 231)		HX_VARI( Int,_g) = this->x;
HXDLIN( 231)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure1",0x26a2713c,"thx.promise.TestPromise.testJoin3Failure1","thx/promise/TestPromise.hx",234,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 235)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),235,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Failure1",1e,b3,dd,1a)));
HXLINE( 236)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure1",0x26a2713c,"thx.promise.TestPromise.testJoin3Failure1","thx/promise/TestPromise.hx",238,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 239)				::utest::Assert_obj::same(HX_("3",33,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),239,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Failure1",1e,b3,dd,1a)));
HXLINE( 240)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 231)			++_g1;
HXLINE( 232)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 233)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("1",31,00,00,00));
HXDLIN( 233)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("2",32,00,00,00));
HXDLIN( 233)			 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(HX_("3",33,00,00,00),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),233,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Failure1",1e,b3,dd,1a))));
HXDLIN( 233)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::Promises_obj::join3(_hx_tmp,_hx_tmp1,_hx_tmp2);
HXDLIN( 233)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 233)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin3Failure1,(void))

void TestPromise_obj::testJoin3Failure2(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure2",0x26a2713d,"thx.promise.TestPromise.testJoin3Failure2","thx/promise/TestPromise.hx",245,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 245)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 245)		HX_VARI( Int,_g) = this->x;
HXDLIN( 245)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure2",0x26a2713d,"thx.promise.TestPromise.testJoin3Failure2","thx/promise/TestPromise.hx",248,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 249)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),249,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Failure2",1f,b3,dd,1a)));
HXLINE( 250)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure2",0x26a2713d,"thx.promise.TestPromise.testJoin3Failure2","thx/promise/TestPromise.hx",252,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 253)				::utest::Assert_obj::same(HX_("3",33,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),253,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Failure2",1f,b3,dd,1a)));
HXLINE( 254)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 245)			++_g1;
HXLINE( 246)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 247)			 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 247)			 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 247)			 ::thx::promise::Future _hx_tmp2 = this->rej(HX_("3",33,00,00,00));
HXDLIN( 247)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::Promises_obj::join3(_hx_tmp,_hx_tmp1,_hx_tmp2);
HXDLIN( 247)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 247)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin3Failure2,(void))

void TestPromise_obj::testJoin4Success(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Success",0x2fa5e0ed,"thx.promise.TestPromise.testJoin4Success","thx/promise/TestPromise.hx",259,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 259)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 259)		HX_VARI( Int,_g) = this->x;
HXDLIN( 259)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Success",0x2fa5e0ed,"thx.promise.TestPromise.testJoin4Success","thx/promise/TestPromise.hx",262,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 263)				::utest::Assert_obj::same(HX_("1",31,00,00,00), ::Dynamic(tuple->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),263,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Success",4b,f1,18,a0)));
HXLINE( 264)				::utest::Assert_obj::same(HX_("2",32,00,00,00), ::Dynamic(tuple->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),264,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Success",4b,f1,18,a0)));
HXLINE( 265)				::utest::Assert_obj::same(HX_("3",33,00,00,00), ::Dynamic(tuple->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),265,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Success",4b,f1,18,a0)));
HXLINE( 266)				::utest::Assert_obj::same(HX_("4",34,00,00,00), ::Dynamic(tuple->__Field(HX_("_3",f4,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),266,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Success",4b,f1,18,a0)));
HXLINE( 267)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Success",0x2fa5e0ed,"thx.promise.TestPromise.testJoin4Success","thx/promise/TestPromise.hx",270,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 270)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),270,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Success",4b,f1,18,a0)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 259)			++_g1;
HXLINE( 260)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 261)			 ::thx::promise::Future _hx_tmp = this->res(HX_("1",31,00,00,00));
HXDLIN( 261)			 ::thx::promise::Future _hx_tmp1 = this->res(HX_("2",32,00,00,00));
HXDLIN( 261)			 ::thx::promise::Future _hx_tmp2 = this->res(HX_("3",33,00,00,00));
HXDLIN( 261)			 ::thx::promise::Future _hx_tmp3 = this->res(HX_("4",34,00,00,00));
HXDLIN( 261)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::Promises_obj::join4(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3);
HXDLIN( 261)			 ::thx::promise::Future _hx_tmp5 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp4, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 261)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp5, ::Dynamic(new _hx_Closure_1()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin4Success,(void))

void TestPromise_obj::testJoin4Failure1(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure1",0xf993da3d,"thx.promise.TestPromise.testJoin4Failure1","thx/promise/TestPromise.hx",275,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 275)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 275)		HX_VARI( Int,_g) = this->x;
HXDLIN( 275)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure1",0xf993da3d,"thx.promise.TestPromise.testJoin4Failure1","thx/promise/TestPromise.hx",278,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 279)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),279,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Failure1",1f,1c,cf,ed)));
HXLINE( 280)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure1",0xf993da3d,"thx.promise.TestPromise.testJoin4Failure1","thx/promise/TestPromise.hx",282,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 283)				::utest::Assert_obj::same(HX_("4",34,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),283,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Failure1",1f,1c,cf,ed)));
HXLINE( 284)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 275)			++_g1;
HXLINE( 276)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 277)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("1",31,00,00,00));
HXDLIN( 277)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("2",32,00,00,00));
HXDLIN( 277)			 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("3",33,00,00,00));
HXDLIN( 277)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(HX_("4",34,00,00,00),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),277,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Failure1",1f,1c,cf,ed))));
HXDLIN( 277)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::Promises_obj::join4(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3);
HXDLIN( 277)			 ::thx::promise::Future _hx_tmp5 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp4, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 277)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp5, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin4Failure1,(void))

void TestPromise_obj::testJoin4Failure2(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure2",0xf993da3e,"thx.promise.TestPromise.testJoin4Failure2","thx/promise/TestPromise.hx",289,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 289)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 289)		HX_VARI( Int,_g) = this->x;
HXDLIN( 289)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure2",0xf993da3e,"thx.promise.TestPromise.testJoin4Failure2","thx/promise/TestPromise.hx",292,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 293)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),293,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Failure2",20,1c,cf,ed)));
HXLINE( 294)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure2",0xf993da3e,"thx.promise.TestPromise.testJoin4Failure2","thx/promise/TestPromise.hx",296,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 297)				::utest::Assert_obj::same(HX_("4",34,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),297,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Failure2",20,1c,cf,ed)));
HXLINE( 298)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 289)			++_g1;
HXLINE( 290)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 291)			 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 291)			 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 291)			 ::thx::promise::Future _hx_tmp2 = this->res(null());
HXDLIN( 291)			 ::thx::promise::Future _hx_tmp3 = this->rej(HX_("4",34,00,00,00));
HXDLIN( 291)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::Promises_obj::join4(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3);
HXDLIN( 291)			 ::thx::promise::Future _hx_tmp5 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp4, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 291)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp5, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin4Failure2,(void))

void TestPromise_obj::testJoin5Success(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Success",0x68d8530c,"thx.promise.TestPromise.testJoin5Success","thx/promise/TestPromise.hx",303,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 303)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 303)		HX_VARI( Int,_g) = this->x;
HXDLIN( 303)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Success",0x68d8530c,"thx.promise.TestPromise.testJoin5Success","thx/promise/TestPromise.hx",306,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 307)				::utest::Assert_obj::same(HX_("1",31,00,00,00), ::Dynamic(tuple->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),307,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
HXLINE( 308)				::utest::Assert_obj::same(HX_("2",32,00,00,00), ::Dynamic(tuple->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),308,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
HXLINE( 309)				::utest::Assert_obj::same(HX_("3",33,00,00,00), ::Dynamic(tuple->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),309,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
HXLINE( 310)				::utest::Assert_obj::same(HX_("4",34,00,00,00), ::Dynamic(tuple->__Field(HX_("_3",f4,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),310,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
HXLINE( 311)				::utest::Assert_obj::same(HX_("5",35,00,00,00), ::Dynamic(tuple->__Field(HX_("_4",f5,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),311,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
HXLINE( 312)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Success",0x68d8530c,"thx.promise.TestPromise.testJoin5Success","thx/promise/TestPromise.hx",315,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 315)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),315,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 303)			++_g1;
HXLINE( 304)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 305)			 ::thx::promise::Future _hx_tmp = this->res(HX_("1",31,00,00,00));
HXDLIN( 305)			 ::thx::promise::Future _hx_tmp1 = this->res(HX_("2",32,00,00,00));
HXDLIN( 305)			 ::thx::promise::Future _hx_tmp2 = this->res(HX_("3",33,00,00,00));
HXDLIN( 305)			 ::thx::promise::Future _hx_tmp3 = this->res(HX_("4",34,00,00,00));
HXDLIN( 305)			 ::thx::promise::Future _hx_tmp4 = this->res(HX_("5",35,00,00,00));
HXDLIN( 305)			 ::thx::promise::Future _hx_tmp5 = ::thx::promise::Promises_obj::join5(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4);
HXDLIN( 305)			 ::thx::promise::Future _hx_tmp6 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp5, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 305)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp6, ::Dynamic(new _hx_Closure_1()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin5Success,(void))

void TestPromise_obj::testJoin5Failure1(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure1",0xcc85433e,"thx.promise.TestPromise.testJoin5Failure1","thx/promise/TestPromise.hx",320,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 320)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 320)		HX_VARI( Int,_g) = this->x;
HXDLIN( 320)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure1",0xcc85433e,"thx.promise.TestPromise.testJoin5Failure1","thx/promise/TestPromise.hx",323,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 324)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),324,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Failure1",20,85,c0,c0)));
HXLINE( 325)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure1",0xcc85433e,"thx.promise.TestPromise.testJoin5Failure1","thx/promise/TestPromise.hx",327,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 328)				::utest::Assert_obj::same(HX_("5",35,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),328,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Failure1",20,85,c0,c0)));
HXLINE( 329)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 320)			++_g1;
HXLINE( 321)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 322)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("1",31,00,00,00));
HXDLIN( 322)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("2",32,00,00,00));
HXDLIN( 322)			 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("3",33,00,00,00));
HXDLIN( 322)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("4",34,00,00,00));
HXDLIN( 322)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(HX_("5",35,00,00,00),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),322,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Failure1",20,85,c0,c0))));
HXDLIN( 322)			 ::thx::promise::Future _hx_tmp5 = ::thx::promise::Promises_obj::join5(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4);
HXDLIN( 322)			 ::thx::promise::Future _hx_tmp6 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp5, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 322)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp6, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin5Failure1,(void))

void TestPromise_obj::testJoin5Failure2(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure2",0xcc85433f,"thx.promise.TestPromise.testJoin5Failure2","thx/promise/TestPromise.hx",334,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 334)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 334)		HX_VARI( Int,_g) = this->x;
HXDLIN( 334)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure2",0xcc85433f,"thx.promise.TestPromise.testJoin5Failure2","thx/promise/TestPromise.hx",337,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 338)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),338,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Failure2",21,85,c0,c0)));
HXLINE( 339)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure2",0xcc85433f,"thx.promise.TestPromise.testJoin5Failure2","thx/promise/TestPromise.hx",341,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 342)				::utest::Assert_obj::same(HX_("5",35,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),342,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Failure2",21,85,c0,c0)));
HXLINE( 343)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 334)			++_g1;
HXLINE( 335)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 336)			 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 336)			 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 336)			 ::thx::promise::Future _hx_tmp2 = this->res(null());
HXDLIN( 336)			 ::thx::promise::Future _hx_tmp3 = this->res(null());
HXDLIN( 336)			 ::thx::promise::Future _hx_tmp4 = this->rej(HX_("5",35,00,00,00));
HXDLIN( 336)			 ::thx::promise::Future _hx_tmp5 = ::thx::promise::Promises_obj::join5(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4);
HXDLIN( 336)			 ::thx::promise::Future _hx_tmp6 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp5, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 336)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp6, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin5Failure2,(void))

void TestPromise_obj::testJoin6Success(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Success",0xa20ac52b,"thx.promise.TestPromise.testJoin6Success","thx/promise/TestPromise.hx",348,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 348)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 348)		HX_VARI( Int,_g) = this->x;
HXDLIN( 348)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Success",0xa20ac52b,"thx.promise.TestPromise.testJoin6Success","thx/promise/TestPromise.hx",351,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 352)				::utest::Assert_obj::same(HX_("1",31,00,00,00), ::Dynamic(tuple->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),352,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 353)				::utest::Assert_obj::same(HX_("2",32,00,00,00), ::Dynamic(tuple->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),353,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 354)				::utest::Assert_obj::same(HX_("3",33,00,00,00), ::Dynamic(tuple->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),354,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 355)				::utest::Assert_obj::same(HX_("4",34,00,00,00), ::Dynamic(tuple->__Field(HX_("_3",f4,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),355,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 356)				::utest::Assert_obj::same(HX_("5",35,00,00,00), ::Dynamic(tuple->__Field(HX_("_4",f5,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),356,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 357)				::utest::Assert_obj::same(HX_("6",36,00,00,00), ::Dynamic(tuple->__Field(HX_("_5",f6,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),357,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 358)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Success",0xa20ac52b,"thx.promise.TestPromise.testJoin6Success","thx/promise/TestPromise.hx",361,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 361)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),361,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 348)			++_g1;
HXLINE( 349)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 350)			 ::thx::promise::Future _hx_tmp = this->res(HX_("1",31,00,00,00));
HXDLIN( 350)			 ::thx::promise::Future _hx_tmp1 = this->res(HX_("2",32,00,00,00));
HXDLIN( 350)			 ::thx::promise::Future _hx_tmp2 = this->res(HX_("3",33,00,00,00));
HXDLIN( 350)			 ::thx::promise::Future _hx_tmp3 = this->res(HX_("4",34,00,00,00));
HXDLIN( 350)			 ::thx::promise::Future _hx_tmp4 = this->res(HX_("5",35,00,00,00));
HXDLIN( 350)			 ::thx::promise::Future _hx_tmp5 = this->res(HX_("6",36,00,00,00));
HXDLIN( 350)			 ::thx::promise::Future _hx_tmp6 = ::thx::promise::Promises_obj::join6(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5);
HXDLIN( 350)			 ::thx::promise::Future _hx_tmp7 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp6, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 350)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp7, ::Dynamic(new _hx_Closure_1()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin6Success,(void))

void TestPromise_obj::testJoin6Failure1(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure1",0x9f76ac3f,"thx.promise.TestPromise.testJoin6Failure1","thx/promise/TestPromise.hx",366,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 366)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 366)		HX_VARI( Int,_g) = this->x;
HXDLIN( 366)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure1",0x9f76ac3f,"thx.promise.TestPromise.testJoin6Failure1","thx/promise/TestPromise.hx",369,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 370)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),370,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Failure1",21,ee,b1,93)));
HXLINE( 371)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure1",0x9f76ac3f,"thx.promise.TestPromise.testJoin6Failure1","thx/promise/TestPromise.hx",373,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 374)				::utest::Assert_obj::same(HX_("6",36,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),374,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Failure1",21,ee,b1,93)));
HXLINE( 375)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 366)			++_g1;
HXLINE( 367)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 368)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("1",31,00,00,00));
HXDLIN( 368)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("2",32,00,00,00));
HXDLIN( 368)			 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("3",33,00,00,00));
HXDLIN( 368)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("4",34,00,00,00));
HXDLIN( 368)			 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("5",35,00,00,00));
HXDLIN( 368)			 ::thx::promise::Future _hx_tmp5 = ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(HX_("6",36,00,00,00),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),368,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Failure1",21,ee,b1,93))));
HXDLIN( 368)			 ::thx::promise::Future _hx_tmp6 = ::thx::promise::Promises_obj::join6(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5);
HXDLIN( 368)			 ::thx::promise::Future _hx_tmp7 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp6, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 368)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp7, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin6Failure1,(void))

void TestPromise_obj::testJoin6Failure2(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure2",0x9f76ac40,"thx.promise.TestPromise.testJoin6Failure2","thx/promise/TestPromise.hx",380,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 380)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 380)		HX_VARI( Int,_g) = this->x;
HXDLIN( 380)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::Dynamic tuple){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure2",0x9f76ac40,"thx.promise.TestPromise.testJoin6Failure2","thx/promise/TestPromise.hx",383,0x643e7bb4)
            				HX_STACK_ARG(tuple,"tuple")
HXLINE( 384)				::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),384,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Failure2",22,ee,b1,93)));
HXLINE( 385)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error err){
            				HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure2",0x9f76ac40,"thx.promise.TestPromise.testJoin6Failure2","thx/promise/TestPromise.hx",387,0x643e7bb4)
            				HX_STACK_ARG(err,"err")
HXLINE( 388)				::utest::Assert_obj::same(HX_("6",36,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),388,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Failure2",22,ee,b1,93)));
HXLINE( 389)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 380)			++_g1;
HXLINE( 381)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 382)			 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 382)			 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 382)			 ::thx::promise::Future _hx_tmp2 = this->res(null());
HXDLIN( 382)			 ::thx::promise::Future _hx_tmp3 = this->res(null());
HXDLIN( 382)			 ::thx::promise::Future _hx_tmp4 = this->res(null());
HXDLIN( 382)			 ::thx::promise::Future _hx_tmp5 = this->rej(HX_("6",36,00,00,00));
HXDLIN( 382)			 ::thx::promise::Future _hx_tmp6 = ::thx::promise::Promises_obj::join6(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5);
HXDLIN( 382)			 ::thx::promise::Future _hx_tmp7 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp6, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 382)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp7, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin6Failure2,(void))

void TestPromise_obj::testMapTupleSuccess(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleSuccess",0x7ab800c3,"thx.promise.TestPromise.testMapTupleSuccess","thx/promise/TestPromise.hx",394,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 394)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 394)		HX_VARI( Int,_g) = this->x;
HXDLIN( 394)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			 ::thx::promise::Future _hx_run(Int a,Int b){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleSuccess",0x7ab800c3,"thx.promise.TestPromise.testMapTupleSuccess","thx/promise/TestPromise.hx",398,0x643e7bb4)
            				HX_STACK_ARG(a,"a")
            				HX_STACK_ARG(b,"b")
HXLINE( 398)				return ::thx::promise::_Promise::Promise_Impl__obj::value(((Float)a / (Float)b));
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            			void _hx_run(Float v){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleSuccess",0x7ab800c3,"thx.promise.TestPromise.testMapTupleSuccess","thx/promise/TestPromise.hx",400,0x643e7bb4)
            				HX_STACK_ARG(v,"v")
HXLINE( 401)				::utest::Assert_obj::equals(((Float)0.5),v,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),401,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapTupleSuccess",25,ff,b0,65)));
HXLINE( 402)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 394)			++_g1;
HXLINE( 395)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 396)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("_0",f1,52,00,00),(int)1)
            				->setFixed(1,HX_("_1",f2,52,00,00),(int)2)));
HXDLIN( 396)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::PromiseTuple2_obj::mapTuplePromise(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 396)			::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp1, ::Dynamic(new _hx_Closure_1(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testMapTupleSuccess,(void))

void TestPromise_obj::testMapTupleFailure(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleFailure",0xd9644b4a,"thx.promise.TestPromise.testMapTupleFailure","thx/promise/TestPromise.hx",407,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 407)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 407)		HX_VARI( Int,_g) = this->x;
HXDLIN( 407)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			 ::thx::promise::Future _hx_run(Int a,Int b){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleFailure",0xd9644b4a,"thx.promise.TestPromise.testMapTupleFailure","thx/promise/TestPromise.hx",412,0x643e7bb4)
            				HX_STACK_ARG(a,"a")
            				HX_STACK_ARG(b,"b")
HXLINE( 412)				return ::thx::promise::_Promise::Promise_Impl__obj::value(((Float)a / (Float)b));
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::thx::Error,err, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error e){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleFailure",0xd9644b4a,"thx.promise.TestPromise.testMapTupleFailure","thx/promise/TestPromise.hx",414,0x643e7bb4)
            				HX_STACK_ARG(e,"e")
HXLINE( 415)				::utest::Assert_obj::equals(err,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),415,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapTupleFailure",ac,49,5d,c4)));
HXLINE( 416)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 407)			++_g1;
HXLINE( 408)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN( 408)			HX_VARI(  ::thx::Error,err) =  ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),409,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapTupleFailure",ac,49,5d,c4)));
HXLINE( 410)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXDLIN( 410)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::PromiseTuple2_obj::mapTuplePromise(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 410)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp1, ::Dynamic(new _hx_Closure_1(err,done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testMapTupleFailure,(void))

void TestPromise_obj::testAllMapToTupleFailure(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testAllMapToTupleFailure",0xc31fdfac,"thx.promise.TestPromise.testAllMapToTupleFailure","thx/promise/TestPromise.hx",421,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 421)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 421)		HX_VARI( Int,_g) = this->x;
HXDLIN( 421)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			 ::thx::promise::Future _hx_run(::cpp::VirtualArray v){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAllMapToTupleFailure",0xc31fdfac,"thx.promise.TestPromise.testAllMapToTupleFailure","thx/promise/TestPromise.hx",428,0x643e7bb4)
            				HX_STACK_ARG(v,"v")
HXLINE( 429)				::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),429,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllMapToTupleFailure",0a,7e,c7,e9)));
HXLINE( 430)				return ::thx::promise::_Promise::Promise_Impl__obj::value( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("_0",f1,52,00,00),(int)1)
            					->setFixed(1,HX_("_1",f2,52,00,00),(int)2)));
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			 ::thx::promise::Future _hx_run( ::thx::Error err1){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAllMapToTupleFailure",0xc31fdfac,"thx.promise.TestPromise.testAllMapToTupleFailure","thx/promise/TestPromise.hx",424,0x643e7bb4)
            				HX_STACK_ARG(err1,"err1")
HXLINE( 424)				return ::thx::promise::_Promise::Promise_Impl__obj::error(err1);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            			 ::thx::promise::Future _hx_run(Int a,Int b){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAllMapToTupleFailure",0xc31fdfac,"thx.promise.TestPromise.testAllMapToTupleFailure","thx/promise/TestPromise.hx",432,0x643e7bb4)
            				HX_STACK_ARG(a,"a")
            				HX_STACK_ARG(b,"b")
HXLINE( 433)				::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),433,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllMapToTupleFailure",0a,7e,c7,e9)));
HXLINE( 434)				return ::thx::promise::_Promise::Promise_Impl__obj::value(((Float)a / (Float)b));
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::thx::Error,err, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::thx::Error e){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAllMapToTupleFailure",0xc31fdfac,"thx.promise.TestPromise.testAllMapToTupleFailure","thx/promise/TestPromise.hx",436,0x643e7bb4)
            				HX_STACK_ARG(e,"e")
HXLINE( 437)				::utest::Assert_obj::equals(err,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),437,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllMapToTupleFailure",0a,7e,c7,e9)));
HXLINE( 438)				done();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 421)			++_g1;
HXLINE( 422)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN( 422)			HX_VARI(  ::thx::Error,err) =  ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),423,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllMapToTupleFailure",0a,7e,c7,e9)));
HXLINE( 425)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXLINE( 426)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXLINE( 424)			HX_VARI_NAME(  ::thx::promise::Future,this1,"this") = ::thx::promise::_Promise::Promise_Impl__obj::sequence(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_hx_tmp1));
HXDLIN( 424)			 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::flatMapEither(this1, ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()));
HXDLIN( 424)			 ::thx::promise::Future _hx_tmp3 = ::thx::promise::PromiseTuple2_obj::mapTuplePromise(_hx_tmp2, ::Dynamic(new _hx_Closure_2()));
HXDLIN( 424)			::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp3, ::Dynamic(new _hx_Closure_3(err,done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAllMapToTupleFailure,(void))

void TestPromise_obj::testMapSuccessFailure(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessFailure",0xaa3318ef,"thx.promise.TestPromise.testMapSuccessFailure","thx/promise/TestPromise.hx",443,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 443)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 443)		HX_VARI( Int,_g) = this->x;
HXDLIN( 443)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			 ::Dynamic _hx_run(::hx::EnumBase _){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessFailure",0xaa3318ef,"thx.promise.TestPromise.testMapSuccessFailure","thx/promise/TestPromise.hx",446,0x643e7bb4)
            				HX_STACK_ARG(_,"_")
HXLINE( 446)				HX_STACK_DO_THROW(HX_("NOOO!",60,51,b5,1d));
HXDLIN( 446)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::Dynamic _1){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessFailure",0xaa3318ef,"thx.promise.TestPromise.testMapSuccessFailure","thx/promise/TestPromise.hx",447,0x643e7bb4)
            				HX_STACK_ARG(_1,"_1")
HXLINE( 447)				::utest::Assert_obj::fail(HX_("should never succeed",41,ef,cf,6a),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),447,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessFailure",d1,f3,31,04)));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			void _hx_run( ::thx::Error e){
            				HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessFailure",0xaa3318ef,"thx.promise.TestPromise.testMapSuccessFailure","thx/promise/TestPromise.hx",448,0x643e7bb4)
            				HX_STACK_ARG(e,"e")
HXLINE( 448)				::String _hx_tmp3 = e->toString();
HXDLIN( 448)				::utest::Assert_obj::stringContains(HX_("NOOO!",60,51,b5,1d),_hx_tmp3,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),448,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessFailure",d1,f3,31,04)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 443)			++_g1;
HXLINE( 444)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 445)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::map(::thx::promise::_Promise::Promise_Impl__obj::nil, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 445)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp, ::Dynamic(new _hx_Closure_1()));
HXDLIN( 445)			 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp1, ::Dynamic(new _hx_Closure_2()));
HXDLIN( 445)			::thx::promise::_Promise::Promise_Impl__obj::always(_hx_tmp2,done);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testMapSuccessFailure,(void))

void TestPromise_obj::testTuple3(){
            	HX_STACK_FRAME("thx.promise.TestPromise","testTuple3",0x202ddb3f,"thx.promise.TestPromise.testTuple3","thx/promise/TestPromise.hx",453,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 453)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 453)		HX_VARI( Int,_g) = this->x;
HXDLIN( 453)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(3)
            			void _hx_run(Int a,::String b,Float c){
            				HX_STACK_FRAME("thx.promise.TestPromise","testTuple3",0x202ddb3f,"thx.promise.TestPromise.testTuple3","thx/promise/TestPromise.hx",458,0x643e7bb4)
            				HX_STACK_ARG(a,"a")
            				HX_STACK_ARG(b,"b")
            				HX_STACK_ARG(c,"c")
HXLINE( 459)				::utest::Assert_obj::equals((int)1,a,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),459,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testTuple3",1d,31,96,22)));
HXLINE( 460)				::utest::Assert_obj::equals(HX_("a",61,00,00,00),b,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),460,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testTuple3",1d,31,96,22)));
HXLINE( 461)				::utest::Assert_obj::equals(((Float)0.2),c,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),461,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testTuple3",1d,31,96,22)));
HXLINE( 462)				done();
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 453)			++_g1;
HXLINE( 454)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 455)			 ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),455,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testTuple3",1d,31,96,22)));
HXLINE( 456)			 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value( ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("_0",f1,52,00,00),(int)1)
            				->setFixed(1,HX_("_1",f2,52,00,00),HX_("a",61,00,00,00))
            				->setFixed(2,HX_("_2",f3,52,00,00),((Float)0.2))));
HXDLIN( 456)			::thx::promise::PromiseTuple3_obj::tuple(_hx_tmp, ::Dynamic(new _hx_Closure_0(done)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testTuple3,(void))

 ::thx::promise::Future TestPromise_obj::res(::String __o_val){
::String val = __o_val.Default(HX_HCSTRING("resolved","\xf8","\x7b","\xb0","\x0c"));
            	HX_STACK_FRAME("thx.promise.TestPromise","res",0xdf083efe,"thx.promise.TestPromise.res","thx/promise/TestPromise.hx",467,0x643e7bb4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(val,"val")
HXLINE( 467)		return ::thx::promise::_Promise::Promise_Impl__obj::value(val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestPromise_obj,res,return )

 ::thx::promise::Future TestPromise_obj::rej(::String __o_msg){
::String msg = __o_msg.Default(HX_HCSTRING("rejected","\x7e","\xff","\x83","\xab"));
            	HX_STACK_FRAME("thx.promise.TestPromise","rej",0xdf083ef5,"thx.promise.TestPromise.rej","thx/promise/TestPromise.hx",471,0x643e7bb4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(msg,"msg")
HXLINE( 471)		return ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(msg,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),471,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("rej",57,d9,56,00))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestPromise_obj,rej,return )


TestPromise_obj::TestPromise_obj()
{
}

hx::Val TestPromise_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"res") ) { return hx::Val( res_dyn()); }
		if (HX_FIELD_EQ(inName,"rej") ) { return hx::Val( rej_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testTuple3") ) { return hx::Val( testTuple3_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testAllSuccess") ) { return hx::Val( testAllSuccess_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testAllFailure1") ) { return hx::Val( testAllFailure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testAllFailure2") ) { return hx::Val( testAllFailure2_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoinSuccess") ) { return hx::Val( testJoinSuccess_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoinFailure") ) { return hx::Val( testJoinFailure_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testRejectBefore") ) { return hx::Val( testRejectBefore_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin3Success") ) { return hx::Val( testJoin3Success_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin4Success") ) { return hx::Val( testJoin4Success_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin5Success") ) { return hx::Val( testJoin5Success_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin6Success") ) { return hx::Val( testJoin6Success_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testResolveBefore") ) { return hx::Val( testResolveBefore_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin3Failure1") ) { return hx::Val( testJoin3Failure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin3Failure2") ) { return hx::Val( testJoin3Failure2_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin4Failure1") ) { return hx::Val( testJoin4Failure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin4Failure2") ) { return hx::Val( testJoin4Failure2_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin5Failure1") ) { return hx::Val( testJoin5Failure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin5Failure2") ) { return hx::Val( testJoin5Failure2_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin6Failure1") ) { return hx::Val( testJoin6Failure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin6Failure2") ) { return hx::Val( testJoin6Failure2_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testAfterAllSuccess") ) { return hx::Val( testAfterAllSuccess_dyn()); }
		if (HX_FIELD_EQ(inName,"testMapTupleSuccess") ) { return hx::Val( testMapTupleSuccess_dyn()); }
		if (HX_FIELD_EQ(inName,"testMapTupleFailure") ) { return hx::Val( testMapTupleFailure_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"testAfterAllFailure1") ) { return hx::Val( testAfterAllFailure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testAfterAllFailure2") ) { return hx::Val( testAfterAllFailure2_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"testMapSuccessFailure") ) { return hx::Val( testMapSuccessFailure_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"testMapSuccessWithValue") ) { return hx::Val( testMapSuccessWithValue_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"testAllMapToTupleFailure") ) { return hx::Val( testAllMapToTupleFailure_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"testMapSuccessWithFailure") ) { return hx::Val( testMapSuccessWithFailure_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestPromise_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestPromise_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestPromise_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestPromise_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestPromise_obj_sStaticStorageInfo = 0;
#endif

static ::String TestPromise_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testResolveBefore","\xd9","\x10","\x48","\x2e"),
	HX_HCSTRING("testRejectBefore","\xb0","\x32","\x56","\x9c"),
	HX_HCSTRING("testMapSuccessWithValue","\xd2","\x96","\x6a","\x02"),
	HX_HCSTRING("testMapSuccessWithFailure","\xeb","\xe1","\xe9","\x09"),
	HX_HCSTRING("testAllSuccess","\x94","\x51","\xea","\x20"),
	HX_HCSTRING("testAllFailure1","\xb6","\xfb","\x31","\x24"),
	HX_HCSTRING("testAllFailure2","\xb7","\xfb","\x31","\x24"),
	HX_HCSTRING("testAfterAllSuccess","\xac","\x3b","\x1a","\x6c"),
	HX_HCSTRING("testAfterAllFailure1","\x9e","\xe6","\xee","\xa2"),
	HX_HCSTRING("testAfterAllFailure2","\x9f","\xe6","\xee","\xa2"),
	HX_HCSTRING("testJoinSuccess","\xc7","\xb7","\x81","\xaf"),
	HX_HCSTRING("testJoinFailure","\x4e","\x02","\x2e","\x0e"),
	HX_HCSTRING("testJoin3Success","\x2c","\x7f","\xe6","\x66"),
	HX_HCSTRING("testJoin3Failure1","\x1e","\xb3","\xdd","\x1a"),
	HX_HCSTRING("testJoin3Failure2","\x1f","\xb3","\xdd","\x1a"),
	HX_HCSTRING("testJoin4Success","\x4b","\xf1","\x18","\xa0"),
	HX_HCSTRING("testJoin4Failure1","\x1f","\x1c","\xcf","\xed"),
	HX_HCSTRING("testJoin4Failure2","\x20","\x1c","\xcf","\xed"),
	HX_HCSTRING("testJoin5Success","\x6a","\x63","\x4b","\xd9"),
	HX_HCSTRING("testJoin5Failure1","\x20","\x85","\xc0","\xc0"),
	HX_HCSTRING("testJoin5Failure2","\x21","\x85","\xc0","\xc0"),
	HX_HCSTRING("testJoin6Success","\x89","\xd5","\x7d","\x12"),
	HX_HCSTRING("testJoin6Failure1","\x21","\xee","\xb1","\x93"),
	HX_HCSTRING("testJoin6Failure2","\x22","\xee","\xb1","\x93"),
	HX_HCSTRING("testMapTupleSuccess","\x25","\xff","\xb0","\x65"),
	HX_HCSTRING("testMapTupleFailure","\xac","\x49","\x5d","\xc4"),
	HX_HCSTRING("testAllMapToTupleFailure","\x0a","\x7e","\xc7","\xe9"),
	HX_HCSTRING("testMapSuccessFailure","\xd1","\xf3","\x31","\x04"),
	HX_HCSTRING("testTuple3","\x1d","\x31","\x96","\x22"),
	HX_HCSTRING("res","\x60","\xd9","\x56","\x00"),
	HX_HCSTRING("rej","\x57","\xd9","\x56","\x00"),
	::String(null()) };

static void TestPromise_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestPromise_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestPromise_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestPromise_obj::__mClass,"__mClass");
};

#endif

hx::Class TestPromise_obj::__mClass;

void TestPromise_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.promise.TestPromise","\x0c","\x1f","\xff","\xff");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestPromise_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestPromise_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestPromise_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestPromise_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestPromise_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestPromise_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace promise
