// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_promise__Promise_Promise_Impl_
#define INCLUDED_thx_promise__Promise_Promise_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,Either)
HX_DECLARE_CLASS1(thx,Error)
HX_DECLARE_CLASS2(thx,promise,Future)
HX_DECLARE_CLASS3(thx,promise,_Promise,Promise_Impl_)

namespace thx{
namespace promise{
namespace _Promise{


class HXCPP_CLASS_ATTRIBUTES Promise_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Promise_Impl__obj OBJ_;
		Promise_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.promise._Promise.Promise_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.promise._Promise.Promise_Impl_"); }
		static hx::ObjectPtr< Promise_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Promise_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Promise_Impl_","\x5b","\x00","\xba","\xbe"); }

		static void __boot();
		static  ::thx::promise::Future _new( ::thx::promise::Future future);
		static ::Dynamic _new_dyn();

		static  ::thx::promise::Future fromFuture( ::thx::promise::Future future);
		static ::Dynamic fromFuture_dyn();

		static  ::thx::promise::Future nil;
		static  ::thx::promise::Future all(::Array< ::Dynamic> arr);
		static ::Dynamic all_dyn();

		static  ::thx::promise::Future afterAll(::Array< ::Dynamic> arr);
		static ::Dynamic afterAll_dyn();

		static  ::thx::promise::Future sequence(::Array< ::Dynamic> arr);
		static ::Dynamic sequence_dyn();

		static  ::thx::promise::Future allSequence(::Array< ::Dynamic> arr);
		static ::Dynamic allSequence_dyn();

		static  ::thx::promise::Future create( ::Dynamic callback);
		static ::Dynamic create_dyn();

		static  ::thx::promise::Future createUnsafe( ::Dynamic callback);
		static ::Dynamic createUnsafe_dyn();

		static  ::thx::promise::Future createFulfill( ::Dynamic callback);
		static ::Dynamic createFulfill_dyn();

		static  ::thx::promise::Future fail(::String message, ::Dynamic pos);
		static ::Dynamic fail_dyn();

		static  ::thx::promise::Future error( ::thx::Error err);
		static ::Dynamic error_dyn();

		static  ::thx::promise::Future value( ::Dynamic v);
		static ::Dynamic value_dyn();

		static  ::thx::promise::Future always( ::thx::promise::Future this1, ::Dynamic handler);
		static ::Dynamic always_dyn();

		static  ::thx::promise::Future either( ::thx::promise::Future this1, ::Dynamic success, ::Dynamic failure);
		static ::Dynamic either_dyn();

		static Bool isFailure( ::thx::promise::Future this1);
		static ::Dynamic isFailure_dyn();

		static Bool isResolved( ::thx::promise::Future this1);
		static ::Dynamic isResolved_dyn();

		static  ::thx::promise::Future failure( ::thx::promise::Future this1, ::Dynamic failure);
		static ::Dynamic failure_dyn();

		static  ::thx::promise::Future mapAlways( ::thx::promise::Future this1, ::Dynamic handler);
		static ::Dynamic mapAlways_dyn();

		static  ::thx::promise::Future mapAlwaysAsyncFuture( ::thx::promise::Future this1, ::Dynamic handler);
		static ::Dynamic mapAlwaysAsyncFuture_dyn();

		static  ::thx::promise::Future mapAlwaysFuture( ::thx::promise::Future this1, ::Dynamic handler);
		static ::Dynamic mapAlwaysFuture_dyn();

		static  ::thx::promise::Future mapEither( ::thx::promise::Future this1, ::Dynamic success, ::Dynamic failure);
		static ::Dynamic mapEither_dyn();

		static  ::thx::promise::Future mapEitherFuture( ::thx::promise::Future this1, ::Dynamic success, ::Dynamic failure);
		static ::Dynamic mapEitherFuture_dyn();

		static  ::thx::promise::Future flatMapEitherFuture( ::thx::promise::Future this1, ::Dynamic success, ::Dynamic failure);
		static ::Dynamic flatMapEitherFuture_dyn();

		static  ::thx::promise::Future flatMapEither( ::thx::promise::Future this1, ::Dynamic success, ::Dynamic failure);
		static ::Dynamic flatMapEither_dyn();

		static  ::thx::promise::Future mapFailure( ::thx::promise::Future this1, ::Dynamic failure);
		static ::Dynamic mapFailure_dyn();

		static  ::thx::promise::Future mapFailureFuture( ::thx::promise::Future this1, ::Dynamic failure);
		static ::Dynamic mapFailureFuture_dyn();

		static  ::thx::promise::Future mapFailurePromise( ::thx::promise::Future this1, ::Dynamic failure);
		static ::Dynamic mapFailurePromise_dyn();

		static  ::thx::promise::Future recover( ::thx::promise::Future this1, ::Dynamic failure);
		static ::Dynamic recover_dyn();

		static  ::thx::promise::Future recoverAsFuture( ::thx::promise::Future this1, ::Dynamic failure);
		static ::Dynamic recoverAsFuture_dyn();

		static  ::thx::promise::Future map( ::thx::promise::Future this1, ::Dynamic success);
		static ::Dynamic map_dyn();

		static  ::thx::promise::Future ap( ::thx::promise::Future this1, ::thx::promise::Future pf);
		static ::Dynamic ap_dyn();

		static  ::thx::promise::Future mapSuccess( ::thx::promise::Future this1, ::Dynamic success);
		static ::Dynamic mapSuccess_dyn();

		static  ::thx::promise::Future flatMap( ::thx::promise::Future this1, ::Dynamic success);
		static ::Dynamic flatMap_dyn();

		static  ::thx::promise::Future append( ::thx::promise::Future this1, ::Dynamic success);
		static ::Dynamic append_dyn();

		static  ::thx::promise::Future andThen( ::thx::promise::Future this1, ::Dynamic next);
		static ::Dynamic andThen_dyn();

		static  ::thx::promise::Future foreachM( ::thx::promise::Future this1, ::Dynamic f);
		static ::Dynamic foreachM_dyn();

		static  ::thx::promise::Future mapSuccessPromise( ::thx::promise::Future this1, ::Dynamic success);
		static ::Dynamic mapSuccessPromise_dyn();

		static  ::thx::promise::Future mapNull( ::thx::promise::Future this1, ::Dynamic handler);
		static ::Dynamic mapNull_dyn();

		static  ::thx::promise::Future recoverNull( ::thx::promise::Future this1, ::Dynamic handler);
		static ::Dynamic recoverNull_dyn();

		static  ::thx::promise::Future success( ::thx::promise::Future this1, ::Dynamic success);
		static ::Dynamic success_dyn();

		static  ::thx::promise::Future throwFailure( ::thx::promise::Future this1);
		static ::Dynamic throwFailure_dyn();

		static ::String toString( ::thx::promise::Future this1);
		static ::Dynamic toString_dyn();

		static  ::thx::promise::Future toFuture( ::thx::promise::Future this1);
		static ::Dynamic toFuture_dyn();

};

} // end namespace thx
} // end namespace promise
} // end namespace _Promise

#endif /* INCLUDED_thx_promise__Promise_Promise_Impl_ */ 
