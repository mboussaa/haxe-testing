// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_promise_TestPromise
#define INCLUDED_thx_promise_TestPromise

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,promise,Future)
HX_DECLARE_CLASS2(thx,promise,TestPromise)

namespace thx{
namespace promise{


class HXCPP_CLASS_ATTRIBUTES TestPromise_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestPromise_obj OBJ_;
		TestPromise_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.promise.TestPromise")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.promise.TestPromise"); }
		static hx::ObjectPtr< TestPromise_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestPromise_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestPromise","\x49","\x53","\xe5","\x98"); }

		Int x;
		void testResolveBefore();
		::Dynamic testResolveBefore_dyn();

		void testRejectBefore();
		::Dynamic testRejectBefore_dyn();

		void testMapSuccessWithValue();
		::Dynamic testMapSuccessWithValue_dyn();

		void testMapSuccessWithFailure();
		::Dynamic testMapSuccessWithFailure_dyn();

		void testAllSuccess();
		::Dynamic testAllSuccess_dyn();

		void testAllFailure1();
		::Dynamic testAllFailure1_dyn();

		void testAllFailure2();
		::Dynamic testAllFailure2_dyn();

		void testAfterAllSuccess();
		::Dynamic testAfterAllSuccess_dyn();

		void testAfterAllFailure1();
		::Dynamic testAfterAllFailure1_dyn();

		void testAfterAllFailure2();
		::Dynamic testAfterAllFailure2_dyn();

		void testJoinSuccess();
		::Dynamic testJoinSuccess_dyn();

		void testJoinFailure();
		::Dynamic testJoinFailure_dyn();

		void testJoin3Success();
		::Dynamic testJoin3Success_dyn();

		void testJoin3Failure1();
		::Dynamic testJoin3Failure1_dyn();

		void testJoin3Failure2();
		::Dynamic testJoin3Failure2_dyn();

		void testJoin4Success();
		::Dynamic testJoin4Success_dyn();

		void testJoin4Failure1();
		::Dynamic testJoin4Failure1_dyn();

		void testJoin4Failure2();
		::Dynamic testJoin4Failure2_dyn();

		void testJoin5Success();
		::Dynamic testJoin5Success_dyn();

		void testJoin5Failure1();
		::Dynamic testJoin5Failure1_dyn();

		void testJoin5Failure2();
		::Dynamic testJoin5Failure2_dyn();

		void testJoin6Success();
		::Dynamic testJoin6Success_dyn();

		void testJoin6Failure1();
		::Dynamic testJoin6Failure1_dyn();

		void testJoin6Failure2();
		::Dynamic testJoin6Failure2_dyn();

		void testMapTupleSuccess();
		::Dynamic testMapTupleSuccess_dyn();

		void testMapTupleFailure();
		::Dynamic testMapTupleFailure_dyn();

		void testAllMapToTupleFailure();
		::Dynamic testAllMapToTupleFailure_dyn();

		void testMapSuccessFailure();
		::Dynamic testMapSuccessFailure_dyn();

		void testTuple3();
		::Dynamic testTuple3_dyn();

		 ::thx::promise::Future res(::String val);
		::Dynamic res_dyn();

		 ::thx::promise::Future rej(::String msg);
		::Dynamic rej_dyn();

};

} // end namespace thx
} // end namespace promise

#endif /* INCLUDED_thx_promise_TestPromise */ 
