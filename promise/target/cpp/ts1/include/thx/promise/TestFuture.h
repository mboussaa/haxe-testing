// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_promise_TestFuture
#define INCLUDED_thx_promise_TestFuture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,promise,TestFuture)

namespace thx{
namespace promise{


class HXCPP_CLASS_ATTRIBUTES TestFuture_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestFuture_obj OBJ_;
		TestFuture_obj();

	public:
		void __construct(Int i);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.promise.TestFuture")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.promise.TestFuture"); }
		static hx::ObjectPtr< TestFuture_obj > __new(Int i);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestFuture_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestFuture","\x55","\xe2","\xf3","\x82"); }

		Int x;
		void testThenBefore();
		::Dynamic testThenBefore_dyn();

		void testMap();
		::Dynamic testMap_dyn();

		void testMapAsync();
		::Dynamic testMapAsync_dyn();

		void testFlatten();
		::Dynamic testFlatten_dyn();

		void testFlatMap();
		::Dynamic testFlatMap_dyn();

		void testTuple3();
		::Dynamic testTuple3_dyn();

};

} // end namespace thx
} // end namespace promise

#endif /* INCLUDED_thx_promise_TestFuture */ 
