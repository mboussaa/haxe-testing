// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_promise_Future
#define INCLUDED_thx_promise_Future

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,ds,Option)
HX_DECLARE_CLASS2(thx,promise,Future)

namespace thx{
namespace promise{


class HXCPP_CLASS_ATTRIBUTES Future_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Future_obj OBJ_;
		Future_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="thx.promise.Future")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"thx.promise.Future"); }
		static hx::ObjectPtr< Future_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Future_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Future","\x63","\x0c","\xe3","\xa7"); }

		static  ::thx::promise::Future sequence(::Array< ::Dynamic> arr);
		static ::Dynamic sequence_dyn();

		static  ::thx::promise::Future afterAll(::Array< ::Dynamic> arr);
		static ::Dynamic afterAll_dyn();

		static  ::thx::promise::Future all(::Array< ::Dynamic> arr);
		static ::Dynamic all_dyn();

		static  ::thx::promise::Future create( ::Dynamic handler);
		static ::Dynamic create_dyn();

		static  ::thx::promise::Future flatten( ::thx::promise::Future future);
		static ::Dynamic flatten_dyn();

		static  ::thx::promise::Future value( ::Dynamic v);
		static ::Dynamic value_dyn();

		::Array< ::Dynamic> handlers;
		::hx::EnumBase state;
		Bool hasValue();
		::Dynamic hasValue_dyn();

		 ::thx::promise::Future map( ::Dynamic handler);
		::Dynamic map_dyn();

		 ::thx::promise::Future mapAsync( ::Dynamic handler);
		::Dynamic mapAsync_dyn();

		 ::thx::promise::Future mapPromise( ::Dynamic handler);
		::Dynamic mapPromise_dyn();

		 ::thx::promise::Future nil();
		::Dynamic nil_dyn();

		 ::thx::promise::Future mapFuture( ::Dynamic handler);
		::Dynamic mapFuture_dyn();

		 ::thx::promise::Future flatMap( ::Dynamic handler);
		::Dynamic flatMap_dyn();

		 ::thx::promise::Future then( ::Dynamic handler);
		::Dynamic then_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::thx::promise::Future setState( ::Dynamic newstate);
		::Dynamic setState_dyn();

		void update();
		::Dynamic update_dyn();

};

} // end namespace thx
} // end namespace promise

#endif /* INCLUDED_thx_promise_Future */ 
