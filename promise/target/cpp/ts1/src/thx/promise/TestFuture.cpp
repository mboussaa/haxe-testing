// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_promise_Future
#include <thx/promise/Future.h>
#endif
#ifndef INCLUDED_thx_promise_FutureTuple3
#include <thx/promise/FutureTuple3.h>
#endif
#ifndef INCLUDED_thx_promise_TestFuture
#include <thx/promise/TestFuture.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace promise{

void TestFuture_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.promise.TestFuture","new",0x151381e4,"thx.promise.TestFuture.new","thx/promise/TestFuture.hx",12,0xf269e3ca)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  12)		this->x = i;
            	}

Dynamic TestFuture_obj::__CreateEmpty() { return new TestFuture_obj; }

hx::ObjectPtr< TestFuture_obj > TestFuture_obj::__new(Int i)
{
	hx::ObjectPtr< TestFuture_obj > _hx_result = new TestFuture_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestFuture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestFuture_obj > _hx_result = new TestFuture_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestFuture_obj::testThenBefore(){
            	HX_STACK_FRAME("thx.promise.TestFuture","testThenBefore",0x28cb6b2a,"thx.promise.TestFuture.testThenBefore","thx/promise/TestFuture.hx",16,0xf269e3ca)
            	HX_STACK_THIS(this)
HXLINE(  16)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  16)		HX_VARI( Int,_g) = this->x;
HXDLIN(  16)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run(Int v){
            				HX_STACK_FRAME("thx.promise.TestFuture","testThenBefore",0x28cb6b2a,"thx.promise.TestFuture.testThenBefore","thx/promise/TestFuture.hx",17,0xf269e3ca)
            				HX_STACK_ARG(v,"v")
HXLINE(  17)				::utest::Assert_obj::equals((int)1,v,null(),hx::SourceInfo(HX_("TestFuture.hx",89,c3,77,31),17,HX_("thx.promise.TestFuture",f2,ff,f3,fb),HX_("testThenBefore",2e,f6,aa,b1)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  16)			++_g1;
HXLINE(  17)			::thx::promise::Future_obj::value((int)1)->then( ::Dynamic(new _hx_Closure_0()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFuture_obj,testThenBefore,(void))

void TestFuture_obj::testMap(){
            	HX_STACK_FRAME("thx.promise.TestFuture","testMap",0x8b923cee,"thx.promise.TestFuture.testMap","thx/promise/TestFuture.hx",55,0xf269e3ca)
            	HX_STACK_THIS(this)
HXLINE(  55)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  55)		HX_VARI( Int,_g) = this->x;
HXDLIN(  55)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			::String _hx_run(Int i){
            				HX_STACK_FRAME("thx.promise.TestFuture","testMap",0x8b923cee,"thx.promise.TestFuture.testMap","thx/promise/TestFuture.hx",57,0xf269e3ca)
            				HX_STACK_ARG(i,"i")
HXLINE(  57)				return (HX_("",00,00,00,00) + i);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::Dynamic a2){
            				HX_STACK_FRAME("thx.promise.TestFuture","testMap",0x8b923cee,"thx.promise.TestFuture.testMap","thx/promise/TestFuture.hx",58,0xf269e3ca)
            				HX_STACK_ARG(a2,"a2")
HXLINE(  58)				::utest::Assert_obj::equals(HX_("1",31,00,00,00),a2,null(),hx::SourceInfo(HX_("TestFuture.hx",89,c3,77,31),58,HX_("thx.promise.TestFuture",f2,ff,f3,fb),HX_("testMap",6a,79,c1,bd)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  55)			++_g1;
HXLINE(  56)			::thx::promise::Future_obj::value((int)1)->map( ::Dynamic(new _hx_Closure_0()))->then( ::Dynamic(new _hx_Closure_1()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFuture_obj,testMap,(void))

void TestFuture_obj::testMapAsync(){
            	HX_STACK_FRAME("thx.promise.TestFuture","testMapAsync",0x8f2f936e,"thx.promise.TestFuture.testMapAsync","thx/promise/TestFuture.hx",62,0xf269e3ca)
            	HX_STACK_THIS(this)
HXLINE(  62)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  62)		HX_VARI( Int,_g) = this->x;
HXDLIN(  62)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			void _hx_run(Int v, ::Dynamic callback){
            				HX_STACK_FRAME("thx.promise.TestFuture","testMapAsync",0x8f2f936e,"thx.promise.TestFuture.testMapAsync","thx/promise/TestFuture.hx",64,0xf269e3ca)
            				HX_STACK_ARG(v,"v")
            				HX_STACK_ARG(callback,"callback")
HXLINE(  64)				callback((HX_("",00,00,00,00) + v));
            			}
            			HX_END_LOCAL_FUNC2((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::Dynamic a2){
            				HX_STACK_FRAME("thx.promise.TestFuture","testMapAsync",0x8f2f936e,"thx.promise.TestFuture.testMapAsync","thx/promise/TestFuture.hx",65,0xf269e3ca)
            				HX_STACK_ARG(a2,"a2")
HXLINE(  65)				::utest::Assert_obj::equals(HX_("1",31,00,00,00),a2,null(),hx::SourceInfo(HX_("TestFuture.hx",89,c3,77,31),65,HX_("thx.promise.TestFuture",f2,ff,f3,fb),HX_("testMapAsync",72,95,87,10)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  62)			++_g1;
HXLINE(  63)			::thx::promise::Future_obj::value((int)1)->mapAsync( ::Dynamic(new _hx_Closure_0()))->then( ::Dynamic(new _hx_Closure_1()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFuture_obj,testMapAsync,(void))

void TestFuture_obj::testFlatten(){
            	HX_STACK_FRAME("thx.promise.TestFuture","testFlatten",0xbd976f16,"thx.promise.TestFuture.testFlatten","thx/promise/TestFuture.hx",69,0xf269e3ca)
            	HX_STACK_THIS(this)
HXLINE(  69)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  69)		HX_VARI( Int,_g) = this->x;
HXDLIN(  69)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::thx::promise::Future,future) HXARGC(1)
            			void _hx_run( ::Dynamic callback){
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,callback) HXARGC(1)
            				void _hx_run( ::thx::promise::Future future1){
            					HX_STACK_FRAME("thx.promise.TestFuture","testFlatten",0xbd976f16,"thx.promise.TestFuture.testFlatten","thx/promise/TestFuture.hx",70,0xf269e3ca)
            					HX_STACK_ARG(future1,"future1")
HXLINE(  70)					future1->then(callback);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_STACK_FRAME("thx.promise.TestFuture","testFlatten",0xbd976f16,"thx.promise.TestFuture.testFlatten","thx/promise/TestFuture.hx",70,0xf269e3ca)
            				HX_STACK_ARG(callback,"callback")
HXLINE(  70)				future->then( ::Dynamic(new _hx_Closure_0(callback)));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			void _hx_run( ::Dynamic a2){
            				HX_STACK_FRAME("thx.promise.TestFuture","testFlatten",0xbd976f16,"thx.promise.TestFuture.testFlatten","thx/promise/TestFuture.hx",72,0xf269e3ca)
            				HX_STACK_ARG(a2,"a2")
HXLINE(  72)				::utest::Assert_obj::equals((int)1,a2,null(),hx::SourceInfo(HX_("TestFuture.hx",89,c3,77,31),72,HX_("thx.promise.TestFuture",f2,ff,f3,fb),HX_("testFlatten",92,99,c4,a3)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  69)			++_g1;
HXLINE(  70)			 ::thx::promise::Future _hx_tmp = ::thx::promise::Future_obj::value((int)1);
HXDLIN(  70)			HX_VARI(  ::thx::promise::Future,future) = ::thx::promise::Future_obj::value(_hx_tmp);
HXDLIN(  70)			 ::thx::promise::Future _hx_tmp1 = ::thx::promise::Future_obj::create( ::Dynamic(new _hx_Closure_1(future)));
HXDLIN(  70)			_hx_tmp1->then( ::Dynamic(new _hx_Closure_2()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFuture_obj,testFlatten,(void))

void TestFuture_obj::testFlatMap(){
            	HX_STACK_FRAME("thx.promise.TestFuture","testFlatMap",0xbd79d3b5,"thx.promise.TestFuture.testFlatMap","thx/promise/TestFuture.hx",76,0xf269e3ca)
            	HX_STACK_THIS(this)
HXLINE(  76)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  76)		HX_VARI( Int,_g) = this->x;
HXDLIN(  76)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			 ::thx::promise::Future _hx_run(Int v){
            				HX_STACK_FRAME("thx.promise.TestFuture","testFlatMap",0xbd79d3b5,"thx.promise.TestFuture.testFlatMap","thx/promise/TestFuture.hx",78,0xf269e3ca)
            				HX_STACK_ARG(v,"v")
HXLINE(  78)				return ::thx::promise::Future_obj::value((HX_("",00,00,00,00) + v));
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::Dynamic a2){
            				HX_STACK_FRAME("thx.promise.TestFuture","testFlatMap",0xbd79d3b5,"thx.promise.TestFuture.testFlatMap","thx/promise/TestFuture.hx",79,0xf269e3ca)
            				HX_STACK_ARG(a2,"a2")
HXLINE(  79)				::utest::Assert_obj::equals(HX_("1",31,00,00,00),a2,null(),hx::SourceInfo(HX_("TestFuture.hx",89,c3,77,31),79,HX_("thx.promise.TestFuture",f2,ff,f3,fb),HX_("testFlatMap",31,fe,a6,a3)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  76)			++_g1;
HXLINE(  77)			::thx::promise::Future_obj::value((int)1)->flatMap( ::Dynamic(new _hx_Closure_0()))->then( ::Dynamic(new _hx_Closure_1()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFuture_obj,testFlatMap,(void))

void TestFuture_obj::testTuple3(){
            	HX_STACK_FRAME("thx.promise.TestFuture","testTuple3",0x12a17819,"thx.promise.TestFuture.testTuple3","thx/promise/TestFuture.hx",108,0xf269e3ca)
            	HX_STACK_THIS(this)
HXLINE( 108)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 108)		HX_VARI( Int,_g) = this->x;
HXDLIN( 108)		while((_g1 < _g)){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(3)
            			void _hx_run(Int a,::String b,Float c){
            				HX_STACK_FRAME("thx.promise.TestFuture","testTuple3",0x12a17819,"thx.promise.TestFuture.testTuple3","thx/promise/TestFuture.hx",112,0xf269e3ca)
            				HX_STACK_ARG(a,"a")
            				HX_STACK_ARG(b,"b")
            				HX_STACK_ARG(c,"c")
HXLINE( 113)				::utest::Assert_obj::equals((int)1,a,null(),hx::SourceInfo(HX_("TestFuture.hx",89,c3,77,31),113,HX_("thx.promise.TestFuture",f2,ff,f3,fb),HX_("testTuple3",1d,31,96,22)));
HXLINE( 114)				::utest::Assert_obj::equals(HX_("a",61,00,00,00),b,null(),hx::SourceInfo(HX_("TestFuture.hx",89,c3,77,31),114,HX_("thx.promise.TestFuture",f2,ff,f3,fb),HX_("testTuple3",1d,31,96,22)));
HXLINE( 115)				::utest::Assert_obj::equals(((Float)0.2),c,null(),hx::SourceInfo(HX_("TestFuture.hx",89,c3,77,31),115,HX_("thx.promise.TestFuture",f2,ff,f3,fb),HX_("testTuple3",1d,31,96,22)));
HXLINE( 116)				done();
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 108)			++_g1;
HXLINE( 109)			HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 110)			 ::thx::promise::Future _hx_tmp = ::thx::promise::Future_obj::value( ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("_0",f1,52,00,00),(int)1)
            				->setFixed(1,HX_("_1",f2,52,00,00),HX_("a",61,00,00,00))
            				->setFixed(2,HX_("_2",f3,52,00,00),((Float)0.2))));
HXDLIN( 110)			::thx::promise::FutureTuple3_obj::tuple(_hx_tmp, ::Dynamic(new _hx_Closure_0(done)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestFuture_obj,testTuple3,(void))


TestFuture_obj::TestFuture_obj()
{
}

hx::Val TestFuture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testMap") ) { return hx::Val( testMap_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testTuple3") ) { return hx::Val( testTuple3_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testFlatten") ) { return hx::Val( testFlatten_dyn()); }
		if (HX_FIELD_EQ(inName,"testFlatMap") ) { return hx::Val( testFlatMap_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testMapAsync") ) { return hx::Val( testMapAsync_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testThenBefore") ) { return hx::Val( testThenBefore_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestFuture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestFuture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestFuture_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestFuture_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestFuture_obj_sStaticStorageInfo = 0;
#endif

static ::String TestFuture_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testThenBefore","\x2e","\xf6","\xaa","\xb1"),
	HX_HCSTRING("testMap","\x6a","\x79","\xc1","\xbd"),
	HX_HCSTRING("testMapAsync","\x72","\x95","\x87","\x10"),
	HX_HCSTRING("testFlatten","\x92","\x99","\xc4","\xa3"),
	HX_HCSTRING("testFlatMap","\x31","\xfe","\xa6","\xa3"),
	HX_HCSTRING("testTuple3","\x1d","\x31","\x96","\x22"),
	::String(null()) };

static void TestFuture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestFuture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestFuture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestFuture_obj::__mClass,"__mClass");
};

#endif

hx::Class TestFuture_obj::__mClass;

void TestFuture_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.promise.TestFuture","\xf2","\xff","\xf3","\xfb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestFuture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestFuture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestFuture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestFuture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestFuture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestFuture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace promise
