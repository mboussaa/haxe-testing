// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Nil
#include <thx/Nil.h>
#endif
#ifndef INCLUDED_thx__Tuple_Tuple2_Impl_
#include <thx/_Tuple/Tuple2_Impl_.h>
#endif
#ifndef INCLUDED_thx_promise_Future
#include <thx/promise/Future.h>
#endif
#ifndef INCLUDED_thx_promise_PromiseTuple2
#include <thx/promise/PromiseTuple2.h>
#endif
#ifndef INCLUDED_thx_promise_PromiseTuple3
#include <thx/promise/PromiseTuple3.h>
#endif
#ifndef INCLUDED_thx_promise_Promises
#include <thx/promise/Promises.h>
#endif
#ifndef INCLUDED_thx_promise_TestPromise
#include <thx/promise/TestPromise.h>
#endif
#ifndef INCLUDED_thx_promise__Promise_Promise_Impl_
#include <thx/promise/_Promise/Promise_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace promise{

void TestPromise_obj::__construct(){
            	HX_STACK_FRAME("thx.promise.TestPromise","new",0xdf0535fe,"thx.promise.TestPromise.new","thx/promise/TestPromise.hx",10,0x643e7bb4)
            	HX_STACK_THIS(this)
            	}

Dynamic TestPromise_obj::__CreateEmpty() { return new TestPromise_obj; }

hx::ObjectPtr< TestPromise_obj > TestPromise_obj::__new()
{
	hx::ObjectPtr< TestPromise_obj > _hx_result = new TestPromise_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestPromise_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestPromise_obj > _hx_result = new TestPromise_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestPromise_obj::testResolveBefore(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run(Int v){
            			HX_STACK_FRAME("thx.promise.TestPromise","testResolveBefore",0x3a0ccef7,"thx.promise.TestPromise.testResolveBefore","thx/promise/TestPromise.hx",15,0x643e7bb4)
            			HX_STACK_ARG(v,"v")
HXLINE(  16)			::utest::Assert_obj::equals((int)1,v,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),16,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testResolveBefore",d9,10,48,2e)));
HXLINE(  17)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testResolveBefore",0x3a0ccef7,"thx.promise.TestPromise.testResolveBefore","thx/promise/TestPromise.hx",12,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE(  13)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE(  14)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN(  14)		::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp, ::Dynamic(new _hx_Closure_0(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testResolveBefore,(void))

void TestPromise_obj::testRejectBefore(){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::thx::Error,error, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error e){
            			HX_STACK_FRAME("thx.promise.TestPromise","testRejectBefore",0x2be32252,"thx.promise.TestPromise.testRejectBefore","thx/promise/TestPromise.hx",65,0x643e7bb4)
            			HX_STACK_ARG(e,"e")
HXLINE(  66)			::utest::Assert_obj::equals(error,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),66,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testRejectBefore",b0,32,56,9c)));
HXLINE(  67)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testRejectBefore",0x2be32252,"thx.promise.TestPromise.testRejectBefore","thx/promise/TestPromise.hx",60,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE(  61)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN(  61)		HX_VARI(  ::thx::Error,error) =  ::thx::Error_obj::__new(HX_("Nooooo!",e0,e9,54,40),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),62,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testRejectBefore",b0,32,56,9c)));
HXLINE(  64)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::error(error);
HXDLIN(  64)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp, ::Dynamic(new _hx_Closure_0(error,done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testRejectBefore,(void))

void TestPromise_obj::testMapSuccessWithValue(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::thx::promise::Future _hx_run(Int v){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithValue",0x06d5bf70,"thx.promise.TestPromise.testMapSuccessWithValue","thx/promise/TestPromise.hx",74,0x643e7bb4)
            			HX_STACK_ARG(v,"v")
HXLINE(  74)			return ::thx::promise::_Promise::Promise_Impl__obj::value((v * (int)2));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		 ::thx::promise::Future _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithValue",0x06d5bf70,"thx.promise.TestPromise.testMapSuccessWithValue","thx/promise/TestPromise.hx",73,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE(  73)			return ::thx::promise::_Promise::Promise_Impl__obj::error(err);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Dynamic,done) HXARGC(1)
            		void _hx_run(Int v1){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithValue",0x06d5bf70,"thx.promise.TestPromise.testMapSuccessWithValue","thx/promise/TestPromise.hx",75,0x643e7bb4)
            			HX_STACK_ARG(v1,"v1")
HXLINE(  76)			::utest::Assert_obj::equals((int)2,v1,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),76,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessWithValue",d2,96,6a,02)));
HXLINE(  77)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithValue",0x06d5bf70,"thx.promise.TestPromise.testMapSuccessWithValue","thx/promise/TestPromise.hx",71,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE(  72)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE(  73)		HX_VARI_NAME(  ::thx::promise::Future,this1,"this") = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN(  73)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::flatMapEither(this1, ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()));
HXDLIN(  73)		::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp, ::Dynamic(new _hx_Closure_2(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testMapSuccessWithValue,(void))

void TestPromise_obj::testMapSuccessWithFailure(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::thx::promise::Future _hx_run(Int v){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithFailure",0x5de6ee09,"thx.promise.TestPromise.testMapSuccessWithFailure","thx/promise/TestPromise.hx",84,0x643e7bb4)
            			HX_STACK_ARG(v,"v")
HXLINE(  85)			::utest::Assert_obj::fail(HX_("should never touch this",00,16,03,7d),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),85,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessWithFailure",eb,e1,e9,09)));
HXLINE(  86)			return ::thx::promise::_Promise::Promise_Impl__obj::value((v * (int)2));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		 ::thx::promise::Future _hx_run( ::thx::Error err1){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithFailure",0x5de6ee09,"thx.promise.TestPromise.testMapSuccessWithFailure","thx/promise/TestPromise.hx",84,0x643e7bb4)
            			HX_STACK_ARG(err1,"err1")
HXLINE(  84)			return ::thx::promise::_Promise::Promise_Impl__obj::error(err1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::thx::Error,err, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error e){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithFailure",0x5de6ee09,"thx.promise.TestPromise.testMapSuccessWithFailure","thx/promise/TestPromise.hx",87,0x643e7bb4)
            			HX_STACK_ARG(e,"e")
HXLINE(  88)			::utest::Assert_obj::equals(err,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),88,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessWithFailure",eb,e1,e9,09)));
HXLINE(  89)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessWithFailure",0x5de6ee09,"thx.promise.TestPromise.testMapSuccessWithFailure","thx/promise/TestPromise.hx",81,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE(  82)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN(  82)		HX_VARI(  ::thx::Error,err) =  ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),83,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessWithFailure",eb,e1,e9,09)));
HXLINE(  84)		HX_VARI_NAME(  ::thx::promise::Future,this1,"this") = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXDLIN(  84)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::flatMapEither(this1, ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()));
HXDLIN(  84)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp, ::Dynamic(new _hx_Closure_2(err,done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testMapSuccessWithFailure,(void))

void TestPromise_obj::testAllSuccess(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run(::Array< Int > arr){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			Int _hx_run(Int acc,Int v){
            				HX_STACK_FRAME("thx.promise.TestPromise","testAllSuccess",0xe83eb4b6,"thx.promise.TestPromise.testAllSuccess","thx/promise/TestPromise.hx",99,0x643e7bb4)
            				HX_STACK_ARG(acc,"acc")
            				HX_STACK_ARG(v,"v")
HXLINE(  99)				return (acc + v);
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_STACK_FRAME("thx.promise.TestPromise","testAllSuccess",0xe83eb4b6,"thx.promise.TestPromise.testAllSuccess","thx/promise/TestPromise.hx",98,0x643e7bb4)
            			HX_STACK_ARG(arr,"arr")
HXLINE(  99)			Int _hx_tmp3 = ( (Int)(::thx::Arrays_obj::reduce(arr, ::Dynamic(new _hx_Closure_0()),(int)0)) );
HXDLIN(  99)			::utest::Assert_obj::equals((int)3,_hx_tmp3,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),99,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllSuccess",94,51,ea,20)));
HXLINE( 100)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testAllSuccess",0xe83eb4b6,"thx.promise.TestPromise.testAllSuccess","thx/promise/TestPromise.hx",93,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE(  94)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE(  96)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXLINE(  97)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value((int)2);
HXLINE(  95)		 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::sequence(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_hx_tmp1));
HXDLIN(  95)		::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp2, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAllSuccess,(void))

void TestPromise_obj::testAllFailure1(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::Array< Int > arr){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure1",0xc6b45654,"thx.promise.TestPromise.testAllFailure1","thx/promise/TestPromise.hx",112,0x643e7bb4)
            			HX_STACK_ARG(arr,"arr")
HXLINE( 112)			::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),112,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllFailure1",b6,fb,31,24)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::thx::Error,err, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error e){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure1",0xc6b45654,"thx.promise.TestPromise.testAllFailure1","thx/promise/TestPromise.hx",114,0x643e7bb4)
            			HX_STACK_ARG(e,"e")
HXLINE( 115)			::utest::Assert_obj::equals(err,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),115,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllFailure1",b6,fb,31,24)));
HXLINE( 116)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure1",0xc6b45654,"thx.promise.TestPromise.testAllFailure1","thx/promise/TestPromise.hx",104,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 105)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN( 105)		HX_VARI(  ::thx::Error,err) =  ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),106,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllFailure1",b6,fb,31,24)));
HXLINE( 108)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXLINE( 109)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXLINE( 107)		 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::sequence(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_hx_tmp1));
HXDLIN( 107)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp2, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 107)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp3, ::Dynamic(new _hx_Closure_1(err,done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAllFailure1,(void))

void TestPromise_obj::testAllFailure2(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::Array< ::String > arr){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure2",0xc6b45655,"thx.promise.TestPromise.testAllFailure2","thx/promise/TestPromise.hx",124,0x643e7bb4)
            			HX_STACK_ARG(arr,"arr")
HXLINE( 124)			::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),124,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllFailure2",b7,fb,31,24)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error e){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure2",0xc6b45655,"thx.promise.TestPromise.testAllFailure2","thx/promise/TestPromise.hx",126,0x643e7bb4)
            			HX_STACK_ARG(e,"e")
HXLINE( 127)			::utest::Assert_obj::pass(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),127,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllFailure2",b7,fb,31,24)));
HXLINE( 128)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testAllFailure2",0xc6b45655,"thx.promise.TestPromise.testAllFailure2","thx/promise/TestPromise.hx",120,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 121)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 122)		 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 122)		 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 122)		 ::thx::promise::Future _hx_tmp2 = this->rej(null());
HXDLIN( 122)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::sequence(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2));
HXDLIN( 122)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 122)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAllFailure2,(void))

void TestPromise_obj::testAfterAllSuccess(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run(::hx::EnumBase n){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllSuccess",0x81213d4a,"thx.promise.TestPromise.testAfterAllSuccess","thx/promise/TestPromise.hx",135,0x643e7bb4)
            			HX_STACK_ARG(n,"n")
HXLINE( 136)			::utest::Assert_obj::equals(::thx::Nil_obj::nil_dyn(),n,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),136,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllSuccess",ac,3b,1a,6c)));
HXLINE( 137)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllSuccess",0x81213d4a,"thx.promise.TestPromise.testAfterAllSuccess","thx/promise/TestPromise.hx",139,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 140)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),140,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllSuccess",ac,3b,1a,6c)));
HXLINE( 141)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllSuccess",0x81213d4a,"thx.promise.TestPromise.testAfterAllSuccess","thx/promise/TestPromise.hx",132,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 133)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 134)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN( 134)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value((int)2);
HXDLIN( 134)		 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::value((int)3);
HXDLIN( 134)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::afterAll(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2));
HXDLIN( 134)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 134)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAfterAllSuccess,(void))

void TestPromise_obj::testAfterAllFailure1(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run(::hx::EnumBase n){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure1",0xf4094f40,"thx.promise.TestPromise.testAfterAllFailure1","thx/promise/TestPromise.hx",148,0x643e7bb4)
            			HX_STACK_ARG(n,"n")
HXLINE( 149)			::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),149,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllFailure1",9e,e6,ee,a2)));
HXLINE( 150)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure1",0xf4094f40,"thx.promise.TestPromise.testAfterAllFailure1","thx/promise/TestPromise.hx",152,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 153)			::utest::Assert_obj::pass(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),153,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllFailure1",9e,e6,ee,a2)));
HXLINE( 154)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure1",0xf4094f40,"thx.promise.TestPromise.testAfterAllFailure1","thx/promise/TestPromise.hx",145,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 146)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 147)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN( 147)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value((int)2);
HXDLIN( 147)		 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(HX_("rejected",7e,ff,83,ab),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),147,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllFailure1",9e,e6,ee,a2))));
HXDLIN( 147)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::afterAll(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2));
HXDLIN( 147)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 147)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAfterAllFailure1,(void))

void TestPromise_obj::testAfterAllFailure2(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run(::hx::EnumBase n){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure2",0xf4094f41,"thx.promise.TestPromise.testAfterAllFailure2","thx/promise/TestPromise.hx",162,0x643e7bb4)
            			HX_STACK_ARG(n,"n")
HXLINE( 163)			::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),163,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllFailure2",9f,e6,ee,a2)));
HXLINE( 164)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure2",0xf4094f41,"thx.promise.TestPromise.testAfterAllFailure2","thx/promise/TestPromise.hx",166,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 167)			::utest::Assert_obj::pass(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),167,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAfterAllFailure2",9f,e6,ee,a2)));
HXLINE( 168)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testAfterAllFailure2",0xf4094f41,"thx.promise.TestPromise.testAfterAllFailure2","thx/promise/TestPromise.hx",159,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 160)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 161)		 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 161)		 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 161)		 ::thx::promise::Future _hx_tmp2 = this->rej(null());
HXDLIN( 161)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::afterAll(::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2));
HXDLIN( 161)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 161)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAfterAllFailure2,(void))

void TestPromise_obj::testJoinSuccess(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic t){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoinSuccess",0x52041265,"thx.promise.TestPromise.testJoinSuccess","thx/promise/TestPromise.hx",176,0x643e7bb4)
            			HX_STACK_ARG(t,"t")
HXLINE( 177)			::utest::Assert_obj::equals((int)1, ::Dynamic(t->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),177,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoinSuccess",c7,b7,81,af)));
HXLINE( 178)			::utest::Assert_obj::equals((int)2, ::Dynamic(t->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),178,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoinSuccess",c7,b7,81,af)));
HXLINE( 179)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoinSuccess",0x52041265,"thx.promise.TestPromise.testJoinSuccess","thx/promise/TestPromise.hx",172,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 173)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 174)		HX_VARI(  ::thx::promise::Future,p1) = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN( 174)		HX_VARI(  ::thx::promise::Future,p2) = ::thx::promise::_Promise::Promise_Impl__obj::value((int)2);
HXDLIN( 174)		 ::thx::promise::Future _hx_tmp = ::thx::promise::Promises_obj::par(::thx::_Tuple::Tuple2_Impl__obj::of_dyn(),p1,p2);
HXDLIN( 174)		::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp, ::Dynamic(new _hx_Closure_0(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoinSuccess,(void))

void TestPromise_obj::testJoinFailure(){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::thx::Error,err, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error e){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoinFailure",0xb0b05cec,"thx.promise.TestPromise.testJoinFailure","thx/promise/TestPromise.hx",188,0x643e7bb4)
            			HX_STACK_ARG(e,"e")
HXLINE( 189)			::utest::Assert_obj::equals(err,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),189,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoinFailure",4e,02,2e,0e)));
HXLINE( 190)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::Dynamic t){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoinFailure",0xb0b05cec,"thx.promise.TestPromise.testJoinFailure","thx/promise/TestPromise.hx",193,0x643e7bb4)
            			HX_STACK_ARG(t,"t")
HXLINE( 193)			::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),193,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoinFailure",4e,02,2e,0e)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoinFailure",0xb0b05cec,"thx.promise.TestPromise.testJoinFailure","thx/promise/TestPromise.hx",183,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 184)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN( 184)		HX_VARI(  ::thx::Error,err) =  ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),185,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoinFailure",4e,02,2e,0e)));
HXLINE( 186)		HX_VARI(  ::thx::promise::Future,p1) = ::thx::promise::_Promise::Promise_Impl__obj::value((int)1);
HXDLIN( 186)		HX_VARI(  ::thx::promise::Future,p2) = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXDLIN( 186)		 ::thx::promise::Future _hx_tmp = ::thx::promise::Promises_obj::par(::thx::_Tuple::Tuple2_Impl__obj::of_dyn(),p1,p2);
HXDLIN( 186)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp, ::Dynamic(new _hx_Closure_0(err,done)));
HXDLIN( 186)		::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp1, ::Dynamic(new _hx_Closure_1()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoinFailure,(void))

void TestPromise_obj::testJoin3Success(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Success",0xf6736ece,"thx.promise.TestPromise.testJoin3Success","thx/promise/TestPromise.hx",200,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 201)			::utest::Assert_obj::same(HX_("1",31,00,00,00), ::Dynamic(tuple->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),201,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Success",2c,7f,e6,66)));
HXLINE( 202)			::utest::Assert_obj::same(HX_("2",32,00,00,00), ::Dynamic(tuple->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),202,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Success",2c,7f,e6,66)));
HXLINE( 203)			::utest::Assert_obj::same(HX_("3",33,00,00,00), ::Dynamic(tuple->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),203,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Success",2c,7f,e6,66)));
HXLINE( 204)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Success",0xf6736ece,"thx.promise.TestPromise.testJoin3Success","thx/promise/TestPromise.hx",207,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 207)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),207,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Success",2c,7f,e6,66)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Success",0xf6736ece,"thx.promise.TestPromise.testJoin3Success","thx/promise/TestPromise.hx",197,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 198)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 199)		 ::thx::promise::Future _hx_tmp = this->res(HX_("1",31,00,00,00));
HXDLIN( 199)		 ::thx::promise::Future _hx_tmp1 = this->res(HX_("2",32,00,00,00));
HXDLIN( 199)		 ::thx::promise::Future _hx_tmp2 = this->res(HX_("3",33,00,00,00));
HXDLIN( 199)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::Promises_obj::join3(_hx_tmp,_hx_tmp1,_hx_tmp2);
HXDLIN( 199)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 199)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin3Success,(void))

void TestPromise_obj::testJoin3Failure1(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure1",0x26a2713c,"thx.promise.TestPromise.testJoin3Failure1","thx/promise/TestPromise.hx",214,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 215)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),215,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Failure1",1e,b3,dd,1a)));
HXLINE( 216)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure1",0x26a2713c,"thx.promise.TestPromise.testJoin3Failure1","thx/promise/TestPromise.hx",218,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 219)			::utest::Assert_obj::same(HX_("3",33,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),219,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Failure1",1e,b3,dd,1a)));
HXLINE( 220)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure1",0x26a2713c,"thx.promise.TestPromise.testJoin3Failure1","thx/promise/TestPromise.hx",211,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 212)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 213)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("1",31,00,00,00));
HXDLIN( 213)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("2",32,00,00,00));
HXDLIN( 213)		 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(HX_("3",33,00,00,00),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),213,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Failure1",1e,b3,dd,1a))));
HXDLIN( 213)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::Promises_obj::join3(_hx_tmp,_hx_tmp1,_hx_tmp2);
HXDLIN( 213)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 213)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin3Failure1,(void))

void TestPromise_obj::testJoin3Failure2(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure2",0x26a2713d,"thx.promise.TestPromise.testJoin3Failure2","thx/promise/TestPromise.hx",227,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 228)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),228,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Failure2",1f,b3,dd,1a)));
HXLINE( 229)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure2",0x26a2713d,"thx.promise.TestPromise.testJoin3Failure2","thx/promise/TestPromise.hx",231,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 232)			::utest::Assert_obj::same(HX_("3",33,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),232,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin3Failure2",1f,b3,dd,1a)));
HXLINE( 233)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin3Failure2",0x26a2713d,"thx.promise.TestPromise.testJoin3Failure2","thx/promise/TestPromise.hx",224,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 225)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 226)		 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 226)		 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 226)		 ::thx::promise::Future _hx_tmp2 = this->rej(HX_("3",33,00,00,00));
HXDLIN( 226)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::Promises_obj::join3(_hx_tmp,_hx_tmp1,_hx_tmp2);
HXDLIN( 226)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp3, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 226)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp4, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin3Failure2,(void))

void TestPromise_obj::testJoin4Success(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Success",0x2fa5e0ed,"thx.promise.TestPromise.testJoin4Success","thx/promise/TestPromise.hx",240,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 241)			::utest::Assert_obj::same(HX_("1",31,00,00,00), ::Dynamic(tuple->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),241,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Success",4b,f1,18,a0)));
HXLINE( 242)			::utest::Assert_obj::same(HX_("2",32,00,00,00), ::Dynamic(tuple->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),242,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Success",4b,f1,18,a0)));
HXLINE( 243)			::utest::Assert_obj::same(HX_("3",33,00,00,00), ::Dynamic(tuple->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),243,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Success",4b,f1,18,a0)));
HXLINE( 244)			::utest::Assert_obj::same(HX_("4",34,00,00,00), ::Dynamic(tuple->__Field(HX_("_3",f4,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),244,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Success",4b,f1,18,a0)));
HXLINE( 245)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Success",0x2fa5e0ed,"thx.promise.TestPromise.testJoin4Success","thx/promise/TestPromise.hx",248,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 248)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),248,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Success",4b,f1,18,a0)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Success",0x2fa5e0ed,"thx.promise.TestPromise.testJoin4Success","thx/promise/TestPromise.hx",237,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 238)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 239)		 ::thx::promise::Future _hx_tmp = this->res(HX_("1",31,00,00,00));
HXDLIN( 239)		 ::thx::promise::Future _hx_tmp1 = this->res(HX_("2",32,00,00,00));
HXDLIN( 239)		 ::thx::promise::Future _hx_tmp2 = this->res(HX_("3",33,00,00,00));
HXDLIN( 239)		 ::thx::promise::Future _hx_tmp3 = this->res(HX_("4",34,00,00,00));
HXDLIN( 239)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::Promises_obj::join4(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3);
HXDLIN( 239)		 ::thx::promise::Future _hx_tmp5 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp4, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 239)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp5, ::Dynamic(new _hx_Closure_1()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin4Success,(void))

void TestPromise_obj::testJoin4Failure1(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure1",0xf993da3d,"thx.promise.TestPromise.testJoin4Failure1","thx/promise/TestPromise.hx",255,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 256)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),256,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Failure1",1f,1c,cf,ed)));
HXLINE( 257)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure1",0xf993da3d,"thx.promise.TestPromise.testJoin4Failure1","thx/promise/TestPromise.hx",259,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 260)			::utest::Assert_obj::same(HX_("4",34,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),260,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Failure1",1f,1c,cf,ed)));
HXLINE( 261)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure1",0xf993da3d,"thx.promise.TestPromise.testJoin4Failure1","thx/promise/TestPromise.hx",252,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 253)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 254)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("1",31,00,00,00));
HXDLIN( 254)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("2",32,00,00,00));
HXDLIN( 254)		 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("3",33,00,00,00));
HXDLIN( 254)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(HX_("4",34,00,00,00),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),254,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Failure1",1f,1c,cf,ed))));
HXDLIN( 254)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::Promises_obj::join4(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3);
HXDLIN( 254)		 ::thx::promise::Future _hx_tmp5 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp4, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 254)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp5, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin4Failure1,(void))

void TestPromise_obj::testJoin4Failure2(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure2",0xf993da3e,"thx.promise.TestPromise.testJoin4Failure2","thx/promise/TestPromise.hx",268,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 269)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),269,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Failure2",20,1c,cf,ed)));
HXLINE( 270)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure2",0xf993da3e,"thx.promise.TestPromise.testJoin4Failure2","thx/promise/TestPromise.hx",272,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 273)			::utest::Assert_obj::same(HX_("4",34,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),273,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin4Failure2",20,1c,cf,ed)));
HXLINE( 274)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin4Failure2",0xf993da3e,"thx.promise.TestPromise.testJoin4Failure2","thx/promise/TestPromise.hx",265,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 266)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 267)		 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 267)		 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 267)		 ::thx::promise::Future _hx_tmp2 = this->res(null());
HXDLIN( 267)		 ::thx::promise::Future _hx_tmp3 = this->rej(HX_("4",34,00,00,00));
HXDLIN( 267)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::Promises_obj::join4(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3);
HXDLIN( 267)		 ::thx::promise::Future _hx_tmp5 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp4, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 267)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp5, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin4Failure2,(void))

void TestPromise_obj::testJoin5Success(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Success",0x68d8530c,"thx.promise.TestPromise.testJoin5Success","thx/promise/TestPromise.hx",281,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 282)			::utest::Assert_obj::same(HX_("1",31,00,00,00), ::Dynamic(tuple->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),282,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
HXLINE( 283)			::utest::Assert_obj::same(HX_("2",32,00,00,00), ::Dynamic(tuple->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),283,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
HXLINE( 284)			::utest::Assert_obj::same(HX_("3",33,00,00,00), ::Dynamic(tuple->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),284,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
HXLINE( 285)			::utest::Assert_obj::same(HX_("4",34,00,00,00), ::Dynamic(tuple->__Field(HX_("_3",f4,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),285,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
HXLINE( 286)			::utest::Assert_obj::same(HX_("5",35,00,00,00), ::Dynamic(tuple->__Field(HX_("_4",f5,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),286,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
HXLINE( 287)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Success",0x68d8530c,"thx.promise.TestPromise.testJoin5Success","thx/promise/TestPromise.hx",290,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 290)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),290,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Success",6a,63,4b,d9)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Success",0x68d8530c,"thx.promise.TestPromise.testJoin5Success","thx/promise/TestPromise.hx",278,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 279)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 280)		 ::thx::promise::Future _hx_tmp = this->res(HX_("1",31,00,00,00));
HXDLIN( 280)		 ::thx::promise::Future _hx_tmp1 = this->res(HX_("2",32,00,00,00));
HXDLIN( 280)		 ::thx::promise::Future _hx_tmp2 = this->res(HX_("3",33,00,00,00));
HXDLIN( 280)		 ::thx::promise::Future _hx_tmp3 = this->res(HX_("4",34,00,00,00));
HXDLIN( 280)		 ::thx::promise::Future _hx_tmp4 = this->res(HX_("5",35,00,00,00));
HXDLIN( 280)		 ::thx::promise::Future _hx_tmp5 = ::thx::promise::Promises_obj::join5(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4);
HXDLIN( 280)		 ::thx::promise::Future _hx_tmp6 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp5, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 280)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp6, ::Dynamic(new _hx_Closure_1()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin5Success,(void))

void TestPromise_obj::testJoin5Failure1(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure1",0xcc85433e,"thx.promise.TestPromise.testJoin5Failure1","thx/promise/TestPromise.hx",297,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 298)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),298,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Failure1",20,85,c0,c0)));
HXLINE( 299)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure1",0xcc85433e,"thx.promise.TestPromise.testJoin5Failure1","thx/promise/TestPromise.hx",301,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 302)			::utest::Assert_obj::same(HX_("5",35,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),302,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Failure1",20,85,c0,c0)));
HXLINE( 303)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure1",0xcc85433e,"thx.promise.TestPromise.testJoin5Failure1","thx/promise/TestPromise.hx",294,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 295)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 296)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("1",31,00,00,00));
HXDLIN( 296)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("2",32,00,00,00));
HXDLIN( 296)		 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("3",33,00,00,00));
HXDLIN( 296)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("4",34,00,00,00));
HXDLIN( 296)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(HX_("5",35,00,00,00),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),296,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Failure1",20,85,c0,c0))));
HXDLIN( 296)		 ::thx::promise::Future _hx_tmp5 = ::thx::promise::Promises_obj::join5(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4);
HXDLIN( 296)		 ::thx::promise::Future _hx_tmp6 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp5, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 296)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp6, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin5Failure1,(void))

void TestPromise_obj::testJoin5Failure2(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure2",0xcc85433f,"thx.promise.TestPromise.testJoin5Failure2","thx/promise/TestPromise.hx",310,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 311)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),311,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Failure2",21,85,c0,c0)));
HXLINE( 312)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure2",0xcc85433f,"thx.promise.TestPromise.testJoin5Failure2","thx/promise/TestPromise.hx",314,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 315)			::utest::Assert_obj::same(HX_("5",35,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),315,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin5Failure2",21,85,c0,c0)));
HXLINE( 316)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin5Failure2",0xcc85433f,"thx.promise.TestPromise.testJoin5Failure2","thx/promise/TestPromise.hx",307,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 308)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 309)		 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 309)		 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 309)		 ::thx::promise::Future _hx_tmp2 = this->res(null());
HXDLIN( 309)		 ::thx::promise::Future _hx_tmp3 = this->res(null());
HXDLIN( 309)		 ::thx::promise::Future _hx_tmp4 = this->rej(HX_("5",35,00,00,00));
HXDLIN( 309)		 ::thx::promise::Future _hx_tmp5 = ::thx::promise::Promises_obj::join5(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4);
HXDLIN( 309)		 ::thx::promise::Future _hx_tmp6 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp5, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 309)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp6, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin5Failure2,(void))

void TestPromise_obj::testJoin6Success(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Success",0xa20ac52b,"thx.promise.TestPromise.testJoin6Success","thx/promise/TestPromise.hx",323,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 324)			::utest::Assert_obj::same(HX_("1",31,00,00,00), ::Dynamic(tuple->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),324,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 325)			::utest::Assert_obj::same(HX_("2",32,00,00,00), ::Dynamic(tuple->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),325,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 326)			::utest::Assert_obj::same(HX_("3",33,00,00,00), ::Dynamic(tuple->__Field(HX_("_2",f3,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),326,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 327)			::utest::Assert_obj::same(HX_("4",34,00,00,00), ::Dynamic(tuple->__Field(HX_("_3",f4,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),327,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 328)			::utest::Assert_obj::same(HX_("5",35,00,00,00), ::Dynamic(tuple->__Field(HX_("_4",f5,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),328,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 329)			::utest::Assert_obj::same(HX_("6",36,00,00,00), ::Dynamic(tuple->__Field(HX_("_5",f6,52,00,00),hx::paccDynamic)),null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),329,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
HXLINE( 330)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Success",0xa20ac52b,"thx.promise.TestPromise.testJoin6Success","thx/promise/TestPromise.hx",333,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 333)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),333,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Success",89,d5,7d,12)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Success",0xa20ac52b,"thx.promise.TestPromise.testJoin6Success","thx/promise/TestPromise.hx",320,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 321)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 322)		 ::thx::promise::Future _hx_tmp = this->res(HX_("1",31,00,00,00));
HXDLIN( 322)		 ::thx::promise::Future _hx_tmp1 = this->res(HX_("2",32,00,00,00));
HXDLIN( 322)		 ::thx::promise::Future _hx_tmp2 = this->res(HX_("3",33,00,00,00));
HXDLIN( 322)		 ::thx::promise::Future _hx_tmp3 = this->res(HX_("4",34,00,00,00));
HXDLIN( 322)		 ::thx::promise::Future _hx_tmp4 = this->res(HX_("5",35,00,00,00));
HXDLIN( 322)		 ::thx::promise::Future _hx_tmp5 = this->res(HX_("6",36,00,00,00));
HXDLIN( 322)		 ::thx::promise::Future _hx_tmp6 = ::thx::promise::Promises_obj::join6(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5);
HXDLIN( 322)		 ::thx::promise::Future _hx_tmp7 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp6, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 322)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp7, ::Dynamic(new _hx_Closure_1()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin6Success,(void))

void TestPromise_obj::testJoin6Failure1(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure1",0x9f76ac3f,"thx.promise.TestPromise.testJoin6Failure1","thx/promise/TestPromise.hx",340,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 341)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),341,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Failure1",21,ee,b1,93)));
HXLINE( 342)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure1",0x9f76ac3f,"thx.promise.TestPromise.testJoin6Failure1","thx/promise/TestPromise.hx",344,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 345)			::utest::Assert_obj::same(HX_("6",36,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),345,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Failure1",21,ee,b1,93)));
HXLINE( 346)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure1",0x9f76ac3f,"thx.promise.TestPromise.testJoin6Failure1","thx/promise/TestPromise.hx",337,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 338)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 339)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("1",31,00,00,00));
HXDLIN( 339)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("2",32,00,00,00));
HXDLIN( 339)		 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("3",33,00,00,00));
HXDLIN( 339)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("4",34,00,00,00));
HXDLIN( 339)		 ::thx::promise::Future _hx_tmp4 = ::thx::promise::_Promise::Promise_Impl__obj::value(HX_("5",35,00,00,00));
HXDLIN( 339)		 ::thx::promise::Future _hx_tmp5 = ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(HX_("6",36,00,00,00),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),339,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Failure1",21,ee,b1,93))));
HXDLIN( 339)		 ::thx::promise::Future _hx_tmp6 = ::thx::promise::Promises_obj::join6(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5);
HXDLIN( 339)		 ::thx::promise::Future _hx_tmp7 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp6, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 339)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp7, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin6Failure1,(void))

void TestPromise_obj::testJoin6Failure2(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::Dynamic tuple){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure2",0x9f76ac40,"thx.promise.TestPromise.testJoin6Failure2","thx/promise/TestPromise.hx",353,0x643e7bb4)
            			HX_STACK_ARG(tuple,"tuple")
HXLINE( 354)			::utest::Assert_obj::fail(null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),354,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Failure2",22,ee,b1,93)));
HXLINE( 355)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error err){
            			HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure2",0x9f76ac40,"thx.promise.TestPromise.testJoin6Failure2","thx/promise/TestPromise.hx",357,0x643e7bb4)
            			HX_STACK_ARG(err,"err")
HXLINE( 358)			::utest::Assert_obj::same(HX_("6",36,00,00,00),err->message,null(),null(),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),358,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testJoin6Failure2",22,ee,b1,93)));
HXLINE( 359)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testJoin6Failure2",0x9f76ac40,"thx.promise.TestPromise.testJoin6Failure2","thx/promise/TestPromise.hx",350,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 351)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 352)		 ::thx::promise::Future _hx_tmp = this->res(null());
HXDLIN( 352)		 ::thx::promise::Future _hx_tmp1 = this->res(null());
HXDLIN( 352)		 ::thx::promise::Future _hx_tmp2 = this->res(null());
HXDLIN( 352)		 ::thx::promise::Future _hx_tmp3 = this->res(null());
HXDLIN( 352)		 ::thx::promise::Future _hx_tmp4 = this->res(null());
HXDLIN( 352)		 ::thx::promise::Future _hx_tmp5 = this->rej(HX_("6",36,00,00,00));
HXDLIN( 352)		 ::thx::promise::Future _hx_tmp6 = ::thx::promise::Promises_obj::join6(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5);
HXDLIN( 352)		 ::thx::promise::Future _hx_tmp7 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp6, ::Dynamic(new _hx_Closure_0(done)));
HXDLIN( 352)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp7, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testJoin6Failure2,(void))

void TestPromise_obj::testMapTupleSuccess(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		 ::thx::promise::Future _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleSuccess",0x7ab800c3,"thx.promise.TestPromise.testMapTupleSuccess","thx/promise/TestPromise.hx",367,0x643e7bb4)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 367)			return ::thx::promise::_Promise::Promise_Impl__obj::value(((Float)a / (Float)b));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run(Float v){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleSuccess",0x7ab800c3,"thx.promise.TestPromise.testMapTupleSuccess","thx/promise/TestPromise.hx",369,0x643e7bb4)
            			HX_STACK_ARG(v,"v")
HXLINE( 370)			::utest::Assert_obj::equals(((Float)0.5),v,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),370,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapTupleSuccess",25,ff,b0,65)));
HXLINE( 371)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleSuccess",0x7ab800c3,"thx.promise.TestPromise.testMapTupleSuccess","thx/promise/TestPromise.hx",363,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 364)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 365)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),(int)1)
            			->setFixed(1,HX_("_1",f2,52,00,00),(int)2)));
HXDLIN( 365)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::PromiseTuple2_obj::mapTuplePromise(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 365)		::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp1, ::Dynamic(new _hx_Closure_1(done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testMapTupleSuccess,(void))

void TestPromise_obj::testMapTupleFailure(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		 ::thx::promise::Future _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleFailure",0xd9644b4a,"thx.promise.TestPromise.testMapTupleFailure","thx/promise/TestPromise.hx",380,0x643e7bb4)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 380)			return ::thx::promise::_Promise::Promise_Impl__obj::value(((Float)a / (Float)b));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::thx::Error,err, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error e){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleFailure",0xd9644b4a,"thx.promise.TestPromise.testMapTupleFailure","thx/promise/TestPromise.hx",382,0x643e7bb4)
            			HX_STACK_ARG(e,"e")
HXLINE( 383)			::utest::Assert_obj::equals(err,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),383,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapTupleFailure",ac,49,5d,c4)));
HXLINE( 384)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testMapTupleFailure",0xd9644b4a,"thx.promise.TestPromise.testMapTupleFailure","thx/promise/TestPromise.hx",375,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 376)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN( 376)		HX_VARI(  ::thx::Error,err) =  ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),377,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapTupleFailure",ac,49,5d,c4)));
HXLINE( 378)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXDLIN( 378)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::PromiseTuple2_obj::mapTuplePromise(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 378)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp1, ::Dynamic(new _hx_Closure_1(err,done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testMapTupleFailure,(void))

void TestPromise_obj::testAllMapToTupleFailure(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::thx::promise::Future _hx_run(::cpp::VirtualArray v){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAllMapToTupleFailure",0xc31fdfac,"thx.promise.TestPromise.testAllMapToTupleFailure","thx/promise/TestPromise.hx",395,0x643e7bb4)
            			HX_STACK_ARG(v,"v")
HXLINE( 396)			::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),396,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllMapToTupleFailure",0a,7e,c7,e9)));
HXLINE( 397)			return ::thx::promise::_Promise::Promise_Impl__obj::value( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("_0",f1,52,00,00),(int)1)
            				->setFixed(1,HX_("_1",f2,52,00,00),(int)2)));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		 ::thx::promise::Future _hx_run( ::thx::Error err1){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAllMapToTupleFailure",0xc31fdfac,"thx.promise.TestPromise.testAllMapToTupleFailure","thx/promise/TestPromise.hx",391,0x643e7bb4)
            			HX_STACK_ARG(err1,"err1")
HXLINE( 391)			return ::thx::promise::_Promise::Promise_Impl__obj::error(err1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            		 ::thx::promise::Future _hx_run(Int a,Int b){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAllMapToTupleFailure",0xc31fdfac,"thx.promise.TestPromise.testAllMapToTupleFailure","thx/promise/TestPromise.hx",399,0x643e7bb4)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 400)			::utest::Assert_obj::fail(HX_("should never happen",03,6d,31,84),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),400,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllMapToTupleFailure",0a,7e,c7,e9)));
HXLINE( 401)			return ::thx::promise::_Promise::Promise_Impl__obj::value(((Float)a / (Float)b));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::thx::Error,err, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::thx::Error e){
            			HX_STACK_FRAME("thx.promise.TestPromise","testAllMapToTupleFailure",0xc31fdfac,"thx.promise.TestPromise.testAllMapToTupleFailure","thx/promise/TestPromise.hx",403,0x643e7bb4)
            			HX_STACK_ARG(e,"e")
HXLINE( 404)			::utest::Assert_obj::equals(err,e,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),404,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllMapToTupleFailure",0a,7e,c7,e9)));
HXLINE( 405)			done();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testAllMapToTupleFailure",0xc31fdfac,"thx.promise.TestPromise.testAllMapToTupleFailure","thx/promise/TestPromise.hx",388,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 389)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXDLIN( 389)		HX_VARI(  ::thx::Error,err) =  ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),390,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testAllMapToTupleFailure",0a,7e,c7,e9)));
HXLINE( 392)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXLINE( 393)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::error(err);
HXLINE( 391)		HX_VARI_NAME(  ::thx::promise::Future,this1,"this") = ::thx::promise::_Promise::Promise_Impl__obj::sequence(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,_hx_tmp1));
HXDLIN( 391)		 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::flatMapEither(this1, ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()));
HXDLIN( 391)		 ::thx::promise::Future _hx_tmp3 = ::thx::promise::PromiseTuple2_obj::mapTuplePromise(_hx_tmp2, ::Dynamic(new _hx_Closure_2()));
HXDLIN( 391)		::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp3, ::Dynamic(new _hx_Closure_3(err,done)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testAllMapToTupleFailure,(void))

void TestPromise_obj::testMapSuccessFailure(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::Dynamic _hx_run(::hx::EnumBase _){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessFailure",0xaa3318ef,"thx.promise.TestPromise.testMapSuccessFailure","thx/promise/TestPromise.hx",412,0x643e7bb4)
            			HX_STACK_ARG(_,"_")
HXLINE( 412)			HX_STACK_DO_THROW(HX_("NOOO!",60,51,b5,1d));
HXDLIN( 412)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::Dynamic _1){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessFailure",0xaa3318ef,"thx.promise.TestPromise.testMapSuccessFailure","thx/promise/TestPromise.hx",413,0x643e7bb4)
            			HX_STACK_ARG(_1,"_1")
HXLINE( 413)			::utest::Assert_obj::fail(HX_("should never succeed",41,ef,cf,6a),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),413,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessFailure",d1,f3,31,04)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		void _hx_run( ::thx::Error e){
            			HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessFailure",0xaa3318ef,"thx.promise.TestPromise.testMapSuccessFailure","thx/promise/TestPromise.hx",414,0x643e7bb4)
            			HX_STACK_ARG(e,"e")
HXLINE( 414)			::String _hx_tmp3 = e->toString();
HXDLIN( 414)			::utest::Assert_obj::stringContains(HX_("NOOO!",60,51,b5,1d),_hx_tmp3,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),414,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testMapSuccessFailure",d1,f3,31,04)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testMapSuccessFailure",0xaa3318ef,"thx.promise.TestPromise.testMapSuccessFailure","thx/promise/TestPromise.hx",409,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 410)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 411)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::map(::thx::promise::_Promise::Promise_Impl__obj::nil, ::Dynamic(new _hx_Closure_0()));
HXDLIN( 411)		 ::thx::promise::Future _hx_tmp1 = ::thx::promise::_Promise::Promise_Impl__obj::success(_hx_tmp, ::Dynamic(new _hx_Closure_1()));
HXDLIN( 411)		 ::thx::promise::Future _hx_tmp2 = ::thx::promise::_Promise::Promise_Impl__obj::failure(_hx_tmp1, ::Dynamic(new _hx_Closure_2()));
HXDLIN( 411)		::thx::promise::_Promise::Promise_Impl__obj::always(_hx_tmp2,done);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testMapSuccessFailure,(void))

void TestPromise_obj::testTuple3(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(3)
            		void _hx_run(Int a,::String b,Float c){
            			HX_STACK_FRAME("thx.promise.TestPromise","testTuple3",0x202ddb3f,"thx.promise.TestPromise.testTuple3","thx/promise/TestPromise.hx",423,0x643e7bb4)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
            			HX_STACK_ARG(c,"c")
HXLINE( 424)			::utest::Assert_obj::equals((int)1,a,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),424,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testTuple3",1d,31,96,22)));
HXLINE( 425)			::utest::Assert_obj::equals(HX_("a",61,00,00,00),b,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),425,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testTuple3",1d,31,96,22)));
HXLINE( 426)			::utest::Assert_obj::equals(((Float)0.2),c,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),426,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testTuple3",1d,31,96,22)));
HXLINE( 427)			done();
            		}
            		HX_END_LOCAL_FUNC3((void))

            	HX_STACK_FRAME("thx.promise.TestPromise","testTuple3",0x202ddb3f,"thx.promise.TestPromise.testTuple3","thx/promise/TestPromise.hx",418,0x643e7bb4)
            	HX_STACK_THIS(this)
HXLINE( 419)		HX_VARI(  ::Dynamic,done) = ::utest::Assert_obj::createAsync(null(),null());
HXLINE( 420)		 ::thx::Error_obj::__new(HX_("error",c8,cb,29,73),null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),420,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("testTuple3",1d,31,96,22)));
HXLINE( 421)		 ::thx::promise::Future _hx_tmp = ::thx::promise::_Promise::Promise_Impl__obj::value( ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("_0",f1,52,00,00),(int)1)
            			->setFixed(1,HX_("_1",f2,52,00,00),HX_("a",61,00,00,00))
            			->setFixed(2,HX_("_2",f3,52,00,00),((Float)0.2))));
HXDLIN( 421)		::thx::promise::PromiseTuple3_obj::tuple(_hx_tmp, ::Dynamic(new _hx_Closure_0(done)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestPromise_obj,testTuple3,(void))

 ::thx::promise::Future TestPromise_obj::res(::String __o_val){
::String val = __o_val.Default(HX_HCSTRING("resolved","\xf8","\x7b","\xb0","\x0c"));
            	HX_STACK_FRAME("thx.promise.TestPromise","res",0xdf083efe,"thx.promise.TestPromise.res","thx/promise/TestPromise.hx",432,0x643e7bb4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(val,"val")
HXLINE( 432)		return ::thx::promise::_Promise::Promise_Impl__obj::value(val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestPromise_obj,res,return )

 ::thx::promise::Future TestPromise_obj::rej(::String __o_msg){
::String msg = __o_msg.Default(HX_HCSTRING("rejected","\x7e","\xff","\x83","\xab"));
            	HX_STACK_FRAME("thx.promise.TestPromise","rej",0xdf083ef5,"thx.promise.TestPromise.rej","thx/promise/TestPromise.hx",436,0x643e7bb4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(msg,"msg")
HXLINE( 436)		return ::thx::promise::_Promise::Promise_Impl__obj::error( ::thx::Error_obj::__new(msg,null(),hx::SourceInfo(HX_("TestPromise.hx",15,63,54,51),436,HX_("thx.promise.TestPromise",0c,1f,ff,ff),HX_("rej",57,d9,56,00))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestPromise_obj,rej,return )


TestPromise_obj::TestPromise_obj()
{
}

hx::Val TestPromise_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"res") ) { return hx::Val( res_dyn()); }
		if (HX_FIELD_EQ(inName,"rej") ) { return hx::Val( rej_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testTuple3") ) { return hx::Val( testTuple3_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testAllSuccess") ) { return hx::Val( testAllSuccess_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"testAllFailure1") ) { return hx::Val( testAllFailure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testAllFailure2") ) { return hx::Val( testAllFailure2_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoinSuccess") ) { return hx::Val( testJoinSuccess_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoinFailure") ) { return hx::Val( testJoinFailure_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testRejectBefore") ) { return hx::Val( testRejectBefore_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin3Success") ) { return hx::Val( testJoin3Success_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin4Success") ) { return hx::Val( testJoin4Success_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin5Success") ) { return hx::Val( testJoin5Success_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin6Success") ) { return hx::Val( testJoin6Success_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"testResolveBefore") ) { return hx::Val( testResolveBefore_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin3Failure1") ) { return hx::Val( testJoin3Failure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin3Failure2") ) { return hx::Val( testJoin3Failure2_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin4Failure1") ) { return hx::Val( testJoin4Failure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin4Failure2") ) { return hx::Val( testJoin4Failure2_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin5Failure1") ) { return hx::Val( testJoin5Failure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin5Failure2") ) { return hx::Val( testJoin5Failure2_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin6Failure1") ) { return hx::Val( testJoin6Failure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testJoin6Failure2") ) { return hx::Val( testJoin6Failure2_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testAfterAllSuccess") ) { return hx::Val( testAfterAllSuccess_dyn()); }
		if (HX_FIELD_EQ(inName,"testMapTupleSuccess") ) { return hx::Val( testMapTupleSuccess_dyn()); }
		if (HX_FIELD_EQ(inName,"testMapTupleFailure") ) { return hx::Val( testMapTupleFailure_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"testAfterAllFailure1") ) { return hx::Val( testAfterAllFailure1_dyn()); }
		if (HX_FIELD_EQ(inName,"testAfterAllFailure2") ) { return hx::Val( testAfterAllFailure2_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"testMapSuccessFailure") ) { return hx::Val( testMapSuccessFailure_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"testMapSuccessWithValue") ) { return hx::Val( testMapSuccessWithValue_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"testAllMapToTupleFailure") ) { return hx::Val( testAllMapToTupleFailure_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"testMapSuccessWithFailure") ) { return hx::Val( testMapSuccessWithFailure_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestPromise_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestPromise_obj_sStaticStorageInfo = 0;
#endif

static ::String TestPromise_obj_sMemberFields[] = {
	HX_HCSTRING("testResolveBefore","\xd9","\x10","\x48","\x2e"),
	HX_HCSTRING("testRejectBefore","\xb0","\x32","\x56","\x9c"),
	HX_HCSTRING("testMapSuccessWithValue","\xd2","\x96","\x6a","\x02"),
	HX_HCSTRING("testMapSuccessWithFailure","\xeb","\xe1","\xe9","\x09"),
	HX_HCSTRING("testAllSuccess","\x94","\x51","\xea","\x20"),
	HX_HCSTRING("testAllFailure1","\xb6","\xfb","\x31","\x24"),
	HX_HCSTRING("testAllFailure2","\xb7","\xfb","\x31","\x24"),
	HX_HCSTRING("testAfterAllSuccess","\xac","\x3b","\x1a","\x6c"),
	HX_HCSTRING("testAfterAllFailure1","\x9e","\xe6","\xee","\xa2"),
	HX_HCSTRING("testAfterAllFailure2","\x9f","\xe6","\xee","\xa2"),
	HX_HCSTRING("testJoinSuccess","\xc7","\xb7","\x81","\xaf"),
	HX_HCSTRING("testJoinFailure","\x4e","\x02","\x2e","\x0e"),
	HX_HCSTRING("testJoin3Success","\x2c","\x7f","\xe6","\x66"),
	HX_HCSTRING("testJoin3Failure1","\x1e","\xb3","\xdd","\x1a"),
	HX_HCSTRING("testJoin3Failure2","\x1f","\xb3","\xdd","\x1a"),
	HX_HCSTRING("testJoin4Success","\x4b","\xf1","\x18","\xa0"),
	HX_HCSTRING("testJoin4Failure1","\x1f","\x1c","\xcf","\xed"),
	HX_HCSTRING("testJoin4Failure2","\x20","\x1c","\xcf","\xed"),
	HX_HCSTRING("testJoin5Success","\x6a","\x63","\x4b","\xd9"),
	HX_HCSTRING("testJoin5Failure1","\x20","\x85","\xc0","\xc0"),
	HX_HCSTRING("testJoin5Failure2","\x21","\x85","\xc0","\xc0"),
	HX_HCSTRING("testJoin6Success","\x89","\xd5","\x7d","\x12"),
	HX_HCSTRING("testJoin6Failure1","\x21","\xee","\xb1","\x93"),
	HX_HCSTRING("testJoin6Failure2","\x22","\xee","\xb1","\x93"),
	HX_HCSTRING("testMapTupleSuccess","\x25","\xff","\xb0","\x65"),
	HX_HCSTRING("testMapTupleFailure","\xac","\x49","\x5d","\xc4"),
	HX_HCSTRING("testAllMapToTupleFailure","\x0a","\x7e","\xc7","\xe9"),
	HX_HCSTRING("testMapSuccessFailure","\xd1","\xf3","\x31","\x04"),
	HX_HCSTRING("testTuple3","\x1d","\x31","\x96","\x22"),
	HX_HCSTRING("res","\x60","\xd9","\x56","\x00"),
	HX_HCSTRING("rej","\x57","\xd9","\x56","\x00"),
	::String(null()) };

static void TestPromise_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestPromise_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestPromise_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestPromise_obj::__mClass,"__mClass");
};

#endif

hx::Class TestPromise_obj::__mClass;

void TestPromise_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.promise.TestPromise","\x0c","\x1f","\xff","\xff");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestPromise_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestPromise_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestPromise_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestPromise_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestPromise_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestPromise_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace promise
