// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise : global::haxe.lang.HxObject {
		
		public TestTryPromise(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestTryPromise(int i) {
			global::thx.promise.TestTryPromise.__hx_ctor_thx_promise_TestTryPromise(this, i);
		}
		
		
		public static void __hx_ctor_thx_promise_TestTryPromise(global::thx.promise.TestTryPromise __temp_me150, int i) {
			__temp_me150.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.promise.TestTryPromise(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.promise.TestTryPromise(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testTryCreate() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.success<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.create<object>(((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryCreate_16__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryCreate_16__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryCreate_16__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryCreate_16__Fun) (new global::thx.promise.TestTryPromise_testTryCreate_16__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryCreate_17__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryCreate_17__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryCreate_17__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryCreate_17__Fun) (new global::thx.promise.TestTryPromise_testTryCreate_17__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryCreate_18__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryCreate_18__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryCreate_18__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryCreate_18__Fun) (new global::thx.promise.TestTryPromise_testTryCreate_18__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
			}
			
		}
		
		
		public virtual void testTryEitherSuccess() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::haxe.lang.Function done = ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) );
				global::thx.promise._Promise.Promise_Impl_.either<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryEitherSuccess_27__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryEitherSuccess_27__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryEitherSuccess_27__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryEitherSuccess_27__Fun) (new global::thx.promise.TestTryPromise_testTryEitherSuccess_27__Fun()) )) )) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryEitherSuccess_28__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryEitherSuccess_28__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryEitherSuccess_28__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryEitherSuccess_28__Fun) (new global::thx.promise.TestTryPromise_testTryEitherSuccess_28__Fun()) )) )) )).then(new global::thx.promise.TestTryPromise_testTryEitherSuccess_30__Fun(done));
			}
			
		}
		
		
		public virtual void testTryEitherFailure() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::haxe.lang.Function done = ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) );
					global::thx.promise._Promise.Promise_Impl_.either<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.fail<object>(((string) ("no go") ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (42) )})) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryEitherFailure_44__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryEitherFailure_44__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryEitherFailure_44__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryEitherFailure_44__Fun) (new global::thx.promise.TestTryPromise_testTryEitherFailure_44__Fun()) )) )) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryEitherFailure_45__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryEitherFailure_45__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryEitherFailure_45__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryEitherFailure_45__Fun) (new global::thx.promise.TestTryPromise_testTryEitherFailure_45__Fun()) )) )) )).then(new global::thx.promise.TestTryPromise_testTryEitherFailure_47__Fun(done));
				}
				
			}
		}
		
		
		public virtual void testTrySuccess() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.success<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.success<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTrySuccess_59__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTrySuccess_59__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTrySuccess_59__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTrySuccess_59__Fun) (new global::thx.promise.TestTryPromise_testTrySuccess_59__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTrySuccess_60__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTrySuccess_60__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTrySuccess_60__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTrySuccess_60__Fun) (new global::thx.promise.TestTryPromise_testTrySuccess_60__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTrySuccess_61__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTrySuccess_61__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTrySuccess_61__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTrySuccess_61__Fun) (new global::thx.promise.TestTryPromise_testTrySuccess_61__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
			}
			
		}
		
		
		public virtual void testTryReject() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.success<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.fail<object>(((string) ("nops") ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryReject", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (67) )})) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryReject_68__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryReject_68__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryReject_68__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryReject_68__Fun) (new global::thx.promise.TestTryPromise_testTryReject_68__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryReject_69__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryReject_69__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryReject_69__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryReject_69__Fun) (new global::thx.promise.TestTryPromise_testTryReject_69__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryReject_70__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryReject_70__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryReject_70__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryReject_70__Fun) (new global::thx.promise.TestTryPromise_testTryReject_70__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
				}
				
			}
		}
		
		
		public virtual void testTryAlways() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryAlways_77__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryAlways_77__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryAlways_77__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryAlways_77__Fun) (new global::thx.promise.TestTryPromise_testTryAlways_77__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryAlways_78__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryAlways_78__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryAlways_78__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryAlways_78__Fun) (new global::thx.promise.TestTryPromise_testTryAlways_78__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
			}
			
		}
		
		
		public virtual void testTryThrowFailure() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.promise.Future<object> _e = global::thx.promise._Promise.Promise_Impl_.fail<object>(((string) ("meh") ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryThrowFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (84) )})) ));
					global::utest.Assert.raises(new global::thx.promise.TestTryPromise_testTryThrowFailure_84__Fun(_e), typeof(global::thx.Error), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryThrowFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (84) )}));
				}
				
			}
		}
		
		
		public virtual void testTryMap() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.map<object, object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryMap_90__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryMap_90__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryMap_90__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryMap_90__Fun) (new global::thx.promise.TestTryPromise_testTryMap_90__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryMap_91__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryMap_91__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryMap_91__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryMap_91__Fun) (new global::thx.promise.TestTryPromise_testTryMap_91__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
			}
			
		}
		
		
		public virtual void testTryFlatMap() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.flatMapEither<object, object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMap_98__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMap_98__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMap_98__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMap_98__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMap_98__Fun()) )) )) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMap_97__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMap_97__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMap_97__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMap_97__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMap_97__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMap_99__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMap_99__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMap_99__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMap_99__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMap_99__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
			}
			
		}
		
		
		public virtual void testTryFlatMapEitherSuccess() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.flatMapEither<object, object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_107__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_107__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_107__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_107__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_107__Fun()) )) )) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_108__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_108__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_108__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_108__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_108__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_110__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_110__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_110__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_110__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_110__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
			}
			
		}
		
		
		public virtual void testTryFlatMapEitherFailure() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.flatMapEither<object, object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.fail<object>(((string) ("bah") ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryFlatMapEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (116) )})) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_118__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_118__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_118__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_118__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_118__Fun()) )) )) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_119__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_119__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_119__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_119__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_119__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_121__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_121__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_121__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_121__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_121__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
				}
				
			}
		}
		
		
		public virtual void testTryRecoverNull() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.recoverNull<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.@value<object>(((object) (null) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryRecoverNull_128__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryRecoverNull_128__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryRecoverNull_128__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryRecoverNull_128__Fun) (new global::thx.promise.TestTryPromise_testTryRecoverNull_128__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryRecoverNull_129__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryRecoverNull_129__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryRecoverNull_129__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryRecoverNull_129__Fun) (new global::thx.promise.TestTryPromise_testTryRecoverNull_129__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
			}
			
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1771297218:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryRecoverNull", 1771297218)) );
					}
					
					
					case 935590347:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryFlatMapEitherFailure", 935590347)) );
					}
					
					
					case 1494724420:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryFlatMapEitherSuccess", 1494724420)) );
					}
					
					
					case 1849254746:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryFlatMap", 1849254746)) );
					}
					
					
					case 1849546259:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryMap", 1849546259)) );
					}
					
					
					case 741300589:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryThrowFailure", 741300589)) );
					}
					
					
					case 1680181176:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryAlways", 1680181176)) );
					}
					
					
					case 533973576:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryReject", 533973576)) );
					}
					
					
					case 1068071098:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTrySuccess", 1068071098)) );
					}
					
					
					case 307889084:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryEitherFailure", 307889084)) );
					}
					
					
					case 867023157:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryEitherSuccess", 867023157)) );
					}
					
					
					case 425582565:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryCreate", 425582565)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1771297218:
					{
						this.testTryRecoverNull();
						break;
					}
					
					
					case 935590347:
					{
						this.testTryFlatMapEitherFailure();
						break;
					}
					
					
					case 1494724420:
					{
						this.testTryFlatMapEitherSuccess();
						break;
					}
					
					
					case 1849254746:
					{
						this.testTryFlatMap();
						break;
					}
					
					
					case 1849546259:
					{
						this.testTryMap();
						break;
					}
					
					
					case 741300589:
					{
						this.testTryThrowFailure();
						break;
					}
					
					
					case 1680181176:
					{
						this.testTryAlways();
						break;
					}
					
					
					case 533973576:
					{
						this.testTryReject();
						break;
					}
					
					
					case 1068071098:
					{
						this.testTrySuccess();
						break;
					}
					
					
					case 307889084:
					{
						this.testTryEitherFailure();
						break;
					}
					
					
					case 867023157:
					{
						this.testTryEitherSuccess();
						break;
					}
					
					
					case 425582565:
					{
						this.testTryCreate();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryCreate_16__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryCreate_16__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryCreate_16__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Function reject = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float2) )) )) : (((global::haxe.lang.Function) (__fn_dyn2) )) );
			global::haxe.lang.Function resolve = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("oh boy");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryCreate_17__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryCreate_17__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryCreate_17__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				global::utest.Assert.fail("exception triggered resolve", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryCreate", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryCreate_18__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryCreate_18__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryCreate_18__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.pass(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryCreate", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherSuccess_30__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherSuccess_30__Fun(global::haxe.lang.Function done) : base(1, 0) {
			this.done = done;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Either r = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Either) (((object) (__fn_float1) )) )) : (((global::thx.Either) (__fn_dyn1) )) );
				switch (r.index) {
					case 0:
					{
						global::utest.Assert.pass(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherSuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
						break;
					}
					
					
					case 1:
					{
						global::utest.Assert.fail("not good", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherSuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (33) )}));
						break;
					}
					
					
				}
				
				this.done.__hx_invoke0_o();
				return null;
			}
		}
		
		
		public global::haxe.lang.Function done;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherSuccess_27__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherSuccess_27__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryEitherSuccess_27__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Nil _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("nops");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherSuccess_28__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherSuccess_28__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryEitherSuccess_28__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.fail("no reason to get here", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherSuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherFailure_47__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherFailure_47__Fun(global::haxe.lang.Function done) : base(1, 0) {
			this.done = done;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Either r = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Either) (((object) (__fn_float1) )) )) : (((global::thx.Either) (__fn_dyn1) )) );
				switch (r.index) {
					case 0:
					{
						global::utest.Assert.pass(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
						break;
					}
					
					
					case 1:
					{
						global::utest.Assert.fail("not good", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
						break;
					}
					
					
				}
				
				this.done.__hx_invoke0_o();
				return null;
			}
		}
		
		
		public global::haxe.lang.Function done;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherFailure_44__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherFailure_44__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryEitherFailure_44__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				global::utest.Assert.fail("no reason to get here", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherFailure_45__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherFailure_45__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryEitherFailure_45__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Error _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("nops");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTrySuccess_59__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTrySuccess_59__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTrySuccess_59__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Nil _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("nops");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTrySuccess_60__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTrySuccess_60__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTrySuccess_60__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Nil _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
				global::utest.Assert.fail("not piped to a failing promise", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrySuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTrySuccess_61__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTrySuccess_61__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTrySuccess_61__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error _2 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.pass(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrySuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryReject_68__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryReject_68__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryReject_68__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Error _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("niet");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryReject_69__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryReject_69__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryReject_69__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				global::utest.Assert.fail("not piped to a failing promise", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryReject", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryReject_70__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryReject_70__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryReject_70__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("niet", e.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryReject", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryAlways_77__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryAlways_77__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryAlways_77__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			throw global::haxe.lang.HaxeException.wrap("bad");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryAlways_78__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryAlways_78__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryAlways_78__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("bad", e.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryAlways", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (78) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryThrowFailure_84__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryThrowFailure_84__Fun(global::thx.promise.Future<object> _e) : base(0, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke0_o() {
			return global::thx.promise._Promise.Promise_Impl_.throwFailure<object>(((global::thx.promise.Future<object>) (this._e) ));
		}
		
		
		public global::thx.promise.Future<object> _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryMap_90__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryMap_90__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryMap_90__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Nil _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("meh");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryMap_91__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryMap_91__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryMap_91__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("meh", e.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryMap", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (91) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMap_98__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMap_98__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMap_98__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Nil _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("meh");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMap_97__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMap_97__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMap_97__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Error err = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
			return global::thx.promise._Promise.Promise_Impl_.error<object>(((global::thx.Error) (err) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMap_99__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMap_99__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMap_99__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("meh", e.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryFlatMap", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (99) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherSuccess_107__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherSuccess_107__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_107__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Nil _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("meh");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherSuccess_108__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherSuccess_108__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_108__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("mah");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherSuccess_110__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherSuccess_110__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_110__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("meh", e1.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryFlatMapEitherSuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (110) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherFailure_118__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherFailure_118__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_118__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("meh");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherFailure_119__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherFailure_119__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_119__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("mah");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherFailure_121__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherFailure_121__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_121__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("mah", e1.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryFlatMapEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (121) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryRecoverNull_128__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryRecoverNull_128__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryRecoverNull_128__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			throw global::haxe.lang.HaxeException.wrap("meh");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryRecoverNull_129__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryRecoverNull_129__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryRecoverNull_129__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("meh", e.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryRecoverNull", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (129) )}));
				return null;
			}
		}
		
		
	}
}


