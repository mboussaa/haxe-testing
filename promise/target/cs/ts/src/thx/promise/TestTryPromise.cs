// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise : global::haxe.lang.HxObject {
		
		public TestTryPromise(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestTryPromise() {
			global::thx.promise.TestTryPromise.__hx_ctor_thx_promise_TestTryPromise(this);
		}
		
		
		public static void __hx_ctor_thx_promise_TestTryPromise(global::thx.promise.TestTryPromise __temp_me152) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.promise.TestTryPromise(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.promise.TestTryPromise();
		}
		
		
		public virtual void testTryCreate() {
			global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.success<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.create<object>(((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryCreate_12__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryCreate_12__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryCreate_12__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryCreate_12__Fun) (new global::thx.promise.TestTryPromise_testTryCreate_12__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryCreate_13__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryCreate_13__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryCreate_13__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryCreate_13__Fun) (new global::thx.promise.TestTryPromise_testTryCreate_13__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryCreate_14__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryCreate_14__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryCreate_14__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryCreate_14__Fun) (new global::thx.promise.TestTryPromise_testTryCreate_14__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
		}
		
		
		public virtual void testTryEitherSuccess() {
			global::haxe.lang.Function done = ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) );
			global::thx.promise._Promise.Promise_Impl_.either<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryEitherSuccess_22__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryEitherSuccess_22__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryEitherSuccess_22__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryEitherSuccess_22__Fun) (new global::thx.promise.TestTryPromise_testTryEitherSuccess_22__Fun()) )) )) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryEitherSuccess_23__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryEitherSuccess_23__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryEitherSuccess_23__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryEitherSuccess_23__Fun) (new global::thx.promise.TestTryPromise_testTryEitherSuccess_23__Fun()) )) )) )).then(new global::thx.promise.TestTryPromise_testTryEitherSuccess_25__Fun(done));
		}
		
		
		public virtual void testTryEitherFailure() {
			unchecked {
				global::haxe.lang.Function done = ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) );
				global::thx.promise._Promise.Promise_Impl_.either<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.fail<object>(((string) ("no go") ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (36) )})) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryEitherFailure_38__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryEitherFailure_38__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryEitherFailure_38__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryEitherFailure_38__Fun) (new global::thx.promise.TestTryPromise_testTryEitherFailure_38__Fun()) )) )) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryEitherFailure_39__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryEitherFailure_39__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryEitherFailure_39__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryEitherFailure_39__Fun) (new global::thx.promise.TestTryPromise_testTryEitherFailure_39__Fun()) )) )) )).then(new global::thx.promise.TestTryPromise_testTryEitherFailure_41__Fun(done));
			}
		}
		
		
		public virtual void testTrySuccess() {
			global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.success<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.success<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTrySuccess_52__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTrySuccess_52__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTrySuccess_52__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTrySuccess_52__Fun) (new global::thx.promise.TestTryPromise_testTrySuccess_52__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTrySuccess_53__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTrySuccess_53__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTrySuccess_53__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTrySuccess_53__Fun) (new global::thx.promise.TestTryPromise_testTrySuccess_53__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTrySuccess_54__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTrySuccess_54__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTrySuccess_54__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTrySuccess_54__Fun) (new global::thx.promise.TestTryPromise_testTrySuccess_54__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
		}
		
		
		public virtual void testTryReject() {
			unchecked {
				global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.success<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.fail<object>(((string) ("nops") ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryReject", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (59) )})) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryReject_60__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryReject_60__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryReject_60__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryReject_60__Fun) (new global::thx.promise.TestTryPromise_testTryReject_60__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryReject_61__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryReject_61__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryReject_61__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryReject_61__Fun) (new global::thx.promise.TestTryPromise_testTryReject_61__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryReject_62__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryReject_62__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryReject_62__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryReject_62__Fun) (new global::thx.promise.TestTryPromise_testTryReject_62__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
			}
		}
		
		
		public virtual void testTryAlways() {
			global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryAlways_68__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryAlways_68__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryAlways_68__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryAlways_68__Fun) (new global::thx.promise.TestTryPromise_testTryAlways_68__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryAlways_69__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryAlways_69__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryAlways_69__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryAlways_69__Fun) (new global::thx.promise.TestTryPromise_testTryAlways_69__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
		}
		
		
		public virtual void testTryThrowFailure() {
			unchecked {
				global::thx.promise.Future<object> _e = global::thx.promise._Promise.Promise_Impl_.fail<object>(((string) ("meh") ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryThrowFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (74) )})) ));
				global::utest.Assert.raises(new global::thx.promise.TestTryPromise_testTryThrowFailure_74__Fun(_e), typeof(global::thx.Error), null, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryThrowFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (74) )}));
			}
		}
		
		
		public virtual void testTryMap() {
			global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.map<object, object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryMap_79__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryMap_79__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryMap_79__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryMap_79__Fun) (new global::thx.promise.TestTryPromise_testTryMap_79__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryMap_80__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryMap_80__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryMap_80__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryMap_80__Fun) (new global::thx.promise.TestTryPromise_testTryMap_80__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
		}
		
		
		public virtual void testTryFlatMap() {
			global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.flatMapEither<object, object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMap_86__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMap_86__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMap_86__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMap_86__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMap_86__Fun()) )) )) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMap_85__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMap_85__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMap_85__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMap_85__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMap_85__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMap_87__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMap_87__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMap_87__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMap_87__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMap_87__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
		}
		
		
		public virtual void testTryFlatMapEitherSuccess() {
			global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.flatMapEither<object, object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.nil) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_94__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_94__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_94__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_94__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_94__Fun()) )) )) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_95__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_95__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_95__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_95__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_95__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_97__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_97__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_97__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_97__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_97__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
		}
		
		
		public virtual void testTryFlatMapEitherFailure() {
			unchecked {
				global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.flatMapEither<object, object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.fail<object>(((string) ("bah") ), ((object) (new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryFlatMapEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (102) )})) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_104__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_104__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_104__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_104__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_104__Fun()) )) )) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_105__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_105__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_105__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_105__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_105__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_107__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_107__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_107__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_107__Fun) (new global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_107__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
			}
		}
		
		
		public virtual void testTryRecoverNull() {
			global::thx.promise._Promise.Promise_Impl_.always<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.failure<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.recoverNull<object>(((global::thx.promise.Future<object>) (global::thx.promise._Promise.Promise_Impl_.@value<object>(((object) (null) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryRecoverNull_113__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryRecoverNull_113__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryRecoverNull_113__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryRecoverNull_113__Fun) (new global::thx.promise.TestTryPromise_testTryRecoverNull_113__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (( (( global::thx.promise.TestTryPromise_testTryRecoverNull_114__Fun.__hx_current != null )) ? (global::thx.promise.TestTryPromise_testTryRecoverNull_114__Fun.__hx_current) : (global::thx.promise.TestTryPromise_testTryRecoverNull_114__Fun.__hx_current = ((global::thx.promise.TestTryPromise_testTryRecoverNull_114__Fun) (new global::thx.promise.TestTryPromise_testTryRecoverNull_114__Fun()) )) )) ))) ), ((global::haxe.lang.Function) (global::utest.Assert.createAsync.__hx_invoke2_o(default(double), null, default(double), (default(global::haxe.lang.Null<int>)).toDynamic())) ));
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1771297218:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryRecoverNull", 1771297218)) );
					}
					
					
					case 935590347:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryFlatMapEitherFailure", 935590347)) );
					}
					
					
					case 1494724420:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryFlatMapEitherSuccess", 1494724420)) );
					}
					
					
					case 1849254746:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryFlatMap", 1849254746)) );
					}
					
					
					case 1849546259:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryMap", 1849546259)) );
					}
					
					
					case 741300589:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryThrowFailure", 741300589)) );
					}
					
					
					case 1680181176:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryAlways", 1680181176)) );
					}
					
					
					case 533973576:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryReject", 533973576)) );
					}
					
					
					case 1068071098:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTrySuccess", 1068071098)) );
					}
					
					
					case 307889084:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryEitherFailure", 307889084)) );
					}
					
					
					case 867023157:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryEitherSuccess", 867023157)) );
					}
					
					
					case 425582565:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testTryCreate", 425582565)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1771297218:
					{
						this.testTryRecoverNull();
						break;
					}
					
					
					case 935590347:
					{
						this.testTryFlatMapEitherFailure();
						break;
					}
					
					
					case 1494724420:
					{
						this.testTryFlatMapEitherSuccess();
						break;
					}
					
					
					case 1849254746:
					{
						this.testTryFlatMap();
						break;
					}
					
					
					case 1849546259:
					{
						this.testTryMap();
						break;
					}
					
					
					case 741300589:
					{
						this.testTryThrowFailure();
						break;
					}
					
					
					case 1680181176:
					{
						this.testTryAlways();
						break;
					}
					
					
					case 533973576:
					{
						this.testTryReject();
						break;
					}
					
					
					case 1068071098:
					{
						this.testTrySuccess();
						break;
					}
					
					
					case 307889084:
					{
						this.testTryEitherFailure();
						break;
					}
					
					
					case 867023157:
					{
						this.testTryEitherSuccess();
						break;
					}
					
					
					case 425582565:
					{
						this.testTryCreate();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryCreate_12__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryCreate_12__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryCreate_12__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Function reject = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float2) )) )) : (((global::haxe.lang.Function) (__fn_dyn2) )) );
			global::haxe.lang.Function resolve = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("oh boy");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryCreate_13__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryCreate_13__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryCreate_13__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				global::utest.Assert.fail("exception triggered resolve", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryCreate", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (13) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryCreate_14__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryCreate_14__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryCreate_14__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.pass(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryCreate", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (14) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherSuccess_25__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherSuccess_25__Fun(global::haxe.lang.Function done) : base(1, 0) {
			this.done = done;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Either r = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Either) (((object) (__fn_float1) )) )) : (((global::thx.Either) (__fn_dyn1) )) );
				switch (r.index) {
					case 0:
					{
						global::utest.Assert.pass(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherSuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
						break;
					}
					
					
					case 1:
					{
						global::utest.Assert.fail("not good", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherSuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
						break;
					}
					
					
				}
				
				this.done.__hx_invoke0_o();
				return null;
			}
		}
		
		
		public global::haxe.lang.Function done;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherSuccess_22__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherSuccess_22__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryEitherSuccess_22__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Nil _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("nops");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherSuccess_23__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherSuccess_23__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryEitherSuccess_23__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.fail("no reason to get here", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherSuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherFailure_41__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherFailure_41__Fun(global::haxe.lang.Function done) : base(1, 0) {
			this.done = done;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Either r = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Either) (((object) (__fn_float1) )) )) : (((global::thx.Either) (__fn_dyn1) )) );
				switch (r.index) {
					case 0:
					{
						global::utest.Assert.pass(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
						break;
					}
					
					
					case 1:
					{
						global::utest.Assert.fail("not good", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
						break;
					}
					
					
				}
				
				this.done.__hx_invoke0_o();
				return null;
			}
		}
		
		
		public global::haxe.lang.Function done;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherFailure_38__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherFailure_38__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryEitherFailure_38__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				global::utest.Assert.fail("no reason to get here", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryEitherFailure_39__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryEitherFailure_39__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryEitherFailure_39__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Error _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("nops");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTrySuccess_52__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTrySuccess_52__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTrySuccess_52__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Nil _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("nops");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTrySuccess_53__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTrySuccess_53__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTrySuccess_53__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Nil _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
				global::utest.Assert.fail("not piped to a failing promise", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrySuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTrySuccess_54__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTrySuccess_54__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTrySuccess_54__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error _2 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.pass(null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTrySuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (54) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryReject_60__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryReject_60__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryReject_60__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Error _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("niet");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryReject_61__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryReject_61__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryReject_61__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				object _1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
				global::utest.Assert.fail("not piped to a failing promise", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryReject", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (61) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryReject_62__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryReject_62__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryReject_62__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("niet", e.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryReject", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (62) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryAlways_68__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryAlways_68__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryAlways_68__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			throw global::haxe.lang.HaxeException.wrap("bad");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryAlways_69__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryAlways_69__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryAlways_69__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("bad", e.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryAlways", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (69) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryThrowFailure_74__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryThrowFailure_74__Fun(global::thx.promise.Future<object> _e) : base(0, 0) {
			this._e = _e;
		}
		
		
		public override object __hx_invoke0_o() {
			return global::thx.promise._Promise.Promise_Impl_.throwFailure<object>(((global::thx.promise.Future<object>) (this._e) ));
		}
		
		
		public global::thx.promise.Future<object> _e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryMap_79__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryMap_79__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryMap_79__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Nil _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("meh");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryMap_80__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryMap_80__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryMap_80__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("meh", e.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryMap", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMap_86__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMap_86__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMap_86__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Nil _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("meh");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMap_85__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMap_85__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMap_85__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Error err = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
			return global::thx.promise._Promise.Promise_Impl_.error<object>(((global::thx.Error) (err) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMap_87__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMap_87__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMap_87__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("meh", e.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryFlatMap", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (87) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherSuccess_94__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherSuccess_94__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_94__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Nil _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Nil) (((object) (__fn_float1) )) )) : (((global::thx.Nil) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("meh");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherSuccess_95__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherSuccess_95__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_95__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("mah");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherSuccess_97__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherSuccess_97__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherSuccess_97__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("meh", e1.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryFlatMapEitherSuccess", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (97) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherFailure_104__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherFailure_104__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_104__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("meh");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherFailure_105__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherFailure_105__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_105__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
			throw global::haxe.lang.HaxeException.wrap("mah");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryFlatMapEitherFailure_107__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryFlatMapEitherFailure_107__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryFlatMapEitherFailure_107__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("mah", e1.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryFlatMapEitherFailure", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (107) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryRecoverNull_113__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryRecoverNull_113__Fun() : base(0, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryRecoverNull_113__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			throw global::haxe.lang.HaxeException.wrap("meh");
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.promise {
	public class TestTryPromise_testTryRecoverNull_114__Fun : global::haxe.lang.Function {
		
		public TestTryPromise_testTryRecoverNull_114__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.promise.TestTryPromise_testTryRecoverNull_114__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::thx.Error e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.Error) (((object) (__fn_float1) )) )) : (((global::thx.Error) (__fn_dyn1) )) );
				global::utest.Assert.stringContains("meh", e.message, null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testTryRecoverNull", "thx.promise.TestTryPromise", "TestTryPromise.hx"}, new int[]{1981972957}, new double[]{((double) (114) )}));
				return null;
			}
		}
		
		
	}
}


