<?php

// Generated by Haxe 3.3.0
class thx_promise_FutureTuple5 {
	public function __construct(){}
	static function join($p1, $p2) {
		return thx_promise_Future::create(array(new _hx_lambda(array(&$p1, &$p2), "thx_promise_FutureTuple5_0"), 'execute'));
	}
	static function mapTuple($future, $callback) {
		return $future->map(array(new _hx_lambda(array(&$callback), "thx_promise_FutureTuple5_1"), 'execute'));
	}
	static function mapTupleAsync($future, $callback) {
		return $future->mapAsync(array(new _hx_lambda(array(&$callback), "thx_promise_FutureTuple5_2"), 'execute'));
	}
	static function mapTupleFuture($future, $callback) {
		return $future->flatMap(array(new _hx_lambda(array(&$callback), "thx_promise_FutureTuple5_3"), 'execute'));
	}
	static function tuple($future, $callback) {
		return $future->then(array(new _hx_lambda(array(&$callback), "thx_promise_FutureTuple5_4"), 'execute'));
	}
	function __toString() { return 'thx.promise.FutureTuple5'; }
}
function thx_promise_FutureTuple5_0(&$p1, &$p2, $callback) {
	{
		thx_promise_Futures::join($p1, $p2)->then(array(new _hx_lambda(array(&$callback), "thx_promise_FutureTuple5_5"), 'execute'));
	}
}
function thx_promise_FutureTuple5_1(&$callback, $t) {
	{
		return call_user_func_array($callback, array($t->_0, $t->_1, $t->_2, $t->_3, $t->_4));
	}
}
function thx_promise_FutureTuple5_2(&$callback, $t, $cb) {
	{
		call_user_func_array($callback, array($t->_0, $t->_1, $t->_2, $t->_3, $t->_4, $cb));
		return;
	}
}
function thx_promise_FutureTuple5_3(&$callback, $t) {
	{
		return call_user_func_array($callback, array($t->_0, $t->_1, $t->_2, $t->_3, $t->_4));
	}
}
function thx_promise_FutureTuple5_4(&$callback, $t) {
	{
		call_user_func_array($callback, array($t->_0, $t->_1, $t->_2, $t->_3, $t->_4));
	}
}
function thx_promise_FutureTuple5_5(&$callback, $t) {
	{
		$this1 = $t->_0;
		call_user_func_array($callback, array(_hx_anonymous(array("_0" => $this1->_0, "_1" => $this1->_1, "_2" => $this1->_2, "_3" => $this1->_3, "_4" => $this1->_4, "_5" => $t->_1))));
	}
}
