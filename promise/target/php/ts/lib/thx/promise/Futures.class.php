<?php

// Generated by Haxe 3.3.0
class thx_promise_Futures {
	public function __construct(){}
	static function join($p1, $p2) {
		return thx_promise_Future::create(array(new _hx_lambda(array(&$p1, &$p2), "thx_promise_Futures_0"), 'execute'));
	}
	static function log($future, $prefix = null) {
		if($prefix === null) {
			$prefix = "";
		}
		return $future->then(array(new _hx_lambda(array(&$prefix), "thx_promise_Futures_1"), 'execute'));
	}
	function __toString() { return 'thx.promise.Futures'; }
}
function thx_promise_Futures_0(&$p1, &$p2, $callback) {
	{
		$counter = 0;
		$v1 = null;
		$v2 = null;
		$complete = array(new _hx_lambda(array(&$callback, &$counter, &$v1, &$v2), "thx_promise_Futures_2"), 'execute');
		$p1->then(array(new _hx_lambda(array(&$complete, &$counter, &$v1), "thx_promise_Futures_3"), 'execute'));
		$p2->then(array(new _hx_lambda(array(&$complete, &$counter, &$v2), "thx_promise_Futures_4"), 'execute'));
	}
}
function thx_promise_Futures_1(&$prefix, $r) {
	{
		$tmp = "" . _hx_string_or_null($prefix) . " VALUE: ";
		$tmp1 = Std::string($r);
		haxe_Log::trace(_hx_string_or_null($tmp) . _hx_string_or_null($tmp1), _hx_anonymous(array("fileName" => "Future.hx", "lineNumber" => 171, "className" => "thx.promise.Futures", "methodName" => "log")));
	}
}
function thx_promise_Futures_2(&$callback, &$counter, &$v1, &$v2) {
	{
		if($counter < 2) {
			return;
		}
		call_user_func_array($callback, array(_hx_anonymous(array("_0" => $v1, "_1" => $v2))));
	}
}
function thx_promise_Futures_3(&$complete, &$counter, &$v1, $v) {
	{
		++$counter;
		$v1 = $v;
		call_user_func($complete);
	}
}
function thx_promise_Futures_4(&$complete, &$counter, &$v2, $v3) {
	{
		++$counter;
		$v2 = $v3;
		call_user_func($complete);
	}
}
