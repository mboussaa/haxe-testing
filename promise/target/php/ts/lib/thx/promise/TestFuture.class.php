<?php

// Generated by Haxe 3.3.0
class thx_promise_TestFuture {
	public function __construct() {}
	public function testThenBefore() {
		thx_promise_Future::value(1)->then(array(new _hx_lambda(array(), "thx_promise_TestFuture_0"), 'execute'));
	}
	public function testMap() {
		thx_promise_Future::value(1)->map(array(new _hx_lambda(array(), "thx_promise_TestFuture_1"), 'execute'))->then(array(new _hx_lambda(array(), "thx_promise_TestFuture_2"), 'execute'));
	}
	public function testMapAsync() {
		thx_promise_Future::value(1)->mapAsync(array(new _hx_lambda(array(), "thx_promise_TestFuture_3"), 'execute'))->then(array(new _hx_lambda(array(), "thx_promise_TestFuture_4"), 'execute'));
	}
	public function testFlatten() {
		$tmp = thx_promise_Future::value(1);
		$future = thx_promise_Future::value($tmp);
		$tmp1 = thx_promise_Future::create(array(new _hx_lambda(array(&$future), "thx_promise_TestFuture_5"), 'execute'));
		$tmp1->then(array(new _hx_lambda(array(), "thx_promise_TestFuture_6"), 'execute'));
	}
	public function testFlatMap() {
		thx_promise_Future::value(1)->flatMap(array(new _hx_lambda(array(), "thx_promise_TestFuture_7"), 'execute'))->then(array(new _hx_lambda(array(), "thx_promise_TestFuture_8"), 'execute'));
	}
	public function testTuple3() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise_Future::value(_hx_anonymous(array("_0" => 1, "_1" => "a", "_2" => 0.2)));
		thx_promise_FutureTuple3::tuple($tmp, array(new _hx_lambda(array(&$done), "thx_promise_TestFuture_9"), 'execute'));
	}
	function __toString() { return 'thx.promise.TestFuture'; }
}
function thx_promise_TestFuture_0($v) {
	{
		utest_Assert::equals(1, $v, null, _hx_anonymous(array("fileName" => "TestFuture.hx", "lineNumber" => 13, "className" => "thx.promise.TestFuture", "methodName" => "testThenBefore")));
	}
}
function thx_promise_TestFuture_1($i) {
	{
		return "" . _hx_string_rec($i, "");
	}
}
function thx_promise_TestFuture_2($a2) {
	{
		utest_Assert::equals("1", $a2, null, _hx_anonymous(array("fileName" => "TestFuture.hx", "lineNumber" => 50, "className" => "thx.promise.TestFuture", "methodName" => "testMap")));
	}
}
function thx_promise_TestFuture_3($v, $callback) {
	{
		call_user_func_array($callback, array("" . _hx_string_rec($v, "")));
	}
}
function thx_promise_TestFuture_4($a2) {
	{
		utest_Assert::equals("1", $a2, null, _hx_anonymous(array("fileName" => "TestFuture.hx", "lineNumber" => 56, "className" => "thx.promise.TestFuture", "methodName" => "testMapAsync")));
	}
}
function thx_promise_TestFuture_5(&$future, $callback) {
	{
		$future->then(array(new _hx_lambda(array(&$callback), "thx_promise_TestFuture_10"), 'execute'));
	}
}
function thx_promise_TestFuture_6($a2) {
	{
		utest_Assert::equals(1, $a2, null, _hx_anonymous(array("fileName" => "TestFuture.hx", "lineNumber" => 62, "className" => "thx.promise.TestFuture", "methodName" => "testFlatten")));
	}
}
function thx_promise_TestFuture_7($v) {
	{
		return thx_promise_Future::value("" . _hx_string_rec($v, ""));
	}
}
function thx_promise_TestFuture_8($a2) {
	{
		utest_Assert::equals("1", $a2, null, _hx_anonymous(array("fileName" => "TestFuture.hx", "lineNumber" => 68, "className" => "thx.promise.TestFuture", "methodName" => "testFlatMap")));
	}
}
function thx_promise_TestFuture_9(&$done, $a, $b, $c) {
	{
		utest_Assert::equals(1, $a, null, _hx_anonymous(array("fileName" => "TestFuture.hx", "lineNumber" => 99, "className" => "thx.promise.TestFuture", "methodName" => "testTuple3")));
		utest_Assert::equals("a", $b, null, _hx_anonymous(array("fileName" => "TestFuture.hx", "lineNumber" => 100, "className" => "thx.promise.TestFuture", "methodName" => "testTuple3")));
		utest_Assert::equals(0.2, $c, null, _hx_anonymous(array("fileName" => "TestFuture.hx", "lineNumber" => 101, "className" => "thx.promise.TestFuture", "methodName" => "testTuple3")));
		call_user_func($done);
	}
}
function thx_promise_TestFuture_10(&$callback, $future1) {
	{
		$future1->then($callback);
	}
}
