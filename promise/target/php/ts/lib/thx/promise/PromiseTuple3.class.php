<?php

// Generated by Haxe 3.3.0
class thx_promise_PromiseTuple3 {
	public function __construct(){}
	static function join($p1, $p2) {
		return thx_promise_Promises::par(array(new _hx_lambda(array(), "thx_promise_PromiseTuple3_0"), 'execute'), $p1, $p2);
	}
	static function mapTuplePromise($promise, $success) {
		return thx_promise__Promise_Promise_Impl_::flatMapEither($promise, array(new _hx_lambda(array(&$success), "thx_promise_PromiseTuple3_1"), 'execute'), array(new _hx_lambda(array(), "thx_promise_PromiseTuple3_2"), 'execute'));
	}
	static function mapTuple($promise, $success) {
		return thx_promise__Promise_Promise_Impl_::map($promise, array(new _hx_lambda(array(&$success), "thx_promise_PromiseTuple3_3"), 'execute'));
	}
	static function tuple($promise, $success, $failure = null) {
		$tmp = null;
		if(null === $failure) {
			$tmp = array(new _hx_lambda(array(), "thx_promise_PromiseTuple3_4"), 'execute');
		} else {
			$tmp = $failure;
		}
		return thx_promise__Promise_Promise_Impl_::either($promise, array(new _hx_lambda(array(&$success), "thx_promise_PromiseTuple3_5"), 'execute'), $tmp);
	}
	function __toString() { return 'thx.promise.PromiseTuple3'; }
}
function thx_promise_PromiseTuple3_0($f, $g) {
	{
		return _hx_anonymous(array("_0" => $f->_0, "_1" => $f->_1, "_2" => $f->_2, "_3" => $g));
	}
}
function thx_promise_PromiseTuple3_1(&$success, $t) {
	{
		return call_user_func_array($success, array($t->_0, $t->_1, $t->_2));
	}
}
function thx_promise_PromiseTuple3_2($err) {
	{
		return thx_promise__Promise_Promise_Impl_::error($err);
	}
}
function thx_promise_PromiseTuple3_3(&$success, $t) {
	{
		return call_user_func_array($success, array($t->_0, $t->_1, $t->_2));
	}
}
function thx_promise_PromiseTuple3_4($_) {
	{}
}
function thx_promise_PromiseTuple3_5(&$success, $t) {
	{
		call_user_func_array($success, array($t->_0, $t->_1, $t->_2));
	}
}
