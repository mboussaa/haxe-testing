<?php

// Generated by Haxe 3.3.0
class thx_promise_TestPromise {
	public function __construct() {}
	public function testResolveBefore() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise__Promise_Promise_Impl_::value(1);
		thx_promise__Promise_Promise_Impl_::success($tmp, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_0"), 'execute'));
	}
	public function testRejectBefore() {
		$done = utest_Assert::createAsync(null, null);
		$error = new thx_Error("Nooooo!", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 62, "className" => "thx.promise.TestPromise", "methodName" => "testRejectBefore")));
		$tmp = thx_promise__Promise_Promise_Impl_::error($error);
		thx_promise__Promise_Promise_Impl_::failure($tmp, array(new _hx_lambda(array(&$done, &$error), "thx_promise_TestPromise_1"), 'execute'));
	}
	public function testMapSuccessWithValue() {
		$done = utest_Assert::createAsync(null, null);
		$this1 = thx_promise__Promise_Promise_Impl_::value(1);
		$tmp = thx_promise__Promise_Promise_Impl_::flatMapEither($this1, array(new _hx_lambda(array(), "thx_promise_TestPromise_2"), 'execute'), array(new _hx_lambda(array(), "thx_promise_TestPromise_3"), 'execute'));
		thx_promise__Promise_Promise_Impl_::success($tmp, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_4"), 'execute'));
	}
	public function testMapSuccessWithFailure() {
		$done = utest_Assert::createAsync(null, null);
		$err = new thx_Error("error", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 83, "className" => "thx.promise.TestPromise", "methodName" => "testMapSuccessWithFailure")));
		$this1 = thx_promise__Promise_Promise_Impl_::error($err);
		$tmp = thx_promise__Promise_Promise_Impl_::flatMapEither($this1, array(new _hx_lambda(array(), "thx_promise_TestPromise_5"), 'execute'), array(new _hx_lambda(array(), "thx_promise_TestPromise_6"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp, array(new _hx_lambda(array(&$done, &$err), "thx_promise_TestPromise_7"), 'execute'));
	}
	public function testAllSuccess() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise__Promise_Promise_Impl_::value(1);
		$tmp1 = thx_promise__Promise_Promise_Impl_::value(2);
		$tmp2 = thx_promise__Promise_Promise_Impl_::sequence((new _hx_array(array($tmp, $tmp1))));
		thx_promise__Promise_Promise_Impl_::success($tmp2, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_8"), 'execute'));
	}
	public function testAllFailure1() {
		$done = utest_Assert::createAsync(null, null);
		$err = new thx_Error("error", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 106, "className" => "thx.promise.TestPromise", "methodName" => "testAllFailure1")));
		$tmp = thx_promise__Promise_Promise_Impl_::value(1);
		$tmp1 = thx_promise__Promise_Promise_Impl_::error($err);
		$tmp2 = thx_promise__Promise_Promise_Impl_::sequence((new _hx_array(array($tmp, $tmp1))));
		$tmp3 = thx_promise__Promise_Promise_Impl_::success($tmp2, array(new _hx_lambda(array(), "thx_promise_TestPromise_9"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp3, array(new _hx_lambda(array(&$done, &$err), "thx_promise_TestPromise_10"), 'execute'));
	}
	public function testAllFailure2() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = $this->res(null);
		$tmp1 = $this->res(null);
		$tmp2 = $this->rej(null);
		$tmp3 = thx_promise__Promise_Promise_Impl_::sequence((new _hx_array(array($tmp, $tmp1, $tmp2))));
		$tmp4 = thx_promise__Promise_Promise_Impl_::success($tmp3, array(new _hx_lambda(array(), "thx_promise_TestPromise_11"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp4, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_12"), 'execute'));
	}
	public function testAfterAllSuccess() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise__Promise_Promise_Impl_::value(1);
		$tmp1 = thx_promise__Promise_Promise_Impl_::value(2);
		$tmp2 = thx_promise__Promise_Promise_Impl_::value(3);
		$tmp3 = thx_promise__Promise_Promise_Impl_::afterAll((new _hx_array(array($tmp, $tmp1, $tmp2))));
		$tmp4 = thx_promise__Promise_Promise_Impl_::success($tmp3, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_13"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp4, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_14"), 'execute'));
	}
	public function testAfterAllFailure1() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise__Promise_Promise_Impl_::value(1);
		$tmp1 = thx_promise__Promise_Promise_Impl_::value(2);
		$tmp2 = thx_promise__Promise_Promise_Impl_::error(new thx_Error("rejected", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 147, "className" => "thx.promise.TestPromise", "methodName" => "testAfterAllFailure1"))));
		$tmp3 = thx_promise__Promise_Promise_Impl_::afterAll((new _hx_array(array($tmp, $tmp1, $tmp2))));
		$tmp4 = thx_promise__Promise_Promise_Impl_::success($tmp3, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_15"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp4, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_16"), 'execute'));
	}
	public function testAfterAllFailure2() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = $this->res(null);
		$tmp1 = $this->res(null);
		$tmp2 = $this->rej(null);
		$tmp3 = thx_promise__Promise_Promise_Impl_::afterAll((new _hx_array(array($tmp, $tmp1, $tmp2))));
		$tmp4 = thx_promise__Promise_Promise_Impl_::success($tmp3, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_17"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp4, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_18"), 'execute'));
	}
	public function testJoinSuccess() {
		$done = utest_Assert::createAsync(null, null);
		$p1 = thx_promise__Promise_Promise_Impl_::value(1);
		$p2 = thx_promise__Promise_Promise_Impl_::value(2);
		$tmp = thx_promise_Promises::par((isset(thx__Tuple_Tuple2_Impl_::$of) ? thx__Tuple_Tuple2_Impl_::$of: array("thx__Tuple_Tuple2_Impl_", "of")), $p1, $p2);
		thx_promise__Promise_Promise_Impl_::success($tmp, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_19"), 'execute'));
	}
	public function testJoinFailure() {
		$done = utest_Assert::createAsync(null, null);
		$err = new thx_Error("error", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 185, "className" => "thx.promise.TestPromise", "methodName" => "testJoinFailure")));
		$p1 = thx_promise__Promise_Promise_Impl_::value(1);
		$p2 = thx_promise__Promise_Promise_Impl_::error($err);
		$tmp = thx_promise_Promises::par((isset(thx__Tuple_Tuple2_Impl_::$of) ? thx__Tuple_Tuple2_Impl_::$of: array("thx__Tuple_Tuple2_Impl_", "of")), $p1, $p2);
		$tmp1 = thx_promise__Promise_Promise_Impl_::failure($tmp, array(new _hx_lambda(array(&$done, &$err), "thx_promise_TestPromise_20"), 'execute'));
		thx_promise__Promise_Promise_Impl_::success($tmp1, array(new _hx_lambda(array(), "thx_promise_TestPromise_21"), 'execute'));
	}
	public function testJoin3Success() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = $this->res("1");
		$tmp1 = $this->res("2");
		$tmp2 = $this->res("3");
		$tmp3 = thx_promise_Promises::join3($tmp, $tmp1, $tmp2);
		$tmp4 = thx_promise__Promise_Promise_Impl_::success($tmp3, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_22"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp4, array(new _hx_lambda(array(), "thx_promise_TestPromise_23"), 'execute'));
	}
	public function testJoin3Failure1() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise__Promise_Promise_Impl_::value("1");
		$tmp1 = thx_promise__Promise_Promise_Impl_::value("2");
		$tmp2 = thx_promise__Promise_Promise_Impl_::error(new thx_Error("3", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 213, "className" => "thx.promise.TestPromise", "methodName" => "testJoin3Failure1"))));
		$tmp3 = thx_promise_Promises::join3($tmp, $tmp1, $tmp2);
		$tmp4 = thx_promise__Promise_Promise_Impl_::success($tmp3, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_24"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp4, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_25"), 'execute'));
	}
	public function testJoin3Failure2() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = $this->res(null);
		$tmp1 = $this->res(null);
		$tmp2 = $this->rej("3");
		$tmp3 = thx_promise_Promises::join3($tmp, $tmp1, $tmp2);
		$tmp4 = thx_promise__Promise_Promise_Impl_::success($tmp3, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_26"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp4, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_27"), 'execute'));
	}
	public function testJoin4Success() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = $this->res("1");
		$tmp1 = $this->res("2");
		$tmp2 = $this->res("3");
		$tmp3 = $this->res("4");
		$tmp4 = thx_promise_Promises::join4($tmp, $tmp1, $tmp2, $tmp3);
		$tmp5 = thx_promise__Promise_Promise_Impl_::success($tmp4, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_28"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp5, array(new _hx_lambda(array(), "thx_promise_TestPromise_29"), 'execute'));
	}
	public function testJoin4Failure1() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise__Promise_Promise_Impl_::value("1");
		$tmp1 = thx_promise__Promise_Promise_Impl_::value("2");
		$tmp2 = thx_promise__Promise_Promise_Impl_::value("3");
		$tmp3 = thx_promise__Promise_Promise_Impl_::error(new thx_Error("4", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 254, "className" => "thx.promise.TestPromise", "methodName" => "testJoin4Failure1"))));
		$tmp4 = thx_promise_Promises::join4($tmp, $tmp1, $tmp2, $tmp3);
		$tmp5 = thx_promise__Promise_Promise_Impl_::success($tmp4, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_30"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp5, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_31"), 'execute'));
	}
	public function testJoin4Failure2() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = $this->res(null);
		$tmp1 = $this->res(null);
		$tmp2 = $this->res(null);
		$tmp3 = $this->rej("4");
		$tmp4 = thx_promise_Promises::join4($tmp, $tmp1, $tmp2, $tmp3);
		$tmp5 = thx_promise__Promise_Promise_Impl_::success($tmp4, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_32"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp5, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_33"), 'execute'));
	}
	public function testJoin5Success() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = $this->res("1");
		$tmp1 = $this->res("2");
		$tmp2 = $this->res("3");
		$tmp3 = $this->res("4");
		$tmp4 = $this->res("5");
		$tmp5 = thx_promise_Promises::join5($tmp, $tmp1, $tmp2, $tmp3, $tmp4);
		$tmp6 = thx_promise__Promise_Promise_Impl_::success($tmp5, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_34"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp6, array(new _hx_lambda(array(), "thx_promise_TestPromise_35"), 'execute'));
	}
	public function testJoin5Failure1() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise__Promise_Promise_Impl_::value("1");
		$tmp1 = thx_promise__Promise_Promise_Impl_::value("2");
		$tmp2 = thx_promise__Promise_Promise_Impl_::value("3");
		$tmp3 = thx_promise__Promise_Promise_Impl_::value("4");
		$tmp4 = thx_promise__Promise_Promise_Impl_::error(new thx_Error("5", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 296, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Failure1"))));
		$tmp5 = thx_promise_Promises::join5($tmp, $tmp1, $tmp2, $tmp3, $tmp4);
		$tmp6 = thx_promise__Promise_Promise_Impl_::success($tmp5, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_36"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp6, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_37"), 'execute'));
	}
	public function testJoin5Failure2() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = $this->res(null);
		$tmp1 = $this->res(null);
		$tmp2 = $this->res(null);
		$tmp3 = $this->res(null);
		$tmp4 = $this->rej("5");
		$tmp5 = thx_promise_Promises::join5($tmp, $tmp1, $tmp2, $tmp3, $tmp4);
		$tmp6 = thx_promise__Promise_Promise_Impl_::success($tmp5, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_38"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp6, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_39"), 'execute'));
	}
	public function testJoin6Success() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = $this->res("1");
		$tmp1 = $this->res("2");
		$tmp2 = $this->res("3");
		$tmp3 = $this->res("4");
		$tmp4 = $this->res("5");
		$tmp5 = $this->res("6");
		$tmp6 = thx_promise_Promises::join6($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5);
		$tmp7 = thx_promise__Promise_Promise_Impl_::success($tmp6, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_40"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp7, array(new _hx_lambda(array(), "thx_promise_TestPromise_41"), 'execute'));
	}
	public function testJoin6Failure1() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise__Promise_Promise_Impl_::value("1");
		$tmp1 = thx_promise__Promise_Promise_Impl_::value("2");
		$tmp2 = thx_promise__Promise_Promise_Impl_::value("3");
		$tmp3 = thx_promise__Promise_Promise_Impl_::value("4");
		$tmp4 = thx_promise__Promise_Promise_Impl_::value("5");
		$tmp5 = thx_promise__Promise_Promise_Impl_::error(new thx_Error("6", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 339, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Failure1"))));
		$tmp6 = thx_promise_Promises::join6($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5);
		$tmp7 = thx_promise__Promise_Promise_Impl_::success($tmp6, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_42"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp7, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_43"), 'execute'));
	}
	public function testJoin6Failure2() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = $this->res(null);
		$tmp1 = $this->res(null);
		$tmp2 = $this->res(null);
		$tmp3 = $this->res(null);
		$tmp4 = $this->res(null);
		$tmp5 = $this->rej("6");
		$tmp6 = thx_promise_Promises::join6($tmp, $tmp1, $tmp2, $tmp3, $tmp4, $tmp5);
		$tmp7 = thx_promise__Promise_Promise_Impl_::success($tmp6, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_44"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp7, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_45"), 'execute'));
	}
	public function testMapTupleSuccess() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise__Promise_Promise_Impl_::value(_hx_anonymous(array("_0" => 1, "_1" => 2)));
		$tmp1 = thx_promise_PromiseTuple2::mapTuplePromise($tmp, array(new _hx_lambda(array(), "thx_promise_TestPromise_46"), 'execute'));
		thx_promise__Promise_Promise_Impl_::success($tmp1, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_47"), 'execute'));
	}
	public function testMapTupleFailure() {
		$done = utest_Assert::createAsync(null, null);
		$err = new thx_Error("error", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 377, "className" => "thx.promise.TestPromise", "methodName" => "testMapTupleFailure")));
		$tmp = thx_promise__Promise_Promise_Impl_::error($err);
		$tmp1 = thx_promise_PromiseTuple2::mapTuplePromise($tmp, array(new _hx_lambda(array(), "thx_promise_TestPromise_48"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp1, array(new _hx_lambda(array(&$done, &$err), "thx_promise_TestPromise_49"), 'execute'));
	}
	public function testAllMapToTupleFailure() {
		$done = utest_Assert::createAsync(null, null);
		$err = new thx_Error("error", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 390, "className" => "thx.promise.TestPromise", "methodName" => "testAllMapToTupleFailure")));
		$tmp = thx_promise__Promise_Promise_Impl_::error($err);
		$tmp1 = thx_promise__Promise_Promise_Impl_::error($err);
		$this1 = thx_promise__Promise_Promise_Impl_::sequence((new _hx_array(array($tmp, $tmp1))));
		$tmp2 = thx_promise__Promise_Promise_Impl_::flatMapEither($this1, array(new _hx_lambda(array(), "thx_promise_TestPromise_50"), 'execute'), array(new _hx_lambda(array(), "thx_promise_TestPromise_51"), 'execute'));
		$tmp3 = thx_promise_PromiseTuple2::mapTuplePromise($tmp2, array(new _hx_lambda(array(), "thx_promise_TestPromise_52"), 'execute'));
		thx_promise__Promise_Promise_Impl_::failure($tmp3, array(new _hx_lambda(array(&$done, &$err), "thx_promise_TestPromise_53"), 'execute'));
	}
	public function testMapSuccessFailure() {
		$done = utest_Assert::createAsync(null, null);
		$tmp = thx_promise__Promise_Promise_Impl_::map(thx_promise__Promise_Promise_Impl_::$nil, array(new _hx_lambda(array(), "thx_promise_TestPromise_54"), 'execute'));
		$tmp1 = thx_promise__Promise_Promise_Impl_::success($tmp, array(new _hx_lambda(array(), "thx_promise_TestPromise_55"), 'execute'));
		$tmp2 = thx_promise__Promise_Promise_Impl_::failure($tmp1, array(new _hx_lambda(array(), "thx_promise_TestPromise_56"), 'execute'));
		thx_promise__Promise_Promise_Impl_::always($tmp2, $done);
	}
	public function testTuple3() {
		$done = utest_Assert::createAsync(null, null);
		new thx_Error("error", null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 420, "className" => "thx.promise.TestPromise", "methodName" => "testTuple3")));
		$tmp = thx_promise__Promise_Promise_Impl_::value(_hx_anonymous(array("_0" => 1, "_1" => "a", "_2" => 0.2)));
		thx_promise_PromiseTuple3::tuple($tmp, array(new _hx_lambda(array(&$done), "thx_promise_TestPromise_57"), 'execute'), null);
	}
	public function res($val = null) {
		if($val === null) {
			$val = "resolved";
		}
		return thx_promise__Promise_Promise_Impl_::value($val);
	}
	public function rej($msg = null) {
		if($msg === null) {
			$msg = "rejected";
		}
		return thx_promise__Promise_Promise_Impl_::error(new thx_Error($msg, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 436, "className" => "thx.promise.TestPromise", "methodName" => "rej"))));
	}
	function __toString() { return 'thx.promise.TestPromise'; }
}
function thx_promise_TestPromise_0(&$done, $v) {
	{
		utest_Assert::equals(1, $v, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 16, "className" => "thx.promise.TestPromise", "methodName" => "testResolveBefore")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_1(&$done, &$error, $e) {
	{
		utest_Assert::equals($error, $e, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 66, "className" => "thx.promise.TestPromise", "methodName" => "testRejectBefore")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_2($v) {
	{
		return thx_promise__Promise_Promise_Impl_::value($v * 2);
	}
}
function thx_promise_TestPromise_3($err) {
	{
		return thx_promise__Promise_Promise_Impl_::error($err);
	}
}
function thx_promise_TestPromise_4(&$done, $v1) {
	{
		utest_Assert::equals(2, $v1, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 76, "className" => "thx.promise.TestPromise", "methodName" => "testMapSuccessWithValue")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_5($v) {
	{
		utest_Assert::fail("should never touch this", _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 85, "className" => "thx.promise.TestPromise", "methodName" => "testMapSuccessWithFailure")));
		return thx_promise__Promise_Promise_Impl_::value($v * 2);
	}
}
function thx_promise_TestPromise_6($err1) {
	{
		return thx_promise__Promise_Promise_Impl_::error($err1);
	}
}
function thx_promise_TestPromise_7(&$done, &$err, $e) {
	{
		utest_Assert::equals($err, $e, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 88, "className" => "thx.promise.TestPromise", "methodName" => "testMapSuccessWithFailure")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_8(&$done, $arr) {
	{
		$tmp3 = thx_Arrays::reduce($arr, array(new _hx_lambda(array(), "thx_promise_TestPromise_58"), 'execute'), 0);
		utest_Assert::equals(3, $tmp3, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 99, "className" => "thx.promise.TestPromise", "methodName" => "testAllSuccess")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_9($arr) {
	{
		utest_Assert::fail("should never happen", _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 112, "className" => "thx.promise.TestPromise", "methodName" => "testAllFailure1")));
	}
}
function thx_promise_TestPromise_10(&$done, &$err, $e) {
	{
		utest_Assert::equals($err, $e, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 115, "className" => "thx.promise.TestPromise", "methodName" => "testAllFailure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_11($arr) {
	{
		utest_Assert::fail("should never happen", _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 124, "className" => "thx.promise.TestPromise", "methodName" => "testAllFailure2")));
	}
}
function thx_promise_TestPromise_12(&$done, $e) {
	{
		utest_Assert::pass(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 127, "className" => "thx.promise.TestPromise", "methodName" => "testAllFailure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_13(&$done, $n) {
	{
		utest_Assert::equals(thx_Nil::$nil, $n, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 136, "className" => "thx.promise.TestPromise", "methodName" => "testAfterAllSuccess")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_14(&$done, $err) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 140, "className" => "thx.promise.TestPromise", "methodName" => "testAfterAllSuccess")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_15(&$done, $n) {
	{
		utest_Assert::fail("should never happen", _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 149, "className" => "thx.promise.TestPromise", "methodName" => "testAfterAllFailure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_16(&$done, $err) {
	{
		utest_Assert::pass(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 153, "className" => "thx.promise.TestPromise", "methodName" => "testAfterAllFailure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_17(&$done, $n) {
	{
		utest_Assert::fail("should never happen", _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 163, "className" => "thx.promise.TestPromise", "methodName" => "testAfterAllFailure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_18(&$done, $err) {
	{
		utest_Assert::pass(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 167, "className" => "thx.promise.TestPromise", "methodName" => "testAfterAllFailure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_19(&$done, $t) {
	{
		utest_Assert::equals(1, $t->_0, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 177, "className" => "thx.promise.TestPromise", "methodName" => "testJoinSuccess")));
		utest_Assert::equals(2, $t->_1, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 178, "className" => "thx.promise.TestPromise", "methodName" => "testJoinSuccess")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_20(&$done, &$err, $e) {
	{
		utest_Assert::equals($err, $e, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 189, "className" => "thx.promise.TestPromise", "methodName" => "testJoinFailure")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_21($t) {
	{
		utest_Assert::fail("should never happen", _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 193, "className" => "thx.promise.TestPromise", "methodName" => "testJoinFailure")));
	}
}
function thx_promise_TestPromise_22(&$done, $tuple) {
	{
		utest_Assert::same("1", $tuple->_0, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 201, "className" => "thx.promise.TestPromise", "methodName" => "testJoin3Success")));
		utest_Assert::same("2", $tuple->_1, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 202, "className" => "thx.promise.TestPromise", "methodName" => "testJoin3Success")));
		utest_Assert::same("3", $tuple->_2, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 203, "className" => "thx.promise.TestPromise", "methodName" => "testJoin3Success")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_23($err) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 207, "className" => "thx.promise.TestPromise", "methodName" => "testJoin3Success")));
	}
}
function thx_promise_TestPromise_24(&$done, $tuple) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 215, "className" => "thx.promise.TestPromise", "methodName" => "testJoin3Failure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_25(&$done, $err) {
	{
		utest_Assert::same("3", $err->message, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 219, "className" => "thx.promise.TestPromise", "methodName" => "testJoin3Failure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_26(&$done, $tuple) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 228, "className" => "thx.promise.TestPromise", "methodName" => "testJoin3Failure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_27(&$done, $err) {
	{
		utest_Assert::same("3", $err->message, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 232, "className" => "thx.promise.TestPromise", "methodName" => "testJoin3Failure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_28(&$done, $tuple) {
	{
		utest_Assert::same("1", $tuple->_0, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 241, "className" => "thx.promise.TestPromise", "methodName" => "testJoin4Success")));
		utest_Assert::same("2", $tuple->_1, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 242, "className" => "thx.promise.TestPromise", "methodName" => "testJoin4Success")));
		utest_Assert::same("3", $tuple->_2, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 243, "className" => "thx.promise.TestPromise", "methodName" => "testJoin4Success")));
		utest_Assert::same("4", $tuple->_3, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 244, "className" => "thx.promise.TestPromise", "methodName" => "testJoin4Success")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_29($err) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 248, "className" => "thx.promise.TestPromise", "methodName" => "testJoin4Success")));
	}
}
function thx_promise_TestPromise_30(&$done, $tuple) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 256, "className" => "thx.promise.TestPromise", "methodName" => "testJoin4Failure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_31(&$done, $err) {
	{
		utest_Assert::same("4", $err->message, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 260, "className" => "thx.promise.TestPromise", "methodName" => "testJoin4Failure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_32(&$done, $tuple) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 269, "className" => "thx.promise.TestPromise", "methodName" => "testJoin4Failure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_33(&$done, $err) {
	{
		utest_Assert::same("4", $err->message, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 273, "className" => "thx.promise.TestPromise", "methodName" => "testJoin4Failure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_34(&$done, $tuple) {
	{
		utest_Assert::same("1", $tuple->_0, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 282, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Success")));
		utest_Assert::same("2", $tuple->_1, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 283, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Success")));
		utest_Assert::same("3", $tuple->_2, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 284, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Success")));
		utest_Assert::same("4", $tuple->_3, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 285, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Success")));
		utest_Assert::same("5", $tuple->_4, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 286, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Success")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_35($err) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 290, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Success")));
	}
}
function thx_promise_TestPromise_36(&$done, $tuple) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 298, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Failure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_37(&$done, $err) {
	{
		utest_Assert::same("5", $err->message, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 302, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Failure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_38(&$done, $tuple) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 311, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Failure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_39(&$done, $err) {
	{
		utest_Assert::same("5", $err->message, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 315, "className" => "thx.promise.TestPromise", "methodName" => "testJoin5Failure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_40(&$done, $tuple) {
	{
		utest_Assert::same("1", $tuple->_0, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 324, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Success")));
		utest_Assert::same("2", $tuple->_1, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 325, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Success")));
		utest_Assert::same("3", $tuple->_2, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 326, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Success")));
		utest_Assert::same("4", $tuple->_3, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 327, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Success")));
		utest_Assert::same("5", $tuple->_4, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 328, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Success")));
		utest_Assert::same("6", $tuple->_5, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 329, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Success")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_41($err) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 333, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Success")));
	}
}
function thx_promise_TestPromise_42(&$done, $tuple) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 341, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Failure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_43(&$done, $err) {
	{
		utest_Assert::same("6", $err->message, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 345, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Failure1")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_44(&$done, $tuple) {
	{
		utest_Assert::fail(null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 354, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Failure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_45(&$done, $err) {
	{
		utest_Assert::same("6", $err->message, null, null, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 358, "className" => "thx.promise.TestPromise", "methodName" => "testJoin6Failure2")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_46($a, $b) {
	{
		return thx_promise__Promise_Promise_Impl_::value($a / $b);
	}
}
function thx_promise_TestPromise_47(&$done, $v) {
	{
		utest_Assert::equals(0.5, $v, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 370, "className" => "thx.promise.TestPromise", "methodName" => "testMapTupleSuccess")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_48($a, $b) {
	{
		return thx_promise__Promise_Promise_Impl_::value($a / $b);
	}
}
function thx_promise_TestPromise_49(&$done, &$err, $e) {
	{
		utest_Assert::equals($err, $e, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 383, "className" => "thx.promise.TestPromise", "methodName" => "testMapTupleFailure")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_50($v) {
	{
		utest_Assert::fail("should never happen", _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 396, "className" => "thx.promise.TestPromise", "methodName" => "testAllMapToTupleFailure")));
		return thx_promise__Promise_Promise_Impl_::value(_hx_anonymous(array("_0" => 1, "_1" => 2)));
	}
}
function thx_promise_TestPromise_51($err1) {
	{
		return thx_promise__Promise_Promise_Impl_::error($err1);
	}
}
function thx_promise_TestPromise_52($a, $b) {
	{
		utest_Assert::fail("should never happen", _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 400, "className" => "thx.promise.TestPromise", "methodName" => "testAllMapToTupleFailure")));
		return thx_promise__Promise_Promise_Impl_::value($a / $b);
	}
}
function thx_promise_TestPromise_53(&$done, &$err, $e) {
	{
		utest_Assert::equals($err, $e, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 404, "className" => "thx.promise.TestPromise", "methodName" => "testAllMapToTupleFailure")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_54($_) {
	{
		throw new HException("NOOO!");
	}
}
function thx_promise_TestPromise_55($_1) {
	{
		utest_Assert::fail("should never succeed", _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 413, "className" => "thx.promise.TestPromise", "methodName" => "testMapSuccessFailure")));
	}
}
function thx_promise_TestPromise_56($e) {
	{
		$tmp3 = $e->toString();
		utest_Assert::stringContains("NOOO!", $tmp3, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 414, "className" => "thx.promise.TestPromise", "methodName" => "testMapSuccessFailure")));
	}
}
function thx_promise_TestPromise_57(&$done, $a, $b, $c) {
	{
		utest_Assert::equals(1, $a, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 424, "className" => "thx.promise.TestPromise", "methodName" => "testTuple3")));
		utest_Assert::equals("a", $b, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 425, "className" => "thx.promise.TestPromise", "methodName" => "testTuple3")));
		utest_Assert::equals(0.2, $c, null, _hx_anonymous(array("fileName" => "TestPromise.hx", "lineNumber" => 426, "className" => "thx.promise.TestPromise", "methodName" => "testTuple3")));
		call_user_func($done);
	}
}
function thx_promise_TestPromise_58($acc, $v) {
	{
		return $acc + $v;
	}
}
