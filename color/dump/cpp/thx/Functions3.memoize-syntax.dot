digraph graphname {
n4456 [shape=box,label="(4456)\nreturn \"fun\"(4452)"];
n4455 [shape=box,label="(4455)\nvar result = callback(v1,v2,v3)\nmap.set(key,result)\nreturn result"];
n4454 [shape=box,label="(4454)\nreturn cast map.get(key)"];
n4453 [shape=box,label="<function-end>
(4453)"];
n4452 [shape=box,label="<function-begin>
(4452)\nvar key = resolver(v1,v2,v3)\nvar _hx_tmp = map.exists(key)\n@:cond-branch _hx_tmp"];
n4452 -> n4454[style="dashed",color="gray",label="then"];
n4452 -> n4455[style="dashed",color="gray",label="next"];
n4451 [shape=box,label="(4451)\nvar map = new haxe.ds.StringMap()"];
n4451 -> n4456[style="dashed",color="gray",label="merge"];
n4450 [shape=box,label="(4450)\nresolver = \"fun\"(4448)"];
n4449 [shape=box,label="<function-end>
(4449)"];
n4448 [shape=box,label="<function-begin>
(4448)\nvar _hx_tmp = Std.string(v1)\nvar _hx_tmp = \"\" + _hx_tmp\nvar _hx_tmp = _hx_tmp + \":\"\nvar _hx_tmp = Std.string(v2)\nvar _hx_tmp = _hx_tmp + _hx_tmp\nvar _hx_tmp = _hx_tmp + \":\"\nvar _hx_tmp = Std.string(v3)\nreturn _hx_tmp + _hx_tmp"];
n4447 [shape=box,label="(4447)"];
n4447 -> n4450[style="dashed",color="gray",label="merge"];
n4446 [shape=box,label="<function-end>
(4446)"];
n4445 [shape=box,label="<function-begin>
(4445)\nvar _hx_tmp = null == resolver\n@:cond-branch _hx_tmp"];
n4445 -> n4447[style="dashed",color="gray",label="then"];
n4445 -> n4451[style="dashed",color="gray",label="next"];
n1 [shape=box,label="<root>
(1)"];
}
