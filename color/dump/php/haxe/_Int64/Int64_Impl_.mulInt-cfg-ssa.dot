digraph graphname {
	node [shape=plaintext];
n1495[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1495) BKNormal</td></tr>
	<tr><td port="ep0" align="left">high = \"phi\"(high,high)</td></tr>
	<tr><td port="e0" align="left">var a = haxe._Int32.Int32_Impl_.mul(cast a.low,cast b.high)</td></tr>
	<tr><td port="e1" align="left">var b = haxe._Int32.Int32_Impl_.mul(cast a.high,cast b.low)</td></tr>
	<tr><td port="e2" align="left">var tmp = cast a + cast b</td></tr>
	<tr><td port="e3" align="left">var tmp = tmp &lt;&lt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e4" align="left">var b = tmp &gt;&gt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e5" align="left">var tmp = cast high + cast b</td></tr>
	<tr><td port="e6" align="left">var tmp = tmp &lt;&lt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e7" align="left">high = tmp &gt;&gt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e8" align="left">var x = new haxe._Int64.___Int64(high,low)</td></tr>
	<tr><td port="e9" align="left">null</td></tr>
	<tr><td port="e10" align="left">null</td></tr>
	<tr><td port="e11" align="left">return cast x</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1494[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1494) BKNormal</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1493[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1493) BKSub</td></tr>
	<tr><td port="e0" align="left">high = high + 1</td></tr>
	<tr><td port="e1" align="left">null</td></tr>
	<tr><td port="e2" align="left">var tmp = cast high &lt;&lt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e3" align="left">high = tmp &gt;&gt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1492[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1492) BKConditional</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1491[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1491) BKNormal</td></tr>
	<tr><td port="ep0" align="left">high = \"phi\"(high,high)</td></tr>
	<tr><td port="e0" align="left">var tmp = cast p10 &lt;&lt; cast 16</td></tr>
	<tr><td port="e1" align="left">var tmp = tmp &lt;&lt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e2" align="left">p10 = cast tmp &gt;&gt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e3" align="left">var tmp = cast low + cast p10</td></tr>
	<tr><td port="e4" align="left">var tmp = tmp &lt;&lt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e5" align="left">low = cast tmp &gt;&gt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e6" align="left">var tmp = haxe._Int32.Int32_Impl_.ucompare(low,p10)</td></tr>
	<tr><td port="e7" align="left">var tmp = tmp &lt; 0</td></tr>
	<tr><td port="e8" align="left">@:cond-branch tmp</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1490[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1490) BKNormal</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1489[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1489) BKSub</td></tr>
	<tr><td port="e0" align="left">high = high + 1</td></tr>
	<tr><td port="e1" align="left">null</td></tr>
	<tr><td port="e2" align="left">var tmp = cast high &lt;&lt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e3" align="left">high = tmp &gt;&gt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1488[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1488) BKConditional</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1487[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1487) BKFunctionEnd</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1486[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1486) BKFunctionBegin</td></tr>
	<tr><td port="e0" align="left">var tmp = b &gt;&gt; 31</td></tr>
	<tr><td port="e1" align="left">var x = new haxe._Int64.___Int64(tmp,b)</td></tr>
	<tr><td port="e2" align="left">null</td></tr>
	<tr><td port="e3" align="left">null</td></tr>
	<tr><td port="e4" align="left">var b = cast x</td></tr>
	<tr><td port="e5" align="left">null</td></tr>
	<tr><td port="e6" align="left">var al = cast cast a.low &amp; 65535</td></tr>
	<tr><td port="e7" align="left">var ah = cast cast a.low &gt;&gt;&gt; 16</td></tr>
	<tr><td port="e8" align="left">var bl = cast cast b.low &amp; 65535</td></tr>
	<tr><td port="e9" align="left">var bh = cast cast b.low &gt;&gt;&gt; 16</td></tr>
	<tr><td port="e10" align="left">var p00 = haxe._Int32.Int32_Impl_.mul(al,bl)</td></tr>
	<tr><td port="e11" align="left">var p10 = haxe._Int32.Int32_Impl_.mul(ah,bl)</td></tr>
	<tr><td port="e12" align="left">var p01 = haxe._Int32.Int32_Impl_.mul(al,bh)</td></tr>
	<tr><td port="e13" align="left">var p11 = haxe._Int32.Int32_Impl_.mul(ah,bh)</td></tr>
	<tr><td port="e14" align="left">var low = p00</td></tr>
	<tr><td port="e15" align="left">var tmp = cast p11 + (cast cast p01 &gt;&gt;&gt; 16)</td></tr>
	<tr><td port="e16" align="left">var tmp = tmp &lt;&lt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e17" align="left">var a = cast tmp &gt;&gt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e18" align="left">var tmp = cast a + (cast cast p10 &gt;&gt;&gt; 16)</td></tr>
	<tr><td port="e19" align="left">var tmp = tmp &lt;&lt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e20" align="left">var high = tmp &gt;&gt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e21" align="left">var tmp = cast p01 &lt;&lt; cast 16</td></tr>
	<tr><td port="e22" align="left">var tmp = tmp &lt;&lt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e23" align="left">p01 = cast tmp &gt;&gt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e24" align="left">var tmp = cast p00 + cast p01</td></tr>
	<tr><td port="e25" align="left">var tmp = tmp &lt;&lt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e26" align="left">low = cast tmp &gt;&gt; haxe._Int32.Int32_Impl_.extraBits</td></tr>
	<tr><td port="e27" align="left">var tmp = haxe._Int32.Int32_Impl_.ucompare(low,p01)</td></tr>
	<tr><td port="e28" align="left">var tmp = tmp &lt; 0</td></tr>
	<tr><td port="e29" align="left">@:cond-branch tmp</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1) BKRoot</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1:out -> n1486:in[label="CFGFunction"];
n1486:out -> n1491:in[label="CFGCondElse"];
n1486:out -> n1488:in[label="CFGCondBranch true"];
n1488:out -> n1489:in[label="CFGGoto"];
n1489:out -> n1490:in[label="CFGGoto"];
n1490:out -> n1491:in[label="CFGGoto"];
n1491:out -> n1495:in[label="CFGCondElse"];
n1491:out -> n1492:in[label="CFGCondBranch true"];
n1492:out -> n1493:in[label="CFGGoto"];
n1493:out -> n1494:in[label="CFGGoto"];
n1494:out -> n1495:in[label="CFGGoto"];
n1495:out -> n1487:in[label="CFGGoto"];
n1486:e4 -> n1495:e1[color=lightblue,constraint=false];
n1486:e4 -> n1495:e0[color=lightblue,constraint=false];
n1486:e11 -> n1491:e0[color=lightblue,constraint=false];
n1486:e20 -> n1489:e0[color=lightblue,constraint=false];
n1486:e20 -> n1491:ep0[color=lightblue,constraint=false];
n1486:e26 -> n1491:e3[color=lightblue,constraint=false];
n1489:e3 -> n1491:ep0[color=lightblue,constraint=false];
n1491:ep0 -> n1493:e0[color=lightblue,constraint=false];
n1491:ep0 -> n1495:ep0[color=lightblue,constraint=false];
n1491:e5 -> n1495:e8[color=lightblue,constraint=false];
n1493:e3 -> n1495:ep0[color=lightblue,constraint=false];
}
