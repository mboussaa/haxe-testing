digraph graphname {
e1486_false_0 -> e1486_false_1;
e1486_false_1 -> e1486_false_3;
e1486_false_3 -> e1486_false_4;
e1486_false_4 -> e1495_false_1;
e1486_false_4 -> e1495_false_0;
e1486_false_4 -> e1486_false_9;
e1486_false_4 -> e1486_false_8;
e1486_false_5 -> e1486_false_8;
e1486_false_5 -> e1486_false_6;
e1486_false_6 -> e1486_false_12;
e1486_false_6 -> e1486_false_10;
e1486_false_7 -> e1486_false_13;
e1486_false_7 -> e1486_false_11;
e1486_false_8 -> e1486_false_11;
e1486_false_8 -> e1486_false_10;
e1486_false_9 -> e1486_false_13;
e1486_false_9 -> e1486_false_12;
e1486_false_10 -> e1486_false_14;
e1486_false_11 -> e1491_false_0;
e1486_false_11 -> e1486_false_18;
e1486_false_12 -> e1486_false_21;
e1486_false_12 -> e1486_false_15;
e1486_false_13 -> e1486_false_15;
e1486_false_14 -> e1486_false_24;
e1486_false_15 -> e1486_false_16;
e1486_false_16 -> e1486_false_17;
e1486_false_17 -> e1486_false_18;
e1486_false_18 -> e1486_false_19;
e1486_false_19 -> e1486_false_20;
e1486_false_20 -> e1489_false_0;
e1486_false_20 -> e1491_true_0;
e1486_false_21 -> e1486_false_22;
e1486_false_22 -> e1486_false_23;
e1486_false_23 -> e1486_false_27;
e1486_false_23 -> e1486_false_24;
e1486_false_24 -> e1486_false_25;
e1486_false_25 -> e1486_false_26;
e1486_false_26 -> e1491_false_3;
e1486_false_26 -> e1486_false_27;
e1486_false_27 -> e1486_false_28;
e1486_false_28 -> e1486_false_29;
e1489_false_0 -> e1489_false_2;
e1489_false_0 -> e1489_false_1;
e1489_false_2 -> e1489_false_3;
e1489_false_3 -> e1491_true_0;
e1491_true_0 -> e1493_false_0;
e1491_true_0 -> e1495_true_0;
e1491_false_0 -> e1491_false_1;
e1491_false_1 -> e1491_false_2;
e1491_false_2 -> e1491_false_6;
e1491_false_2 -> e1491_false_3;
e1491_false_3 -> e1491_false_4;
e1491_false_4 -> e1491_false_5;
e1491_false_5 -> e1495_false_8;
e1491_false_5 -> e1491_false_6;
e1491_false_6 -> e1491_false_7;
e1491_false_7 -> e1491_false_8;
e1493_false_0 -> e1493_false_2;
e1493_false_0 -> e1493_false_1;
e1493_false_2 -> e1493_false_3;
e1493_false_3 -> e1495_true_0;
e1495_true_0 -> e1495_false_5;
e1495_false_0 -> e1495_false_2;
e1495_false_1 -> e1495_false_2;
e1495_false_2 -> e1495_false_3;
e1495_false_3 -> e1495_false_4;
e1495_false_4 -> e1495_false_5;
e1495_false_5 -> e1495_false_6;
e1495_false_6 -> e1495_false_7;
e1495_false_7 -> e1495_false_8;
e1495_false_8 -> e1495_false_10;
e1495_false_10 -> e1495_false_11;
subgraph cluster_1495 {
label=1495;
style=filled;
color=lightblue;
e1495_false_11[shape=box,label="return cast x"];
e1495_false_10[shape=box,label="null"];
e1495_false_8[shape=box,label="var x = new haxe._Int64.___Int64(high,low)"];
e1495_false_7[shape=box,label="high = tmp >> haxe._Int32.Int32_Impl_.extraBits"];
e1495_false_6[shape=box,label="var tmp = tmp << haxe._Int32.Int32_Impl_.extraBits"];
e1495_false_5[shape=box,label="var tmp = cast high + cast b"];
e1495_false_4[shape=box,label="var b = tmp >> haxe._Int32.Int32_Impl_.extraBits"];
e1495_false_3[shape=box,label="var tmp = tmp << haxe._Int32.Int32_Impl_.extraBits"];
e1495_false_2[shape=box,label="var tmp = cast a + cast b"];
e1495_false_1[shape=box,label="var b = haxe._Int32.Int32_Impl_.mul(cast a.high,cast b.low)"];
e1495_false_0[shape=box,label="var a = haxe._Int32.Int32_Impl_.mul(cast a.low,cast b.high)"];
e1495_true_0[shape=box,label="high = \"phi\"(high,high)"];
}
subgraph cluster_1493 {
label=1493;
style=filled;
color=lightblue;
e1493_false_3[shape=box,label="high = tmp >> haxe._Int32.Int32_Impl_.extraBits"];
e1493_false_2[shape=box,label="var tmp = cast high << haxe._Int32.Int32_Impl_.extraBits"];
e1493_false_1[shape=box,label="null"];
e1493_false_0[shape=box,label="high = high + 1"];
}
subgraph cluster_1491 {
label=1491;
style=filled;
color=lightblue;
e1491_false_8[shape=box,label="@:cond-branch tmp"];
e1491_false_7[shape=box,label="var tmp = tmp < 0"];
e1491_false_6[shape=box,label="var tmp = haxe._Int32.Int32_Impl_.ucompare(low,p10)"];
e1491_false_5[shape=box,label="low = cast tmp >> haxe._Int32.Int32_Impl_.extraBits"];
e1491_false_4[shape=box,label="var tmp = tmp << haxe._Int32.Int32_Impl_.extraBits"];
e1491_false_3[shape=box,label="var tmp = cast low + cast p10"];
e1491_false_2[shape=box,label="p10 = cast tmp >> haxe._Int32.Int32_Impl_.extraBits"];
e1491_false_1[shape=box,label="var tmp = tmp << haxe._Int32.Int32_Impl_.extraBits"];
e1491_false_0[shape=box,label="var tmp = cast p10 << cast 16"];
e1491_true_0[shape=box,label="high = \"phi\"(high,high)"];
}
subgraph cluster_1489 {
label=1489;
style=filled;
color=lightblue;
e1489_false_3[shape=box,label="high = tmp >> haxe._Int32.Int32_Impl_.extraBits"];
e1489_false_2[shape=box,label="var tmp = cast high << haxe._Int32.Int32_Impl_.extraBits"];
e1489_false_1[shape=box,label="null"];
e1489_false_0[shape=box,label="high = high + 1"];
}
subgraph cluster_1486 {
label=1486;
style=filled;
color=lightblue;
e1486_false_29[shape=box,label="@:cond-branch tmp"];
e1486_false_28[shape=box,label="var tmp = tmp < 0"];
e1486_false_27[shape=box,label="var tmp = haxe._Int32.Int32_Impl_.ucompare(low,p01)"];
e1486_false_26[shape=box,label="low = cast tmp >> haxe._Int32.Int32_Impl_.extraBits"];
e1486_false_25[shape=box,label="var tmp = tmp << haxe._Int32.Int32_Impl_.extraBits"];
e1486_false_24[shape=box,label="var tmp = cast p00 + cast p01"];
e1486_false_23[shape=box,label="p01 = cast tmp >> haxe._Int32.Int32_Impl_.extraBits"];
e1486_false_22[shape=box,label="var tmp = tmp << haxe._Int32.Int32_Impl_.extraBits"];
e1486_false_21[shape=box,label="var tmp = cast p01 << cast 16"];
e1486_false_20[shape=box,label="var high = tmp >> haxe._Int32.Int32_Impl_.extraBits"];
e1486_false_19[shape=box,label="var tmp = tmp << haxe._Int32.Int32_Impl_.extraBits"];
e1486_false_18[shape=box,label="var tmp = cast a + (cast cast p10 >>> 16)"];
e1486_false_17[shape=box,label="var a = cast tmp >> haxe._Int32.Int32_Impl_.extraBits"];
e1486_false_16[shape=box,label="var tmp = tmp << haxe._Int32.Int32_Impl_.extraBits"];
e1486_false_15[shape=box,label="var tmp = cast p11 + (cast cast p01 >>> 16)"];
e1486_false_14[shape=box,label="var low = p00"];
e1486_false_13[shape=box,label="var p11 = haxe._Int32.Int32_Impl_.mul(ah,bh)"];
e1486_false_12[shape=box,label="var p01 = haxe._Int32.Int32_Impl_.mul(al,bh)"];
e1486_false_11[shape=box,label="var p10 = haxe._Int32.Int32_Impl_.mul(ah,bl)"];
e1486_false_10[shape=box,label="var p00 = haxe._Int32.Int32_Impl_.mul(al,bl)"];
e1486_false_9[shape=box,label="var bh = cast cast b.low >>> 16"];
e1486_false_8[shape=box,label="var bl = cast cast b.low & 65535"];
e1486_false_7[shape=box,label="var ah = cast cast a.low >>> 16"];
e1486_false_6[shape=box,label="var al = cast cast a.low & 65535"];
e1486_false_5[shape=box,label="null"];
e1486_false_4[shape=box,label="var b = cast x"];
e1486_false_3[shape=box,label="null"];
e1486_false_1[shape=box,label="var x = new haxe._Int64.___Int64(tmp,b)"];
e1486_false_0[shape=box,label="var tmp = b >> 31"];
}
}
