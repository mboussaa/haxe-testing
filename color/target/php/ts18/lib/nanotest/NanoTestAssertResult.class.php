<?php

// Generated by Haxe 3.3.0
class nanotest_NanoTestAssertResult {
	public function __construct($_result, $position) {
		if(!php_Boot::$skip_constructor) {
		$this->result = $_result;
		$this->position = $position;
	}}
	public $result;
	public $position;
	public function label($d) {
		{
			$_g = $this->result->status[$this->position];
			$tmp = $_g->index;
			switch($tmp) {
			case 0:{}break;
			case 1:{
				$p = _hx_deref($_g)->params[1];
				$mes = _hx_deref($_g)->params[0];
				$tmp1 = $this->position;
				$tmp2 = "" . _hx_string_or_null($mes) . " [";
				$tmp3 = Std::string($d);
				$tmp4 = nanotest_NanoTestStatus::FAIL(_hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . "]", $p);
				$this->result->status[$tmp1] = $tmp4;
			}break;
			case 2:{
				$p1 = _hx_deref($_g)->params[1];
				$mes1 = _hx_deref($_g)->params[0];
				$tmp5 = $this->position;
				$tmp6 = "" . _hx_string_or_null($mes1) . " [";
				$tmp7 = Std::string($d);
				$tmp8 = nanotest_NanoTestStatus::ERROR(_hx_string_or_null($tmp6) . _hx_string_or_null($tmp7) . "]", $p1);
				$this->result->status[$tmp5] = $tmp8;
			}break;
			}
		}
		return $this;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'nanotest.NanoTestAssertResult'; }
}
