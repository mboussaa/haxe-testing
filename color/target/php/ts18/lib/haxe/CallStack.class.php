<?php

// Generated by Haxe 3.3.0
class haxe_CallStack {
	public function __construct(){}
	static function callStack() {
		return haxe_CallStack::makeStack("%s");
	}
	static function exceptionStack() {
		return haxe_CallStack::makeStack("%e");
	}
	static function toString($stack) {
		$b = new StringBuf();
		{
			$_g = 0;
			while($_g < $stack->length) {
				$s = $stack[$_g];
				++$_g;
				$b->add("\x0ACalled from ");
				haxe_CallStack::itemToString($b, $s);
				unset($s);
			}
		}
		return $b->b;
	}
	static function itemToString($b, $s) {
		$tmp = $s->index;
		switch($tmp) {
		case 0:{
			$b->add("a C function");
		}break;
		case 1:{
			$b->add("module ");
			$b->add(_hx_deref($s)->params[0]);
		}break;
		case 2:{
			$line = _hx_deref($s)->params[2];
			$file = _hx_deref($s)->params[1];
			$s1 = _hx_deref($s)->params[0];
			{
				if($s1 !== null) {
					haxe_CallStack::itemToString($b, $s1);
					$b->add(" (");
				}
				$b->add($file);
				$b->add(" line ");
				$b->add($line);
				if($s1 !== null) {
					$b->add(")");
				}
			}
		}break;
		case 3:{
			$b->add(_hx_deref($s)->params[0]);
			$b->add(".");
			$b->add(_hx_deref($s)->params[1]);
		}break;
		case 4:{
			$b->add("local function #");
			$b->add(_hx_deref($s)->params[0]);
		}break;
		}
	}
	static function makeStack($s) {
		$tmp = !isset($GLOBALS[$s]);
		if($tmp) {
			return (new _hx_array(array()));
		}
		$a = $GLOBALS[$s];
		$m = (new _hx_array(array()));
		{
			$_g1 = 0;
			$tmp1 = null;
			if($s === "%s") {
				$tmp1 = 2;
			} else {
				$tmp1 = 0;
			}
			$_g = $a->length - $tmp1;
			while($_g1 < $_g) {
				$i = $_g1++;
				$d = _hx_explode("::", $a[$i]);
				$tmp2 = haxe_StackItem::Method($d[0], $d[1]);
				$m->unshift($tmp2);
				unset($tmp2,$i,$d);
			}
		}
		return $m;
	}
	function __toString() { return 'haxe.CallStack'; }
}
