<?php

// Generated by Haxe 3.3.0
class thx__Ord_Ord_Impl_ {
	public function __construct(){}
	static function order($this1, $a0, $a1) {
		return call_user_func_array($this1, array($a0, $a1));
	}
	static function max($this1, $a0, $a1) {
		$_g = call_user_func_array($this1, array($a0, $a1));
		switch($_g->index) {
		case 1:{
			return $a0;
		}break;
		case 0:case 2:{
			return $a1;
		}break;
		}
	}
	static function min($this1, $a0, $a1) {
		$_g = call_user_func_array($this1, array($a0, $a1));
		switch($_g->index) {
		case 1:{
			return $a1;
		}break;
		case 0:case 2:{
			return $a0;
		}break;
		}
	}
	static function equal($this1, $a0, $a1) {
		$tmp = call_user_func_array($this1, array($a0, $a1));
		return $tmp === thx_OrderingImpl::$EQ;
	}
	static function contramap($this1, $f) {
		return array(new _hx_lambda(array(&$f, &$this1), "thx__Ord_Ord_Impl__0"), 'execute');
	}
	static function inverse($this1) {
		return array(new _hx_lambda(array(&$this1), "thx__Ord_Ord_Impl__1"), 'execute');
	}
	static function intComparison($this1, $a0, $a1) {
		$_g = call_user_func_array($this1, array($a0, $a1));
		switch($_g->index) {
		case 0:{
			return -1;
		}break;
		case 1:{
			return 1;
		}break;
		case 2:{
			return 0;
		}break;
		}
	}
	static function fromIntComparison($f) {
		return array(new _hx_lambda(array(&$f), "thx__Ord_Ord_Impl__2"), 'execute');
	}
	static function forComparable() {
		return array(new _hx_lambda(array(), "thx__Ord_Ord_Impl__3"), 'execute');
	}
	static function forComparableOrd() {
		return array(new _hx_lambda(array(), "thx__Ord_Ord_Impl__4"), 'execute');
	}
	function __toString() { return 'thx._Ord.Ord_Impl_'; }
}
function thx__Ord_Ord_Impl__0(&$f, &$this1, $b0, $b1) {
	{
		$tmp = call_user_func_array($f, array($b0));
		$tmp1 = call_user_func_array($f, array($b1));
		return call_user_func_array($this1, array($tmp, $tmp1));
	}
}
function thx__Ord_Ord_Impl__1(&$this1, $a0, $a1) {
	{
		return call_user_func_array($this1, array($a1, $a0));
	}
}
function thx__Ord_Ord_Impl__2(&$f, $a, $b) {
	{
		$tmp = call_user_func_array($f, array($a, $b));
		return thx__Ord_Ordering_Impl_::fromInt($tmp);
	}
}
function thx__Ord_Ord_Impl__3($a, $b) {
	{
		$tmp = $a->compareTo($b);
		return thx__Ord_Ordering_Impl_::fromInt($tmp);
	}
}
function thx__Ord_Ord_Impl__4($a, $b) {
	{
		return $a->compareTo($b);
	}
}
