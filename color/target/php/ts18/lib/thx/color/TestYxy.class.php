<?php

// Generated by Haxe 3.3.0
class thx_color_TestYxy {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testBasics() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$color = (new _hx_array(array(0.5, 0.4, 0.3)));
			utest_Assert::equals(0.5, $color[0], null, _hx_anonymous(array("fileName" => "TestYxy.hx", "lineNumber" => 14, "className" => "thx.color.TestYxy", "methodName" => "testBasics")));
			utest_Assert::equals(0.4, $color[1], null, _hx_anonymous(array("fileName" => "TestYxy.hx", "lineNumber" => 15, "className" => "thx.color.TestYxy", "methodName" => "testBasics")));
			utest_Assert::equals(0.3, $color[2], null, _hx_anonymous(array("fileName" => "TestYxy.hx", "lineNumber" => 16, "className" => "thx.color.TestYxy", "methodName" => "testBasics")));
			unset($color);
		}
	}
	public function testString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::equals("yxy(0.5,0.4,0.3)", thx_color__Yxy_Yxy_Impl_::toString((new _hx_array(array(0.5, 0.4, 0.3)))), null, _hx_anonymous(array("fileName" => "TestYxy.hx", "lineNumber" => 22, "className" => "thx.color.TestYxy", "methodName" => "testString")));
		}
	}
	public function testParse() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$color = thx_color__Yxy_Yxy_Impl_::fromString("yxy(0.5,0.4,0.3)");
			utest_Assert::equals("yxy(0.5,0.4,0.3)", thx_color__Yxy_Yxy_Impl_::toString($color), null, _hx_anonymous(array("fileName" => "TestYxy.hx", "lineNumber" => 28, "className" => "thx.color.TestYxy", "methodName" => "testParse")));
			unset($color);
		}
	}
	public function testFromFloat() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$s = thx_color__Yxy_Yxy_Impl_::fromString("yxy(0.5,0.4,0.3)");
			$f = thx_color__Yxy_Yxy_Impl_::fromFloats((new _hx_array(array(0.5, 0.4, 0.3))));
			$tmp = thx_color__Yxy_Yxy_Impl_::equals($s, $f);
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestYxy.hx", "lineNumber" => 35, "className" => "thx.color.TestYxy", "methodName" => "testFromFloat")));
			unset($tmp,$s,$f);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.color.TestYxy'; }
}
