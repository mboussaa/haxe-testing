<?php

// Generated by Haxe 3.3.0
class thx_color__Xyz_Xyz_Impl_ {
	public function __construct(){}
	static $whiteReference;
	static $epsilon = 0.0088564516790356311;
	static $kappa = 903.296296296296305;
	static function create($x, $y, $z) {
		return (new _hx_array(array($x, $y, $z)));
	}
	static function fromFloats($arr) {
		thx_ArrayFloats::resize($arr, 3, null);
		return (new _hx_array(array($arr[0], $arr[1], $arr[2])));
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseColor($color);
		if(null === $info) {
			return null;
		}
		try {
			switch($info->name) {
			case "ciexyz":case "xyz":{
				$channels = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				return $channels;
			}break;
			default:{
				return null;
			}break;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($channels) {
		return $channels;
	}
	static function interpolate($this1, $other, $t) {
		return (new _hx_array(array(thx_Floats::interpolate($t, $this1[0], $other[0]), thx_Floats::interpolate($t, $this1[1], $other[1]), thx_Floats::interpolate($t, $this1[2], $other[2]))));
	}
	static function min($this1, $other) {
		$x = Math::min($this1[0], $other[0]);
		$y = Math::min($this1[1], $other[1]);
		$z = Math::min($this1[2], $other[2]);
		return (new _hx_array(array($x, $y, $z)));
	}
	static function max($this1, $other) {
		$x = Math::max($this1[0], $other[0]);
		$y = Math::max($this1[1], $other[1]);
		$z = Math::max($this1[2], $other[2]);
		return (new _hx_array(array($x, $y, $z)));
	}
	static function roundTo($this1, $decimals) {
		$x = thx_Floats::roundTo($this1[0], $decimals);
		$y = thx_Floats::roundTo($this1[1], $decimals);
		$z = thx_Floats::roundTo($this1[2], $decimals);
		return (new _hx_array(array($x, $y, $z)));
	}
	static function withX($this1, $newx) {
		return (new _hx_array(array($newx, $this1[1], $this1[2])));
	}
	static function withY($this1, $newy) {
		return (new _hx_array(array($this1[0], $newy, $this1[2])));
	}
	static function withZ($this1, $newz) {
		return (new _hx_array(array($this1[0], $this1[1], $newz)));
	}
	static function toString($this1) {
		return "xyz(" . _hx_string_rec($this1[0], "") . "," . _hx_string_rec($this1[1], "") . "," . _hx_string_rec($this1[2], "") . ")";
	}
	static function equals($this1, $other) {
		return thx_color__Xyz_Xyz_Impl_::nearEquals($this1, $other, null);
	}
	static function nearEquals($this1, $other, $tolerance = null) {
		if($tolerance === null) {
			$tolerance = 1e-9;
		}
		$tmp = null;
		$tmp1 = thx_Floats::nearEquals($this1[0], $other[0], $tolerance);
		if($tmp1) {
			$tmp = thx_Floats::nearEquals($this1[1], $other[1], $tolerance);
		} else {
			$tmp = false;
		}
		if($tmp) {
			return thx_Floats::nearEquals($this1[2], $other[2], $tolerance);
		} else {
			return false;
		}
	}
	static function toLab($this1) {
		$f = array(new _hx_lambda(array(), "thx_color__Xyz_Xyz_Impl__0"), 'execute');
		$x1 = $this1->a[0] / thx_color__Xyz_Xyz_Impl_::$whiteReference[0];
		$y1 = $this1->a[1] / thx_color__Xyz_Xyz_Impl_::$whiteReference[1];
		$z1 = $this1->a[2] / thx_color__Xyz_Xyz_Impl_::$whiteReference[2];
		$fy1 = call_user_func_array($f, array($y1));
		$l = 116 * $fy1 - 16;
		$tmp = call_user_func_array($f, array($x1));
		$a = 500 * ($tmp - $fy1);
		$tmp1 = call_user_func_array($f, array($z1));
		return (new _hx_array(array($l, $a, 200 * ($fy1 - $tmp1))));
	}
	static function toLCh($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toLab($this1);
		return thx_color__Lab_Lab_Impl_::toLCh($tmp);
	}
	static function toLuv($this1) {
		$f = $this1->a[1] * 100 / (thx_color__Xyz_Xyz_Impl_::$whiteReference->a[1] * 100);
		$r = Math::pow(0.206896551724137928, 3);
		$l = null;
		if($f > $r) {
			$tmp = Math::pow($f, 0.333333333333333315);
			$l = 116 * $tmp - 16;
		} else {
			$tmp1 = Math::pow(9.66666666666666607, 3);
			$l = $tmp1 * $f;
		}
		return (new _hx_array(array($l / 100, 13 * $l * (thx_color__Xyz_Xyz_Impl_::get_u($this1) - thx_color__Xyz_Xyz_Impl_::get_u(thx_color__Xyz_Xyz_Impl_::$whiteReference) * 100) / 100, 13 * $l * (thx_color__Xyz_Xyz_Impl_::get_v($this1) - thx_color__Xyz_Xyz_Impl_::get_v(thx_color__Xyz_Xyz_Impl_::$whiteReference) * 100) / 100)));
	}
	static function toCmy($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCmy($tmp);
	}
	static function toCmyk($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCmyk($tmp);
	}
	static function toCubeHelix($this1) {
		$this2 = thx_color__Xyz_Xyz_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCubeHelixWithGamma($this2, 1);
	}
	static function toGrey($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toGrey($tmp);
	}
	static function toHsl($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toHsl($tmp);
	}
	static function toHsv($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toHsv($tmp);
	}
	static function toHunterLab($this1) {
		$tmp = Math::sqrt($this1[1]);
		$l = 10.0 * $tmp;
		$a = null;
		if(!_hx_equal($this1[1], 0)) {
			$tmp1 = 1.02 * $this1[0] - $this1[1];
			$tmp2 = Math::sqrt($this1[1]);
			$a = 17.5 * ($tmp1 / $tmp2);
		} else {
			$a = 0;
		}
		$b = null;
		if(!_hx_equal($this1[1], 0)) {
			$tmp3 = $this1->a[1] - .847 * $this1[2];
			$tmp4 = Math::sqrt($this1[1]);
			$b = 7.0 * ($tmp3 / $tmp4);
		} else {
			$b = 0;
		}
		return (new _hx_array(array($l, $a, $b)));
	}
	static function toRgb($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toRgb($tmp);
	}
	static function toRgba($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toRgbxa($this1);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp);
	}
	static function toRgbx($this1) {
		$x = $this1[0];
		$y = $this1[1];
		$z = $this1[2];
		$r = $x * 3.2406 + $y * -1.5372 + $z * -0.4986;
		$g = $x * -0.9689 + $y * 1.8758 + $z * 0.0415;
		$b = $x * 0.0557 + $y * -0.204 + $z * 1.0570;
		if($r > 0.0031308) {
			$tmp = Math::pow($r, 0.416666666666666685);
			$r = 1.055 * $tmp - 0.055;
		} else {
			$r = 12.92 * $r;
		}
		if($g > 0.0031308) {
			$tmp1 = Math::pow($g, 0.416666666666666685);
			$g = 1.055 * $tmp1 - 0.055;
		} else {
			$g = 12.92 * $g;
		}
		if($b > 0.0031308) {
			$tmp2 = Math::pow($b, 0.416666666666666685);
			$b = 1.055 * $tmp2 - 0.055;
		} else {
			$b = 12.92 * $b;
		}
		return (new _hx_array(array($r, $g, $b)));
	}
	static function toRgbxa($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toRgbxa($tmp);
	}
	static function toTemperature($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toTemperature($tmp);
	}
	static function toYuv($this1) {
		$tmp = thx_color__Xyz_Xyz_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toYuv($tmp);
	}
	static function toYxy($this1) {
		$sum = $this1->a[0] + $this1[1] + $this1[2];
		$this2 = null;
		$tmp = $this1[1];
		$tmp1 = null;
		if(_hx_equal($sum, 0)) {
			$tmp1 = 1;
		} else {
			$tmp1 = $this1->a[0] / $sum;
		}
		$tmp2 = null;
		if(_hx_equal($sum, 0)) {
			$tmp2 = 1;
		} else {
			$tmp2 = $this1->a[1] / $sum;
		}
		$this2 = (new _hx_array(array($tmp, $tmp1, $tmp2)));
		return $this2;
	}
	static function get_x($this1) {
		return $this1[0];
	}
	static function get_y($this1) {
		return $this1[1];
	}
	static function get_z($this1) {
		return $this1[2];
	}
	static function get_u($this1) {
		try {
			return 4 * $this1[0] / ($this1->a[0] + 15 * $this1[1] + 3 * $this1[2]);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return 0;
			}
		}
	}
	static function get_v($this1) {
		try {
			return 9 * $this1[1] / ($this1->a[0] + 15 * $this1[1] + 3 * $this1[2]);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return 0;
			}
		}
	}
	static $__properties__ = array("get_v" => "get_v","get_u" => "get_u","get_z" => "get_z","get_y" => "get_y","get_x" => "get_x");
	function __toString() { return 'thx.color._Xyz.Xyz_Impl_'; }
}
thx_color__Xyz_Xyz_Impl_::$whiteReference = (new _hx_array(array(0.95047, 1, 1.08883)));
function thx_color__Xyz_Xyz_Impl__0($t) {
	{
		if($t > 0.0088564516790356311) {
			return Math::pow($t, 0.333333333333333315);
		} else {
			return 7.78703703703703543 * $t + 0.137931034482758619;
		}
	}
}
