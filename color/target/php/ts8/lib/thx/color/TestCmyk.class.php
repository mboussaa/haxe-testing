<?php

// Generated by Haxe 3.3.0
class thx_color_TestCmyk {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testBasics() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$cmyk = (new _hx_array(array(0.1, 0.2, 0.3, 0.4)));
			utest_Assert::equals(0.1, $cmyk[0], null, _hx_anonymous(array("fileName" => "TestCmyk.hx", "lineNumber" => 15, "className" => "thx.color.TestCmyk", "methodName" => "testBasics")));
			utest_Assert::equals(0.2, $cmyk[1], null, _hx_anonymous(array("fileName" => "TestCmyk.hx", "lineNumber" => 16, "className" => "thx.color.TestCmyk", "methodName" => "testBasics")));
			utest_Assert::equals(0.3, $cmyk[2], null, _hx_anonymous(array("fileName" => "TestCmyk.hx", "lineNumber" => 17, "className" => "thx.color.TestCmyk", "methodName" => "testBasics")));
			utest_Assert::equals(0.4, $cmyk[3], null, _hx_anonymous(array("fileName" => "TestCmyk.hx", "lineNumber" => 18, "className" => "thx.color.TestCmyk", "methodName" => "testBasics")));
			unset($cmyk);
		}
	}
	public function testStrings() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::equals("cmyk(0,1,1,0)", thx_color__Cmyk_Cmyk_Impl_::toString((new _hx_array(array(0, 1, 1, 0)))), null, _hx_anonymous(array("fileName" => "TestCmyk.hx", "lineNumber" => 24, "className" => "thx.color.TestCmyk", "methodName" => "testStrings")));
		}
	}
	public function testWhite() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color__Rgb_Rgb_Impl_::toCmyk(thx_color_palettes_Web::$white);
			$tmp1 = thx_color__Cmyk_Cmyk_Impl_::equals($tmp, (new _hx_array(array(0, 0, 0, 0))));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestCmyk.hx", "lineNumber" => 29, "className" => "thx.color.TestCmyk", "methodName" => "testWhite")));
			unset($tmp1,$tmp);
		}
	}
	public function testFromString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color__Cmyk_Cmyk_Impl_::equals((new _hx_array(array(0.5, 0.2, 0.1, 0.3))), thx_color__Cmyk_Cmyk_Impl_::fromString("cmyk(50%,0.2,10%,0.3)"));
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestCmyk.hx", "lineNumber" => 34, "className" => "thx.color.TestCmyk", "methodName" => "testFromString")));
			unset($tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.color.TestCmyk'; }
}
