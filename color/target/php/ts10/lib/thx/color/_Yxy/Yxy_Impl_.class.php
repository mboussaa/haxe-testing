<?php

// Generated by Haxe 3.3.0
class thx_color__Yxy_Yxy_Impl_ {
	public function __construct(){}
	static function create($y1, $x, $y2) {
		return (new _hx_array(array($y1, $x, $y2)));
	}
	static function fromFloats($arr) {
		thx_ArrayFloats::resize($arr, 3, null);
		return (new _hx_array(array($arr[0], $arr[1], $arr[2])));
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseColor($color);
		if(null === $info) {
			return null;
		}
		try {
			if($info->name === "yxy") {
				$channels = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				return $channels;
			} else {
				return null;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($channels) {
		return $channels;
	}
	static function interpolate($this1, $other, $t) {
		return (new _hx_array(array(thx_Floats::interpolate($t, $this1[0], $other[0]), thx_Floats::interpolate($t, $this1[1], $other[1]), thx_Floats::interpolate($t, $this1[2], $other[2]))));
	}
	static function min($this1, $other) {
		$y1 = Math::min($this1[0], $other[0]);
		$x = Math::min($this1[1], $other[1]);
		$y2 = Math::min($this1[2], $other[2]);
		return (new _hx_array(array($y1, $x, $y2)));
	}
	static function max($this1, $other) {
		$y1 = Math::max($this1[0], $other[0]);
		$x = Math::max($this1[1], $other[1]);
		$y2 = Math::max($this1[2], $other[2]);
		return (new _hx_array(array($y1, $x, $y2)));
	}
	static function roundTo($this1, $decimals) {
		$y1 = thx_Floats::roundTo($this1[0], $decimals);
		$x = thx_Floats::roundTo($this1[1], $decimals);
		$y2 = thx_Floats::roundTo($this1[2], $decimals);
		return (new _hx_array(array($y1, $x, $y2)));
	}
	static function withY1($this1, $newy1) {
		return (new _hx_array(array($newy1, $this1[1], $this1[2])));
	}
	static function withY($this1, $newx) {
		return (new _hx_array(array($this1[0], $newx, $this1[2])));
	}
	static function withZ($this1, $newy2) {
		return (new _hx_array(array($this1[0], $this1[1], $newy2)));
	}
	static function toString($this1) {
		return "yxy(" . _hx_string_rec($this1[0], "") . "," . _hx_string_rec($this1[1], "") . "," . _hx_string_rec($this1[2], "") . ")";
	}
	static function equals($this1, $other) {
		return thx_color__Yxy_Yxy_Impl_::nearEquals($this1, $other, null);
	}
	static function nearEquals($this1, $other, $tolerance = null) {
		if($tolerance === null) {
			$tolerance = 1e-9;
		}
		$tmp = null;
		$tmp1 = thx_Floats::nearEquals($this1[0], $other[0], $tolerance);
		if($tmp1) {
			$tmp = thx_Floats::nearEquals($this1[1], $other[1], $tolerance);
		} else {
			$tmp = false;
		}
		if($tmp) {
			return thx_Floats::nearEquals($this1[2], $other[2], $tolerance);
		} else {
			return false;
		}
	}
	static function toLab($this1) {
		return thx_color__Xyz_Xyz_Impl_::toLab(thx_color__Yxy_Yxy_Impl_::toXyz($this1));
	}
	static function toLCh($this1) {
		$tmp = thx_color__Yxy_Yxy_Impl_::toLab($this1);
		return thx_color__Lab_Lab_Impl_::toLCh($tmp);
	}
	static function toLuv($this1) {
		$tmp = thx_color__Yxy_Yxy_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toLuv($tmp);
	}
	static function toCmy($this1) {
		return thx_color__Xyz_Xyz_Impl_::toCmy(thx_color__Yxy_Yxy_Impl_::toXyz($this1));
	}
	static function toCmyk($this1) {
		return thx_color__Xyz_Xyz_Impl_::toCmyk(thx_color__Yxy_Yxy_Impl_::toXyz($this1));
	}
	static function toCubeHelix($this1) {
		return thx_color__Xyz_Xyz_Impl_::toCubeHelix(thx_color__Yxy_Yxy_Impl_::toXyz($this1));
	}
	static function toGrey($this1) {
		return thx_color__Xyz_Xyz_Impl_::toGrey(thx_color__Yxy_Yxy_Impl_::toXyz($this1));
	}
	static function toHsl($this1) {
		$tmp = thx_color__Yxy_Yxy_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toHsl($tmp);
	}
	static function toHsv($this1) {
		return thx_color__Xyz_Xyz_Impl_::toHsv(thx_color__Yxy_Yxy_Impl_::toXyz($this1));
	}
	static function toHunterLab($this1) {
		return thx_color__Xyz_Xyz_Impl_::toHunterLab(thx_color__Yxy_Yxy_Impl_::toXyz($this1));
	}
	static function toRgb($this1) {
		return thx_color__Xyz_Xyz_Impl_::toRgb(thx_color__Yxy_Yxy_Impl_::toXyz($this1));
	}
	static function toRgba($this1) {
		$tmp = thx_color__Yxy_Yxy_Impl_::toRgbxa($this1);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp);
	}
	static function toRgbx($this1) {
		return thx_color__Xyz_Xyz_Impl_::toRgbx(thx_color__Yxy_Yxy_Impl_::toXyz($this1));
	}
	static function toRgbxa($this1) {
		return thx_color__Xyz_Xyz_Impl_::toRgbxa(thx_color__Yxy_Yxy_Impl_::toXyz($this1));
	}
	static function toTemperature($this1) {
		$tmp = thx_color__Yxy_Yxy_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toTemperature($tmp);
	}
	static function toYuv($this1) {
		$tmp = thx_color__Yxy_Yxy_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toYuv($tmp);
	}
	static function toXyz($this1) {
		return (new _hx_array(array($this1->a[1] * ($this1->a[0] / $this1[2]), $this1[0], (1 - $this1[1] - $this1[2]) * ($this1->a[0] / $this1[2]))));
	}
	static function get_y1($this1) {
		return $this1[0];
	}
	static function get_x($this1) {
		return $this1[1];
	}
	static function get_y2($this1) {
		return $this1[2];
	}
	static $__properties__ = array("get_y2" => "get_y2","get_x" => "get_x","get_y1" => "get_y1");
	function __toString() { return 'thx.color._Yxy.Yxy_Impl_'; }
}
