<?php

// Generated by Haxe 3.3.0
class thx_color_TestGrey {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testBasics() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::equals(0.2, 0.2, null, _hx_anonymous(array("fileName" => "TestGrey.hx", "lineNumber" => 14, "className" => "thx.color.TestGrey", "methodName" => "testBasics")));
		}
	}
	public function testStrings() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::equals("grey(50%)", thx_color__Grey_Grey_Impl_::toString(0.5), null, _hx_anonymous(array("fileName" => "TestGrey.hx", "lineNumber" => 20, "className" => "thx.color.TestGrey", "methodName" => "testStrings")));
		}
	}
	public function testFromString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color__Grey_Grey_Impl_::equals(0.2, thx_color__Grey_Grey_Impl_::fromString("grey(20%)"));
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestGrey.hx", "lineNumber" => 25, "className" => "thx.color.TestGrey", "methodName" => "testFromString")));
			unset($tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.color.TestGrey'; }
}
