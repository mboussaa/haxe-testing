<?php

// Generated by Haxe 3.3.0
class thx_color_TestRoundTrip {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->tests = _hx_deref((new _hx_array(array((new _hx_array(array(0.05, 0.10, 0.15))), (new _hx_array(array(1, 0, 0))), (new _hx_array(array(0, 1, 0))), (new _hx_array(array(0.2, 0.2, 1))), (new _hx_array(array(0.9, 0.9, 1))), (new _hx_array(array(0.2, 0.4, 0.52)))))))->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_0"), 'execute'));
	}}
	public $tests;
	public function testRgbxRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_1"), 'execute'));
	}
	public function testLabRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_2"), 'execute'));
	}
	public function testLChRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_3"), 'execute'));
	}
	public function testCmyRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_4"), 'execute'));
	}
	public function testCmykRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_5"), 'execute'));
	}
	public function testCubeHelixRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_6"), 'execute'));
	}
	public function testHslRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_7"), 'execute'));
	}
	public function testHsvRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_8"), 'execute'));
	}
	public function testXyzRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_9"), 'execute'));
	}
	public function testYuvRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_10"), 'execute'));
	}
	public function testYxyRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_11"), 'execute'));
	}
	public function testToStringRoundtrip() {
		$this->tests->map(array(new _hx_lambda(array(), "thx_color_TestRoundTrip_12"), 'execute'));
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function assertRgbx($e, $t, $s, $pos = null) {
		$tmp = thx_color__Rgbx_Rgbx_Impl_::nearEquals($e, $t, 0.01);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__Rgbx_Rgbx_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__Rgbx_Rgbx_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	static function assertLab($e, $t, $s, $pos = null) {
		$tmp = thx_color__Lab_Lab_Impl_::nearEquals($e, $t, 0.01);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__Lab_Lab_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__Lab_Lab_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	static function assertLCh($e, $t, $s, $pos = null) {
		$tmp = thx_color__LCh_LCh_Impl_::nearEquals($e, $t, 0.01);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__LCh_LCh_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__LCh_LCh_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	static function assertCmy($e, $t, $s, $pos = null) {
		$tmp = thx_color__Cmy_Cmy_Impl_::nearEquals($e, $t, 0.01);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__Cmy_Cmy_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__Cmy_Cmy_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	static function assertCmyk($e, $t, $s, $pos = null) {
		$tmp = thx_color__Cmyk_Cmyk_Impl_::nearEquals($e, $t, 0.01);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__Cmyk_Cmyk_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__Cmyk_Cmyk_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	static function assertCubeHelix($e, $t, $s, $pos = null) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::nearEquals($e, $t, 0.1);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__CubeHelix_CubeHelix_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__CubeHelix_CubeHelix_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	static function assertHsl($e, $t, $s, $pos = null) {
		$tmp = thx_color__Hsl_Hsl_Impl_::nearEquals($e, $t, 0.1);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__Hsl_Hsl_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__Hsl_Hsl_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	static function assertHsv($e, $t, $s, $pos = null) {
		$tmp = thx_color__Hsv_Hsv_Impl_::nearEquals($e, $t, 0.1);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__Hsv_Hsv_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__Hsv_Hsv_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	static function assertXyz($e, $t, $s, $pos = null) {
		$tmp = thx_color__Xyz_Xyz_Impl_::nearEquals($e, $t, 0.01);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__Xyz_Xyz_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__Xyz_Xyz_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	static function assertYuv($e, $t, $s, $pos = null) {
		$tmp = thx_color__Yuv_Yuv_Impl_::nearEquals($e, $t, 0.01);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__Yuv_Yuv_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__Yuv_Yuv_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	static function assertYxy($e, $t, $s, $pos = null) {
		$tmp = thx_color__Yxy_Yxy_Impl_::nearEquals($e, $t, 0.01);
		utest_Assert::isTrue($tmp, "\x0A      " . _hx_string_or_null(thx_color__Yxy_Yxy_Impl_::toString($e)) . " expected, but was\x0A      " . _hx_string_or_null(thx_color__Yxy_Yxy_Impl_::toString($t)) . " for\x0A      " . _hx_string_or_null($s), $pos);
	}
	function __toString() { return 'thx.color.TestRoundTrip'; }
}
function thx_color_TestRoundTrip_0($_) {
	{
		$tmp = thx_color__Rgbx_Rgbx_Impl_::toRgb($_);
		$tmp1 = thx_color__Rgbx_Rgbx_Impl_::toLab($_);
		$tmp2 = thx_color__Rgbx_Rgbx_Impl_::toLCh($_);
		$tmp3 = thx_color__Rgbx_Rgbx_Impl_::toCmyk($_);
		$tmp4 = thx_color__Rgbx_Rgbx_Impl_::toCubeHelixWithGamma($_, 1);
		$tmp5 = thx_color__Rgbx_Rgbx_Impl_::toHsl($_);
		$tmp6 = thx_color__Rgbx_Rgbx_Impl_::toHsv($_);
		$tmp7 = thx_color__Rgbx_Rgbx_Impl_::toHunterLab($_);
		$tmp8 = thx_color__Rgbx_Rgbx_Impl_::toXyz($_);
		return _hx_anonymous(array("rgbx" => $_, "rgb" => $tmp, "lab" => $tmp1, "lch" => $tmp2, "cmy" => thx_color__Rgbx_Rgbx_Impl_::toCmy($_), "cmyk" => $tmp3, "ch" => $tmp4, "g" => thx_color__Rgbx_Rgbx_Impl_::toGrey($_), "hsl" => $tmp5, "hsv" => $tmp6, "hl" => $tmp7, "xyz" => $tmp8, "yuv" => thx_color__Rgbx_Rgbx_Impl_::toYuv($_), "yxy" => thx_color__Rgbx_Rgbx_Impl_::toYxy($_)));
	}
}
function thx_color_TestRoundTrip_1($_) {
	{
		{
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__Lab_Lab_Impl_::toRgbx($_->lab), thx_color__Lab_Lab_Impl_::toString($_->lab), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 59, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__LCh_LCh_Impl_::toRgbx($_->lch), thx_color__LCh_LCh_Impl_::toString($_->lch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 60, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__Cmy_Cmy_Impl_::toRgbx($_->cmy), thx_color__Cmy_Cmy_Impl_::toString($_->cmy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 61, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__Cmyk_Cmyk_Impl_::toRgbx($_->cmyk), thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 62, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($_->ch), thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 63, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__Hsl_Hsl_Impl_::toRgbx($_->hsl), thx_color__Hsl_Hsl_Impl_::toString($_->hsl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 64, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__Hsv_Hsv_Impl_::toRgbx($_->hsv), thx_color__Hsv_Hsv_Impl_::toString($_->hsv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 65, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__HunterLab_HunterLab_Impl_::toRgbx($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 66, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__Xyz_Xyz_Impl_::toRgbx($_->xyz), thx_color__Xyz_Xyz_Impl_::toString($_->xyz), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 67, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__Yuv_Yuv_Impl_::toRgbx($_->yuv), thx_color__Yuv_Yuv_Impl_::toString($_->yuv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 68, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
			thx_color_TestRoundTrip::assertRgbx($_->rgbx, thx_color__Yxy_Yxy_Impl_::toRgbx($_->yxy), thx_color__Yxy_Yxy_Impl_::toString($_->yxy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 69, "className" => "thx.color.TestRoundTrip", "methodName" => "testRgbxRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_2($_) {
	{
		{
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__Rgbx_Rgbx_Impl_::toLab($_->rgbx), thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 76, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__LCh_LCh_Impl_::toLab($_->lch), thx_color__LCh_LCh_Impl_::toString($_->lch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 77, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__Cmy_Cmy_Impl_::toLab($_->cmy), thx_color__Cmy_Cmy_Impl_::toString($_->cmy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 78, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__Cmyk_Cmyk_Impl_::toLab($_->cmyk), thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 79, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__CubeHelix_CubeHelix_Impl_::toLab($_->ch), thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 80, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__Hsl_Hsl_Impl_::toLab($_->hsl), thx_color__Hsl_Hsl_Impl_::toString($_->hsl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 81, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__Hsv_Hsv_Impl_::toLab($_->hsv), thx_color__Hsv_Hsv_Impl_::toString($_->hsv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 82, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__HunterLab_HunterLab_Impl_::toLab($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 83, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__Xyz_Xyz_Impl_::toLab($_->xyz), thx_color__Xyz_Xyz_Impl_::toString($_->xyz), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 84, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__Yuv_Yuv_Impl_::toLab($_->yuv), thx_color__Yuv_Yuv_Impl_::toString($_->yuv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 85, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
			thx_color_TestRoundTrip::assertLab($_->lab, thx_color__Yxy_Yxy_Impl_::toLab($_->yxy), thx_color__Yxy_Yxy_Impl_::toString($_->yxy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 86, "className" => "thx.color.TestRoundTrip", "methodName" => "testLabRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_3($_) {
	{
		{
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__Lab_Lab_Impl_::toLCh($_->lab), thx_color__Lab_Lab_Impl_::toString($_->lab), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 93, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__Rgbx_Rgbx_Impl_::toLCh($_->rgbx), thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 94, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__Cmy_Cmy_Impl_::toLCh($_->cmy), thx_color__Cmy_Cmy_Impl_::toString($_->cmy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 95, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__Cmyk_Cmyk_Impl_::toLCh($_->cmyk), thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 96, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__CubeHelix_CubeHelix_Impl_::toLCh($_->ch), thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 97, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__Hsl_Hsl_Impl_::toLCh($_->hsl), thx_color__Hsl_Hsl_Impl_::toString($_->hsl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 98, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__Hsv_Hsv_Impl_::toLCh($_->hsv), thx_color__Hsv_Hsv_Impl_::toString($_->hsv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 99, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__HunterLab_HunterLab_Impl_::toLCh($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 100, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__Xyz_Xyz_Impl_::toLCh($_->xyz), thx_color__Xyz_Xyz_Impl_::toString($_->xyz), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 101, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__Yuv_Yuv_Impl_::toLCh($_->yuv), thx_color__Yuv_Yuv_Impl_::toString($_->yuv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 102, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
			thx_color_TestRoundTrip::assertLCh($_->lch, thx_color__Yxy_Yxy_Impl_::toLCh($_->yxy), thx_color__Yxy_Yxy_Impl_::toString($_->yxy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 103, "className" => "thx.color.TestRoundTrip", "methodName" => "testLChRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_4($_) {
	{
		{
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__Lab_Lab_Impl_::toCmy($_->lab), thx_color__Lab_Lab_Impl_::toString($_->lab), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 110, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__LCh_LCh_Impl_::toCmy($_->lch), thx_color__LCh_LCh_Impl_::toString($_->lch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 111, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__Rgbx_Rgbx_Impl_::toCmy($_->rgbx), thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 112, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__Cmyk_Cmyk_Impl_::toCmy($_->cmyk), thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 113, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__CubeHelix_CubeHelix_Impl_::toCmy($_->ch), thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 114, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__Hsl_Hsl_Impl_::toCmy($_->hsl), thx_color__Hsl_Hsl_Impl_::toString($_->hsl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 115, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__Hsv_Hsv_Impl_::toCmy($_->hsv), thx_color__Hsv_Hsv_Impl_::toString($_->hsv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 116, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__HunterLab_HunterLab_Impl_::toCmy($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 117, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__Xyz_Xyz_Impl_::toCmy($_->xyz), thx_color__Xyz_Xyz_Impl_::toString($_->xyz), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 118, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__Yuv_Yuv_Impl_::toCmy($_->yuv), thx_color__Yuv_Yuv_Impl_::toString($_->yuv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 119, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
			thx_color_TestRoundTrip::assertCmy($_->cmy, thx_color__Yxy_Yxy_Impl_::toCmy($_->yxy), thx_color__Yxy_Yxy_Impl_::toString($_->yxy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 120, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmyRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_5($_) {
	{
		{
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__Lab_Lab_Impl_::toCmyk($_->lab), thx_color__Lab_Lab_Impl_::toString($_->lab), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 127, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__LCh_LCh_Impl_::toCmyk($_->lch), thx_color__LCh_LCh_Impl_::toString($_->lch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 128, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__Cmy_Cmy_Impl_::toCmyk($_->cmy), thx_color__Cmy_Cmy_Impl_::toString($_->cmy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 129, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__Rgbx_Rgbx_Impl_::toCmyk($_->rgbx), thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 130, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__CubeHelix_CubeHelix_Impl_::toCmyk($_->ch), thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 131, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__Hsl_Hsl_Impl_::toCmyk($_->hsl), thx_color__Hsl_Hsl_Impl_::toString($_->hsl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 132, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__Hsv_Hsv_Impl_::toCmyk($_->hsv), thx_color__Hsv_Hsv_Impl_::toString($_->hsv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 133, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__HunterLab_HunterLab_Impl_::toCmyk($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 134, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__Xyz_Xyz_Impl_::toCmyk($_->xyz), thx_color__Xyz_Xyz_Impl_::toString($_->xyz), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 135, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__Yuv_Yuv_Impl_::toCmyk($_->yuv), thx_color__Yuv_Yuv_Impl_::toString($_->yuv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 136, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
			thx_color_TestRoundTrip::assertCmyk($_->cmyk, thx_color__Yxy_Yxy_Impl_::toCmyk($_->yxy), thx_color__Yxy_Yxy_Impl_::toString($_->yxy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 137, "className" => "thx.color.TestRoundTrip", "methodName" => "testCmykRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_6($_) {
	{
		{
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__Lab_Lab_Impl_::toCubeHelix($_->lab), thx_color__Lab_Lab_Impl_::toString($_->lab), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 144, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__LCh_LCh_Impl_::toCubeHelix($_->lch), thx_color__LCh_LCh_Impl_::toString($_->lch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 145, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__Cmy_Cmy_Impl_::toCubeHelix($_->cmy), thx_color__Cmy_Cmy_Impl_::toString($_->cmy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 146, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__Cmyk_Cmyk_Impl_::toCubeHelix($_->cmyk), thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 147, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__Rgbx_Rgbx_Impl_::toCubeHelixWithGamma($_->rgbx, 1), thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 148, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__Hsl_Hsl_Impl_::toCubeHelix($_->hsl), thx_color__Hsl_Hsl_Impl_::toString($_->hsl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 149, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__Hsv_Hsv_Impl_::toCubeHelix($_->hsv), thx_color__Hsv_Hsv_Impl_::toString($_->hsv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 150, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__HunterLab_HunterLab_Impl_::toCubeHelix($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 151, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__Xyz_Xyz_Impl_::toCubeHelix($_->xyz), thx_color__Xyz_Xyz_Impl_::toString($_->xyz), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 152, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__Yuv_Yuv_Impl_::toCubeHelix($_->yuv), thx_color__Yuv_Yuv_Impl_::toString($_->yuv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 153, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
			thx_color_TestRoundTrip::assertCubeHelix($_->ch, thx_color__Yxy_Yxy_Impl_::toCubeHelix($_->yxy), thx_color__Yxy_Yxy_Impl_::toString($_->yxy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 154, "className" => "thx.color.TestRoundTrip", "methodName" => "testCubeHelixRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_7($_) {
	{
		{
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__Lab_Lab_Impl_::toHsl($_->lab), thx_color__Lab_Lab_Impl_::toString($_->lab), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 161, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__LCh_LCh_Impl_::toHsl($_->lch), thx_color__LCh_LCh_Impl_::toString($_->lch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 162, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__Cmy_Cmy_Impl_::toHsl($_->cmy), thx_color__Cmy_Cmy_Impl_::toString($_->cmy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 163, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__Cmyk_Cmyk_Impl_::toHsl($_->cmyk), thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 164, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__CubeHelix_CubeHelix_Impl_::toHsl($_->ch), thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 165, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__Rgbx_Rgbx_Impl_::toHsl($_->rgbx), thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 166, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__Hsv_Hsv_Impl_::toHsl($_->hsv), thx_color__Hsv_Hsv_Impl_::toString($_->hsv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 167, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__HunterLab_HunterLab_Impl_::toHsl($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 168, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__Xyz_Xyz_Impl_::toHsl($_->xyz), thx_color__Xyz_Xyz_Impl_::toString($_->xyz), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 169, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__Yuv_Yuv_Impl_::toHsl($_->yuv), thx_color__Yuv_Yuv_Impl_::toString($_->yuv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 170, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
			thx_color_TestRoundTrip::assertHsl($_->hsl, thx_color__Yxy_Yxy_Impl_::toHsl($_->yxy), thx_color__Yxy_Yxy_Impl_::toString($_->yxy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 171, "className" => "thx.color.TestRoundTrip", "methodName" => "testHslRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_8($_) {
	{
		{
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__Lab_Lab_Impl_::toHsv($_->lab), thx_color__Lab_Lab_Impl_::toString($_->lab), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 178, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__LCh_LCh_Impl_::toHsv($_->lch), thx_color__LCh_LCh_Impl_::toString($_->lch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 179, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__Cmy_Cmy_Impl_::toHsv($_->cmy), thx_color__Cmy_Cmy_Impl_::toString($_->cmy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 180, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__Cmyk_Cmyk_Impl_::toHsv($_->cmyk), thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 181, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__CubeHelix_CubeHelix_Impl_::toHsv($_->ch), thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 182, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__Hsl_Hsl_Impl_::toHsv($_->hsl), thx_color__Hsl_Hsl_Impl_::toString($_->hsl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 183, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__HunterLab_HunterLab_Impl_::toHsv($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 184, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__Rgbx_Rgbx_Impl_::toHsv($_->rgbx), thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 185, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__Xyz_Xyz_Impl_::toHsv($_->xyz), thx_color__Xyz_Xyz_Impl_::toString($_->xyz), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 186, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__Yuv_Yuv_Impl_::toHsv($_->yuv), thx_color__Yuv_Yuv_Impl_::toString($_->yuv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 187, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
			thx_color_TestRoundTrip::assertHsv($_->hsv, thx_color__Yxy_Yxy_Impl_::toHsv($_->yxy), thx_color__Yxy_Yxy_Impl_::toString($_->yxy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 188, "className" => "thx.color.TestRoundTrip", "methodName" => "testHsvRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_9($_) {
	{
		{
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__Lab_Lab_Impl_::toXyz($_->lab), thx_color__Lab_Lab_Impl_::toString($_->lab), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 195, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__LCh_LCh_Impl_::toXyz($_->lch), thx_color__LCh_LCh_Impl_::toString($_->lch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 196, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__Cmy_Cmy_Impl_::toXyz($_->cmy), thx_color__Cmy_Cmy_Impl_::toString($_->cmy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 197, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__Cmyk_Cmyk_Impl_::toXyz($_->cmyk), thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 198, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__CubeHelix_CubeHelix_Impl_::toXyz($_->ch), thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 199, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__Hsl_Hsl_Impl_::toXyz($_->hsl), thx_color__Hsl_Hsl_Impl_::toString($_->hsl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 200, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__Hsv_Hsv_Impl_::toXyz($_->hsv), thx_color__Hsv_Hsv_Impl_::toString($_->hsv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 201, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__HunterLab_HunterLab_Impl_::toXyz($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 202, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__Rgbx_Rgbx_Impl_::toXyz($_->rgbx), thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 203, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__Yuv_Yuv_Impl_::toXyz($_->yuv), thx_color__Yuv_Yuv_Impl_::toString($_->yuv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 204, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
			thx_color_TestRoundTrip::assertXyz($_->xyz, thx_color__Yxy_Yxy_Impl_::toXyz($_->yxy), thx_color__Yxy_Yxy_Impl_::toString($_->yxy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 205, "className" => "thx.color.TestRoundTrip", "methodName" => "testXyzRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_10($_) {
	{
		{
			$tmp = thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz);
			thx_color_TestRoundTrip::assertYuv($tmp, thx_color__Lab_Lab_Impl_::toYuv($_->lab), thx_color__Lab_Lab_Impl_::toString($_->lab), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 212, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
			$tmp1 = thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz);
			thx_color_TestRoundTrip::assertYuv($tmp1, thx_color__LCh_LCh_Impl_::toYuv($_->lch), thx_color__LCh_LCh_Impl_::toString($_->lch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 213, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
			thx_color_TestRoundTrip::assertYuv(thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz), thx_color__Cmy_Cmy_Impl_::toYuv($_->cmy), thx_color__Cmy_Cmy_Impl_::toString($_->cmy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 214, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
			thx_color_TestRoundTrip::assertYuv(thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz), thx_color__Cmyk_Cmyk_Impl_::toYuv($_->cmyk), thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 215, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
			$tmp2 = thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz);
			thx_color_TestRoundTrip::assertYuv($tmp2, thx_color__CubeHelix_CubeHelix_Impl_::toYuv($_->ch), thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 216, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
			thx_color_TestRoundTrip::assertYuv(thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz), thx_color__Hsl_Hsl_Impl_::toYuv($_->hsl), thx_color__Hsl_Hsl_Impl_::toString($_->hsl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 217, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
			$tmp3 = thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz);
			thx_color_TestRoundTrip::assertYuv($tmp3, thx_color__Hsv_Hsv_Impl_::toYuv($_->hsv), thx_color__Hsv_Hsv_Impl_::toString($_->hsv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 218, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
			thx_color_TestRoundTrip::assertYuv(thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz), thx_color__HunterLab_HunterLab_Impl_::toYuv($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 219, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
			thx_color_TestRoundTrip::assertYuv(thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz), thx_color__Rgbx_Rgbx_Impl_::toYuv($_->rgbx), thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 220, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
			$tmp4 = thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz);
			thx_color_TestRoundTrip::assertYuv($tmp4, thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz), thx_color__Xyz_Xyz_Impl_::toString($_->xyz), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 221, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
			$tmp5 = thx_color__Xyz_Xyz_Impl_::toYuv($_->xyz);
			thx_color_TestRoundTrip::assertYuv($tmp5, thx_color__Yxy_Yxy_Impl_::toYuv($_->yxy), thx_color__Yxy_Yxy_Impl_::toString($_->yxy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 222, "className" => "thx.color.TestRoundTrip", "methodName" => "testYuvRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_11($_) {
	{
		{
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__Lab_Lab_Impl_::toYxy($_->lab), thx_color__Lab_Lab_Impl_::toString($_->lab), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 229, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__LCh_LCh_Impl_::toYxy($_->lch), thx_color__LCh_LCh_Impl_::toString($_->lch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 230, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__Cmy_Cmy_Impl_::toYxy($_->cmy), thx_color__Cmy_Cmy_Impl_::toString($_->cmy), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 231, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__Cmyk_Cmyk_Impl_::toYxy($_->cmyk), thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 232, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__CubeHelix_CubeHelix_Impl_::toYxy($_->ch), thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 233, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__Hsl_Hsl_Impl_::toYxy($_->hsl), thx_color__Hsl_Hsl_Impl_::toString($_->hsl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 234, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__Hsv_Hsv_Impl_::toYxy($_->hsv), thx_color__Hsv_Hsv_Impl_::toString($_->hsv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 235, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__HunterLab_HunterLab_Impl_::toYxy($_->hl), thx_color__HunterLab_HunterLab_Impl_::toString($_->hl), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 236, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__Xyz_Xyz_Impl_::toYxy($_->xyz), thx_color__Xyz_Xyz_Impl_::toString($_->xyz), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 237, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__Rgbx_Rgbx_Impl_::toYxy($_->rgbx), thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 238, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
			thx_color_TestRoundTrip::assertYxy($_->yxy, thx_color__Yuv_Yuv_Impl_::toYxy($_->yuv), thx_color__Yuv_Yuv_Impl_::toString($_->yuv), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 239, "className" => "thx.color.TestRoundTrip", "methodName" => "testYxyRoundtrip")));
		}
		return;
	}
}
function thx_color_TestRoundTrip_12($_) {
	{
		{
			$t = thx_color__Lab_Lab_Impl_::fromString(thx_color__Lab_Lab_Impl_::toString($_->lab));
			$tmp = thx_color__Lab_Lab_Impl_::equals($_->lab, $t);
			utest_Assert::isTrue($tmp, "expected " . _hx_string_or_null(thx_color__Lab_Lab_Impl_::toString($_->lab)) . " but was " . _hx_string_or_null(thx_color__Lab_Lab_Impl_::toString($t)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 247, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$t1 = thx_color__LCh_LCh_Impl_::fromString(thx_color__LCh_LCh_Impl_::toString($_->lch));
			$tmp1 = thx_color__LCh_LCh_Impl_::equals($_->lch, $t1);
			utest_Assert::isTrue($tmp1, "expected " . _hx_string_or_null(thx_color__LCh_LCh_Impl_::toString($_->lch)) . " but was " . _hx_string_or_null(thx_color__LCh_LCh_Impl_::toString($t1)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 249, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$t2 = thx_color__Cmy_Cmy_Impl_::fromString(thx_color__Cmy_Cmy_Impl_::toString($_->cmy));
			$tmp2 = thx_color__Cmy_Cmy_Impl_::equals($_->cmy, $t2);
			utest_Assert::isTrue($tmp2, "expected " . _hx_string_or_null(thx_color__Cmy_Cmy_Impl_::toString($_->cmy)) . " but was " . _hx_string_or_null(thx_color__Cmy_Cmy_Impl_::toString($t2)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 251, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$t3 = thx_color__Cmyk_Cmyk_Impl_::fromString(thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk));
			$tmp3 = thx_color__Cmyk_Cmyk_Impl_::equals($_->cmyk, $t3);
			utest_Assert::isTrue($tmp3, "expected " . _hx_string_or_null(thx_color__Cmyk_Cmyk_Impl_::toString($_->cmyk)) . " but was " . _hx_string_or_null(thx_color__Cmyk_Cmyk_Impl_::toString($t3)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 253, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$t4 = thx_color__CubeHelix_CubeHelix_Impl_::fromString(thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch));
			$tmp4 = thx_color__CubeHelix_CubeHelix_Impl_::equals($_->ch, $t4);
			utest_Assert::isTrue($tmp4, "expected " . _hx_string_or_null(thx_color__CubeHelix_CubeHelix_Impl_::toString($_->ch)) . " but was " . _hx_string_or_null(thx_color__CubeHelix_CubeHelix_Impl_::toString($t4)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 255, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$tmp5 = thx_color__Grey_Grey_Impl_::toString($_->g);
			$t5 = thx_color__Grey_Grey_Impl_::fromString($tmp5);
			$tmp6 = thx_color__Grey_Grey_Impl_::equals($_->g, $t5);
			$tmp7 = "expected " . _hx_string_or_null(thx_color__Grey_Grey_Impl_::toString($_->g)) . " but was ";
			utest_Assert::isTrue($tmp6, _hx_string_or_null($tmp7) . _hx_string_or_null(thx_color__Grey_Grey_Impl_::toString($t5)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 257, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$t6 = thx_color__Hsl_Hsl_Impl_::fromString(thx_color__Hsl_Hsl_Impl_::toString($_->hsl));
			$tmp8 = thx_color__Hsl_Hsl_Impl_::equals($_->hsl, $t6);
			utest_Assert::isTrue($tmp8, "expected " . _hx_string_or_null(thx_color__Hsl_Hsl_Impl_::toString($_->hsl)) . " but was " . _hx_string_or_null(thx_color__Hsl_Hsl_Impl_::toString($t6)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 259, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$t7 = thx_color__Hsv_Hsv_Impl_::fromString(thx_color__Hsv_Hsv_Impl_::toString($_->hsv));
			$tmp9 = thx_color__Hsv_Hsv_Impl_::equals($_->hsv, $t7);
			utest_Assert::isTrue($tmp9, "expected " . _hx_string_or_null(thx_color__Hsv_Hsv_Impl_::toString($_->hsv)) . " but was " . _hx_string_or_null(thx_color__Hsv_Hsv_Impl_::toString($t7)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 261, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$t8 = thx_color__Rgbx_Rgbx_Impl_::fromString(thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx));
			$tmp10 = thx_color__Rgbx_Rgbx_Impl_::equals($_->rgbx, $t8);
			utest_Assert::isTrue($tmp10, "expected " . _hx_string_or_null(thx_color__Rgbx_Rgbx_Impl_::toString($_->rgbx)) . " but was " . _hx_string_or_null(thx_color__Rgbx_Rgbx_Impl_::toString($t8)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 263, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$t9 = thx_color__Xyz_Xyz_Impl_::fromString(thx_color__Xyz_Xyz_Impl_::toString($_->xyz));
			$tmp11 = thx_color__Xyz_Xyz_Impl_::equals($_->xyz, $t9);
			utest_Assert::isTrue($tmp11, "expected " . _hx_string_or_null(thx_color__Xyz_Xyz_Impl_::toString($_->xyz)) . " but was " . _hx_string_or_null(thx_color__Xyz_Xyz_Impl_::toString($t9)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 265, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$t10 = thx_color__Yxy_Yxy_Impl_::fromString(thx_color__Yxy_Yxy_Impl_::toString($_->yxy));
			$tmp12 = thx_color__Yxy_Yxy_Impl_::equals($_->yxy, $t10);
			utest_Assert::isTrue($tmp12, "expected " . _hx_string_or_null(thx_color__Yxy_Yxy_Impl_::toString($_->yxy)) . " but was " . _hx_string_or_null(thx_color__Yxy_Yxy_Impl_::toString($t10)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 267, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
			$t11 = thx_color__Yuv_Yuv_Impl_::fromString(thx_color__Yuv_Yuv_Impl_::toString($_->yuv));
			$tmp13 = thx_color__Yuv_Yuv_Impl_::equals($_->yuv, $t11);
			utest_Assert::isTrue($tmp13, "expected " . _hx_string_or_null(thx_color__Yuv_Yuv_Impl_::toString($_->yuv)) . " but was " . _hx_string_or_null(thx_color__Yuv_Yuv_Impl_::toString($t11)), _hx_anonymous(array("fileName" => "TestRoundTrip.hx", "lineNumber" => 269, "className" => "thx.color.TestRoundTrip", "methodName" => "testToStringRoundtrip")));
		}
		return;
	}
}
