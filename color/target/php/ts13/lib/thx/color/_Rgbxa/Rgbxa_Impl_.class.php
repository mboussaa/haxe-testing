<?php

// Generated by Haxe 3.3.0
class thx_color__Rgbxa_Rgbxa_Impl_ {
	public function __construct(){}
	static function create($red, $green, $blue, $alpha) {
		return (new _hx_array(array($red, $green, $blue, $alpha)));
	}
	static function fromFloats($arr) {
		thx_ArrayFloats::resize($arr, 4, null);
		return (new _hx_array(array($arr[0], $arr[1], $arr[2], $arr[3])));
	}
	static function fromInts($arr) {
		thx_ArrayInts::resize($arr, 4, null);
		return (new _hx_array(array($arr->a[0] / 255.0, $arr->a[1] / 255.0, $arr->a[2] / 255.0, $arr->a[3] / 255.0)));
	}
	static function fromInt($value) {
		$rgba = $value;
		return (new _hx_array(array(($rgba >> 24 & 255) / 255, ($rgba >> 16 & 255) / 255, ($rgba >> 8 & 255) / 255, ($rgba & 255) / 255)));
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseHex($color);
		if(null === $info) {
			$info = thx_color_parse_ColorParser::parseColor($color);
		}
		if(null === $info) {
			return null;
		}
		try {
			switch($info->name) {
			case "rgb":{
				$tmp = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, true);
				$tmp1 = thx_color__Rgbx_Rgbx_Impl_::fromFloats($tmp);
				return thx_color__Rgbx_Rgbx_Impl_::toRgbxa($tmp1);
			}break;
			case "rgba":{
				$tmp2 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 4, true);
				return thx_color__Rgbxa_Rgbxa_Impl_::fromFloats($tmp2);
			}break;
			default:{
				return null;
			}break;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($channels) {
		return $channels;
	}
	static function combineColor($this1, $other) {
		return (new _hx_array(array((1 - $this1[3]) * $other[0] + $this1->a[3] * $this1[0], (1 - $this1[3]) * $other[1] + $this1->a[3] * $this1[1], (1 - $this1[3]) * $other[2] + $this1->a[3] * $this1[2])));
	}
	static function darker($this1, $t) {
		$tmp = thx_color__Rgbxa_Rgbxa_Impl_::toRgbx($this1);
		$tmp1 = thx_color__Rgbx_Rgbx_Impl_::darker($tmp, $t);
		$tmp2 = thx_color__Rgbxa_Rgbxa_Impl_::get_alpha($this1);
		return thx_color__Rgbx_Rgbx_Impl_::withAlpha($tmp1, $tmp2);
	}
	static function lighter($this1, $t) {
		$tmp = thx_color__Rgbxa_Rgbxa_Impl_::toRgbx($this1);
		$tmp1 = thx_color__Rgbx_Rgbx_Impl_::lighter($tmp, $t);
		$tmp2 = thx_color__Rgbxa_Rgbxa_Impl_::get_alpha($this1);
		return thx_color__Rgbx_Rgbx_Impl_::withAlpha($tmp1, $tmp2);
	}
	static function transparent($this1, $t) {
		$tmp = $this1[0];
		$tmp1 = $this1[1];
		$tmp2 = $this1[2];
		$tmp3 = thx_Ints::interpolate($t, $this1[3], 0);
		return (new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3)));
	}
	static function opaque($this1, $t) {
		$tmp = $this1[0];
		$tmp1 = $this1[1];
		$tmp2 = $this1[2];
		$tmp3 = thx_Ints::interpolate($t, $this1[3], 1);
		return (new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3)));
	}
	static function interpolate($this1, $other, $t) {
		$tmp = thx_Ints::interpolate($t, $this1[0], $other[0]);
		$tmp1 = thx_Ints::interpolate($t, $this1[1], $other[1]);
		$tmp2 = thx_Ints::interpolate($t, $this1[2], $other[2]);
		$tmp3 = thx_Ints::interpolate($t, $this1[3], $other[3]);
		return (new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3)));
	}
	static function normalize($this1) {
		$this2 = null;
		$v = $this1[0];
		$tmp = null;
		if($v < 0) {
			$tmp = 0;
		} else {
			if($v > 1) {
				$tmp = 1;
			} else {
				$tmp = $v;
			}
		}
		$v1 = $this1[1];
		$tmp1 = null;
		if($v1 < 0) {
			$tmp1 = 0;
		} else {
			if($v1 > 1) {
				$tmp1 = 1;
			} else {
				$tmp1 = $v1;
			}
		}
		$v2 = $this1[2];
		$tmp2 = null;
		if($v2 < 0) {
			$tmp2 = 0;
		} else {
			if($v2 > 1) {
				$tmp2 = 1;
			} else {
				$tmp2 = $v2;
			}
		}
		$v3 = $this1[3];
		$tmp3 = null;
		if($v3 < 0) {
			$tmp3 = 0;
		} else {
			if($v3 > 1) {
				$tmp3 = 1;
			} else {
				$tmp3 = $v3;
			}
		}
		$this2 = (new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3)));
		return $this2;
	}
	static function roundTo($this1, $decimals) {
		$red = thx_Floats::roundTo($this1[0], $decimals);
		$green = thx_Floats::roundTo($this1[1], $decimals);
		$blue = thx_Floats::roundTo($this1[2], $decimals);
		$alpha = thx_Floats::roundTo($this1[3], $decimals);
		return (new _hx_array(array($red, $green, $blue, $alpha)));
	}
	static function withAlpha($this1, $newalpha) {
		$tmp = thx_color__Rgbxa_Rgbxa_Impl_::get_red($this1);
		$tmp1 = thx_color__Rgbxa_Rgbxa_Impl_::get_green($this1);
		$tmp2 = thx_color__Rgbxa_Rgbxa_Impl_::get_blue($this1);
		return (new _hx_array(array($tmp, $tmp1, $tmp2, $newalpha)));
	}
	static function withRed($this1, $newred) {
		$tmp = thx_color__Rgbxa_Rgbxa_Impl_::get_green($this1);
		$tmp1 = thx_color__Rgbxa_Rgbxa_Impl_::get_blue($this1);
		$tmp2 = thx_color__Rgbxa_Rgbxa_Impl_::get_alpha($this1);
		return (new _hx_array(array($newred, $tmp, $tmp1, $tmp2)));
	}
	static function withGreen($this1, $newgreen) {
		$tmp = thx_color__Rgbxa_Rgbxa_Impl_::get_red($this1);
		$tmp1 = thx_color__Rgbxa_Rgbxa_Impl_::get_blue($this1);
		$tmp2 = thx_color__Rgbxa_Rgbxa_Impl_::get_alpha($this1);
		return (new _hx_array(array($tmp, $newgreen, $tmp1, $tmp2)));
	}
	static function withBlue($this1, $newblue) {
		$tmp = thx_color__Rgbxa_Rgbxa_Impl_::get_red($this1);
		$tmp1 = thx_color__Rgbxa_Rgbxa_Impl_::get_green($this1);
		$tmp2 = thx_color__Rgbxa_Rgbxa_Impl_::get_alpha($this1);
		return (new _hx_array(array($tmp, $tmp1, $newblue, $tmp2)));
	}
	static function toCss3($this1) {
		return thx_color__Rgbxa_Rgbxa_Impl_::toString($this1);
	}
	static function toString($this1) {
		return "rgba(" . _hx_string_rec($this1->a[0] * 100, "") . "%," . _hx_string_rec($this1->a[1] * 100, "") . "%," . _hx_string_rec($this1->a[2] * 100, "") . "%," . _hx_string_rec($this1[3], "") . ")";
	}
	static function toHex($this1, $prefix = null) {
		if($prefix === null) {
			$prefix = "#";
		}
		$tmp = "" . _hx_string_or_null($prefix);
		$tmp1 = thx_color__Rgbxa_Rgbxa_Impl_::get_alpha($this1);
		$tmp2 = StringTools::hex($tmp1, 2);
		$tmp3 = _hx_string_or_null($tmp) . _hx_string_or_null($tmp2);
		$tmp4 = thx_color__Rgbxa_Rgbxa_Impl_::get_red($this1);
		$tmp5 = StringTools::hex($tmp4, 2);
		$tmp6 = _hx_string_or_null($tmp3) . _hx_string_or_null($tmp5);
		$tmp7 = thx_color__Rgbxa_Rgbxa_Impl_::get_green($this1);
		$tmp8 = StringTools::hex($tmp7, 2);
		$tmp9 = _hx_string_or_null($tmp6) . _hx_string_or_null($tmp8);
		$tmp10 = thx_color__Rgbxa_Rgbxa_Impl_::get_blue($this1);
		$tmp11 = StringTools::hex($tmp10, 2);
		return _hx_string_or_null($tmp9) . _hx_string_or_null($tmp11);
	}
	static function equals($this1, $other) {
		return thx_color__Rgbxa_Rgbxa_Impl_::nearEquals($this1, $other, null);
	}
	static function nearEquals($this1, $other, $tolerance = null) {
		if($tolerance === null) {
			$tolerance = 1e-9;
		}
		$tmp = null;
		$tmp1 = null;
		$tmp2 = thx_Floats::nearEquals($this1[0], $other[0], $tolerance);
		if($tmp2) {
			$tmp1 = thx_Floats::nearEquals($this1[1], $other[1], $tolerance);
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = thx_Floats::nearEquals($this1[2], $other[2], $tolerance);
		} else {
			$tmp = false;
		}
		if($tmp) {
			return thx_Floats::nearEquals($this1[3], $other[3], $tolerance);
		} else {
			return false;
		}
	}
	static function toHsla($this1) {
		$tmp = thx_color__Rgbxa_Rgbxa_Impl_::toRgbx($this1);
		$tmp1 = thx_color__Rgbx_Rgbx_Impl_::toHsl($tmp);
		$tmp2 = thx_color__Rgbxa_Rgbxa_Impl_::get_alpha($this1);
		return thx_color__Hsl_Hsl_Impl_::withAlpha($tmp1, $tmp2);
	}
	static function toHsva($this1) {
		$tmp = thx_color__Rgbxa_Rgbxa_Impl_::toRgbx($this1);
		$tmp1 = thx_color__Rgbx_Rgbx_Impl_::toHsv($tmp);
		$tmp2 = thx_color__Rgbxa_Rgbxa_Impl_::get_alpha($this1);
		return thx_color__Hsv_Hsv_Impl_::withAlpha($tmp1, $tmp2);
	}
	static function toRgb($this1) {
		$tmp = thx_color__Rgbxa_Rgbxa_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toRgb($tmp);
	}
	static function toRgbx($this1) {
		$channels = $this1->slice(0, 3);
		return $channels;
	}
	static function toRgba($this1) {
		return thx_color__Rgba_Rgba_Impl_::fromFloats((new _hx_array(array($this1[0], $this1[1], $this1[2], $this1[3]))));
	}
	static function get_red($this1) {
		return Math::round($this1->a[0] * 255);
	}
	static function get_green($this1) {
		return Math::round($this1->a[1] * 255);
	}
	static function get_blue($this1) {
		return Math::round($this1->a[2] * 255);
	}
	static function get_alpha($this1) {
		return Math::round($this1->a[3] * 255);
	}
	static function get_redf($this1) {
		return $this1[0];
	}
	static function get_greenf($this1) {
		return $this1[1];
	}
	static function get_bluef($this1) {
		return $this1[2];
	}
	static function get_alphaf($this1) {
		return $this1[3];
	}
	static function get_inSpace($this1) {
		$tmp = null;
		$tmp1 = null;
		$tmp2 = null;
		$tmp3 = null;
		$tmp4 = null;
		$tmp5 = null;
		if($this1->a[0] >= 0) {
			$tmp5 = $this1->a[0] <= 1;
		} else {
			$tmp5 = false;
		}
		if($tmp5) {
			$tmp4 = $this1->a[1] >= 0;
		} else {
			$tmp4 = false;
		}
		if($tmp4) {
			$tmp3 = $this1->a[1] <= 1;
		} else {
			$tmp3 = false;
		}
		if($tmp3) {
			$tmp2 = $this1->a[2] >= 0;
		} else {
			$tmp2 = false;
		}
		if($tmp2) {
			$tmp1 = $this1->a[2] <= 1;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = $this1->a[3] >= 0;
		} else {
			$tmp = false;
		}
		if($tmp) {
			return $this1->a[3] <= 1;
		} else {
			return false;
		}
	}
	static $__properties__ = array("get_inSpace" => "get_inSpace","get_alphaf" => "get_alphaf","get_bluef" => "get_bluef","get_greenf" => "get_greenf","get_redf" => "get_redf","get_alpha" => "get_alpha","get_blue" => "get_blue","get_green" => "get_green","get_red" => "get_red");
	function __toString() { return 'thx.color._Rgbxa.Rgbxa_Impl_'; }
}
