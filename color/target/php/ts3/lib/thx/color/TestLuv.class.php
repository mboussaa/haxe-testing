<?php

// Generated by Haxe 3.3.0
class thx_color_TestLuv {
	public function __construct() {}
	public function testBasics() {
		$color = thx_color__Luv_Luv_Impl_::normalize((new _hx_array(array(0.5, 0.4, 0.6))));
		utest_Assert::equals(0.5, $color[0], null, _hx_anonymous(array("fileName" => "TestLuv.hx", "lineNumber" => 10, "className" => "thx.color.TestLuv", "methodName" => "testBasics")));
		utest_Assert::equals(0.4, $color[1], null, _hx_anonymous(array("fileName" => "TestLuv.hx", "lineNumber" => 11, "className" => "thx.color.TestLuv", "methodName" => "testBasics")));
		utest_Assert::equals(0.6, $color[2], null, _hx_anonymous(array("fileName" => "TestLuv.hx", "lineNumber" => 12, "className" => "thx.color.TestLuv", "methodName" => "testBasics")));
	}
	public function testString() {
		utest_Assert::equals("cieluv(0.5,0.4,0.6)", thx_color__Luv_Luv_Impl_::toString(thx_color__Luv_Luv_Impl_::normalize((new _hx_array(array(0.5, 0.4, 0.6))))), null, _hx_anonymous(array("fileName" => "TestLuv.hx", "lineNumber" => 17, "className" => "thx.color.TestLuv", "methodName" => "testString")));
	}
	public function testParse() {
		$color = thx_color__Luv_Luv_Impl_::fromString("cieluv(0.5,0.4,0.6)");
		utest_Assert::equals("cieluv(0.5,0.4,0.6)", thx_color__Luv_Luv_Impl_::toString($color), null, _hx_anonymous(array("fileName" => "TestLuv.hx", "lineNumber" => 22, "className" => "thx.color.TestLuv", "methodName" => "testParse")));
	}
	public function testFromFloat() {
		$s = thx_color__Luv_Luv_Impl_::fromString("cieluv(0.5,0.4,0.6)");
		$f = thx_color__Luv_Luv_Impl_::fromFloats((new _hx_array(array(0.5, 0.4, 0.6))));
		$tmp = thx_color__Luv_Luv_Impl_::equals($s, $f);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestLuv.hx", "lineNumber" => 28, "className" => "thx.color.TestLuv", "methodName" => "testFromFloat")));
	}
	public function testXyz() {
		$luv = (new _hx_array(array(0.5, 0.4, 0.6)));
		$xyz = thx_color__Luv_Luv_Impl_::toXyz($luv);
		thx_color__Xyz_Xyz_Impl_::toLuv($xyz);
		$tmp = thx_color__Luv_Luv_Impl_::nearEquals($luv, thx_color__Xyz_Xyz_Impl_::toLuv($xyz), null);
		utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestLuv.hx", "lineNumber" => 35, "className" => "thx.color.TestLuv", "methodName" => "testXyz")));
	}
	function __toString() { return 'thx.color.TestLuv'; }
}
