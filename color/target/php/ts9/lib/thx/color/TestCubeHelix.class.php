<?php

// Generated by Haxe 3.3.0
class thx_color_TestCubeHelix {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testBasics() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$cubeHelix = (new _hx_array(array(1, 0, 0, 1.0)));
			utest_Assert::equals(1, $cubeHelix[0], null, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 15, "className" => "thx.color.TestCubeHelix", "methodName" => "testBasics")));
			utest_Assert::equals(0, $cubeHelix[1], null, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 16, "className" => "thx.color.TestCubeHelix", "methodName" => "testBasics")));
			utest_Assert::equals(0, $cubeHelix[2], null, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 17, "className" => "thx.color.TestCubeHelix", "methodName" => "testBasics")));
			unset($cubeHelix);
		}
	}
	public function testStrings() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::equals("cubehelix(0,0,1)", thx_color__CubeHelix_CubeHelix_Impl_::toString((new _hx_array(array(0, 0, 1, 1.0)))), null, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 23, "className" => "thx.color.TestCubeHelix", "methodName" => "testStrings")));
		}
	}
	public function testFromString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color__CubeHelix_CubeHelix_Impl_::equals((new _hx_array(array(0.5, 0.2, 0.1, 1.0))), thx_color__CubeHelix_CubeHelix_Impl_::fromString("cubehelix(50%,0.2,10%)"));
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 28, "className" => "thx.color.TestCubeHelix", "methodName" => "testFromString")));
			unset($tmp);
		}
	}
	public function testNearEquals() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$c1 = (new _hx_array(array(206.182, 0.441, 0.090, 1.0)));
			$c2 = (new _hx_array(array(206.181, 0.440, 0.090, 1.0)));
			$tmp = thx_color__CubeHelix_CubeHelix_Impl_::equals($c1, $c2);
			utest_Assert::isFalse($tmp, null, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 35, "className" => "thx.color.TestCubeHelix", "methodName" => "testNearEquals")));
			$tmp1 = thx_color__CubeHelix_CubeHelix_Impl_::nearEquals($c1, $c2, 0.01);
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 36, "className" => "thx.color.TestCubeHelix", "methodName" => "testNearEquals")));
			unset($tmp1,$tmp,$c2,$c1);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.color.TestCubeHelix'; }
}
