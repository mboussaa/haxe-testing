<?php

// Generated by Haxe 3.3.0
class thx_color_TestCubeHelix extends nanotest_NanoTestCase {
	public function __construct($posInfos = null) { if(!php_Boot::$skip_constructor) {
		parent::__construct($posInfos);
	}}
	public function testBasics() {
		$cubeHelix = (new _hx_array(array(1, 0, 0, 1.0)));
		$tmp = Std::int($cubeHelix[0]);
		$this->assertEquals(1, $tmp, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 12, "className" => "thx.color.TestCubeHelix", "methodName" => "testBasics")));
		$tmp1 = Std::int($cubeHelix[1]);
		$this->assertEquals(0, $tmp1, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 13, "className" => "thx.color.TestCubeHelix", "methodName" => "testBasics")));
		$tmp2 = Std::int($cubeHelix[2]);
		$this->assertEquals(0, $tmp2, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 14, "className" => "thx.color.TestCubeHelix", "methodName" => "testBasics")));
	}
	public function testStrings() {
		$this->assertEquals("cubehelix(0,0,1)", thx_color__CubeHelix_CubeHelix_Impl_::toString((new _hx_array(array(0, 0, 1, 1.0)))), _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 19, "className" => "thx.color.TestCubeHelix", "methodName" => "testStrings")));
	}
	public function testFromString() {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::equals((new _hx_array(array(0.5, 0.2, 0.1, 1.0))), thx_color__CubeHelix_CubeHelix_Impl_::fromString("cubehelix(50%,0.2,10%)"));
		$this->assertTrue($tmp, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 23, "className" => "thx.color.TestCubeHelix", "methodName" => "testFromString")));
	}
	public function testNearEquals() {
		$c1 = (new _hx_array(array(206.182, 0.441, 0.090, 1.0)));
		$c2 = (new _hx_array(array(206.181, 0.440, 0.090, 1.0)));
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::equals($c1, $c2);
		$this->assertFalse($tmp, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 29, "className" => "thx.color.TestCubeHelix", "methodName" => "testNearEquals")));
		$tmp1 = thx_color__CubeHelix_CubeHelix_Impl_::nearEquals($c1, $c2, 0.01);
		$this->assertTrue($tmp1, _hx_anonymous(array("fileName" => "TestCubeHelix.hx", "lineNumber" => 30, "className" => "thx.color.TestCubeHelix", "methodName" => "testNearEquals")));
	}
	function __toString() { return 'thx.color.TestCubeHelix'; }
}
