<?php

// Generated by Haxe 3.3.0
class thx_color_TestHcl {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testParse() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$hcl = thx_color__LCh_LCh_Impl_::fromString("hcl(0.5,0,1)");
			utest_Assert::equals(0.5, $hcl[2], null, _hx_anonymous(array("fileName" => "TestHcl.hx", "lineNumber" => 15, "className" => "thx.color.TestHcl", "methodName" => "testParse")));
			utest_Assert::equals(0, $hcl[1], null, _hx_anonymous(array("fileName" => "TestHcl.hx", "lineNumber" => 16, "className" => "thx.color.TestHcl", "methodName" => "testParse")));
			utest_Assert::equals(1, $hcl[0], null, _hx_anonymous(array("fileName" => "TestHcl.hx", "lineNumber" => 17, "className" => "thx.color.TestHcl", "methodName" => "testParse")));
			unset($hcl);
		}
	}
	public function testStrings() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::equals("hcl(0,0.5,1)", thx_color__LCh_LCh_Impl_::toHclString((new _hx_array(array(1, 0.5, 0)))), null, _hx_anonymous(array("fileName" => "TestHcl.hx", "lineNumber" => 23, "className" => "thx.color.TestHcl", "methodName" => "testStrings")));
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.color.TestHcl'; }
}
