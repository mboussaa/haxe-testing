<?php

// Generated by Haxe 3.3.0
class thx_color_Color {
	public function __construct(){}
	static $namedColors;
	static function parse($color) {
		$info = thx_color_parse_ColorParser::parseHex($color);
		if(null === $info) {
			$info = thx_color_parse_ColorParser::parseColor($color);
		}
		if(null === $info) {
			$rgb = thx_color_Color::$namedColors->get($color);
			if(null === $rgb) {
				return null;
			} else {
				return thx_color__Rgbx_Rgbx_Impl_::toRgbxa($rgb);
			}
		}
		try {
			switch($info->name) {
			case "ciexyz":case "xyz":{
				$tmp = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				$tmp1 = thx_color__Xyz_Xyz_Impl_::fromFloats($tmp);
				return thx_color__Xyz_Xyz_Impl_::toRgbxa($tmp1);
			}break;
			case "cmy":{
				$tmp2 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				$tmp3 = thx_color__Cmy_Cmy_Impl_::fromFloats($tmp2);
				return thx_color__Cmy_Cmy_Impl_::toRgbxa($tmp3);
			}break;
			case "cmyk":{
				$tmp4 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 4, false);
				$tmp5 = thx_color__Cmyk_Cmyk_Impl_::fromFloats($tmp4);
				return thx_color__Cmyk_Cmyk_Impl_::toRgbxa($tmp5);
			}break;
			case "cubehelix":{
				$tmp6 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				$tmp7 = thx_color__CubeHelix_CubeHelix_Impl_::fromFloats($tmp6);
				return thx_color__CubeHelix_CubeHelix_Impl_::toRgbxa($tmp7);
			}break;
			case "gray":case "grey":{
				$tmp8 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 1, false);
				return thx_color__Grey_Grey_Impl_::toRgbxa($tmp8[0]);
			}break;
			case "hcl":{
				$c = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				return thx_color__LCh_LCh_Impl_::toRgbxa((new _hx_array(array($c[2], $c[1], $c[0]))));
			}break;
			case "hsb":case "hsv":{
				$tmp9 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				$tmp10 = thx_color__Hsv_Hsv_Impl_::fromFloats($tmp9);
				return thx_color__Hsv_Hsv_Impl_::toRgbxa($tmp10);
			}break;
			case "hsl":{
				$tmp11 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				$tmp12 = thx_color__Hsl_Hsl_Impl_::fromFloats($tmp11);
				return thx_color__Hsl_Hsl_Impl_::toRgbxa($tmp12);
			}break;
			case "hsla":{
				$tmp13 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 4, false);
				$tmp14 = thx_color__Hsla_Hsla_Impl_::fromFloats($tmp13);
				return thx_color__Hsla_Hsla_Impl_::toRgbxa($tmp14);
			}break;
			case "hsva":{
				$tmp15 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 4, false);
				$tmp16 = thx_color__Hsva_Hsva_Impl_::fromFloats($tmp15);
				return thx_color__Hsva_Hsva_Impl_::toRgbxa($tmp16);
			}break;
			case "hunterlab":{
				$tmp17 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 4, false);
				$tmp18 = thx_color__HunterLab_HunterLab_Impl_::fromFloats($tmp17);
				return thx_color__HunterLab_HunterLab_Impl_::toRgbxa($tmp18);
			}break;
			case "cielab":case "lab":{
				$tmp19 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				$tmp20 = thx_color__Lab_Lab_Impl_::fromFloats($tmp19);
				return thx_color__Lab_Lab_Impl_::toRgbxa($tmp20);
			}break;
			case "cielch":case "lch":{
				$tmp21 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				$tmp22 = thx_color__LCh_LCh_Impl_::fromFloats($tmp21);
				return thx_color__LCh_LCh_Impl_::toRgbxa($tmp22);
			}break;
			case "cieluv":case "luv":{
				$tmp23 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				$tmp24 = thx_color__Luv_Luv_Impl_::fromFloats($tmp23);
				return thx_color__Luv_Luv_Impl_::toRgbxa($tmp24);
			}break;
			case "rgb":{
				$tmp25 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, true);
				$tmp26 = thx_color__Rgbx_Rgbx_Impl_::fromFloats($tmp25);
				return thx_color__Rgbx_Rgbx_Impl_::toRgbxa($tmp26);
			}break;
			case "rgba":{
				$tmp27 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 4, true);
				return thx_color__Rgbxa_Rgbxa_Impl_::fromFloats($tmp27);
			}break;
			case "yuv":{
				$tmp28 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				$tmp29 = thx_color__Yuv_Yuv_Impl_::fromFloats($tmp28);
				return thx_color__Yuv_Yuv_Impl_::toRgbxa($tmp29);
			}break;
			case "yxy":{
				$tmp30 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				$tmp31 = thx_color__Yxy_Yxy_Impl_::fromFloats($tmp30);
				return thx_color__Yxy_Yxy_Impl_::toRgbxa($tmp31);
			}break;
			default:{
				return null;
			}break;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function addRgbPalette($palette) {
		thx_Maps::tuples($palette)->map(array(new _hx_lambda(array(), "thx_color_Color_0"), 'execute'));
	}
	static function addLabPalette($palette) {
		thx_Maps::tuples($palette)->map(array(new _hx_lambda(array(), "thx_color_Color_1"), 'execute'));
	}
	function __toString() { return 'thx.color.Color'; }
}
thx_color_Color::$namedColors = new haxe_ds_StringMap();
function thx_color_Color_0($_) {
	{
		{
			$value = thx_color__Rgb_Rgb_Impl_::toRgbx($_->_1);
			thx_color_Color::$namedColors->set($_->_0, $value);
		}
		return;
	}
}
function thx_color_Color_1($_) {
	{
		{
			$value = thx_color__Lab_Lab_Impl_::toRgbx($_->_1);
			thx_color_Color::$namedColors->set($_->_0, $value);
		}
		return;
	}
}
