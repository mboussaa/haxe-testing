<?php

// Generated by Haxe 3.3.0
class thx_color_TestColor {
	public function __construct() {}
	public function testParseHex() {
		$tmp = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp1 = thx_color_Color::parse("#ff0000");
		$this->assertEquals($tmp, $tmp1, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 11, "className" => "thx.color.TestColor", "methodName" => "testParseHex")));
		$tmp2 = thx_color__Rgb_Rgb_Impl_::withAlpha(thx_color_palettes_Web::$red, 0);
		$tmp3 = thx_color__Rgba_Rgba_Impl_::toRgbxa($tmp2);
		$tmp4 = thx_color_Color::parse("#00ff0000");
		$this->assertEquals($tmp3, $tmp4, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 12, "className" => "thx.color.TestColor", "methodName" => "testParseHex")));
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp6 = thx_color_Color::parse("#FF0000");
		$this->assertEquals($tmp5, $tmp6, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 13, "className" => "thx.color.TestColor", "methodName" => "testParseHex")));
		$tmp7 = thx_color__Rgb_Rgb_Impl_::withAlpha(thx_color_palettes_Web::$red, 0);
		$tmp8 = thx_color__Rgba_Rgba_Impl_::toRgbxa($tmp7);
		$tmp9 = thx_color_Color::parse("#00FF0000");
		$this->assertEquals($tmp8, $tmp9, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 14, "className" => "thx.color.TestColor", "methodName" => "testParseHex")));
		$tmp10 = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp11 = thx_color_Color::parse("ff0000");
		$this->assertEquals($tmp10, $tmp11, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 15, "className" => "thx.color.TestColor", "methodName" => "testParseHex")));
		$tmp12 = thx_color__Rgb_Rgb_Impl_::withAlpha(thx_color_palettes_Web::$red, 0);
		$tmp13 = thx_color__Rgba_Rgba_Impl_::toRgbxa($tmp12);
		$tmp14 = thx_color_Color::parse("00ff0000");
		$this->assertEquals($tmp13, $tmp14, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 16, "className" => "thx.color.TestColor", "methodName" => "testParseHex")));
		$tmp15 = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp16 = thx_color_Color::parse("0xff0000");
		$this->assertEquals($tmp15, $tmp16, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 17, "className" => "thx.color.TestColor", "methodName" => "testParseHex")));
		$tmp17 = thx_color__Rgb_Rgb_Impl_::withAlpha(thx_color_palettes_Web::$red, 0);
		$tmp18 = thx_color__Rgba_Rgba_Impl_::toRgbxa($tmp17);
		$tmp19 = thx_color_Color::parse("0x00ff0000");
		$this->assertEquals($tmp18, $tmp19, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 18, "className" => "thx.color.TestColor", "methodName" => "testParseHex")));
	}
	public function testParseGrey() {
		$tmp = thx_color__Grey_Grey_Impl_::toRgbxa(0.5);
		$tmp1 = thx_color_Color::parse("grey(0.5)");
		$this->assertEquals($tmp, $tmp1, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 22, "className" => "thx.color.TestColor", "methodName" => "testParseGrey")));
		$tmp2 = thx_color__Grey_Grey_Impl_::toRgbxa(0.5);
		$tmp3 = thx_color_Color::parse("grey(50%)");
		$this->assertEquals($tmp2, $tmp3, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 23, "className" => "thx.color.TestColor", "methodName" => "testParseGrey")));
	}
	public function testParseCmyk() {
		$tmp = thx_color__Cmyk_Cmyk_Impl_::toRgbxa((new _hx_array(array(1, 0.5, 0.25, 0.1))));
		$tmp1 = thx_color_Color::parse("cmyk(100%,0.5,25%,0.1)");
		$this->assertEquals($tmp, $tmp1, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 27, "className" => "thx.color.TestColor", "methodName" => "testParseCmyk")));
	}
	public function testParseHsl() {
		$tmp = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp1 = thx_color_Color::parse("hsl(0,100%,50%)");
		$this->assertEquals($tmp, $tmp1, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 31, "className" => "thx.color.TestColor", "methodName" => "testParseHsl")));
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp3 = thx_color_Color::parse("hsl(0deg,100%,50%)");
		$this->assertEquals($tmp2, $tmp3, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 32, "className" => "thx.color.TestColor", "methodName" => "testParseHsl")));
		$tmp4 = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp5 = thx_color_Color::parse("hsla(0deg,100%,50%,1)");
		$this->assertEquals($tmp4, $tmp5, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 33, "className" => "thx.color.TestColor", "methodName" => "testParseHsl")));
		$tmp6 = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp7 = thx_color_Color::parse("hsla(0,100%,50%,100%)");
		$this->assertEquals($tmp6, $tmp7, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 34, "className" => "thx.color.TestColor", "methodName" => "testParseHsl")));
	}
	public function testParseHsv() {
		$tmp = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp1 = thx_color_Color::parse("hsv(0,100%, 100%)");
		$this->assertEquals($tmp, $tmp1, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 38, "className" => "thx.color.TestColor", "methodName" => "testParseHsv")));
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp3 = thx_color_Color::parse("hsv(0deg,100%,100%)");
		$this->assertEquals($tmp2, $tmp3, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 39, "className" => "thx.color.TestColor", "methodName" => "testParseHsv")));
	}
	public function testParseRgb() {
		$tmp = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp1 = thx_color_Color::parse("rgb(255,0,0)");
		$this->assertEquals($tmp, $tmp1, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 43, "className" => "thx.color.TestColor", "methodName" => "testParseRgb")));
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toRgbxa(thx_color_palettes_Web::$red);
		$tmp3 = thx_color_Color::parse("rgb(100%,0,0)");
		$this->assertEquals($tmp2, $tmp3, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 44, "className" => "thx.color.TestColor", "methodName" => "testParseRgb")));
		$tmp4 = thx_color__Rgbx_Rgbx_Impl_::toRgbxa((new _hx_array(array(0.5, 0, 0))));
		$tmp5 = thx_color_Color::parse("rgb(0.5,0,0)");
		$this->assertEquals($tmp4, $tmp5, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 45, "className" => "thx.color.TestColor", "methodName" => "testParseRgb")));
		$tmp6 = thx_color__Rgba_Rgba_Impl_::toRgbxa(16711935);
		$tmp7 = thx_color_Color::parse("rgba(0,255,0,1)");
		$this->assertEquals($tmp6, $tmp7, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 46, "className" => "thx.color.TestColor", "methodName" => "testParseRgb")));
		$tmp8 = thx_color__Rgba_Rgba_Impl_::toRgbxa(16711935);
		$tmp9 = thx_color_Color::parse("rgba(0,100%,0,1)");
		$this->assertEquals($tmp8, $tmp9, _hx_anonymous(array("fileName" => "TestColor.hx", "lineNumber" => 47, "className" => "thx.color.TestColor", "methodName" => "testParseRgb")));
	}
	public function assertEquals($a, $b, $pos = null) {
		$tmp = thx_color__Rgbxa_Rgbxa_Impl_::equals($a, $b);
		utest_Assert::isTrue($tmp, "expected " . _hx_string_or_null(thx_color__Rgbxa_Rgbxa_Impl_::toString($a)) . " but was " . _hx_string_or_null(thx_color__Rgbxa_Rgbxa_Impl_::toString($b)), $pos);
	}
	function __toString() { return 'thx.color.TestColor'; }
}
