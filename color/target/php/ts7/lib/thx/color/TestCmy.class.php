<?php

// Generated by Haxe 3.3.0
class thx_color_TestCmy extends nanotest_NanoTestCase {
	public function __construct($posInfos = null) { if(!php_Boot::$skip_constructor) {
		parent::__construct($posInfos);
	}}
	public function testBasics() {
		$color = (new _hx_array(array(0.5, 0.5, 0.5)));
		$this->assertEquals(0.5, $color[0], _hx_anonymous(array("fileName" => "TestCmy.hx", "lineNumber" => 11, "className" => "thx.color.TestCmy", "methodName" => "testBasics")));
		$this->assertEquals(0.5, $color[1], _hx_anonymous(array("fileName" => "TestCmy.hx", "lineNumber" => 12, "className" => "thx.color.TestCmy", "methodName" => "testBasics")));
		$this->assertEquals(0.5, $color[2], _hx_anonymous(array("fileName" => "TestCmy.hx", "lineNumber" => 13, "className" => "thx.color.TestCmy", "methodName" => "testBasics")));
		$color = thx_color__Cmy_Cmy_Impl_::normalize((new _hx_array(array(2, -2, 2))));
		$this->assertTrue(_hx_equal(1, $color[0]), _hx_anonymous(array("fileName" => "TestCmy.hx", "lineNumber" => 16, "className" => "thx.color.TestCmy", "methodName" => "testBasics")));
		$this->assertTrue(_hx_equal(0, $color[1]), _hx_anonymous(array("fileName" => "TestCmy.hx", "lineNumber" => 17, "className" => "thx.color.TestCmy", "methodName" => "testBasics")));
		$this->assertTrue(_hx_equal(1, $color[2]), _hx_anonymous(array("fileName" => "TestCmy.hx", "lineNumber" => 18, "className" => "thx.color.TestCmy", "methodName" => "testBasics")));
	}
	public function testString() {
		$this->assertEquals("cmy(0.5,0.5,0.5)", thx_color__Cmy_Cmy_Impl_::toString((new _hx_array(array(0.5, 0.5, 0.5)))), _hx_anonymous(array("fileName" => "TestCmy.hx", "lineNumber" => 23, "className" => "thx.color.TestCmy", "methodName" => "testString")));
	}
	public function testParse() {
		$color = thx_color__Cmy_Cmy_Impl_::fromString("cmy(0.5,0.5,0.5)");
		$this->assertEquals("cmy(0.5,0.5,0.5)", thx_color__Cmy_Cmy_Impl_::toString($color), _hx_anonymous(array("fileName" => "TestCmy.hx", "lineNumber" => 28, "className" => "thx.color.TestCmy", "methodName" => "testParse")));
	}
	public function testFromFloat() {
		$s = thx_color__Cmy_Cmy_Impl_::fromString("cmy(0.5,0.5,0.5)");
		$f = thx_color__Cmy_Cmy_Impl_::fromFloats((new _hx_array(array(0.5, 0.5, 0.5))));
		$tmp = thx_color__Cmy_Cmy_Impl_::equals($s, $f);
		$this->assertTrue($tmp, _hx_anonymous(array("fileName" => "TestCmy.hx", "lineNumber" => 34, "className" => "thx.color.TestCmy", "methodName" => "testFromFloat")));
	}
	function __toString() { return 'thx.color.TestCmy'; }
}
