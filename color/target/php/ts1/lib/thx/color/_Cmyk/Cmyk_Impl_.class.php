<?php

// Generated by Haxe 3.3.0
class thx_color__Cmyk_Cmyk_Impl_ {
	public function __construct(){}
	static function create($cyan, $magenta, $yellow, $black) {
		return (new _hx_array(array($cyan, $magenta, $yellow, $black)));
	}
	static function fromFloats($arr) {
		thx_ArrayFloats::resize($arr, 4, null);
		return (new _hx_array(array($arr[0], $arr[1], $arr[2], $arr[3])));
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseColor($color);
		if(null === $info) {
			return null;
		}
		try {
			if($info->name === "cmyk") {
				$channels = thx_color_parse_ColorParser::getFloatChannels($info->channels, 4, false);
				return $channels;
			} else {
				return null;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($channels) {
		return $channels;
	}
	static function darker($this1, $t) {
		return (new _hx_array(array($this1[0], $this1[1], $this1[2], thx_Floats::interpolate($t, $this1[3], 1))));
	}
	static function lighter($this1, $t) {
		return (new _hx_array(array($this1[0], $this1[1], $this1[2], thx_Floats::interpolate($t, $this1[3], 0))));
	}
	static function interpolate($this1, $other, $t) {
		return (new _hx_array(array(thx_Floats::interpolate($t, $this1[0], $other[0]), thx_Floats::interpolate($t, $this1[1], $other[1]), thx_Floats::interpolate($t, $this1[2], $other[2]), thx_Floats::interpolate($t, $this1[3], $other[3]))));
	}
	static function min($this1, $other) {
		$cyan = Math::min($this1[0], $other[0]);
		$magenta = Math::min($this1[1], $other[1]);
		$yellow = Math::min($this1[2], $other[2]);
		$black = Math::min($this1[3], $other[3]);
		return (new _hx_array(array($cyan, $magenta, $yellow, $black)));
	}
	static function max($this1, $other) {
		$cyan = Math::max($this1[0], $other[0]);
		$magenta = Math::max($this1[1], $other[1]);
		$yellow = Math::max($this1[2], $other[2]);
		$black = Math::max($this1[3], $other[3]);
		return (new _hx_array(array($cyan, $magenta, $yellow, $black)));
	}
	static function normalize($this1) {
		$this2 = null;
		$v = $this1[0];
		$tmp = null;
		if($v < 0) {
			$tmp = 0;
		} else {
			if($v > 1) {
				$tmp = 1;
			} else {
				$tmp = $v;
			}
		}
		$v1 = $this1[1];
		$tmp1 = null;
		if($v1 < 0) {
			$tmp1 = 0;
		} else {
			if($v1 > 1) {
				$tmp1 = 1;
			} else {
				$tmp1 = $v1;
			}
		}
		$v2 = $this1[2];
		$tmp2 = null;
		if($v2 < 0) {
			$tmp2 = 0;
		} else {
			if($v2 > 1) {
				$tmp2 = 1;
			} else {
				$tmp2 = $v2;
			}
		}
		$v3 = $this1[3];
		$tmp3 = null;
		if($v3 < 0) {
			$tmp3 = 0;
		} else {
			if($v3 > 1) {
				$tmp3 = 1;
			} else {
				$tmp3 = $v3;
			}
		}
		$this2 = (new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3)));
		return $this2;
	}
	static function roundTo($this1, $decimals) {
		$cyan = thx_Floats::roundTo($this1[0], $decimals);
		$magenta = thx_Floats::roundTo($this1[1], $decimals);
		$yellow = thx_Floats::roundTo($this1[2], $decimals);
		$black = thx_Floats::roundTo($this1[3], $decimals);
		return (new _hx_array(array($cyan, $magenta, $yellow, $black)));
	}
	static function withCyan($this1, $newcyan) {
		return (new _hx_array(array($newcyan, $this1[1], $this1[2], $this1[3])));
	}
	static function withMagenta($this1, $newmagenta) {
		return (new _hx_array(array($this1[0], $newmagenta, $this1[2], $this1[3])));
	}
	static function withYellow($this1, $newyellow) {
		return (new _hx_array(array($this1[0], $this1[1], $newyellow, $this1[3])));
	}
	static function withBlack($this1, $newblack) {
		return (new _hx_array(array($this1[0], $this1[1], $this1[2], $newblack)));
	}
	static function toString($this1) {
		return "cmyk(" . _hx_string_rec($this1[0], "") . "," . _hx_string_rec($this1[1], "") . "," . _hx_string_rec($this1[2], "") . "," . _hx_string_rec($this1[3], "") . ")";
	}
	static function equals($this1, $other) {
		return thx_color__Cmyk_Cmyk_Impl_::nearEquals($this1, $other, null);
	}
	static function nearEquals($this1, $other, $tolerance = null) {
		if($tolerance === null) {
			$tolerance = 1e-9;
		}
		$tmp = null;
		$tmp1 = null;
		$tmp2 = thx_Floats::nearEquals($this1[0], $other[0], $tolerance);
		if($tmp2) {
			$tmp1 = thx_Floats::nearEquals($this1[1], $other[1], $tolerance);
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = thx_Floats::nearEquals($this1[2], $other[2], $tolerance);
		} else {
			$tmp = false;
		}
		if($tmp) {
			return thx_Floats::nearEquals($this1[3], $other[3], $tolerance);
		} else {
			return false;
		}
	}
	static function toLab($this1) {
		$tmp = thx_color__Cmyk_Cmyk_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toLab($tmp);
	}
	static function toLCh($this1) {
		$tmp = thx_color__Cmyk_Cmyk_Impl_::toLab($this1);
		return thx_color__Lab_Lab_Impl_::toLCh($tmp);
	}
	static function toLuv($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toLuv(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1));
	}
	static function toCmy($this1) {
		return (new _hx_array(array($this1->a[3] + (1 - $this1[3]) * $this1[0], $this1->a[3] + (1 - $this1[3]) * $this1[1], $this1->a[3] + (1 - $this1[3]) * $this1[2])));
	}
	static function toCubeHelix($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toCubeHelixWithGamma(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1), 1);
	}
	static function toGrey($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toGrey(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1));
	}
	static function toHsl($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toHsl(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1));
	}
	static function toHsv($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toHsv(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1));
	}
	static function toHunterLab($this1) {
		$tmp = thx_color__Cmyk_Cmyk_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toHunterLab($tmp);
	}
	static function toRgb($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toRgb(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1));
	}
	static function toRgba($this1) {
		$tmp = thx_color__Cmyk_Cmyk_Impl_::toRgbxa($this1);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp);
	}
	static function toRgbx($this1) {
		return (new _hx_array(array((1 - $this1[3]) * (1 - $this1[0]), (1 - $this1[3]) * (1 - $this1[1]), (1 - $this1[3]) * (1 - $this1[2]))));
	}
	static function toRgbxa($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toRgbxa(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1));
	}
	static function toTemperature($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toTemperature(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1));
	}
	static function toXyz($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toXyz(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1));
	}
	static function toYuv($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toYuv(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1));
	}
	static function toYxy($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toYxy(thx_color__Cmyk_Cmyk_Impl_::toRgbx($this1));
	}
	static function get_cyan($this1) {
		return $this1[0];
	}
	static function get_magenta($this1) {
		return $this1[1];
	}
	static function get_yellow($this1) {
		return $this1[2];
	}
	static function get_black($this1) {
		return $this1[3];
	}
	static $__properties__ = array("get_yellow" => "get_yellow","get_magenta" => "get_magenta","get_cyan" => "get_cyan","get_black" => "get_black");
	function __toString() { return 'thx.color._Cmyk.Cmyk_Impl_'; }
}
