<?php

// Generated by Haxe 3.3.0
class thx_color_TestLab {
	public function __construct() {}
	public function testBasics() {
		$color = (new _hx_array(array(100, 10, -10)));
		utest_Assert::equals(100, $color[0], null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 11, "className" => "thx.color.TestLab", "methodName" => "testBasics")));
		utest_Assert::equals(10, $color[1], null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 12, "className" => "thx.color.TestLab", "methodName" => "testBasics")));
		utest_Assert::equals(-10, $color[2], null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 13, "className" => "thx.color.TestLab", "methodName" => "testBasics")));
	}
	public function testString() {
		utest_Assert::equals("lab(100,10,-10)", thx_color__Lab_Lab_Impl_::toString((new _hx_array(array(100, 10, -10)))), null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 18, "className" => "thx.color.TestLab", "methodName" => "testString")));
	}
	public function testParse() {
		$color = thx_color__Lab_Lab_Impl_::fromString("lab(100,10,-10)");
		utest_Assert::equals("lab(100,10,-10)", thx_color__Lab_Lab_Impl_::toString($color), null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 23, "className" => "thx.color.TestLab", "methodName" => "testParse")));
	}
	public function testFromFloat() {
		$s = thx_color__Lab_Lab_Impl_::fromString("lab(50,10,-10)");
		$f = thx_color__Lab_Lab_Impl_::fromFloats((new _hx_array(array(50.0, 10.0, -10.0))));
		utest_Assert::same($s, $f, null, null, null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 29, "className" => "thx.color.TestLab", "methodName" => "testFromFloat")));
	}
	public function testFromString() {
		$color = (new _hx_array(array(50, 10, -10)));
		$tmp = thx_color__Lab_Lab_Impl_::fromString("lab(50,10,-10)");
		utest_Assert::same($color, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 35, "className" => "thx.color.TestLab", "methodName" => "testFromString")));
	}
	public function testDistance() {
		$orange = thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$orange);
		$red = thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$red);
		$blue = thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$blue);
		utest_Assert::isTrue(thx_color__Lab_Lab_Impl_::distance($orange, $red) < thx_color__Lab_Lab_Impl_::distance($orange, $blue), null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 44, "className" => "thx.color.TestLab", "methodName" => "testDistance")));
	}
	public function testMatch() {
		$tmp = thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$red);
		$arr = (new _hx_array(array($tmp, thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$blue))));
		$tmp1 = thx_color__Lab_Lab_Impl_::match(thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$orange), $arr);
		$tmp2 = thx_color__Lab_Lab_Impl_::equals($tmp1, thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$red));
		utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 49, "className" => "thx.color.TestLab", "methodName" => "testMatch")));
	}
	function __toString() { return 'thx.color.TestLab'; }
}
