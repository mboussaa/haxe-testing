<?php

// Generated by Haxe 3.3.0
class thx_color_TestLab {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testBasics() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$color = (new _hx_array(array(100, 10, -10)));
			utest_Assert::equals(100, $color[0], null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 15, "className" => "thx.color.TestLab", "methodName" => "testBasics")));
			utest_Assert::equals(10, $color[1], null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 16, "className" => "thx.color.TestLab", "methodName" => "testBasics")));
			utest_Assert::equals(-10, $color[2], null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 17, "className" => "thx.color.TestLab", "methodName" => "testBasics")));
			unset($color);
		}
	}
	public function testString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			utest_Assert::equals("lab(100,10,-10)", thx_color__Lab_Lab_Impl_::toString((new _hx_array(array(100, 10, -10)))), null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 23, "className" => "thx.color.TestLab", "methodName" => "testString")));
		}
	}
	public function testParse() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$color = thx_color__Lab_Lab_Impl_::fromString("lab(100,10,-10)");
			utest_Assert::equals("lab(100,10,-10)", thx_color__Lab_Lab_Impl_::toString($color), null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 29, "className" => "thx.color.TestLab", "methodName" => "testParse")));
			unset($color);
		}
	}
	public function testFromFloat() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$s = thx_color__Lab_Lab_Impl_::fromString("lab(50,10,-10)");
			$f = thx_color__Lab_Lab_Impl_::fromFloats((new _hx_array(array(50.0, 10.0, -10.0))));
			utest_Assert::same($s, $f, null, null, null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 36, "className" => "thx.color.TestLab", "methodName" => "testFromFloat")));
			unset($s,$f);
		}
	}
	public function testFromString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$color = (new _hx_array(array(50, 10, -10)));
			$tmp = thx_color__Lab_Lab_Impl_::fromString("lab(50,10,-10)");
			utest_Assert::same($color, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 43, "className" => "thx.color.TestLab", "methodName" => "testFromString")));
			unset($tmp,$color);
		}
	}
	public function testDistance() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$orange = thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$orange);
			$red = thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$red);
			$blue = thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$blue);
			utest_Assert::isTrue(thx_color__Lab_Lab_Impl_::distance($orange, $red) < thx_color__Lab_Lab_Impl_::distance($orange, $blue), null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 53, "className" => "thx.color.TestLab", "methodName" => "testDistance")));
			unset($red,$orange,$blue);
		}
	}
	public function testMatch() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$red);
			$arr = (new _hx_array(array($tmp, thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$blue))));
			$tmp1 = thx_color__Lab_Lab_Impl_::match(thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$orange), $arr);
			$tmp2 = thx_color__Lab_Lab_Impl_::equals($tmp1, thx_color__Rgb_Rgb_Impl_::toLab(thx_color_palettes_Web::$red));
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestLab.hx", "lineNumber" => 59, "className" => "thx.color.TestLab", "methodName" => "testMatch")));
			unset($tmp2,$tmp1,$tmp,$arr);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.color.TestLab'; }
}
