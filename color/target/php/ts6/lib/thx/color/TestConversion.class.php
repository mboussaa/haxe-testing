<?php

// Generated by Haxe 3.3.0
class thx_color_TestConversion {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testLab() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_0"), 'execute'));
			unset($tmp);
		}
	}
	public function testLCh() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_1"), 'execute'));
			unset($tmp);
		}
	}
	public function testLuv() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_2"), 'execute'));
			unset($tmp);
		}
	}
	public function testCmy() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_3"), 'execute'));
			unset($tmp);
		}
	}
	public function testCmyk() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_4"), 'execute'));
			unset($tmp);
		}
	}
	public function testCubehelix() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_5"), 'execute'));
			unset($tmp);
		}
	}
	public function testHsl() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_6"), 'execute'));
			unset($tmp);
		}
	}
	public function testHsv() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_7"), 'execute'));
			unset($tmp);
		}
	}
	public function testHunterLab() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_8"), 'execute'));
			unset($tmp);
		}
	}
	public function testRgbx() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_9"), 'execute'));
			unset($tmp);
		}
	}
	public function testXyz() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_10"), 'execute'));
			unset($tmp);
		}
	}
	public function testYuv() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_11"), 'execute'));
			unset($tmp);
		}
	}
	public function testYxy() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color_palettes_Web::$names->keys();
			thx_Iterators::map($tmp, array(new _hx_lambda(array(), "thx_color_TestConversion_12"), 'execute'));
			unset($tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.color.TestConversion'; }
}
function thx_color_TestConversion_0($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toLab($expected);
		$test = thx_color__Lab_Lab_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 20, "className" => "thx.color.TestConversion", "methodName" => "testLab")));
	}
}
function thx_color_TestConversion_1($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toLCh($expected);
		$test = thx_color__LCh_LCh_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 30, "className" => "thx.color.TestConversion", "methodName" => "testLCh")));
	}
}
function thx_color_TestConversion_2($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toLuv($expected);
		$test = thx_color__Luv_Luv_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 40, "className" => "thx.color.TestConversion", "methodName" => "testLuv")));
	}
}
function thx_color_TestConversion_3($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toCmy($expected);
		$test = thx_color__Cmy_Cmy_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 50, "className" => "thx.color.TestConversion", "methodName" => "testCmy")));
	}
}
function thx_color_TestConversion_4($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toCmyk($expected);
		$test = thx_color__Cmyk_Cmyk_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 60, "className" => "thx.color.TestConversion", "methodName" => "testCmyk")));
	}
}
function thx_color_TestConversion_5($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toCubeHelix($expected);
		$test = thx_color__CubeHelix_CubeHelix_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 70, "className" => "thx.color.TestConversion", "methodName" => "testCubehelix")));
	}
}
function thx_color_TestConversion_6($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toHsl($expected);
		$test = thx_color__Hsl_Hsl_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 80, "className" => "thx.color.TestConversion", "methodName" => "testHsl")));
	}
}
function thx_color_TestConversion_7($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toHsv($expected);
		$test = thx_color__Hsv_Hsv_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 90, "className" => "thx.color.TestConversion", "methodName" => "testHsv")));
	}
}
function thx_color_TestConversion_8($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toHunterLab($expected);
		$test = thx_color__HunterLab_HunterLab_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 100, "className" => "thx.color.TestConversion", "methodName" => "testHunterLab")));
	}
}
function thx_color_TestConversion_9($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toRgbx($expected);
		$test = thx_color__Rgbx_Rgbx_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 110, "className" => "thx.color.TestConversion", "methodName" => "testRgbx")));
	}
}
function thx_color_TestConversion_10($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toXyz($expected);
		$test = thx_color__Xyz_Xyz_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 120, "className" => "thx.color.TestConversion", "methodName" => "testXyz")));
	}
}
function thx_color_TestConversion_11($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$test = thx_color__Yuv_Yuv_Impl_::toRgb(thx_color__Rgb_Rgb_Impl_::toYuv($expected));
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 130, "className" => "thx.color.TestConversion", "methodName" => "testYuv")));
	}
}
function thx_color_TestConversion_12($name) {
	{
		$expected = thx_color_palettes_Web::$names->get($name);
		$color = thx_color__Rgb_Rgb_Impl_::toYxy($expected);
		$test = thx_color__Yxy_Yxy_Impl_::toRgb($color);
		$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($test);
		$tmp3 = thx_color__Rgb_Rgb_Impl_::toString($expected);
		$tmp4 = "expected " . _hx_string_or_null($tmp3) . " but was ";
		$tmp5 = thx_color__Rgb_Rgb_Impl_::toString($test);
		utest_Assert::equals($tmp1, $tmp2, _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5) . " for " . _hx_string_or_null($name), _hx_anonymous(array("fileName" => "TestConversion.hx", "lineNumber" => 140, "className" => "thx.color.TestConversion", "methodName" => "testYxy")));
	}
}
