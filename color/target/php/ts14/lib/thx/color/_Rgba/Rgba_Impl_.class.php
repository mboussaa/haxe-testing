<?php

// Generated by Haxe 3.3.0
class thx_color__Rgba_Rgba_Impl_ {
	public function __construct(){}
	static function create($red, $green, $blue, $alpha) {
		return ($red & 255) << 24 | ($green & 255) << 16 | ($blue & 255) << 8 | $alpha & 255;
	}
	static function fromFloats($arr) {
		$ints = thx_ArrayFloats::resize($arr, 4, null)->map(array(new _hx_lambda(array(), "thx_color__Rgba_Rgba_Impl__0"), 'execute'));
		return ($ints->a[0] & 255) << 24 | ($ints->a[1] & 255) << 16 | ($ints->a[2] & 255) << 8 | $ints->a[3] & 255;
	}
	static function fromInt($rgba) {
		return $rgba;
	}
	static function fromInts($arr) {
		thx_ArrayInts::resize($arr, 4, null);
		return ($arr->a[0] & 255) << 24 | ($arr->a[1] & 255) << 16 | ($arr->a[2] & 255) << 8 | $arr->a[3] & 255;
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseHex($color);
		if(null === $info) {
			$info = thx_color_parse_ColorParser::parseColor($color);
		}
		if(null === $info) {
			return null;
		}
		try {
			switch($info->name) {
			case "rgb":{
				$tmp = thx_color_parse_ColorParser::getInt8Channels($info->channels, 3);
				$tmp1 = thx_color__Rgb_Rgb_Impl_::fromInts($tmp);
				return thx_color__Rgb_Rgb_Impl_::toRgba($tmp1);
			}break;
			case "rgba":{
				$red = thx_color_parse_ColorParser::getInt8Channel($info->channels[0]);
				$green = thx_color_parse_ColorParser::getInt8Channel($info->channels[1]);
				$blue = thx_color_parse_ColorParser::getInt8Channel($info->channels[2]);
				$alpha = Math::round(thx_color_parse_ColorParser::getFloatChannel($info->channels[3], null) * 255);
				return ($red & 255) << 24 | ($green & 255) << 16 | ($blue & 255) << 8 | $alpha & 255;
			}break;
			default:{
				return null;
			}break;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($rgba) {
		return $rgba;
	}
	static function combineColor($this1, $other) {
		$a = ($this1 & 255) / 255;
		$tmp = Math::round((1 - $a) * thx_color__Rgb_Rgb_Impl_::get_red($other) + $a * ($this1 >> 24 & 255));
		$tmp1 = Math::round((1 - $a) * thx_color__Rgb_Rgb_Impl_::get_green($other) + $a * ($this1 >> 16 & 255));
		$tmp2 = Math::round((1 - $a) * thx_color__Rgb_Rgb_Impl_::get_blue($other) + $a * ($this1 >> 8 & 255));
		return thx_color__Rgb_Rgb_Impl_::fromInts((new _hx_array(array($tmp, $tmp1, $tmp2))));
	}
	static function darker($this1, $t) {
		$tmp = thx_color__Rgba_Rgba_Impl_::toRgbxa($this1);
		$tmp1 = thx_color__Rgbxa_Rgbxa_Impl_::darker($tmp, $t);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp1);
	}
	static function lighter($this1, $t) {
		$tmp = thx_color__Rgba_Rgba_Impl_::toRgbxa($this1);
		$tmp1 = thx_color__Rgbxa_Rgbxa_Impl_::lighter($tmp, $t);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp1);
	}
	static function transparent($this1, $t) {
		$tmp = thx_color__Rgba_Rgba_Impl_::toRgbxa($this1);
		$tmp1 = thx_color__Rgbxa_Rgbxa_Impl_::transparent($tmp, $t);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp1);
	}
	static function opaque($this1, $t) {
		$tmp = thx_color__Rgba_Rgba_Impl_::toRgbxa($this1);
		$tmp1 = thx_color__Rgbxa_Rgbxa_Impl_::opaque($tmp, $t);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp1);
	}
	static function interpolate($this1, $other, $t) {
		$tmp = thx_color__Rgba_Rgba_Impl_::toRgbxa($this1);
		$tmp1 = thx_color__Rgba_Rgba_Impl_::toRgbxa($other);
		$tmp2 = thx_color__Rgbxa_Rgbxa_Impl_::interpolate($tmp, $tmp1, $t);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp2);
	}
	static function withAlpha($this1, $newalpha) {
		return thx_color__Rgba_Rgba_Impl_::fromInts((new _hx_array(array($this1 >> 24 & 255, $this1 >> 16 & 255, $this1 >> 8 & 255, $newalpha))));
	}
	static function withAlphaf($this1, $newalpha) {
		$tmp = $this1 >> 24 & 255;
		$tmp1 = $this1 >> 16 & 255;
		$tmp2 = $this1 >> 8 & 255;
		$tmp3 = Math::round(255 * $newalpha);
		return thx_color__Rgba_Rgba_Impl_::fromInts((new _hx_array(array($tmp, $tmp1, $tmp2, $tmp3))));
	}
	static function withRed($this1, $newred) {
		return thx_color__Rgba_Rgba_Impl_::fromInts((new _hx_array(array($newred, $this1 >> 16 & 255, $this1 >> 8 & 255))));
	}
	static function withGreen($this1, $newgreen) {
		return thx_color__Rgba_Rgba_Impl_::fromInts((new _hx_array(array($this1 >> 24 & 255, $newgreen, $this1 >> 8 & 255))));
	}
	static function withBlue($this1, $newblue) {
		return thx_color__Rgba_Rgba_Impl_::fromInts((new _hx_array(array($this1 >> 24 & 255, $this1 >> 16 & 255, $newblue))));
	}
	static function toHsla($this1) {
		$tmp = thx_color__Rgba_Rgba_Impl_::toRgbxa($this1);
		return thx_color__Rgbxa_Rgbxa_Impl_::toHsla($tmp);
	}
	static function toHsva($this1) {
		$tmp = thx_color__Rgba_Rgba_Impl_::toRgbxa($this1);
		return thx_color__Rgbxa_Rgbxa_Impl_::toHsva($tmp);
	}
	static function toRgb($this1) {
		return ($this1 >> 24 & 255 & 255) << 16 | ($this1 >> 16 & 255 & 255) << 8 | $this1 >> 8 & 255 & 255;
	}
	static function toRgbx($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::fromInts((new _hx_array(array($this1 >> 24 & 255, $this1 >> 16 & 255, $this1 >> 8 & 255))));
	}
	static function toRgbxa($this1) {
		return thx_color__Rgbxa_Rgbxa_Impl_::fromInts((new _hx_array(array($this1 >> 24 & 255, $this1 >> 16 & 255, $this1 >> 8 & 255, $this1 & 255))));
	}
	static function toCss3($this1) {
		return "" . _hx_string_rec($this1, "");
	}
	static function toString($this1) {
		return "rgba(" . _hx_string_rec(($this1 >> 24 & 255), "") . "," . _hx_string_rec(($this1 >> 16 & 255), "") . "," . _hx_string_rec(($this1 >> 8 & 255), "") . "," . _hx_string_rec(($this1 & 255) / 255, "") . ")";
	}
	static function toHex($this1, $prefix = null) {
		if($prefix === null) {
			$prefix = "#";
		}
		$tmp = "" . _hx_string_or_null($prefix);
		$tmp1 = StringTools::hex($this1 & 255, 2);
		$tmp2 = _hx_string_or_null($tmp) . _hx_string_or_null($tmp1);
		$tmp3 = StringTools::hex($this1 >> 24 & 255, 2);
		$tmp4 = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3);
		$tmp5 = StringTools::hex($this1 >> 16 & 255, 2);
		$tmp6 = _hx_string_or_null($tmp4) . _hx_string_or_null($tmp5);
		$tmp7 = StringTools::hex($this1 >> 8 & 255, 2);
		return _hx_string_or_null($tmp6) . _hx_string_or_null($tmp7);
	}
	static function equals($this1, $other) {
		$tmp = null;
		$tmp1 = null;
		if(($this1 >> 24 & 255) === ($other >> 24 & 255)) {
			$tmp1 = ($this1 & 255) === ($other & 255);
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = ($this1 >> 16 & 255) === ($other >> 16 & 255);
		} else {
			$tmp = false;
		}
		if($tmp) {
			return ($this1 >> 8 & 255) === ($other >> 8 & 255);
		} else {
			return false;
		}
	}
	static function get_alpha($this1) {
		return $this1 & 255;
	}
	static function get_red($this1) {
		return $this1 >> 24 & 255;
	}
	static function get_green($this1) {
		return $this1 >> 16 & 255;
	}
	static function get_blue($this1) {
		return $this1 >> 8 & 255;
	}
	static $__properties__ = array("get_alpha" => "get_alpha","get_blue" => "get_blue","get_green" => "get_green","get_red" => "get_red");
	function __toString() { return 'thx.color._Rgba.Rgba_Impl_'; }
}
function thx_color__Rgba_Rgba_Impl__0($_) {
	{
		return Math::round($_ * 255);
	}
}
