<?php

// Generated by Haxe 3.3.0
class thx_color_TestRgb {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testBasics() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$red = 16711680;
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_red($red), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 15, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_green($red), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 16, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_blue($red), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 17, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			$green = 65280;
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_red($green), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 20, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_green($green), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 21, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_blue($green), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 22, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			$blue = 255;
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_red($blue), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 25, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_green($blue), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 26, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_blue($blue), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 27, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			$cyan = 65535;
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_red($cyan), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 30, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_green($cyan), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 31, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_blue($cyan), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 32, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			$yellow = 16776960;
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_red($yellow), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 35, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_green($yellow), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 36, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_blue($yellow), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 37, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			$magenta = 16711935;
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_red($magenta), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 40, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_green($magenta), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 41, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_blue($magenta), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 42, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			$white = 16777215;
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_red($white), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 45, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_green($white), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 46, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(255, thx_color__Rgb_Rgb_Impl_::get_blue($white), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 47, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			$black = 0;
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_red($black), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 50, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_green($black), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 51, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			utest_Assert::equals(0, thx_color__Rgb_Rgb_Impl_::get_blue($black), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 52, "className" => "thx.color.TestRgb", "methodName" => "testBasics")));
			unset($yellow,$white,$red,$magenta,$green,$cyan,$blue,$black);
		}
	}
	public function testStrings() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$color = 43775;
			$tmp = thx_color__Rgb_Rgb_Impl_::toHex($color, null);
			utest_Assert::equals("#00AAFF", $tmp, null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 58, "className" => "thx.color.TestRgb", "methodName" => "testStrings")));
			$tmp1 = thx_color__Rgb_Rgb_Impl_::toString($color);
			utest_Assert::equals("#00AAFF", $tmp1, null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 59, "className" => "thx.color.TestRgb", "methodName" => "testStrings")));
			utest_Assert::equals("rgb(0,170,255)", thx_color__Rgb_Rgb_Impl_::toCss3($color), null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 60, "className" => "thx.color.TestRgb", "methodName" => "testStrings")));
			unset($tmp1,$tmp,$color);
		}
	}
	public function testFromString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color__Rgb_Rgb_Impl_::equals(16711680, thx_color__Rgb_Rgb_Impl_::fromString("#ff0000"));
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 65, "className" => "thx.color.TestRgb", "methodName" => "testFromString")));
			$tmp1 = thx_color__Rgb_Rgb_Impl_::equals(16711680, thx_color__Rgb_Rgb_Impl_::fromString("#f00"));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 66, "className" => "thx.color.TestRgb", "methodName" => "testFromString")));
			$tmp2 = thx_color__Rgb_Rgb_Impl_::equals(16711680, thx_color__Rgb_Rgb_Impl_::fromString("rgb(255,0,0)"));
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 67, "className" => "thx.color.TestRgb", "methodName" => "testFromString")));
			$tmp3 = thx_color__Rgb_Rgb_Impl_::equals(16711680, thx_color__Rgb_Rgb_Impl_::fromString("rgb(100%,0,0)"));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 68, "className" => "thx.color.TestRgb", "methodName" => "testFromString")));
			$tmp4 = thx_color__Rgba_Rgba_Impl_::equals(16711935, thx_color__Rgba_Rgba_Impl_::fromString("#ff00ff00"));
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 70, "className" => "thx.color.TestRgb", "methodName" => "testFromString")));
			$tmp5 = thx_color__Rgba_Rgba_Impl_::equals(16711935, thx_color__Rgba_Rgba_Impl_::fromString("#f0f0"));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 71, "className" => "thx.color.TestRgb", "methodName" => "testFromString")));
			$tmp6 = thx_color__Rgba_Rgba_Impl_::equals(16711935, thx_color__Rgba_Rgba_Impl_::fromString("rgba(0,255,0,1)"));
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 72, "className" => "thx.color.TestRgb", "methodName" => "testFromString")));
			$tmp7 = thx_color__Rgba_Rgba_Impl_::equals(16711935, thx_color__Rgba_Rgba_Impl_::fromString("rgba(0,100%,0,1)"));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 73, "className" => "thx.color.TestRgb", "methodName" => "testFromString")));
			unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function testCombineColor() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color__Rgb_Rgb_Impl_::fromInts((new _hx_array(array(255, 0, 0))));
			$rgba = thx_color__Rgb_Rgb_Impl_::withAlphaf($tmp, .42);
			$bg = thx_color__Rgb_Rgb_Impl_::fromInts((new _hx_array(array(153, 200, 224))));
			$combined = thx_color__Rgba_Rgba_Impl_::combineColor($rgba, $bg);
			$result = thx_color__Rgb_Rgb_Impl_::fromInts((new _hx_array(array(196, 116, 130))));
			$tmp1 = thx_color__Rgb_Rgb_Impl_::equals($result, $combined);
			$tmp2 = thx_color__Rgb_Rgb_Impl_::toString($result);
			$tmp3 = "expected " . _hx_string_or_null($tmp2) . " but it is ";
			$tmp4 = thx_color__Rgb_Rgb_Impl_::toString($combined);
			utest_Assert::isTrue($tmp1, _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4), _hx_anonymous(array("fileName" => "TestRgb.hx", "lineNumber" => 83, "className" => "thx.color.TestRgb", "methodName" => "testCombineColor")));
			unset($tmp4,$tmp3,$tmp2,$tmp1,$tmp,$rgba,$result,$combined,$bg);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.color.TestRgb'; }
}
