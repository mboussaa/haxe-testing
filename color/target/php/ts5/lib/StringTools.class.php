<?php

// Generated by Haxe 3.3.0
class StringTools {
	public function __construct(){}
	static function startsWith($s, $start) {
		$tmp = strlen($s) >= strlen($start);
		if($tmp) {
			$tmp1 = _hx_substr($s, 0, strlen($start));
			return $tmp1 === $start;
		} else {
			return false;
		}
	}
	static function endsWith($s, $end) {
		$elen = strlen($end);
		$slen = strlen($s);
		if($slen >= $elen) {
			$tmp = _hx_substr($s, $slen - $elen, $elen);
			return $tmp === $end;
		} else {
			return false;
		}
	}
	static function isSpace($s, $pos) {
		$c = _hx_char_code_at($s, $pos);
		$tmp = null;
		if($c >= 9) {
			$tmp = $c <= 13;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			return $c === 32;
		} else {
			return true;
		}
	}
	static function hex($n, $digits = null) {
		$s = dechex($n);
		$len = 8;
		$tmp = strlen($s);
		$tmp1 = null;
		if(null === $digits) {
			$tmp1 = $len;
		} else {
			$tmp2 = $digits > $len;
			if($tmp2) {
				$len = $digits;
			} else {
				$len = $len;
			}
			$tmp1 = $len;
		}
		if($tmp > $tmp1) {
			$s = _hx_substr($s, -$len, null);
		} else {
			if($digits !== null) {
				$tmp3 = null;
				if(strlen("0") !== 0) {
					$tmp3 = strlen($s) >= $digits;
				} else {
					$tmp3 = true;
				}
				if($tmp3) {
					$s = $s;
				} else {
					$s = str_pad($s, Math::ceil(($digits - strlen($s)) / strlen("0")) * strlen("0") + strlen($s), "0", STR_PAD_LEFT);
				}
			}
		}
		return strtoupper($s);
	}
	function __toString() { return 'StringTools'; }
}
