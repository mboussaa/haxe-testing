<?php

// Generated by Haxe 3.3.0
class thx_color__CubeHelix_CubeHelix_Impl_ {
	public function __construct(){}
	static $A = -0.14861;
	static $B = 1.78277;
	static $C = -0.29227;
	static $D = -0.90649;
	static $E = 1.97294;
	static $ED = -1.7884503806;
	static $EB = 3.5172982438;
	static $BC_DA = -0.655763666799999867;
	static function create($hue, $saturation, $lightness, $gamma = null) {
		$this1 = null;
		$tmp = null;
		if(null === $gamma) {
			$tmp = 1.0;
		} else {
			$tmp = $gamma;
		}
		$this1 = (new _hx_array(array($hue, $saturation, $lightness, $tmp)));
		return $this1;
	}
	static function fromFloats($arr) {
		$tmp = $arr->length < 4;
		if($tmp) {
			thx_ArrayFloats::resize($arr, 3, null);
			$arr->push(1);
		}
		$gamma = $arr[3];
		$this1 = null;
		$tmp1 = $arr[0];
		$tmp2 = $arr[1];
		$tmp3 = $arr[2];
		$tmp4 = null;
		if(null === $gamma) {
			$tmp4 = 1.0;
		} else {
			$tmp4 = $gamma;
		}
		$this1 = (new _hx_array(array($tmp1, $tmp2, $tmp3, $tmp4)));
		return $this1;
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseColor($color);
		if(null === $info) {
			return null;
		}
		try {
			if($info->name === "cubehelix") {
				$tmp = $info->channels->length >= 4;
				if($tmp) {
					$channels = thx_color_parse_ColorParser::getFloatChannels($info->channels, 4, false);
					return $channels;
				} else {
					$channels1 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false)->concat((new _hx_array(array(1.0))));
					return $channels1;
				}
			} else {
				return null;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($channels) {
		return $channels;
	}
	static function analogous($this1, $spread = null) {
		if($spread === null) {
			$spread = 30.0;
		}
		return _hx_anonymous(array("_0" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, -$spread), "_1" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, $spread)));
	}
	static function complement($this1) {
		return thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, 180);
	}
	static function darker($this1, $t) {
		return (new _hx_array(array($this1[0], $this1[1], thx_Floats::interpolate($t, $this1[2], 0), $this1[3])));
	}
	static function lighter($this1, $t) {
		return (new _hx_array(array($this1[0], $this1[1], thx_Floats::interpolate($t, $this1[2], 1), $this1[3])));
	}
	static function interpolate($this1, $other, $t) {
		return (new _hx_array(array(thx_Floats::interpolateAngle($t, $this1[0], $other[0], 360), thx_Floats::interpolate($t, $this1[1], $other[1]), thx_Floats::interpolate($t, $this1[2], $other[2]), thx_Floats::interpolate($t, $this1[3], $other[3]))));
	}
	static function interpolateWidest($this1, $other, $t) {
		return (new _hx_array(array(thx_Floats::interpolateAngleWidest($t, $this1[0], $other[0], 360), thx_Floats::interpolate($t, $this1[1], $other[1]), thx_Floats::interpolate($t, $this1[2], $other[2]), thx_Floats::interpolate($t, $this1[3], $other[3]))));
	}
	static function min($this1, $other) {
		$hue = Math::min($this1[0], $other[0]);
		$saturation = Math::min($this1[1], $other[1]);
		$lightness = Math::min($this1[2], $other[2]);
		$gamma = Math::min($this1[3], $other[3]);
		$this2 = null;
		$tmp = null;
		if(null === $gamma) {
			$tmp = 1.0;
		} else {
			$tmp = $gamma;
		}
		$this2 = (new _hx_array(array($hue, $saturation, $lightness, $tmp)));
		return $this2;
	}
	static function max($this1, $other) {
		$hue = Math::max($this1[0], $other[0]);
		$saturation = Math::max($this1[1], $other[1]);
		$lightness = Math::max($this1[2], $other[2]);
		$gamma = Math::max($this1[3], $other[3]);
		$this2 = null;
		$tmp = null;
		if(null === $gamma) {
			$tmp = 1.0;
		} else {
			$tmp = $gamma;
		}
		$this2 = (new _hx_array(array($hue, $saturation, $lightness, $tmp)));
		return $this2;
	}
	static function normalize($this1) {
		$hue = thx_Floats::wrapCircular($this1[0], 360);
		$v = $this1[3];
		$gamma = null;
		if($v < 0) {
			$gamma = 0;
		} else {
			if($v > 1) {
				$gamma = 1;
			} else {
				$gamma = $v;
			}
		}
		$this2 = null;
		$v1 = $this1[1];
		$tmp = null;
		if($v1 < 0) {
			$tmp = 0;
		} else {
			if($v1 > 1) {
				$tmp = 1;
			} else {
				$tmp = $v1;
			}
		}
		$v2 = $this1[2];
		$tmp1 = null;
		if($v2 < 0) {
			$tmp1 = 0;
		} else {
			if($v2 > 1) {
				$tmp1 = 1;
			} else {
				$tmp1 = $v2;
			}
		}
		$tmp2 = null;
		if(null === $gamma) {
			$tmp2 = 1.0;
		} else {
			$tmp2 = $gamma;
		}
		$this2 = (new _hx_array(array($hue, $tmp, $tmp1, $tmp2)));
		return $this2;
	}
	static function rotate($this1, $angle) {
		return thx_color__CubeHelix_CubeHelix_Impl_::withHue($this1, $this1->a[0] + $angle);
	}
	static function roundTo($this1, $decimals) {
		$hue = thx_Floats::roundTo($this1[0], $decimals);
		$saturation = thx_Floats::roundTo($this1[1], $decimals);
		$lightness = thx_Floats::roundTo($this1[2], $decimals);
		$gamma = thx_Floats::roundTo($this1[3], $decimals);
		$this2 = null;
		$tmp = null;
		if(null === $gamma) {
			$tmp = 1.0;
		} else {
			$tmp = $gamma;
		}
		$this2 = (new _hx_array(array($hue, $saturation, $lightness, $tmp)));
		return $this2;
	}
	static function split($this1, $spread = null) {
		if($spread === null) {
			$spread = 144.0;
		}
		return _hx_anonymous(array("_0" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, -$spread), "_1" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, $spread)));
	}
	static function square($this1) {
		return thx_color__CubeHelix_CubeHelix_Impl_::tetrad($this1, 90);
	}
	static function tetrad($this1, $angle) {
		return _hx_anonymous(array("_0" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, 0), "_1" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, $angle), "_2" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, 180), "_3" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, 180 + $angle)));
	}
	static function triad($this1) {
		return _hx_anonymous(array("_0" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, -120), "_1" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, 0), "_2" => thx_color__CubeHelix_CubeHelix_Impl_::rotate($this1, 120)));
	}
	static function withGamma($this1, $newgamma) {
		return (new _hx_array(array($this1[0], $this1[1], $this1[2], $newgamma)));
	}
	static function withHue($this1, $newhue) {
		return (new _hx_array(array($newhue, $this1[1], $this1[2], $this1[3])));
	}
	static function withLightness($this1, $newlightness) {
		return (new _hx_array(array($this1[0], $this1[1], $newlightness, $this1[3])));
	}
	static function withSaturation($this1, $newsaturation) {
		return (new _hx_array(array($this1[0], $newsaturation, $this1[2], $this1[3])));
	}
	static function toCss3($this1) {
		return thx_color__CubeHelix_CubeHelix_Impl_::toString($this1);
	}
	static function toString($this1) {
		if(!_hx_equal($this1[3], 1)) {
			return "cubehelix(" . _hx_string_rec($this1[0], "") . "," . _hx_string_rec($this1[1], "") . "," . _hx_string_rec($this1[2], "") . ", " . _hx_string_rec($this1[3], "") . ")";
		} else {
			return "cubehelix(" . _hx_string_rec($this1[0], "") . "," . _hx_string_rec($this1[1], "") . "," . _hx_string_rec($this1[2], "") . ")";
		}
	}
	static function equals($this1, $other) {
		return thx_color__CubeHelix_CubeHelix_Impl_::nearEquals($this1, $other, null);
	}
	static function nearEquals($this1, $other, $tolerance = null) {
		if($tolerance === null) {
			$tolerance = 1e-9;
		}
		$tmp = null;
		$tmp1 = null;
		$tmp2 = Math::abs(thx_Floats::angleDifference($this1[0], $other[0], 360.0));
		if($tmp2 <= $tolerance) {
			$tmp1 = thx_Floats::nearEquals($this1[1], $other[1], $tolerance);
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = thx_Floats::nearEquals($this1[2], $other[2], $tolerance);
		} else {
			$tmp = false;
		}
		if($tmp) {
			return thx_Floats::nearEquals($this1[3], $other[3], $tolerance);
		} else {
			return false;
		}
	}
	static function toLab($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toLab($tmp);
	}
	static function toLCh($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toLab($this1);
		return thx_color__Lab_Lab_Impl_::toLCh($tmp);
	}
	static function toLuv($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toLuv($tmp);
	}
	static function toCmy($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCmy($tmp);
	}
	static function toCmyk($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCmyk($tmp);
	}
	static function toGrey($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toGrey($tmp);
	}
	static function toHsl($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toHsl($tmp);
	}
	static function toHsv($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toHsv($tmp);
	}
	static function toHunterLab($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toHunterLab($tmp);
	}
	static function toRgb($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toRgb($tmp);
	}
	static function toRgba($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbxa($this1);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp);
	}
	static function toRgbx($this1) {
		$h = null;
		$tmp = Math::isNaN($this1[0]);
		if($tmp) {
			$h = 0;
		} else {
			$h = ($this1->a[0] + 120) / 180 * Math::$PI;
		}
		$l = Math::pow($this1[2], $this1[3]);
		$a = null;
		$tmp1 = Math::isNaN($this1[1]);
		if($tmp1) {
			$a = 0;
		} else {
			$a = $this1->a[1] * $l * (1 - $l);
		}
		$cosh = Math::cos($h);
		$sinh = Math::sin($h);
		return (new _hx_array(array($l + $a * (-0.14861 * $cosh + 1.78277 * $sinh), $l + $a * (-0.29227 * $cosh + -0.90649 * $sinh), $l + $a * (1.97294 * $cosh))));
	}
	static function toRgbxa($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toRgbxa($tmp);
	}
	static function toTemperature($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toTemperature($tmp);
	}
	static function toXyz($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toXyz($tmp);
	}
	static function toYuv($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toYuv($tmp);
	}
	static function toYxy($this1) {
		$tmp = thx_color__CubeHelix_CubeHelix_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toYxy($tmp);
	}
	static function get_hue($this1) {
		return $this1[0];
	}
	static function get_saturation($this1) {
		return $this1[1];
	}
	static function get_lightness($this1) {
		return $this1[2];
	}
	static function get_gamma($this1) {
		return $this1[3];
	}
	static $__properties__ = array("get_gamma" => "get_gamma","get_lightness" => "get_lightness","get_saturation" => "get_saturation","get_hue" => "get_hue");
	function __toString() { return 'thx.color._CubeHelix.CubeHelix_Impl_'; }
}
