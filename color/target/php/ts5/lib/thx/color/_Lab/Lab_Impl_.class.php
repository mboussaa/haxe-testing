<?php

// Generated by Haxe 3.3.0
class thx_color__Lab_Lab_Impl_ {
	public function __construct(){}
	static function create($l, $a, $b) {
		return (new _hx_array(array($l, $a, $b)));
	}
	static function fromFloats($arr) {
		thx_ArrayFloats::resize($arr, 3, null);
		return (new _hx_array(array($arr[0], $arr[1], $arr[2])));
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseColor($color);
		if(null === $info) {
			return null;
		}
		try {
			switch($info->name) {
			case "cielab":case "l*a*b*":case "lab":{
				$tmp = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				return thx_color__Lab_Lab_Impl_::fromFloats($tmp);
			}break;
			default:{
				return null;
			}break;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($channels) {
		return $channels;
	}
	static function distance($this1, $other) {
		return ($this1->a[0] - $other[0]) * ($this1->a[0] - $other[0]) + ($this1->a[1] - $other[1]) * ($this1->a[1] - $other[1]) + ($this1->a[2] - $other[2]) * ($this1->a[2] - $other[2]);
	}
	static function interpolate($this1, $other, $t) {
		return (new _hx_array(array(thx_Floats::interpolate($t, $this1[0], $other[0]), thx_Floats::interpolate($t, $this1[1], $other[1]), thx_Floats::interpolate($t, $this1[2], $other[2]))));
	}
	static function match($this1, $palette) {
		if(null === $palette) {
			throw new HException(new thx_error_NullArgument("Iterable argument \"this\" cannot be null", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 73, "className" => "thx.color._Lab.Lab_Impl_", "methodName" => "match"))));
		} else {
			$tmp = !$palette->iterator()->hasNext();
			if($tmp) {
				throw new HException(new thx_error_NullArgument("Iterable argument \"this\" cannot be empty", _hx_anonymous(array("fileName" => "NullArgument.hx", "lineNumber" => 75, "className" => "thx.color._Lab.Lab_Impl_", "methodName" => "match"))));
			}
		}
		$dist = Math::$POSITIVE_INFINITY;
		$closest = null;
		{
			$tmp1 = $palette->iterator();
			while(true) {
				$tmp2 = !$tmp1->hasNext();
				if($tmp2) {
					break;
				}
				$color = $tmp1->next();
				$ndist = thx_color__Lab_Lab_Impl_::distance($this1, $color);
				$tmp3 = $ndist < $dist;
				if($tmp3) {
					$dist = $ndist;
					$closest = $color;
				}
				unset($tmp3,$tmp2,$ndist,$color);
			}
		}
		return $closest;
	}
	static function min($this1, $other) {
		$l = Math::min($this1[0], $other[0]);
		$a = Math::min($this1[1], $other[1]);
		$b = Math::min($this1[2], $other[2]);
		return (new _hx_array(array($l, $a, $b)));
	}
	static function max($this1, $other) {
		$l = Math::max($this1[0], $other[0]);
		$a = Math::max($this1[1], $other[1]);
		$b = Math::max($this1[2], $other[2]);
		return (new _hx_array(array($l, $a, $b)));
	}
	static function roundTo($this1, $decimals) {
		$l = thx_Floats::roundTo($this1[0], $decimals);
		$a = thx_Floats::roundTo($this1[1], $decimals);
		$b = thx_Floats::roundTo($this1[2], $decimals);
		return (new _hx_array(array($l, $a, $b)));
	}
	static function equals($this1, $other) {
		return thx_color__Lab_Lab_Impl_::nearEquals($this1, $other, null);
	}
	static function nearEquals($this1, $other, $tolerance = null) {
		if($tolerance === null) {
			$tolerance = 1e-9;
		}
		$tmp = null;
		$tmp1 = thx_Floats::nearEquals($this1[0], $other[0], $tolerance);
		if($tmp1) {
			$tmp = thx_Floats::nearEquals($this1[1], $other[1], $tolerance);
		} else {
			$tmp = false;
		}
		if($tmp) {
			return thx_Floats::nearEquals($this1[2], $other[2], $tolerance);
		} else {
			return false;
		}
	}
	static function withL($this1, $newl) {
		return (new _hx_array(array($newl, $this1[1], $this1[2])));
	}
	static function withA($this1, $newa) {
		return (new _hx_array(array($this1[0], $newa, $this1[2])));
	}
	static function withB($this1, $newb) {
		return (new _hx_array(array($this1[0], $this1[1], $newb)));
	}
	static function toString($this1) {
		return "lab(" . _hx_string_rec($this1[0], "") . "," . _hx_string_rec($this1[1], "") . "," . _hx_string_rec($this1[2], "") . ")";
	}
	static function toLCh($this1) {
		$tmp = Math::atan2($this1[2], $this1[1]);
		$h = $tmp * 180 / Math::$PI;
		$c = Math::sqrt($this1->a[1] * $this1[1] + $this1->a[2] * $this1[2]);
		return (new _hx_array(array($this1[0], $c, $h)));
	}
	static function toLuv($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toLuv($tmp);
	}
	static function toCmy($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCmy($tmp);
	}
	static function toCmyk($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCmyk($tmp);
	}
	static function toCubeHelix($this1) {
		$this2 = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCubeHelixWithGamma($this2, 1);
	}
	static function toGrey($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toGrey($tmp);
	}
	static function toHsl($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toHsl($tmp);
	}
	static function toHsv($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toHsv($tmp);
	}
	static function toHunterLab($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toHunterLab($tmp);
	}
	static function toRgb($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toRgb($tmp);
	}
	static function toRgba($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbxa($this1);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp);
	}
	static function toRgbx($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toRgbx($tmp);
	}
	static function toRgbxa($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toRgbxa($tmp);
	}
	static function toTemperature($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toTemperature($tmp);
	}
	static function toXyz($this1) {
		$f = array(new _hx_lambda(array(), "thx_color__Lab_Lab_Impl__0"), 'execute');
		$tmp = thx_color__Xyz_Xyz_Impl_::$whiteReference[0];
		$tmp1 = call_user_func_array($f, array(0.00862068965517241367 * ($this1->a[0] + 16) + 0.002 * $this1[1]));
		$x = $tmp * $tmp1;
		$tmp2 = thx_color__Xyz_Xyz_Impl_::$whiteReference[1];
		$tmp3 = call_user_func_array($f, array(0.00862068965517241367 * ($this1->a[0] + 16)));
		$y = $tmp2 * $tmp3;
		$tmp4 = thx_color__Xyz_Xyz_Impl_::$whiteReference[2];
		$tmp5 = call_user_func_array($f, array(0.00862068965517241367 * ($this1->a[0] + 16) - 0.005 * $this1[2]));
		return (new _hx_array(array($x, $y, $tmp4 * $tmp5)));
	}
	static function toYuv($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toYuv($tmp);
	}
	static function toYxy($this1) {
		$tmp = thx_color__Lab_Lab_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toYxy($tmp);
	}
	static function get_l($this1) {
		return $this1[0];
	}
	static function get_a($this1) {
		return $this1[1];
	}
	static function get_b($this1) {
		return $this1[2];
	}
	static $__properties__ = array("get_b" => "get_b","get_a" => "get_a","get_l" => "get_l");
	function __toString() { return 'thx.color._Lab.Lab_Impl_'; }
}
function thx_color__Lab_Lab_Impl__0($t) {
	{
		if($t > 0.206896551724137928) {
			return Math::pow($t, 3);
		} else {
			return 0.128418549346016653 * ($t - 0.137931034482758619);
		}
	}
}
