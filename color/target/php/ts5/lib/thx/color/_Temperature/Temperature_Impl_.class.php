<?php

// Generated by Haxe 3.3.0
class thx_color__Temperature_Temperature_Impl_ {
	public function __construct(){}
	static function temperatureToRgbx($kelvin) {
		$t = $kelvin / 100.0;
		$r = null;
		$g = null;
		$b = null;
		if($t < 66.0) {
			$r = 1;
		} else {
			$r = $t - 55.0;
			$tmp = 351.97690566805693 + 0.114206453784165 * $r;
			$tmp1 = Math::log($r);
			$r = ($tmp - 40.25366309332127 * $tmp1) / 255;
			$tmp2 = $r < 0;
			if($tmp2) {
				$r = 0;
			}
			$tmp3 = $r > 1;
			if($tmp3) {
				$r = 1;
			}
		}
		if($t < 66.0) {
			$g = $t - 2;
			$tmp4 = -155.254855627091786 - 0.44596950469579133 * $g;
			$tmp5 = Math::log($g);
			$g = ($tmp4 + 104.49216199393888 * $tmp5) / 255;
			$tmp6 = $g < 0;
			if($tmp6) {
				$g = 0;
			}
			$tmp7 = $g > 1;
			if($tmp7) {
				$g = 1;
			}
		} else {
			$g = $t - 50;
			$tmp8 = 325.4494125711974 + 0.07943456536662342 * $g;
			$tmp9 = Math::log($g);
			$g = ($tmp8 - 28.0852963507957 * $tmp9) / 255;
			$tmp10 = $g < 0;
			if($tmp10) {
				$g = 0;
			}
			$tmp11 = $g > 1;
			if($tmp11) {
				$g = 1;
			}
		}
		if($t >= 66.0) {
			$b = 1;
		} else {
			if($t <= 20.0) {
				$b = 0;
			} else {
				$b = $t - 10;
				$tmp12 = -254.769351841209016 + 0.8274096064007395 * $b;
				$tmp13 = Math::log($b);
				$b = ($tmp12 + 115.67994401066147 * $tmp13) / 255;
				$tmp14 = $b < 0;
				if($tmp14) {
					$b = 0;
				}
				$tmp15 = $b > 1;
				if($tmp15) {
					$b = 1;
				}
			}
		}
		return (new _hx_array(array($r, $g, $b)));
	}
	static function create($v) {
		return $v;
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseColor($color);
		if(null === $info) {
			return null;
		}
		try {
			if($info->name === "temperature") {
				$tmp = thx_color_parse_ColorParser::getFloatChannels($info->channels, 1, false);
				return $tmp[0];
			} else {
				return null;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($kelvin) {
		return $kelvin;
	}
	static function interpolate($this1, $other, $t) {
		return thx_Floats::interpolate($t, $this1, $other);
	}
	static function min($this1, $other) {
		$v = Math::min($this1, $other);
		return $v;
	}
	static function max($this1, $other) {
		$v = Math::max($this1, $other);
		return $v;
	}
	static function roundTo($this1, $decimals) {
		$v = thx_Floats::roundTo($this1, $decimals);
		return $v;
	}
	static function toString($this1) {
		return "temperature(" . _hx_string_rec($this1, "") . ")";
	}
	static function equals($this1, $other) {
		return thx_Floats::nearEquals($this1, $other, null);
	}
	static function nearEquals($this1, $other, $tolerance = null) {
		if($tolerance === null) {
			$tolerance = 1e-9;
		}
		return thx_Floats::nearEquals($this1, $other, $tolerance);
	}
	static function get_kelvin($this1) {
		return $this1;
	}
	static function toLab($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toLab($tmp);
	}
	static function toLCh($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toLab($this1);
		return thx_color__Lab_Lab_Impl_::toLCh($tmp);
	}
	static function toLuv($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toLuv($tmp);
	}
	static function toCmy($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCmy($tmp);
	}
	static function toCmyk($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCmyk($tmp);
	}
	static function toCubeHelix($this1) {
		$this2 = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toCubeHelixWithGamma($this2, 1);
	}
	static function toHsl($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toHsl($tmp);
	}
	static function toHsv($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toHsv($tmp);
	}
	static function toHunterLab($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toHunterLab($tmp);
	}
	static function toRgb($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toRgb($tmp);
	}
	static function toRgba($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbxa($this1);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp);
	}
	static function toRgbxTannerHelland($this1) {
		$t = $this1 / 100;
		$r = null;
		$g = null;
		$b = null;
		if($t <= 66) {
			$r = 1;
		} else {
			$r = $t - 60;
			$tmp = Math::pow($r, -0.1332047592);
			$r = 329.698727446 * $tmp / 1;
			$tmp1 = $r < 0;
			if($tmp1) {
				$r = 0;
			}
			$tmp2 = $r > 1;
			if($tmp2) {
				$r = 1;
			}
		}
		if($t <= 66.0) {
			$g = $t;
			$tmp3 = Math::log($t);
			$g = (99.4708025861 * $tmp3 - 161.1195681661) / 1;
			$tmp4 = $g < 0;
			if($tmp4) {
				$g = 0;
			}
			$tmp5 = $g > 1;
			if($tmp5) {
				$g = 1;
			}
		} else {
			$g = $t - 60.0;
			$tmp6 = Math::pow($g, -0.0755148492);
			$g = 288.1221695283 * $tmp6 / 1;
			$tmp7 = $g < 0;
			if($tmp7) {
				$g = 0;
			}
			$tmp8 = $g > 1;
			if($tmp8) {
				$g = 1;
			}
		}
		if($t >= 66.0) {
			$b = 1;
		} else {
			if($t <= 19.0) {
				$b = 0;
			} else {
				$b = $t - 10;
				$tmp9 = Math::log($b);
				$b = (138.5177312231 * $tmp9 - 305.0447927307) / 1;
				$tmp10 = $b < 0;
				if($tmp10) {
					$b = 0;
				}
				$tmp11 = $b > 1;
				if($tmp11) {
					$b = 1;
				}
			}
		}
		return (new _hx_array(array($r, $g, $b)));
	}
	static function toRgbx($this1) {
		return thx_color__Temperature_Temperature_Impl_::temperatureToRgbx($this1);
	}
	static function toRgbxa($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toRgbxa($tmp);
	}
	static function toYuv($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toYuv($tmp);
	}
	static function toXyz($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toXyz($tmp);
	}
	static function toYxy($this1) {
		$tmp = thx_color__Temperature_Temperature_Impl_::toRgbx($this1);
		return thx_color__Rgbx_Rgbx_Impl_::toYxy($tmp);
	}
	static $__properties__ = array("get_kelvin" => "get_kelvin");
	function __toString() { return 'thx.color._Temperature.Temperature_Impl_'; }
}
