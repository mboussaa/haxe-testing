<?php

// Generated by Haxe 3.3.0
class thx_color__Rgbx_Rgbx_Impl_ {
	public function __construct(){}
	static function create($red, $green, $blue) {
		return (new _hx_array(array($red, $green, $blue)));
	}
	static function fromFloats($arr) {
		thx_ArrayFloats::resize($arr, 3, null);
		return (new _hx_array(array($arr[0], $arr[1], $arr[2])));
	}
	static function fromInts($arr) {
		thx_ArrayInts::resize($arr, 3, null);
		return (new _hx_array(array($arr->a[0] / 255.0, $arr->a[1] / 255.0, $arr->a[2] / 255.0)));
	}
	static function fromInt($value) {
		$rgb = $value;
		return (new _hx_array(array(thx_color__Rgb_Rgb_Impl_::get_red($rgb) / 255, thx_color__Rgb_Rgb_Impl_::get_green($rgb) / 255, thx_color__Rgb_Rgb_Impl_::get_blue($rgb) / 255)));
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseHex($color);
		if(null === $info) {
			$info = thx_color_parse_ColorParser::parseColor($color);
		}
		if(null === $info) {
			return null;
		}
		try {
			if($info->name === "rgb") {
				$tmp = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, true);
				return thx_color__Rgbx_Rgbx_Impl_::fromFloats($tmp);
			} else {
				return null;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($channels) {
		return $channels;
	}
	static function darker($this1, $t) {
		return (new _hx_array(array(thx_Floats::interpolate($t, $this1[0], 0), thx_Floats::interpolate($t, $this1[1], 0), thx_Floats::interpolate($t, $this1[2], 0))));
	}
	static function lighter($this1, $t) {
		return (new _hx_array(array(thx_Floats::interpolate($t, $this1[0], 1), thx_Floats::interpolate($t, $this1[1], 1), thx_Floats::interpolate($t, $this1[2], 1))));
	}
	static function interpolate($this1, $other, $t) {
		return (new _hx_array(array(thx_Floats::interpolate($t, $this1[0], $other[0]), thx_Floats::interpolate($t, $this1[1], $other[1]), thx_Floats::interpolate($t, $this1[2], $other[2]))));
	}
	static function min($this1, $other) {
		$red = Math::min($this1[0], $other[0]);
		$green = Math::min($this1[1], $other[1]);
		$blue = Math::min($this1[2], $other[2]);
		return (new _hx_array(array($red, $green, $blue)));
	}
	static function max($this1, $other) {
		$red = Math::max($this1[0], $other[0]);
		$green = Math::max($this1[1], $other[1]);
		$blue = Math::max($this1[2], $other[2]);
		return (new _hx_array(array($red, $green, $blue)));
	}
	static function normalize($this1) {
		$this2 = null;
		$v = $this1[0];
		$tmp = null;
		if($v < 0) {
			$tmp = 0;
		} else {
			if($v > 1) {
				$tmp = 1;
			} else {
				$tmp = $v;
			}
		}
		$v1 = $this1[1];
		$tmp1 = null;
		if($v1 < 0) {
			$tmp1 = 0;
		} else {
			if($v1 > 1) {
				$tmp1 = 1;
			} else {
				$tmp1 = $v1;
			}
		}
		$v2 = $this1[2];
		$tmp2 = null;
		if($v2 < 0) {
			$tmp2 = 0;
		} else {
			if($v2 > 1) {
				$tmp2 = 1;
			} else {
				$tmp2 = $v2;
			}
		}
		$this2 = (new _hx_array(array($tmp, $tmp1, $tmp2)));
		return $this2;
	}
	static function roundTo($this1, $decimals) {
		$red = thx_Floats::roundTo($this1[0], $decimals);
		$green = thx_Floats::roundTo($this1[1], $decimals);
		$blue = thx_Floats::roundTo($this1[2], $decimals);
		return (new _hx_array(array($red, $green, $blue)));
	}
	static function toCss3($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toString($this1);
	}
	static function toString($this1) {
		return "rgb(" . _hx_string_rec($this1->a[0] * 100, "") . "%," . _hx_string_rec($this1->a[1] * 100, "") . "%," . _hx_string_rec($this1->a[2] * 100, "") . "%)";
	}
	static function toHex($this1, $prefix = null) {
		if($prefix === null) {
			$prefix = "#";
		}
		$tmp = "" . _hx_string_or_null($prefix);
		$tmp1 = thx_color__Rgbx_Rgbx_Impl_::get_red($this1);
		$tmp2 = StringTools::hex($tmp1, 2);
		$tmp3 = _hx_string_or_null($tmp) . _hx_string_or_null($tmp2);
		$tmp4 = thx_color__Rgbx_Rgbx_Impl_::get_green($this1);
		$tmp5 = StringTools::hex($tmp4, 2);
		$tmp6 = _hx_string_or_null($tmp3) . _hx_string_or_null($tmp5);
		$tmp7 = thx_color__Rgbx_Rgbx_Impl_::get_blue($this1);
		$tmp8 = StringTools::hex($tmp7, 2);
		return _hx_string_or_null($tmp6) . _hx_string_or_null($tmp8);
	}
	static function equals($this1, $other) {
		return thx_color__Rgbx_Rgbx_Impl_::nearEquals($this1, $other, null);
	}
	static function nearEquals($this1, $other, $tolerance = null) {
		if($tolerance === null) {
			$tolerance = 1e-9;
		}
		$tmp = null;
		$tmp1 = thx_Floats::nearEquals($this1[0], $other[0], $tolerance);
		if($tmp1) {
			$tmp = thx_Floats::nearEquals($this1[1], $other[1], $tolerance);
		} else {
			$tmp = false;
		}
		if($tmp) {
			return thx_Floats::nearEquals($this1[2], $other[2], $tolerance);
		} else {
			return false;
		}
	}
	static function withAlpha($this1, $alpha) {
		$channels = $this1->concat((new _hx_array(array($alpha))));
		return $channels;
	}
	static function withRed($this1, $newred) {
		$tmp = thx_color__Rgbx_Rgbx_Impl_::get_green($this1);
		$tmp1 = thx_color__Rgbx_Rgbx_Impl_::get_blue($this1);
		return (new _hx_array(array($newred, $tmp, $tmp1)));
	}
	static function withGreen($this1, $newgreen) {
		$tmp = thx_color__Rgbx_Rgbx_Impl_::get_red($this1);
		$tmp1 = thx_color__Rgbx_Rgbx_Impl_::get_blue($this1);
		return (new _hx_array(array($tmp, $newgreen, $tmp1)));
	}
	static function withBlue($this1, $newblue) {
		$tmp = thx_color__Rgbx_Rgbx_Impl_::get_red($this1);
		$tmp1 = thx_color__Rgbx_Rgbx_Impl_::get_green($this1);
		return (new _hx_array(array($tmp, $tmp1, $newblue)));
	}
	static function toLab($this1) {
		$tmp = thx_color__Rgbx_Rgbx_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toLab($tmp);
	}
	static function toLCh($this1) {
		$tmp = thx_color__Rgbx_Rgbx_Impl_::toLab($this1);
		return thx_color__Lab_Lab_Impl_::toLCh($tmp);
	}
	static function toLuv($this1) {
		$tmp = thx_color__Rgbx_Rgbx_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toLuv($tmp);
	}
	static function toCmy($this1) {
		return (new _hx_array(array(1 - $this1[0], 1 - $this1[1], 1 - $this1[2])));
	}
	static function toCmyk($this1) {
		$c = 0.0;
		$y = 0.0;
		$m = 0.0;
		$k = null;
		if(_hx_equal($this1->a[0] + $this1[1] + $this1[2], 0)) {
			$k = 1.0;
		} else {
			$tmp = Math::max($this1[0], $this1[1]);
			$tmp1 = Math::max($tmp, $this1[2]);
			$k = 1 - $tmp1;
			$c = (1 - $this1[0] - $k) / (1 - $k);
			$m = (1 - $this1[1] - $k) / (1 - $k);
			$y = (1 - $this1[2] - $k) / (1 - $k);
		}
		return (new _hx_array(array($c, $m, $y, $k)));
	}
	static function toCubeHelix($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toCubeHelixWithGamma($this1, 1);
	}
	static function toCubeHelixWithGamma($this1, $gamma) {
		$l = (-0.655763666799999867 * $this1[2] + -1.7884503806 * $this1[0] - 3.5172982438 * $this1[1]) / -5.9615122912;
		$bl = $this1->a[2] - $l;
		$k = (1.97294 * ($this1->a[1] - $l) - -0.29227 * $bl) / -0.90649;
		$lgamma = Math::pow($l, $gamma);
		$s = null;
		try {
			$tmp = Math::sqrt($k * $k + $bl * $bl);
			$s = $tmp / (1.97294 * $lgamma * (1 - $lgamma));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$s = 0.0;
			}
		}
		$h = null;
		try {
			if(!_hx_equal($s, 0)) {
				$tmp1 = Math::atan2($k, $bl);
				$h = $tmp1 / Math::$PI * 180 - 120;
			} else {
				$h = Math::$NaN;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e1 = $_ex_;
			{
				$h = 0.0;
			}
		}
		$tmp2 = Math::isNaN($s);
		if($tmp2) {
			$s = 0;
		}
		$tmp3 = Math::isNaN($h);
		if($tmp3) {
			$h = 0;
		}
		$tmp4 = $h < 0;
		if($tmp4) {
			$h += 360;
		}
		return (new _hx_array(array($h, $s, $l, 1)));
	}
	static function toGrey($this1) {
		return $this1->a[0] * .2126 + $this1->a[1] * .7152 + $this1->a[2] * .0722;
	}
	static function toPerceivedGrey($this1) {
		return $this1->a[0] * .299 + $this1->a[1] * .587 + $this1->a[2] * .114;
	}
	static function toPerceivedAccurateGrey($this1) {
		$tmp = Math::pow($this1[0], 2);
		$tmp1 = $tmp * .241;
		$tmp2 = Math::pow($this1[1], 2);
		$tmp3 = $tmp1 + $tmp2 * .691;
		$tmp4 = Math::pow($this1[2], 2);
		return $tmp3 + $tmp4 * .068;
	}
	static function toHsl($this1) {
		$tmp = Math::min($this1[0], $this1[1]);
		$min = Math::min($tmp, $this1[2]);
		$tmp1 = Math::max($this1[0], $this1[1]);
		$max = Math::max($tmp1, $this1[2]);
		$delta = $max - $min;
		$h = null;
		$s = null;
		$l = ($max + $min) / 2;
		$tmp2 = Math::abs($delta);
		if($tmp2 <= 1e-9) {
			$h = 0.0;
			$s = 0.0;
		} else {
			if($l < 0.5) {
				$s = $delta / ($max + $min);
			} else {
				$s = $delta / (2 - $max - $min);
			}
			if($this1[0] === $max) {
				$tmp3 = ($this1->a[1] - $this1[2]) / $delta;
				$tmp4 = null;
				$tmp5 = $this1[1];
				$tmp6 = thx_color__Rgbx_Rgbx_Impl_::get_blue($this1);
				if($tmp5 < $tmp6) {
					$tmp4 = 6;
				} else {
					$tmp4 = 0;
				}
				$h = $tmp3 + $tmp4;
			} else {
				if($this1[1] === $max) {
					$h = ($this1->a[2] - $this1[0]) / $delta + 2;
				} else {
					$h = ($this1->a[0] - $this1[1]) / $delta + 4;
				}
			}
			$h *= 60;
		}
		return (new _hx_array(array($h, $s, $l)));
	}
	static function toHsv($this1) {
		$tmp = Math::min($this1[0], $this1[1]);
		$min = Math::min($tmp, $this1[2]);
		$tmp1 = Math::max($this1[0], $this1[1]);
		$max = Math::max($tmp1, $this1[2]);
		$delta = $max - $min;
		$h = null;
		$s = null;
		if(!_hx_equal($delta, 0)) {
			$s = $delta / $max;
		} else {
			$s = 0;
			$h = -1;
			return (new _hx_array(array($h, $s, $max)));
		}
		if($this1[0] === $max) {
			$h = ($this1->a[1] - $this1[2]) / $delta;
		} else {
			if($this1[1] === $max) {
				$h = 2 + ($this1->a[2] - $this1[0]) / $delta;
			} else {
				$h = 4 + ($this1->a[0] - $this1[1]) / $delta;
			}
		}
		$h *= 60;
		$tmp2 = $h < 0;
		if($tmp2) {
			$h += 360;
		}
		return (new _hx_array(array($h, $s, $max)));
	}
	static function toHunterLab($this1) {
		$tmp = thx_color__Rgbx_Rgbx_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toHunterLab($tmp);
	}
	static function toRgb($this1) {
		$red = Math::round($this1->a[0] * 255);
		$green = Math::round($this1->a[1] * 255);
		$blue = Math::round($this1->a[2] * 255);
		return ($red & 255) << 16 | ($green & 255) << 8 | $blue & 255;
	}
	static function toRgbxa($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::withAlpha($this1, 1.0);
	}
	static function toTemperature($this1) {
		$t = 0;
		$rgb = null;
		$minT = 1000;
		$maxT = 40000;
		while($maxT - $minT > 0.4) {
			$t = ($maxT + $minT) / 2;
			$rgb = thx_color__Temperature_Temperature_Impl_::temperatureToRgbx($t);
			if($rgb->a[2] / $rgb[0] >= $this1->a[2] / $this1[0]) {
				$maxT = $t;
			} else {
				$minT = $t;
			}
		}
		return $t;
	}
	static function toXyz($this1) {
		$r = $this1[0];
		$g = $this1[1];
		$b = $this1[2];
		if($r > 0.04045) {
			$r = Math::pow(($r + 0.055) / 1.055, 2.4);
		} else {
			$r /= 12.92;
		}
		if($g > 0.04045) {
			$g = Math::pow(($g + 0.055) / 1.055, 2.4);
		} else {
			$g /= 12.92;
		}
		if($b > 0.04045) {
			$b = Math::pow(($b + 0.055) / 1.055, 2.4);
		} else {
			$b /= 12.92;
		}
		return (new _hx_array(array($r * 0.4124564 + $g * 0.3575761 + $b * 0.1804375, $r * 0.2126729 + $g * 0.7151522 + $b * 0.0721750, $r * 0.0193339 + $g * 0.1191920 + $b * 0.9503041)));
	}
	static function toYuv($this1) {
		$r = $this1[0];
		$g = $this1[1];
		$b = $this1[2];
		return (new _hx_array(array(0.299 * $r + 0.587 * $g + 0.114 * $b, -0.14713 * $r - 0.28886 * $g + 0.436 * $b, 0.615 * $r - 0.51499 * $g - 0.10001 * $b)));
	}
	static function toYxy($this1) {
		$tmp = thx_color__Rgbx_Rgbx_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toYxy($tmp);
	}
	static function get_red($this1) {
		return Math::round($this1->a[0] * 255);
	}
	static function get_green($this1) {
		return Math::round($this1->a[1] * 255);
	}
	static function get_blue($this1) {
		return Math::round($this1->a[2] * 255);
	}
	static function get_redf($this1) {
		return $this1[0];
	}
	static function get_greenf($this1) {
		return $this1[1];
	}
	static function get_bluef($this1) {
		return $this1[2];
	}
	static function get_inSpace($this1) {
		$tmp = null;
		$tmp1 = null;
		$tmp2 = null;
		$tmp3 = null;
		if($this1->a[0] >= 0) {
			$tmp3 = $this1->a[0] <= 1;
		} else {
			$tmp3 = false;
		}
		if($tmp3) {
			$tmp2 = $this1->a[1] >= 0;
		} else {
			$tmp2 = false;
		}
		if($tmp2) {
			$tmp1 = $this1->a[1] <= 1;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = $this1->a[2] >= 0;
		} else {
			$tmp = false;
		}
		if($tmp) {
			return $this1->a[2] <= 1;
		} else {
			return false;
		}
	}
	static $__properties__ = array("get_inSpace" => "get_inSpace","get_bluef" => "get_bluef","get_greenf" => "get_greenf","get_redf" => "get_redf","get_blue" => "get_blue","get_green" => "get_green","get_red" => "get_red");
	function __toString() { return 'thx.color._Rgbx.Rgbx_Impl_'; }
}
