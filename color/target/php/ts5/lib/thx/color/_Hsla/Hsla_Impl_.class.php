<?php

// Generated by Haxe 3.3.0
class thx_color__Hsla_Hsla_Impl_ {
	public function __construct(){}
	static function create($hue, $saturation, $lightness, $alpha) {
		return (new _hx_array(array($hue, $saturation, $lightness, $alpha)));
	}
	static function fromFloats($arr) {
		thx_ArrayFloats::resize($arr, 4, null);
		return (new _hx_array(array($arr[0], $arr[1], $arr[2], $arr[3])));
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseColor($color);
		if(null === $info) {
			return null;
		}
		try {
			switch($info->name) {
			case "hsl":{
				$channels = thx_color_parse_ColorParser::getFloatChannels($info->channels, 3, false);
				return thx_color__Hsl_Hsl_Impl_::toHsla($channels);
			}break;
			case "hsla":{
				$channels1 = thx_color_parse_ColorParser::getFloatChannels($info->channels, 4, false);
				return $channels1;
			}break;
			default:{
				return null;
			}break;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($channels) {
		return $channels;
	}
	static function analogous($this1, $spread = null) {
		if($spread === null) {
			$spread = 30.0;
		}
		return _hx_anonymous(array("_0" => thx_color__Hsla_Hsla_Impl_::rotate($this1, -$spread), "_1" => thx_color__Hsla_Hsla_Impl_::rotate($this1, $spread)));
	}
	static function complement($this1) {
		return thx_color__Hsla_Hsla_Impl_::rotate($this1, 180);
	}
	static function darker($this1, $t) {
		return (new _hx_array(array($this1[0], $this1[1], thx_Floats::interpolate($t, $this1[2], 0), $this1[3])));
	}
	static function lighter($this1, $t) {
		return (new _hx_array(array($this1[0], $this1[1], thx_Floats::interpolate($t, $this1[2], 1), $this1[3])));
	}
	static function normalize($this1) {
		$hue = thx_Floats::wrapCircular($this1[0], 360);
		$this2 = null;
		$v = $this1[1];
		$tmp = null;
		if($v < 0) {
			$tmp = 0;
		} else {
			if($v > 1) {
				$tmp = 1;
			} else {
				$tmp = $v;
			}
		}
		$v1 = $this1[2];
		$tmp1 = null;
		if($v1 < 0) {
			$tmp1 = 0;
		} else {
			if($v1 > 1) {
				$tmp1 = 1;
			} else {
				$tmp1 = $v1;
			}
		}
		$v2 = $this1[3];
		$tmp2 = null;
		if($v2 < 0) {
			$tmp2 = 0;
		} else {
			if($v2 > 1) {
				$tmp2 = 1;
			} else {
				$tmp2 = $v2;
			}
		}
		$this2 = (new _hx_array(array($hue, $tmp, $tmp1, $tmp2)));
		return $this2;
	}
	static function roundTo($this1, $decimals) {
		$hue = thx_Floats::roundTo($this1[0], $decimals);
		$saturation = thx_Floats::roundTo($this1[1], $decimals);
		$lightness = thx_Floats::roundTo($this1[2], $decimals);
		$alpha = thx_Floats::roundTo($this1[3], $decimals);
		return (new _hx_array(array($hue, $saturation, $lightness, $alpha)));
	}
	static function transparent($this1, $t) {
		return (new _hx_array(array($this1[0], $this1[1], $this1[2], thx_Floats::interpolate($t, $this1[3], 0))));
	}
	static function opaque($this1, $t) {
		return (new _hx_array(array($this1[0], $this1[1], $this1[2], thx_Floats::interpolate($t, $this1[3], 1))));
	}
	static function interpolate($this1, $other, $t) {
		return (new _hx_array(array(thx_Floats::interpolateAngle($t, $this1[0], $other[0], null), thx_Floats::interpolate($t, $this1[1], $other[1]), thx_Floats::interpolate($t, $this1[2], $other[2]), thx_Floats::interpolate($t, $this1[3], $other[3]))));
	}
	static function rotate($this1, $angle) {
		return (new _hx_array(array($this1->a[0] + $angle, $this1[1], $this1[2], $this1[3])));
	}
	static function split($this1, $spread = null) {
		if($spread === null) {
			$spread = 150.0;
		}
		return _hx_anonymous(array("_0" => thx_color__Hsla_Hsla_Impl_::rotate($this1, -$spread), "_1" => thx_color__Hsla_Hsla_Impl_::rotate($this1, $spread)));
	}
	static function withAlpha($this1, $newalpha) {
		return (new _hx_array(array($this1[0], $this1[1], $this1[2], $newalpha)));
	}
	static function withHue($this1, $newhue) {
		return (new _hx_array(array($newhue, $this1[1], $this1[2], $this1[3])));
	}
	static function withLightness($this1, $newlightness) {
		return (new _hx_array(array($this1[0], $this1[1], $newlightness, $this1[3])));
	}
	static function withSaturation($this1, $newsaturation) {
		return (new _hx_array(array($this1[0], $newsaturation, $this1[2], $this1[3])));
	}
	static function toCss3($this1) {
		return thx_color__Hsla_Hsla_Impl_::toString($this1);
	}
	static function toString($this1) {
		return "hsla(" . _hx_string_rec($this1[0], "") . "," . _hx_string_rec($this1->a[1] * 100, "") . "%," . _hx_string_rec($this1->a[2] * 100, "") . "%," . _hx_string_rec($this1[3], "") . ")";
	}
	static function equals($this1, $other) {
		return thx_color__Hsla_Hsla_Impl_::nearEquals($this1, $other, null);
	}
	static function nearEquals($this1, $other, $tolerance = null) {
		if($tolerance === null) {
			$tolerance = 1e-9;
		}
		$tmp = null;
		$tmp1 = null;
		$tmp2 = Math::abs(thx_Floats::angleDifference($this1[0], $other[0], 360.0));
		if($tmp2 <= $tolerance) {
			$tmp1 = thx_Floats::nearEquals($this1[1], $other[1], $tolerance);
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = thx_Floats::nearEquals($this1[2], $other[2], $tolerance);
		} else {
			$tmp = false;
		}
		if($tmp) {
			return thx_Floats::nearEquals($this1[3], $other[3], $tolerance);
		} else {
			return false;
		}
	}
	static function toHsl($this1) {
		$channels = $this1->slice(0, 3);
		return $channels;
	}
	static function toHsva($this1) {
		return thx_color__Rgbxa_Rgbxa_Impl_::toHsva(thx_color__Hsla_Hsla_Impl_::toRgbxa($this1));
	}
	static function toRgb($this1) {
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgb(thx_color__Hsla_Hsla_Impl_::toRgbxa($this1));
	}
	static function toRgba($this1) {
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba(thx_color__Hsla_Hsla_Impl_::toRgbxa($this1));
	}
	static function toRgbxa($this1) {
		return (new _hx_array(array(thx_color__Hsl_Hsl_Impl_::_c($this1->a[0] + 120, $this1[1], $this1[2]), thx_color__Hsl_Hsl_Impl_::_c($this1[0], $this1[1], $this1[2]), thx_color__Hsl_Hsl_Impl_::_c($this1->a[0] - 120, $this1[1], $this1[2]), $this1[3])));
	}
	static function get_hue($this1) {
		return $this1[0];
	}
	static function get_saturation($this1) {
		return $this1[1];
	}
	static function get_lightness($this1) {
		return $this1[2];
	}
	static function get_alpha($this1) {
		return $this1[3];
	}
	static $__properties__ = array("get_alpha" => "get_alpha","get_lightness" => "get_lightness","get_saturation" => "get_saturation","get_hue" => "get_hue");
	function __toString() { return 'thx.color._Hsla.Hsla_Impl_'; }
}
