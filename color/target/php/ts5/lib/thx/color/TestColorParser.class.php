<?php

// Generated by Haxe 3.3.0
class thx_color_TestColorParser {
	public function __construct() {}
	public function testFeatures() {
		$tmp = thx_color_parse_ChannelInfo::CIInt8(2);
		$this->assert("a", (new _hx_array(array($tmp))), "a(2)", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 12, "className" => "thx.color.TestColorParser", "methodName" => "testFeatures")));
		$tmp1 = thx_color_parse_ChannelInfo::CIInt8(2);
		$this->assert("aa", (new _hx_array(array($tmp1))), "aa(2)", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 15, "className" => "thx.color.TestColorParser", "methodName" => "testFeatures")));
		$tmp2 = thx_color_parse_ChannelInfo::CIInt8(2);
		$this->assert("rgb", (new _hx_array(array($tmp2))), "rgb(2)", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 18, "className" => "thx.color.TestColorParser", "methodName" => "testFeatures")));
		$tmp3 = thx_color_parse_ChannelInfo::CIInt8(2);
		$this->assert("rgba", (new _hx_array(array($tmp3))), "rgba(2)", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 21, "className" => "thx.color.TestColorParser", "methodName" => "testFeatures")));
		$tmp4 = thx_color_parse_ChannelInfo::CIDegree(1);
		$tmp5 = thx_color_parse_ChannelInfo::CIPercent(2);
		$tmp6 = thx_color_parse_ChannelInfo::CIPercent(3);
		$tmp7 = thx_color_parse_ChannelInfo::CIFloat(0.5);
		$this->assert("hsla", (new _hx_array(array($tmp4, $tmp5, $tmp6, $tmp7))), "hsla(1deg,2%,3%,0.5)", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 24, "className" => "thx.color.TestColorParser", "methodName" => "testFeatures")));
	}
	public function testChannels() {
		$tmp = thx_color_parse_ChannelInfo::CIDegree(1);
		$this->assertStringChannel($tmp, "1deg", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 30, "className" => "thx.color.TestColorParser", "methodName" => "testChannels")));
		$tmp1 = thx_color_parse_ChannelInfo::CIPercent(1);
		$this->assertStringChannel($tmp1, "1%", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 31, "className" => "thx.color.TestColorParser", "methodName" => "testChannels")));
		$tmp2 = thx_color_parse_ChannelInfo::CIFloat(0.1);
		$this->assertStringChannel($tmp2, "0.1", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 32, "className" => "thx.color.TestColorParser", "methodName" => "testChannels")));
		$tmp3 = thx_color_parse_ChannelInfo::CIBool(false);
		$this->assertStringChannel($tmp3, "0", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 33, "className" => "thx.color.TestColorParser", "methodName" => "testChannels")));
		$tmp4 = thx_color_parse_ChannelInfo::CIBool(true);
		$this->assertStringChannel($tmp4, "1", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 34, "className" => "thx.color.TestColorParser", "methodName" => "testChannels")));
		$tmp5 = thx_color_parse_ChannelInfo::CIInt8(2);
		$this->assertStringChannel($tmp5, "2", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 35, "className" => "thx.color.TestColorParser", "methodName" => "testChannels")));
		$tmp6 = thx_color_parse_ChannelInfo::CIInt(256);
		$this->assertStringChannel($tmp6, "256", _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 36, "className" => "thx.color.TestColorParser", "methodName" => "testChannels")));
	}
	public function testInvalidColor() {
		$tmp = thx_color_parse_ColorParser::parseColor("x");
		utest_Assert::isNull($tmp, null, _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 40, "className" => "thx.color.TestColorParser", "methodName" => "testInvalidColor")));
		$tmp1 = thx_color_parse_ColorParser::parseColor("x[]");
		utest_Assert::isNull($tmp1, null, _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 41, "className" => "thx.color.TestColorParser", "methodName" => "testInvalidColor")));
		$tmp2 = thx_color_parse_ColorParser::parseColor("x(x)");
		utest_Assert::isNull($tmp2, null, _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 42, "className" => "thx.color.TestColorParser", "methodName" => "testInvalidColor")));
	}
	public function testInvalidChannel() {
		$tmp = thx_color_parse_ColorParser::parseChannel("x");
		utest_Assert::isNull($tmp, null, _hx_anonymous(array("fileName" => "TestColorParser.hx", "lineNumber" => 46, "className" => "thx.color.TestColorParser", "methodName" => "testInvalidChannel")));
	}
	public function assertStringChannel($expected, $test, $pos = null) {
		$tmp = thx_color_parse_ColorParser::parseChannel($test);
		$this->assertChannel($expected, $tmp, $pos);
	}
	public function assertChannel($expected, $test, $pos = null) {
		if(null === $test) {
			utest_Assert::fail("channel is null", $pos);
			return;
		}
		$ec = Type::enumConstructor($expected);
		$tc = Type::enumConstructor($test);
		$tmp = Type::enumParameters($expected);
		$ep = $tmp[0];
		$tmp1 = Type::enumParameters($test);
		$tp = $tmp1[0];
		utest_Assert::equals($ec, $tc, null, $pos);
		utest_Assert::equals($ep, $tp, null, $pos);
	}
	public function assert($name, $channels, $test_string, $pos = null) {
		$expected = new thx_color_parse_ColorInfo($name, $channels);
		$test = thx_color_parse_ColorParser::parseColor($test_string);
		if(null === $test) {
			utest_Assert::fail("test is null", $pos);
			return;
		}
		utest_Assert::equals($expected->name, $test->name, null, $pos);
		{
			$_g1 = 0;
			$_g = $expected->channels->length;
			while($_g1 < $_g) {
				$i = $_g1++;
				$this->assertChannel($expected->channels[$i], $test->channels[$i], $pos);
				unset($i);
			}
		}
	}
	function __toString() { return 'thx.color.TestColorParser'; }
}
