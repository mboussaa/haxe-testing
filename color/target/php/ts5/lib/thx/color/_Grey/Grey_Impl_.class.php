<?php

// Generated by Haxe 3.3.0
class thx_color__Grey_Grey_Impl_ {
	public function __construct(){}
	static $black;
	static $white;
	static function create($v) {
		return $v;
	}
	static function fromString($color) {
		$info = thx_color_parse_ColorParser::parseColor($color);
		if(null === $info) {
			return null;
		}
		try {
			switch($info->name) {
			case "gray":case "grey":{
				$tmp = thx_color_parse_ColorParser::getFloatChannels($info->channels, 1, false);
				return $tmp[0];
			}break;
			default:{
				return null;
			}break;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return null;
			}
		}
	}
	static function _new($grey) {
		return $grey;
	}
	static function contrast($this1) {
		if($this1 > 0.5) {
			return thx_color__Grey_Grey_Impl_::$black;
		} else {
			return thx_color__Grey_Grey_Impl_::$white;
		}
	}
	static function darker($this1, $t) {
		return thx_Floats::interpolate($t, $this1, 0);
	}
	static function lighter($this1, $t) {
		return thx_Floats::interpolate($t, $this1, 1);
	}
	static function interpolate($this1, $other, $t) {
		return thx_Floats::interpolate($t, $this1, $other);
	}
	static function min($this1, $other) {
		$v = Math::min($this1, $other);
		return $v;
	}
	static function max($this1, $other) {
		$v = Math::max($this1, $other);
		return $v;
	}
	static function normalize($this1) {
		$this2 = null;
		if($this1 < 0) {
			$this2 = 0;
		} else {
			if($this1 > 1) {
				$this2 = 1;
			} else {
				$this2 = $this1;
			}
		}
		return $this2;
	}
	static function roundTo($this1, $decimals) {
		$v = thx_Floats::roundTo($this1, $decimals);
		return $v;
	}
	static function toString($this1) {
		return "grey(" . _hx_string_rec($this1 * 100, "") . "%)";
	}
	static function equals($this1, $other) {
		return thx_Floats::nearEquals($this1, $other, null);
	}
	static function nearEquals($this1, $other, $tolerance = null) {
		if($tolerance === null) {
			$tolerance = 1e-9;
		}
		return thx_Floats::nearEquals($this1, $other, $tolerance);
	}
	static function get_grey($this1) {
		return $this1;
	}
	static function toLab($this1) {
		$tmp = thx_color__Grey_Grey_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toLab($tmp);
	}
	static function toLCh($this1) {
		$tmp = thx_color__Grey_Grey_Impl_::toLab($this1);
		return thx_color__Lab_Lab_Impl_::toLCh($tmp);
	}
	static function toLuv($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toLuv(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static function toCmy($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toCmy(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static function toCmyk($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toCmyk(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static function toCubeHelix($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toCubeHelixWithGamma(thx_color__Grey_Grey_Impl_::toRgbx($this1), 1);
	}
	static function toHsl($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toHsl(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static function toHsv($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toHsv(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static function toHunterLab($this1) {
		$tmp = thx_color__Grey_Grey_Impl_::toXyz($this1);
		return thx_color__Xyz_Xyz_Impl_::toHunterLab($tmp);
	}
	static function toRgb($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toRgb(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static function toRgba($this1) {
		$tmp = thx_color__Grey_Grey_Impl_::toRgbxa($this1);
		return thx_color__Rgbxa_Rgbxa_Impl_::toRgba($tmp);
	}
	static function toRgbx($this1) {
		return (new _hx_array(array($this1, $this1, $this1)));
	}
	static function toRgbxa($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toRgbxa(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static function toTemperature($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toTemperature(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static function toYuv($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toYuv(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static function toXyz($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toXyz(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static function toYxy($this1) {
		return thx_color__Rgbx_Rgbx_Impl_::toYxy(thx_color__Grey_Grey_Impl_::toRgbx($this1));
	}
	static $__properties__ = array("get_grey" => "get_grey");
	function __toString() { return 'thx.color._Grey.Grey_Impl_'; }
}
thx_color__Grey_Grey_Impl_::$black = thx_color__Grey_Grey_Impl__0();
thx_color__Grey_Grey_Impl_::$white = thx_color__Grey_Grey_Impl__1();
function thx_color__Grey_Grey_Impl__0() {
	{
		$this1 = 0;
		return $this1;
	}
}
function thx_color__Grey_Grey_Impl__1() {
	{
		$this1 = 1;
		return $this1;
	}
}
