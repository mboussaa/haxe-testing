<?php

// Generated by Haxe 3.3.0
class thx_color_TestRgbx {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testBasics() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$red = (new _hx_array(array(1, 0, 0)));
			$tmp = thx_color__Rgbx_Rgbx_Impl_::get_red($red);
			utest_Assert::equals(255, $tmp, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 15, "className" => "thx.color.TestRgbx", "methodName" => "testBasics")));
			$tmp1 = thx_color__Rgbx_Rgbx_Impl_::get_green($red);
			utest_Assert::equals(0, $tmp1, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 16, "className" => "thx.color.TestRgbx", "methodName" => "testBasics")));
			$tmp2 = thx_color__Rgbx_Rgbx_Impl_::get_blue($red);
			utest_Assert::equals(0, $tmp2, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 17, "className" => "thx.color.TestRgbx", "methodName" => "testBasics")));
			unset($tmp2,$tmp1,$tmp,$red);
		}
	}
	public function testStrings() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$color = (new _hx_array(array(0, 0, 1)));
			utest_Assert::equals("rgb(0%,0%,100%)", thx_color__Rgbx_Rgbx_Impl_::toCss3($color), null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 23, "className" => "thx.color.TestRgbx", "methodName" => "testStrings")));
			$tmp = thx_color__Rgbx_Rgbx_Impl_::toHex($color, null);
			utest_Assert::equals("#0000FF", $tmp, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 24, "className" => "thx.color.TestRgbx", "methodName" => "testStrings")));
			utest_Assert::equals("rgb(0%,0%,100%)", thx_color__Rgbx_Rgbx_Impl_::toString($color), null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 25, "className" => "thx.color.TestRgbx", "methodName" => "testStrings")));
			unset($tmp,$color);
		}
	}
	public function testFromString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_color__Rgbx_Rgbx_Impl_::equals((new _hx_array(array(0, 1, 0))), thx_color__Rgbx_Rgbx_Impl_::fromString("#00ff00"));
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 30, "className" => "thx.color.TestRgbx", "methodName" => "testFromString")));
			$tmp1 = thx_color__Rgbx_Rgbx_Impl_::equals((new _hx_array(array(0, 1, 0))), thx_color__Rgbx_Rgbx_Impl_::fromString("#0f0"));
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 31, "className" => "thx.color.TestRgbx", "methodName" => "testFromString")));
			$tmp2 = thx_color__Rgbx_Rgbx_Impl_::equals((new _hx_array(array(0, 1, 0))), thx_color__Rgbx_Rgbx_Impl_::fromString("rgb(0,100%,0)"));
			utest_Assert::isTrue($tmp2, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 32, "className" => "thx.color.TestRgbx", "methodName" => "testFromString")));
			$tmp3 = thx_color__Rgbx_Rgbx_Impl_::equals((new _hx_array(array(0, 1, 0))), thx_color__Rgbx_Rgbx_Impl_::fromString("rgb(0,255,0)"));
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 33, "className" => "thx.color.TestRgbx", "methodName" => "testFromString")));
			$tmp4 = thx_color__Rgbxa_Rgbxa_Impl_::equals((new _hx_array(array(0, 1, 0, 1))), thx_color__Rgbxa_Rgbxa_Impl_::fromString("#ff00ff00"));
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 34, "className" => "thx.color.TestRgbx", "methodName" => "testFromString")));
			$tmp5 = thx_color__Rgbxa_Rgbxa_Impl_::equals((new _hx_array(array(0, 1, 0, 1))), thx_color__Rgbxa_Rgbxa_Impl_::fromString("#f0f0"));
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 35, "className" => "thx.color.TestRgbx", "methodName" => "testFromString")));
			$tmp6 = thx_color__Rgbxa_Rgbxa_Impl_::equals((new _hx_array(array(0, 1, 0, 0.5))), thx_color__Rgbxa_Rgbxa_Impl_::fromString("rgba(0,255,0,50%)"));
			utest_Assert::isTrue($tmp6, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 36, "className" => "thx.color.TestRgbx", "methodName" => "testFromString")));
			$tmp7 = thx_color__Rgbxa_Rgbxa_Impl_::equals((new _hx_array(array(0, 1, 0, 0.5))), thx_color__Rgbxa_Rgbxa_Impl_::fromString("rgba(0,100%,0,0.5)"));
			utest_Assert::isTrue($tmp7, null, _hx_anonymous(array("fileName" => "TestRgbx.hx", "lineNumber" => 37, "className" => "thx.color.TestRgbx", "methodName" => "testFromString")));
			unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.color.TestRgbx'; }
}
