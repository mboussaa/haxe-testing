// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestLab : global::haxe.lang.HxObject {
		
		public TestLab(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestLab() {
			global::thx.color.TestLab.__hx_ctor_thx_color_TestLab(this);
		}
		
		
		public static void __hx_ctor_thx_color_TestLab(global::thx.color.TestLab __temp_me160) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.color.TestLab(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.color.TestLab();
		}
		
		
		public virtual void testBasics() {
			unchecked {
				global::Array<double> color = ((global::Array<double>) (new global::Array<double>(new double[]{((double) (100) ), ((double) (10) ), ((double) (-10) )})) );
				global::utest.Assert.@equals(100, ((global::Array<double>) (color) )[0], null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestLab", "TestLab.hx"}, new int[]{1981972957}, new double[]{((double) (11) )}));
				global::utest.Assert.@equals(10, ((global::Array<double>) (color) )[1], null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestLab", "TestLab.hx"}, new int[]{1981972957}, new double[]{((double) (12) )}));
				global::utest.Assert.@equals(-10, ((global::Array<double>) (color) )[2], null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestLab", "TestLab.hx"}, new int[]{1981972957}, new double[]{((double) (13) )}));
			}
		}
		
		
		public virtual void testString() {
			unchecked {
				global::utest.Assert.@equals("lab(100,10,-10)", global::thx.color._Lab.Lab_Impl_.toString(((global::Array<double>) (new global::Array<double>(new double[]{((double) (100) ), ((double) (10) ), ((double) (-10) )})) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testString", "thx.color.TestLab", "TestLab.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
			}
		}
		
		
		public virtual void testParse() {
			unchecked {
				global::utest.Assert.@equals("lab(100,10,-10)", global::thx.color._Lab.Lab_Impl_.toString(global::thx.color._Lab.Lab_Impl_.fromString("lab(100,10,-10)")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testParse", "thx.color.TestLab", "TestLab.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
			}
		}
		
		
		public virtual void testFromFloat() {
			unchecked {
				global::utest.Assert.same(global::thx.color._Lab.Lab_Impl_.fromString("lab(50,10,-10)"), global::thx.color._Lab.Lab_Impl_.fromFloats(new global::Array<double>(new double[]{50.0, 10.0, -10.0})), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromFloat", "thx.color.TestLab", "TestLab.hx"}, new int[]{1981972957}, new double[]{((double) (29) )}));
			}
		}
		
		
		public virtual void testFromString() {
			unchecked {
				global::utest.Assert.same(((global::Array<double>) (new global::Array<double>(new double[]{((double) (50) ), ((double) (10) ), ((double) (-10) )})) ), global::thx.color._Lab.Lab_Impl_.fromString("lab(50,10,-10)"), default(global::haxe.lang.Null<bool>), null, default(global::haxe.lang.Null<double>), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestLab", "TestLab.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
			}
		}
		
		
		public virtual void testDistance() {
			unchecked {
				global::Array<double> orange = global::thx.color._Rgb.Rgb_Impl_.toLab(global::thx.color.palettes.Web.orange);
				global::utest.Assert.isTrue(( global::thx.color._Lab.Lab_Impl_.distance(orange, global::thx.color._Rgb.Rgb_Impl_.toLab(global::thx.color.palettes.Web.red)) < global::thx.color._Lab.Lab_Impl_.distance(orange, global::thx.color._Rgb.Rgb_Impl_.toLab(global::thx.color.palettes.Web.blue)) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testDistance", "thx.color.TestLab", "TestLab.hx"}, new int[]{1981972957}, new double[]{((double) (44) )}));
			}
		}
		
		
		public virtual void testMatch() {
			unchecked {
				global::Array<object> arr = new global::Array<object>(new object[]{global::thx.color._Rgb.Rgb_Impl_.toLab(global::thx.color.palettes.Web.red), global::thx.color._Rgb.Rgb_Impl_.toLab(global::thx.color.palettes.Web.blue)});
				global::utest.Assert.isTrue(global::thx.color._Lab.Lab_Impl_.@equals(global::thx.color._Lab.Lab_Impl_.match(global::thx.color._Rgb.Rgb_Impl_.toLab(global::thx.color.palettes.Web.orange), arr), global::thx.color._Rgb.Rgb_Impl_.toLab(global::thx.color.palettes.Web.red)), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testMatch", "thx.color.TestLab", "TestLab.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1277527955:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testMatch", 1277527955)) );
					}
					
					
					case 1593883047:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testDistance", 1593883047)) );
					}
					
					
					case 1952928973:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromString", 1952928973)) );
					}
					
					
					case 1784294688:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromFloat", 1784294688)) );
					}
					
					
					case 106417793:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testParse", 106417793)) );
					}
					
					
					case 707030723:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testString", 707030723)) );
					}
					
					
					case 1847555063:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBasics", 1847555063)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1277527955:
					{
						this.testMatch();
						break;
					}
					
					
					case 1593883047:
					{
						this.testDistance();
						break;
					}
					
					
					case 1952928973:
					{
						this.testFromString();
						break;
					}
					
					
					case 1784294688:
					{
						this.testFromFloat();
						break;
					}
					
					
					case 106417793:
					{
						this.testParse();
						break;
					}
					
					
					case 707030723:
					{
						this.testString();
						break;
					}
					
					
					case 1847555063:
					{
						this.testBasics();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


