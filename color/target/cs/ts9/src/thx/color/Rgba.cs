// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._Rgba {
	public sealed class Rgba_Impl_ {
		
		public static int create(int red, int green, int blue, int alpha) {
			unchecked {
				return ( ( ( ( (( red & 255 )) << 24 ) | ( (( green & 255 )) << 16 ) ) | ( (( blue & 255 )) << 8 ) ) | ( alpha & 255 ) );
			}
		}
		
		
		public static int fromFloats(global::Array<double> arr) {
			unchecked {
				global::Array<int> ints = global::thx.ArrayFloats.resize(arr, 4, default(global::haxe.lang.Null<double>)).map<int>(((global::haxe.lang.Function) (( (( global::thx.color._Rgba.Rgba_Impl__fromFloats_19__Fun.__hx_current != null )) ? (global::thx.color._Rgba.Rgba_Impl__fromFloats_19__Fun.__hx_current) : (global::thx.color._Rgba.Rgba_Impl__fromFloats_19__Fun.__hx_current = ((global::thx.color._Rgba.Rgba_Impl__fromFloats_19__Fun) (new global::thx.color._Rgba.Rgba_Impl__fromFloats_19__Fun()) )) )) ));
				return ((int) (( ( ( ( (( ints[0] & 255 )) << 24 ) | ( (( ints[1] & 255 )) << 16 ) ) | ( (( ints[2] & 255 )) << 8 ) ) | ( ints[3] & 255 ) )) );
			}
		}
		
		
		public static int fromInt(int rgba) {
			return rgba;
		}
		
		
		public static int fromInts(global::Array<int> arr) {
			unchecked {
				global::thx.ArrayInts.resize(arr, 4, default(global::haxe.lang.Null<int>));
				return ((int) (( ( ( ( (( arr[0] & 255 )) << 24 ) | ( (( arr[1] & 255 )) << 16 ) ) | ( (( arr[2] & 255 )) << 8 ) ) | ( arr[3] & 255 ) )) );
			}
		}
		
		
		public static global::haxe.lang.Null<int> fromString(string color) {
			unchecked {
				global::thx.color.parse.ColorInfo info = global::thx.color.parse.ColorParser.parseHex(color);
				if (( null == info )) {
					info = global::thx.color.parse.ColorParser.parseColor(color);
				}
				
				if (( null == info )) {
					return default(global::haxe.lang.Null<int>);
				}
				
				try {
					switch (info.name) {
						case "rgb":
						{
							return new global::haxe.lang.Null<int>(global::thx.color._Rgb.Rgb_Impl_.toRgba(global::thx.color._Rgb.Rgb_Impl_.fromInts(global::thx.color.parse.ColorParser.getInt8Channels(info.channels, 3))), true);
						}
						
						
						case "rgba":
						{
							return new global::haxe.lang.Null<int>(( ( ( ( (( global::thx.color.parse.ColorParser.getInt8Channel(((global::thx.color.parse.ChannelInfo) (info.channels[0]) )) & 255 )) << 24 ) | ( (( global::thx.color.parse.ColorParser.getInt8Channel(((global::thx.color.parse.ChannelInfo) (info.channels[1]) )) & 255 )) << 16 ) ) | ( (( global::thx.color.parse.ColorParser.getInt8Channel(((global::thx.color.parse.ChannelInfo) (info.channels[2]) )) & 255 )) << 8 ) ) | ( global::Math.round(( global::thx.color.parse.ColorParser.getFloatChannel(((global::thx.color.parse.ChannelInfo) (info.channels[3]) ), default(global::haxe.lang.Null<bool>)) * 255 )) & 255 ) ), true);
						}
						
						
						default:
						{
							return default(global::haxe.lang.Null<int>);
						}
						
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return default(global::haxe.lang.Null<int>);
					}
					
				}
				
				
			}
		}
		
		
		public static int _new(int rgba) {
			return ((int) (rgba) );
		}
		
		
		
		
		
		
		
		
		
		
		public static int combineColor(int this1, int other) {
			unchecked {
				double a = ( ((double) ((( ((int) (this1) ) & 255 ))) ) / 255 );
				return global::thx.color._Rgb.Rgb_Impl_.fromInts(new global::Array<int>(new int[]{global::Math.round(( ( (( 1 - a )) * global::thx.color._Rgb.Rgb_Impl_.get_red(other) ) + ( a * (( ( ((int) (this1) ) >> 24 ) & 255 )) ) )), global::Math.round(( ( (( 1 - a )) * global::thx.color._Rgb.Rgb_Impl_.get_green(other) ) + ( a * (( ( ((int) (this1) ) >> 16 ) & 255 )) ) )), global::Math.round(( ( (( 1 - a )) * global::thx.color._Rgb.Rgb_Impl_.get_blue(other) ) + ( a * (( ( ((int) (this1) ) >> 8 ) & 255 )) ) ))}));
			}
		}
		
		
		public static int darker(int this1, double t) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._Rgbxa.Rgbxa_Impl_.darker(global::thx.color._Rgba.Rgba_Impl_.toRgbxa(this1), t));
		}
		
		
		public static int lighter(int this1, double t) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._Rgbxa.Rgbxa_Impl_.lighter(global::thx.color._Rgba.Rgba_Impl_.toRgbxa(this1), t));
		}
		
		
		public static int transparent(int this1, double t) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._Rgbxa.Rgbxa_Impl_.transparent(global::thx.color._Rgba.Rgba_Impl_.toRgbxa(this1), t));
		}
		
		
		public static int opaque(int this1, double t) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._Rgbxa.Rgbxa_Impl_.opaque(global::thx.color._Rgba.Rgba_Impl_.toRgbxa(this1), t));
		}
		
		
		public static int interpolate(int this1, int other, double t) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._Rgbxa.Rgbxa_Impl_.interpolate(global::thx.color._Rgba.Rgba_Impl_.toRgbxa(this1), global::thx.color._Rgba.Rgba_Impl_.toRgbxa(other), t));
		}
		
		
		public static int withAlpha(int this1, int newalpha) {
			unchecked {
				return global::thx.color._Rgba.Rgba_Impl_.fromInts(new global::Array<int>(new int[]{( ( ((int) (this1) ) >> 24 ) & 255 ), ( ( ((int) (this1) ) >> 16 ) & 255 ), ( ( ((int) (this1) ) >> 8 ) & 255 ), newalpha}));
			}
		}
		
		
		public static int withAlphaf(int this1, double newalpha) {
			unchecked {
				return global::thx.color._Rgba.Rgba_Impl_.fromInts(new global::Array<int>(new int[]{( ( ((int) (this1) ) >> 24 ) & 255 ), ( ( ((int) (this1) ) >> 16 ) & 255 ), ( ( ((int) (this1) ) >> 8 ) & 255 ), global::Math.round(( 255 * newalpha ))}));
			}
		}
		
		
		public static int withRed(int this1, int newred) {
			unchecked {
				return global::thx.color._Rgba.Rgba_Impl_.fromInts(new global::Array<int>(new int[]{newred, ( ( ((int) (this1) ) >> 16 ) & 255 ), ( ( ((int) (this1) ) >> 8 ) & 255 )}));
			}
		}
		
		
		public static int withGreen(int this1, int newgreen) {
			unchecked {
				return global::thx.color._Rgba.Rgba_Impl_.fromInts(new global::Array<int>(new int[]{( ( ((int) (this1) ) >> 24 ) & 255 ), newgreen, ( ( ((int) (this1) ) >> 8 ) & 255 )}));
			}
		}
		
		
		public static int withBlue(int this1, int newblue) {
			unchecked {
				return global::thx.color._Rgba.Rgba_Impl_.fromInts(new global::Array<int>(new int[]{( ( ((int) (this1) ) >> 24 ) & 255 ), ( ( ((int) (this1) ) >> 16 ) & 255 ), newblue}));
			}
		}
		
		
		public static global::Array<double> toHsla(int this1) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toHsla(global::thx.color._Rgba.Rgba_Impl_.toRgbxa(this1));
		}
		
		
		public static global::Array<double> toHsva(int this1) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toHsva(global::thx.color._Rgba.Rgba_Impl_.toRgbxa(this1));
		}
		
		
		public static int toRgb(int this1) {
			unchecked {
				return ((int) (( ( ( (( ( ( ((int) (this1) ) >> 24 ) & 255 ) & 255 )) << 16 ) | ( (( ( ( ((int) (this1) ) >> 16 ) & 255 ) & 255 )) << 8 ) ) | ( ( ( ((int) (this1) ) >> 8 ) & 255 ) & 255 ) )) );
			}
		}
		
		
		public static global::Array<double> toRgbx(int this1) {
			unchecked {
				return global::thx.color._Rgbx.Rgbx_Impl_.fromInts(new global::Array<int>(new int[]{( ( ((int) (this1) ) >> 24 ) & 255 ), ( ( ((int) (this1) ) >> 16 ) & 255 ), ( ( ((int) (this1) ) >> 8 ) & 255 )}));
			}
		}
		
		
		public static global::Array<double> toRgbxa(int this1) {
			unchecked {
				return global::thx.color._Rgbxa.Rgbxa_Impl_.fromInts(new global::Array<int>(new int[]{( ( ((int) (this1) ) >> 24 ) & 255 ), ( ( ((int) (this1) ) >> 16 ) & 255 ), ( ( ((int) (this1) ) >> 8 ) & 255 ), ( ((int) (this1) ) & 255 )}));
			}
		}
		
		
		public static string toCss3(int this1) {
			return global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString(this1));
		}
		
		
		public static string toString(int this1) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("rgba(", global::haxe.lang.Runtime.toString((( ( ((int) (this1) ) >> 24 ) & 255 )))), ","), global::haxe.lang.Runtime.toString((( ( ((int) (this1) ) >> 16 ) & 255 )))), ","), global::haxe.lang.Runtime.toString((( ( ((int) (this1) ) >> 8 ) & 255 )))), ","), global::haxe.lang.Runtime.toString(( ((double) ((( ((int) (this1) ) & 255 ))) ) / 255 ))), ")");
			}
		}
		
		
		public static string toHex(int this1, string prefix) {
			unchecked {
				if (string.Equals(prefix, null)) {
					prefix = "#";
				}
				
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", prefix), global::StringTools.hex(( ((int) (this1) ) & 255 ), new global::haxe.lang.Null<int>(2, true))), global::StringTools.hex(( ( ((int) (this1) ) >> 24 ) & 255 ), new global::haxe.lang.Null<int>(2, true))), global::StringTools.hex(( ( ((int) (this1) ) >> 16 ) & 255 ), new global::haxe.lang.Null<int>(2, true))), global::StringTools.hex(( ( ((int) (this1) ) >> 8 ) & 255 ), new global::haxe.lang.Null<int>(2, true)));
			}
		}
		
		
		public static bool @equals(int this1, int other) {
			unchecked {
				if (( ( ( (( ( ((int) (this1) ) >> 24 ) & 255 )) == (( ( ((int) (other) ) >> 24 ) & 255 )) ) && ( (( ((int) (this1) ) & 255 )) == (( ((int) (other) ) & 255 )) ) ) && ( (( ( ((int) (this1) ) >> 16 ) & 255 )) == (( ( ((int) (other) ) >> 16 ) & 255 )) ) )) {
					return ( (( ( ((int) (this1) ) >> 8 ) & 255 )) == (( ( ((int) (other) ) >> 8 ) & 255 )) );
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static int get_alpha(int this1) {
			unchecked {
				return ( this1 & 255 );
			}
		}
		
		
		public static int get_red(int this1) {
			unchecked {
				return ( ( this1 >> 24 ) & 255 );
			}
		}
		
		
		public static int get_green(int this1) {
			unchecked {
				return ( ( this1 >> 16 ) & 255 );
			}
		}
		
		
		public static int get_blue(int this1) {
			unchecked {
				return ( ( this1 >> 8 ) & 255 );
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._Rgba {
	public class Rgba_Impl__fromFloats_19__Fun : global::haxe.lang.Function {
		
		public Rgba_Impl__fromFloats_19__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.color._Rgba.Rgba_Impl__fromFloats_19__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::haxe.lang.Null<double> _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<double>(__fn_float1, true)) : (( (( __fn_dyn1 == null )) ? (default(global::haxe.lang.Null<double>)) : (global::haxe.lang.Null<object>.ofDynamic<double>(__fn_dyn1)) )) );
				return ((double) (global::Math.round(( (_).@value * 255 ))) );
			}
		}
		
		
	}
}


