// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings : global::haxe.lang.HxObject {
		
		static Strings() {
			unchecked {
				global::thx.Strings.order = global::thx._Ord.Ord_Impl_.fromIntComparison<object>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "compare", 57219237)) ));
				global::thx.Strings.HASCODE_MAX = ((int) (2147483647) );
				global::thx.Strings.HASCODE_MUL = ((int) (31) );
				object __temp_stmt2 = null;
				{
					global::haxe.lang.Function __temp_odecl1 = ( (( global::thx.Strings_Anon_668__Fun.__hx_current != null )) ? (global::thx.Strings_Anon_668__Fun.__hx_current) : (global::thx.Strings_Anon_668__Fun.__hx_current = ((global::thx.Strings_Anon_668__Fun) (new global::thx.Strings_Anon_668__Fun()) )) );
					__temp_stmt2 = new global::haxe.lang.DynamicObject(new int[]{265544154, 1357975336}, new object[]{__temp_odecl1, ""}, new int[]{}, new double[]{});
				}
				
				global::thx.Strings.monoid = ((object) (__temp_stmt2) );
				global::thx.Strings.UCWORDS = new global::EReg("[^a-zA-Z]([a-z])", "g");
				global::thx.Strings.IS_BREAKINGWHITESPACE = new global::EReg("[^\t\n\r ]", "");
				global::thx.Strings.IS_ALPHA = new global::EReg("[^a-zA-Z]", "");
				global::thx.Strings.UCWORDSWS = new global::EReg("[ \t\r\n][a-z]", "g");
				global::thx.Strings.ALPHANUM = new global::EReg("^[a-z0-9]+$", "i");
				global::thx.Strings.DIGITS = new global::EReg("^[0-9]+$", "");
				global::thx.Strings.STRIPTAGS = new global::EReg("</?[a-z]+[^>]*>", "gi");
				global::thx.Strings.WSG = new global::EReg("[ \t\r\n]+", "g");
				global::thx.Strings.SPLIT_LINES = new global::EReg("\r\n|\n\r|\n|\r", "g");
				global::thx.Strings.CANONICALIZE_LINES = new global::EReg("\r\n|\n\r|\r", "g");
			}
		}
		
		
		public Strings(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Strings() {
			global::thx.Strings.__hx_ctor_thx_Strings(this);
		}
		
		
		public static void __hx_ctor_thx_Strings(global::thx.Strings __temp_me130) {
		}
		
		
		public static string after(string @value, string searchFor) {
			int pos = global::haxe.lang.StringExt.indexOf(@value, searchFor, default(global::haxe.lang.Null<int>));
			if (( pos < 0 )) {
				return "";
			}
			else {
				return global::haxe.lang.StringExt.substring(@value, ( pos + searchFor.Length ), default(global::haxe.lang.Null<int>));
			}
			
		}
		
		
		public static string afterLast(string @value, string searchFor) {
			int pos = global::haxe.lang.StringExt.lastIndexOf(@value, searchFor, default(global::haxe.lang.Null<int>));
			if (( pos < 0 )) {
				return "";
			}
			else {
				return global::haxe.lang.StringExt.substring(@value, ( pos + searchFor.Length ), default(global::haxe.lang.Null<int>));
			}
			
		}
		
		
		public static string capitalize(string s) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(s, 0, new global::haxe.lang.Null<int>(1, true)).ToUpperInvariant(), global::haxe.lang.StringExt.substr(s, 1, new global::haxe.lang.Null<int>(( s.Length - 1 ), true)));
			}
		}
		
		
		public static string capitalizeWords(string @value, global::haxe.lang.Null<bool> whiteSpaceOnly) {
			unchecked {
				global::haxe.lang.Null<bool> __temp_whiteSpaceOnly125 = ( ( ! (whiteSpaceOnly.hasValue) ) ? (new global::haxe.lang.Null<bool>(false, true)) : (whiteSpaceOnly) );
				if (((__temp_whiteSpaceOnly125)).@value) {
					return global::thx.Strings.UCWORDSWS.map(global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(@value, 0, new global::haxe.lang.Null<int>(1, true)).ToUpperInvariant(), global::haxe.lang.StringExt.substr(@value, 1, new global::haxe.lang.Null<int>(( @value.Length - 1 ), true))), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "upperMatch", 1152408707)) ));
				}
				else {
					return global::thx.Strings.UCWORDS.map(global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(@value, 0, new global::haxe.lang.Null<int>(1, true)).ToUpperInvariant(), global::haxe.lang.StringExt.substr(@value, 1, new global::haxe.lang.Null<int>(( @value.Length - 1 ), true))), ((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.Strings), "upperMatch", 1152408707)) ));
				}
				
			}
		}
		
		
		public static string canonicalizeNewlines(string @value) {
			return global::thx.Strings.CANONICALIZE_LINES.replace(@value, "\n");
		}
		
		
		public static int caseInsensitiveCompare(string a, string b) {
			unchecked {
				if (( string.Equals(null, a) && string.Equals(null, b) )) {
					return 0;
				}
				
				if (string.Equals(null, a)) {
					return -1;
				}
				else if (string.Equals(null, b)) {
					return 1;
				}
				
				return global::haxe.Utf8.compare(a.ToLowerInvariant(), b.ToLowerInvariant());
			}
		}
		
		
		public static bool caseInsensitiveEndsWith(string s, string end) {
			return s.ToLowerInvariant().EndsWith(end.ToLowerInvariant());
		}
		
		
		public static bool caseInsensitiveEndsWithAny(string s, global::Array<object> values) {
			return global::thx.Strings.endsWithAny(s.ToLowerInvariant(), values.map<object>(((global::haxe.lang.Function) (( (( global::thx.Strings_caseInsensitiveEndsWithAny_92__Fun.__hx_current != null )) ? (global::thx.Strings_caseInsensitiveEndsWithAny_92__Fun.__hx_current) : (global::thx.Strings_caseInsensitiveEndsWithAny_92__Fun.__hx_current = ((global::thx.Strings_caseInsensitiveEndsWithAny_92__Fun) (new global::thx.Strings_caseInsensitiveEndsWithAny_92__Fun()) )) )) )));
		}
		
		
		public static bool caseInsensitiveStartsWith(string s, string start) {
			return s.ToLowerInvariant().StartsWith(start.ToLowerInvariant());
		}
		
		
		public static bool caseInsensitiveStartsWithAny(string s, global::Array<object> values) {
			return global::thx.Strings.startsWithAny(s.ToLowerInvariant(), values.map<object>(((global::haxe.lang.Function) (( (( global::thx.Strings_caseInsensitiveStartsWithAny_104__Fun.__hx_current != null )) ? (global::thx.Strings_caseInsensitiveStartsWithAny_104__Fun.__hx_current) : (global::thx.Strings_caseInsensitiveStartsWithAny_104__Fun.__hx_current = ((global::thx.Strings_caseInsensitiveStartsWithAny_104__Fun) (new global::thx.Strings_caseInsensitiveStartsWithAny_104__Fun()) )) )) )));
		}
		
		
		public static string collapse(string @value) {
			return global::thx.Strings.WSG.replace(@value.Trim(), " ");
		}
		
		
		public static int compare(string a, string b) {
			return global::haxe.Utf8.compare(a, b);
		}
		
		
		public static global::haxe.lang.Function order;
		
		public static bool caseInsensitiveContains(string s, string test) {
			return ( global::haxe.lang.StringExt.indexOf(s.ToLowerInvariant(), test.ToLowerInvariant(), default(global::haxe.lang.Null<int>)) >= 0 );
		}
		
		
		public static bool contains(string s, string test) {
			return ( global::haxe.lang.StringExt.indexOf(s, test, default(global::haxe.lang.Null<int>)) >= 0 );
		}
		
		
		public static int count(string s, string test) {
			unchecked {
				return ( global::haxe.lang.StringExt.split(s, test).length - 1 );
			}
		}
		
		
		public static bool caseInsensitiveContainsAny(string s, global::Array<object> tests) {
			string s1 = s;
			return global::thx.Arrays.any<object>(((global::Array<object>) (tests) ), ((global::haxe.lang.Function) (new global::thx.Strings_caseInsensitiveContainsAny_160__Fun(s1)) ));
		}
		
		
		public static bool containsAny(string s, global::Array<object> tests) {
			string s1 = s;
			return global::thx.Arrays.any<object>(((global::Array<object>) (tests) ), ((global::haxe.lang.Function) (new global::thx.Strings_containsAny_166__Fun(s1)) ));
		}
		
		
		public static string dasherize(string s) {
			return global::StringTools.replace(s, "_", "-");
		}
		
		
		public static int diffAt(string a, string b) {
			unchecked {
				int a1 = a.Length;
				int b1 = b.Length;
				int min = ( (( a1 < b1 )) ? (a1) : (b1) );
				{
					int _g1 = 0;
					int _g = min;
					while (( _g1 < _g )) {
						int i = _g1++;
						if ( ! (string.Equals(global::haxe.lang.StringExt.substring(a, i, new global::haxe.lang.Null<int>(( i + 1 ), true)), global::haxe.lang.StringExt.substring(b, i, new global::haxe.lang.Null<int>(( i + 1 ), true)))) ) {
							return i;
						}
						
					}
					
				}
				
				return min;
			}
		}
		
		
		public static string ellipsis(string s, global::haxe.lang.Null<int> maxlen, string symbol) {
			unchecked {
				if (string.Equals(symbol, null)) {
					symbol = "\u2026";
				}
				
				global::haxe.lang.Null<int> __temp_maxlen126 = ( ( ! (maxlen.hasValue) ) ? (new global::haxe.lang.Null<int>(20, true)) : (maxlen) );
				int sl = s.Length;
				int symboll = symbol.Length;
				if (( sl > (__temp_maxlen126).@value )) {
					if (( (__temp_maxlen126).@value < symboll )) {
						return global::haxe.lang.StringExt.substr(symbol, ( symboll - (__temp_maxlen126).@value ), __temp_maxlen126);
					}
					else {
						return global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(s, 0, new global::haxe.lang.Null<int>(( (__temp_maxlen126).@value - symboll ), true)), symbol);
					}
					
				}
				else {
					return s;
				}
				
			}
		}
		
		
		public static string ellipsisMiddle(string s, global::haxe.lang.Null<int> maxlen, string symbol) {
			unchecked {
				if (string.Equals(symbol, null)) {
					symbol = "\u2026";
				}
				
				global::haxe.lang.Null<int> __temp_maxlen127 = ( ( ! (maxlen.hasValue) ) ? (new global::haxe.lang.Null<int>(20, true)) : (maxlen) );
				int sl = s.Length;
				int symboll = symbol.Length;
				if (( sl > (__temp_maxlen127).@value )) {
					if (( (__temp_maxlen127).@value <= symboll )) {
						return global::thx.Strings.ellipsis(s, __temp_maxlen127, symbol);
					}
					
					int hll = ((int) (global::System.Math.Ceiling(((double) (( ((double) ((( (__temp_maxlen127).@value - symboll ))) ) / 2 )) ))) );
					int hlr = ((int) (global::System.Math.Floor(((double) (( ((double) ((( (__temp_maxlen127).@value - symboll ))) ) / 2 )) ))) );
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(s, 0, new global::haxe.lang.Null<int>(hll, true)), symbol), global::haxe.lang.StringExt.substr(s, ( sl - hlr ), new global::haxe.lang.Null<int>(hlr, true)));
				}
				else {
					return s;
				}
				
			}
		}
		
		
		public static bool endsWithAny(string s, object values) {
			return global::thx.Iterables.any<object>(((object) (values) ), ((global::haxe.lang.Function) (new global::thx.Strings_endsWithAny_236__Fun(s)) ));
		}
		
		
		public static string filter(string s, global::haxe.lang.Function predicate) {
			return global::haxe.lang.StringExt.split(s, "").filter(predicate).@join("");
		}
		
		
		public static string filterCharcode(string s, global::haxe.lang.Function predicate) {
			return global::thx.Strings.map<int>(((string) (s) ), ((global::haxe.lang.Function) (( (( global::thx.Strings_filterCharcode_251__Fun.__hx_current != null )) ? (global::thx.Strings_filterCharcode_251__Fun.__hx_current) : (global::thx.Strings_filterCharcode_251__Fun.__hx_current = ((global::thx.Strings_filterCharcode_251__Fun) (new global::thx.Strings_filterCharcode_251__Fun()) )) )) )).filter(predicate).map<object>(((global::haxe.lang.Function) (( (( global::thx.Strings_filterCharcode_253__Fun.__hx_current != null )) ? (global::thx.Strings_filterCharcode_253__Fun.__hx_current) : (global::thx.Strings_filterCharcode_253__Fun.__hx_current = ((global::thx.Strings_filterCharcode_253__Fun) (new global::thx.Strings_filterCharcode_253__Fun()) )) )) )).@join("");
		}
		
		
		public static string @from(string @value, string searchFor) {
			int pos = global::haxe.lang.StringExt.indexOf(@value, searchFor, default(global::haxe.lang.Null<int>));
			if (( pos < 0 )) {
				return "";
			}
			else {
				return global::haxe.lang.StringExt.substring(@value, pos, default(global::haxe.lang.Null<int>));
			}
			
		}
		
		
		public static int HASCODE_MAX;
		
		public static int HASCODE_MUL;
		
		public static int hashCode(string @value) {
			int code = 0;
			{
				int _g1 = 0;
				int _g = @value.Length;
				while (( _g1 < _g )) {
					int c = (global::haxe.lang.StringExt.charCodeAt(@value, _g1++)).@value;
					code = ((int) (( (( ((int) (( global::thx.Strings.HASCODE_MUL * code )) ) + ((int) (c) ) )) % global::thx.Strings.HASCODE_MAX )) );
				}
				
			}
			
			return ((int) (code) );
		}
		
		
		public static bool hasContent(string @value) {
			if ( ! (string.Equals(@value, null)) ) {
				return ( @value.Length > 0 );
			}
			else {
				return false;
			}
			
		}
		
		
		public static string humanize(string s) {
			return global::StringTools.replace(global::thx.Strings.underscore(s), "_", " ");
		}
		
		
		public static bool isAlpha(string s) {
			if (( s.Length > 0 )) {
				return  ! (global::thx.Strings.IS_ALPHA.match(s)) ;
			}
			else {
				return false;
			}
			
		}
		
		
		public static bool isAlphaNum(string @value) {
			return global::thx.Strings.ALPHANUM.match(@value);
		}
		
		
		public static bool isBreakingWhitespace(string @value) {
			return  ! (global::thx.Strings.IS_BREAKINGWHITESPACE.match(@value)) ;
		}
		
		
		public static bool isLowerCase(string @value) {
			return string.Equals(@value.ToLowerInvariant(), @value);
		}
		
		
		public static bool isUpperCase(string @value) {
			return string.Equals(@value.ToUpperInvariant(), @value);
		}
		
		
		public static string ifEmpty(string @value, string alt) {
			if ((  ! (string.Equals(null, @value))  &&  ! (string.Equals("", @value))  )) {
				return @value;
			}
			else {
				return alt;
			}
			
		}
		
		
		public static bool isDigitsOnly(string @value) {
			return global::thx.Strings.DIGITS.match(@value);
		}
		
		
		public static bool isEmpty(string @value) {
			if ( ! (string.Equals(@value, null)) ) {
				return string.Equals(@value, "");
			}
			else {
				return true;
			}
			
		}
		
		
		public static string lowerCaseFirst(string @value) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substring(@value, 0, new global::haxe.lang.Null<int>(1, true)).ToLowerInvariant(), global::haxe.lang.StringExt.substring(@value, 1, default(global::haxe.lang.Null<int>)));
			}
		}
		
		
		public static string random(string @value, global::haxe.lang.Null<int> length) {
			unchecked {
				int __temp_length128 = ( ( ! (length.hasValue) ) ? (1) : ((length).@value) );
				return global::haxe.lang.StringExt.substr(@value, ((int) (global::System.Math.Floor(((double) (( (( ( @value.Length - __temp_length128 ) + 1 )) * global::Math.rand.NextDouble() )) ))) ), new global::haxe.lang.Null<int>(__temp_length128, true));
			}
		}
		
		
		public static string randomSequence(string seed, int length) {
			return global::thx.Ints.range(0, new global::haxe.lang.Null<int>(length, true), default(global::haxe.lang.Null<int>)).map<object>(((global::haxe.lang.Function) (new global::thx.Strings_randomSequence_364__Fun(seed)) )).@join("");
		}
		
		
		public static string randomSequence64(int length) {
			return global::thx.Strings.randomSequence(global::haxe.crypto.Base64.CHARS, length);
		}
		
		
		public static object iterator(string s) {
			return new global::_Array.ArrayIterator<object>(((global::Array<object>) (global::haxe.lang.StringExt.split(s, "")) ));
		}
		
		
		public static global::Array<T> map<T>(string @value, global::haxe.lang.Function callback) {
			return global::haxe.lang.StringExt.split(@value, "").map<T>(((global::haxe.lang.Function) (callback) ));
		}
		
		
		public static string @remove(string @value, string toremove) {
			return global::StringTools.replace(@value, toremove, "");
		}
		
		
		public static string removeAfter(string @value, string toremove) {
			if (@value.EndsWith(toremove)) {
				return global::haxe.lang.StringExt.substring(@value, 0, new global::haxe.lang.Null<int>(( @value.Length - toremove.Length ), true));
			}
			else {
				return @value;
			}
			
		}
		
		
		public static string removeAt(string @value, int index, int length) {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substring(@value, 0, new global::haxe.lang.Null<int>(index, true)), global::haxe.lang.StringExt.substring(@value, ( index + length ), default(global::haxe.lang.Null<int>)));
		}
		
		
		public static string removeBefore(string @value, string toremove) {
			if (@value.StartsWith(toremove)) {
				return global::haxe.lang.StringExt.substring(@value, toremove.Length, default(global::haxe.lang.Null<int>));
			}
			else {
				return @value;
			}
			
		}
		
		
		public static string removeOne(string @value, string toremove) {
			int pos = global::haxe.lang.StringExt.indexOf(@value, toremove, default(global::haxe.lang.Null<int>));
			if (( pos < 0 )) {
				return @value;
			}
			
			return global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substring(@value, 0, new global::haxe.lang.Null<int>(pos, true)), global::haxe.lang.StringExt.substring(@value, ( pos + toremove.Length ), default(global::haxe.lang.Null<int>)));
		}
		
		
		public static string repeat(string s, int times) {
			global::Array<object> _g = new global::Array<object>(new object[]{});
			{
				int _g2 = 0;
				while (( _g2 < times )) {
					 ++ _g2;
					_g.push(s);
				}
				
			}
			
			return _g.@join("");
		}
		
		
		public static string reverse(string s) {
			global::Array<object> arr = global::haxe.lang.StringExt.split(s, "");
			arr.reverse();
			return arr.@join("");
		}
		
		
		public static string quote(string s) {
			if (( global::haxe.lang.StringExt.indexOf(s, "\"", default(global::haxe.lang.Null<int>)) < 0 )) {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\"", s), "\"");
			}
			else if (( global::haxe.lang.StringExt.indexOf(s, "\'", default(global::haxe.lang.Null<int>)) < 0 )) {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\'", s), "\'");
			}
			else {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\"", global::StringTools.replace(s, "\"", "\\\"")), "\"");
			}
			
		}
		
		
		public static global::Array<object> splitOnce(string s, string separator) {
			int pos = global::haxe.lang.StringExt.indexOf(s, separator, default(global::haxe.lang.Null<int>));
			if (( pos < 0 )) {
				return new global::Array<object>(new object[]{s});
			}
			
			return new global::Array<object>(new object[]{global::haxe.lang.StringExt.substring(s, 0, new global::haxe.lang.Null<int>(pos, true)), global::haxe.lang.StringExt.substring(s, ( pos + separator.Length ), default(global::haxe.lang.Null<int>))});
		}
		
		
		public static bool startsWithAny(string s, object values) {
			return global::thx.Iterables.any<object>(((object) (values) ), ((global::haxe.lang.Function) (new global::thx.Strings_startsWithAny_464__Fun(s)) ));
		}
		
		
		public static string stripTags(string s) {
			return global::thx.Strings.STRIPTAGS.replace(s, "");
		}
		
		
		public static string surround(string s, string left, string right) {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", left), s), (( (string.Equals(null, right)) ? (left) : (right) )));
		}
		
		
		public static global::Array<object> toArray(string s) {
			return global::haxe.lang.StringExt.split(s, "");
		}
		
		
		public static global::Array<int> toCharcodes(string s) {
			return global::thx.Strings.map<int>(((string) (s) ), ((global::haxe.lang.Function) (( (( global::thx.Strings_toCharcodes_502__Fun.__hx_current != null )) ? (global::thx.Strings_toCharcodes_502__Fun.__hx_current) : (global::thx.Strings_toCharcodes_502__Fun.__hx_current = ((global::thx.Strings_toCharcodes_502__Fun) (new global::thx.Strings_toCharcodes_502__Fun()) )) )) ));
		}
		
		
		public static global::Array<object> toChunks(string s, int len) {
			global::Array<object> chunks = new global::Array<object>(new object[]{});
			while (( s.Length > 0 )) {
				chunks.push(global::haxe.lang.StringExt.substr(s, 0, new global::haxe.lang.Null<int>(len, true)));
				s = global::haxe.lang.StringExt.substr(s, len, new global::haxe.lang.Null<int>(( s.Length - len ), true));
			}
			
			return chunks;
		}
		
		
		public static global::Array<object> toLines(string s) {
			return global::thx.Strings.SPLIT_LINES.split(s);
		}
		
		
		public static string trimChars(string @value, string charlist) {
			return global::thx.Strings.trimCharsRight(global::thx.Strings.trimCharsLeft(@value, charlist), charlist);
		}
		
		
		public static string trimCharsLeft(string @value, string charlist) {
			int pos = 0;
			{
				int _g1 = 0;
				int _g = @value.Length;
				while (( _g1 < _g )) {
					if (( global::haxe.lang.StringExt.indexOf(charlist, global::haxe.lang.StringExt.charAt(@value, _g1++), default(global::haxe.lang.Null<int>)) >= 0 )) {
						 ++ pos;
					}
					else {
						break;
					}
					
				}
				
			}
			
			return global::haxe.lang.StringExt.substring(@value, pos, default(global::haxe.lang.Null<int>));
		}
		
		
		public static string trimCharsRight(string @value, string charlist) {
			unchecked {
				int len = @value.Length;
				int pos = len;
				int i = default(int);
				{
					int _g1 = 0;
					while (( _g1 < len )) {
						i = ( ( len - _g1++ ) - 1 );
						if (( global::haxe.lang.StringExt.indexOf(charlist, global::haxe.lang.StringExt.charAt(@value, i), default(global::haxe.lang.Null<int>)) >= 0 )) {
							pos = i;
						}
						else {
							break;
						}
						
					}
					
				}
				
				return global::haxe.lang.StringExt.substring(@value, 0, new global::haxe.lang.Null<int>(pos, true));
			}
		}
		
		
		public static string underscore(string s) {
			s = new global::EReg("::", "g").replace(s, "/");
			s = new global::EReg("([A-Z]+)([A-Z][a-z])", "g").replace(s, "$1_$2");
			s = new global::EReg("([a-z\\d])([A-Z])", "g").replace(s, "$1_$2");
			s = new global::EReg("-", "g").replace(s, "_");
			return s.ToLowerInvariant();
		}
		
		
		public static string upperCaseFirst(string @value) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substring(@value, 0, new global::haxe.lang.Null<int>(1, true)).ToUpperInvariant(), global::haxe.lang.StringExt.substring(@value, 1, default(global::haxe.lang.Null<int>)));
			}
		}
		
		
		public static string upTo(string @value, string searchFor) {
			int pos = global::haxe.lang.StringExt.indexOf(@value, searchFor, default(global::haxe.lang.Null<int>));
			if (( pos < 0 )) {
				return @value;
			}
			else {
				return global::haxe.lang.StringExt.substring(@value, 0, new global::haxe.lang.Null<int>(pos, true));
			}
			
		}
		
		
		public static string wrapColumns(string s, global::haxe.lang.Null<int> columns, string indent, string newline) {
			unchecked {
				if (string.Equals(newline, null)) {
					newline = "\n";
				}
				
				if (string.Equals(indent, null)) {
					indent = "";
				}
				
				int __temp_columns129 = ( ( ! (columns.hasValue) ) ? (78) : ((columns).@value) );
				return global::thx.Strings.SPLIT_LINES.split(s).map<object>(((global::haxe.lang.Function) (new global::thx.Strings_wrapColumns_609__Fun(newline, indent, __temp_columns129)) )).@join(newline);
			}
		}
		
		
		public static string upperMatch(global::EReg re) {
			return re.matched(0).ToUpperInvariant();
		}
		
		
		public static string wrapLine(string s, int columns, string indent, string newline) {
			unchecked {
				global::Array<object> parts = new global::Array<object>(new object[]{});
				int pos = 0;
				int len = s.Length;
				int ilen = indent.Length;
				columns -= ilen;
				while (true) {
					if (( ( pos + columns ) >= ( len - ilen ) )) {
						parts.push(global::haxe.lang.StringExt.substring(s, pos, default(global::haxe.lang.Null<int>)));
						break;
					}
					
					int i = 0;
					while ((  ! (global::StringTools.isSpace(s, ( ( pos + columns ) - i )))  && ( i < columns ) )) {
						 ++ i;
					}
					
					if (( i == columns )) {
						i = 0;
						while ((  ! (global::StringTools.isSpace(s, ( ( pos + columns ) + i )))  && ( ( ( pos + columns ) + i ) < len ) )) {
							 ++ i;
						}
						
						parts.push(global::haxe.lang.StringExt.substring(s, pos, new global::haxe.lang.Null<int>(( ( pos + columns ) + i ), true)));
						pos += ( ( columns + i ) + 1 );
					}
					else {
						parts.push(global::haxe.lang.StringExt.substring(s, pos, new global::haxe.lang.Null<int>(( ( pos + columns ) - i ), true)));
						pos += ( ( columns - i ) + 1 );
					}
					
				}
				
				return global::haxe.lang.Runtime.concat(indent, parts.@join(global::haxe.lang.Runtime.concat(newline, indent)));
			}
		}
		
		
		public static string lpad(string s, string @char, int length) {
			int diff = ( length - s.Length );
			if (( diff > 0 )) {
				return global::haxe.lang.Runtime.concat(global::thx.Strings.repeat(@char, diff), s);
			}
			else {
				return s;
			}
			
		}
		
		
		public static string rpad(string s, string @char, int length) {
			int diff = ( length - s.Length );
			if (( diff > 0 )) {
				return global::haxe.lang.Runtime.concat(s, global::thx.Strings.repeat(@char, diff));
			}
			else {
				return s;
			}
			
		}
		
		
		public static object monoid;
		
		public static global::EReg UCWORDS;
		
		public static global::EReg IS_BREAKINGWHITESPACE;
		
		public static global::EReg IS_ALPHA;
		
		public static global::EReg UCWORDSWS;
		
		public static global::EReg ALPHANUM;
		
		public static global::EReg DIGITS;
		
		public static global::EReg STRIPTAGS;
		
		public static global::EReg WSG;
		
		public static global::EReg SPLIT_LINES;
		
		public static global::EReg CANONICALIZE_LINES;
		
		public static new object __hx_createEmpty() {
			return new global::thx.Strings(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.Strings();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_caseInsensitiveEndsWithAny_92__Fun : global::haxe.lang.Function {
		
		public Strings_caseInsensitiveEndsWithAny_92__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.Strings_caseInsensitiveEndsWithAny_92__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return v.ToLowerInvariant();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_caseInsensitiveStartsWithAny_104__Fun : global::haxe.lang.Function {
		
		public Strings_caseInsensitiveStartsWithAny_104__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.Strings_caseInsensitiveStartsWithAny_104__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return v.ToLowerInvariant();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_caseInsensitiveContainsAny_160__Fun : global::haxe.lang.Function {
		
		public Strings_caseInsensitiveContainsAny_160__Fun(string s1) : base(1, 0) {
			this.s1 = s1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.caseInsensitiveContains(this.s1, a1);
		}
		
		
		public string s1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_containsAny_166__Fun : global::haxe.lang.Function {
		
		public Strings_containsAny_166__Fun(string s1) : base(1, 0) {
			this.s1 = s1;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string a1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.contains(this.s1, a1);
		}
		
		
		public string s1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_endsWithAny_236__Fun : global::haxe.lang.Function {
		
		public Strings_endsWithAny_236__Fun(string s) : base(1, 0) {
			this.s = s;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string end = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return this.s.EndsWith(end);
		}
		
		
		public string s;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_filterCharcode_253__Fun : global::haxe.lang.Function {
		
		public Strings_filterCharcode_253__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.Strings_filterCharcode_253__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				int i = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
				return new string(((char) (i) ), 1);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_filterCharcode_251__Fun : global::haxe.lang.Function {
		
		public Strings_filterCharcode_251__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.Strings_filterCharcode_251__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			string s1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return ((double) ((global::haxe.lang.StringExt.charCodeAt(s1, 0)).@value) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_randomSequence_364__Fun : global::haxe.lang.Function {
		
		public Strings_randomSequence_364__Fun(string seed) : base(1, 0) {
			this.seed = seed;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			int _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((int) (__fn_float1) )) : (((int) (global::haxe.lang.Runtime.toInt(__fn_dyn1)) )) );
			return global::thx.Strings.random(this.seed, default(global::haxe.lang.Null<int>));
		}
		
		
		public string seed;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_startsWithAny_464__Fun : global::haxe.lang.Function {
		
		public Strings_startsWithAny_464__Fun(string s) : base(1, 0) {
			this.s = s;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string start = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return this.s.StartsWith(start);
		}
		
		
		public string s;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_toCharcodes_502__Fun : global::haxe.lang.Function {
		
		public Strings_toCharcodes_502__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.Strings_toCharcodes_502__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			string s1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return ((double) ((global::haxe.lang.StringExt.charCodeAt(s1, 0)).@value) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_wrapColumns_609__Fun : global::haxe.lang.Function {
		
		public Strings_wrapColumns_609__Fun(string newline, string indent, int __temp_columns129) : base(1, 0) {
			this.newline = newline;
			this.indent = indent;
			this.__temp_columns129 = __temp_columns129;
		}
		
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string part = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::thx.Strings.wrapLine(global::thx.Strings.WSG.replace(part, " ").Trim(), this.__temp_columns129, this.indent, this.newline);
		}
		
		
		public string newline;
		
		public string indent;
		
		public int __temp_columns129;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx {
	public class Strings_Anon_668__Fun : global::haxe.lang.Function {
		
		public Strings_Anon_668__Fun() : base(2, 0) {
		}
		
		
		public static global::thx.Strings_Anon_668__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			string b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float2)) : (global::haxe.lang.Runtime.toString(__fn_dyn2)) );
			string a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			return global::haxe.lang.Runtime.concat(a, b);
		}
		
		
	}
}


