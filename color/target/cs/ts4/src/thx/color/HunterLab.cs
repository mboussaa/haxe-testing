// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._HunterLab {
	public sealed class HunterLab_Impl_ {
		
		public static global::Array<double> create(double l, double a, double b) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{l, a, b})) );
		}
		
		
		public static global::Array<double> fromFloats(global::Array<double> arr) {
			unchecked {
				global::thx.ArrayFloats.resize(arr, 3, default(global::haxe.lang.Null<double>));
				return ((global::Array<double>) (new global::Array<double>(new double[]{arr[0], arr[1], arr[2]})) );
			}
		}
		
		
		public static global::Array<double> fromString(string color) {
			unchecked {
				global::thx.color.parse.ColorInfo info = global::thx.color.parse.ColorParser.parseColor(color);
				if (( null == info )) {
					return null;
				}
				
				try {
					if (string.Equals(info.name, "hunterlab")) {
						return global::thx.color._HunterLab.HunterLab_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false));
					}
					else {
						return null;
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return null;
					}
					
				}
				
				
			}
		}
		
		
		public static global::Array<double> _new(global::Array<double> channels) {
			return ((global::Array<double>) (channels) );
		}
		
		
		
		
		
		
		
		
		public static double distance(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				return ( ( ( (( ((global::Array<double>) (this1) )[0] - ((global::Array<double>) (other) )[0] )) * (( ((global::Array<double>) (this1) )[0] - ((global::Array<double>) (other) )[0] )) ) + ( (( ((global::Array<double>) (this1) )[1] - ((global::Array<double>) (other) )[1] )) * (( ((global::Array<double>) (this1) )[1] - ((global::Array<double>) (other) )[1] )) ) ) + ( (( ((global::Array<double>) (this1) )[2] - ((global::Array<double>) (other) )[2] )) * (( ((global::Array<double>) (this1) )[2] - ((global::Array<double>) (other) )[2] )) ) );
			}
		}
		
		
		public static global::Array<double> interpolate(global::Array<double> this1, global::Array<double> other, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2])})) );
			}
		}
		
		
		public static global::Array<double> match(global::Array<double> this1, object palette) {
			unchecked {
				if (( null == palette )) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.error.NullArgument("Iterable argument \"this\" cannot be null", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"match", "thx.color._HunterLab.HunterLab_Impl_", "NullArgument.hx"}, new int[]{1981972957}, new double[]{((double) (73) )})));
				}
				else if ( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(((object) (global::haxe.lang.Runtime.callField(palette, "iterator", 328878574, null)) ), "hasNext", 407283053, null))) ) {
					throw global::haxe.lang.HaxeException.wrap(new global::thx.error.NullArgument("Iterable argument \"this\" cannot be empty", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"match", "thx.color._HunterLab.HunterLab_Impl_", "NullArgument.hx"}, new int[]{1981972957}, new double[]{((double) (75) )})));
				}
				
				double dist = global::Math.POSITIVE_INFINITY;
				global::Array<double> closest = null;
				{
					object tmp = ((object) (global::haxe.lang.Runtime.callField(palette, "iterator", 328878574, null)) );
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(tmp, "hasNext", 407283053, null))) {
						global::Array<double> color = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (global::haxe.lang.Runtime.callField(tmp, "next", 1224901875, null)) ))) );
						double ndist = global::thx.color._HunterLab.HunterLab_Impl_.distance(this1, color);
						if (( ndist < dist )) {
							dist = ndist;
							closest = color;
						}
						
					}
					
				}
				
				return closest;
			}
		}
		
		
		public static global::Array<double> min(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::System.Math.Min(((double) (((global::Array<double>) (this1) )[0]) ), ((double) (((global::Array<double>) (other) )[0]) )), global::System.Math.Min(((double) (((global::Array<double>) (this1) )[1]) ), ((double) (((global::Array<double>) (other) )[1]) )), global::System.Math.Min(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (other) )[2]) ))})) );
			}
		}
		
		
		public static global::Array<double> max(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::System.Math.Max(((double) (((global::Array<double>) (this1) )[0]) ), ((double) (((global::Array<double>) (other) )[0]) )), global::System.Math.Max(((double) (((global::Array<double>) (this1) )[1]) ), ((double) (((global::Array<double>) (other) )[1]) )), global::System.Math.Max(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (other) )[2]) ))})) );
			}
		}
		
		
		public static global::Array<double> roundTo(global::Array<double> this1, int decimals) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.roundTo(((global::Array<double>) (this1) )[0], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[1], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[2], decimals)})) );
			}
		}
		
		
		public static bool @equals(global::Array<double> this1, global::Array<double> other) {
			return global::thx.color._HunterLab.HunterLab_Impl_.nearEquals(this1, other, default(global::haxe.lang.Null<double>));
		}
		
		
		public static bool nearEquals(global::Array<double> this1, global::Array<double> other, global::haxe.lang.Null<double> tolerance) {
			unchecked {
				global::haxe.lang.Null<double> __temp_tolerance152 = ( ( ! (tolerance.hasValue) ) ? (new global::haxe.lang.Null<double>(1e-9, true)) : (tolerance) );
				if (( global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0], __temp_tolerance152) && global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1], __temp_tolerance152) )) {
					return global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2], __temp_tolerance152);
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static global::Array<double> withL(global::Array<double> this1, double newl) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{newl, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2]})) );
			}
		}
		
		
		public static global::Array<double> withA(global::Array<double> this1, double newa) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], newa, ((global::Array<double>) (this1) )[2]})) );
			}
		}
		
		
		public static global::Array<double> withB(global::Array<double> this1, double newb) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], newb})) );
			}
		}
		
		
		public static string toString(global::Array<double> this1) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("hunterlab(", global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[0])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[1])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[2])), ")");
			}
		}
		
		
		public static global::Array<double> toLab(global::Array<double> this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toLab(global::thx.color._HunterLab.HunterLab_Impl_.toXyz(this1));
		}
		
		
		public static global::Array<double> toLCh(global::Array<double> this1) {
			return global::thx.color._Lab.Lab_Impl_.toLCh(global::thx.color._HunterLab.HunterLab_Impl_.toLab(this1));
		}
		
		
		public static global::Array<double> toLuv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toLuv(global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmy(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmy(global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmyk(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmyk(global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCubeHelix(global::Array<double> this1) {
			unchecked {
				return global::thx.color._Rgbx.Rgbx_Impl_.toCubeHelixWithGamma(((global::Array<double>) (global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1)) ), ((double) (1) ));
			}
		}
		
		
		public static double toGrey(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toGrey(global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsl(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsl(global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsv(global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1));
		}
		
		
		public static int toRgb(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1));
		}
		
		
		public static int toRgba(global::Array<double> this1) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._HunterLab.HunterLab_Impl_.toRgbxa(this1));
		}
		
		
		public static global::Array<double> toRgbx(global::Array<double> this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toRgbx(global::thx.color._HunterLab.HunterLab_Impl_.toXyz(this1));
		}
		
		
		public static global::Array<double> toRgbxa(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgbxa(global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1));
		}
		
		
		public static double toTemperature(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toTemperature(global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toXyz(global::Array<double> this1) {
			unchecked {
				double x = ( ( ((global::Array<double>) (this1) )[1] / 17.5 ) * (( ((global::Array<double>) (this1) )[0] / 10.0 )) );
				double l10 = ( ((global::Array<double>) (this1) )[0] / 10.0 );
				double y = ( l10 * l10 );
				return ((global::Array<double>) (new global::Array<double>(new double[]{( (( x + y )) / 1.02 ), y, (  - ((( ( ( ((global::Array<double>) (this1) )[2] / 7.0 ) * (( ((global::Array<double>) (this1) )[0] / 10.0 )) ) - y )))  / 0.847 )})) );
			}
		}
		
		
		public static global::Array<double> toYuv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYuv(global::thx.color._HunterLab.HunterLab_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYxy(global::Array<double> this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toYxy(global::thx.color._HunterLab.HunterLab_Impl_.toXyz(this1));
		}
		
		
		public static double get_l(global::Array<double> this1) {
			return this1[0];
		}
		
		
		public static double get_a(global::Array<double> this1) {
			unchecked {
				return this1[1];
			}
		}
		
		
		public static double get_b(global::Array<double> this1) {
			unchecked {
				return this1[2];
			}
		}
		
		
	}
}


