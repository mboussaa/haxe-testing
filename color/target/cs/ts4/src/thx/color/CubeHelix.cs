// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._CubeHelix {
	public sealed class CubeHelix_Impl_ {
		
		static CubeHelix_Impl_() {
			global::thx.color._CubeHelix.CubeHelix_Impl_.A = -0.14861;
			global::thx.color._CubeHelix.CubeHelix_Impl_.B = 1.78277;
			global::thx.color._CubeHelix.CubeHelix_Impl_.C = -0.29227;
			global::thx.color._CubeHelix.CubeHelix_Impl_.D = -0.90649;
			global::thx.color._CubeHelix.CubeHelix_Impl_.E = 1.97294;
			global::thx.color._CubeHelix.CubeHelix_Impl_.ED = -1.7884503806;
			global::thx.color._CubeHelix.CubeHelix_Impl_.EB = 3.5172982438;
			global::thx.color._CubeHelix.CubeHelix_Impl_.BC_DA = -0.655763666799999867;
		}
		
		
		public static double A;
		
		public static double B;
		
		public static double C;
		
		public static double D;
		
		public static double E;
		
		public static double ED;
		
		public static double EB;
		
		public static double BC_DA;
		
		
		
		
		
		
		
		
		
		public static global::Array<double> create(double hue, double saturation, double lightness, global::haxe.lang.Null<double> gamma) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{hue, saturation, lightness, ( ( ! (gamma.hasValue) ) ? (1.0) : ((gamma).@value) )})) );
		}
		
		
		public static global::Array<double> fromFloats(global::Array<double> arr) {
			unchecked {
				if (( arr.length < 4 )) {
					global::thx.ArrayFloats.resize(arr, 3, default(global::haxe.lang.Null<double>));
					arr.push(((double) (1) ));
				}
				
				global::haxe.lang.Null<double> gamma = new global::haxe.lang.Null<double>(arr[3], true);
				return ((global::Array<double>) (new global::Array<double>(new double[]{arr[0], arr[1], arr[2], ( ( ! (gamma.hasValue) ) ? (1.0) : ((gamma).@value) )})) );
			}
		}
		
		
		public static global::Array<double> fromString(string color) {
			unchecked {
				global::thx.color.parse.ColorInfo info = global::thx.color.parse.ColorParser.parseColor(color);
				if (( null == info )) {
					return null;
				}
				
				try {
					if (string.Equals(info.name, "cubehelix")) {
						if (( info.channels.length >= 4 )) {
							return ((global::Array<double>) (global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 4, false)) );
						}
						else {
							return ((global::Array<double>) (global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false).concat(new global::Array<double>(new double[]{1.0}))) );
						}
						
					}
					else {
						return null;
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return null;
					}
					
				}
				
				
			}
		}
		
		
		public static global::Array<double> _new(global::Array<double> channels) {
			return ((global::Array<double>) (channels) );
		}
		
		
		public static object analogous(global::Array<double> this1, global::haxe.lang.Null<double> spread) {
			double __temp_spread136 = ( ( ! (spread.hasValue) ) ? (30.0) : ((spread).@value) );
			object __temp_stmt3 = null;
			{
				global::Array<double> __temp_odecl1 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1,  - (__temp_spread136) );
				global::Array<double> __temp_odecl2 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1, __temp_spread136);
				__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{__temp_odecl1, __temp_odecl2}, new int[]{}, new double[]{});
			}
			
			return ((object) (__temp_stmt3) );
		}
		
		
		public static global::Array<double> complement(global::Array<double> this1) {
			unchecked {
				return global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1, ((double) (180) ));
			}
		}
		
		
		public static global::Array<double> darker(global::Array<double> this1, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[2], ((double) (0) )), ((global::Array<double>) (this1) )[3]})) );
			}
		}
		
		
		public static global::Array<double> lighter(global::Array<double> this1, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[2], ((double) (1) )), ((global::Array<double>) (this1) )[3]})) );
			}
		}
		
		
		public static global::Array<double> interpolate(global::Array<double> this1, global::Array<double> other, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.interpolateAngle(t, ((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0], new global::haxe.lang.Null<double>(((double) (360) ), true)), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[3], ((global::Array<double>) (other) )[3])})) );
			}
		}
		
		
		public static global::Array<double> interpolateWidest(global::Array<double> this1, global::Array<double> other, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.interpolateAngleWidest(t, ((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0], new global::haxe.lang.Null<double>(((double) (360) ), true)), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[3], ((global::Array<double>) (other) )[3])})) );
			}
		}
		
		
		public static global::Array<double> min(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				double hue = global::System.Math.Min(((double) (((global::Array<double>) (this1) )[0]) ), ((double) (((global::Array<double>) (other) )[0]) ));
				double saturation = global::System.Math.Min(((double) (((global::Array<double>) (this1) )[1]) ), ((double) (((global::Array<double>) (other) )[1]) ));
				double lightness = global::System.Math.Min(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (other) )[2]) ));
				global::haxe.lang.Null<double> gamma = new global::haxe.lang.Null<double>(global::System.Math.Min(((double) (((global::Array<double>) (this1) )[3]) ), ((double) (((global::Array<double>) (other) )[3]) )), true);
				return ((global::Array<double>) (new global::Array<double>(new double[]{hue, saturation, lightness, ( ( ! (gamma.hasValue) ) ? (1.0) : ((gamma).@value) )})) );
			}
		}
		
		
		public static global::Array<double> max(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				double hue = global::System.Math.Max(((double) (((global::Array<double>) (this1) )[0]) ), ((double) (((global::Array<double>) (other) )[0]) ));
				double saturation = global::System.Math.Max(((double) (((global::Array<double>) (this1) )[1]) ), ((double) (((global::Array<double>) (other) )[1]) ));
				double lightness = global::System.Math.Max(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (other) )[2]) ));
				global::haxe.lang.Null<double> gamma = new global::haxe.lang.Null<double>(global::System.Math.Max(((double) (((global::Array<double>) (this1) )[3]) ), ((double) (((global::Array<double>) (other) )[3]) )), true);
				return ((global::Array<double>) (new global::Array<double>(new double[]{hue, saturation, lightness, ( ( ! (gamma.hasValue) ) ? (1.0) : ((gamma).@value) )})) );
			}
		}
		
		
		public static global::Array<double> normalize(global::Array<double> this1) {
			unchecked {
				double hue = global::thx.Floats.wrapCircular(((global::Array<double>) (this1) )[0], ((double) (360) ));
				double v = ((global::Array<double>) (this1) )[3];
				global::haxe.lang.Null<double> gamma = new global::haxe.lang.Null<double>(( (( v < 0 )) ? (((double) (0) )) : (( (( v > 1 )) ? (((double) (1) )) : (v) )) ), true);
				global::Array<double> this2 = null;
				double v1 = ((global::Array<double>) (this1) )[1];
				double tmp = ( (( v1 < 0 )) ? (((double) (0) )) : (( (( v1 > 1 )) ? (((double) (1) )) : (v1) )) );
				double v2 = ((global::Array<double>) (this1) )[2];
				this2 = new global::Array<double>(new double[]{hue, tmp, ( (( v2 < 0 )) ? (((double) (0) )) : (( (( v2 > 1 )) ? (((double) (1) )) : (v2) )) ), ( ( ! (gamma.hasValue) ) ? (1.0) : ((gamma).@value) )});
				return ((global::Array<double>) (this2) );
			}
		}
		
		
		public static global::Array<double> rotate(global::Array<double> this1, double angle) {
			return global::thx.color._CubeHelix.CubeHelix_Impl_.withHue(this1, ( ((global::Array<double>) (this1) )[0] + angle ));
		}
		
		
		public static global::Array<double> roundTo(global::Array<double> this1, int decimals) {
			unchecked {
				double hue = global::thx.Floats.roundTo(((global::Array<double>) (this1) )[0], decimals);
				double saturation = global::thx.Floats.roundTo(((global::Array<double>) (this1) )[1], decimals);
				double lightness = global::thx.Floats.roundTo(((global::Array<double>) (this1) )[2], decimals);
				global::haxe.lang.Null<double> gamma = new global::haxe.lang.Null<double>(global::thx.Floats.roundTo(((global::Array<double>) (this1) )[3], decimals), true);
				return ((global::Array<double>) (new global::Array<double>(new double[]{hue, saturation, lightness, ( ( ! (gamma.hasValue) ) ? (1.0) : ((gamma).@value) )})) );
			}
		}
		
		
		public static object split(global::Array<double> this1, global::haxe.lang.Null<double> spread) {
			double __temp_spread137 = ( ( ! (spread.hasValue) ) ? (144.0) : ((spread).@value) );
			object __temp_stmt3 = null;
			{
				global::Array<double> __temp_odecl1 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1,  - (__temp_spread137) );
				global::Array<double> __temp_odecl2 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1, __temp_spread137);
				__temp_stmt3 = new global::haxe.lang.DynamicObject(new int[]{21233, 21234}, new object[]{__temp_odecl1, __temp_odecl2}, new int[]{}, new double[]{});
			}
			
			return ((object) (__temp_stmt3) );
		}
		
		
		public static object square(global::Array<double> this1) {
			unchecked {
				return global::thx.color._CubeHelix.CubeHelix_Impl_.tetrad(this1, ((double) (90) ));
			}
		}
		
		
		public static object tetrad(global::Array<double> this1, double angle) {
			unchecked {
				object __temp_stmt5 = null;
				{
					global::Array<double> __temp_odecl1 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1, ((double) (0) ));
					global::Array<double> __temp_odecl2 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1, angle);
					global::Array<double> __temp_odecl3 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1, ((double) (180) ));
					global::Array<double> __temp_odecl4 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1, ( 180 + angle ));
					__temp_stmt5 = new global::haxe.lang.DynamicObject(new int[]{21233, 21234, 21235, 21236}, new object[]{__temp_odecl1, __temp_odecl2, __temp_odecl3, __temp_odecl4}, new int[]{}, new double[]{});
				}
				
				return ((object) (__temp_stmt5) );
			}
		}
		
		
		public static object triad(global::Array<double> this1) {
			unchecked {
				object __temp_stmt4 = null;
				{
					global::Array<double> __temp_odecl1 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1, ((double) (-120) ));
					global::Array<double> __temp_odecl2 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1, ((double) (0) ));
					global::Array<double> __temp_odecl3 = global::thx.color._CubeHelix.CubeHelix_Impl_.rotate(this1, ((double) (120) ));
					__temp_stmt4 = new global::haxe.lang.DynamicObject(new int[]{21233, 21234, 21235}, new object[]{__temp_odecl1, __temp_odecl2, __temp_odecl3}, new int[]{}, new double[]{});
				}
				
				return ((object) (__temp_stmt4) );
			}
		}
		
		
		public static global::Array<double> withGamma(global::Array<double> this1, double newgamma) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2], newgamma})) );
			}
		}
		
		
		public static global::Array<double> withHue(global::Array<double> this1, double newhue) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{newhue, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2], ((global::Array<double>) (this1) )[3]})) );
			}
		}
		
		
		public static global::Array<double> withLightness(global::Array<double> this1, double newlightness) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], newlightness, ((global::Array<double>) (this1) )[3]})) );
			}
		}
		
		
		public static global::Array<double> withSaturation(global::Array<double> this1, double newsaturation) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], newsaturation, ((global::Array<double>) (this1) )[2], ((global::Array<double>) (this1) )[3]})) );
			}
		}
		
		
		public static string toCss3(global::Array<double> this1) {
			return global::thx.color._CubeHelix.CubeHelix_Impl_.toString(this1);
		}
		
		
		public static string toString(global::Array<double> this1) {
			unchecked {
				if (( ((global::Array<double>) (this1) )[3] != 1 )) {
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("cubehelix(", global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[0])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[1])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[2])), ", "), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[3])), ")");
				}
				else {
					return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("cubehelix(", global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[0])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[1])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[2])), ")");
				}
				
			}
		}
		
		
		public static bool @equals(global::Array<double> this1, global::Array<double> other) {
			return global::thx.color._CubeHelix.CubeHelix_Impl_.nearEquals(this1, other, default(global::haxe.lang.Null<double>));
		}
		
		
		public static bool nearEquals(global::Array<double> this1, global::Array<double> other, global::haxe.lang.Null<double> tolerance) {
			unchecked {
				global::haxe.lang.Null<double> __temp_tolerance138 = ( ( ! (tolerance.hasValue) ) ? (new global::haxe.lang.Null<double>(1e-9, true)) : (tolerance) );
				if (( ( ( global::System.Math.Abs(((double) (global::thx.Floats.angleDifference(((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0], new global::haxe.lang.Null<double>(360.0, true))) )) <= (__temp_tolerance138).@value ) && global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1], __temp_tolerance138) ) && global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2], __temp_tolerance138) )) {
					return global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[3], ((global::Array<double>) (other) )[3], __temp_tolerance138);
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static global::Array<double> toLab(global::Array<double> this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toLab(global::thx.color._CubeHelix.CubeHelix_Impl_.toXyz(this1));
		}
		
		
		public static global::Array<double> toLCh(global::Array<double> this1) {
			return global::thx.color._Lab.Lab_Impl_.toLCh(global::thx.color._CubeHelix.CubeHelix_Impl_.toLab(this1));
		}
		
		
		public static global::Array<double> toLuv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toLuv(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmy(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmy(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmyk(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmyk(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static double toGrey(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toGrey(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsl(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsl(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsv(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHunterLab(global::Array<double> this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toHunterLab(global::thx.color._CubeHelix.CubeHelix_Impl_.toXyz(this1));
		}
		
		
		public static int toRgb(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static int toRgba(global::Array<double> this1) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbxa(this1));
		}
		
		
		public static global::Array<double> toRgbx(global::Array<double> this1) {
			unchecked {
				double h = ( (global::System.Double.IsNaN(((double) (((global::Array<double>) (this1) )[0]) ))) ? (((double) (0) )) : (( ( (( ((global::Array<double>) (this1) )[0] + 120 )) / 180 ) * global::Math.PI )) );
				double l = global::System.Math.Pow(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (this1) )[3]) ));
				double a = ( (global::System.Double.IsNaN(((double) (((global::Array<double>) (this1) )[1]) ))) ? (((double) (0) )) : (( ( ((global::Array<double>) (this1) )[1] * l ) * (( 1 - l )) )) );
				double cosh = global::System.Math.Cos(((double) (h) ));
				double sinh = global::System.Math.Sin(((double) (h) ));
				return ((global::Array<double>) (new global::Array<double>(new double[]{( l + ( a * (( ( -0.14861 * cosh ) + ( 1.78277 * sinh ) )) ) ), ( l + ( a * (( ( -0.29227 * cosh ) + ( -0.90649 * sinh ) )) ) ), ( l + ( a * (( 1.97294 * cosh )) ) )})) );
			}
		}
		
		
		public static global::Array<double> toRgbxa(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgbxa(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static double toTemperature(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toTemperature(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toXyz(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toXyz(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYuv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYuv(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYxy(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYxy(global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbx(this1));
		}
		
		
		public static double get_hue(global::Array<double> this1) {
			return this1[0];
		}
		
		
		public static double get_saturation(global::Array<double> this1) {
			unchecked {
				return this1[1];
			}
		}
		
		
		public static double get_lightness(global::Array<double> this1) {
			unchecked {
				return this1[2];
			}
		}
		
		
		public static double get_gamma(global::Array<double> this1) {
			unchecked {
				return this1[3];
			}
		}
		
		
	}
}


