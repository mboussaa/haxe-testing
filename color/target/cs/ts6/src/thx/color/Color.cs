// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class Color : global::haxe.lang.HxObject {
		
		static Color() {
			global::thx.color.Color.namedColors = new global::haxe.ds.StringMap<object>();
		}
		
		
		public Color(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Color() {
			global::thx.color.Color.__hx_ctor_thx_color_Color(this);
		}
		
		
		public static void __hx_ctor_thx_color_Color(global::thx.color.Color __temp_me135) {
		}
		
		
		public static global::haxe.ds.StringMap<object> namedColors;
		
		public static global::Array<double> parse(string color) {
			unchecked {
				global::thx.color.parse.ColorInfo info = global::thx.color.parse.ColorParser.parseHex(color);
				if (( null == info )) {
					info = global::thx.color.parse.ColorParser.parseColor(color);
				}
				
				if (( null == info )) {
					global::Array<double> rgb = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) ((global::thx.color.Color.namedColors.@get(((string) (color) ))).@value) ))) );
					if (( null == rgb )) {
						return null;
					}
					else {
						return global::thx.color._Rgbx.Rgbx_Impl_.toRgbxa(rgb);
					}
					
				}
				
				try {
					switch (info.name) {
						case "ciexyz":
						case "xyz":
						{
							return global::thx.color._Xyz.Xyz_Impl_.toRgbxa(global::thx.color._Xyz.Xyz_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)));
						}
						
						
						case "cmy":
						{
							return global::thx.color._Cmy.Cmy_Impl_.toRgbxa(global::thx.color._Cmy.Cmy_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)));
						}
						
						
						case "cmyk":
						{
							return global::thx.color._Cmyk.Cmyk_Impl_.toRgbxa(global::thx.color._Cmyk.Cmyk_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 4, false)));
						}
						
						
						case "cubehelix":
						{
							return global::thx.color._CubeHelix.CubeHelix_Impl_.toRgbxa(global::thx.color._CubeHelix.CubeHelix_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)));
						}
						
						
						case "gray":
						case "grey":
						{
							return global::thx.color._Grey.Grey_Impl_.toRgbxa(((double) (global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 1, false)[0]) ));
						}
						
						
						case "hcl":
						{
							global::Array<double> c = global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false);
							return global::thx.color._LCh.LCh_Impl_.toRgbxa(((global::Array<double>) (new global::Array<double>(new double[]{c[2], c[1], c[0]})) ));
						}
						
						
						case "hsb":
						case "hsv":
						{
							return global::thx.color._Hsv.Hsv_Impl_.toRgbxa(global::thx.color._Hsv.Hsv_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)));
						}
						
						
						case "hsl":
						{
							return global::thx.color._Hsl.Hsl_Impl_.toRgbxa(global::thx.color._Hsl.Hsl_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)));
						}
						
						
						case "hsla":
						{
							return global::thx.color._Hsla.Hsla_Impl_.toRgbxa(global::thx.color._Hsla.Hsla_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 4, false)));
						}
						
						
						case "hsva":
						{
							return global::thx.color._Hsva.Hsva_Impl_.toRgbxa(global::thx.color._Hsva.Hsva_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 4, false)));
						}
						
						
						case "hunterlab":
						{
							return global::thx.color._HunterLab.HunterLab_Impl_.toRgbxa(global::thx.color._HunterLab.HunterLab_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 4, false)));
						}
						
						
						case "cielab":
						case "lab":
						{
							return global::thx.color._Lab.Lab_Impl_.toRgbxa(global::thx.color._Lab.Lab_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)));
						}
						
						
						case "cielch":
						case "lch":
						{
							return global::thx.color._LCh.LCh_Impl_.toRgbxa(global::thx.color._LCh.LCh_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)));
						}
						
						
						case "cieluv":
						case "luv":
						{
							return global::thx.color._Luv.Luv_Impl_.toRgbxa(global::thx.color._Luv.Luv_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)));
						}
						
						
						case "rgb":
						{
							return global::thx.color._Rgbx.Rgbx_Impl_.toRgbxa(global::thx.color._Rgbx.Rgbx_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, true)));
						}
						
						
						case "rgba":
						{
							return global::thx.color._Rgbxa.Rgbxa_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 4, true));
						}
						
						
						case "yuv":
						{
							return global::thx.color._Yuv.Yuv_Impl_.toRgbxa(global::thx.color._Yuv.Yuv_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)));
						}
						
						
						case "yxy":
						{
							return global::thx.color._Yxy.Yxy_Impl_.toRgbxa(global::thx.color._Yxy.Yxy_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)));
						}
						
						
						default:
						{
							return null;
						}
						
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return null;
					}
					
				}
				
				
			}
		}
		
		
		public static void addRgbPalette(global::haxe.ds.StringMap<int> palette) {
			global::thx.Maps.tuples<object, int>(((global::haxe.IMap<object, int>) (global::haxe.IMap__Statics_.__hx_cast<object, int>(((global::haxe.IMap) (palette) ))) )).map<object>(((global::haxe.lang.Function) (( (( global::thx.color.Color_addRgbPalette_72__Fun.__hx_current != null )) ? (global::thx.color.Color_addRgbPalette_72__Fun.__hx_current) : (global::thx.color.Color_addRgbPalette_72__Fun.__hx_current = ((global::thx.color.Color_addRgbPalette_72__Fun) (new global::thx.color.Color_addRgbPalette_72__Fun()) )) )) ));
		}
		
		
		public static void addLabPalette(global::haxe.ds.StringMap<object> palette) {
			global::thx.Maps.tuples<object, object>(((global::haxe.IMap<object, object>) (global::haxe.IMap__Statics_.__hx_cast<object, object>(((global::haxe.IMap) (palette) ))) )).map<object>(((global::haxe.lang.Function) (( (( global::thx.color.Color_addLabPalette_75__Fun.__hx_current != null )) ? (global::thx.color.Color_addLabPalette_75__Fun.__hx_current) : (global::thx.color.Color_addLabPalette_75__Fun.__hx_current = ((global::thx.color.Color_addLabPalette_75__Fun) (new global::thx.color.Color_addLabPalette_75__Fun()) )) )) ));
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.color.Color(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.color.Color();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class Color_addRgbPalette_72__Fun : global::haxe.lang.Function {
		
		public Color_addRgbPalette_72__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.Color_addRgbPalette_72__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (( (( __fn_dyn1 == null )) ? (null) : (((object) (__fn_dyn1) )) )) );
			global::thx.color.Color.namedColors.@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(((object) (_) ), "_0", 21233, true)), ((object) (global::thx.color._Rgb.Rgb_Impl_.toRgbx(((int) (global::haxe.lang.Runtime.getField_f(((object) (_) ), "_1", 21234, true)) ))) ));
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class Color_addLabPalette_75__Fun : global::haxe.lang.Function {
		
		public Color_addLabPalette_75__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.Color_addLabPalette_75__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object _ = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (( (( __fn_dyn1 == null )) ? (null) : (((object) (__fn_dyn1) )) )) );
			global::thx.color.Color.namedColors.@set(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(((object) (_) ), "_0", 21233, true)), ((object) (global::thx.color._Lab.Lab_Impl_.toRgbx(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (global::haxe.lang.Runtime.getField(((object) (_) ), "_1", 21234, true)) ))) ))) ));
			return null;
		}
		
		
	}
}


