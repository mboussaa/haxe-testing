// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion : global::haxe.lang.HxObject {
		
		public TestConversion(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestConversion(int i) {
			global::thx.color.TestConversion.__hx_ctor_thx_color_TestConversion(this, i);
		}
		
		
		public static void __hx_ctor_thx_color_TestConversion(global::thx.color.TestConversion __temp_me161, int i) {
			__temp_me161.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.color.TestConversion(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.color.TestConversion(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testLab() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testLab_16__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testLab_16__Fun.__hx_current) : (global::thx.color.TestConversion_testLab_16__Fun.__hx_current = ((global::thx.color.TestConversion_testLab_16__Fun) (new global::thx.color.TestConversion_testLab_16__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testLCh() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testLCh_26__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testLCh_26__Fun.__hx_current) : (global::thx.color.TestConversion_testLCh_26__Fun.__hx_current = ((global::thx.color.TestConversion_testLCh_26__Fun) (new global::thx.color.TestConversion_testLCh_26__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testLuv() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testLuv_36__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testLuv_36__Fun.__hx_current) : (global::thx.color.TestConversion_testLuv_36__Fun.__hx_current = ((global::thx.color.TestConversion_testLuv_36__Fun) (new global::thx.color.TestConversion_testLuv_36__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testCmy() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testCmy_46__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testCmy_46__Fun.__hx_current) : (global::thx.color.TestConversion_testCmy_46__Fun.__hx_current = ((global::thx.color.TestConversion_testCmy_46__Fun) (new global::thx.color.TestConversion_testCmy_46__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testCmyk() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testCmyk_56__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testCmyk_56__Fun.__hx_current) : (global::thx.color.TestConversion_testCmyk_56__Fun.__hx_current = ((global::thx.color.TestConversion_testCmyk_56__Fun) (new global::thx.color.TestConversion_testCmyk_56__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testCubehelix() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testCubehelix_66__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testCubehelix_66__Fun.__hx_current) : (global::thx.color.TestConversion_testCubehelix_66__Fun.__hx_current = ((global::thx.color.TestConversion_testCubehelix_66__Fun) (new global::thx.color.TestConversion_testCubehelix_66__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testHsl() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testHsl_76__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testHsl_76__Fun.__hx_current) : (global::thx.color.TestConversion_testHsl_76__Fun.__hx_current = ((global::thx.color.TestConversion_testHsl_76__Fun) (new global::thx.color.TestConversion_testHsl_76__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testHsv() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testHsv_86__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testHsv_86__Fun.__hx_current) : (global::thx.color.TestConversion_testHsv_86__Fun.__hx_current = ((global::thx.color.TestConversion_testHsv_86__Fun) (new global::thx.color.TestConversion_testHsv_86__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testHunterLab() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testHunterLab_96__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testHunterLab_96__Fun.__hx_current) : (global::thx.color.TestConversion_testHunterLab_96__Fun.__hx_current = ((global::thx.color.TestConversion_testHunterLab_96__Fun) (new global::thx.color.TestConversion_testHunterLab_96__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testRgbx() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testRgbx_106__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testRgbx_106__Fun.__hx_current) : (global::thx.color.TestConversion_testRgbx_106__Fun.__hx_current = ((global::thx.color.TestConversion_testRgbx_106__Fun) (new global::thx.color.TestConversion_testRgbx_106__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testXyz() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testXyz_116__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testXyz_116__Fun.__hx_current) : (global::thx.color.TestConversion_testXyz_116__Fun.__hx_current = ((global::thx.color.TestConversion_testXyz_116__Fun) (new global::thx.color.TestConversion_testXyz_116__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testYuv() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testYuv_126__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testYuv_126__Fun.__hx_current) : (global::thx.color.TestConversion_testYuv_126__Fun.__hx_current = ((global::thx.color.TestConversion_testYuv_126__Fun) (new global::thx.color.TestConversion_testYuv_126__Fun()) )) )) ));
			}
			
		}
		
		
		public virtual void testYxy() {
			int _g1 = 0;
			int _g = this.x;
			while (( _g1 < _g )) {
				 ++ _g1;
				global::thx.Iterators.map<object, object>(((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<int>(((global::haxe.ds.StringMap<int>) (global::thx.color.palettes.Web.names) ))) ), ((global::haxe.lang.Function) (( (( global::thx.color.TestConversion_testYxy_136__Fun.__hx_current != null )) ? (global::thx.color.TestConversion_testYxy_136__Fun.__hx_current) : (global::thx.color.TestConversion_testYxy_136__Fun.__hx_current = ((global::thx.color.TestConversion_testYxy_136__Fun) (new global::thx.color.TestConversion_testYxy_136__Fun()) )) )) ));
			}
			
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1036691592:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testYxy", 1036691592)) );
					}
					
					
					case 1036690920:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testYuv", 1036690920)) );
					}
					
					
					case 1036642087:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testXyz", 1036642087)) );
					}
					
					
					case 1322997309:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testRgbx", 1322997309)) );
					}
					
					
					case 1007098299:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testHunterLab", 1007098299)) );
					}
					
					
					case 1035845081:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testHsv", 1035845081)) );
					}
					
					
					case 1035845071:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testHsl", 1035845071)) );
					}
					
					
					case 1554536631:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCubehelix", 1554536631)) );
					}
					
					
					case 1156957294:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCmyk", 1156957294)) );
					}
					
					
					case 1035595101:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCmy", 1035595101)) );
					}
					
					
					case 1036044443:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLuv", 1036044443)) );
					}
					
					
					case 1036033279:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLCh", 1036033279)) );
					}
					
					
					case 1036039963:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testLab", 1036039963)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1036691592:
					{
						this.testYxy();
						break;
					}
					
					
					case 1036690920:
					{
						this.testYuv();
						break;
					}
					
					
					case 1036642087:
					{
						this.testXyz();
						break;
					}
					
					
					case 1322997309:
					{
						this.testRgbx();
						break;
					}
					
					
					case 1007098299:
					{
						this.testHunterLab();
						break;
					}
					
					
					case 1035845081:
					{
						this.testHsv();
						break;
					}
					
					
					case 1035845071:
					{
						this.testHsl();
						break;
					}
					
					
					case 1554536631:
					{
						this.testCubehelix();
						break;
					}
					
					
					case 1156957294:
					{
						this.testCmyk();
						break;
					}
					
					
					case 1035595101:
					{
						this.testCmy();
						break;
					}
					
					
					case 1036044443:
					{
						this.testLuv();
						break;
					}
					
					
					case 1036033279:
					{
						this.testLCh();
						break;
					}
					
					
					case 1036039963:
					{
						this.testLab();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testLab_16__Fun : global::haxe.lang.Function {
		
		public TestConversion_testLab_16__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testLab_16__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._Lab.Lab_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toLab(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLab", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testLCh_26__Fun : global::haxe.lang.Function {
		
		public TestConversion_testLCh_26__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testLCh_26__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._LCh.LCh_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toLCh(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLCh", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testLuv_36__Fun : global::haxe.lang.Function {
		
		public TestConversion_testLuv_36__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testLuv_36__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._Luv.Luv_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toLuv(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testLuv", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testCmy_46__Fun : global::haxe.lang.Function {
		
		public TestConversion_testCmy_46__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testCmy_46__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._Cmy.Cmy_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toCmy(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCmy", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testCmyk_56__Fun : global::haxe.lang.Function {
		
		public TestConversion_testCmyk_56__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testCmyk_56__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._Cmyk.Cmyk_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toCmyk(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCmyk", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testCubehelix_66__Fun : global::haxe.lang.Function {
		
		public TestConversion_testCubehelix_66__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testCubehelix_66__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._CubeHelix.CubeHelix_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toCubeHelix(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCubehelix", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testHsl_76__Fun : global::haxe.lang.Function {
		
		public TestConversion_testHsl_76__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testHsl_76__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._Hsl.Hsl_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toHsl(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHsl", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (80) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testHsv_86__Fun : global::haxe.lang.Function {
		
		public TestConversion_testHsv_86__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testHsv_86__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._Hsv.Hsv_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toHsv(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHsv", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (90) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testHunterLab_96__Fun : global::haxe.lang.Function {
		
		public TestConversion_testHunterLab_96__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testHunterLab_96__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._HunterLab.HunterLab_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toHunterLab(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testHunterLab", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (100) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testRgbx_106__Fun : global::haxe.lang.Function {
		
		public TestConversion_testRgbx_106__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testRgbx_106__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toRgbx(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testRgbx", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (110) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testXyz_116__Fun : global::haxe.lang.Function {
		
		public TestConversion_testXyz_116__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testXyz_116__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._Xyz.Xyz_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toXyz(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testXyz", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (120) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testYuv_126__Fun : global::haxe.lang.Function {
		
		public TestConversion_testYuv_126__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testYuv_126__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._Yuv.Yuv_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toYuv(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testYuv", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (130) )}));
				return null;
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestConversion_testYxy_136__Fun : global::haxe.lang.Function {
		
		public TestConversion_testYxy_136__Fun() : base(1, 0) {
		}
		
		
		public static global::thx.color.TestConversion_testYxy_136__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				string name = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
				int expected = (global::thx.color.palettes.Web.names.@get(((string) (name) ))).@value;
				int test = global::thx.color._Yxy.Yxy_Impl_.toRgb(global::thx.color._Rgb.Rgb_Impl_.toYxy(expected));
				global::utest.Assert.@equals(global::thx.color._Rgb.Rgb_Impl_.toString(expected), global::thx.color._Rgb.Rgb_Impl_.toString(test), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(expected)), " but was "), global::thx.color._Rgb.Rgb_Impl_.toString(test)), " for "), name), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testYxy", "thx.color.TestConversion", "TestConversion.hx"}, new int[]{1981972957}, new double[]{((double) (140) )}));
				return null;
			}
		}
		
		
	}
}


