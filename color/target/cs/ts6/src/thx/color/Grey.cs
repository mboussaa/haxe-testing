// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._Grey {
	public sealed class Grey_Impl_ {
		
		static Grey_Impl_() {
			unchecked {
				object __temp_stmt1 = null;
				{
					double this1 = ((double) (0) );
					__temp_stmt1 = ((double) (this1) );
				}
				
				global::thx.color._Grey.Grey_Impl_.black = ((double) (global::haxe.lang.Runtime.toDouble(__temp_stmt1)) );
				object __temp_stmt2 = null;
				{
					double this1 = ((double) (1) );
					__temp_stmt2 = ((double) (this1) );
				}
				
				global::thx.color._Grey.Grey_Impl_.white = ((double) (global::haxe.lang.Runtime.toDouble(__temp_stmt2)) );
			}
		}
		
		
		public static double black;
		
		public static double white;
		
		public static double create(double v) {
			return ((double) (v) );
		}
		
		
		public static global::haxe.lang.Null<double> fromString(string color) {
			unchecked {
				global::thx.color.parse.ColorInfo info = global::thx.color.parse.ColorParser.parseColor(color);
				if (( null == info )) {
					return default(global::haxe.lang.Null<double>);
				}
				
				try {
					switch (info.name) {
						case "gray":
						case "grey":
						{
							return new global::haxe.lang.Null<double>(((double) (global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 1, false)[0]) ), true);
						}
						
						
						default:
						{
							return default(global::haxe.lang.Null<double>);
						}
						
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return default(global::haxe.lang.Null<double>);
					}
					
				}
				
				
			}
		}
		
		
		
		
		public static double _new(double grey) {
			return ((double) (grey) );
		}
		
		
		public static double contrast(double this1) {
			if (( this1 > 0.5 )) {
				return global::thx.color._Grey.Grey_Impl_.black;
			}
			else {
				return global::thx.color._Grey.Grey_Impl_.white;
			}
			
		}
		
		
		public static double darker(double this1, double t) {
			return ((double) (global::thx.Floats.interpolate(t, ((double) (this1) ), ((double) (0) ))) );
		}
		
		
		public static double lighter(double this1, double t) {
			unchecked {
				return ((double) (global::thx.Floats.interpolate(t, ((double) (this1) ), ((double) (1) ))) );
			}
		}
		
		
		public static double interpolate(double this1, double other, double t) {
			return ((double) (global::thx.Floats.interpolate(t, ((double) (this1) ), ((double) (other) ))) );
		}
		
		
		public static double min(double this1, double other) {
			return ((double) (global::System.Math.Min(((double) (this1) ), ((double) (other) ))) );
		}
		
		
		public static double max(double this1, double other) {
			return ((double) (global::System.Math.Max(((double) (this1) ), ((double) (other) ))) );
		}
		
		
		public static double normalize(double this1) {
			unchecked {
				return ((double) (( (( this1 < 0 )) ? (((double) (0) )) : (( (( this1 > 1 )) ? (((double) (1) )) : (this1) )) )) );
			}
		}
		
		
		public static double roundTo(double this1, int decimals) {
			return ((double) (global::thx.Floats.roundTo(((double) (this1) ), decimals)) );
		}
		
		
		public static string toString(double this1) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("grey(", global::haxe.lang.Runtime.toString(( ((double) (this1) ) * 100 ))), "%)");
			}
		}
		
		
		public static bool @equals(double this1, double other) {
			return global::thx.Floats.nearEquals(this1, other, default(global::haxe.lang.Null<double>));
		}
		
		
		public static bool nearEquals(double this1, double other, global::haxe.lang.Null<double> tolerance) {
			global::haxe.lang.Null<double> __temp_tolerance139 = ( ( ! (tolerance.hasValue) ) ? (new global::haxe.lang.Null<double>(1e-9, true)) : (tolerance) );
			return global::thx.Floats.nearEquals(this1, ((double) (other) ), __temp_tolerance139);
		}
		
		
		public static double get_grey(double this1) {
			return this1;
		}
		
		
		public static global::Array<double> toLab(double this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toLab(global::thx.color._Grey.Grey_Impl_.toXyz(this1));
		}
		
		
		public static global::Array<double> toLCh(double this1) {
			return global::thx.color._Lab.Lab_Impl_.toLCh(global::thx.color._Grey.Grey_Impl_.toLab(this1));
		}
		
		
		public static global::Array<double> toLuv(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toLuv(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmy(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmy(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmyk(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmyk(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCubeHelix(double this1) {
			unchecked {
				return global::thx.color._Rgbx.Rgbx_Impl_.toCubeHelixWithGamma(((global::Array<double>) (global::thx.color._Grey.Grey_Impl_.toRgbx(this1)) ), ((double) (1) ));
			}
		}
		
		
		public static global::Array<double> toHsl(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsl(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsv(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsv(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHunterLab(double this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toHunterLab(global::thx.color._Grey.Grey_Impl_.toXyz(this1));
		}
		
		
		public static int toRgb(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
		public static int toRgba(double this1) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._Grey.Grey_Impl_.toRgbxa(this1));
		}
		
		
		public static global::Array<double> toRgbx(double this1) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{((double) (this1) ), ((double) (this1) ), ((double) (this1) )})) );
		}
		
		
		public static global::Array<double> toRgbxa(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgbxa(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
		public static double toTemperature(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toTemperature(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYuv(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYuv(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toXyz(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toXyz(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYxy(double this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYxy(global::thx.color._Grey.Grey_Impl_.toRgbx(this1));
		}
		
		
	}
}


