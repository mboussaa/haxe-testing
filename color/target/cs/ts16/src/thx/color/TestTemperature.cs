// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestTemperature : global::haxe.lang.HxObject {
		
		public TestTemperature(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestTemperature(int i) {
			global::thx.color.TestTemperature.__hx_ctor_thx_color_TestTemperature(this, i);
		}
		
		
		public static void __hx_ctor_thx_color_TestTemperature(global::thx.color.TestTemperature __temp_me160, int i) {
			__temp_me160.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.color.TestTemperature(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.color.TestTemperature(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testBasics() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					double this1 = ((double) (5000) );
					global::utest.Assert.@equals(5000, ((double) (this1) ), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestTemperature", "TestTemperature.hx"}, new int[]{1981972957}, new double[]{((double) (14) )}));
				}
				
			}
		}
		
		
		public virtual void testStrings() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					double this1 = ((double) (5000) );
					global::utest.Assert.@equals("temperature(5000)", global::thx.color._Temperature.Temperature_Impl_.toString(((double) (this1) )), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStrings", "thx.color.TestTemperature", "TestTemperature.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
				}
				
			}
		}
		
		
		public virtual void testFromString() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					double this1 = ((double) (5000) );
					global::utest.Assert.isTrue(global::thx.color._Temperature.Temperature_Impl_.@equals(((double) (this1) ), (global::thx.color._Temperature.Temperature_Impl_.fromString("temperature(5000)")).@value), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestTemperature", "TestTemperature.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1952928973:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromString", 1952928973)) );
					}
					
					
					case 901545040:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testStrings", 901545040)) );
					}
					
					
					case 1847555063:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBasics", 1847555063)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1952928973:
					{
						this.testFromString();
						break;
					}
					
					
					case 901545040:
					{
						this.testStrings();
						break;
					}
					
					
					case 1847555063:
					{
						this.testBasics();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


