// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestRgb : global::haxe.lang.HxObject {
		
		public TestRgb(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestRgb(int i) {
			global::thx.color.TestRgb.__hx_ctor_thx_color_TestRgb(this, i);
		}
		
		
		public static void __hx_ctor_thx_color_TestRgb(global::thx.color.TestRgb __temp_me160, int i) {
			__temp_me160.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.color.TestRgb(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.color.TestRgb(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testBasics() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					int red = ((int) (16711680) );
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_red(red), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (15) )}));
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_green(red), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_blue(red), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (17) )}));
					int green = ((int) (65280) );
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_red(green), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (20) )}));
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_green(green), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (21) )}));
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_blue(green), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
					int blue = ((int) (255) );
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_red(blue), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_green(blue), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (26) )}));
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_blue(blue), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (27) )}));
					int cyan = ((int) (65535) );
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_red(cyan), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (30) )}));
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_green(cyan), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (31) )}));
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_blue(cyan), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
					int yellow = ((int) (16776960) );
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_red(yellow), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_green(yellow), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_blue(yellow), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
					int magenta = ((int) (16711935) );
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_red(magenta), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_green(magenta), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_blue(magenta), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (42) )}));
					int white = ((int) (16777215) );
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_red(white), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (45) )}));
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_green(white), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
					global::utest.Assert.@equals(255, global::thx.color._Rgb.Rgb_Impl_.get_blue(white), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
					int black = ((int) (0) );
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_red(black), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (50) )}));
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_green(black), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (51) )}));
					global::utest.Assert.@equals(0, global::thx.color._Rgb.Rgb_Impl_.get_blue(black), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (52) )}));
				}
				
			}
		}
		
		
		public virtual void testStrings() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					int color = ((int) (43775) );
					global::utest.Assert.@equals("#00AAFF", global::thx.color._Rgb.Rgb_Impl_.toHex(color, null), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStrings", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (58) )}));
					global::utest.Assert.@equals("#00AAFF", global::thx.color._Rgb.Rgb_Impl_.toString(color), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStrings", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (59) )}));
					global::utest.Assert.@equals("rgb(0,170,255)", global::thx.color._Rgb.Rgb_Impl_.toCss3(color), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStrings", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (60) )}));
				}
				
			}
		}
		
		
		public virtual void testFromString() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isTrue(global::thx.color._Rgb.Rgb_Impl_.@equals(((int) (16711680) ), (global::thx.color._Rgb.Rgb_Impl_.fromString("#ff0000")).@value), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (65) )}));
					global::utest.Assert.isTrue(global::thx.color._Rgb.Rgb_Impl_.@equals(((int) (16711680) ), (global::thx.color._Rgb.Rgb_Impl_.fromString("#f00")).@value), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (66) )}));
					global::utest.Assert.isTrue(global::thx.color._Rgb.Rgb_Impl_.@equals(((int) (16711680) ), (global::thx.color._Rgb.Rgb_Impl_.fromString("rgb(255,0,0)")).@value), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (67) )}));
					global::utest.Assert.isTrue(global::thx.color._Rgb.Rgb_Impl_.@equals(((int) (16711680) ), (global::thx.color._Rgb.Rgb_Impl_.fromString("rgb(100%,0,0)")).@value), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (68) )}));
					global::utest.Assert.isTrue(global::thx.color._Rgba.Rgba_Impl_.@equals(((int) (16711935) ), (global::thx.color._Rgba.Rgba_Impl_.fromString("#ff00ff00")).@value), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (70) )}));
					global::utest.Assert.isTrue(global::thx.color._Rgba.Rgba_Impl_.@equals(((int) (16711935) ), (global::thx.color._Rgba.Rgba_Impl_.fromString("#f0f0")).@value), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (71) )}));
					global::utest.Assert.isTrue(global::thx.color._Rgba.Rgba_Impl_.@equals(((int) (16711935) ), (global::thx.color._Rgba.Rgba_Impl_.fromString("rgba(0,255,0,1)")).@value), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (72) )}));
					global::utest.Assert.isTrue(global::thx.color._Rgba.Rgba_Impl_.@equals(((int) (16711935) ), (global::thx.color._Rgba.Rgba_Impl_.fromString("rgba(0,100%,0,1)")).@value), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (73) )}));
				}
				
			}
		}
		
		
		public virtual void testCombineColor() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					int combined = global::thx.color._Rgba.Rgba_Impl_.combineColor(global::thx.color._Rgb.Rgb_Impl_.withAlphaf(global::thx.color._Rgb.Rgb_Impl_.fromInts(new global::Array<int>(new int[]{255, 0, 0})), .42), global::thx.color._Rgb.Rgb_Impl_.fromInts(new global::Array<int>(new int[]{153, 200, 224})));
					int result = global::thx.color._Rgb.Rgb_Impl_.fromInts(new global::Array<int>(new int[]{196, 116, 130}));
					global::utest.Assert.isTrue(global::thx.color._Rgb.Rgb_Impl_.@equals(result, combined), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("expected ", global::thx.color._Rgb.Rgb_Impl_.toString(result)), " but it is "), global::thx.color._Rgb.Rgb_Impl_.toString(combined)), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testCombineColor", "thx.color.TestRgb", "TestRgb.hx"}, new int[]{1981972957}, new double[]{((double) (83) )}));
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1633063382:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testCombineColor", 1633063382)) );
					}
					
					
					case 1952928973:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromString", 1952928973)) );
					}
					
					
					case 901545040:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testStrings", 901545040)) );
					}
					
					
					case 1847555063:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBasics", 1847555063)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1633063382:
					{
						this.testCombineColor();
						break;
					}
					
					
					case 1952928973:
					{
						this.testFromString();
						break;
					}
					
					
					case 901545040:
					{
						this.testStrings();
						break;
					}
					
					
					case 1847555063:
					{
						this.testBasics();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


