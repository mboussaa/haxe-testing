// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._Rgbxa {
	public sealed class Rgbxa_Impl_ {
		
		public static global::Array<double> create(double red, double green, double blue, double alpha) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{red, green, blue, alpha})) );
		}
		
		
		public static global::Array<double> fromFloats(global::Array<double> arr) {
			unchecked {
				global::thx.ArrayFloats.resize(arr, 4, default(global::haxe.lang.Null<double>));
				return ((global::Array<double>) (new global::Array<double>(new double[]{arr[0], arr[1], arr[2], arr[3]})) );
			}
		}
		
		
		public static global::Array<double> fromInts(global::Array<int> arr) {
			unchecked {
				global::thx.ArrayInts.resize(arr, 4, default(global::haxe.lang.Null<int>));
				return ((global::Array<double>) (new global::Array<double>(new double[]{( arr[0] / 255.0 ), ( arr[1] / 255.0 ), ( arr[2] / 255.0 ), ( arr[3] / 255.0 )})) );
			}
		}
		
		
		public static global::Array<double> fromInt(int @value) {
			unchecked {
				int rgba = @value;
				return ((global::Array<double>) (new global::Array<double>(new double[]{( ((double) ((( ( ((int) (rgba) ) >> 24 ) & 255 ))) ) / 255 ), ( ((double) ((( ( ((int) (rgba) ) >> 16 ) & 255 ))) ) / 255 ), ( ((double) ((( ( ((int) (rgba) ) >> 8 ) & 255 ))) ) / 255 ), ( ((double) ((( ((int) (rgba) ) & 255 ))) ) / 255 )})) );
			}
		}
		
		
		public static global::Array<double> fromString(string color) {
			unchecked {
				global::thx.color.parse.ColorInfo info = global::thx.color.parse.ColorParser.parseHex(color);
				if (( null == info )) {
					info = global::thx.color.parse.ColorParser.parseColor(color);
				}
				
				if (( null == info )) {
					return null;
				}
				
				try {
					switch (info.name) {
						case "rgb":
						{
							return global::thx.color._Rgbx.Rgbx_Impl_.toRgbxa(global::thx.color._Rgbx.Rgbx_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, true)));
						}
						
						
						case "rgba":
						{
							return global::thx.color._Rgbxa.Rgbxa_Impl_.fromFloats(global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 4, true));
						}
						
						
						default:
						{
							return null;
						}
						
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return null;
					}
					
				}
				
				
			}
		}
		
		
		public static global::Array<double> _new(global::Array<double> channels) {
			return ((global::Array<double>) (channels) );
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		public static global::Array<double> combineColor(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{( ( (( 1 - ((global::Array<double>) (this1) )[3] )) * ((global::Array<double>) (other) )[0] ) + ( ((global::Array<double>) (this1) )[3] * ((global::Array<double>) (this1) )[0] ) ), ( ( (( 1 - ((global::Array<double>) (this1) )[3] )) * ((global::Array<double>) (other) )[1] ) + ( ((global::Array<double>) (this1) )[3] * ((global::Array<double>) (this1) )[1] ) ), ( ( (( 1 - ((global::Array<double>) (this1) )[3] )) * ((global::Array<double>) (other) )[2] ) + ( ((global::Array<double>) (this1) )[3] * ((global::Array<double>) (this1) )[2] ) )})) );
			}
		}
		
		
		public static global::Array<double> darker(global::Array<double> this1, double t) {
			return global::thx.color._Rgbx.Rgbx_Impl_.withAlpha(global::thx.color._Rgbx.Rgbx_Impl_.darker(global::thx.color._Rgbxa.Rgbxa_Impl_.toRgbx(this1), t), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_alpha(this1)) ));
		}
		
		
		public static global::Array<double> lighter(global::Array<double> this1, double t) {
			return global::thx.color._Rgbx.Rgbx_Impl_.withAlpha(global::thx.color._Rgbx.Rgbx_Impl_.lighter(global::thx.color._Rgbxa.Rgbxa_Impl_.toRgbx(this1), t), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_alpha(this1)) ));
		}
		
		
		public static global::Array<double> transparent(global::Array<double> this1, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2], ((double) (global::thx.Ints.interpolate(t, ((global::Array<double>) (this1) )[3], ((double) (0) ))) )})) );
			}
		}
		
		
		public static global::Array<double> opaque(global::Array<double> this1, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2], ((double) (global::thx.Ints.interpolate(t, ((global::Array<double>) (this1) )[3], ((double) (1) ))) )})) );
			}
		}
		
		
		public static global::Array<double> interpolate(global::Array<double> this1, global::Array<double> other, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((double) (global::thx.Ints.interpolate(t, ((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0])) ), ((double) (global::thx.Ints.interpolate(t, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1])) ), ((double) (global::thx.Ints.interpolate(t, ((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2])) ), ((double) (global::thx.Ints.interpolate(t, ((global::Array<double>) (this1) )[3], ((global::Array<double>) (other) )[3])) )})) );
			}
		}
		
		
		public static global::Array<double> normalize(global::Array<double> this1) {
			unchecked {
				global::Array<double> this2 = null;
				double v = ((global::Array<double>) (this1) )[0];
				double tmp = ( (( v < 0 )) ? (((double) (0) )) : (( (( v > 1 )) ? (((double) (1) )) : (v) )) );
				double v1 = ((global::Array<double>) (this1) )[1];
				double tmp1 = ( (( v1 < 0 )) ? (((double) (0) )) : (( (( v1 > 1 )) ? (((double) (1) )) : (v1) )) );
				double v2 = ((global::Array<double>) (this1) )[2];
				double tmp2 = ( (( v2 < 0 )) ? (((double) (0) )) : (( (( v2 > 1 )) ? (((double) (1) )) : (v2) )) );
				double v3 = ((global::Array<double>) (this1) )[3];
				this2 = new global::Array<double>(new double[]{tmp, tmp1, tmp2, ( (( v3 < 0 )) ? (((double) (0) )) : (( (( v3 > 1 )) ? (((double) (1) )) : (v3) )) )});
				return ((global::Array<double>) (this2) );
			}
		}
		
		
		public static global::Array<double> roundTo(global::Array<double> this1, int decimals) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.roundTo(((global::Array<double>) (this1) )[0], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[1], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[2], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[3], decimals)})) );
			}
		}
		
		
		public static global::Array<double> withAlpha(global::Array<double> this1, double newalpha) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_red(this1)) ), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_green(this1)) ), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_blue(this1)) ), newalpha})) );
		}
		
		
		public static global::Array<double> withRed(global::Array<double> this1, int newred) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{((double) (newred) ), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_green(this1)) ), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_blue(this1)) ), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_alpha(this1)) )})) );
		}
		
		
		public static global::Array<double> withGreen(global::Array<double> this1, int newgreen) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_red(this1)) ), ((double) (newgreen) ), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_blue(this1)) ), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_alpha(this1)) )})) );
		}
		
		
		public static global::Array<double> withBlue(global::Array<double> this1, int newblue) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_red(this1)) ), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_green(this1)) ), ((double) (newblue) ), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_alpha(this1)) )})) );
		}
		
		
		public static string toCss3(global::Array<double> this1) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toString(this1);
		}
		
		
		public static string toString(global::Array<double> this1) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("rgba(", global::haxe.lang.Runtime.toString(( ((global::Array<double>) (this1) )[0] * 100 ))), "%,"), global::haxe.lang.Runtime.toString(( ((global::Array<double>) (this1) )[1] * 100 ))), "%,"), global::haxe.lang.Runtime.toString(( ((global::Array<double>) (this1) )[2] * 100 ))), "%,"), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[3])), ")");
			}
		}
		
		
		public static string toHex(global::Array<double> this1, string prefix) {
			unchecked {
				if (string.Equals(prefix, null)) {
					prefix = "#";
				}
				
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", prefix), global::StringTools.hex(global::thx.color._Rgbxa.Rgbxa_Impl_.get_alpha(this1), new global::haxe.lang.Null<int>(2, true))), global::StringTools.hex(global::thx.color._Rgbxa.Rgbxa_Impl_.get_red(this1), new global::haxe.lang.Null<int>(2, true))), global::StringTools.hex(global::thx.color._Rgbxa.Rgbxa_Impl_.get_green(this1), new global::haxe.lang.Null<int>(2, true))), global::StringTools.hex(global::thx.color._Rgbxa.Rgbxa_Impl_.get_blue(this1), new global::haxe.lang.Null<int>(2, true)));
			}
		}
		
		
		public static bool @equals(global::Array<double> this1, global::Array<double> other) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.nearEquals(this1, other, default(global::haxe.lang.Null<double>));
		}
		
		
		public static bool nearEquals(global::Array<double> this1, global::Array<double> other, global::haxe.lang.Null<double> tolerance) {
			unchecked {
				global::haxe.lang.Null<double> __temp_tolerance158 = ( ( ! (tolerance.hasValue) ) ? (new global::haxe.lang.Null<double>(1e-9, true)) : (tolerance) );
				if (( ( global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0], __temp_tolerance158) && global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1], __temp_tolerance158) ) && global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2], __temp_tolerance158) )) {
					return global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[3], ((global::Array<double>) (other) )[3], __temp_tolerance158);
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static global::Array<double> toHsla(global::Array<double> this1) {
			return global::thx.color._Hsl.Hsl_Impl_.withAlpha(global::thx.color._Rgbx.Rgbx_Impl_.toHsl(global::thx.color._Rgbxa.Rgbxa_Impl_.toRgbx(this1)), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_alpha(this1)) ));
		}
		
		
		public static global::Array<double> toHsva(global::Array<double> this1) {
			return global::thx.color._Hsv.Hsv_Impl_.withAlpha(global::thx.color._Rgbx.Rgbx_Impl_.toHsv(global::thx.color._Rgbxa.Rgbxa_Impl_.toRgbx(this1)), ((double) (global::thx.color._Rgbxa.Rgbxa_Impl_.get_alpha(this1)) ));
		}
		
		
		public static int toRgb(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._Rgbxa.Rgbxa_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toRgbx(global::Array<double> this1) {
			unchecked {
				return ((global::Array<double>) (this1.slice(0, new global::haxe.lang.Null<int>(3, true))) );
			}
		}
		
		
		public static int toRgba(global::Array<double> this1) {
			unchecked {
				return global::thx.color._Rgba.Rgba_Impl_.fromFloats(new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2], ((global::Array<double>) (this1) )[3]}));
			}
		}
		
		
		public static int get_red(global::Array<double> this1) {
			unchecked {
				return global::Math.round(( ((global::Array<double>) (this1) )[0] * 255 ));
			}
		}
		
		
		public static int get_green(global::Array<double> this1) {
			unchecked {
				return global::Math.round(( ((global::Array<double>) (this1) )[1] * 255 ));
			}
		}
		
		
		public static int get_blue(global::Array<double> this1) {
			unchecked {
				return global::Math.round(( ((global::Array<double>) (this1) )[2] * 255 ));
			}
		}
		
		
		public static int get_alpha(global::Array<double> this1) {
			unchecked {
				return global::Math.round(( ((global::Array<double>) (this1) )[3] * 255 ));
			}
		}
		
		
		public static double get_redf(global::Array<double> this1) {
			return this1[0];
		}
		
		
		public static double get_greenf(global::Array<double> this1) {
			unchecked {
				return this1[1];
			}
		}
		
		
		public static double get_bluef(global::Array<double> this1) {
			unchecked {
				return this1[2];
			}
		}
		
		
		public static double get_alphaf(global::Array<double> this1) {
			unchecked {
				return this1[3];
			}
		}
		
		
		public static bool get_inSpace(global::Array<double> this1) {
			unchecked {
				if (( ( ( ( ( ( ( ((global::Array<double>) (this1) )[0] >= 0 ) && ( ((global::Array<double>) (this1) )[0] <= 1 ) ) && ( ((global::Array<double>) (this1) )[1] >= 0 ) ) && ( ((global::Array<double>) (this1) )[1] <= 1 ) ) && ( ((global::Array<double>) (this1) )[2] >= 0 ) ) && ( ((global::Array<double>) (this1) )[2] <= 1 ) ) && ( ((global::Array<double>) (this1) )[3] >= 0 ) )) {
					return ( ((global::Array<double>) (this1) )[3] <= 1 );
				}
				else {
					return false;
				}
				
			}
		}
		
		
	}
}


