// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._Cmyk {
	public sealed class Cmyk_Impl_ {
		
		
		
		
		
		
		
		
		
		public static global::Array<double> create(double cyan, double magenta, double yellow, double black) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{cyan, magenta, yellow, black})) );
		}
		
		
		public static global::Array<double> fromFloats(global::Array<double> arr) {
			unchecked {
				global::thx.ArrayFloats.resize(arr, 4, default(global::haxe.lang.Null<double>));
				return ((global::Array<double>) (new global::Array<double>(new double[]{arr[0], arr[1], arr[2], arr[3]})) );
			}
		}
		
		
		public static global::Array<double> fromString(string color) {
			unchecked {
				global::thx.color.parse.ColorInfo info = global::thx.color.parse.ColorParser.parseColor(color);
				if (( null == info )) {
					return null;
				}
				
				try {
					if (string.Equals(info.name, "cmyk")) {
						return ((global::Array<double>) (global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 4, false)) );
					}
					else {
						return null;
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return null;
					}
					
				}
				
				
			}
		}
		
		
		public static global::Array<double> _new(global::Array<double> channels) {
			return ((global::Array<double>) (channels) );
		}
		
		
		public static global::Array<double> darker(global::Array<double> this1, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2], global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[3], ((double) (1) ))})) );
			}
		}
		
		
		public static global::Array<double> lighter(global::Array<double> this1, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2], global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[3], ((double) (0) ))})) );
			}
		}
		
		
		public static global::Array<double> interpolate(global::Array<double> this1, global::Array<double> other, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[3], ((global::Array<double>) (other) )[3])})) );
			}
		}
		
		
		public static global::Array<double> min(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::System.Math.Min(((double) (((global::Array<double>) (this1) )[0]) ), ((double) (((global::Array<double>) (other) )[0]) )), global::System.Math.Min(((double) (((global::Array<double>) (this1) )[1]) ), ((double) (((global::Array<double>) (other) )[1]) )), global::System.Math.Min(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (other) )[2]) )), global::System.Math.Min(((double) (((global::Array<double>) (this1) )[3]) ), ((double) (((global::Array<double>) (other) )[3]) ))})) );
			}
		}
		
		
		public static global::Array<double> max(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::System.Math.Max(((double) (((global::Array<double>) (this1) )[0]) ), ((double) (((global::Array<double>) (other) )[0]) )), global::System.Math.Max(((double) (((global::Array<double>) (this1) )[1]) ), ((double) (((global::Array<double>) (other) )[1]) )), global::System.Math.Max(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (other) )[2]) )), global::System.Math.Max(((double) (((global::Array<double>) (this1) )[3]) ), ((double) (((global::Array<double>) (other) )[3]) ))})) );
			}
		}
		
		
		public static global::Array<double> normalize(global::Array<double> this1) {
			unchecked {
				global::Array<double> this2 = null;
				double v = ((global::Array<double>) (this1) )[0];
				double tmp = ( (( v < 0 )) ? (((double) (0) )) : (( (( v > 1 )) ? (((double) (1) )) : (v) )) );
				double v1 = ((global::Array<double>) (this1) )[1];
				double tmp1 = ( (( v1 < 0 )) ? (((double) (0) )) : (( (( v1 > 1 )) ? (((double) (1) )) : (v1) )) );
				double v2 = ((global::Array<double>) (this1) )[2];
				double tmp2 = ( (( v2 < 0 )) ? (((double) (0) )) : (( (( v2 > 1 )) ? (((double) (1) )) : (v2) )) );
				double v3 = ((global::Array<double>) (this1) )[3];
				this2 = new global::Array<double>(new double[]{tmp, tmp1, tmp2, ( (( v3 < 0 )) ? (((double) (0) )) : (( (( v3 > 1 )) ? (((double) (1) )) : (v3) )) )});
				return ((global::Array<double>) (this2) );
			}
		}
		
		
		public static global::Array<double> roundTo(global::Array<double> this1, int decimals) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.roundTo(((global::Array<double>) (this1) )[0], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[1], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[2], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[3], decimals)})) );
			}
		}
		
		
		public static global::Array<double> withCyan(global::Array<double> this1, double newcyan) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{newcyan, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2], ((global::Array<double>) (this1) )[3]})) );
			}
		}
		
		
		public static global::Array<double> withMagenta(global::Array<double> this1, double newmagenta) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], newmagenta, ((global::Array<double>) (this1) )[2], ((global::Array<double>) (this1) )[3]})) );
			}
		}
		
		
		public static global::Array<double> withYellow(global::Array<double> this1, double newyellow) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], newyellow, ((global::Array<double>) (this1) )[3]})) );
			}
		}
		
		
		public static global::Array<double> withBlack(global::Array<double> this1, double newblack) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2], newblack})) );
			}
		}
		
		
		public static string toString(global::Array<double> this1) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("cmyk(", global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[0])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[1])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[2])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[3])), ")");
			}
		}
		
		
		public static bool @equals(global::Array<double> this1, global::Array<double> other) {
			return global::thx.color._Cmyk.Cmyk_Impl_.nearEquals(this1, other, default(global::haxe.lang.Null<double>));
		}
		
		
		public static bool nearEquals(global::Array<double> this1, global::Array<double> other, global::haxe.lang.Null<double> tolerance) {
			unchecked {
				global::haxe.lang.Null<double> __temp_tolerance134 = ( ( ! (tolerance.hasValue) ) ? (new global::haxe.lang.Null<double>(1e-9, true)) : (tolerance) );
				if (( ( global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0], __temp_tolerance134) && global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1], __temp_tolerance134) ) && global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2], __temp_tolerance134) )) {
					return global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[3], ((global::Array<double>) (other) )[3], __temp_tolerance134);
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static global::Array<double> toLab(global::Array<double> this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toLab(global::thx.color._Cmyk.Cmyk_Impl_.toXyz(this1));
		}
		
		
		public static global::Array<double> toLCh(global::Array<double> this1) {
			return global::thx.color._Lab.Lab_Impl_.toLCh(global::thx.color._Cmyk.Cmyk_Impl_.toLab(this1));
		}
		
		
		public static global::Array<double> toLuv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toLuv(global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmy(global::Array<double> this1) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{( ((global::Array<double>) (this1) )[3] + ( (( 1 - ((global::Array<double>) (this1) )[3] )) * ((global::Array<double>) (this1) )[0] ) ), ( ((global::Array<double>) (this1) )[3] + ( (( 1 - ((global::Array<double>) (this1) )[3] )) * ((global::Array<double>) (this1) )[1] ) ), ( ((global::Array<double>) (this1) )[3] + ( (( 1 - ((global::Array<double>) (this1) )[3] )) * ((global::Array<double>) (this1) )[2] ) )})) );
			}
		}
		
		
		public static global::Array<double> toCubeHelix(global::Array<double> this1) {
			unchecked {
				return global::thx.color._Rgbx.Rgbx_Impl_.toCubeHelixWithGamma(((global::Array<double>) (global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1)) ), ((double) (1) ));
			}
		}
		
		
		public static double toGrey(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toGrey(global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsl(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsl(global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsv(global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHunterLab(global::Array<double> this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toHunterLab(global::thx.color._Cmyk.Cmyk_Impl_.toXyz(this1));
		}
		
		
		public static int toRgb(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1));
		}
		
		
		public static int toRgba(global::Array<double> this1) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._Cmyk.Cmyk_Impl_.toRgbxa(this1));
		}
		
		
		public static global::Array<double> toRgbx(global::Array<double> this1) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{( (( 1 - ((global::Array<double>) (this1) )[3] )) * (( 1 - ((global::Array<double>) (this1) )[0] )) ), ( (( 1 - ((global::Array<double>) (this1) )[3] )) * (( 1 - ((global::Array<double>) (this1) )[1] )) ), ( (( 1 - ((global::Array<double>) (this1) )[3] )) * (( 1 - ((global::Array<double>) (this1) )[2] )) )})) );
			}
		}
		
		
		public static global::Array<double> toRgbxa(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgbxa(global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1));
		}
		
		
		public static double toTemperature(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toTemperature(global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toXyz(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toXyz(global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYuv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYuv(global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYxy(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYxy(global::thx.color._Cmyk.Cmyk_Impl_.toRgbx(this1));
		}
		
		
		public static double get_cyan(global::Array<double> this1) {
			return this1[0];
		}
		
		
		public static double get_magenta(global::Array<double> this1) {
			unchecked {
				return this1[1];
			}
		}
		
		
		public static double get_yellow(global::Array<double> this1) {
			unchecked {
				return this1[2];
			}
		}
		
		
		public static double get_black(global::Array<double> this1) {
			unchecked {
				return this1[3];
			}
		}
		
		
	}
}


