// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._Rgb {
	public sealed class Rgb_Impl_ {
		
		public static int create(int red, int green, int blue) {
			unchecked {
				return ((int) (( ( ( (( red & 255 )) << 16 ) | ( (( green & 255 )) << 8 ) ) | ( blue & 255 ) )) );
			}
		}
		
		
		public static int createf(double red, double green, double blue) {
			unchecked {
				return ((int) (( ( ( (( global::Math.round(( red * 255 )) & 255 )) << 16 ) | ( (( global::Math.round(( green * 255 )) & 255 )) << 8 ) ) | ( global::Math.round(( blue * 255 )) & 255 ) )) );
			}
		}
		
		
		public static global::haxe.lang.Null<int> fromString(string color) {
			unchecked {
				global::thx.color.parse.ColorInfo info = global::thx.color.parse.ColorParser.parseHex(color);
				if (( null == info )) {
					info = global::thx.color.parse.ColorParser.parseColor(color);
				}
				
				if (( null == info )) {
					return default(global::haxe.lang.Null<int>);
				}
				
				try {
					if (string.Equals(info.name, "rgb")) {
						return new global::haxe.lang.Null<int>(global::thx.color._Rgb.Rgb_Impl_.fromInts(global::thx.color.parse.ColorParser.getInt8Channels(info.channels, 3)), true);
					}
					else {
						return default(global::haxe.lang.Null<int>);
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return default(global::haxe.lang.Null<int>);
					}
					
				}
				
				
			}
		}
		
		
		public static int fromInts(global::Array<int> arr) {
			unchecked {
				global::thx.ArrayInts.resize(arr, 3, default(global::haxe.lang.Null<int>));
				return ((int) (( ( ( (( arr[0] & 255 )) << 16 ) | ( (( arr[1] & 255 )) << 8 ) ) | ( arr[2] & 255 ) )) );
			}
		}
		
		
		public static int _new(int rgb) {
			return ((int) (rgb) );
		}
		
		
		
		
		
		
		
		
		public static int darker(int this1, double t) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._Rgbx.Rgbx_Impl_.darker(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1), t));
		}
		
		
		public static int lighter(int this1, double t) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._Rgbx.Rgbx_Impl_.lighter(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1), t));
		}
		
		
		public static int interpolate(int this1, int other, double t) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._Rgbx.Rgbx_Impl_.interpolate(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1), global::thx.color._Rgb.Rgb_Impl_.toRgbx(other), t));
		}
		
		
		public static int min(int this1, int other) {
			unchecked {
				int a = global::thx.color._Rgb.Rgb_Impl_.get_red(this1);
				int b = global::thx.color._Rgb.Rgb_Impl_.get_red(other);
				int red = ( (( a < b )) ? (a) : (b) );
				int a1 = global::thx.color._Rgb.Rgb_Impl_.get_green(this1);
				int b1 = global::thx.color._Rgb.Rgb_Impl_.get_green(other);
				int green = ( (( a1 < b1 )) ? (a1) : (b1) );
				int a2 = global::thx.color._Rgb.Rgb_Impl_.get_blue(this1);
				int b2 = global::thx.color._Rgb.Rgb_Impl_.get_blue(other);
				return ((int) (( ( ( (( red & 255 )) << 16 ) | ( (( green & 255 )) << 8 ) ) | ( (( (( a2 < b2 )) ? (a2) : (b2) )) & 255 ) )) );
			}
		}
		
		
		public static int max(int this1, int other) {
			unchecked {
				int a = global::thx.color._Rgb.Rgb_Impl_.get_red(this1);
				int b = global::thx.color._Rgb.Rgb_Impl_.get_red(other);
				int red = ( (( a > b )) ? (a) : (b) );
				int a1 = global::thx.color._Rgb.Rgb_Impl_.get_green(this1);
				int b1 = global::thx.color._Rgb.Rgb_Impl_.get_green(other);
				int green = ( (( a1 > b1 )) ? (a1) : (b1) );
				int a2 = global::thx.color._Rgb.Rgb_Impl_.get_blue(this1);
				int b2 = global::thx.color._Rgb.Rgb_Impl_.get_blue(other);
				return ((int) (( ( ( (( red & 255 )) << 16 ) | ( (( green & 255 )) << 8 ) ) | ( (( (( a2 > b2 )) ? (a2) : (b2) )) & 255 ) )) );
			}
		}
		
		
		public static int withAlpha(int this1, int alpha) {
			return global::thx.color._Rgba.Rgba_Impl_.fromInts(new global::Array<int>(new int[]{global::thx.color._Rgb.Rgb_Impl_.get_red(this1), global::thx.color._Rgb.Rgb_Impl_.get_green(this1), global::thx.color._Rgb.Rgb_Impl_.get_blue(this1), alpha}));
		}
		
		
		public static int withAlphaf(int this1, double newalpha) {
			unchecked {
				return global::thx.color._Rgba.Rgba_Impl_.fromInts(new global::Array<int>(new int[]{global::thx.color._Rgb.Rgb_Impl_.get_red(this1), global::thx.color._Rgb.Rgb_Impl_.get_green(this1), global::thx.color._Rgb.Rgb_Impl_.get_blue(this1), global::Math.round(( 255 * newalpha ))}));
			}
		}
		
		
		public static int withRed(int this1, int newred) {
			return global::thx.color._Rgb.Rgb_Impl_.fromInts(new global::Array<int>(new int[]{newred, global::thx.color._Rgb.Rgb_Impl_.get_green(this1), global::thx.color._Rgb.Rgb_Impl_.get_blue(this1)}));
		}
		
		
		public static int withGreen(int this1, int newgreen) {
			return global::thx.color._Rgb.Rgb_Impl_.fromInts(new global::Array<int>(new int[]{global::thx.color._Rgb.Rgb_Impl_.get_red(this1), newgreen, global::thx.color._Rgb.Rgb_Impl_.get_blue(this1)}));
		}
		
		
		public static int withBlue(int this1, int newblue) {
			return global::thx.color._Rgb.Rgb_Impl_.fromInts(new global::Array<int>(new int[]{global::thx.color._Rgb.Rgb_Impl_.get_red(this1), global::thx.color._Rgb.Rgb_Impl_.get_green(this1), newblue}));
		}
		
		
		public static string toCss3(int this1) {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("rgb(", global::haxe.lang.Runtime.toString(global::thx.color._Rgb.Rgb_Impl_.get_red(this1))), ","), global::haxe.lang.Runtime.toString(global::thx.color._Rgb.Rgb_Impl_.get_green(this1))), ","), global::haxe.lang.Runtime.toString(global::thx.color._Rgb.Rgb_Impl_.get_blue(this1))), ")");
		}
		
		
		public static string toString(int this1) {
			return global::thx.color._Rgb.Rgb_Impl_.toHex(this1, null);
		}
		
		
		public static string toHex(int this1, string prefix) {
			unchecked {
				if (string.Equals(prefix, null)) {
					prefix = "#";
				}
				
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", prefix), global::StringTools.hex(global::thx.color._Rgb.Rgb_Impl_.get_red(this1), new global::haxe.lang.Null<int>(2, true))), global::StringTools.hex(global::thx.color._Rgb.Rgb_Impl_.get_green(this1), new global::haxe.lang.Null<int>(2, true))), global::StringTools.hex(global::thx.color._Rgb.Rgb_Impl_.get_blue(this1), new global::haxe.lang.Null<int>(2, true)));
			}
		}
		
		
		public static bool @equals(int this1, int other) {
			if (( ( global::thx.color._Rgb.Rgb_Impl_.get_red(this1) == global::thx.color._Rgb.Rgb_Impl_.get_red(other) ) && ( global::thx.color._Rgb.Rgb_Impl_.get_green(this1) == global::thx.color._Rgb.Rgb_Impl_.get_green(other) ) )) {
				return ( global::thx.color._Rgb.Rgb_Impl_.get_blue(this1) == global::thx.color._Rgb.Rgb_Impl_.get_blue(other) );
			}
			else {
				return false;
			}
			
		}
		
		
		public static global::Array<double> toLab(int this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toLab(global::thx.color._Rgb.Rgb_Impl_.toXyz(this1));
		}
		
		
		public static global::Array<double> toLCh(int this1) {
			return global::thx.color._Lab.Lab_Impl_.toLCh(global::thx.color._Rgb.Rgb_Impl_.toLab(this1));
		}
		
		
		public static global::Array<double> toLuv(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toLuv(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmy(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmy(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmyk(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmyk(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCubeHelix(int this1) {
			unchecked {
				return global::thx.color._Rgbx.Rgbx_Impl_.toCubeHelixWithGamma(((global::Array<double>) (global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1)) ), ((double) (1) ));
			}
		}
		
		
		public static double toGrey(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toGrey(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsl(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsl(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsv(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsv(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHunterLab(int this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toHunterLab(global::thx.color._Rgb.Rgb_Impl_.toXyz(this1));
		}
		
		
		public static global::Array<double> toRgbx(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.fromInts(new global::Array<int>(new int[]{global::thx.color._Rgb.Rgb_Impl_.get_red(this1), global::thx.color._Rgb.Rgb_Impl_.get_green(this1), global::thx.color._Rgb.Rgb_Impl_.get_blue(this1)}));
		}
		
		
		public static int toRgba(int this1) {
			unchecked {
				return global::thx.color._Rgb.Rgb_Impl_.withAlpha(this1, 255);
			}
		}
		
		
		public static global::Array<double> toRgbxa(int this1) {
			return global::thx.color._Rgba.Rgba_Impl_.toRgbxa(global::thx.color._Rgb.Rgb_Impl_.toRgba(this1));
		}
		
		
		public static double toTemperature(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toTemperature(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYuv(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYuv(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYxy(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYxy(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toXyz(int this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toXyz(global::thx.color._Rgb.Rgb_Impl_.toRgbx(this1));
		}
		
		
		public static int get_red(int this1) {
			unchecked {
				return ( ( this1 >> 16 ) & 255 );
			}
		}
		
		
		public static int get_green(int this1) {
			unchecked {
				return ( ( this1 >> 8 ) & 255 );
			}
		}
		
		
		public static int get_blue(int this1) {
			unchecked {
				return ( this1 & 255 );
			}
		}
		
		
	}
}


