// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._Xyz {
	public sealed class Xyz_Impl_ {
		
		static Xyz_Impl_() {
			unchecked {
				global::thx.color._Xyz.Xyz_Impl_.whiteReference = ((global::Array<double>) (new global::Array<double>(new double[]{0.95047, ((double) (1) ), 1.08883})) );
				global::thx.color._Xyz.Xyz_Impl_.epsilon = 0.0088564516790356311;
				global::thx.color._Xyz.Xyz_Impl_.kappa = 903.296296296296305;
			}
		}
		
		
		public static global::Array<double> whiteReference;
		
		public static double epsilon;
		
		public static double kappa;
		
		
		
		
		
		
		
		
		
		
		
		public static global::Array<double> create(double x, double y, double z) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{x, y, z})) );
		}
		
		
		public static global::Array<double> fromFloats(global::Array<double> arr) {
			unchecked {
				global::thx.ArrayFloats.resize(arr, 3, default(global::haxe.lang.Null<double>));
				return ((global::Array<double>) (new global::Array<double>(new double[]{arr[0], arr[1], arr[2]})) );
			}
		}
		
		
		public static global::Array<double> fromString(string color) {
			unchecked {
				global::thx.color.parse.ColorInfo info = global::thx.color.parse.ColorParser.parseColor(color);
				if (( null == info )) {
					return null;
				}
				
				try {
					switch (info.name) {
						case "ciexyz":
						case "xyz":
						{
							return ((global::Array<double>) (global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)) );
						}
						
						
						default:
						{
							return null;
						}
						
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return null;
					}
					
				}
				
				
			}
		}
		
		
		public static global::Array<double> _new(global::Array<double> channels) {
			return ((global::Array<double>) (channels) );
		}
		
		
		public static global::Array<double> interpolate(global::Array<double> this1, global::Array<double> other, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2])})) );
			}
		}
		
		
		public static global::Array<double> min(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::System.Math.Min(((double) (((global::Array<double>) (this1) )[0]) ), ((double) (((global::Array<double>) (other) )[0]) )), global::System.Math.Min(((double) (((global::Array<double>) (this1) )[1]) ), ((double) (((global::Array<double>) (other) )[1]) )), global::System.Math.Min(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (other) )[2]) ))})) );
			}
		}
		
		
		public static global::Array<double> max(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::System.Math.Max(((double) (((global::Array<double>) (this1) )[0]) ), ((double) (((global::Array<double>) (other) )[0]) )), global::System.Math.Max(((double) (((global::Array<double>) (this1) )[1]) ), ((double) (((global::Array<double>) (other) )[1]) )), global::System.Math.Max(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (other) )[2]) ))})) );
			}
		}
		
		
		public static global::Array<double> roundTo(global::Array<double> this1, int decimals) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.roundTo(((global::Array<double>) (this1) )[0], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[1], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[2], decimals)})) );
			}
		}
		
		
		public static global::Array<double> withX(global::Array<double> this1, double newx) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{newx, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2]})) );
			}
		}
		
		
		public static global::Array<double> withY(global::Array<double> this1, double newy) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], newy, ((global::Array<double>) (this1) )[2]})) );
			}
		}
		
		
		public static global::Array<double> withZ(global::Array<double> this1, double newz) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], newz})) );
			}
		}
		
		
		public static string toString(global::Array<double> this1) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("xyz(", global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[0])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[1])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[2])), ")");
			}
		}
		
		
		public static bool @equals(global::Array<double> this1, global::Array<double> other) {
			return global::thx.color._Xyz.Xyz_Impl_.nearEquals(this1, other, default(global::haxe.lang.Null<double>));
		}
		
		
		public static bool nearEquals(global::Array<double> this1, global::Array<double> other, global::haxe.lang.Null<double> tolerance) {
			unchecked {
				global::haxe.lang.Null<double> __temp_tolerance167 = ( ( ! (tolerance.hasValue) ) ? (new global::haxe.lang.Null<double>(1e-9, true)) : (tolerance) );
				if (( global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0], __temp_tolerance167) && global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1], __temp_tolerance167) )) {
					return global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2], __temp_tolerance167);
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static global::Array<double> toLab(global::Array<double> this1) {
			unchecked {
				global::haxe.lang.Function f = ( (( global::thx.color._Xyz.Xyz_Impl__toLab_105__Fun.__hx_current != null )) ? (global::thx.color._Xyz.Xyz_Impl__toLab_105__Fun.__hx_current) : (global::thx.color._Xyz.Xyz_Impl__toLab_105__Fun.__hx_current = ((global::thx.color._Xyz.Xyz_Impl__toLab_105__Fun) (new global::thx.color._Xyz.Xyz_Impl__toLab_105__Fun()) )) );
				double x1 = ( ((global::Array<double>) (this1) )[0] / ((global::Array<double>) (global::thx.color._Xyz.Xyz_Impl_.whiteReference) )[0] );
				double y1 = ( ((global::Array<double>) (this1) )[1] / ((global::Array<double>) (global::thx.color._Xyz.Xyz_Impl_.whiteReference) )[1] );
				double z1 = ( ((global::Array<double>) (this1) )[2] / ((global::Array<double>) (global::thx.color._Xyz.Xyz_Impl_.whiteReference) )[2] );
				double fy1 = ((double) (f.__hx_invoke1_f(y1, global::haxe.lang.Runtime.undefined)) );
				return ((global::Array<double>) (new global::Array<double>(new double[]{( ( 116 * fy1 ) - 16 ), ( 500 * (( ((double) (f.__hx_invoke1_f(x1, global::haxe.lang.Runtime.undefined)) ) - fy1 )) ), ( 200 * (( fy1 - ((double) (f.__hx_invoke1_f(z1, global::haxe.lang.Runtime.undefined)) ) )) )})) );
			}
		}
		
		
		public static global::Array<double> toLCh(global::Array<double> this1) {
			return global::thx.color._Lab.Lab_Impl_.toLCh(global::thx.color._Xyz.Xyz_Impl_.toLab(this1));
		}
		
		
		public static global::Array<double> toLuv(global::Array<double> this1) {
			unchecked {
				double f = ( ( ((global::Array<double>) (this1) )[1] * 100 ) / (( ((global::Array<double>) (global::thx.color._Xyz.Xyz_Impl_.whiteReference) )[1] * 100 )) );
				double l = ( (( f > global::System.Math.Pow(((double) (0.206896551724137928) ), ((double) (3) )) )) ? (( ( 116 * global::System.Math.Pow(((double) (f) ), ((double) (0.333333333333333315) )) ) - 16 )) : (( global::System.Math.Pow(((double) (9.66666666666666607) ), ((double) (3) )) * f )) );
				return ((global::Array<double>) (new global::Array<double>(new double[]{( l / 100 ), ( ( ( 13 * l ) * (( global::thx.color._Xyz.Xyz_Impl_.get_u(this1) - ( global::thx.color._Xyz.Xyz_Impl_.get_u(global::thx.color._Xyz.Xyz_Impl_.whiteReference) * 100 ) )) ) / 100 ), ( ( ( 13 * l ) * (( global::thx.color._Xyz.Xyz_Impl_.get_v(this1) - ( global::thx.color._Xyz.Xyz_Impl_.get_v(global::thx.color._Xyz.Xyz_Impl_.whiteReference) * 100 ) )) ) / 100 )})) );
			}
		}
		
		
		public static global::Array<double> toCmy(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmy(global::thx.color._Xyz.Xyz_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmyk(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmyk(global::thx.color._Xyz.Xyz_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCubeHelix(global::Array<double> this1) {
			unchecked {
				return global::thx.color._Rgbx.Rgbx_Impl_.toCubeHelixWithGamma(((global::Array<double>) (global::thx.color._Xyz.Xyz_Impl_.toRgbx(this1)) ), ((double) (1) ));
			}
		}
		
		
		public static double toGrey(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toGrey(global::thx.color._Xyz.Xyz_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsl(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsl(global::thx.color._Xyz.Xyz_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsv(global::thx.color._Xyz.Xyz_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHunterLab(global::Array<double> this1) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{( 10.0 * global::System.Math.Sqrt(((double) (((global::Array<double>) (this1) )[1]) )) ), ( (( ((global::Array<double>) (this1) )[1] != 0 )) ? (( 17.5 * (( (( ( 1.02 * ((global::Array<double>) (this1) )[0] ) - ((global::Array<double>) (this1) )[1] )) / global::System.Math.Sqrt(((double) (((global::Array<double>) (this1) )[1]) )) )) )) : (((double) (0) )) ), ( (( ((global::Array<double>) (this1) )[1] != 0 )) ? (( 7.0 * (( (( ((global::Array<double>) (this1) )[1] - ( .847 * ((global::Array<double>) (this1) )[2] ) )) / global::System.Math.Sqrt(((double) (((global::Array<double>) (this1) )[1]) )) )) )) : (((double) (0) )) )})) );
			}
		}
		
		
		public static int toRgb(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._Xyz.Xyz_Impl_.toRgbx(this1));
		}
		
		
		public static int toRgba(global::Array<double> this1) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._Xyz.Xyz_Impl_.toRgbxa(this1));
		}
		
		
		public static global::Array<double> toRgbx(global::Array<double> this1) {
			unchecked {
				double x = ((global::Array<double>) (this1) )[0];
				double y = ((global::Array<double>) (this1) )[1];
				double z = ((global::Array<double>) (this1) )[2];
				double r = ( ( ( x * 3.2406 ) + ( y * -1.5372 ) ) + ( z * -0.4986 ) );
				double g = ( ( ( x * -0.9689 ) + ( y * 1.8758 ) ) + ( z * 0.0415 ) );
				double b = ( ( ( x * 0.0557 ) + ( y * -0.204 ) ) + ( z * 1.0570 ) );
				if (( r > 0.0031308 )) {
					r = ( ( 1.055 * global::System.Math.Pow(((double) (r) ), ((double) (0.416666666666666685) )) ) - 0.055 );
				}
				else {
					r = ( 12.92 * r );
				}
				
				if (( g > 0.0031308 )) {
					g = ( ( 1.055 * global::System.Math.Pow(((double) (g) ), ((double) (0.416666666666666685) )) ) - 0.055 );
				}
				else {
					g = ( 12.92 * g );
				}
				
				if (( b > 0.0031308 )) {
					b = ( ( 1.055 * global::System.Math.Pow(((double) (b) ), ((double) (0.416666666666666685) )) ) - 0.055 );
				}
				else {
					b = ( 12.92 * b );
				}
				
				return ((global::Array<double>) (new global::Array<double>(new double[]{r, g, b})) );
			}
		}
		
		
		public static global::Array<double> toRgbxa(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgbxa(global::thx.color._Xyz.Xyz_Impl_.toRgbx(this1));
		}
		
		
		public static double toTemperature(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toTemperature(global::thx.color._Xyz.Xyz_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYuv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYuv(global::thx.color._Xyz.Xyz_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYxy(global::Array<double> this1) {
			unchecked {
				double sum = ( ( ((global::Array<double>) (this1) )[0] + ((global::Array<double>) (this1) )[1] ) + ((global::Array<double>) (this1) )[2] );
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[1], ( (( sum == 0 )) ? (((double) (1) )) : (( ((global::Array<double>) (this1) )[0] / sum )) ), ( (( sum == 0 )) ? (((double) (1) )) : (( ((global::Array<double>) (this1) )[1] / sum )) )})) );
			}
		}
		
		
		public static double get_x(global::Array<double> this1) {
			return this1[0];
		}
		
		
		public static double get_y(global::Array<double> this1) {
			unchecked {
				return this1[1];
			}
		}
		
		
		public static double get_z(global::Array<double> this1) {
			unchecked {
				return this1[2];
			}
		}
		
		
		public static double get_u(global::Array<double> this1) {
			unchecked {
				try {
					return ( ( 4 * ((global::Array<double>) (this1) )[0] ) / (( ( ((global::Array<double>) (this1) )[0] + ( 15 * ((global::Array<double>) (this1) )[1] ) ) + ( 3 * ((global::Array<double>) (this1) )[2] ) )) );
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return ((double) (0) );
					}
					
				}
				
				
			}
		}
		
		
		public static double get_v(global::Array<double> this1) {
			unchecked {
				try {
					return ( ( 9 * ((global::Array<double>) (this1) )[1] ) / (( ( ((global::Array<double>) (this1) )[0] + ( 15 * ((global::Array<double>) (this1) )[1] ) ) + ( 3 * ((global::Array<double>) (this1) )[2] ) )) );
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return ((double) (0) );
					}
					
				}
				
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._Xyz {
	public class Xyz_Impl__toLab_105__Fun : global::haxe.lang.Function {
		
		public Xyz_Impl__toLab_105__Fun() : base(1, 1) {
		}
		
		
		public static global::thx.color._Xyz.Xyz_Impl__toLab_105__Fun __hx_current;
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			double t = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((double) (__fn_float1) )) : (((double) (global::haxe.lang.Runtime.toDouble(__fn_dyn1)) )) );
			if (( t > 0.0088564516790356311 )) {
				return global::System.Math.Pow(((double) (t) ), ((double) (0.333333333333333315) ));
			}
			else {
				return ( ( 7.78703703703703543 * t ) + 0.137931034482758619 );
			}
			
		}
		
		
	}
}


