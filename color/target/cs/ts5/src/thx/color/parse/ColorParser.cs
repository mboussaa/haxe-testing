// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color.parse {
	public class ColorParser : global::haxe.lang.HxObject {
		
		static ColorParser() {
			global::thx.color.parse.ColorParser.parser = new global::thx.color.parse.ColorParser();
			global::thx.color.parse.ColorParser.isPureHex = new global::EReg("^([0-9a-f]{2}){3,4}$", "i");
		}
		
		
		public ColorParser(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ColorParser() {
			global::thx.color.parse.ColorParser.__hx_ctor_thx_color_parse_ColorParser(this);
		}
		
		
		public static void __hx_ctor_thx_color_parse_ColorParser(global::thx.color.parse.ColorParser __temp_me135) {
			__temp_me135.pattern_color = new global::EReg("^\\s*([^(]+)\\s*\\(([^)]*)\\)\\s*$", "i");
			__temp_me135.pattern_channel = new global::EReg("^\\s*(-?\\d*.\\d+|-?\\d+)(%|deg|rad)?\\s*$", "i");
		}
		
		
		public static global::thx.color.parse.ColorParser parser;
		
		public static global::thx.color.parse.ColorInfo parseColor(string s) {
			return global::thx.color.parse.ColorParser.parser.processColor(s);
		}
		
		
		public static global::thx.color.parse.ColorInfo parseHex(string s) {
			return global::thx.color.parse.ColorParser.parser.processHex(s);
		}
		
		
		public static global::thx.color.parse.ChannelInfo parseChannel(string s) {
			return global::thx.color.parse.ColorParser.parser.processChannel(s);
		}
		
		
		public static global::EReg isPureHex;
		
		public static global::Array<double> getFloatChannels(global::Array<object> channels, int length, bool useInt8) {
			if (( length != channels.length )) {
				throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("invalid number of channels, expected ", global::haxe.lang.Runtime.toString(length)), " but it is "), global::haxe.lang.Runtime.toString(channels.length)));
			}
			
			bool a2 = useInt8;
			return channels.map<double>(((global::haxe.lang.Function) (new global::thx.color.parse.ColorParser_getFloatChannels_102__Fun(a2)) ));
		}
		
		
		public static global::Array<int> getInt8Channels(global::Array<object> channels, int length) {
			if (( length != channels.length )) {
				throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("invalid number of channels, expected ", global::haxe.lang.Runtime.toString(length)), " but it is "), global::haxe.lang.Runtime.toString(channels.length)));
			}
			
			return channels.map<int>(((global::haxe.lang.Function) (new global::haxe.lang.Closure(typeof(global::thx.color.parse.ColorParser), "getInt8Channel", 895977060)) ));
		}
		
		
		public static double getFloatChannel(global::thx.color.parse.ChannelInfo channel, global::haxe.lang.Null<bool> useInt8) {
			unchecked {
				bool __temp_useInt8134 = ( ( ! (useInt8.hasValue) ) ? (true) : ((useInt8).@value) );
				switch (channel.index) {
					case 0:
					{
						return ( ((double) (global::haxe.lang.Runtime.toDouble(channel.@params[0])) ) / 100 );
					}
					
					
					case 1:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(channel.@params[0])) );
					}
					
					
					case 2:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(channel.@params[0])) );
					}
					
					
					case 3:
					{
						int v = ((int) (global::haxe.lang.Runtime.toInt(channel.@params[0])) );
						if (__temp_useInt8134) {
							return ( ((double) (v) ) / 255 );
						}
						else {
							return ((double) (((int) (global::haxe.lang.Runtime.toInt(channel.@params[0])) )) );
						}
						
					}
					
					
					case 4:
					{
						return ((double) (((int) (global::haxe.lang.Runtime.toInt(channel.@params[0])) )) );
					}
					
					
					case 5:
					{
						if (global::haxe.lang.Runtime.toBool(channel.@params[0])) {
							return ((double) (1) );
						}
						else {
							return ((double) (0) );
						}
						
					}
					
					
				}
				
				return default(double);
			}
		}
		
		
		public static int getInt8Channel(global::thx.color.parse.ChannelInfo channel) {
			unchecked {
				switch (channel.index) {
					case 0:
					{
						return global::Math.round(( ( 255 * ((double) (global::haxe.lang.Runtime.toDouble(channel.@params[0])) ) ) / 100 ));
					}
					
					
					case 3:
					{
						return ((int) (global::haxe.lang.Runtime.toInt(channel.@params[0])) );
					}
					
					
					case 5:
					{
						if (global::haxe.lang.Runtime.toBool(channel.@params[0])) {
							return 1;
						}
						else {
							return 0;
						}
						
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap("unable to extract a valid int8 value");
					}
					
				}
				
			}
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.color.parse.ColorParser(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.color.parse.ColorParser();
		}
		
		
		public global::EReg pattern_color;
		
		public global::EReg pattern_channel;
		
		public virtual global::thx.color.parse.ColorInfo processHex(string s) {
			unchecked {
				if ( ! (global::thx.color.parse.ColorParser.isPureHex.match(s)) ) {
					if (string.Equals(global::haxe.lang.StringExt.substr(s, 0, new global::haxe.lang.Null<int>(1, true)), "#")) {
						if (( s.Length == 4 )) {
							s = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.charAt(s, 1), global::haxe.lang.StringExt.charAt(s, 1)), global::haxe.lang.StringExt.charAt(s, 2)), global::haxe.lang.StringExt.charAt(s, 2)), global::haxe.lang.StringExt.charAt(s, 3)), global::haxe.lang.StringExt.charAt(s, 3));
						}
						else if (( s.Length == 5 )) {
							s = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.charAt(s, 1), global::haxe.lang.StringExt.charAt(s, 1)), global::haxe.lang.StringExt.charAt(s, 2)), global::haxe.lang.StringExt.charAt(s, 2)), global::haxe.lang.StringExt.charAt(s, 3)), global::haxe.lang.StringExt.charAt(s, 3)), global::haxe.lang.StringExt.charAt(s, 4)), global::haxe.lang.StringExt.charAt(s, 4));
						}
						else {
							s = global::haxe.lang.StringExt.substr(s, 1, default(global::haxe.lang.Null<int>));
						}
						
					}
					else if (string.Equals(global::haxe.lang.StringExt.substr(s, 0, new global::haxe.lang.Null<int>(2, true)), "0x")) {
						s = global::haxe.lang.StringExt.substr(s, 2, default(global::haxe.lang.Null<int>));
					}
					else {
						return null;
					}
					
				}
				
				global::Array<object> channels = new global::Array<object>(new object[]{});
				while (( s.Length > 0 )) {
					channels.push(global::thx.color.parse.ChannelInfo.CIInt8((global::Std.parseInt(global::haxe.lang.Runtime.concat("0x", global::haxe.lang.StringExt.substr(s, 0, new global::haxe.lang.Null<int>(2, true))))).@value));
					s = global::haxe.lang.StringExt.substr(s, 2, default(global::haxe.lang.Null<int>));
				}
				
				if (( channels.length == 4 )) {
					return new global::thx.color.parse.ColorInfo("rgba", channels.slice(1, default(global::haxe.lang.Null<int>)).concat(new global::Array<object>(new object[]{((global::thx.color.parse.ChannelInfo) (channels[0]) )})));
				}
				else {
					return new global::thx.color.parse.ColorInfo("rgb", channels);
				}
				
			}
		}
		
		
		public virtual global::thx.color.parse.ColorInfo processColor(string s) {
			unchecked {
				if ( ! (this.pattern_color.match(s)) ) {
					return null;
				}
				
				string name = this.pattern_color.matched(1);
				if (string.Equals(null, name)) {
					return null;
				}
				
				name = name.ToLowerInvariant();
				string m2 = this.pattern_color.matched(2);
				global::Array<object> s_channels = ( (string.Equals(null, m2)) ? (new global::Array<object>(new object[]{})) : (global::haxe.lang.StringExt.split(m2, ",")) );
				global::Array<object> channels = new global::Array<object>(new object[]{});
				global::thx.color.parse.ChannelInfo channel = null;
				{
					int _g = 0;
					while (( _g < s_channels.length )) {
						string s_channel = global::haxe.lang.Runtime.toString(s_channels[_g]);
						 ++ _g;
						channel = this.processChannel(s_channel);
						if (( null == channel )) {
							return null;
						}
						
						channels.push(channel);
					}
					
				}
				
				return new global::thx.color.parse.ColorInfo(name, channels);
			}
		}
		
		
		public virtual global::thx.color.parse.ChannelInfo processChannel(string s) {
			unchecked {
				if ( ! (this.pattern_channel.match(s)) ) {
					return null;
				}
				
				string @value = this.pattern_channel.matched(1);
				string unit = this.pattern_channel.matched(2);
				if (string.Equals(unit, null)) {
					unit = "";
				}
				
				try {
					switch (unit) {
						case "":
						{
							if (string.Equals(@value, global::haxe.lang.Runtime.concat("", global::haxe.lang.Runtime.toString((global::thx.Ints.parse(@value, default(global::haxe.lang.Null<int>))).toDynamic())))) {
								global::haxe.lang.Null<int> i = global::thx.Ints.parse(@value, default(global::haxe.lang.Null<int>));
								if (global::haxe.lang.Runtime.eq((i).toDynamic(), 0)) {
									return global::thx.color.parse.ChannelInfo.CIBool(false);
								}
								else if (global::haxe.lang.Runtime.eq((i).toDynamic(), 1)) {
									return global::thx.color.parse.ChannelInfo.CIBool(true);
								}
								else if (( (i).@value < 256 )) {
									return global::thx.color.parse.ChannelInfo.CIInt8((i).@value);
								}
								else {
									return global::thx.color.parse.ChannelInfo.CIInt((i).@value);
								}
								
							}
							else if (global::thx.Floats.canParse(@value)) {
								return global::thx.color.parse.ChannelInfo.CIFloat(global::thx.Floats.parse(@value));
							}
							else {
								return null;
							}
							
						}
						
						
						case "%":
						{
							if (global::thx.Floats.canParse(@value)) {
								return global::thx.color.parse.ChannelInfo.CIPercent(global::thx.Floats.parse(@value));
							}
							else {
								return null;
							}
							
						}
						
						
						case "DEG":
						case "deg":
						{
							if (global::thx.Floats.canParse(@value)) {
								return global::thx.color.parse.ChannelInfo.CIDegree(global::thx.Floats.parse(@value));
							}
							else {
								return null;
							}
							
						}
						
						
						case "RAD":
						case "rad":
						{
							if (global::thx.Floats.canParse(@value)) {
								return global::thx.color.parse.ChannelInfo.CIDegree(( ( global::thx.Floats.parse(@value) * 180 ) / global::Math.PI ));
							}
							else {
								return null;
							}
							
						}
						
						
						default:
						{
							return null;
						}
						
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return null;
					}
					
				}
				
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2062037140:
					{
						this.pattern_channel = ((global::EReg) (@value) );
						return @value;
					}
					
					
					case 1249401588:
					{
						this.pattern_color = ((global::EReg) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2133869076:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "processChannel", 2133869076)) );
					}
					
					
					case 839978100:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "processColor", 839978100)) );
					}
					
					
					case 1461471148:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "processHex", 1461471148)) );
					}
					
					
					case 2062037140:
					{
						return this.pattern_channel;
					}
					
					
					case 1249401588:
					{
						return this.pattern_color;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 2133869076:
					{
						return this.processChannel(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 839978100:
					{
						return this.processColor(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					case 1461471148:
					{
						return this.processHex(global::haxe.lang.Runtime.toString(dynargs[0]));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("pattern_channel");
			baseArr.push("pattern_color");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color.parse {
	public class ColorParser_getFloatChannels_102__Fun : global::haxe.lang.Function {
		
		public ColorParser_getFloatChannels_102__Fun(bool a2) : base(1, 1) {
			this.a2 = a2;
		}
		
		
		public override double __hx_invoke1_f(double __fn_float1, object __fn_dyn1) {
			global::thx.color.parse.ChannelInfo a1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::thx.color.parse.ChannelInfo) (((object) (__fn_float1) )) )) : (((global::thx.color.parse.ChannelInfo) (__fn_dyn1) )) );
			return global::thx.color.parse.ColorParser.getFloatChannel(a1, new global::haxe.lang.Null<bool>(this.a2, true));
		}
		
		
		public bool a2;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color.parse {
	public class ColorInfo : global::haxe.lang.HxObject {
		
		public ColorInfo(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ColorInfo(string name, global::Array<object> channels) {
			global::thx.color.parse.ColorInfo.__hx_ctor_thx_color_parse_ColorInfo(this, name, channels);
		}
		
		
		public static void __hx_ctor_thx_color_parse_ColorInfo(global::thx.color.parse.ColorInfo __temp_me136, string name, global::Array<object> channels) {
			__temp_me136.name = name;
			__temp_me136.channels = channels;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.color.parse.ColorInfo(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::thx.color.parse.ColorInfo(global::haxe.lang.Runtime.toString(arr[0]), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (arr[1]) ))) ));
			}
		}
		
		
		public string name;
		
		public global::Array<object> channels;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("", this.name), ", channels: "), global::Std.@string(this.channels));
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1794026064:
					{
						this.channels = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1224700491:
					{
						this.name = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 1794026064:
					{
						return this.channels;
					}
					
					
					case 1224700491:
					{
						return this.name;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("channels");
			baseArr.push("name");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color.parse {
	public class ChannelInfo : global::haxe.lang.ParamEnum {
		
		public ChannelInfo(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"CIPercent", "CIFloat", "CIDegree", "CIInt8", "CIInt", "CIBool"};
		
		public static global::thx.color.parse.ChannelInfo CIPercent(double @value) {
			return new global::thx.color.parse.ChannelInfo(0, new object[]{@value});
		}
		
		
		public static global::thx.color.parse.ChannelInfo CIFloat(double @value) {
			unchecked {
				return new global::thx.color.parse.ChannelInfo(1, new object[]{@value});
			}
		}
		
		
		public static global::thx.color.parse.ChannelInfo CIDegree(double @value) {
			unchecked {
				return new global::thx.color.parse.ChannelInfo(2, new object[]{@value});
			}
		}
		
		
		public static global::thx.color.parse.ChannelInfo CIInt8(int @value) {
			unchecked {
				return new global::thx.color.parse.ChannelInfo(3, new object[]{@value});
			}
		}
		
		
		public static global::thx.color.parse.ChannelInfo CIInt(int @value) {
			unchecked {
				return new global::thx.color.parse.ChannelInfo(4, new object[]{@value});
			}
		}
		
		
		public static global::thx.color.parse.ChannelInfo CIBool(bool @value) {
			unchecked {
				return new global::thx.color.parse.ChannelInfo(5, new object[]{@value});
			}
		}
		
		
		public override string getTag() {
			return global::thx.color.parse.ChannelInfo.__hx_constructs[this.index];
		}
		
		
	}
}


