// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestColorParser : global::haxe.lang.HxObject {
		
		public TestColorParser(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestColorParser(int i) {
			global::thx.color.TestColorParser.__hx_ctor_thx_color_TestColorParser(this, i);
		}
		
		
		public static void __hx_ctor_thx_color_TestColorParser(global::thx.color.TestColorParser __temp_me133, int i) {
			__temp_me133.x = i;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.color.TestColorParser(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.color.TestColorParser(((int) (global::haxe.lang.Runtime.toInt(arr[0])) ));
		}
		
		
		public int x;
		
		public virtual void testFeatures() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.assert("a", new global::Array<object>(new object[]{global::thx.color.parse.ChannelInfo.CIInt8(2)}), "a(2)", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFeatures", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (16) )}));
					this.assert("aa", new global::Array<object>(new object[]{global::thx.color.parse.ChannelInfo.CIInt8(2)}), "aa(2)", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFeatures", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
					this.assert("rgb", new global::Array<object>(new object[]{global::thx.color.parse.ChannelInfo.CIInt8(2)}), "rgb(2)", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFeatures", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (22) )}));
					this.assert("rgba", new global::Array<object>(new object[]{global::thx.color.parse.ChannelInfo.CIInt8(2)}), "rgba(2)", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFeatures", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (25) )}));
					this.assert("hsla", new global::Array<object>(new object[]{global::thx.color.parse.ChannelInfo.CIDegree(((double) (1) )), global::thx.color.parse.ChannelInfo.CIPercent(((double) (2) )), global::thx.color.parse.ChannelInfo.CIPercent(((double) (3) )), global::thx.color.parse.ChannelInfo.CIFloat(0.5)}), "hsla(1deg,2%,3%,0.5)", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFeatures", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (28) )}));
				}
				
			}
		}
		
		
		public virtual void testChannels() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					this.assertStringChannel(global::thx.color.parse.ChannelInfo.CIDegree(((double) (1) )), "1deg", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChannels", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (35) )}));
					this.assertStringChannel(global::thx.color.parse.ChannelInfo.CIPercent(((double) (1) )), "1%", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChannels", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (36) )}));
					this.assertStringChannel(global::thx.color.parse.ChannelInfo.CIFloat(0.1), "0.1", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChannels", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (37) )}));
					this.assertStringChannel(global::thx.color.parse.ChannelInfo.CIBool(false), "0", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChannels", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (38) )}));
					this.assertStringChannel(global::thx.color.parse.ChannelInfo.CIBool(true), "1", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChannels", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (39) )}));
					this.assertStringChannel(global::thx.color.parse.ChannelInfo.CIInt8(2), "2", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChannels", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (40) )}));
					this.assertStringChannel(global::thx.color.parse.ChannelInfo.CIInt(256), "256", new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testChannels", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (41) )}));
				}
				
			}
		}
		
		
		public virtual void testInvalidColor() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isNull(global::thx.color.parse.ColorParser.parseColor("x"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvalidColor", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (46) )}));
					global::utest.Assert.isNull(global::thx.color.parse.ColorParser.parseColor("x[]"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvalidColor", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (47) )}));
					global::utest.Assert.isNull(global::thx.color.parse.ColorParser.parseColor("x(x)"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvalidColor", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
				}
				
			}
		}
		
		
		public virtual void testInvalidChannel() {
			unchecked {
				int _g1 = 0;
				int _g = this.x;
				while (( _g1 < _g )) {
					 ++ _g1;
					global::utest.Assert.isNull(global::thx.color.parse.ColorParser.parseChannel("x"), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testInvalidChannel", "thx.color.TestColorParser", "TestColorParser.hx"}, new int[]{1981972957}, new double[]{((double) (53) )}));
				}
				
			}
		}
		
		
		public virtual void assertStringChannel(global::thx.color.parse.ChannelInfo expected, string test, object pos) {
			this.assertChannel(expected, global::thx.color.parse.ColorParser.parseChannel(test), pos);
		}
		
		
		public virtual void assertChannel(global::thx.color.parse.ChannelInfo expected, global::thx.color.parse.ChannelInfo test, object pos) {
			if (( null == test )) {
				global::utest.Assert.fail("channel is null", pos);
				return;
			}
			
			string ec = global::Type.enumConstructor(expected);
			string tc = global::Type.enumConstructor(test);
			object ep = global::Type.enumParameters(expected)[0];
			object tp = global::Type.enumParameters(test)[0];
			global::utest.Assert.@equals(ec, tc, null, pos);
			global::utest.Assert.@equals(ep, tp, null, pos);
		}
		
		
		public virtual void assert(string name, global::Array<object> channels, string test_string, object pos) {
			global::thx.color.parse.ColorInfo expected = new global::thx.color.parse.ColorInfo(name, channels);
			global::thx.color.parse.ColorInfo test = global::thx.color.parse.ColorParser.parseColor(test_string);
			if (( null == test )) {
				global::utest.Assert.fail("test is null", pos);
				return;
			}
			
			global::utest.Assert.@equals(expected.name, test.name, null, pos);
			{
				int _g1 = 0;
				int _g = expected.channels.length;
				while (( _g1 < _g )) {
					int i = _g1++;
					this.assertChannel(((global::thx.color.parse.ChannelInfo) (expected.channels[i]) ), ((global::thx.color.parse.ChannelInfo) (test.channels[i]) ), pos);
				}
				
			}
			
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1275283142:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assert", 1275283142)) );
					}
					
					
					case 750315165:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertChannel", 750315165)) );
					}
					
					
					case 266269004:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "assertStringChannel", 266269004)) );
					}
					
					
					case 822948478:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testInvalidChannel", 822948478)) );
					}
					
					
					case 1341271646:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testInvalidColor", 1341271646)) );
					}
					
					
					case 1576390850:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testChannels", 1576390850)) );
					}
					
					
					case 98472815:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFeatures", 98472815)) );
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1275283142:
					{
						this.assert(global::haxe.lang.Runtime.toString(dynargs[0]), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[1]) ))) ), global::haxe.lang.Runtime.toString(dynargs[2]), dynargs[3]);
						break;
					}
					
					
					case 750315165:
					{
						this.assertChannel(((global::thx.color.parse.ChannelInfo) (dynargs[0]) ), ((global::thx.color.parse.ChannelInfo) (dynargs[1]) ), dynargs[2]);
						break;
					}
					
					
					case 266269004:
					{
						this.assertStringChannel(((global::thx.color.parse.ChannelInfo) (dynargs[0]) ), global::haxe.lang.Runtime.toString(dynargs[1]), dynargs[2]);
						break;
					}
					
					
					case 822948478:
					{
						this.testInvalidChannel();
						break;
					}
					
					
					case 1341271646:
					{
						this.testInvalidColor();
						break;
					}
					
					
					case 1576390850:
					{
						this.testChannels();
						break;
					}
					
					
					case 98472815:
					{
						this.testFeatures();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("x");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
	}
}


