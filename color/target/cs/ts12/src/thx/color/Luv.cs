// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color._Luv {
	public sealed class Luv_Impl_ {
		
		
		
		
		
		
		
		public static global::Array<double> create(double l, double u, double v) {
			return ((global::Array<double>) (new global::Array<double>(new double[]{l, u, v})) );
		}
		
		
		public static global::Array<double> fromFloats(global::Array<double> arr) {
			unchecked {
				global::thx.ArrayFloats.resize(arr, 3, default(global::haxe.lang.Null<double>));
				return ((global::Array<double>) (new global::Array<double>(new double[]{arr[0], arr[1], arr[2]})) );
			}
		}
		
		
		public static global::Array<double> fromString(string color) {
			unchecked {
				global::thx.color.parse.ColorInfo info = global::thx.color.parse.ColorParser.parseColor(color);
				if (( null == info )) {
					return null;
				}
				
				try {
					switch (info.name) {
						case "cieluv":
						case "luv":
						{
							return ((global::Array<double>) (global::thx.color.parse.ColorParser.getFloatChannels(info.channels, 3, false)) );
						}
						
						
						default:
						{
							return null;
						}
						
					}
					
				}
				catch (global::System.Exception __temp_catchallException1){
					global::haxe.lang.Exceptions.exception = __temp_catchallException1;
					object __temp_catchall2 = __temp_catchallException1;
					if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
						__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
					}
					
					{
						object e = __temp_catchall2;
						return null;
					}
					
				}
				
				
			}
		}
		
		
		public static global::Array<double> _new(global::Array<double> channels) {
			return ((global::Array<double>) (channels) );
		}
		
		
		public static global::Array<double> interpolate(global::Array<double> this1, global::Array<double> other, double t) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1]), global::thx.Floats.interpolate(t, ((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2])})) );
			}
		}
		
		
		public static global::Array<double> min(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::System.Math.Min(((double) (((global::Array<double>) (this1) )[0]) ), ((double) (((global::Array<double>) (other) )[0]) )), global::System.Math.Min(((double) (((global::Array<double>) (this1) )[1]) ), ((double) (((global::Array<double>) (other) )[1]) )), global::System.Math.Min(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (other) )[2]) ))})) );
			}
		}
		
		
		public static global::Array<double> max(global::Array<double> this1, global::Array<double> other) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::System.Math.Max(((double) (((global::Array<double>) (this1) )[0]) ), ((double) (((global::Array<double>) (other) )[0]) )), global::System.Math.Max(((double) (((global::Array<double>) (this1) )[1]) ), ((double) (((global::Array<double>) (other) )[1]) )), global::System.Math.Max(((double) (((global::Array<double>) (this1) )[2]) ), ((double) (((global::Array<double>) (other) )[2]) ))})) );
			}
		}
		
		
		public static global::Array<double> normalize(global::Array<double> this1) {
			unchecked {
				global::Array<double> this2 = null;
				double v = ((global::Array<double>) (this1) )[0];
				double tmp = ( (( v < 0 )) ? (((double) (0) )) : (( (( v > 1 )) ? (((double) (1) )) : (v) )) );
				double v1 = ((global::Array<double>) (this1) )[1];
				double tmp1 = ( (( v1 < -0.436 )) ? (-0.436) : (( (( v1 > 0.436 )) ? (0.436) : (v1) )) );
				double v2 = ((global::Array<double>) (this1) )[2];
				this2 = new global::Array<double>(new double[]{tmp, tmp1, ( (( v2 < -0.615 )) ? (-0.615) : (( (( v2 > 0.615 )) ? (0.615) : (v2) )) )});
				return ((global::Array<double>) (this2) );
			}
		}
		
		
		public static global::Array<double> roundTo(global::Array<double> this1, int decimals) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{global::thx.Floats.roundTo(((global::Array<double>) (this1) )[0], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[1], decimals), global::thx.Floats.roundTo(((global::Array<double>) (this1) )[2], decimals)})) );
			}
		}
		
		
		public static global::Array<double> withY(global::Array<double> this1, double newy) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{newy, ((global::Array<double>) (this1) )[1], ((global::Array<double>) (this1) )[2]})) );
			}
		}
		
		
		public static global::Array<double> withU(global::Array<double> this1, double newu) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], newu, ((global::Array<double>) (this1) )[2]})) );
			}
		}
		
		
		public static global::Array<double> withV(global::Array<double> this1, double newv) {
			unchecked {
				return ((global::Array<double>) (new global::Array<double>(new double[]{((global::Array<double>) (this1) )[0], ((global::Array<double>) (this1) )[1], newv})) );
			}
		}
		
		
		public static string toString(global::Array<double> this1) {
			unchecked {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("cieluv(", global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[0])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[1])), ","), global::haxe.lang.Runtime.toString(((global::Array<double>) (this1) )[2])), ")");
			}
		}
		
		
		public static bool @equals(global::Array<double> this1, global::Array<double> other) {
			return global::thx.color._Luv.Luv_Impl_.nearEquals(this1, other, default(global::haxe.lang.Null<double>));
		}
		
		
		public static bool nearEquals(global::Array<double> this1, global::Array<double> other, global::haxe.lang.Null<double> tolerance) {
			unchecked {
				global::haxe.lang.Null<double> __temp_tolerance156 = ( ( ! (tolerance.hasValue) ) ? (new global::haxe.lang.Null<double>(1e-9, true)) : (tolerance) );
				if (( global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[0], ((global::Array<double>) (other) )[0], __temp_tolerance156) && global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[1], ((global::Array<double>) (other) )[1], __temp_tolerance156) )) {
					return global::thx.Floats.nearEquals(((global::Array<double>) (this1) )[2], ((global::Array<double>) (other) )[2], __temp_tolerance156);
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public static global::Array<double> toLab(global::Array<double> this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toLab(global::thx.color._Luv.Luv_Impl_.toXyz(this1));
		}
		
		
		public static global::Array<double> toLCh(global::Array<double> this1) {
			return global::thx.color._Lab.Lab_Impl_.toLCh(global::thx.color._Luv.Luv_Impl_.toLab(this1));
		}
		
		
		public static global::Array<double> toCmy(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmy(global::thx.color._Luv.Luv_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCmyk(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toCmyk(global::thx.color._Luv.Luv_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toCubeHelix(global::Array<double> this1) {
			unchecked {
				return global::thx.color._Rgbx.Rgbx_Impl_.toCubeHelixWithGamma(((global::Array<double>) (global::thx.color._Luv.Luv_Impl_.toRgbx(this1)) ), ((double) (1) ));
			}
		}
		
		
		public static double toGrey(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toGrey(global::thx.color._Luv.Luv_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsl(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsl(global::thx.color._Luv.Luv_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHsv(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toHsv(global::thx.color._Luv.Luv_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toHunterLab(global::Array<double> this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toHunterLab(global::thx.color._Luv.Luv_Impl_.toXyz(this1));
		}
		
		
		public static int toRgb(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgb(global::thx.color._Luv.Luv_Impl_.toRgbx(this1));
		}
		
		
		public static int toRgba(global::Array<double> this1) {
			return global::thx.color._Rgbxa.Rgbxa_Impl_.toRgba(global::thx.color._Luv.Luv_Impl_.toRgbxa(this1));
		}
		
		
		public static global::Array<double> toRgbx(global::Array<double> this1) {
			return global::thx.color._Xyz.Xyz_Impl_.toRgbx(global::thx.color._Luv.Luv_Impl_.toXyz(this1));
		}
		
		
		public static global::Array<double> toRgbxa(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toRgbxa(global::thx.color._Luv.Luv_Impl_.toRgbx(this1));
		}
		
		
		public static double toTemperature(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toTemperature(global::thx.color._Luv.Luv_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toYxy(global::Array<double> this1) {
			return global::thx.color._Rgbx.Rgbx_Impl_.toYxy(global::thx.color._Luv.Luv_Impl_.toRgbx(this1));
		}
		
		
		public static global::Array<double> toXyz(global::Array<double> this1) {
			unchecked {
				double l = ( ((global::Array<double>) (this1) )[0] * 100 );
				double u = ( ((global::Array<double>) (this1) )[1] * 100 );
				double v = ( ((global::Array<double>) (this1) )[2] * 100 );
				double uPrime = ( (( (( l == 0 )) ? (((double) (0) )) : (( u / (( 13 * l )) )) )) + ( global::thx.color._Xyz.Xyz_Impl_.get_u(global::thx.color._Xyz.Xyz_Impl_.whiteReference) * 100 ) );
				double vPrime = ( (( (( l == 0 )) ? (((double) (0) )) : (( v / (( 13 * l )) )) )) + ( global::thx.color._Xyz.Xyz_Impl_.get_v(global::thx.color._Xyz.Xyz_Impl_.whiteReference) * 100 ) );
				double Y = ( (( l > 8 )) ? (( ( ((global::Array<double>) (global::thx.color._Xyz.Xyz_Impl_.whiteReference) )[1] * 100 ) * global::System.Math.Pow(((double) (( (( l + 16 )) / 116 )) ), ((double) (3) )) )) : (( ( ( ((global::Array<double>) (global::thx.color._Xyz.Xyz_Impl_.whiteReference) )[1] * 100 ) * l ) * global::System.Math.Pow(((double) (0.103448275862068964) ), ((double) (3) )) )) );
				return ((global::Array<double>) (new global::Array<double>(new double[]{( ( ( ( Y * 9 ) * uPrime ) / (( 4 * vPrime )) ) / 100 ), ( Y / 100 ), ( ( ( Y * (( ( 12 - ( 3 * uPrime ) ) - ( 20 * vPrime ) )) ) / (( 4 * vPrime )) ) / 100 )})) );
			}
		}
		
		
		public static double get_l(global::Array<double> this1) {
			return this1[0];
		}
		
		
		public static double get_u(global::Array<double> this1) {
			unchecked {
				return this1[1];
			}
		}
		
		
		public static double get_v(global::Array<double> this1) {
			unchecked {
				return this1[2];
			}
		}
		
		
	}
}


