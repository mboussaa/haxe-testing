// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx.color {
	public class TestHsl : global::haxe.lang.HxObject {
		
		public TestHsl(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TestHsl() {
			global::thx.color.TestHsl.__hx_ctor_thx_color_TestHsl(this);
		}
		
		
		public static void __hx_ctor_thx_color_TestHsl(global::thx.color.TestHsl __temp_me160) {
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::thx.color.TestHsl(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::thx.color.TestHsl();
		}
		
		
		public virtual void testBasics() {
			unchecked {
				global::Array<double> hsl = ((global::Array<double>) (new global::Array<double>(new double[]{((double) (1) ), ((double) (0) ), ((double) (0) )})) );
				global::utest.Assert.@equals(1, ((global::Array<double>) (hsl) )[0], null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestHsl", "TestHsl.hx"}, new int[]{1981972957}, new double[]{((double) (11) )}));
				global::utest.Assert.@equals(0, ((global::Array<double>) (hsl) )[1], null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestHsl", "TestHsl.hx"}, new int[]{1981972957}, new double[]{((double) (12) )}));
				global::utest.Assert.@equals(0, ((global::Array<double>) (hsl) )[2], null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testBasics", "thx.color.TestHsl", "TestHsl.hx"}, new int[]{1981972957}, new double[]{((double) (13) )}));
			}
		}
		
		
		public virtual void testStrings() {
			unchecked {
				global::Array<double> hsl = ((global::Array<double>) (new global::Array<double>(new double[]{((double) (0) ), ((double) (0) ), ((double) (1) )})) );
				global::utest.Assert.@equals("hsl(0,0%,100%)", global::thx.color._Hsl.Hsl_Impl_.toString(hsl), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStrings", "thx.color.TestHsl", "TestHsl.hx"}, new int[]{1981972957}, new double[]{((double) (18) )}));
				global::utest.Assert.@equals("hsl(0,0%,100%)", global::thx.color._Hsl.Hsl_Impl_.toCss3(hsl), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testStrings", "thx.color.TestHsl", "TestHsl.hx"}, new int[]{1981972957}, new double[]{((double) (19) )}));
			}
		}
		
		
		public virtual void testFromString() {
			unchecked {
				global::utest.Assert.isTrue(global::thx.color._Hsl.Hsl_Impl_.@equals(((global::Array<double>) (new global::Array<double>(new double[]{0.5, 0.2, 0.1})) ), global::thx.color._Hsl.Hsl_Impl_.fromString("hsl(50%,0.2,10%)")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestHsl", "TestHsl.hx"}, new int[]{1981972957}, new double[]{((double) (23) )}));
				global::utest.Assert.isTrue(global::thx.color._Hsla.Hsla_Impl_.@equals(((global::Array<double>) (new global::Array<double>(new double[]{0.5, 0.2, 0.1, 0.3})) ), global::thx.color._Hsla.Hsla_Impl_.fromString("hsla(50%,0.2,10%,0.3)")), null, new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"testFromString", "thx.color.TestHsl", "TestHsl.hx"}, new int[]{1981972957}, new double[]{((double) (24) )}));
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1952928973:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testFromString", 1952928973)) );
					}
					
					
					case 901545040:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testStrings", 901545040)) );
					}
					
					
					case 1847555063:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "testBasics", 1847555063)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1952928973:
					{
						this.testFromString();
						break;
					}
					
					
					case 901545040:
					{
						this.testStrings();
						break;
					}
					
					
					case 1847555063:
					{
						this.testBasics();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
	}
}


