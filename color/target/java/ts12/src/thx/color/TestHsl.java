// Generated by Haxe 3.3.0
package thx.color;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestHsl extends haxe.lang.HxObject
{
	public TestHsl(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestHsl(int i)
	{
		//line 8 "/shared/color/test/thx/color/TestHsl.hx"
		thx.color.TestHsl.__hx_ctor_thx_color_TestHsl(this, i);
	}
	
	
	public static void __hx_ctor_thx_color_TestHsl(thx.color.TestHsl __temp_me140, int i)
	{
		//line 9 "/shared/color/test/thx/color/TestHsl.hx"
		__temp_me140.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 6 "/shared/color/test/thx/color/TestHsl.hx"
		return new thx.color.TestHsl(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 6 "/shared/color/test/thx/color/TestHsl.hx"
		return new thx.color.TestHsl(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testBasics()
	{
		//line 13 "/shared/color/test/thx/color/TestHsl.hx"
		int _g1 = 0;
		//line 13 "/shared/color/test/thx/color/TestHsl.hx"
		int _g = this.x;
		//line 13 "/shared/color/test/thx/color/TestHsl.hx"
		while (( _g1 < _g ))
		{
			//line 13 "/shared/color/test/thx/color/TestHsl.hx"
			 ++ _g1;
			//line 14 "/shared/color/test/thx/color/TestHsl.hx"
			haxe.root.Array<java.lang.Object> this1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) )});
			//line 14 "/shared/color/test/thx/color/TestHsl.hx"
			haxe.root.Array<java.lang.Object> hsl = ((haxe.root.Array<java.lang.Object>) (this1) );
			//line 15 "/shared/color/test/thx/color/TestHsl.hx"
			utest.Assert.equals(1, ((double) (haxe.lang.Runtime.toDouble(((haxe.root.Array<java.lang.Object>) (hsl) ).__get(0))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestHsl", "TestHsl.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
			//line 16 "/shared/color/test/thx/color/TestHsl.hx"
			utest.Assert.equals(0, ((double) (haxe.lang.Runtime.toDouble(((haxe.root.Array<java.lang.Object>) (hsl) ).__get(1))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestHsl", "TestHsl.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
			//line 17 "/shared/color/test/thx/color/TestHsl.hx"
			utest.Assert.equals(0, ((double) (haxe.lang.Runtime.toDouble(((haxe.root.Array<java.lang.Object>) (hsl) ).__get(2))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestHsl", "TestHsl.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (17) )) )}));
		}
		
	}
	
	
	public void testStrings()
	{
		//line 21 "/shared/color/test/thx/color/TestHsl.hx"
		int _g1 = 0;
		//line 21 "/shared/color/test/thx/color/TestHsl.hx"
		int _g = this.x;
		//line 21 "/shared/color/test/thx/color/TestHsl.hx"
		while (( _g1 < _g ))
		{
			//line 21 "/shared/color/test/thx/color/TestHsl.hx"
			 ++ _g1;
			//line 22 "/shared/color/test/thx/color/TestHsl.hx"
			haxe.root.Array<java.lang.Object> this1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )});
			//line 22 "/shared/color/test/thx/color/TestHsl.hx"
			haxe.root.Array<java.lang.Object> hsl = ((haxe.root.Array<java.lang.Object>) (this1) );
			//line 23 "/shared/color/test/thx/color/TestHsl.hx"
			utest.Assert.equals("hsl(0,0%,100%)", thx.color._Hsl.Hsl_Impl_.toString(hsl), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestHsl", "TestHsl.hx", "testStrings"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
			//line 24 "/shared/color/test/thx/color/TestHsl.hx"
			utest.Assert.equals("hsl(0,0%,100%)", thx.color._Hsl.Hsl_Impl_.toCss3(hsl), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestHsl", "TestHsl.hx", "testStrings"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
		}
		
	}
	
	
	public void testFromString()
	{
		//line 28 "/shared/color/test/thx/color/TestHsl.hx"
		int _g1 = 0;
		//line 28 "/shared/color/test/thx/color/TestHsl.hx"
		int _g = this.x;
		//line 28 "/shared/color/test/thx/color/TestHsl.hx"
		while (( _g1 < _g ))
		{
			//line 28 "/shared/color/test/thx/color/TestHsl.hx"
			 ++ _g1;
			//line 29 "/shared/color/test/thx/color/TestHsl.hx"
			haxe.root.Array<java.lang.Object> this1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.5) ), ((java.lang.Object) (0.2) ), ((java.lang.Object) (0.1) )});
			//line 29 "/shared/color/test/thx/color/TestHsl.hx"
			utest.Assert.isTrue(thx.color._Hsl.Hsl_Impl_.equals(((haxe.root.Array<java.lang.Object>) (this1) ), thx.color._Hsl.Hsl_Impl_.fromString("hsl(50%,0.2,10%)")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestHsl", "TestHsl.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
			//line 30 "/shared/color/test/thx/color/TestHsl.hx"
			haxe.root.Array<java.lang.Object> this2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.5) ), ((java.lang.Object) (0.2) ), ((java.lang.Object) (0.1) ), ((java.lang.Object) (0.3) )});
			//line 30 "/shared/color/test/thx/color/TestHsl.hx"
			utest.Assert.isTrue(thx.color._Hsla.Hsla_Impl_.equals(((haxe.root.Array<java.lang.Object>) (this2) ), thx.color._Hsla.Hsla_Impl_.fromString("hsla(50%,0.2,10%,0.3)")), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestHsl", "TestHsl.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 6 "/shared/color/test/thx/color/TestHsl.hx"
		{
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					if (field.equals("x")) 
					{
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						this.x = ((int) (value) );
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						return value;
					}
					
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/color/test/thx/color/TestHsl.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 6 "/shared/color/test/thx/color/TestHsl.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 6 "/shared/color/test/thx/color/TestHsl.hx"
		{
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					if (field.equals("x")) 
					{
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						return value;
					}
					
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/color/test/thx/color/TestHsl.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 6 "/shared/color/test/thx/color/TestHsl.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 6 "/shared/color/test/thx/color/TestHsl.hx"
		{
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			switch (field.hashCode())
			{
				case 1443991181:
				{
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					if (field.equals("testFromString")) 
					{
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromString")) );
					}
					
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					break;
				}
				
				
				case 120:
				{
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					if (field.equals("x")) 
					{
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						return this.x;
					}
					
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					break;
				}
				
				
				case 2020609424:
				{
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					if (field.equals("testStrings")) 
					{
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testStrings")) );
					}
					
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					break;
				}
				
				
				case 1223535927:
				{
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					if (field.equals("testBasics")) 
					{
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBasics")) );
					}
					
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/color/test/thx/color/TestHsl.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 6 "/shared/color/test/thx/color/TestHsl.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 6 "/shared/color/test/thx/color/TestHsl.hx"
		{
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					if (field.equals("x")) 
					{
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						return ((double) (this.x) );
					}
					
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/color/test/thx/color/TestHsl.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 6 "/shared/color/test/thx/color/TestHsl.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 6 "/shared/color/test/thx/color/TestHsl.hx"
		{
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			switch (field.hashCode())
			{
				case 1443991181:
				{
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					if (field.equals("testFromString")) 
					{
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						this.testFromString();
					}
					
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					break;
				}
				
				
				case 1223535927:
				{
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					if (field.equals("testBasics")) 
					{
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						this.testBasics();
					}
					
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					break;
				}
				
				
				case 2020609424:
				{
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					if (field.equals("testStrings")) 
					{
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/color/test/thx/color/TestHsl.hx"
						this.testStrings();
					}
					
					//line 6 "/shared/color/test/thx/color/TestHsl.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/color/test/thx/color/TestHsl.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 6 "/shared/color/test/thx/color/TestHsl.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 6 "/shared/color/test/thx/color/TestHsl.hx"
		baseArr.push("x");
		//line 6 "/shared/color/test/thx/color/TestHsl.hx"
		{
			//line 6 "/shared/color/test/thx/color/TestHsl.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


