// Generated by Haxe 3.3.0
package thx.color;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestRoundTrip_testLabRoundtrip_75__Fun extends haxe.lang.Function
{
	public TestRoundTrip_testLabRoundtrip_75__Fun()
	{
		//line 75 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
		super(1, 0);
	}
	
	
	public static thx.color.TestRoundTrip_testLabRoundtrip_75__Fun __hx_current;
	
	@Override public java.lang.Object __hx_invoke1_o(double __fn_float1, java.lang.Object __fn_dyn1)
	{
		//line 75 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
		java.lang.Object _1 = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((java.lang.Object) (__fn_float1) )) : (( (( __fn_dyn1 == null )) ? (null) : (((java.lang.Object) (__fn_dyn1) )) )) );
		//line 75 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
		{
			//line 76 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._Rgbx.Rgbx_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "rgbx", true)) )), thx.color._Rgbx.Rgbx_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "rgbx", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (76) )) )}));
			//line 77 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._LCh.LCh_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lch", true)) )), thx.color._LCh.LCh_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lch", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (77) )) )}));
			//line 78 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._Cmy.Cmy_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "cmy", true)) )), thx.color._Cmy.Cmy_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "cmy", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (78) )) )}));
			//line 79 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._Cmyk.Cmyk_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "cmyk", true)) )), thx.color._Cmyk.Cmyk_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "cmyk", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
			//line 80 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._CubeHelix.CubeHelix_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "ch", true)) )), thx.color._CubeHelix.CubeHelix_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "ch", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (80) )) )}));
			//line 81 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._Hsl.Hsl_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hsl", true)) )), thx.color._Hsl.Hsl_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hsl", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (81) )) )}));
			//line 82 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._Hsv.Hsv_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hsv", true)) )), thx.color._Hsv.Hsv_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hsv", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (82) )) )}));
			//line 83 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._HunterLab.HunterLab_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hl", true)) )), thx.color._HunterLab.HunterLab_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hl", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (83) )) )}));
			//line 84 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._Xyz.Xyz_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "xyz", true)) )), thx.color._Xyz.Xyz_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "xyz", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (84) )) )}));
			//line 85 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._Yuv.Yuv_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "yuv", true)) )), thx.color._Yuv.Yuv_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "yuv", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (85) )) )}));
			//line 86 "/shared/thx.color/test/thx/color/TestRoundTrip.hx"
			thx.color.TestRoundTrip.assertLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), thx.color._Yxy.Yxy_Impl_.toLab(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "yxy", true)) )), thx.color._Yxy.Yxy_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "yxy", true)) )), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testLabRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (86) )) )}));
		}
		
		//line 86 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/macro/lambda/SlambdaMacro.hx"
		return null;
	}
	
	
}


