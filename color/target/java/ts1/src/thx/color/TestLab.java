// Generated by Haxe 3.3.0
package thx.color;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestLab extends haxe.lang.HxObject
{
	public TestLab(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestLab()
	{
		//line 7 "/shared/thx.color/test/thx/color/TestLab.hx"
		thx.color.TestLab.__hx_ctor_thx_color_TestLab(this);
	}
	
	
	public static void __hx_ctor_thx_color_TestLab(thx.color.TestLab __temp_me140)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
		return new thx.color.TestLab(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
		return new thx.color.TestLab();
	}
	
	
	public void testBasics()
	{
		//line 10 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> this1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (100) ), ((java.lang.Object) (10) ), ((java.lang.Object) (-10) )});
		//line 10 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> color = ((haxe.root.Array<java.lang.Object>) (this1) );
		//line 11 "/shared/thx.color/test/thx/color/TestLab.hx"
		utest.Assert.equals(100, ((double) (haxe.lang.Runtime.toDouble(((haxe.root.Array<java.lang.Object>) (color) ).__get(0))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestLab", "TestLab.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (11) )) )}));
		//line 12 "/shared/thx.color/test/thx/color/TestLab.hx"
		utest.Assert.equals(10, ((double) (haxe.lang.Runtime.toDouble(((haxe.root.Array<java.lang.Object>) (color) ).__get(1))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestLab", "TestLab.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (12) )) )}));
		//line 13 "/shared/thx.color/test/thx/color/TestLab.hx"
		utest.Assert.equals(-10, ((double) (haxe.lang.Runtime.toDouble(((haxe.root.Array<java.lang.Object>) (color) ).__get(2))) ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestLab", "TestLab.hx", "testBasics"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (13) )) )}));
	}
	
	
	public void testString()
	{
		//line 17 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> this1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (100) ), ((java.lang.Object) (10) ), ((java.lang.Object) (-10) )});
		//line 17 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> color = ((haxe.root.Array<java.lang.Object>) (this1) );
		//line 18 "/shared/thx.color/test/thx/color/TestLab.hx"
		utest.Assert.equals("lab(100,10,-10)", thx.color._Lab.Lab_Impl_.toString(color), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestLab", "TestLab.hx", "testString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
	}
	
	
	public void testParse()
	{
		//line 22 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> color = thx.color._Lab.Lab_Impl_.fromString("lab(100,10,-10)");
		//line 23 "/shared/thx.color/test/thx/color/TestLab.hx"
		utest.Assert.equals("lab(100,10,-10)", thx.color._Lab.Lab_Impl_.toString(color), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestLab", "TestLab.hx", "testParse"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )}));
	}
	
	
	public void testFromFloat()
	{
		//line 27 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> s = thx.color._Lab.Lab_Impl_.fromString("lab(50,10,-10)");
		//line 27 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> f = thx.color._Lab.Lab_Impl_.fromFloats(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (50.0) ), ((java.lang.Object) (10.0) ), ((java.lang.Object) (-10.0) )}));
		//line 29 "/shared/thx.color/test/thx/color/TestLab.hx"
		utest.Assert.same(s, f, null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestLab", "TestLab.hx", "testFromFloat"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (29) )) )}));
	}
	
	
	public void testFromString()
	{
		//line 34 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> this1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (50) ), ((java.lang.Object) (10) ), ((java.lang.Object) (-10) )});
		//line 34 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> color = ((haxe.root.Array<java.lang.Object>) (this1) );
		//line 35 "/shared/thx.color/test/thx/color/TestLab.hx"
		utest.Assert.same(color, thx.color._Lab.Lab_Impl_.fromString("lab(50,10,-10)"), null, null, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestLab", "TestLab.hx", "testFromString"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
	}
	
	
	public void testDistance()
	{
		//line 39 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> orange = thx.color._Rgb.Rgb_Impl_.toLab(thx.color.palettes.Web.orange);
		//line 39 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> red = thx.color._Rgb.Rgb_Impl_.toLab(thx.color.palettes.Web.red);
		//line 39 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<java.lang.Object> blue = thx.color._Rgb.Rgb_Impl_.toLab(thx.color.palettes.Web.blue);
		//line 39 "/shared/thx.color/test/thx/color/TestLab.hx"
		double distOrangeRed = thx.color._Lab.Lab_Impl_.distance(orange, red);
		//line 39 "/shared/thx.color/test/thx/color/TestLab.hx"
		double distOrangeBlue = thx.color._Lab.Lab_Impl_.distance(orange, blue);
		//line 44 "/shared/thx.color/test/thx/color/TestLab.hx"
		utest.Assert.isTrue(( distOrangeRed < distOrangeBlue ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestLab", "TestLab.hx", "testDistance"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (44) )) )}));
	}
	
	
	public void testMatch()
	{
		//line 48 "/shared/thx.color/test/thx/color/TestLab.hx"
		haxe.root.Array<haxe.root.Array<java.lang.Object>> arr = new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{thx.color._Rgb.Rgb_Impl_.toLab(thx.color.palettes.Web.red), thx.color._Rgb.Rgb_Impl_.toLab(thx.color.palettes.Web.blue)});
		//line 49 "/shared/thx.color/test/thx/color/TestLab.hx"
		utest.Assert.isTrue(thx.color._Lab.Lab_Impl_.equals(thx.color._Lab.Lab_Impl_.match(thx.color._Rgb.Rgb_Impl_.toLab(thx.color.palettes.Web.orange), arr), thx.color._Rgb.Rgb_Impl_.toLab(thx.color.palettes.Web.red)), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestLab", "TestLab.hx", "testMatch"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
		{
			//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
			switch (field.hashCode())
			{
				case -1197297581:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testMatch")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testMatch")) );
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case 1223535927:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testBasics")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testBasics")) );
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case 1002799783:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testDistance")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testDistance")) );
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case 1727748931:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testString")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testString")) );
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case 1443991181:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testFromString")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromString")) );
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case -1194528447:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testParse")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testParse")) );
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case 727069792:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testFromFloat")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFromFloat")) );
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
		{
			//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
			boolean __temp_executeDef1 = true;
			//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
			switch (field.hashCode())
			{
				case -1197297581:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testMatch")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						this.testMatch();
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case 1223535927:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testBasics")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						this.testBasics();
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case 1002799783:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testDistance")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						this.testDistance();
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case 1727748931:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testString")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						this.testString();
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case 1443991181:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testFromString")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						this.testFromString();
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case -1194528447:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testParse")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						this.testParse();
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
				case 727069792:
				{
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					if (field.equals("testFromFloat")) 
					{
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						__temp_executeDef1 = false;
						//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
						this.testFromFloat();
					}
					
					//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
					break;
				}
				
				
			}
			
			//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
			if (__temp_executeDef1) 
			{
				//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 6 "/shared/thx.color/test/thx/color/TestLab.hx"
		return null;
	}
	
	
}


