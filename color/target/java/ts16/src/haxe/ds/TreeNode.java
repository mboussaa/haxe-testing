// Generated by Haxe 3.3.0
package haxe.ds;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TreeNode<K, V> extends haxe.lang.HxObject
{
	public TreeNode(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TreeNode(haxe.ds.TreeNode<K, V> l, K k, V v, haxe.ds.TreeNode<K, V> r, java.lang.Object h)
	{
		//line 223 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		haxe.ds.TreeNode.__hx_ctor_haxe_ds_TreeNode(((haxe.ds.TreeNode<K, V>) (this) ), ((haxe.ds.TreeNode<K, V>) (l) ), ((K) (k) ), ((V) (v) ), ((haxe.ds.TreeNode<K, V>) (r) ), ((java.lang.Object) (h) ));
	}
	
	
	public static <K_c, V_c> void __hx_ctor_haxe_ds_TreeNode(haxe.ds.TreeNode<K_c, V_c> __temp_me18, haxe.ds.TreeNode<K_c, V_c> l, K_c k, V_c v, haxe.ds.TreeNode<K_c, V_c> r, java.lang.Object h)
	{
		//line 223 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		int __temp_h17 = ( (haxe.lang.Runtime.eq(h, null)) ? (-1) : (((int) (haxe.lang.Runtime.toInt(h)) )) );
		//line 224 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		__temp_me18.left = l;
		//line 225 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		__temp_me18.key = k;
		//line 226 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		__temp_me18.value = v;
		//line 227 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		__temp_me18.right = r;
		//line 228 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		if (( __temp_h17 == -1 )) 
		{
			//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			int tmp = 0;
			//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			haxe.ds.TreeNode<K_c, V_c> _this = __temp_me18.left;
			//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			int tmp1 = ( (( _this == null )) ? (0) : (_this._height) );
			//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			haxe.ds.TreeNode<K_c, V_c> _this1 = __temp_me18.right;
			//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			if (( tmp1 > (( (( _this1 == null )) ? (0) : (_this1._height) )) )) 
			{
				//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				haxe.ds.TreeNode<K_c, V_c> _this2 = __temp_me18.left;
				//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				if (( _this2 == null )) 
				{
					//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					tmp = 0;
				}
				else
				{
					//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					tmp = _this2._height;
				}
				
			}
			else
			{
				//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				haxe.ds.TreeNode<K_c, V_c> _this3 = __temp_me18.right;
				//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				if (( _this3 == null )) 
				{
					//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					tmp = 0;
				}
				else
				{
					//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					tmp = _this3._height;
				}
				
			}
			
			//line 229 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			__temp_me18._height = ( tmp + 1 );
		}
		else
		{
			//line 231 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			__temp_me18._height = __temp_h17;
		}
		
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		return new haxe.ds.TreeNode<java.lang.Object, java.lang.Object>(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		return new haxe.ds.TreeNode<java.lang.Object, java.lang.Object>(((haxe.ds.TreeNode<java.lang.Object, java.lang.Object>) (arr.__get(0)) ), arr.__get(1), arr.__get(2), ((haxe.ds.TreeNode<java.lang.Object, java.lang.Object>) (arr.__get(3)) ), arr.__get(4));
	}
	
	
	public haxe.ds.TreeNode<K, V> left;
	
	public haxe.ds.TreeNode<K, V> right;
	
	public K key;
	
	public V value;
	
	public int _height;
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		{
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			boolean __temp_executeDef1 = true;
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			switch (field.hashCode())
			{
				case 1487441478:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("_height")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						this._height = ((int) (value) );
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return value;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 106079:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("key")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						this.key = ((K) (((java.lang.Object) (value) )) );
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return ((double) (haxe.lang.Runtime.toDouble(((java.lang.Object) (value) ))) );
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("value")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						this.value = ((V) (((java.lang.Object) (value) )) );
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return ((double) (haxe.lang.Runtime.toDouble(((java.lang.Object) (value) ))) );
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
			}
			
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			if (__temp_executeDef1) 
			{
				//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		{
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			boolean __temp_executeDef1 = true;
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			switch (field.hashCode())
			{
				case 1487441478:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("_height")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						this._height = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return value;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 3317767:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("left")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						this.left = ((haxe.ds.TreeNode<K, V>) (value) );
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return value;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("value")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						this.value = ((V) (value) );
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return value;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 108511772:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("right")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						this.right = ((haxe.ds.TreeNode<K, V>) (value) );
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return value;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 106079:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("key")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						this.key = ((K) (value) );
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return value;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
			}
			
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			if (__temp_executeDef1) 
			{
				//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		{
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			boolean __temp_executeDef1 = true;
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			switch (field.hashCode())
			{
				case 1487441478:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("_height")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return this._height;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 3317767:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("left")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return this.left;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("value")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return this.value;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 108511772:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("right")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return this.right;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 106079:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("key")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return this.key;
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
			}
			
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			if (__temp_executeDef1) 
			{
				//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		{
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			boolean __temp_executeDef1 = true;
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			switch (field.hashCode())
			{
				case 1487441478:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("_height")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return ((double) (this._height) );
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 106079:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("key")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return ((double) (haxe.lang.Runtime.toDouble(((java.lang.Object) (this.key) ))) );
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
				case 111972721:
				{
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					if (field.equals("value")) 
					{
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						__temp_executeDef1 = false;
						//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
						return ((double) (haxe.lang.Runtime.toDouble(((java.lang.Object) (this.value) ))) );
					}
					
					//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
					break;
				}
				
				
			}
			
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			if (__temp_executeDef1) 
			{
				//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		baseArr.push("_height");
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		baseArr.push("value");
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		baseArr.push("key");
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		baseArr.push("right");
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		baseArr.push("left");
		//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
		{
			//line 213 "/usr/lib/haxe/std/haxe/ds/BalancedTree.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


