// Generated by Haxe 3.3.0
package thx.color;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestColorParser extends haxe.lang.HxObject
{
	public TestColorParser(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestColorParser()
	{
		//line 9 "/shared/color/test/thx/color/TestColorParser.hx"
		thx.color.TestColorParser.__hx_ctor_thx_color_TestColorParser(this);
	}
	
	
	public static void __hx_ctor_thx_color_TestColorParser(thx.color.TestColorParser __temp_me113)
	{
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
		return new thx.color.TestColorParser(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
		return new thx.color.TestColorParser();
	}
	
	
	public void testFeatures()
	{
		//line 12 "/shared/color/test/thx/color/TestColorParser.hx"
		this._assert("a", new haxe.root.Array<thx.color.parse.ChannelInfo>(new thx.color.parse.ChannelInfo[]{thx.color.parse.ChannelInfo.CIInt8(2)}), "a(2)", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testFeatures"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (12) )) )}));
		//line 15 "/shared/color/test/thx/color/TestColorParser.hx"
		this._assert("aa", new haxe.root.Array<thx.color.parse.ChannelInfo>(new thx.color.parse.ChannelInfo[]{thx.color.parse.ChannelInfo.CIInt8(2)}), "aa(2)", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testFeatures"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
		//line 18 "/shared/color/test/thx/color/TestColorParser.hx"
		this._assert("rgb", new haxe.root.Array<thx.color.parse.ChannelInfo>(new thx.color.parse.ChannelInfo[]{thx.color.parse.ChannelInfo.CIInt8(2)}), "rgb(2)", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testFeatures"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (18) )) )}));
		//line 21 "/shared/color/test/thx/color/TestColorParser.hx"
		this._assert("rgba", new haxe.root.Array<thx.color.parse.ChannelInfo>(new thx.color.parse.ChannelInfo[]{thx.color.parse.ChannelInfo.CIInt8(2)}), "rgba(2)", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testFeatures"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (21) )) )}));
		//line 24 "/shared/color/test/thx/color/TestColorParser.hx"
		this._assert("hsla", new haxe.root.Array<thx.color.parse.ChannelInfo>(new thx.color.parse.ChannelInfo[]{thx.color.parse.ChannelInfo.CIDegree(((double) (1) )), thx.color.parse.ChannelInfo.CIPercent(((double) (2) )), thx.color.parse.ChannelInfo.CIPercent(((double) (3) )), thx.color.parse.ChannelInfo.CIFloat(0.5)}), "hsla(1deg,2%,3%,0.5)", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testFeatures"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )}));
	}
	
	
	public void testChannels()
	{
		//line 30 "/shared/color/test/thx/color/TestColorParser.hx"
		this.assertStringChannel(thx.color.parse.ChannelInfo.CIDegree(((double) (1) )), "1deg", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testChannels"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (30) )) )}));
		//line 31 "/shared/color/test/thx/color/TestColorParser.hx"
		this.assertStringChannel(thx.color.parse.ChannelInfo.CIPercent(((double) (1) )), "1%", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testChannels"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (31) )) )}));
		//line 32 "/shared/color/test/thx/color/TestColorParser.hx"
		this.assertStringChannel(thx.color.parse.ChannelInfo.CIFloat(0.1), "0.1", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testChannels"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
		//line 33 "/shared/color/test/thx/color/TestColorParser.hx"
		this.assertStringChannel(thx.color.parse.ChannelInfo.CIBool(false), "0", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testChannels"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
		//line 34 "/shared/color/test/thx/color/TestColorParser.hx"
		this.assertStringChannel(thx.color.parse.ChannelInfo.CIBool(true), "1", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testChannels"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
		//line 35 "/shared/color/test/thx/color/TestColorParser.hx"
		this.assertStringChannel(thx.color.parse.ChannelInfo.CIInt8(2), "2", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testChannels"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
		//line 36 "/shared/color/test/thx/color/TestColorParser.hx"
		this.assertStringChannel(thx.color.parse.ChannelInfo.CIInt(256), "256", new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testChannels"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (36) )) )}));
	}
	
	
	public void testInvalidColor()
	{
		//line 40 "/shared/color/test/thx/color/TestColorParser.hx"
		utest.Assert.isNull(thx.color.parse.ColorParser.parseColor("x"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testInvalidColor"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (40) )) )}));
		//line 41 "/shared/color/test/thx/color/TestColorParser.hx"
		utest.Assert.isNull(thx.color.parse.ColorParser.parseColor("x[]"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testInvalidColor"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (41) )) )}));
		//line 42 "/shared/color/test/thx/color/TestColorParser.hx"
		utest.Assert.isNull(thx.color.parse.ColorParser.parseColor("x(x)"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testInvalidColor"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (42) )) )}));
	}
	
	
	public void testInvalidChannel()
	{
		//line 46 "/shared/color/test/thx/color/TestColorParser.hx"
		utest.Assert.isNull(thx.color.parse.ColorParser.parseChannel("x"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestColorParser", "TestColorParser.hx", "testInvalidChannel"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (46) )) )}));
	}
	
	
	public void assertStringChannel(thx.color.parse.ChannelInfo expected, java.lang.String test, java.lang.Object pos)
	{
		//line 49 "/shared/color/test/thx/color/TestColorParser.hx"
		this.assertChannel(expected, thx.color.parse.ColorParser.parseChannel(test), pos);
	}
	
	
	public void assertChannel(thx.color.parse.ChannelInfo expected, thx.color.parse.ChannelInfo test, java.lang.Object pos)
	{
		//line 52 "/shared/color/test/thx/color/TestColorParser.hx"
		if (( null == test )) 
		{
			//line 53 "/shared/color/test/thx/color/TestColorParser.hx"
			utest.Assert.fail("channel is null", pos);
			//line 54 "/shared/color/test/thx/color/TestColorParser.hx"
			return ;
		}
		
		//line 56 "/shared/color/test/thx/color/TestColorParser.hx"
		java.lang.String ec = haxe.root.Type.enumConstructor(expected);
		//line 56 "/shared/color/test/thx/color/TestColorParser.hx"
		java.lang.String tc = haxe.root.Type.enumConstructor(test);
		//line 56 "/shared/color/test/thx/color/TestColorParser.hx"
		java.lang.Object ep = haxe.root.Type.enumParameters(expected).__get(0);
		//line 56 "/shared/color/test/thx/color/TestColorParser.hx"
		java.lang.Object tp = haxe.root.Type.enumParameters(test).__get(0);
		//line 60 "/shared/color/test/thx/color/TestColorParser.hx"
		utest.Assert.equals(ec, tc, null, pos);
		//line 61 "/shared/color/test/thx/color/TestColorParser.hx"
		utest.Assert.equals(ep, tp, null, pos);
	}
	
	
	public void _assert(java.lang.String name, haxe.root.Array<thx.color.parse.ChannelInfo> channels, java.lang.String test_string, java.lang.Object pos)
	{
		//line 65 "/shared/color/test/thx/color/TestColorParser.hx"
		thx.color.parse.ColorInfo expected = new thx.color.parse.ColorInfo(name, channels);
		//line 65 "/shared/color/test/thx/color/TestColorParser.hx"
		thx.color.parse.ColorInfo test = thx.color.parse.ColorParser.parseColor(test_string);
		//line 67 "/shared/color/test/thx/color/TestColorParser.hx"
		if (( null == test )) 
		{
			//line 68 "/shared/color/test/thx/color/TestColorParser.hx"
			utest.Assert.fail("test is null", pos);
			//line 69 "/shared/color/test/thx/color/TestColorParser.hx"
			return ;
		}
		
		//line 71 "/shared/color/test/thx/color/TestColorParser.hx"
		utest.Assert.equals(expected.name, test.name, null, pos);
		//line 72 "/shared/color/test/thx/color/TestColorParser.hx"
		{
			//line 72 "/shared/color/test/thx/color/TestColorParser.hx"
			int _g1 = 0;
			//line 72 "/shared/color/test/thx/color/TestColorParser.hx"
			int _g = expected.channels.length;
			//line 72 "/shared/color/test/thx/color/TestColorParser.hx"
			while (( _g1 < _g ))
			{
				//line 72 "/shared/color/test/thx/color/TestColorParser.hx"
				int i = _g1++;
				//line 73 "/shared/color/test/thx/color/TestColorParser.hx"
				this.assertChannel(expected.channels.__get(i), test.channels.__get(i), pos);
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
		{
			//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
			switch (field.hashCode())
			{
				case -1408208058:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("assert")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assert")) );
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case 423680751:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("testFeatures")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testFeatures")) );
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case -1074886947:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("assertChannel")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertChannel")) );
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case 2146966146:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("testChannels")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testChannels")) );
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case 861761036:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("assertStringChannel")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "assertStringChannel")) );
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case 1532312926:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("testInvalidColor")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testInvalidColor")) );
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case -831653826:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("testInvalidChannel")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testInvalidChannel")) );
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
		{
			//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
			boolean __temp_executeDef1 = true;
			//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
			switch (field.hashCode())
			{
				case -1408208058:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("assert")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						this._assert(haxe.lang.Runtime.toString(dynargs.__get(0)), ((haxe.root.Array<thx.color.parse.ChannelInfo>) (dynargs.__get(1)) ), haxe.lang.Runtime.toString(dynargs.__get(2)), dynargs.__get(3));
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case 423680751:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("testFeatures")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						this.testFeatures();
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case -1074886947:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("assertChannel")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						this.assertChannel(((thx.color.parse.ChannelInfo) (dynargs.__get(0)) ), ((thx.color.parse.ChannelInfo) (dynargs.__get(1)) ), dynargs.__get(2));
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case 2146966146:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("testChannels")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						this.testChannels();
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case 861761036:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("assertStringChannel")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						this.assertStringChannel(((thx.color.parse.ChannelInfo) (dynargs.__get(0)) ), haxe.lang.Runtime.toString(dynargs.__get(1)), dynargs.__get(2));
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case 1532312926:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("testInvalidColor")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						this.testInvalidColor();
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
				case -831653826:
				{
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					if (field.equals("testInvalidChannel")) 
					{
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						__temp_executeDef1 = false;
						//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
						this.testInvalidChannel();
					}
					
					//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
					break;
				}
				
				
			}
			
			//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
			if (__temp_executeDef1) 
			{
				//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 8 "/shared/color/test/thx/color/TestColorParser.hx"
		return null;
	}
	
	
}


