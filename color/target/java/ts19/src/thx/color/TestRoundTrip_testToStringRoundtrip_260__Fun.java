// Generated by Haxe 3.3.0
package thx.color;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestRoundTrip_testToStringRoundtrip_260__Fun extends haxe.lang.Function
{
	public TestRoundTrip_testToStringRoundtrip_260__Fun()
	{
		//line 260 "/shared/color/test/thx/color/TestRoundTrip.hx"
		super(1, 0);
	}
	
	
	public static thx.color.TestRoundTrip_testToStringRoundtrip_260__Fun __hx_current;
	
	@Override public java.lang.Object __hx_invoke1_o(double __fn_float1, java.lang.Object __fn_dyn1)
	{
		//line 260 "/shared/color/test/thx/color/TestRoundTrip.hx"
		java.lang.Object _1 = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((java.lang.Object) (__fn_float1) )) : (( (( __fn_dyn1 == null )) ? (null) : (((java.lang.Object) (__fn_dyn1) )) )) );
		//line 260 "/shared/color/test/thx/color/TestRoundTrip.hx"
		{
			//line 261 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t = thx.color._Lab.Lab_Impl_.fromString(thx.color._Lab.Lab_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) )));
			//line 262 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._Lab.Lab_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) ), t), ( ( ( "expected " + thx.color._Lab.Lab_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lab", true)) )) ) + " but was " ) + thx.color._Lab.Lab_Impl_.toString(t) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (262) )) )}));
			//line 263 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t1 = thx.color._LCh.LCh_Impl_.fromString(thx.color._LCh.LCh_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lch", true)) )));
			//line 264 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._LCh.LCh_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lch", true)) ), t1), ( ( ( "expected " + thx.color._LCh.LCh_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "lch", true)) )) ) + " but was " ) + thx.color._LCh.LCh_Impl_.toString(t1) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (264) )) )}));
			//line 265 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t2 = thx.color._Cmy.Cmy_Impl_.fromString(thx.color._Cmy.Cmy_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "cmy", true)) )));
			//line 266 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._Cmy.Cmy_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "cmy", true)) ), t2), ( ( ( "expected " + thx.color._Cmy.Cmy_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "cmy", true)) )) ) + " but was " ) + thx.color._Cmy.Cmy_Impl_.toString(t2) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (266) )) )}));
			//line 267 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t3 = thx.color._Cmyk.Cmyk_Impl_.fromString(thx.color._Cmyk.Cmyk_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "cmyk", true)) )));
			//line 268 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._Cmyk.Cmyk_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "cmyk", true)) ), t3), ( ( ( "expected " + thx.color._Cmyk.Cmyk_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "cmyk", true)) )) ) + " but was " ) + thx.color._Cmyk.Cmyk_Impl_.toString(t3) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (268) )) )}));
			//line 269 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t4 = thx.color._CubeHelix.CubeHelix_Impl_.fromString(thx.color._CubeHelix.CubeHelix_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "ch", true)) )));
			//line 270 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._CubeHelix.CubeHelix_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "ch", true)) ), t4), ( ( ( "expected " + thx.color._CubeHelix.CubeHelix_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "ch", true)) )) ) + " but was " ) + thx.color._CubeHelix.CubeHelix_Impl_.toString(t4) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (270) )) )}));
			//line 271 "/shared/color/test/thx/color/TestRoundTrip.hx"
			double t5 = ((double) (haxe.lang.Runtime.toDouble(thx.color._Grey.Grey_Impl_.fromString(thx.color._Grey.Grey_Impl_.toString(haxe.lang.Runtime.getField_f(_1, "g", true))))) );
			//line 272 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._Grey.Grey_Impl_.equals(haxe.lang.Runtime.getField_f(_1, "g", true), t5), ( ( ( "expected " + thx.color._Grey.Grey_Impl_.toString(haxe.lang.Runtime.getField_f(_1, "g", true)) ) + " but was " ) + thx.color._Grey.Grey_Impl_.toString(t5) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (272) )) )}));
			//line 273 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t6 = thx.color._Hsl.Hsl_Impl_.fromString(thx.color._Hsl.Hsl_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hsl", true)) )));
			//line 274 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._Hsl.Hsl_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hsl", true)) ), t6), ( ( ( "expected " + thx.color._Hsl.Hsl_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hsl", true)) )) ) + " but was " ) + thx.color._Hsl.Hsl_Impl_.toString(t6) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (274) )) )}));
			//line 275 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t7 = thx.color._Hsv.Hsv_Impl_.fromString(thx.color._Hsv.Hsv_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hsv", true)) )));
			//line 276 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._Hsv.Hsv_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hsv", true)) ), t7), ( ( ( "expected " + thx.color._Hsv.Hsv_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "hsv", true)) )) ) + " but was " ) + thx.color._Hsv.Hsv_Impl_.toString(t7) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (276) )) )}));
			//line 277 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t8 = thx.color._Rgbx.Rgbx_Impl_.fromString(thx.color._Rgbx.Rgbx_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "rgbx", true)) )));
			//line 278 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._Rgbx.Rgbx_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "rgbx", true)) ), t8), ( ( ( "expected " + thx.color._Rgbx.Rgbx_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "rgbx", true)) )) ) + " but was " ) + thx.color._Rgbx.Rgbx_Impl_.toString(t8) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (278) )) )}));
			//line 279 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t9 = thx.color._Xyz.Xyz_Impl_.fromString(thx.color._Xyz.Xyz_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "xyz", true)) )));
			//line 280 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._Xyz.Xyz_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "xyz", true)) ), t9), ( ( ( "expected " + thx.color._Xyz.Xyz_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "xyz", true)) )) ) + " but was " ) + thx.color._Xyz.Xyz_Impl_.toString(t9) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (280) )) )}));
			//line 281 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t10 = thx.color._Yxy.Yxy_Impl_.fromString(thx.color._Yxy.Yxy_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "yxy", true)) )));
			//line 282 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._Yxy.Yxy_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "yxy", true)) ), t10), ( ( ( "expected " + thx.color._Yxy.Yxy_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "yxy", true)) )) ) + " but was " ) + thx.color._Yxy.Yxy_Impl_.toString(t10) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (282) )) )}));
			//line 283 "/shared/color/test/thx/color/TestRoundTrip.hx"
			haxe.root.Array<java.lang.Object> t11 = thx.color._Yuv.Yuv_Impl_.fromString(thx.color._Yuv.Yuv_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "yuv", true)) )));
			//line 284 "/shared/color/test/thx/color/TestRoundTrip.hx"
			utest.Assert.isTrue(thx.color._Yuv.Yuv_Impl_.equals(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "yuv", true)) ), t11), ( ( ( "expected " + thx.color._Yuv.Yuv_Impl_.toString(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_1, "yuv", true)) )) ) + " but was " ) + thx.color._Yuv.Yuv_Impl_.toString(t11) ), new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.color.TestRoundTrip", "TestRoundTrip.hx", "testToStringRoundtrip"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (284) )) )}));
		}
		
		//line 86 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/macro/lambda/SlambdaMacro.hx"
		return null;
	}
	
	
}


