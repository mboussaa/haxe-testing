// Generated by Haxe 3.3.0
package thx._Nel;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Nel_Impl__toArray_56__Fun<A> extends haxe.lang.Function
{
	public Nel_Impl__toArray_56__Fun(haxe.lang.Function[] go)
	{
		//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
		super(2, 0);
		//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
		this.go = go;
	}
	
	
	@Override public java.lang.Object __hx_invoke2_o(double __fn_float1, java.lang.Object __fn_dyn1, double __fn_float2, java.lang.Object __fn_dyn2)
	{
		//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
		thx.NonEmptyList xs = ( (( __fn_dyn2 == haxe.lang.Runtime.undefined )) ? (((thx.NonEmptyList) (((java.lang.Object) (__fn_float2) )) )) : (((thx.NonEmptyList) (__fn_dyn2) )) );
		//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
		haxe.root.Array<A> acc = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((haxe.root.Array<A>) (((java.lang.Object) (__fn_float1) )) )) : (((haxe.root.Array<A>) (__fn_dyn1) )) );
		//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
		switch (xs.index)
		{
			case 0:
			{
				//line 58 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
				A x = ((A) (xs.params[0]) );
				//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
				return ((haxe.root.Array<A>) (thx.Arrays.append(((haxe.root.Array<A>) (acc) ), ((A) (x) ))) );
			}
			
			
			case 1:
			{
				//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
				thx.NonEmptyList xs1 = ((thx.NonEmptyList) (xs.params[1]) );
				//line 59 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
				A x1 = ((A) (xs.params[0]) );
				//line 57 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
				return ((haxe.root.Array<A>) (this.go[0].__hx_invoke2_o(0.0, ((haxe.root.Array<A>) (thx.Arrays.append(((haxe.root.Array<A>) (acc) ), ((A) (x1) ))) ), 0.0, xs1)) );
			}
			
			
		}
		
		//line 56 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/Nel.hx"
		return null;
	}
	
	
	public haxe.lang.Function[] go;
	
}


