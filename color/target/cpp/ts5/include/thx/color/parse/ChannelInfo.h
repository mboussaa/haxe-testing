// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#define INCLUDED_thx_color_parse_ChannelInfo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(thx,color,parse,ChannelInfo)
namespace thx{
namespace color{
namespace parse{


class ChannelInfo_obj : public hx::EnumBase_obj
{
	typedef hx::EnumBase_obj super;
		typedef ChannelInfo_obj OBJ_;

	public:
		ChannelInfo_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_HCSTRING("thx.color.parse.ChannelInfo","\x41","\xe2","\x5b","\x91"); }
		::String __ToString() const { return HX_HCSTRING("ChannelInfo.","\x5d","\x40","\xdb","\x8a") + _hx_tag; }

		static ::thx::color::parse::ChannelInfo CIBool(Bool value);
		static ::Dynamic CIBool_dyn();
		static ::thx::color::parse::ChannelInfo CIDegree(Float value);
		static ::Dynamic CIDegree_dyn();
		static ::thx::color::parse::ChannelInfo CIFloat(Float value);
		static ::Dynamic CIFloat_dyn();
		static ::thx::color::parse::ChannelInfo CIInt(Int value);
		static ::Dynamic CIInt_dyn();
		static ::thx::color::parse::ChannelInfo CIInt8(Int value);
		static ::Dynamic CIInt8_dyn();
		static ::thx::color::parse::ChannelInfo CIPercent(Float value);
		static ::Dynamic CIPercent_dyn();
};

} // end namespace thx
} // end namespace color
} // end namespace parse

#endif /* INCLUDED_thx_color_parse_ChannelInfo */ 
