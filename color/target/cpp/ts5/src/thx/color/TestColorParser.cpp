// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_thx_color_TestColorParser
#include <thx/color/TestColorParser.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestColorParser_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.color.TestColorParser","new",0xe1b9194d,"thx.color.TestColorParser.new","thx/color/TestColorParser.hx",11,0x2aa49e05)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  11)		this->x = i;
            	}

Dynamic TestColorParser_obj::__CreateEmpty() { return new TestColorParser_obj; }

hx::ObjectPtr< TestColorParser_obj > TestColorParser_obj::__new(Int i)
{
	hx::ObjectPtr< TestColorParser_obj > _hx_result = new TestColorParser_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestColorParser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestColorParser_obj > _hx_result = new TestColorParser_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestColorParser_obj::testFeatures(){
            	HX_STACK_FRAME("thx.color.TestColorParser","testFeatures",0xc68144e2,"thx.color.TestColorParser.testFeatures","thx/color/TestColorParser.hx",15,0x2aa49e05)
            	HX_STACK_THIS(this)
HXLINE(  15)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  15)		HX_VARI( Int,_g) = this->x;
HXDLIN(  15)		while((_g1 < _g)){
HXLINE(  15)			++_g1;
HXLINE(  17)			::hx::EnumBase _hx_tmp = ::thx::color::parse::ChannelInfo_obj::CIInt8((int)2);
HXLINE(  16)			this->_hx_assert(HX_("a",61,00,00,00),::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp),HX_("a(2)",1e,38,3c,40),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),16,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testFeatures",6f,93,de,85)));
HXLINE(  20)			::hx::EnumBase _hx_tmp1 = ::thx::color::parse::ChannelInfo_obj::CIInt8((int)2);
HXLINE(  19)			this->_hx_assert(HX_("aa",e0,54,00,00),::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1),HX_("aa(2)",ff,7c,1a,1a),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),19,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testFeatures",6f,93,de,85)));
HXLINE(  23)			::hx::EnumBase _hx_tmp2 = ::thx::color::parse::ChannelInfo_obj::CIInt8((int)2);
HXLINE(  22)			this->_hx_assert(HX_("rgb",0d,db,56,00),::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp2),HX_("rgb(2)",f2,50,da,23),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),22,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testFeatures",6f,93,de,85)));
HXLINE(  26)			::hx::EnumBase _hx_tmp3 = ::thx::color::parse::ChannelInfo_obj::CIInt8((int)2);
HXLINE(  25)			this->_hx_assert(HX_("rgba",b4,d0,a8,4b),::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp3),HX_("rgba(2)",ab,1d,d2,60),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),25,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testFeatures",6f,93,de,85)));
HXLINE(  29)			::hx::EnumBase _hx_tmp4 = ::thx::color::parse::ChannelInfo_obj::CIDegree((int)1);
HXDLIN(  29)			::hx::EnumBase _hx_tmp5 = ::thx::color::parse::ChannelInfo_obj::CIPercent((int)2);
HXDLIN(  29)			::hx::EnumBase _hx_tmp6 = ::thx::color::parse::ChannelInfo_obj::CIPercent((int)3);
HXDLIN(  29)			::hx::EnumBase _hx_tmp7 = ::thx::color::parse::ChannelInfo_obj::CIFloat(((Float)0.5));
HXLINE(  28)			this->_hx_assert(HX_("hsla",40,d2,15,45),::Array_obj< ::Dynamic>::__new(4)->init(0,_hx_tmp4)->init(1,_hx_tmp5)->init(2,_hx_tmp6)->init(3,_hx_tmp7),HX_("hsla(1deg,2%,3%,0.5)",62,02,79,76),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),28,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testFeatures",6f,93,de,85)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestColorParser_obj,testFeatures,(void))

void TestColorParser_obj::testChannels(){
            	HX_STACK_FRAME("thx.color.TestColorParser","testChannels",0x1e988235,"thx.color.TestColorParser.testChannels","thx/color/TestColorParser.hx",34,0x2aa49e05)
            	HX_STACK_THIS(this)
HXLINE(  34)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  34)		HX_VARI( Int,_g) = this->x;
HXDLIN(  34)		while((_g1 < _g)){
HXLINE(  34)			++_g1;
HXLINE(  35)			::hx::EnumBase _hx_tmp = ::thx::color::parse::ChannelInfo_obj::CIDegree((int)1);
HXDLIN(  35)			this->assertStringChannel(_hx_tmp,HX_("1deg",35,ae,af,20),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),35,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testChannels",c2,d0,f5,dd)));
HXLINE(  36)			::hx::EnumBase _hx_tmp1 = ::thx::color::parse::ChannelInfo_obj::CIPercent((int)1);
HXDLIN(  36)			this->assertStringChannel(_hx_tmp1,HX_("1%",d4,2a,00,00),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),36,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testChannels",c2,d0,f5,dd)));
HXLINE(  37)			::hx::EnumBase _hx_tmp2 = ::thx::color::parse::ChannelInfo_obj::CIFloat(((Float)0.1));
HXDLIN(  37)			this->assertStringChannel(_hx_tmp2,HX_("0.1",73,94,24,00),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),37,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testChannels",c2,d0,f5,dd)));
HXLINE(  38)			::hx::EnumBase _hx_tmp3 = ::thx::color::parse::ChannelInfo_obj::CIBool(false);
HXDLIN(  38)			this->assertStringChannel(_hx_tmp3,HX_("0",30,00,00,00),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),38,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testChannels",c2,d0,f5,dd)));
HXLINE(  39)			::hx::EnumBase _hx_tmp4 = ::thx::color::parse::ChannelInfo_obj::CIBool(true);
HXDLIN(  39)			this->assertStringChannel(_hx_tmp4,HX_("1",31,00,00,00),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),39,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testChannels",c2,d0,f5,dd)));
HXLINE(  40)			::hx::EnumBase _hx_tmp5 = ::thx::color::parse::ChannelInfo_obj::CIInt8((int)2);
HXDLIN(  40)			this->assertStringChannel(_hx_tmp5,HX_("2",32,00,00,00),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),40,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testChannels",c2,d0,f5,dd)));
HXLINE(  41)			::hx::EnumBase _hx_tmp6 = ::thx::color::parse::ChannelInfo_obj::CIInt((int)256);
HXDLIN(  41)			this->assertStringChannel(_hx_tmp6,HX_("256",13,1f,26,00),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),41,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testChannels",c2,d0,f5,dd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestColorParser_obj,testChannels,(void))

void TestColorParser_obj::testInvalidColor(){
            	HX_STACK_FRAME("thx.color.TestColorParser","testInvalidColor",0x2d561551,"thx.color.TestColorParser.testInvalidColor","thx/color/TestColorParser.hx",45,0x2aa49e05)
            	HX_STACK_THIS(this)
HXLINE(  45)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  45)		HX_VARI( Int,_g) = this->x;
HXDLIN(  45)		while((_g1 < _g)){
HXLINE(  45)			++_g1;
HXLINE(  46)			 ::thx::color::parse::ColorInfo _hx_tmp = ::thx::color::parse::ColorParser_obj::parseColor(HX_("x",78,00,00,00));
HXDLIN(  46)			::utest::Assert_obj::isNull(_hx_tmp,null(),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),46,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testInvalidColor",5e,2e,f2,cf)));
HXLINE(  47)			 ::thx::color::parse::ColorInfo _hx_tmp1 = ::thx::color::parse::ColorParser_obj::parseColor(HX_("x[]",1a,5e,5b,00));
HXDLIN(  47)			::utest::Assert_obj::isNull(_hx_tmp1,null(),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),47,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testInvalidColor",5e,2e,f2,cf)));
HXLINE(  48)			 ::thx::color::parse::ColorInfo _hx_tmp2 = ::thx::color::parse::ColorParser_obj::parseColor(HX_("x(x)",61,5d,70,4f));
HXDLIN(  48)			::utest::Assert_obj::isNull(_hx_tmp2,null(),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),48,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testInvalidColor",5e,2e,f2,cf)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestColorParser_obj,testInvalidColor,(void))

void TestColorParser_obj::testInvalidChannel(){
            	HX_STACK_FRAME("thx.color.TestColorParser","testInvalidChannel",0x9c6efc31,"thx.color.TestColorParser.testInvalidChannel","thx/color/TestColorParser.hx",52,0x2aa49e05)
            	HX_STACK_THIS(this)
HXLINE(  52)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  52)		HX_VARI( Int,_g) = this->x;
HXDLIN(  52)		while((_g1 < _g)){
HXLINE(  52)			++_g1;
HXLINE(  53)			::hx::EnumBase _hx_tmp = ::thx::color::parse::ColorParser_obj::parseChannel(HX_("x",78,00,00,00));
HXDLIN(  53)			::utest::Assert_obj::isNull(_hx_tmp,null(),hx::SourceInfo(HX_("TestColorParser.hx",6e,11,f0,a9),53,HX_("thx.color.TestColorParser",db,6e,ed,9b),HX_("testInvalidChannel",7e,32,0d,31)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestColorParser_obj,testInvalidChannel,(void))

void TestColorParser_obj::assertStringChannel(::hx::EnumBase expected,::String test, ::Dynamic pos){
            	HX_STACK_FRAME("thx.color.TestColorParser","assertStringChannel",0x9a0da439,"thx.color.TestColorParser.assertStringChannel","thx/color/TestColorParser.hx",56,0x2aa49e05)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(test,"test")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  56)		::hx::EnumBase _hx_tmp = ::thx::color::parse::ColorParser_obj::parseChannel(test);
HXDLIN(  56)		this->assertChannel(expected,_hx_tmp,pos);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TestColorParser_obj,assertStringChannel,(void))

void TestColorParser_obj::assertChannel(::hx::EnumBase expected,::hx::EnumBase test, ::Dynamic pos){
            	HX_STACK_FRAME("thx.color.TestColorParser","assertChannel",0x7a7179ca,"thx.color.TestColorParser.assertChannel","thx/color/TestColorParser.hx",58,0x2aa49e05)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(expected,"expected")
            	HX_STACK_ARG(test,"test")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  59)		if (hx::IsNull( test )) {
HXLINE(  60)			::utest::Assert_obj::fail(HX_("channel is null",20,a2,3c,82),pos);
HXLINE(  61)			return;
            		}
HXLINE(  63)		HX_VARI( ::String,ec) = ::Type_obj::enumConstructor(expected);
HXDLIN(  63)		HX_VARI( ::String,tc) = ::Type_obj::enumConstructor(test);
HXLINE(  65)		::cpp::VirtualArray _hx_tmp = ::Type_obj::enumParameters(expected);
HXLINE(  63)		HX_VARI(  ::Dynamic,ep) = _hx_tmp->__get((int)0);
HXLINE(  66)		::cpp::VirtualArray _hx_tmp1 = ::Type_obj::enumParameters(test);
HXLINE(  63)		HX_VARI(  ::Dynamic,tp) = _hx_tmp1->__get((int)0);
HXLINE(  67)		::utest::Assert_obj::equals(ec,tc,null(),pos);
HXLINE(  68)		::utest::Assert_obj::equals(ep,tp,null(),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TestColorParser_obj,assertChannel,(void))

void TestColorParser_obj::_hx_assert(::String name,::Array< ::Dynamic> channels,::String test_string, ::Dynamic pos){
            	HX_STACK_FRAME("thx.color.TestColorParser","assert",0xcbc28ff9,"thx.color.TestColorParser.assert","thx/color/TestColorParser.hx",71,0x2aa49e05)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(channels,"channels")
            	HX_STACK_ARG(test_string,"test_string")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  72)		HX_VARI(  ::thx::color::parse::ColorInfo,expected) =  ::thx::color::parse::ColorInfo_obj::__new(name,channels);
HXDLIN(  72)		HX_VARI(  ::thx::color::parse::ColorInfo,test) = ::thx::color::parse::ColorParser_obj::parseColor(test_string);
HXLINE(  74)		if (hx::IsNull( test )) {
HXLINE(  75)			::utest::Assert_obj::fail(HX_("test is null",af,10,dd,7e),pos);
HXLINE(  76)			return;
            		}
HXLINE(  78)		::utest::Assert_obj::equals(expected->name,test->name,null(),pos);
HXLINE(  79)		{
HXLINE(  79)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  79)			HX_VARI( Int,_g) = expected->channels->length;
HXDLIN(  79)			while((_g1 < _g)){
HXLINE(  79)				HX_VARI( Int,i) = _g1++;
HXLINE(  80)				this->assertChannel(expected->channels->__get(i).StaticCast< ::hx::EnumBase >(),test->channels->__get(i).StaticCast< ::hx::EnumBase >(),pos);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(TestColorParser_obj,_hx_assert,(void))


TestColorParser_obj::TestColorParser_obj()
{
}

hx::Val TestColorParser_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"assert") ) { return hx::Val( _hx_assert_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testFeatures") ) { return hx::Val( testFeatures_dyn()); }
		if (HX_FIELD_EQ(inName,"testChannels") ) { return hx::Val( testChannels_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"assertChannel") ) { return hx::Val( assertChannel_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testInvalidColor") ) { return hx::Val( testInvalidColor_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"testInvalidChannel") ) { return hx::Val( testInvalidChannel_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"assertStringChannel") ) { return hx::Val( assertStringChannel_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestColorParser_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestColorParser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestColorParser_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestColorParser_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestColorParser_obj_sStaticStorageInfo = 0;
#endif

static ::String TestColorParser_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testFeatures","\x6f","\x93","\xde","\x85"),
	HX_HCSTRING("testChannels","\xc2","\xd0","\xf5","\xdd"),
	HX_HCSTRING("testInvalidColor","\x5e","\x2e","\xf2","\xcf"),
	HX_HCSTRING("testInvalidChannel","\x7e","\x32","\x0d","\x31"),
	HX_HCSTRING("assertStringChannel","\x4c","\xf1","\xde","\x0f"),
	HX_HCSTRING("assertChannel","\x9d","\xe6","\xb8","\x2c"),
	HX_HCSTRING("assert","\xc6","\x46","\x03","\x4c"),
	::String(null()) };

static void TestColorParser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestColorParser_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestColorParser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestColorParser_obj::__mClass,"__mClass");
};

#endif

hx::Class TestColorParser_obj::__mClass;

void TestColorParser_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestColorParser","\xdb","\x6e","\xed","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestColorParser_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestColorParser_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestColorParser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestColorParser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestColorParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestColorParser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
