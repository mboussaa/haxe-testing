// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_color_parse_ColorInfo
#define INCLUDED_thx_color_parse_ColorInfo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(thx,color,parse,ChannelInfo)
HX_DECLARE_CLASS3(thx,color,parse,ColorInfo)

namespace thx{
namespace color{
namespace parse{


class HXCPP_CLASS_ATTRIBUTES ColorInfo_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ColorInfo_obj OBJ_;
		ColorInfo_obj();

	public:
		void __construct(::String name,::Array< ::Dynamic> channels);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="thx.color.parse.ColorInfo")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"thx.color.parse.ColorInfo"); }
		static hx::ObjectPtr< ColorInfo_obj > __new(::String name,::Array< ::Dynamic> channels);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ColorInfo_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("ColorInfo","\x51","\xa3","\xfb","\xc2"); }

		::String name;
		::Array< ::Dynamic> channels;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace thx
} // end namespace color
} // end namespace parse

#endif /* INCLUDED_thx_color_parse_ColorInfo */ 
