// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_color_TestHsl
#include <thx/color/TestHsl.h>
#endif
#ifndef INCLUDED_thx_color__Hsl_Hsl_Impl_
#include <thx/color/_Hsl/Hsl_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsla_Hsla_Impl_
#include <thx/color/_Hsla/Hsla_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestHsl_obj::__construct(){
            	HX_STACK_FRAME("thx.color.TestHsl","new",0xbafc742c,"thx.color.TestHsl.new","thx/color/TestHsl.hx",7,0x30487206)
            	HX_STACK_THIS(this)
            	}

Dynamic TestHsl_obj::__CreateEmpty() { return new TestHsl_obj; }

hx::ObjectPtr< TestHsl_obj > TestHsl_obj::__new()
{
	hx::ObjectPtr< TestHsl_obj > _hx_result = new TestHsl_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestHsl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestHsl_obj > _hx_result = new TestHsl_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestHsl_obj::testBasics(){
            	HX_STACK_FRAME("thx.color.TestHsl","testBasics",0x8b5421ab,"thx.color.TestHsl.testBasics","thx/color/TestHsl.hx",9,0x30487206)
            	HX_STACK_THIS(this)
HXLINE(  10)		HX_VARI( ::Array< Float >,hsl) = ::Array_obj< Float >::__new(3)->init(0,(int)1)->init(1,(int)0)->init(2,(int)0);
HXLINE(  11)		::utest::Assert_obj::equals((int)1,hsl->__get((int)0),null(),hx::SourceInfo(HX_("TestHsl.hx",6f,d4,5d,23),11,HX_("thx.color.TestHsl",3a,2e,54,0e),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  12)		::utest::Assert_obj::equals((int)0,hsl->__get((int)1),null(),hx::SourceInfo(HX_("TestHsl.hx",6f,d4,5d,23),12,HX_("thx.color.TestHsl",3a,2e,54,0e),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  13)		::utest::Assert_obj::equals((int)0,hsl->__get((int)2),null(),hx::SourceInfo(HX_("TestHsl.hx",6f,d4,5d,23),13,HX_("thx.color.TestHsl",3a,2e,54,0e),HX_("testBasics",f7,73,1f,6e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHsl_obj,testBasics,(void))

void TestHsl_obj::testStrings(){
            	HX_STACK_FRAME("thx.color.TestHsl","testStrings",0x269fcc1c,"thx.color.TestHsl.testStrings","thx/color/TestHsl.hx",16,0x30487206)
            	HX_STACK_THIS(this)
HXLINE(  17)		HX_VARI( ::Array< Float >,hsl) = ::Array_obj< Float >::__new(3)->init(0,(int)0)->init(1,(int)0)->init(2,(int)1);
HXLINE(  18)		::utest::Assert_obj::equals(HX_("hsl(0,0%,100%)",e1,6d,1e,45),::thx::color::_Hsl::Hsl_Impl__obj::toString(hsl),null(),hx::SourceInfo(HX_("TestHsl.hx",6f,d4,5d,23),18,HX_("thx.color.TestHsl",3a,2e,54,0e),HX_("testStrings",50,7c,bc,b5)));
HXLINE(  19)		::utest::Assert_obj::equals(HX_("hsl(0,0%,100%)",e1,6d,1e,45),::thx::color::_Hsl::Hsl_Impl__obj::toCss3(hsl),null(),hx::SourceInfo(HX_("TestHsl.hx",6f,d4,5d,23),19,HX_("thx.color.TestHsl",3a,2e,54,0e),HX_("testStrings",50,7c,bc,b5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHsl_obj,testStrings,(void))

void TestHsl_obj::testFromString(){
            	HX_STACK_FRAME("thx.color.TestHsl","testFromString",0xb216ec81,"thx.color.TestHsl.testFromString","thx/color/TestHsl.hx",22,0x30487206)
            	HX_STACK_THIS(this)
HXLINE(  23)		Bool _hx_tmp = ::thx::color::_Hsl::Hsl_Impl__obj::equals(::Array_obj< Float >::__new(3)->init(0,((Float)0.5))->init(1,((Float)0.2))->init(2,((Float)0.1)),::thx::color::_Hsl::Hsl_Impl__obj::fromString(HX_("hsl(50%,0.2,10%)",44,bc,b5,58)));
HXDLIN(  23)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestHsl.hx",6f,d4,5d,23),23,HX_("thx.color.TestHsl",3a,2e,54,0e),HX_("testFromString",cd,54,67,f4)));
HXLINE(  24)		Bool _hx_tmp1 = ::thx::color::_Hsla::Hsla_Impl__obj::equals(::Array_obj< Float >::__new(4)->init(0,((Float)0.5))->init(1,((Float)0.2))->init(2,((Float)0.1))->init(3,((Float)0.3)),::thx::color::_Hsla::Hsla_Impl__obj::fromString(HX_("hsla(50%,0.2,10%,0.3)",bc,23,e2,53)));
HXDLIN(  24)		::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestHsl.hx",6f,d4,5d,23),24,HX_("thx.color.TestHsl",3a,2e,54,0e),HX_("testFromString",cd,54,67,f4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHsl_obj,testFromString,(void))


TestHsl_obj::TestHsl_obj()
{
}

hx::Val TestHsl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testStrings") ) { return hx::Val( testStrings_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromString") ) { return hx::Val( testFromString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestHsl_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestHsl_obj_sStaticStorageInfo = 0;
#endif

static ::String TestHsl_obj_sMemberFields[] = {
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testStrings","\x50","\x7c","\xbc","\xb5"),
	HX_HCSTRING("testFromString","\xcd","\x54","\x67","\xf4"),
	::String(null()) };

static void TestHsl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestHsl_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestHsl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestHsl_obj::__mClass,"__mClass");
};

#endif

hx::Class TestHsl_obj::__mClass;

void TestHsl_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestHsl","\x3a","\x2e","\x54","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestHsl_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestHsl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestHsl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestHsl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestHsl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestHsl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
