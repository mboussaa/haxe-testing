// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_color__Hsva_Hsva_Impl_
#define INCLUDED_thx_color__Hsva_Hsva_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(thx,color,_Hsva,Hsva_Impl_)

namespace thx{
namespace color{
namespace _Hsva{


class HXCPP_CLASS_ATTRIBUTES Hsva_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Hsva_Impl__obj OBJ_;
		Hsva_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.color._Hsva.Hsva_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.color._Hsva.Hsva_Impl_"); }
		static hx::ObjectPtr< Hsva_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Hsva_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Hsva_Impl_","\x36","\xb8","\xcf","\x42"); }

		static ::Array< Float > create(Float hue,Float saturation,Float value,Float alpha);
		static ::Dynamic create_dyn();

		static ::Array< Float > fromFloats(::Array< Float > arr);
		static ::Dynamic fromFloats_dyn();

		static ::Array< Float > fromString(::String color);
		static ::Dynamic fromString_dyn();

		static ::Array< Float > _new(::Array< Float > channels);
		static ::Dynamic _new_dyn();

		static  ::Dynamic analogous(::Array< Float > this1,hx::Null< Float >  spread);
		static ::Dynamic analogous_dyn();

		static ::Array< Float > complement(::Array< Float > this1);
		static ::Dynamic complement_dyn();

		static ::Array< Float > normalize(::Array< Float > this1);
		static ::Dynamic normalize_dyn();

		static ::Array< Float > transparent(::Array< Float > this1,Float t);
		static ::Dynamic transparent_dyn();

		static ::Array< Float > opaque(::Array< Float > this1,Float t);
		static ::Dynamic opaque_dyn();

		static ::Array< Float > interpolate(::Array< Float > this1,::Array< Float > other,Float t);
		static ::Dynamic interpolate_dyn();

		static ::Array< Float > interpolateWidest(::Array< Float > this1,::Array< Float > other,Float t);
		static ::Dynamic interpolateWidest_dyn();

		static ::Array< Float > rotate(::Array< Float > this1,Float angle);
		static ::Dynamic rotate_dyn();

		static ::Array< Float > roundTo(::Array< Float > this1,Int decimals);
		static ::Dynamic roundTo_dyn();

		static  ::Dynamic split(::Array< Float > this1,hx::Null< Float >  spread);
		static ::Dynamic split_dyn();

		static ::Array< Float > withAlpha(::Array< Float > this1,Float newalpha);
		static ::Dynamic withAlpha_dyn();

		static ::Array< Float > withHue(::Array< Float > this1,Float newhue);
		static ::Dynamic withHue_dyn();

		static ::Array< Float > withLightness(::Array< Float > this1,Float newvalue);
		static ::Dynamic withLightness_dyn();

		static ::Array< Float > withSaturation(::Array< Float > this1,Float newsaturation);
		static ::Dynamic withSaturation_dyn();

		static ::String toString(::Array< Float > this1);
		static ::Dynamic toString_dyn();

		static Bool equals(::Array< Float > this1,::Array< Float > other);
		static ::Dynamic equals_dyn();

		static Bool nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic tolerance);
		static ::Dynamic nearEquals_dyn();

		static ::Array< Float > toHsv(::Array< Float > this1);
		static ::Dynamic toHsv_dyn();

		static ::Array< Float > toHsla(::Array< Float > this1);
		static ::Dynamic toHsla_dyn();

		static Int toRgb(::Array< Float > this1);
		static ::Dynamic toRgb_dyn();

		static Int toRgba(::Array< Float > this1);
		static ::Dynamic toRgba_dyn();

		static ::Array< Float > toRgbxa(::Array< Float > this1);
		static ::Dynamic toRgbxa_dyn();

		static Float get_hue(::Array< Float > this1);
		static ::Dynamic get_hue_dyn();

		static Float get_saturation(::Array< Float > this1);
		static ::Dynamic get_saturation_dyn();

		static Float get_value(::Array< Float > this1);
		static ::Dynamic get_value_dyn();

		static Float get_alpha(::Array< Float > this1);
		static ::Dynamic get_alpha_dyn();

};

} // end namespace thx
} // end namespace color
} // end namespace _Hsva

#endif /* INCLUDED_thx_color__Hsva_Hsva_Impl_ */ 
