// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_utest_Assertation
#include <utest/Assertation.h>
#endif
#ifndef INCLUDED_utest_TestResult
#include <utest/TestResult.h>
#endif
#ifndef INCLUDED_utest_ui_common_ClassResult
#include <utest/ui/common/ClassResult.h>
#endif
#ifndef INCLUDED_utest_ui_common_FixtureResult
#include <utest/ui/common/FixtureResult.h>
#endif
#ifndef INCLUDED_utest_ui_common_PackageResult
#include <utest/ui/common/PackageResult.h>
#endif
#ifndef INCLUDED_utest_ui_common_ResultStats
#include <utest/ui/common/ResultStats.h>
#endif

namespace utest{
namespace ui{
namespace common{

void PackageResult_obj::__construct(::String packageName){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","new",0x9e5ca305,"utest.ui.common.PackageResult.new","utest/ui/common/PackageResult.hx",13,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(packageName,"packageName")
HXLINE(  14)		this->packageName = packageName;
HXLINE(  15)		this->classes =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  16)		this->packages =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  17)		this->stats =  ::utest::ui::common::ResultStats_obj::__new();
            	}

Dynamic PackageResult_obj::__CreateEmpty() { return new PackageResult_obj; }

hx::ObjectPtr< PackageResult_obj > PackageResult_obj::__new(::String packageName)
{
	hx::ObjectPtr< PackageResult_obj > _hx_result = new PackageResult_obj();
	_hx_result->__construct(packageName);
	return _hx_result;
}

Dynamic PackageResult_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PackageResult_obj > _hx_result = new PackageResult_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void PackageResult_obj::addResult( ::utest::TestResult result,Bool flattenPackage){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","addResult",0xfd707a43,"utest.ui.common.PackageResult.addResult","utest/ui/common/PackageResult.hx",20,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
            	HX_STACK_ARG(flattenPackage,"flattenPackage")
HXLINE(  21)		HX_VARI(  ::utest::ui::common::PackageResult,pack) = this->getOrCreatePackage(result->pack,flattenPackage,hx::ObjectPtr<OBJ_>(this));
HXLINE(  22)		HX_VARI(  ::utest::ui::common::ClassResult,cls) = this->getOrCreateClass(pack,result->cls,result->setup,result->teardown);
HXLINE(  23)		HX_VARI(  ::utest::ui::common::FixtureResult,fix) = this->createFixture(result->method,result->assertations);
HXLINE(  24)		cls->add(fix);
            	}


HX_DEFINE_DYNAMIC_FUNC2(PackageResult_obj,addResult,(void))

void PackageResult_obj::addClass( ::utest::ui::common::ClassResult result){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","addClass",0x31561592,"utest.ui.common.PackageResult.addClass","utest/ui/common/PackageResult.hx",27,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE(  28)		this->classes->set(result->className,result);
HXLINE(  29)		this->stats->wire(result->stats);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PackageResult_obj,addClass,(void))

void PackageResult_obj::addPackage( ::utest::ui::common::PackageResult result){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","addPackage",0x9b545360,"utest.ui.common.PackageResult.addPackage","utest/ui/common/PackageResult.hx",32,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE(  33)		this->packages->set(result->packageName,result);
HXLINE(  34)		this->stats->wire(result->stats);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PackageResult_obj,addPackage,(void))

Bool PackageResult_obj::existsPackage(::String name){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","existsPackage",0xe4c85bef,"utest.ui.common.PackageResult.existsPackage","utest/ui/common/PackageResult.hx",38,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE(  38)		return this->packages->exists(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PackageResult_obj,existsPackage,return )

Bool PackageResult_obj::existsClass(::String name){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","existsClass",0xc3638c61,"utest.ui.common.PackageResult.existsClass","utest/ui/common/PackageResult.hx",42,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE(  42)		return this->classes->exists(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PackageResult_obj,existsClass,return )

 ::utest::ui::common::PackageResult PackageResult_obj::getPackage(::String name){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","getPackage",0x832bad8b,"utest.ui.common.PackageResult.getPackage","utest/ui/common/PackageResult.hx",45,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE(  46)		Bool _hx_tmp;
HXDLIN(  46)		if (hx::IsNull( this->packageName )) {
HXLINE(  46)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  46)			_hx_tmp = false;
            		}
HXDLIN(  46)		if (_hx_tmp) {
HXLINE(  46)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  47)		return this->packages->get(name).StaticCast<  ::utest::ui::common::PackageResult >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PackageResult_obj,getPackage,return )

 ::utest::ui::common::ClassResult PackageResult_obj::getClass(::String name){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","getClass",0x17cffefd,"utest.ui.common.PackageResult.getClass","utest/ui/common/PackageResult.hx",51,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE(  51)		return this->classes->get(name).StaticCast<  ::utest::ui::common::ClassResult >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PackageResult_obj,getClass,return )

::Array< ::String > PackageResult_obj::classNames(hx::Null< Bool >  __o_errorsHavePriority){
Bool errorsHavePriority = __o_errorsHavePriority.Default(true);
            	HX_STACK_FRAME("utest.ui.common.PackageResult","classNames",0xcbbbb86b,"utest.ui.common.PackageResult.classNames","utest/ui/common/PackageResult.hx",54,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(errorsHavePriority,"errorsHavePriority")
HXLINE(  55)		HX_VARI( ::Array< ::String >,names) = ::Array_obj< ::String >::__new(0);
HXLINE(  56)		{
HXLINE(  56)			HX_VARI(  ::Dynamic,tmp) = this->classes->keys();
HXDLIN(  56)			while(true){
HXLINE(  56)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  56)				if (_hx_tmp) {
HXLINE(  56)					goto _hx_goto_0;
            				}
HXDLIN(  56)				HX_VARI( ::String,name) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  57)				names->push(name);
            			}
            			_hx_goto_0:;
            		}
HXLINE(  58)		if (errorsHavePriority) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::utest::ui::common::PackageResult,me) HXARGC(2)
            			Int _hx_run(::String a,::String b){
            				HX_STACK_FRAME("utest.ui.common.PackageResult","classNames",0xcbbbb86b,"utest.ui.common.PackageResult.classNames","utest/ui/common/PackageResult.hx",60,0xd1dcd36c)
            				HX_STACK_ARG(a,"a")
            				HX_STACK_ARG(b,"b")
HXLINE(  61)				HX_VARI(  ::utest::ui::common::ResultStats,as) = me->getClass(a)->stats;
HXLINE(  62)				HX_VARI(  ::utest::ui::common::ResultStats,bs) = me->getClass(b)->stats;
HXLINE(  63)				if (as->hasErrors) {
HXLINE(  64)					if (!(bs->hasErrors)) {
HXLINE(  64)						return (int)-1;
            					}
            					else {
HXLINE(  64)						if ((as->errors == bs->errors)) {
HXLINE(  64)							return ::Reflect_obj::compare(a,b);
            						}
            						else {
HXLINE(  64)							return ::Reflect_obj::compare(as->errors,bs->errors);
            						}
            					}
            				}
            				else {
HXLINE(  65)					if (bs->hasErrors) {
HXLINE(  66)						return (int)1;
            					}
            					else {
HXLINE(  67)						if (as->hasFailures) {
HXLINE(  68)							if (!(bs->hasFailures)) {
HXLINE(  68)								return (int)-1;
            							}
            							else {
HXLINE(  68)								if ((as->failures == bs->failures)) {
HXLINE(  68)									return ::Reflect_obj::compare(a,b);
            								}
            								else {
HXLINE(  68)									return ::Reflect_obj::compare(as->failures,bs->failures);
            								}
            							}
            						}
            						else {
HXLINE(  69)							if (bs->hasFailures) {
HXLINE(  70)								return (int)1;
            							}
            							else {
HXLINE(  71)								if (as->hasWarnings) {
HXLINE(  72)									if (!(bs->hasWarnings)) {
HXLINE(  72)										return (int)-1;
            									}
            									else {
HXLINE(  72)										if ((as->warnings == bs->warnings)) {
HXLINE(  72)											return ::Reflect_obj::compare(a,b);
            										}
            										else {
HXLINE(  72)											return ::Reflect_obj::compare(as->warnings,bs->warnings);
            										}
            									}
            								}
            								else {
HXLINE(  73)									if (bs->hasWarnings) {
HXLINE(  74)										return (int)1;
            									}
            									else {
HXLINE(  76)										return ::Reflect_obj::compare(a,b);
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE(  63)				return (int)0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  59)			HX_VARI(  ::utest::ui::common::PackageResult,me) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  60)			names->sort( ::Dynamic(new _hx_Closure_0(me)));
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            			Int _hx_run(::String a1,::String b1){
            				HX_STACK_FRAME("utest.ui.common.PackageResult","classNames",0xcbbbb86b,"utest.ui.common.PackageResult.classNames","utest/ui/common/PackageResult.hx",81,0xd1dcd36c)
            				HX_STACK_ARG(a1,"a1")
            				HX_STACK_ARG(b1,"b1")
HXLINE(  81)				return ::Reflect_obj::compare(a1,b1);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  80)			names->sort( ::Dynamic(new _hx_Closure_1()));
            		}
HXLINE(  84)		return names;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PackageResult_obj,classNames,return )

::Array< ::String > PackageResult_obj::packageNames(hx::Null< Bool >  __o_errorsHavePriority){
Bool errorsHavePriority = __o_errorsHavePriority.Default(true);
            	HX_STACK_FRAME("utest.ui.common.PackageResult","packageNames",0x7a037f1d,"utest.ui.common.PackageResult.packageNames","utest/ui/common/PackageResult.hx",87,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(errorsHavePriority,"errorsHavePriority")
HXLINE(  88)		HX_VARI( ::Array< ::String >,names) = ::Array_obj< ::String >::__new(0);
HXLINE(  89)		if (hx::IsNull( this->packageName )) {
HXLINE(  89)			names->push(HX_("",00,00,00,00));
            		}
HXLINE(  90)		{
HXLINE(  90)			HX_VARI(  ::Dynamic,tmp) = this->packages->keys();
HXDLIN(  90)			while(true){
HXLINE(  90)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  90)				if (_hx_tmp) {
HXLINE(  90)					goto _hx_goto_1;
            				}
HXDLIN(  90)				HX_VARI( ::String,name) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  91)				names->push(name);
            			}
            			_hx_goto_1:;
            		}
HXLINE(  92)		if (errorsHavePriority) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::utest::ui::common::PackageResult,me) HXARGC(2)
            			Int _hx_run(::String a,::String b){
            				HX_STACK_FRAME("utest.ui.common.PackageResult","packageNames",0x7a037f1d,"utest.ui.common.PackageResult.packageNames","utest/ui/common/PackageResult.hx",94,0xd1dcd36c)
            				HX_STACK_ARG(a,"a")
            				HX_STACK_ARG(b,"b")
HXLINE(  95)				HX_VARI(  ::utest::ui::common::ResultStats,as) = me->getPackage(a)->stats;
HXLINE(  96)				HX_VARI(  ::utest::ui::common::ResultStats,bs) = me->getPackage(b)->stats;
HXLINE(  97)				if (as->hasErrors) {
HXLINE(  98)					if (!(bs->hasErrors)) {
HXLINE(  98)						return (int)-1;
            					}
            					else {
HXLINE(  98)						if ((as->errors == bs->errors)) {
HXLINE(  98)							return ::Reflect_obj::compare(a,b);
            						}
            						else {
HXLINE(  98)							return ::Reflect_obj::compare(as->errors,bs->errors);
            						}
            					}
            				}
            				else {
HXLINE(  99)					if (bs->hasErrors) {
HXLINE( 100)						return (int)1;
            					}
            					else {
HXLINE( 101)						if (as->hasFailures) {
HXLINE( 102)							if (!(bs->hasFailures)) {
HXLINE( 102)								return (int)-1;
            							}
            							else {
HXLINE( 102)								if ((as->failures == bs->failures)) {
HXLINE( 102)									return ::Reflect_obj::compare(a,b);
            								}
            								else {
HXLINE( 102)									return ::Reflect_obj::compare(as->failures,bs->failures);
            								}
            							}
            						}
            						else {
HXLINE( 103)							if (bs->hasFailures) {
HXLINE( 104)								return (int)1;
            							}
            							else {
HXLINE( 105)								if (as->hasWarnings) {
HXLINE( 106)									if (!(bs->hasWarnings)) {
HXLINE( 106)										return (int)-1;
            									}
            									else {
HXLINE( 106)										if ((as->warnings == bs->warnings)) {
HXLINE( 106)											return ::Reflect_obj::compare(a,b);
            										}
            										else {
HXLINE( 106)											return ::Reflect_obj::compare(as->warnings,bs->warnings);
            										}
            									}
            								}
            								else {
HXLINE( 107)									if (bs->hasWarnings) {
HXLINE( 108)										return (int)1;
            									}
            									else {
HXLINE( 110)										return ::Reflect_obj::compare(a,b);
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE(  97)				return (int)0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  93)			HX_VARI(  ::utest::ui::common::PackageResult,me) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  94)			names->sort( ::Dynamic(new _hx_Closure_0(me)));
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            			Int _hx_run(::String a1,::String b1){
            				HX_STACK_FRAME("utest.ui.common.PackageResult","packageNames",0x7a037f1d,"utest.ui.common.PackageResult.packageNames","utest/ui/common/PackageResult.hx",115,0xd1dcd36c)
            				HX_STACK_ARG(a1,"a1")
            				HX_STACK_ARG(b1,"b1")
HXLINE( 115)				return ::Reflect_obj::compare(a1,b1);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 114)			names->sort( ::Dynamic(new _hx_Closure_1()));
            		}
HXLINE( 118)		return names;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PackageResult_obj,packageNames,return )

 ::utest::ui::common::FixtureResult PackageResult_obj::createFixture(::String method, ::Dynamic assertations){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","createFixture",0xd5c30712,"utest.ui.common.PackageResult.createFixture","utest/ui/common/PackageResult.hx",121,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(method,"method")
            	HX_STACK_ARG(assertations,"assertations")
HXLINE( 122)		HX_VARI(  ::utest::ui::common::FixtureResult,f) =  ::utest::ui::common::FixtureResult_obj::__new(method);
HXLINE( 123)		{
HXLINE( 123)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(assertations->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 123)			while(true){
HXLINE( 123)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 123)				if (_hx_tmp) {
HXLINE( 123)					goto _hx_goto_2;
            				}
HXDLIN( 123)				HX_VARI( ::hx::EnumBase,assertation) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 124)				f->add(assertation);
            			}
            			_hx_goto_2:;
            		}
HXLINE( 125)		return f;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PackageResult_obj,createFixture,return )

 ::utest::ui::common::ClassResult PackageResult_obj::getOrCreateClass( ::utest::ui::common::PackageResult pack,::String cls,::String setup,::String teardown){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","getOrCreateClass",0x2aeed6fe,"utest.ui.common.PackageResult.getOrCreateClass","utest/ui/common/PackageResult.hx",128,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pack,"pack")
            	HX_STACK_ARG(cls,"cls")
            	HX_STACK_ARG(setup,"setup")
            	HX_STACK_ARG(teardown,"teardown")
HXLINE( 129)		Bool _hx_tmp = pack->existsClass(cls);
HXDLIN( 129)		if (_hx_tmp) {
HXLINE( 129)			return pack->getClass(cls);
            		}
HXLINE( 130)		HX_VARI(  ::utest::ui::common::ClassResult,c) =  ::utest::ui::common::ClassResult_obj::__new(cls,setup,teardown);
HXLINE( 131)		pack->addClass(c);
HXLINE( 132)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC4(PackageResult_obj,getOrCreateClass,return )

 ::utest::ui::common::PackageResult PackageResult_obj::getOrCreatePackage(::String pack,Bool flat, ::utest::ui::common::PackageResult ref){
            	HX_STACK_FRAME("utest.ui.common.PackageResult","getOrCreatePackage",0xbdb147cc,"utest.ui.common.PackageResult.getOrCreatePackage","utest/ui/common/PackageResult.hx",135,0xd1dcd36c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pack,"pack")
            	HX_STACK_ARG(flat,"flat")
            	HX_STACK_ARG(ref,"ref")
HXLINE( 136)		Bool _hx_tmp;
HXDLIN( 136)		if (hx::IsNotNull( pack )) {
HXLINE( 136)			_hx_tmp = (pack == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 136)			_hx_tmp = true;
            		}
HXDLIN( 136)		if (_hx_tmp) {
HXLINE( 136)			return ref;
            		}
HXLINE( 137)		if (flat) {
HXLINE( 138)			Bool _hx_tmp1 = ref->existsPackage(pack);
HXDLIN( 138)			if (_hx_tmp1) {
HXLINE( 139)				return ref->getPackage(pack);
            			}
HXLINE( 140)			HX_VARI(  ::utest::ui::common::PackageResult,p) =  ::utest::ui::common::PackageResult_obj::__new(pack);
HXLINE( 141)			ref->addPackage(p);
HXLINE( 142)			return p;
            		}
            		else {
HXLINE( 144)			HX_VARI( ::Array< ::String >,parts) = pack.split(HX_(".",2e,00,00,00));
HXLINE( 145)			{
HXLINE( 145)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 145)				while((_g < parts->length)){
HXLINE( 145)					HX_VARI( ::String,part) = parts->__get(_g);
HXDLIN( 145)					++_g;
HXLINE( 146)					ref = this->getOrCreatePackage(part,true,ref);
            				}
            			}
HXLINE( 148)			return ref;
            		}
HXLINE( 137)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(PackageResult_obj,getOrCreatePackage,return )


PackageResult_obj::PackageResult_obj()
{
}

void PackageResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PackageResult);
	HX_MARK_MEMBER_NAME(packageName,"packageName");
	HX_MARK_MEMBER_NAME(classes,"classes");
	HX_MARK_MEMBER_NAME(packages,"packages");
	HX_MARK_MEMBER_NAME(stats,"stats");
	HX_MARK_END_CLASS();
}

void PackageResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(packageName,"packageName");
	HX_VISIT_MEMBER_NAME(classes,"classes");
	HX_VISIT_MEMBER_NAME(packages,"packages");
	HX_VISIT_MEMBER_NAME(stats,"stats");
}

hx::Val PackageResult_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"stats") ) { return hx::Val( stats); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"classes") ) { return hx::Val( classes); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"packages") ) { return hx::Val( packages); }
		if (HX_FIELD_EQ(inName,"addClass") ) { return hx::Val( addClass_dyn()); }
		if (HX_FIELD_EQ(inName,"getClass") ) { return hx::Val( getClass_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addResult") ) { return hx::Val( addResult_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addPackage") ) { return hx::Val( addPackage_dyn()); }
		if (HX_FIELD_EQ(inName,"getPackage") ) { return hx::Val( getPackage_dyn()); }
		if (HX_FIELD_EQ(inName,"classNames") ) { return hx::Val( classNames_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"packageName") ) { return hx::Val( packageName); }
		if (HX_FIELD_EQ(inName,"existsClass") ) { return hx::Val( existsClass_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"packageNames") ) { return hx::Val( packageNames_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"existsPackage") ) { return hx::Val( existsPackage_dyn()); }
		if (HX_FIELD_EQ(inName,"createFixture") ) { return hx::Val( createFixture_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getOrCreateClass") ) { return hx::Val( getOrCreateClass_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getOrCreatePackage") ) { return hx::Val( getOrCreatePackage_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PackageResult_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"stats") ) { stats=inValue.Cast<  ::utest::ui::common::ResultStats >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"classes") ) { classes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"packages") ) { packages=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"packageName") ) { packageName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PackageResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("packageName","\xf1","\x04","\xad","\x04"));
	outFields->push(HX_HCSTRING("classes","\xa6","\x4e","\x91","\x69"));
	outFields->push(HX_HCSTRING("packages","\x2d","\xea","\x54","\x39"));
	outFields->push(HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PackageResult_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(PackageResult_obj,packageName),HX_HCSTRING("packageName","\xf1","\x04","\xad","\x04")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(PackageResult_obj,classes),HX_HCSTRING("classes","\xa6","\x4e","\x91","\x69")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(PackageResult_obj,packages),HX_HCSTRING("packages","\x2d","\xea","\x54","\x39")},
	{hx::fsObject /*::utest::ui::common::ResultStats*/ ,(int)offsetof(PackageResult_obj,stats),HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PackageResult_obj_sStaticStorageInfo = 0;
#endif

static ::String PackageResult_obj_sMemberFields[] = {
	HX_HCSTRING("packageName","\xf1","\x04","\xad","\x04"),
	HX_HCSTRING("classes","\xa6","\x4e","\x91","\x69"),
	HX_HCSTRING("packages","\x2d","\xea","\x54","\x39"),
	HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"),
	HX_HCSTRING("addResult","\xde","\x9d","\xa8","\xc0"),
	HX_HCSTRING("addClass","\x57","\x9e","\xb5","\xc1"),
	HX_HCSTRING("addPackage","\x65","\x57","\x3b","\xa9"),
	HX_HCSTRING("existsPackage","\x0a","\xe9","\x69","\xe9"),
	HX_HCSTRING("existsClass","\xbc","\x0c","\xa0","\xdf"),
	HX_HCSTRING("getPackage","\x90","\xb1","\x12","\x91"),
	HX_HCSTRING("getClass","\xc2","\x87","\x2f","\xa8"),
	HX_HCSTRING("classNames","\x70","\xbc","\xa2","\xd9"),
	HX_HCSTRING("packageNames","\x62","\x4e","\xb7","\x12"),
	HX_HCSTRING("createFixture","\x2d","\x94","\x64","\xda"),
	HX_HCSTRING("getOrCreateClass","\xc3","\x2c","\xdc","\x45"),
	HX_HCSTRING("getOrCreatePackage","\xd1","\x58","\xf3","\x6e"),
	::String(null()) };

static void PackageResult_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PackageResult_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PackageResult_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PackageResult_obj::__mClass,"__mClass");
};

#endif

hx::Class PackageResult_obj::__mClass;

void PackageResult_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("utest.ui.common.PackageResult","\x93","\xbc","\x2b","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PackageResult_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PackageResult_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PackageResult_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PackageResult_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PackageResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PackageResult_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace utest
} // end namespace ui
} // end namespace common
