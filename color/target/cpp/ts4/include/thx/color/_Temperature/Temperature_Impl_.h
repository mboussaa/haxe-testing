// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_color__Temperature_Temperature_Impl_
#define INCLUDED_thx_color__Temperature_Temperature_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(thx,color,_Temperature,Temperature_Impl_)

namespace thx{
namespace color{
namespace _Temperature{


class HXCPP_CLASS_ATTRIBUTES Temperature_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Temperature_Impl__obj OBJ_;
		Temperature_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.color._Temperature.Temperature_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.color._Temperature.Temperature_Impl_"); }
		static hx::ObjectPtr< Temperature_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Temperature_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Temperature_Impl_","\xb4","\xcf","\x7a","\x80"); }

		static ::Array< Float > temperatureToRgbx(Float kelvin);
		static ::Dynamic temperatureToRgbx_dyn();

		static Float create(Float v);
		static ::Dynamic create_dyn();

		static  ::Dynamic fromString(::String color);
		static ::Dynamic fromString_dyn();

		static Float _new(Float kelvin);
		static ::Dynamic _new_dyn();

		static Float interpolate(Float this1,Float other,Float t);
		static ::Dynamic interpolate_dyn();

		static Float min(Float this1,Float other);
		static ::Dynamic min_dyn();

		static Float max(Float this1,Float other);
		static ::Dynamic max_dyn();

		static Float roundTo(Float this1,Int decimals);
		static ::Dynamic roundTo_dyn();

		static ::String toString(Float this1);
		static ::Dynamic toString_dyn();

		static Bool equals(Float this1,Float other);
		static ::Dynamic equals_dyn();

		static Bool nearEquals(Float this1,Float other, ::Dynamic tolerance);
		static ::Dynamic nearEquals_dyn();

		static Float get_kelvin(Float this1);
		static ::Dynamic get_kelvin_dyn();

		static ::Array< Float > toLab(Float this1);
		static ::Dynamic toLab_dyn();

		static ::Array< Float > toLCh(Float this1);
		static ::Dynamic toLCh_dyn();

		static ::Array< Float > toLuv(Float this1);
		static ::Dynamic toLuv_dyn();

		static ::Array< Float > toCmy(Float this1);
		static ::Dynamic toCmy_dyn();

		static ::Array< Float > toCmyk(Float this1);
		static ::Dynamic toCmyk_dyn();

		static ::Array< Float > toCubeHelix(Float this1);
		static ::Dynamic toCubeHelix_dyn();

		static ::Array< Float > toHsl(Float this1);
		static ::Dynamic toHsl_dyn();

		static ::Array< Float > toHsv(Float this1);
		static ::Dynamic toHsv_dyn();

		static ::Array< Float > toHunterLab(Float this1);
		static ::Dynamic toHunterLab_dyn();

		static Int toRgb(Float this1);
		static ::Dynamic toRgb_dyn();

		static Int toRgba(Float this1);
		static ::Dynamic toRgba_dyn();

		static ::Array< Float > toRgbxTannerHelland(Float this1);
		static ::Dynamic toRgbxTannerHelland_dyn();

		static ::Array< Float > toRgbx(Float this1);
		static ::Dynamic toRgbx_dyn();

		static ::Array< Float > toRgbxa(Float this1);
		static ::Dynamic toRgbxa_dyn();

		static ::Array< Float > toYuv(Float this1);
		static ::Dynamic toYuv_dyn();

		static ::Array< Float > toXyz(Float this1);
		static ::Dynamic toXyz_dyn();

		static ::Array< Float > toYxy(Float this1);
		static ::Dynamic toYxy_dyn();

};

} // end namespace thx
} // end namespace color
} // end namespace _Temperature

#endif /* INCLUDED_thx_color__Temperature_Temperature_Impl_ */ 
