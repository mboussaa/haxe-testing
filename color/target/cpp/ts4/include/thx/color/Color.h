// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_color_Color
#define INCLUDED_thx_color_Color

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(thx,color,Color)

namespace thx{
namespace color{


class HXCPP_CLASS_ATTRIBUTES Color_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Color_obj OBJ_;
		Color_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.color.Color")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.color.Color"); }
		static hx::ObjectPtr< Color_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Color_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Color","\x43","\xe1","\x89","\xdd"); }

		static void __boot();
		static  ::haxe::ds::StringMap namedColors;
		static ::Array< Float > parse(::String color);
		static ::Dynamic parse_dyn();

		static void addRgbPalette( ::haxe::ds::StringMap palette);
		static ::Dynamic addRgbPalette_dyn();

		static void addLabPalette( ::haxe::ds::StringMap palette);
		static ::Dynamic addLabPalette_dyn();

};

} // end namespace thx
} // end namespace color

#endif /* INCLUDED_thx_color_Color */ 
