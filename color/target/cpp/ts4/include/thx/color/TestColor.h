// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_color_TestColor
#define INCLUDED_thx_color_TestColor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,color,TestColor)

namespace thx{
namespace color{


class HXCPP_CLASS_ATTRIBUTES TestColor_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestColor_obj OBJ_;
		TestColor_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.color.TestColor")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.color.TestColor"); }
		static hx::ObjectPtr< TestColor_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestColor_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestColor","\x91","\x8f","\x31","\xb5"); }

		void testParseHex();
		::Dynamic testParseHex_dyn();

		void testParseGrey();
		::Dynamic testParseGrey_dyn();

		void testParseCmyk();
		::Dynamic testParseCmyk_dyn();

		void testParseHsl();
		::Dynamic testParseHsl_dyn();

		void testParseHsv();
		::Dynamic testParseHsv_dyn();

		void testParseRgb();
		::Dynamic testParseRgb_dyn();

		void assertEquals(::Array< Float > a,::Array< Float > b, ::Dynamic pos);
		::Dynamic assertEquals_dyn();

};

} // end namespace thx
} // end namespace color

#endif /* INCLUDED_thx_color_TestColor */ 
