// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_color_Color
#include <thx/color/Color.h>
#endif
#ifndef INCLUDED_thx_color_TestColor
#include <thx/color/TestColor.h>
#endif
#ifndef INCLUDED_thx_color__Cmyk_Cmyk_Impl_
#include <thx/color/_Cmyk/Cmyk_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Grey_Grey_Impl_
#include <thx/color/_Grey/Grey_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgb_Rgb_Impl_
#include <thx/color/_Rgb/Rgb_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgba_Rgba_Impl_
#include <thx/color/_Rgba/Rgba_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_palettes_Web
#include <thx/color/palettes/Web.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestColor_obj::__construct(){
            	HX_STACK_FRAME("thx.color.TestColor","new",0xed0d8fce,"thx.color.TestColor.new","thx/color/TestColor.hx",8,0xd7eb7524)
            	HX_STACK_THIS(this)
            	}

Dynamic TestColor_obj::__CreateEmpty() { return new TestColor_obj; }

hx::ObjectPtr< TestColor_obj > TestColor_obj::__new()
{
	hx::ObjectPtr< TestColor_obj > _hx_result = new TestColor_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestColor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestColor_obj > _hx_result = new TestColor_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestColor_obj::testParseHex(){
            	HX_STACK_FRAME("thx.color.TestColor","testParseHex",0xad0e55ac,"thx.color.TestColor.testParseHex","thx/color/TestColor.hx",10,0xd7eb7524)
            	HX_STACK_THIS(this)
HXLINE(  11)		::Array< Float > _hx_tmp = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  11)		::Array< Float > _hx_tmp1 = ::thx::color::Color_obj::parse(HX_("#ff0000",a3,09,94,52));
HXDLIN(  11)		this->assertEquals(_hx_tmp,_hx_tmp1,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),11,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHex",da,72,78,49)));
HXLINE(  12)		 ::Dynamic _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::withAlpha(::thx::color::palettes::Web_obj::red,(int)0);
HXDLIN(  12)		::Array< Float > _hx_tmp3 = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(_hx_tmp2);
HXDLIN(  12)		::Array< Float > _hx_tmp4 = ::thx::color::Color_obj::parse(HX_("#00ff0000",63,d2,a1,ff));
HXDLIN(  12)		this->assertEquals(_hx_tmp3,_hx_tmp4,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),12,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHex",da,72,78,49)));
HXLINE(  13)		::Array< Float > _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  13)		::Array< Float > _hx_tmp6 = ::thx::color::Color_obj::parse(HX_("#FF0000",a3,ed,55,1a));
HXDLIN(  13)		this->assertEquals(_hx_tmp5,_hx_tmp6,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),13,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHex",da,72,78,49)));
HXLINE(  14)		 ::Dynamic _hx_tmp7 = ::thx::color::_Rgb::Rgb_Impl__obj::withAlpha(::thx::color::palettes::Web_obj::red,(int)0);
HXDLIN(  14)		::Array< Float > _hx_tmp8 = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(_hx_tmp7);
HXDLIN(  14)		::Array< Float > _hx_tmp9 = ::thx::color::Color_obj::parse(HX_("#00FF0000",63,b6,63,c7));
HXDLIN(  14)		this->assertEquals(_hx_tmp8,_hx_tmp9,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),14,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHex",da,72,78,49)));
HXLINE(  15)		::Array< Float > _hx_tmp10 = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  15)		::Array< Float > _hx_tmp11 = ::thx::color::Color_obj::parse(HX_("ff0000",40,cd,24,a3));
HXDLIN(  15)		this->assertEquals(_hx_tmp10,_hx_tmp11,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),15,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHex",da,72,78,49)));
HXLINE(  16)		 ::Dynamic _hx_tmp12 = ::thx::color::_Rgb::Rgb_Impl__obj::withAlpha(::thx::color::palettes::Web_obj::red,(int)0);
HXDLIN(  16)		::Array< Float > _hx_tmp13 = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(_hx_tmp12);
HXDLIN(  16)		::Array< Float > _hx_tmp14 = ::thx::color::Color_obj::parse(HX_("00ff0000",40,77,a0,28));
HXDLIN(  16)		this->assertEquals(_hx_tmp13,_hx_tmp14,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),16,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHex",da,72,78,49)));
HXLINE(  17)		::Array< Float > _hx_tmp15 = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  17)		::Array< Float > _hx_tmp16 = ::thx::color::Color_obj::parse(HX_("0xff0000",88,dd,a9,da));
HXDLIN(  17)		this->assertEquals(_hx_tmp15,_hx_tmp16,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),17,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHex",da,72,78,49)));
HXLINE(  18)		 ::Dynamic _hx_tmp17 = ::thx::color::_Rgb::Rgb_Impl__obj::withAlpha(::thx::color::palettes::Web_obj::red,(int)0);
HXDLIN(  18)		::Array< Float > _hx_tmp18 = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(_hx_tmp17);
HXDLIN(  18)		::Array< Float > _hx_tmp19 = ::thx::color::Color_obj::parse(HX_("0x00ff0000",88,29,c0,17));
HXDLIN(  18)		this->assertEquals(_hx_tmp18,_hx_tmp19,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),18,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHex",da,72,78,49)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestColor_obj,testParseHex,(void))

void TestColor_obj::testParseGrey(){
            	HX_STACK_FRAME("thx.color.TestColor","testParseGrey",0xbedd376e,"thx.color.TestColor.testParseGrey","thx/color/TestColor.hx",21,0xd7eb7524)
            	HX_STACK_THIS(this)
HXLINE(  22)		::Array< Float > _hx_tmp = ::thx::color::_Grey::Grey_Impl__obj::toRgbxa(((Float)0.5));
HXDLIN(  22)		::Array< Float > _hx_tmp1 = ::thx::color::Color_obj::parse(HX_("grey(0.5)",3b,1c,a3,48));
HXDLIN(  22)		this->assertEquals(_hx_tmp,_hx_tmp1,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),22,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseGrey",80,a2,4c,ff)));
HXLINE(  23)		::Array< Float > _hx_tmp2 = ::thx::color::_Grey::Grey_Impl__obj::toRgbxa(((Float)0.5));
HXDLIN(  23)		::Array< Float > _hx_tmp3 = ::thx::color::Color_obj::parse(HX_("grey(50%)",e8,a3,f2,4b));
HXDLIN(  23)		this->assertEquals(_hx_tmp2,_hx_tmp3,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),23,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseGrey",80,a2,4c,ff)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestColor_obj,testParseGrey,(void))

void TestColor_obj::testParseCmyk(){
            	HX_STACK_FRAME("thx.color.TestColor","testParseCmyk",0xbc34a30b,"thx.color.TestColor.testParseCmyk","thx/color/TestColor.hx",27,0xd7eb7524)
            	HX_STACK_THIS(this)
HXLINE(  27)		::Array< Float > _hx_tmp = ::thx::color::_Cmyk::Cmyk_Impl__obj::toRgbxa(::Array_obj< Float >::__new(4)->init(0,(int)1)->init(1,((Float)0.5))->init(2,((Float)0.25))->init(3,((Float)0.1)));
HXDLIN(  27)		::Array< Float > _hx_tmp1 = ::thx::color::Color_obj::parse(HX_("cmyk(100%,0.5,25%,0.1)",01,3d,2f,00));
HXDLIN(  27)		this->assertEquals(_hx_tmp,_hx_tmp1,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),27,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseCmyk",1d,0e,a4,fc)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestColor_obj,testParseCmyk,(void))

void TestColor_obj::testParseHsl(){
            	HX_STACK_FRAME("thx.color.TestColor","testParseHsl",0xad0e61d2,"thx.color.TestColor.testParseHsl","thx/color/TestColor.hx",30,0xd7eb7524)
            	HX_STACK_THIS(this)
HXLINE(  31)		::Array< Float > _hx_tmp = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  31)		::Array< Float > _hx_tmp1 = ::thx::color::Color_obj::parse(HX_("hsl(0,100%,50%)",74,a2,67,0d));
HXDLIN(  31)		this->assertEquals(_hx_tmp,_hx_tmp1,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),31,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHsl",00,7f,78,49)));
HXLINE(  32)		::Array< Float > _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  32)		::Array< Float > _hx_tmp3 = ::thx::color::Color_obj::parse(HX_("hsl(0deg,100%,50%)",48,d8,f6,5b));
HXDLIN(  32)		this->assertEquals(_hx_tmp2,_hx_tmp3,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),32,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHsl",00,7f,78,49)));
HXLINE(  33)		::Array< Float > _hx_tmp4 = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  33)		::Array< Float > _hx_tmp5 = ::thx::color::Color_obj::parse(HX_("hsla(0deg,100%,50%,1)",c4,d1,e3,0f));
HXDLIN(  33)		this->assertEquals(_hx_tmp4,_hx_tmp5,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),33,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHsl",00,7f,78,49)));
HXLINE(  34)		::Array< Float > _hx_tmp6 = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  34)		::Array< Float > _hx_tmp7 = ::thx::color::Color_obj::parse(HX_("hsla(0,100%,50%,100%)",1f,2b,f4,5e));
HXDLIN(  34)		this->assertEquals(_hx_tmp6,_hx_tmp7,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),34,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHsl",00,7f,78,49)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestColor_obj,testParseHsl,(void))

void TestColor_obj::testParseHsv(){
            	HX_STACK_FRAME("thx.color.TestColor","testParseHsv",0xad0e61dc,"thx.color.TestColor.testParseHsv","thx/color/TestColor.hx",37,0xd7eb7524)
            	HX_STACK_THIS(this)
HXLINE(  38)		::Array< Float > _hx_tmp = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  38)		::Array< Float > _hx_tmp1 = ::thx::color::Color_obj::parse(HX_("hsv(0,100%, 100%)",b4,2e,73,f7));
HXDLIN(  38)		this->assertEquals(_hx_tmp,_hx_tmp1,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),38,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHsv",0a,7f,78,49)));
HXLINE(  39)		::Array< Float > _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  39)		::Array< Float > _hx_tmp3 = ::thx::color::Color_obj::parse(HX_("hsv(0deg,100%,100%)",36,9e,fa,eb));
HXDLIN(  39)		this->assertEquals(_hx_tmp2,_hx_tmp3,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),39,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseHsv",0a,7f,78,49)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestColor_obj,testParseHsv,(void))

void TestColor_obj::testParseRgb(){
            	HX_STACK_FRAME("thx.color.TestColor","testParseRgb",0xad15edde,"thx.color.TestColor.testParseRgb","thx/color/TestColor.hx",42,0xd7eb7524)
            	HX_STACK_THIS(this)
HXLINE(  43)		::Array< Float > _hx_tmp = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  43)		::Array< Float > _hx_tmp1 = ::thx::color::Color_obj::parse(HX_("rgb(255,0,0)",4a,94,29,21));
HXDLIN(  43)		this->assertEquals(_hx_tmp,_hx_tmp1,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),43,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseRgb",0c,0b,80,49)));
HXLINE(  44)		::Array< Float > _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbxa(::thx::color::palettes::Web_obj::red);
HXDLIN(  44)		::Array< Float > _hx_tmp3 = ::thx::color::Color_obj::parse(HX_("rgb(100%,0,0)",32,36,e7,0a));
HXDLIN(  44)		this->assertEquals(_hx_tmp2,_hx_tmp3,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),44,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseRgb",0c,0b,80,49)));
HXLINE(  45)		::Array< Float > _hx_tmp4 = ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(::Array_obj< Float >::__new(3)->init(0,((Float)0.5))->init(1,(int)0)->init(2,(int)0));
HXDLIN(  45)		::Array< Float > _hx_tmp5 = ::thx::color::Color_obj::parse(HX_("rgb(0.5,0,0)",c5,70,ae,8b));
HXDLIN(  45)		this->assertEquals(_hx_tmp4,_hx_tmp5,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),45,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseRgb",0c,0b,80,49)));
HXLINE(  46)		::Array< Float > _hx_tmp6 = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa((int)16711935);
HXDLIN(  46)		::Array< Float > _hx_tmp7 = ::thx::color::Color_obj::parse(HX_("rgba(0,255,0,1)",9e,dd,6a,29));
HXDLIN(  46)		this->assertEquals(_hx_tmp6,_hx_tmp7,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),46,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseRgb",0c,0b,80,49)));
HXLINE(  47)		::Array< Float > _hx_tmp8 = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa((int)16711935);
HXDLIN(  47)		::Array< Float > _hx_tmp9 = ::thx::color::Color_obj::parse(HX_("rgba(0,100%,0,1)",fc,54,c5,3b));
HXDLIN(  47)		this->assertEquals(_hx_tmp8,_hx_tmp9,hx::SourceInfo(HX_("TestColor.hx",cd,03,ed,c4),47,HX_("thx.color.TestColor",dc,50,c2,8a),HX_("testParseRgb",0c,0b,80,49)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestColor_obj,testParseRgb,(void))

void TestColor_obj::assertEquals(::Array< Float > a,::Array< Float > b, ::Dynamic pos){
            	HX_STACK_FRAME("thx.color.TestColor","assertEquals",0x1072e477,"thx.color.TestColor.assertEquals","thx/color/TestColor.hx",51,0xd7eb7524)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(pos,"pos")
HXLINE(  51)		Bool _hx_tmp = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::equals(a,b);
HXDLIN(  51)		::utest::Assert_obj::isTrue(_hx_tmp,(((HX_("expected ",a8,7a,f8,e9) + ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toString(a)) + HX_(" but was ",36,e4,f6,61)) + ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toString(b)),pos);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TestColor_obj,assertEquals,(void))


TestColor_obj::TestColor_obj()
{
}

hx::Val TestColor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"testParseHex") ) { return hx::Val( testParseHex_dyn()); }
		if (HX_FIELD_EQ(inName,"testParseHsl") ) { return hx::Val( testParseHsl_dyn()); }
		if (HX_FIELD_EQ(inName,"testParseHsv") ) { return hx::Val( testParseHsv_dyn()); }
		if (HX_FIELD_EQ(inName,"testParseRgb") ) { return hx::Val( testParseRgb_dyn()); }
		if (HX_FIELD_EQ(inName,"assertEquals") ) { return hx::Val( assertEquals_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testParseGrey") ) { return hx::Val( testParseGrey_dyn()); }
		if (HX_FIELD_EQ(inName,"testParseCmyk") ) { return hx::Val( testParseCmyk_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestColor_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestColor_obj_sStaticStorageInfo = 0;
#endif

static ::String TestColor_obj_sMemberFields[] = {
	HX_HCSTRING("testParseHex","\xda","\x72","\x78","\x49"),
	HX_HCSTRING("testParseGrey","\x80","\xa2","\x4c","\xff"),
	HX_HCSTRING("testParseCmyk","\x1d","\x0e","\xa4","\xfc"),
	HX_HCSTRING("testParseHsl","\x00","\x7f","\x78","\x49"),
	HX_HCSTRING("testParseHsv","\x0a","\x7f","\x78","\x49"),
	HX_HCSTRING("testParseRgb","\x0c","\x0b","\x80","\x49"),
	HX_HCSTRING("assertEquals","\xa5","\x01","\xdd","\xac"),
	::String(null()) };

static void TestColor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestColor_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestColor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestColor_obj::__mClass,"__mClass");
};

#endif

hx::Class TestColor_obj::__mClass;

void TestColor_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestColor","\xdc","\x50","\xc2","\x8a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestColor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestColor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestColor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestColor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestColor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestColor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
