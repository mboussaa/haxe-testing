// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_Maps
#include <thx/Maps.h>
#endif
#ifndef INCLUDED_thx_color_Color
#include <thx/color/Color.h>
#endif
#ifndef INCLUDED_thx_color__Cmy_Cmy_Impl_
#include <thx/color/_Cmy/Cmy_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Cmyk_Cmyk_Impl_
#include <thx/color/_Cmyk/Cmyk_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__CubeHelix_CubeHelix_Impl_
#include <thx/color/_CubeHelix/CubeHelix_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Grey_Grey_Impl_
#include <thx/color/_Grey/Grey_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsl_Hsl_Impl_
#include <thx/color/_Hsl/Hsl_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsla_Hsla_Impl_
#include <thx/color/_Hsla/Hsla_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsv_Hsv_Impl_
#include <thx/color/_Hsv/Hsv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsva_Hsva_Impl_
#include <thx/color/_Hsva/Hsva_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__HunterLab_HunterLab_Impl_
#include <thx/color/_HunterLab/HunterLab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__LCh_LCh_Impl_
#include <thx/color/_LCh/LCh_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Luv_Luv_Impl_
#include <thx/color/_Luv/Luv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgb_Rgb_Impl_
#include <thx/color/_Rgb/Rgb_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Yuv_Yuv_Impl_
#include <thx/color/_Yuv/Yuv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Yxy_Yxy_Impl_
#include <thx/color/_Yxy/Yxy_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{

void Color_obj::__construct() { }

Dynamic Color_obj::__CreateEmpty() { return new Color_obj; }

hx::ObjectPtr< Color_obj > Color_obj::__new()
{
	hx::ObjectPtr< Color_obj > _hx_result = new Color_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Color_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Color_obj > _hx_result = new Color_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::haxe::ds::StringMap Color_obj::namedColors;

::Array< Float > Color_obj::parse(::String color){
            	HX_STACK_FRAME("thx.color.Color","parse",0x77c2c8d3,"thx.color.Color.parse","thx/color/Color.hx",16,0x24cc8732)
            	HX_STACK_ARG(color,"color")
HXLINE(  17)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseHex(color);
HXLINE(  18)		if (hx::IsNull( info )) {
HXLINE(  19)			info = ::thx::color::parse::ColorParser_obj::parseColor(color);
            		}
HXLINE(  20)		if (hx::IsNull( info )) {
HXLINE(  21)			HX_VARI( ::Array< Float >,rgb) = ( (::Array< Float >)(::thx::color::Color_obj::namedColors->get(color)) );
HXLINE(  22)			if (hx::IsNull( rgb )) {
HXLINE(  23)				return null();
            			}
            			else {
HXLINE(  25)				return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(rgb);
            			}
            		}
HXLINE(  28)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  28)			::String _hx_switch_0 = info->name;
            			if (  (_hx_switch_0==HX_("ciexyz",ba,a6,85,4d)) ||  (_hx_switch_0==HX_("xyz",59,78,5b,00)) ){
HXLINE(  61)				::Array< Float > _hx_tmp = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXDLIN(  61)				::Array< Float > _hx_tmp1 = ::thx::color::_Xyz::Xyz_Impl__obj::fromFloats(_hx_tmp);
HXLINE(  28)				return ::thx::color::_Xyz::Xyz_Impl__obj::toRgbxa(_hx_tmp1);
HXLINE(  60)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("cmy",8f,7e,4b,00)) ){
HXLINE(  36)				::Array< Float > _hx_tmp2 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXDLIN(  36)				::Array< Float > _hx_tmp3 = ::thx::color::_Cmy::Cmy_Impl__obj::fromFloats(_hx_tmp2);
HXLINE(  28)				return ::thx::color::_Cmy::Cmy_Impl__obj::toRgbxa(_hx_tmp3);
HXLINE(  35)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("cmyk",fc,3e,c3,41)) ){
HXLINE(  38)				::Array< Float > _hx_tmp4 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)4,false);
HXDLIN(  38)				::Array< Float > _hx_tmp5 = ::thx::color::_Cmyk::Cmyk_Impl__obj::fromFloats(_hx_tmp4);
HXLINE(  28)				return ::thx::color::_Cmyk::Cmyk_Impl__obj::toRgbxa(_hx_tmp5);
HXLINE(  37)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("cubehelix",69,db,6d,29)) ){
HXLINE(  40)				::Array< Float > _hx_tmp6 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXDLIN(  40)				::Array< Float > _hx_tmp7 = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::fromFloats(_hx_tmp6);
HXLINE(  28)				return ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbxa(_hx_tmp7);
HXLINE(  39)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("gray",e3,cf,6b,44)) ||  (_hx_switch_0==HX_("grey",5f,d3,6b,44)) ){
HXLINE(  42)				::Array< Float > _hx_tmp8 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)1,false);
HXLINE(  28)				return ::thx::color::_Grey::Grey_Impl__obj::toRgbxa(_hx_tmp8->__get((int)0));
HXLINE(  41)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("hcl",11,41,4f,00)) ){
HXLINE(  44)				HX_VARI( ::Array< Float >,c) = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXLINE(  28)				return ::thx::color::_LCh::LCh_Impl__obj::toRgbxa(::Array_obj< Float >::__new(3)->init(0,c->__get((int)2))->init(1,c->__get((int)1))->init(2,c->__get((int)0)));
HXLINE(  43)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("hsb",f7,4e,4f,00)) ||  (_hx_switch_0==HX_("hsv",0b,4f,4f,00)) ){
HXLINE(  51)				::Array< Float > _hx_tmp9 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXDLIN(  51)				::Array< Float > _hx_tmp10 = ::thx::color::_Hsv::Hsv_Impl__obj::fromFloats(_hx_tmp9);
HXLINE(  28)				return ::thx::color::_Hsv::Hsv_Impl__obj::toRgbxa(_hx_tmp10);
HXLINE(  50)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("hsl",01,4f,4f,00)) ){
HXLINE(  47)				::Array< Float > _hx_tmp11 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXDLIN(  47)				::Array< Float > _hx_tmp12 = ::thx::color::_Hsl::Hsl_Impl__obj::fromFloats(_hx_tmp11);
HXLINE(  28)				return ::thx::color::_Hsl::Hsl_Impl__obj::toRgbxa(_hx_tmp12);
HXLINE(  46)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("hsla",40,d2,15,45)) ){
HXLINE(  49)				::Array< Float > _hx_tmp13 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)4,false);
HXDLIN(  49)				::Array< Float > _hx_tmp14 = ::thx::color::_Hsla::Hsla_Impl__obj::fromFloats(_hx_tmp13);
HXLINE(  28)				return ::thx::color::_Hsla::Hsla_Impl__obj::toRgbxa(_hx_tmp14);
HXLINE(  48)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("hsva",f6,da,15,45)) ){
HXLINE(  53)				::Array< Float > _hx_tmp15 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)4,false);
HXDLIN(  53)				::Array< Float > _hx_tmp16 = ::thx::color::_Hsva::Hsva_Impl__obj::fromFloats(_hx_tmp15);
HXLINE(  28)				return ::thx::color::_Hsva::Hsva_Impl__obj::toRgbxa(_hx_tmp16);
HXLINE(  52)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("hunterlab",8d,e4,e4,88)) ){
HXLINE(  55)				::Array< Float > _hx_tmp17 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)4,false);
HXDLIN(  55)				::Array< Float > _hx_tmp18 = ::thx::color::_HunterLab::HunterLab_Impl__obj::fromFloats(_hx_tmp17);
HXLINE(  28)				return ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbxa(_hx_tmp18);
HXLINE(  54)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("cielab",ae,76,7c,4d)) ||  (_hx_switch_0==HX_("lab",4d,48,52,00)) ){
HXLINE(  30)				::Array< Float > _hx_tmp19 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXDLIN(  30)				::Array< Float > _hx_tmp20 = ::thx::color::_Lab::Lab_Impl__obj::fromFloats(_hx_tmp19);
HXLINE(  28)				return ::thx::color::_Lab::Lab_Impl__obj::toRgbxa(_hx_tmp20);
HXLINE(  29)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("cielch",72,78,7c,4d)) ||  (_hx_switch_0==HX_("lch",11,4a,52,00)) ){
HXLINE(  32)				::Array< Float > _hx_tmp21 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXDLIN(  32)				::Array< Float > _hx_tmp22 = ::thx::color::_LCh::LCh_Impl__obj::fromFloats(_hx_tmp21);
HXLINE(  28)				return ::thx::color::_LCh::LCh_Impl__obj::toRgbxa(_hx_tmp22);
HXLINE(  31)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("cieluv",2e,88,7c,4d)) ||  (_hx_switch_0==HX_("luv",cd,59,52,00)) ){
HXLINE(  34)				::Array< Float > _hx_tmp23 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXDLIN(  34)				::Array< Float > _hx_tmp24 = ::thx::color::_Luv::Luv_Impl__obj::fromFloats(_hx_tmp23);
HXLINE(  28)				return ::thx::color::_Luv::Luv_Impl__obj::toRgbxa(_hx_tmp24);
HXLINE(  33)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("rgb",0d,db,56,00)) ){
HXLINE(  57)				::Array< Float > _hx_tmp25 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,true);
HXDLIN(  57)				::Array< Float > _hx_tmp26 = ::thx::color::_Rgbx::Rgbx_Impl__obj::fromFloats(_hx_tmp25);
HXLINE(  28)				return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(_hx_tmp26);
HXLINE(  56)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("rgba",b4,d0,a8,4b)) ){
HXLINE(  59)				::Array< Float > _hx_tmp27 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)4,true);
HXLINE(  28)				return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::fromFloats(_hx_tmp27);
HXDLIN(  28)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("yuv",1a,37,5c,00)) ){
HXLINE(  63)				::Array< Float > _hx_tmp28 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXDLIN(  63)				::Array< Float > _hx_tmp29 = ::thx::color::_Yuv::Yuv_Impl__obj::fromFloats(_hx_tmp28);
HXLINE(  28)				return ::thx::color::_Yuv::Yuv_Impl__obj::toRgbxa(_hx_tmp29);
HXLINE(  62)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("yxy",ba,39,5c,00)) ){
HXLINE(  65)				::Array< Float > _hx_tmp30 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXDLIN(  65)				::Array< Float > _hx_tmp31 = ::thx::color::_Yxy::Yxy_Impl__obj::fromFloats(_hx_tmp30);
HXLINE(  28)				return ::thx::color::_Yxy::Yxy_Impl__obj::toRgbxa(_hx_tmp31);
HXLINE(  64)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  28)				return null();
            			}
            			_hx_goto_0:;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  28)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  28)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_obj,parse,return )

void Color_obj::addRgbPalette( ::haxe::ds::StringMap palette){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.color.Color","addRgbPalette",0x1edf2d0f,"thx.color.Color.addRgbPalette","thx/color/Color.hx",72,0x24cc8732)
            			HX_STACK_ARG(_,"_")
HXLINE(  72)			{
HXLINE(  72)				HX_VARI( ::Array< Float >,value) = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbx(( (Int)(_->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)) ));
HXDLIN(  72)				::thx::color::Color_obj::namedColors->set(( (::String)(_->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)) ),value);
            			}
HXLINE(  86)			return;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.Color","addRgbPalette",0x1edf2d0f,"thx.color.Color.addRgbPalette","thx/color/Color.hx",72,0x24cc8732)
            	HX_STACK_ARG(palette,"palette")
HXLINE(  72)		::thx::Maps_obj::tuples(palette)->map( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_obj,addRgbPalette,(void))

void Color_obj::addLabPalette( ::haxe::ds::StringMap palette){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.color.Color","addLabPalette",0xab77e7cf,"thx.color.Color.addLabPalette","thx/color/Color.hx",75,0x24cc8732)
            			HX_STACK_ARG(_,"_")
HXLINE(  75)			{
HXLINE(  75)				HX_VARI( ::Array< Float >,value) = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(( (::Array< Float >)(_->__Field(HX_("_1",f2,52,00,00),hx::paccDynamic)) ));
HXDLIN(  75)				::thx::color::Color_obj::namedColors->set(( (::String)(_->__Field(HX_("_0",f1,52,00,00),hx::paccDynamic)) ),value);
            			}
HXLINE(  86)			return;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.Color","addLabPalette",0xab77e7cf,"thx.color.Color.addLabPalette","thx/color/Color.hx",75,0x24cc8732)
            	HX_STACK_ARG(palette,"palette")
HXLINE(  75)		::thx::Maps_obj::tuples(palette)->map( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_obj,addLabPalette,(void))


Color_obj::Color_obj()
{
}

bool Color_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"namedColors") ) { outValue = namedColors; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addRgbPalette") ) { outValue = addRgbPalette_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addLabPalette") ) { outValue = addLabPalette_dyn(); return true; }
	}
	return false;
}

bool Color_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"namedColors") ) { namedColors=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Color_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Color_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Color_obj::namedColors,HX_HCSTRING("namedColors","\x49","\xda","\xf7","\xd6")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Color_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Color_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Color_obj::namedColors,"namedColors");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Color_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Color_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Color_obj::namedColors,"namedColors");
};

#endif

hx::Class Color_obj::__mClass;

static ::String Color_obj_sStaticFields[] = {
	HX_HCSTRING("namedColors","\x49","\xda","\xf7","\xd6"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("addRgbPalette","\x6f","\x54","\x98","\x09"),
	HX_HCSTRING("addLabPalette","\x2f","\x0f","\x31","\x96"),
	::String(null())
};

void Color_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.Color","\x0e","\x61","\x97","\xe2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Color_obj::__GetStatic;
	__mClass->mSetStaticField = &Color_obj::__SetStatic;
	__mClass->mMarkFunc = Color_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Color_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Color_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Color_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Color_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Color_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Color_obj::__boot()
{
{
            	HX_STACK_FRAME("thx.color.Color","boot",0x4e923f92,"thx.color.Color.boot","thx/color/Color.hx",11,0x24cc8732)
HXLINE(  11)		namedColors =  ::haxe::ds::StringMap_obj::__new();
            	}
}

} // end namespace thx
} // end namespace color
