// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__Hsv_Hsv_Impl_
#include <thx/color/_Hsv/Hsv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsva_Hsva_Impl_
#include <thx/color/_Hsva/Hsva_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _Hsva{

void Hsva_Impl__obj::__construct() { }

Dynamic Hsva_Impl__obj::__CreateEmpty() { return new Hsva_Impl__obj; }

hx::ObjectPtr< Hsva_Impl__obj > Hsva_Impl__obj::__new()
{
	hx::ObjectPtr< Hsva_Impl__obj > _hx_result = new Hsva_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Hsva_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Hsva_Impl__obj > _hx_result = new Hsva_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Hsva_Impl__obj::create(Float hue,Float saturation,Float value,Float alpha){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","create",0xda885706,"thx.color._Hsva.Hsva_Impl_.create","thx/color/Hsva.hx",20,0x5dc25b71)
            	HX_STACK_ARG(hue,"hue")
            	HX_STACK_ARG(saturation,"saturation")
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE(  20)		return ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,saturation)->init(2,value)->init(3,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Hsva_Impl__obj,create,return )

::Array< Float > Hsva_Impl__obj::fromFloats(::Array< Float > arr){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","fromFloats",0x6c4ce56b,"thx.color._Hsva.Hsva_Impl_.fromFloats","thx/color/Hsva.hx",22,0x5dc25b71)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  23)		::thx::ArrayFloats_obj::resize(arr,(int)4,null());
HXLINE(  24)		return ::Array_obj< Float >::__new(4)->init(0,arr->__get((int)0))->init(1,arr->__get((int)1))->init(2,arr->__get((int)2))->init(3,arr->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,fromFloats,return )

::Array< Float > Hsva_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","fromString",0x3c26eae5,"thx.color._Hsva.Hsva_Impl_.fromString","thx/color/Hsva.hx",27,0x5dc25b71)
            	HX_STACK_ARG(color,"color")
HXLINE(  28)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseColor(color);
HXLINE(  29)		if (hx::IsNull( info )) {
HXLINE(  30)			return null();
            		}
HXLINE(  32)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  32)			::String _hx_switch_0 = info->name;
            			if (  (_hx_switch_0==HX_("hsv",0b,4f,4f,00)) ){
HXLINE(  34)				HX_VARI( ::Array< Float >,channels) = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXLINE(  32)				return ::thx::color::_Hsv::Hsv_Impl__obj::toHsva(channels);
HXDLIN(  32)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("hsva",f6,da,15,45)) ){
HXLINE(  36)				HX_VARI_NAME( ::Array< Float >,channels1,"channels") = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)4,false);
HXLINE(  32)				return channels1;
HXLINE(  36)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  32)				return null();
            			}
            			_hx_goto_0:;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  32)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  32)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,fromString,return )

::Array< Float > Hsva_Impl__obj::_new(::Array< Float > channels){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","_new",0x0a7f0eeb,"thx.color._Hsva.Hsva_Impl_._new","thx/color/Hsva.hx",42,0x5dc25b71)
            	HX_STACK_ARG(channels,"channels")
HXLINE(  42)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,_new,return )

 ::Dynamic Hsva_Impl__obj::analogous(::Array< Float > this1,hx::Null< Float >  __o_spread){
Float spread = __o_spread.Default(((Float)30.0));
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","analogous",0x458ffa93,"thx.color._Hsva.Hsva_Impl_.analogous","thx/color/Hsva.hx",46,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(spread,"spread")
HXLINE(  46)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsva::Hsva_Impl__obj::rotate(this1,-(spread)))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsva::Hsva_Impl__obj::rotate(this1,spread)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,analogous,return )

::Array< Float > Hsva_Impl__obj::complement(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","complement",0xe566fff0,"thx.color._Hsva.Hsva_Impl_.complement","thx/color/Hsva.hx",52,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  52)		return ::thx::color::_Hsva::Hsva_Impl__obj::rotate(this1,(int)180);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,complement,return )

::Array< Float > Hsva_Impl__obj::normalize(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","normalize",0x51fa69c3,"thx.color._Hsva.Hsva_Impl_.normalize","thx/color/Hsva.hx",55,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  55)		HX_VARI( Float,hue) = ::thx::Floats_obj::wrapCircular(this1->__get((int)0),(int)360);
HXDLIN(  55)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXDLIN(  55)		HX_VARI( Float,v) = this1->__get((int)1);
HXDLIN(  55)		Float _hx_tmp;
HXDLIN(  55)		if ((v < (int)0)) {
HXLINE(  55)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  55)			if ((v > (int)1)) {
HXLINE(  55)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(  55)				_hx_tmp = v;
            			}
            		}
HXDLIN(  55)		HX_VARI_NAME( Float,v1,"v") = this1->__get((int)2);
HXDLIN(  55)		Float _hx_tmp1;
HXDLIN(  55)		if ((v1 < (int)0)) {
HXLINE(  55)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE(  55)			if ((v1 > (int)1)) {
HXLINE(  55)				_hx_tmp1 = (int)1;
            			}
            			else {
HXLINE(  55)				_hx_tmp1 = v1;
            			}
            		}
HXDLIN(  55)		HX_VARI_NAME( Float,v2,"v") = this1->__get((int)3);
HXDLIN(  55)		Float _hx_tmp2;
HXDLIN(  55)		if ((v2 < (int)0)) {
HXLINE(  55)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE(  55)			if ((v2 > (int)1)) {
HXLINE(  55)				_hx_tmp2 = (int)1;
            			}
            			else {
HXLINE(  55)				_hx_tmp2 = v2;
            			}
            		}
HXDLIN(  55)		this2 = ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,_hx_tmp)->init(2,_hx_tmp1)->init(3,_hx_tmp2);
HXDLIN(  55)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,normalize,return )

::Array< Float > Hsva_Impl__obj::transparent(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","transparent",0xf76cd708,"thx.color._Hsva.Hsva_Impl_.transparent","thx/color/Hsva.hx",58,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  58)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,::thx::Floats_obj::interpolate(t,this1->__get((int)3),(int)0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,transparent,return )

::Array< Float > Hsva_Impl__obj::opaque(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","opaque",0x7d6acceb,"thx.color._Hsva.Hsva_Impl_.opaque","thx/color/Hsva.hx",66,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  66)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,::thx::Floats_obj::interpolate(t,this1->__get((int)3),(int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,opaque,return )

::Array< Float > Hsva_Impl__obj::interpolate(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","interpolate",0xf3e58077,"thx.color._Hsva.Hsva_Impl_.interpolate","thx/color/Hsva.hx",74,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  74)		return ::Array_obj< Float >::__new(4)->init(0,::thx::Floats_obj::interpolateAngle(t,this1->__get((int)0),other->__get((int)0),null()))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)))->init(3,::thx::Floats_obj::interpolate(t,this1->__get((int)3),other->__get((int)3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsva_Impl__obj,interpolate,return )

::Array< Float > Hsva_Impl__obj::interpolateWidest(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","interpolateWidest",0xfe055f4b,"thx.color._Hsva.Hsva_Impl_.interpolateWidest","thx/color/Hsva.hx",82,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  82)		return ::Array_obj< Float >::__new(4)->init(0,::thx::Floats_obj::interpolateAngleWidest(t,this1->__get((int)0),other->__get((int)0),null()))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)))->init(3,::thx::Floats_obj::interpolate(t,this1->__get((int)3),other->__get((int)3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsva_Impl__obj,interpolateWidest,return )

::Array< Float > Hsva_Impl__obj::rotate(::Array< Float > this1,Float angle){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","rotate",0x29993665,"thx.color._Hsva.Hsva_Impl_.rotate","thx/color/Hsva.hx",90,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
HXLINE(  90)		return ::thx::color::_Hsva::Hsva_Impl__obj::normalize(::Array_obj< Float >::__new(4)->init(0,(this1->__get((int)0) + angle))->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,this1->__get((int)3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,rotate,return )

::Array< Float > Hsva_Impl__obj::roundTo(::Array< Float > this1,Int decimals){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","roundTo",0xd8688a1f,"thx.color._Hsva.Hsva_Impl_.roundTo","thx/color/Hsva.hx",93,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE(  93)		HX_VARI( Float,hue) = ::thx::Floats_obj::roundTo(this1->__get((int)0),decimals);
HXDLIN(  93)		HX_VARI( Float,saturation) = ::thx::Floats_obj::roundTo(this1->__get((int)1),decimals);
HXDLIN(  93)		HX_VARI( Float,value) = ::thx::Floats_obj::roundTo(this1->__get((int)2),decimals);
HXDLIN(  93)		HX_VARI( Float,alpha) = ::thx::Floats_obj::roundTo(this1->__get((int)3),decimals);
HXDLIN(  93)		return ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,saturation)->init(2,value)->init(3,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,roundTo,return )

 ::Dynamic Hsva_Impl__obj::split(::Array< Float > this1,hx::Null< Float >  __o_spread){
Float spread = __o_spread.Default(((Float)150.0));
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","split",0xaa094a10,"thx.color._Hsva.Hsva_Impl_.split","thx/color/Hsva.hx",96,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(spread,"spread")
HXLINE(  96)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsva::Hsva_Impl__obj::rotate(this1,-(spread)))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsva::Hsva_Impl__obj::rotate(this1,spread)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,split,return )

::Array< Float > Hsva_Impl__obj::withAlpha(::Array< Float > this1,Float newalpha){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","withAlpha",0x4bdd3dae,"thx.color._Hsva.Hsva_Impl_.withAlpha","thx/color/Hsva.hx",102,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newalpha,"newalpha")
HXLINE( 102)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,newalpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,withAlpha,return )

::Array< Float > Hsva_Impl__obj::withHue(::Array< Float > this1,Float newhue){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","withHue",0xaabcb308,"thx.color._Hsva.Hsva_Impl_.withHue","thx/color/Hsva.hx",105,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newhue,"newhue")
HXLINE( 105)		return ::Array_obj< Float >::__new(4)->init(0,newhue)->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,withHue,return )

::Array< Float > Hsva_Impl__obj::withLightness(::Array< Float > this1,Float newvalue){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","withLightness",0xc79f32bd,"thx.color._Hsva.Hsva_Impl_.withLightness","thx/color/Hsva.hx",108,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newvalue,"newvalue")
HXLINE( 108)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,newvalue)->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,withLightness,return )

::Array< Float > Hsva_Impl__obj::withSaturation(::Array< Float > this1,Float newsaturation){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","withSaturation",0x53485b82,"thx.color._Hsva.Hsva_Impl_.withSaturation","thx/color/Hsva.hx",111,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newsaturation,"newsaturation")
HXLINE( 111)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,newsaturation)->init(2,this1->__get((int)2))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,withSaturation,return )

::String Hsva_Impl__obj::toString(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","toString",0xdb0b5736,"thx.color._Hsva.Hsva_Impl_.toString","thx/color/Hsva.hx",114,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 114)		return ((((((((HX_("hsva(",72,bc,09,2e) + this1->__get((int)0)) + HX_(",",2c,00,00,00)) + (this1->__get((int)1) * (int)100)) + HX_("%,",67,20,00,00)) + (this1->__get((int)2) * (int)100)) + HX_("%,",67,20,00,00)) + this1->__get((int)3)) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,toString,return )

Bool Hsva_Impl__obj::equals(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","equals",0x1e6bde49,"thx.color._Hsva.Hsva_Impl_.equals","thx/color/Hsva.hx",117,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 117)		return ::thx::color::_Hsva::Hsva_Impl__obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsva_Impl__obj,equals,return )

Bool Hsva_Impl__obj::nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","nearEquals",0xe6242e51,"thx.color._Hsva.Hsva_Impl_.nearEquals","thx/color/Hsva.hx",120,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE( 120)		Bool _hx_tmp;
HXDLIN( 120)		Bool _hx_tmp1;
HXDLIN( 120)		Float _hx_tmp2 = ::Math_obj::abs(::thx::Floats_obj::angleDifference(this1->__get((int)0),other->__get((int)0),((Float)360.0)));
HXDLIN( 120)		if (hx::IsLessEq( _hx_tmp2,tolerance )) {
HXLINE( 120)			_hx_tmp1 = ::thx::Floats_obj::nearEquals(this1->__get((int)1),other->__get((int)1),tolerance);
            		}
            		else {
HXLINE( 120)			_hx_tmp1 = false;
            		}
HXDLIN( 120)		if (_hx_tmp1) {
HXLINE( 120)			_hx_tmp = ::thx::Floats_obj::nearEquals(this1->__get((int)2),other->__get((int)2),tolerance);
            		}
            		else {
HXLINE( 120)			_hx_tmp = false;
            		}
HXDLIN( 120)		if (_hx_tmp) {
HXLINE( 120)			return ::thx::Floats_obj::nearEquals(this1->__get((int)3),other->__get((int)3),tolerance);
            		}
            		else {
HXLINE( 120)			return false;
            		}
HXDLIN( 120)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsva_Impl__obj,nearEquals,return )

::Array< Float > Hsva_Impl__obj::toHsv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","toHsv",0x3cab5f86,"thx.color._Hsva.Hsva_Impl_.toHsv","thx/color/Hsva.hx",123,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 123)		HX_VARI( ::Array< Float >,channels) = this1->slice((int)0,(int)3);
HXDLIN( 123)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,toHsv,return )

::Array< Float > Hsva_Impl__obj::toHsla(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","toHsla",0xd9482d65,"thx.color._Hsva.Hsva_Impl_.toHsla","thx/color/Hsva.hx",126,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 126)		::Array< Float > _hx_tmp = ::thx::color::_Hsva::Hsva_Impl__obj::toRgbxa(this1);
HXDLIN( 126)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toHsla(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,toHsla,return )

Int Hsva_Impl__obj::toRgb(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","toRgb",0x3cb2eb88,"thx.color._Hsva.Hsva_Impl_.toRgb","thx/color/Hsva.hx",129,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 129)		::Array< Float > _hx_tmp = ::thx::color::_Hsva::Hsva_Impl__obj::toRgbxa(this1);
HXDLIN( 129)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgb(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,toRgb,return )

Int Hsva_Impl__obj::toRgba(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","toRgba",0xdfdb2bd9,"thx.color._Hsva.Hsva_Impl_.toRgba","thx/color/Hsva.hx",132,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 132)		::Array< Float > _hx_tmp = ::thx::color::_Hsva::Hsva_Impl__obj::toRgbxa(this1);
HXDLIN( 132)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,toRgba,return )

::Array< Float > Hsva_Impl__obj::toRgbxa(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","toRgbxa",0xffeb4671,"thx.color._Hsva.Hsva_Impl_.toRgbxa","thx/color/Hsva.hx",134,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 135)		if ((this1->__get((int)1) == (int)0)) {
HXLINE( 136)			return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)2))->init(1,this1->__get((int)2))->init(2,this1->__get((int)2))->init(3,this1->__get((int)3));
            		}
HXLINE( 138)		HX_VAR( Float,r);
HXDLIN( 138)		HX_VAR( Float,g);
HXDLIN( 138)		HX_VAR( Float,b);
HXDLIN( 138)		HX_VAR( Int,i);
HXDLIN( 138)		HX_VAR( Float,f);
HXDLIN( 138)		HX_VAR( Float,p);
HXDLIN( 138)		HX_VAR( Float,q);
HXDLIN( 138)		HX_VAR( Float,t);
HXLINE( 139)		HX_VARI( Float,h) = ((Float)this1->__get((int)0) / (Float)(int)60);
HXLINE( 141)		i = ::Math_obj::floor(h);
HXLINE( 142)		f = (h - i);
HXLINE( 143)		p = (this1->__get((int)2) * ((int)1 - this1->__get((int)1)));
HXLINE( 144)		q = (this1->__get((int)2) * ((int)1 - (f * this1->__get((int)1))));
HXLINE( 145)		t = (this1->__get((int)2) * ((int)1 - (((int)1 - f) * this1->__get((int)1))));
HXLINE( 147)		switch((int)(i)){
            			case (int)0: {
HXLINE( 148)				r = this1->__get((int)2);
HXDLIN( 148)				g = t;
HXDLIN( 148)				b = p;
            			}
            			break;
            			case (int)1: {
HXLINE( 149)				r = q;
HXDLIN( 149)				g = this1->__get((int)2);
HXDLIN( 149)				b = p;
            			}
            			break;
            			case (int)2: {
HXLINE( 150)				r = p;
HXDLIN( 150)				g = this1->__get((int)2);
HXDLIN( 150)				b = t;
            			}
            			break;
            			case (int)3: {
HXLINE( 151)				r = p;
HXDLIN( 151)				g = q;
HXDLIN( 151)				b = this1->__get((int)2);
            			}
            			break;
            			case (int)4: {
HXLINE( 152)				r = t;
HXDLIN( 152)				g = p;
HXDLIN( 152)				b = this1->__get((int)2);
            			}
            			break;
            			default:{
HXLINE( 153)				r = this1->__get((int)2);
HXDLIN( 153)				g = p;
HXDLIN( 153)				b = q;
            			}
            		}
HXLINE( 156)		return ::Array_obj< Float >::__new(4)->init(0,r)->init(1,g)->init(2,b)->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,toRgbxa,return )

Float Hsva_Impl__obj::get_hue(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","get_hue",0x721d3205,"thx.color._Hsva.Hsva_Impl_.get_hue","thx/color/Hsva.hx",160,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 160)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,get_hue,return )

Float Hsva_Impl__obj::get_saturation(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","get_saturation",0x92ee6625,"thx.color._Hsva.Hsva_Impl_.get_saturation","thx/color/Hsva.hx",162,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 162)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,get_saturation,return )

Float Hsva_Impl__obj::get_value(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","get_value",0x1bbb0dfe,"thx.color._Hsva.Hsva_Impl_.get_value","thx/color/Hsva.hx",164,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 164)		return this1->__get((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,get_value,return )

Float Hsva_Impl__obj::get_alpha(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsva.Hsva_Impl_","get_alpha",0x0b9935eb,"thx.color._Hsva.Hsva_Impl_.get_alpha","thx/color/Hsva.hx",166,0x5dc25b71)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 166)		return this1->__get((int)3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsva_Impl__obj,get_alpha,return )


Hsva_Impl__obj::Hsva_Impl__obj()
{
}

bool Hsva_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { outValue = split_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsv") ) { outValue = toHsv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"opaque") ) { outValue = opaque_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsla") ) { outValue = toHsla_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withHue") ) { outValue = withHue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hue") ) { outValue = get_hue_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"analogous") ) { outValue = analogous_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withAlpha") ) { outValue = withAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_value") ) { outValue = get_value_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { outValue = get_alpha_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"complement") ) { outValue = complement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { outValue = transparent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"withLightness") ) { outValue = withLightness_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"withSaturation") ) { outValue = withSaturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_saturation") ) { outValue = get_saturation_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"interpolateWidest") ) { outValue = interpolateWidest_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Hsva_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Hsva_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Hsva_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Hsva_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Hsva_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Hsva_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Hsva_Impl__obj::__mClass;

static ::String Hsva_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("analogous","\x5d","\xc8","\x36","\x9f"),
	HX_HCSTRING("complement","\xe6","\x42","\xb4","\xfd"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("opaque","\xe1","\xdc","\xf1","\x1e"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("interpolateWidest","\x15","\x07","\x3e","\x31"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	HX_HCSTRING("withAlpha","\x78","\x0b","\x84","\xa5"),
	HX_HCSTRING("withHue","\x52","\x9a","\x63","\x5f"),
	HX_HCSTRING("withLightness","\x87","\xad","\x21","\x60"),
	HX_HCSTRING("withSaturation","\x78","\x51","\xf1","\x2c"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("toHsv","\x50","\x00","\x11","\x14"),
	HX_HCSTRING("toHsla","\x5b","\x3d","\xcf","\x7a"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("get_hue","\x4f","\x19","\xc4","\x26"),
	HX_HCSTRING("get_saturation","\x1b","\x5c","\x97","\x6c"),
	HX_HCSTRING("get_value","\xc8","\xdb","\x61","\x75"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	::String(null())
};

void Hsva_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Hsva.Hsva_Impl_","\x24","\xd3","\xca","\x86");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Hsva_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Hsva_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Hsva_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Hsva_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Hsva_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Hsva_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Hsva_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _Hsva
