// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_color_TestConversion
#define INCLUDED_thx_color_TestConversion

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,color,TestConversion)

namespace thx{
namespace color{


class HXCPP_CLASS_ATTRIBUTES TestConversion_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestConversion_obj OBJ_;
		TestConversion_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.color.TestConversion")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.color.TestConversion"); }
		static hx::ObjectPtr< TestConversion_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestConversion_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("TestConversion","\x28","\x8e","\x60","\x2e"); }

		void testLab();
		::Dynamic testLab_dyn();

		void testLCh();
		::Dynamic testLCh_dyn();

		void testLuv();
		::Dynamic testLuv_dyn();

		void testCmy();
		::Dynamic testCmy_dyn();

		void testCmyk();
		::Dynamic testCmyk_dyn();

		void testCubehelix();
		::Dynamic testCubehelix_dyn();

		void testHsl();
		::Dynamic testHsl_dyn();

		void testHsv();
		::Dynamic testHsv_dyn();

		void testHunterLab();
		::Dynamic testHunterLab_dyn();

		void testRgbx();
		::Dynamic testRgbx_dyn();

		void testXyz();
		::Dynamic testXyz_dyn();

		void testYuv();
		::Dynamic testYuv_dyn();

		void testYxy();
		::Dynamic testYxy_dyn();

};

} // end namespace thx
} // end namespace color

#endif /* INCLUDED_thx_color_TestConversion */ 
