// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_thx_Iterators
#include <thx/Iterators.h>
#endif
#ifndef INCLUDED_thx_color_TestConversion
#include <thx/color/TestConversion.h>
#endif
#ifndef INCLUDED_thx_color__Cmy_Cmy_Impl_
#include <thx/color/_Cmy/Cmy_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Cmyk_Cmyk_Impl_
#include <thx/color/_Cmyk/Cmyk_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__CubeHelix_CubeHelix_Impl_
#include <thx/color/_CubeHelix/CubeHelix_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsl_Hsl_Impl_
#include <thx/color/_Hsl/Hsl_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsv_Hsv_Impl_
#include <thx/color/_Hsv/Hsv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__HunterLab_HunterLab_Impl_
#include <thx/color/_HunterLab/HunterLab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__LCh_LCh_Impl_
#include <thx/color/_LCh/LCh_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Luv_Luv_Impl_
#include <thx/color/_Luv/Luv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgb_Rgb_Impl_
#include <thx/color/_Rgb/Rgb_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Yuv_Yuv_Impl_
#include <thx/color/_Yuv/Yuv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Yxy_Yxy_Impl_
#include <thx/color/_Yxy/Yxy_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_palettes_Web
#include <thx/color/palettes/Web.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestConversion_obj::__construct(){
            	HX_STACK_FRAME("thx.color.TestConversion","new",0x5e22a06f,"thx.color.TestConversion.new","thx/color/TestConversion.hx",9,0x759450df)
            	HX_STACK_THIS(this)
            	}

Dynamic TestConversion_obj::__CreateEmpty() { return new TestConversion_obj; }

hx::ObjectPtr< TestConversion_obj > TestConversion_obj::__new()
{
	hx::ObjectPtr< TestConversion_obj > _hx_result = new TestConversion_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestConversion_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestConversion_obj > _hx_result = new TestConversion_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestConversion_obj::testLab(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testLab",0x163a3aaa,"thx.color.TestConversion.testLab","thx/color/TestConversion.hx",12,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE(  13)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN(  13)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toLab(expected);
HXDLIN(  13)			HX_VARI( Int,test) = ::thx::color::_Lab::Lab_Impl__obj::toRgb(color);
HXLINE(  16)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  16)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  16)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  16)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  16)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  16)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),16,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testLab",1b,b7,c0,bd)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testLab",0x163a3aaa,"thx.color.TestConversion.testLab","thx/color/TestConversion.hx",12,0x759450df)
            	HX_STACK_THIS(this)
HXLINE(  12)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN(  12)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testLab,(void))

void TestConversion_obj::testLCh(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testLCh",0x163a208e,"thx.color.TestConversion.testLCh","thx/color/TestConversion.hx",21,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE(  22)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN(  22)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toLCh(expected);
HXDLIN(  22)			HX_VARI( Int,test) = ::thx::color::_LCh::LCh_Impl__obj::toRgb(color);
HXLINE(  25)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  25)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  25)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  25)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  25)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  25)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),25,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testLCh",ff,9c,c0,bd)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testLCh",0x163a208e,"thx.color.TestConversion.testLCh","thx/color/TestConversion.hx",21,0x759450df)
            	HX_STACK_THIS(this)
HXLINE(  21)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN(  21)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testLCh,(void))

void TestConversion_obj::testLuv(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testLuv",0x163a4c2a,"thx.color.TestConversion.testLuv","thx/color/TestConversion.hx",30,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE(  31)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN(  31)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toLuv(expected);
HXDLIN(  31)			HX_VARI( Int,test) = ::thx::color::_Luv::Luv_Impl__obj::toRgb(color);
HXLINE(  34)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  34)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  34)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  34)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  34)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  34)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),34,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testLuv",9b,c8,c0,bd)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testLuv",0x163a4c2a,"thx.color.TestConversion.testLuv","thx/color/TestConversion.hx",30,0x759450df)
            	HX_STACK_THIS(this)
HXLINE(  30)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN(  30)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testLuv,(void))

void TestConversion_obj::testCmy(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testCmy",0x163370ec,"thx.color.TestConversion.testCmy","thx/color/TestConversion.hx",39,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE(  40)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN(  40)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toCmy(expected);
HXDLIN(  40)			HX_VARI( Int,test) = ::thx::color::_Cmy::Cmy_Impl__obj::toRgb(color);
HXLINE(  43)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  43)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  43)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  43)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  43)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  43)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),43,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testCmy",5d,ed,b9,bd)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testCmy",0x163370ec,"thx.color.TestConversion.testCmy","thx/color/TestConversion.hx",39,0x759450df)
            	HX_STACK_THIS(this)
HXLINE(  39)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN(  39)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testCmy,(void))

void TestConversion_obj::testCmyk(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testCmyk",0x56cf5dff,"thx.color.TestConversion.testCmyk","thx/color/TestConversion.hx",48,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE(  49)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN(  49)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toCmyk(expected);
HXDLIN(  49)			HX_VARI( Int,test) = ::thx::color::_Cmyk::Cmyk_Impl__obj::toRgb(color);
HXLINE(  52)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  52)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  52)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  52)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  52)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  52)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),52,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testCmyk",6e,c4,f5,44)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testCmyk",0x56cf5dff,"thx.color.TestConversion.testCmyk","thx/color/TestConversion.hx",48,0x759450df)
            	HX_STACK_THIS(this)
HXLINE(  48)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN(  48)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testCmyk,(void))

void TestConversion_obj::testCubehelix(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testCubehelix",0x8c237186,"thx.color.TestConversion.testCubehelix","thx/color/TestConversion.hx",57,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE(  58)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN(  58)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toCubeHelix(expected);
HXDLIN(  58)			HX_VARI( Int,test) = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgb(color);
HXLINE(  61)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  61)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  61)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  61)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  61)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  61)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),61,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testCubehelix",b7,58,a8,5c)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testCubehelix",0x8c237186,"thx.color.TestConversion.testCubehelix","thx/color/TestConversion.hx",57,0x759450df)
            	HX_STACK_THIS(this)
HXLINE(  57)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN(  57)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testCubehelix,(void))

void TestConversion_obj::testHsl(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testHsl",0x1637415e,"thx.color.TestConversion.testHsl","thx/color/TestConversion.hx",66,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE(  67)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN(  67)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toHsl(expected);
HXDLIN(  67)			HX_VARI( Int,test) = ::thx::color::_Hsl::Hsl_Impl__obj::toRgb(color);
HXLINE(  70)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  70)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  70)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  70)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  70)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  70)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),70,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testHsl",cf,bd,bd,bd)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testHsl",0x1637415e,"thx.color.TestConversion.testHsl","thx/color/TestConversion.hx",66,0x759450df)
            	HX_STACK_THIS(this)
HXLINE(  66)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN(  66)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testHsl,(void))

void TestConversion_obj::testHsv(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testHsv",0x16374168,"thx.color.TestConversion.testHsv","thx/color/TestConversion.hx",75,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE(  76)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN(  76)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toHsv(expected);
HXDLIN(  76)			HX_VARI( Int,test) = ::thx::color::_Hsv::Hsv_Impl__obj::toRgb(color);
HXLINE(  79)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  79)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  79)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  79)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  79)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  79)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),79,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testHsv",d9,bd,bd,bd)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testHsv",0x16374168,"thx.color.TestConversion.testHsv","thx/color/TestConversion.hx",75,0x759450df)
            	HX_STACK_THIS(this)
HXLINE(  75)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN(  75)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testHsv,(void))

void TestConversion_obj::testHunterLab(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testHunterLab",0xeb82328a,"thx.color.TestConversion.testHunterLab","thx/color/TestConversion.hx",84,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE(  85)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN(  85)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toHunterLab(expected);
HXDLIN(  85)			HX_VARI( Int,test) = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgb(color);
HXLINE(  88)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  88)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  88)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  88)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  88)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  88)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),88,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testHunterLab",bb,19,07,bc)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testHunterLab",0xeb82328a,"thx.color.TestConversion.testHunterLab","thx/color/TestConversion.hx",84,0x759450df)
            	HX_STACK_THIS(this)
HXLINE(  84)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN(  84)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testHunterLab,(void))

void TestConversion_obj::testRgbx(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testRgbx",0x60b4efce,"thx.color.TestConversion.testRgbx","thx/color/TestConversion.hx",93,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE(  94)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN(  94)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toRgbx(expected);
HXDLIN(  94)			HX_VARI( Int,test) = ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgb(color);
HXLINE(  97)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  97)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  97)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN(  97)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN(  97)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN(  97)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),97,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testRgbx",3d,56,db,4e)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testRgbx",0x60b4efce,"thx.color.TestConversion.testRgbx","thx/color/TestConversion.hx",93,0x759450df)
            	HX_STACK_THIS(this)
HXLINE(  93)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN(  93)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testRgbx,(void))

void TestConversion_obj::testXyz(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testXyz",0x16436ab6,"thx.color.TestConversion.testXyz","thx/color/TestConversion.hx",102,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE( 103)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN( 103)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toXyz(expected);
HXDLIN( 103)			HX_VARI( Int,test) = ::thx::color::_Xyz::Xyz_Impl__obj::toRgb(color);
HXLINE( 106)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN( 106)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN( 106)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN( 106)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN( 106)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN( 106)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),106,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testXyz",27,e7,c9,bd)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testXyz",0x16436ab6,"thx.color.TestConversion.testXyz","thx/color/TestConversion.hx",102,0x759450df)
            	HX_STACK_THIS(this)
HXLINE( 102)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN( 102)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testXyz,(void))

void TestConversion_obj::testYuv(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testYuv",0x16442977,"thx.color.TestConversion.testYuv","thx/color/TestConversion.hx",111,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE( 112)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN( 112)			HX_VARI( Int,test) = ::thx::color::_Yuv::Yuv_Impl__obj::toRgb(::thx::color::_Rgb::Rgb_Impl__obj::toYuv(expected));
HXLINE( 115)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN( 115)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN( 115)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN( 115)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN( 115)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN( 115)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),115,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testYuv",e8,a5,ca,bd)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testYuv",0x16442977,"thx.color.TestConversion.testYuv","thx/color/TestConversion.hx",111,0x759450df)
            	HX_STACK_THIS(this)
HXLINE( 111)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN( 111)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testYuv,(void))

void TestConversion_obj::testYxy(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACK_FRAME("thx.color.TestConversion","testYxy",0x16442c17,"thx.color.TestConversion.testYxy","thx/color/TestConversion.hx",120,0x759450df)
            			HX_STACK_ARG(name,"name")
HXLINE( 121)			HX_VARI( Int,expected) = ( (Int)(::thx::color::palettes::Web_obj::names->get(name)) );
HXDLIN( 121)			HX_VARI( ::Array< Float >,color) = ::thx::color::_Rgb::Rgb_Impl__obj::toYxy(expected);
HXDLIN( 121)			HX_VARI( Int,test) = ::thx::color::_Yxy::Yxy_Impl__obj::toRgb(color);
HXLINE( 124)			::String _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN( 124)			::String _hx_tmp2 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN( 124)			::String _hx_tmp3 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(expected);
HXDLIN( 124)			::String _hx_tmp4 = ((HX_("expected ",a8,7a,f8,e9) + _hx_tmp3) + HX_(" but was ",36,e4,f6,61));
HXDLIN( 124)			::String _hx_tmp5 = ::thx::color::_Rgb::Rgb_Impl__obj::toString(test);
HXDLIN( 124)			::utest::Assert_obj::equals(_hx_tmp1,_hx_tmp2,(((_hx_tmp4 + _hx_tmp5) + HX_(" for ",17,f1,92,b0)) + name),hx::SourceInfo(HX_("TestConversion.hx",96,fd,7f,04),124,HX_("thx.color.TestConversion",fd,3c,38,0c),HX_("testYxy",88,a8,ca,bd)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("thx.color.TestConversion","testYxy",0x16442c17,"thx.color.TestConversion.testYxy","thx/color/TestConversion.hx",120,0x759450df)
            	HX_STACK_THIS(this)
HXLINE( 120)		 ::Dynamic _hx_tmp = ::thx::color::palettes::Web_obj::names->keys();
HXDLIN( 120)		::thx::Iterators_obj::map(_hx_tmp, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestConversion_obj,testYxy,(void))


TestConversion_obj::TestConversion_obj()
{
}

hx::Val TestConversion_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"testLab") ) { return hx::Val( testLab_dyn()); }
		if (HX_FIELD_EQ(inName,"testLCh") ) { return hx::Val( testLCh_dyn()); }
		if (HX_FIELD_EQ(inName,"testLuv") ) { return hx::Val( testLuv_dyn()); }
		if (HX_FIELD_EQ(inName,"testCmy") ) { return hx::Val( testCmy_dyn()); }
		if (HX_FIELD_EQ(inName,"testHsl") ) { return hx::Val( testHsl_dyn()); }
		if (HX_FIELD_EQ(inName,"testHsv") ) { return hx::Val( testHsv_dyn()); }
		if (HX_FIELD_EQ(inName,"testXyz") ) { return hx::Val( testXyz_dyn()); }
		if (HX_FIELD_EQ(inName,"testYuv") ) { return hx::Val( testYuv_dyn()); }
		if (HX_FIELD_EQ(inName,"testYxy") ) { return hx::Val( testYxy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testCmyk") ) { return hx::Val( testCmyk_dyn()); }
		if (HX_FIELD_EQ(inName,"testRgbx") ) { return hx::Val( testRgbx_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testCubehelix") ) { return hx::Val( testCubehelix_dyn()); }
		if (HX_FIELD_EQ(inName,"testHunterLab") ) { return hx::Val( testHunterLab_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestConversion_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestConversion_obj_sStaticStorageInfo = 0;
#endif

static ::String TestConversion_obj_sMemberFields[] = {
	HX_HCSTRING("testLab","\x1b","\xb7","\xc0","\xbd"),
	HX_HCSTRING("testLCh","\xff","\x9c","\xc0","\xbd"),
	HX_HCSTRING("testLuv","\x9b","\xc8","\xc0","\xbd"),
	HX_HCSTRING("testCmy","\x5d","\xed","\xb9","\xbd"),
	HX_HCSTRING("testCmyk","\x6e","\xc4","\xf5","\x44"),
	HX_HCSTRING("testCubehelix","\xb7","\x58","\xa8","\x5c"),
	HX_HCSTRING("testHsl","\xcf","\xbd","\xbd","\xbd"),
	HX_HCSTRING("testHsv","\xd9","\xbd","\xbd","\xbd"),
	HX_HCSTRING("testHunterLab","\xbb","\x19","\x07","\xbc"),
	HX_HCSTRING("testRgbx","\x3d","\x56","\xdb","\x4e"),
	HX_HCSTRING("testXyz","\x27","\xe7","\xc9","\xbd"),
	HX_HCSTRING("testYuv","\xe8","\xa5","\xca","\xbd"),
	HX_HCSTRING("testYxy","\x88","\xa8","\xca","\xbd"),
	::String(null()) };

static void TestConversion_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestConversion_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestConversion_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestConversion_obj::__mClass,"__mClass");
};

#endif

hx::Class TestConversion_obj::__mClass;

void TestConversion_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestConversion","\xfd","\x3c","\x38","\x0c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestConversion_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestConversion_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestConversion_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestConversion_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestConversion_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestConversion_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
