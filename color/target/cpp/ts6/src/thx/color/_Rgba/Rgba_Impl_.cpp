// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_ArrayInts
#include <thx/ArrayInts.h>
#endif
#ifndef INCLUDED_thx_color__Rgb_Rgb_Impl_
#include <thx/color/_Rgb/Rgb_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgba_Rgba_Impl_
#include <thx/color/_Rgba/Rgba_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _Rgba{

void Rgba_Impl__obj::__construct() { }

Dynamic Rgba_Impl__obj::__CreateEmpty() { return new Rgba_Impl__obj; }

hx::ObjectPtr< Rgba_Impl__obj > Rgba_Impl__obj::__new()
{
	hx::ObjectPtr< Rgba_Impl__obj > _hx_result = new Rgba_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Rgba_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rgba_Impl__obj > _hx_result = new Rgba_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Rgba_Impl__obj::create(Int red,Int green,Int blue,Int alpha){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","create",0x554d5fc6,"thx.color._Rgba.Rgba_Impl_.create","thx/color/Rgba.hx",16,0xad4d1073)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE(  16)		return ((int)((int)((int)((int)((int)red & (int)(int)255) << (int)(int)24) | (int)((int)((int)green & (int)(int)255) << (int)(int)16)) | (int)((int)((int)blue & (int)(int)255) << (int)(int)8)) | (int)((int)alpha & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Rgba_Impl__obj,create,return )

Int Rgba_Impl__obj::fromFloats(::Array< Float > arr){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Int _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","fromFloats",0xef254e2b,"thx.color._Rgba.Rgba_Impl_.fromFloats","thx/macro/lambda/SlambdaMacro.hx",86,0x8ba75432)
            			HX_STACK_ARG(_,"_")
HXLINE(  86)			return ::Math_obj::round((_ * (int)255));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","fromFloats",0xef254e2b,"thx.color._Rgba.Rgba_Impl_.fromFloats","thx/color/Rgba.hx",18,0xad4d1073)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  19)		HX_VARI( ::Array< Int >,ints) = ::thx::ArrayFloats_obj::resize(arr,(int)4,null())->map( ::Dynamic(new _hx_Closure_0()));
HXLINE(  20)		return ((int)((int)((int)((int)((int)ints->__get((int)0) & (int)(int)255) << (int)(int)24) | (int)((int)((int)ints->__get((int)1) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)ints->__get((int)2) & (int)(int)255) << (int)(int)8)) | (int)((int)ints->__get((int)3) & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,fromFloats,return )

Int Rgba_Impl__obj::fromInt(Int rgba){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","fromInt",0x94f6959b,"thx.color._Rgba.Rgba_Impl_.fromInt","thx/color/Rgba.hx",24,0xad4d1073)
            	HX_STACK_ARG(rgba,"rgba")
HXLINE(  24)		return rgba;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,fromInt,return )

Int Rgba_Impl__obj::fromInts(::Array< Int > arr){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","fromInts",0xc2cc5278,"thx.color._Rgba.Rgba_Impl_.fromInts","thx/color/Rgba.hx",26,0xad4d1073)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  27)		::thx::ArrayInts_obj::resize(arr,(int)4,null());
HXLINE(  28)		return ((int)((int)((int)((int)((int)arr->__get((int)0) & (int)(int)255) << (int)(int)24) | (int)((int)((int)arr->__get((int)1) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)arr->__get((int)2) & (int)(int)255) << (int)(int)8)) | (int)((int)arr->__get((int)3) & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,fromInts,return )

 ::Dynamic Rgba_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","fromString",0xbeff53a5,"thx.color._Rgba.Rgba_Impl_.fromString","thx/color/Rgba.hx",31,0xad4d1073)
            	HX_STACK_ARG(color,"color")
HXLINE(  32)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseHex(color);
HXLINE(  33)		if (hx::IsNull( info )) {
HXLINE(  34)			info = ::thx::color::parse::ColorParser_obj::parseColor(color);
            		}
HXLINE(  35)		if (hx::IsNull( info )) {
HXLINE(  36)			return null();
            		}
HXLINE(  38)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  38)			::String _hx_switch_0 = info->name;
            			if (  (_hx_switch_0==HX_("rgb",0d,db,56,00)) ){
HXLINE(  40)				::Array< Int > _hx_tmp = ::thx::color::parse::ColorParser_obj::getInt8Channels(info->channels,(int)3);
HXDLIN(  40)				Int _hx_tmp1 = ::thx::color::_Rgb::Rgb_Impl__obj::fromInts(_hx_tmp);
HXLINE(  38)				return ::thx::color::_Rgb::Rgb_Impl__obj::toRgba(_hx_tmp1);
HXDLIN(  38)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("rgba",b4,d0,a8,4b)) ){
HXLINE(  42)				HX_VARI( Int,red) = ::thx::color::parse::ColorParser_obj::getInt8Channel(info->channels->__get((int)0).StaticCast< ::hx::EnumBase >());
HXDLIN(  42)				HX_VARI( Int,green) = ::thx::color::parse::ColorParser_obj::getInt8Channel(info->channels->__get((int)1).StaticCast< ::hx::EnumBase >());
HXDLIN(  42)				HX_VARI( Int,blue) = ::thx::color::parse::ColorParser_obj::getInt8Channel(info->channels->__get((int)2).StaticCast< ::hx::EnumBase >());
HXLINE(  46)				Float _hx_tmp2 = ::thx::color::parse::ColorParser_obj::getFloatChannel(info->channels->__get((int)3).StaticCast< ::hx::EnumBase >(),null());
HXLINE(  42)				HX_VARI( Int,alpha) = ::Math_obj::round((_hx_tmp2 * (int)255));
HXLINE(  38)				return ((int)((int)((int)((int)((int)red & (int)(int)255) << (int)(int)24) | (int)((int)((int)green & (int)(int)255) << (int)(int)16)) | (int)((int)((int)blue & (int)(int)255) << (int)(int)8)) | (int)((int)alpha & (int)(int)255));
HXLINE(  42)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  38)				return null();
            			}
            			_hx_goto_0:;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  38)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  38)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,fromString,return )

Int Rgba_Impl__obj::_new(Int rgba){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","_new",0x9cac67ab,"thx.color._Rgba.Rgba_Impl_._new","thx/color/Rgba.hx",53,0xad4d1073)
            	HX_STACK_ARG(rgba,"rgba")
HXLINE(  53)		return rgba;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,_new,return )

Int Rgba_Impl__obj::combineColor(Int this1,Int other){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","combineColor",0x010df6ae,"thx.color._Rgba.Rgba_Impl_.combineColor","thx/color/Rgba.hx",61,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  62)		HX_VARI( Float,a) = ((Float)((int)this1 & (int)(int)255) / (Float)(int)255);
HXLINE(  64)		Int _hx_tmp = ::Math_obj::round(((((int)1 - a) * ::thx::color::_Rgb::Rgb_Impl__obj::get_red(other)) + (a * ((int)((int)this1 >> (int)(int)24) & (int)(int)255))));
HXLINE(  65)		Int _hx_tmp1 = ::Math_obj::round(((((int)1 - a) * ::thx::color::_Rgb::Rgb_Impl__obj::get_green(other)) + (a * ((int)((int)this1 >> (int)(int)16) & (int)(int)255))));
HXLINE(  66)		Int _hx_tmp2 = ::Math_obj::round(((((int)1 - a) * ::thx::color::_Rgb::Rgb_Impl__obj::get_blue(other)) + (a * ((int)((int)this1 >> (int)(int)8) & (int)(int)255))));
HXLINE(  63)		return ::thx::color::_Rgb::Rgb_Impl__obj::fromInts(::Array_obj< Int >::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,combineColor,return )

Int Rgba_Impl__obj::darker(Int this1,Float t){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","darker",0xfa782f2d,"thx.color._Rgba.Rgba_Impl_.darker","thx/color/Rgba.hx",71,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  71)		::Array< Float > _hx_tmp = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(this1);
HXDLIN(  71)		::Array< Float > _hx_tmp1 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::darker(_hx_tmp,t);
HXDLIN(  71)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,darker,return )

Int Rgba_Impl__obj::lighter(Int this1,Float t){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","lighter",0x56df02b9,"thx.color._Rgba.Rgba_Impl_.lighter","thx/color/Rgba.hx",74,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  74)		::Array< Float > _hx_tmp = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(this1);
HXDLIN(  74)		::Array< Float > _hx_tmp1 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::lighter(_hx_tmp,t);
HXDLIN(  74)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,lighter,return )

Int Rgba_Impl__obj::transparent(Int this1,Float t){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","transparent",0xf1f01648,"thx.color._Rgba.Rgba_Impl_.transparent","thx/color/Rgba.hx",77,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  77)		::Array< Float > _hx_tmp = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(this1);
HXDLIN(  77)		::Array< Float > _hx_tmp1 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::transparent(_hx_tmp,t);
HXDLIN(  77)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,transparent,return )

Int Rgba_Impl__obj::opaque(Int this1,Float t){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","opaque",0xf82fd5ab,"thx.color._Rgba.Rgba_Impl_.opaque","thx/color/Rgba.hx",80,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  80)		::Array< Float > _hx_tmp = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(this1);
HXDLIN(  80)		::Array< Float > _hx_tmp1 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::opaque(_hx_tmp,t);
HXDLIN(  80)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,opaque,return )

Int Rgba_Impl__obj::interpolate(Int this1,Int other,Float t){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","interpolate",0xee68bfb7,"thx.color._Rgba.Rgba_Impl_.interpolate","thx/color/Rgba.hx",83,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  83)		::Array< Float > _hx_tmp = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(this1);
HXDLIN(  83)		::Array< Float > _hx_tmp1 = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(other);
HXDLIN(  83)		::Array< Float > _hx_tmp2 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::interpolate(_hx_tmp,_hx_tmp1,t);
HXDLIN(  83)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Rgba_Impl__obj,interpolate,return )

Int Rgba_Impl__obj::withAlpha(Int this1,Int newalpha){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","withAlpha",0xe2d62cee,"thx.color._Rgba.Rgba_Impl_.withAlpha","thx/color/Rgba.hx",86,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newalpha,"newalpha")
HXLINE(  86)		return ::thx::color::_Rgba::Rgba_Impl__obj::fromInts(::Array_obj< Int >::__new(4)->init(0,((int)((int)this1 >> (int)(int)24) & (int)(int)255))->init(1,((int)((int)this1 >> (int)(int)16) & (int)(int)255))->init(2,((int)((int)this1 >> (int)(int)8) & (int)(int)255))->init(3,newalpha));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,withAlpha,return )

Int Rgba_Impl__obj::withAlphaf(Int this1,Float newalpha){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","withAlphaf",0x989123b8,"thx.color._Rgba.Rgba_Impl_.withAlphaf","thx/color/Rgba.hx",89,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newalpha,"newalpha")
HXLINE(  89)		Int _hx_tmp = ((int)((int)this1 >> (int)(int)24) & (int)(int)255);
HXDLIN(  89)		Int _hx_tmp1 = ((int)((int)this1 >> (int)(int)16) & (int)(int)255);
HXDLIN(  89)		Int _hx_tmp2 = ((int)((int)this1 >> (int)(int)8) & (int)(int)255);
HXDLIN(  89)		Int _hx_tmp3 = ::Math_obj::round(((int)255 * newalpha));
HXDLIN(  89)		return ::thx::color::_Rgba::Rgba_Impl__obj::fromInts(::Array_obj< Int >::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,withAlphaf,return )

Int Rgba_Impl__obj::withRed(Int this1,Int newred){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","withRed",0x9c66dae1,"thx.color._Rgba.Rgba_Impl_.withRed","thx/color/Rgba.hx",92,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newred,"newred")
HXLINE(  92)		return ::thx::color::_Rgba::Rgba_Impl__obj::fromInts(::Array_obj< Int >::__new(3)->init(0,newred)->init(1,((int)((int)this1 >> (int)(int)16) & (int)(int)255))->init(2,((int)((int)this1 >> (int)(int)8) & (int)(int)255)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,withRed,return )

Int Rgba_Impl__obj::withGreen(Int this1,Int newgreen){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","withGreen",0x5b2c9453,"thx.color._Rgba.Rgba_Impl_.withGreen","thx/color/Rgba.hx",95,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newgreen,"newgreen")
HXLINE(  95)		return ::thx::color::_Rgba::Rgba_Impl__obj::fromInts(::Array_obj< Int >::__new(3)->init(0,((int)((int)this1 >> (int)(int)24) & (int)(int)255))->init(1,newgreen)->init(2,((int)((int)this1 >> (int)(int)8) & (int)(int)255)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,withGreen,return )

Int Rgba_Impl__obj::withBlue(Int this1,Int newblue){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","withBlue",0x330a9f0a,"thx.color._Rgba.Rgba_Impl_.withBlue","thx/color/Rgba.hx",98,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newblue,"newblue")
HXLINE(  98)		return ::thx::color::_Rgba::Rgba_Impl__obj::fromInts(::Array_obj< Int >::__new(3)->init(0,((int)((int)this1 >> (int)(int)24) & (int)(int)255))->init(1,((int)((int)this1 >> (int)(int)16) & (int)(int)255))->init(2,newblue));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,withBlue,return )

::Array< Float > Rgba_Impl__obj::toHsla(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","toHsla",0x540d3625,"thx.color._Rgba.Rgba_Impl_.toHsla","thx/color/Rgba.hx",101,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 101)		::Array< Float > _hx_tmp = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(this1);
HXDLIN( 101)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toHsla(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,toHsla,return )

::Array< Float > Rgba_Impl__obj::toHsva(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","toHsva",0x540d3edb,"thx.color._Rgba.Rgba_Impl_.toHsva","thx/color/Rgba.hx",104,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 104)		::Array< Float > _hx_tmp = ::thx::color::_Rgba::Rgba_Impl__obj::toRgbxa(this1);
HXDLIN( 104)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toHsva(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,toHsva,return )

Int Rgba_Impl__obj::toRgb(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","toRgb",0x92333ac8,"thx.color._Rgba.Rgba_Impl_.toRgb","thx/color/Rgba.hx",107,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 107)		return ((int)((int)((int)((int)((int)((int)this1 >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16) | (int)((int)((int)((int)((int)this1 >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)((int)this1 >> (int)(int)8) & (int)(int)255) & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,toRgb,return )

::Array< Float > Rgba_Impl__obj::toRgbx(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","toRgbx",0x5aa034b0,"thx.color._Rgba.Rgba_Impl_.toRgbx","thx/color/Rgba.hx",110,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 110)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::fromInts(::Array_obj< Int >::__new(3)->init(0,((int)((int)this1 >> (int)(int)24) & (int)(int)255))->init(1,((int)((int)this1 >> (int)(int)16) & (int)(int)255))->init(2,((int)((int)this1 >> (int)(int)8) & (int)(int)255)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,toRgbx,return )

::Array< Float > Rgba_Impl__obj::toRgbxa(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","toRgbxa",0xf18de5b1,"thx.color._Rgba.Rgba_Impl_.toRgbxa","thx/color/Rgba.hx",113,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 113)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::fromInts(::Array_obj< Int >::__new(4)->init(0,((int)((int)this1 >> (int)(int)24) & (int)(int)255))->init(1,((int)((int)this1 >> (int)(int)16) & (int)(int)255))->init(2,((int)((int)this1 >> (int)(int)8) & (int)(int)255))->init(3,((int)this1 & (int)(int)255)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,toRgbxa,return )

::String Rgba_Impl__obj::toCss3(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","toCss3",0x50bf2af5,"thx.color._Rgba.Rgba_Impl_.toCss3","thx/color/Rgba.hx",116,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 116)		return (HX_("",00,00,00,00) + this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,toCss3,return )

::String Rgba_Impl__obj::toString(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","toString",0x57b40ff6,"thx.color._Rgba.Rgba_Impl_.toString","thx/color/Rgba.hx",119,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 119)		return ((((((((HX_("rgba(",f4,cc,0d,e8) + ((int)((int)this1 >> (int)(int)24) & (int)(int)255)) + HX_(",",2c,00,00,00)) + ((int)((int)this1 >> (int)(int)16) & (int)(int)255)) + HX_(",",2c,00,00,00)) + ((int)((int)this1 >> (int)(int)8) & (int)(int)255)) + HX_(",",2c,00,00,00)) + ((Float)((int)this1 & (int)(int)255) / (Float)(int)255)) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,toString,return )

::String Rgba_Impl__obj::toHex(Int this1,::String __o_prefix){
::String prefix = __o_prefix.Default(HX_HCSTRING("#","\x23","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","toHex",0x922ba296,"thx.color._Rgba.Rgba_Impl_.toHex","thx/color/Rgba.hx",122,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(prefix,"prefix")
HXLINE( 122)		::String _hx_tmp = (HX_("",00,00,00,00) + prefix);
HXDLIN( 122)		::String _hx_tmp1 = ::StringTools_obj::hex(((int)this1 & (int)(int)255),(int)2);
HXDLIN( 122)		::String _hx_tmp2 = (_hx_tmp + _hx_tmp1);
HXDLIN( 122)		::String _hx_tmp3 = ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 122)		::String _hx_tmp4 = (_hx_tmp2 + _hx_tmp3);
HXDLIN( 122)		::String _hx_tmp5 = ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)16) & (int)(int)255),(int)2);
HXDLIN( 122)		::String _hx_tmp6 = (_hx_tmp4 + _hx_tmp5);
HXDLIN( 122)		::String _hx_tmp7 = ::StringTools_obj::hex(((int)((int)this1 >> (int)(int)8) & (int)(int)255),(int)2);
HXDLIN( 122)		return (_hx_tmp6 + _hx_tmp7);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,toHex,return )

Bool Rgba_Impl__obj::equals(Int this1,Int other){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","equals",0x9930e709,"thx.color._Rgba.Rgba_Impl_.equals","thx/color/Rgba.hx",125,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 125)		Bool _hx_tmp;
HXDLIN( 125)		Bool _hx_tmp1;
HXDLIN( 125)		if ((((int)((int)this1 >> (int)(int)24) & (int)(int)255) == ((int)((int)other >> (int)(int)24) & (int)(int)255))) {
HXLINE( 125)			_hx_tmp1 = (((int)this1 & (int)(int)255) == ((int)other & (int)(int)255));
            		}
            		else {
HXLINE( 125)			_hx_tmp1 = false;
            		}
HXDLIN( 125)		if (_hx_tmp1) {
HXLINE( 125)			_hx_tmp = (((int)((int)this1 >> (int)(int)16) & (int)(int)255) == ((int)((int)other >> (int)(int)16) & (int)(int)255));
            		}
            		else {
HXLINE( 125)			_hx_tmp = false;
            		}
HXDLIN( 125)		if (_hx_tmp) {
HXLINE( 125)			return (((int)((int)this1 >> (int)(int)8) & (int)(int)255) == ((int)((int)other >> (int)(int)8) & (int)(int)255));
            		}
            		else {
HXLINE( 125)			return false;
            		}
HXDLIN( 125)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgba_Impl__obj,equals,return )

Int Rgba_Impl__obj::get_alpha(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","get_alpha",0xa292252b,"thx.color._Rgba.Rgba_Impl_.get_alpha","thx/color/Rgba.hx",128,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 128)		return ((int)this1 & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,get_alpha,return )

Int Rgba_Impl__obj::get_red(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","get_red",0x63c759de,"thx.color._Rgba.Rgba_Impl_.get_red","thx/color/Rgba.hx",130,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 130)		return ((int)((int)this1 >> (int)(int)24) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,get_red,return )

Int Rgba_Impl__obj::get_green(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","get_green",0x1ae88c90,"thx.color._Rgba.Rgba_Impl_.get_green","thx/color/Rgba.hx",132,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 132)		return ((int)((int)this1 >> (int)(int)16) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,get_green,return )

Int Rgba_Impl__obj::get_blue(Int this1){
            	HX_STACK_FRAME("thx.color._Rgba.Rgba_Impl_","get_blue",0xe0193d6d,"thx.color._Rgba.Rgba_Impl_.get_blue","thx/color/Rgba.hx",134,0xad4d1073)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 134)		return ((int)((int)this1 >> (int)(int)8) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgba_Impl__obj,get_blue,return )


Rgba_Impl__obj::Rgba_Impl__obj()
{
}

bool Rgba_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHex") ) { outValue = toHex_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"darker") ) { outValue = darker_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"opaque") ) { outValue = opaque_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsla") ) { outValue = toHsla_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsva") ) { outValue = toHsva_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbx") ) { outValue = toRgbx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCss3") ) { outValue = toCss3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lighter") ) { outValue = lighter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withRed") ) { outValue = withRed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_red") ) { outValue = get_red_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromInts") ) { outValue = fromInts_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withBlue") ) { outValue = withBlue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_blue") ) { outValue = get_blue_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"withAlpha") ) { outValue = withAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withGreen") ) { outValue = withGreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { outValue = get_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_green") ) { outValue = get_green_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withAlphaf") ) { outValue = withAlphaf_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { outValue = transparent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"combineColor") ) { outValue = combineColor_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Rgba_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Rgba_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Rgba_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rgba_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rgba_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rgba_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Rgba_Impl__obj::__mClass;

static ::String Rgba_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromInts","\x2e","\x13","\x87","\xa3"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("combineColor","\x64","\x4a","\x16","\x81"),
	HX_HCSTRING("darker","\x63","\x36","\x3a","\x21"),
	HX_HCSTRING("lighter","\xc3","\x4a","\xe3","\x19"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("opaque","\xe1","\xdc","\xf1","\x1e"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("withAlpha","\x78","\x0b","\x84","\xa5"),
	HX_HCSTRING("withAlphaf","\xee","\xfd","\x05","\x2e"),
	HX_HCSTRING("withRed","\xeb","\x22","\x6b","\x5f"),
	HX_HCSTRING("withGreen","\xdd","\x72","\xda","\x1d"),
	HX_HCSTRING("withBlue","\xc0","\x5f","\xc5","\x13"),
	HX_HCSTRING("toHsla","\x5b","\x3d","\xcf","\x7a"),
	HX_HCSTRING("toHsva","\x11","\x46","\xcf","\x7a"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgbx","\xe6","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("toCss3","\x2b","\x32","\x81","\x77"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toHex","\x20","\xf4","\x10","\x14"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("get_red","\xe8","\xa1","\xcb","\x26"),
	HX_HCSTRING("get_green","\x1a","\x6b","\x96","\xdd"),
	HX_HCSTRING("get_blue","\x23","\xfe","\xd3","\xc0"),
	::String(null())
};

void Rgba_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Rgba.Rgba_Impl_","\x64","\x32","\x1c","\xed");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Rgba_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rgba_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Rgba_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Rgba_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rgba_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rgba_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rgba_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _Rgba
