// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Luv_Luv_Impl_
#include <thx/color/_Luv/Luv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _Luv{

void Luv_Impl__obj::__construct() { }

Dynamic Luv_Impl__obj::__CreateEmpty() { return new Luv_Impl__obj; }

hx::ObjectPtr< Luv_Impl__obj > Luv_Impl__obj::__new()
{
	hx::ObjectPtr< Luv_Impl__obj > _hx_result = new Luv_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Luv_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Luv_Impl__obj > _hx_result = new Luv_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Luv_Impl__obj::create(Float l,Float u,Float v){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","create",0x63e202c8,"thx.color._Luv.Luv_Impl_.create","thx/color/Luv.hx",27,0xe53c0148)
            	HX_STACK_ARG(l,"l")
            	HX_STACK_ARG(u,"u")
            	HX_STACK_ARG(v,"v")
HXLINE(  27)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,u)->init(2,v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Luv_Impl__obj,create,return )

::Array< Float > Luv_Impl__obj::fromFloats(::Array< Float > arr){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","fromFloats",0x4f149a2d,"thx.color._Luv.Luv_Impl_.fromFloats","thx/color/Luv.hx",29,0xe53c0148)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  30)		::thx::ArrayFloats_obj::resize(arr,(int)3,null());
HXLINE(  31)		return ::Array_obj< Float >::__new(3)->init(0,arr->__get((int)0))->init(1,arr->__get((int)1))->init(2,arr->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,fromFloats,return )

::Array< Float > Luv_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","fromString",0x1eee9fa7,"thx.color._Luv.Luv_Impl_.fromString","thx/color/Luv.hx",34,0xe53c0148)
            	HX_STACK_ARG(color,"color")
HXLINE(  35)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseColor(color);
HXLINE(  36)		if (hx::IsNull( info )) {
HXLINE(  37)			return null();
            		}
HXLINE(  39)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  39)			::String _hx_switch_0 = info->name;
            			if (  (_hx_switch_0==HX_("cieluv",2e,88,7c,4d)) ||  (_hx_switch_0==HX_("luv",cd,59,52,00)) ){
HXLINE(  41)				HX_VARI( ::Array< Float >,channels) = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXLINE(  39)				return channels;
HXLINE(  41)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  39)				return null();
            			}
            			_hx_goto_0:;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  39)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  39)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,fromString,return )

::Array< Float > Luv_Impl__obj::_new(::Array< Float > channels){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","_new",0x59c2e62d,"thx.color._Luv.Luv_Impl_._new","thx/color/Luv.hx",47,0xe53c0148)
            	HX_STACK_ARG(channels,"channels")
HXLINE(  47)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,_new,return )

::Array< Float > Luv_Impl__obj::interpolate(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","interpolate",0x7fdbf575,"thx.color._Luv.Luv_Impl_.interpolate","thx/color/Luv.hx",51,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  51)		return ::Array_obj< Float >::__new(3)->init(0,::thx::Floats_obj::interpolate(t,this1->__get((int)0),other->__get((int)0)))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Luv_Impl__obj,interpolate,return )

::Array< Float > Luv_Impl__obj::min(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","min",0x0d125e46,"thx.color._Luv.Luv_Impl_.min","thx/color/Luv.hx",58,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  58)		HX_VARI( Float,l) = ::Math_obj::min(this1->__get((int)0),other->__get((int)0));
HXDLIN(  58)		HX_VARI( Float,u) = ::Math_obj::min(this1->__get((int)1),other->__get((int)1));
HXDLIN(  58)		HX_VARI( Float,v) = ::Math_obj::min(this1->__get((int)2),other->__get((int)2));
HXDLIN(  58)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,u)->init(2,v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Luv_Impl__obj,min,return )

::Array< Float > Luv_Impl__obj::max(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","max",0x0d125758,"thx.color._Luv.Luv_Impl_.max","thx/color/Luv.hx",61,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  61)		HX_VARI( Float,l) = ::Math_obj::max(this1->__get((int)0),other->__get((int)0));
HXDLIN(  61)		HX_VARI( Float,u) = ::Math_obj::max(this1->__get((int)1),other->__get((int)1));
HXDLIN(  61)		HX_VARI( Float,v) = ::Math_obj::max(this1->__get((int)2),other->__get((int)2));
HXDLIN(  61)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,u)->init(2,v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Luv_Impl__obj,max,return )

::Array< Float > Luv_Impl__obj::normalize(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","normalize",0xedf90341,"thx.color._Luv.Luv_Impl_.normalize","thx/color/Luv.hx",64,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  64)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXDLIN(  64)		HX_VARI( Float,v) = this1->__get((int)0);
HXDLIN(  64)		Float _hx_tmp;
HXDLIN(  64)		if ((v < (int)0)) {
HXLINE(  64)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  64)			if ((v > (int)1)) {
HXLINE(  64)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(  64)				_hx_tmp = v;
            			}
            		}
HXDLIN(  64)		HX_VARI_NAME( Float,v1,"v") = this1->__get((int)1);
HXDLIN(  64)		Float _hx_tmp1;
HXDLIN(  64)		if ((v1 < ((Float)-0.436))) {
HXLINE(  64)			_hx_tmp1 = ((Float)-0.436);
            		}
            		else {
HXLINE(  64)			if ((v1 > ((Float)0.436))) {
HXLINE(  64)				_hx_tmp1 = ((Float)0.436);
            			}
            			else {
HXLINE(  64)				_hx_tmp1 = v1;
            			}
            		}
HXDLIN(  64)		HX_VARI_NAME( Float,v2,"v") = this1->__get((int)2);
HXDLIN(  64)		Float _hx_tmp2;
HXDLIN(  64)		if ((v2 < ((Float)-0.615))) {
HXLINE(  64)			_hx_tmp2 = ((Float)-0.615);
            		}
            		else {
HXLINE(  64)			if ((v2 > ((Float)0.615))) {
HXLINE(  64)				_hx_tmp2 = ((Float)0.615);
            			}
            			else {
HXLINE(  64)				_hx_tmp2 = v2;
            			}
            		}
HXDLIN(  64)		this2 = ::Array_obj< Float >::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2);
HXDLIN(  64)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,normalize,return )

::Array< Float > Luv_Impl__obj::roundTo(::Array< Float > this1,Int decimals){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","roundTo",0x7d85281d,"thx.color._Luv.Luv_Impl_.roundTo","thx/color/Luv.hx",67,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE(  67)		HX_VARI( Float,l) = ::thx::Floats_obj::roundTo(this1->__get((int)0),decimals);
HXDLIN(  67)		HX_VARI( Float,u) = ::thx::Floats_obj::roundTo(this1->__get((int)1),decimals);
HXDLIN(  67)		HX_VARI( Float,v) = ::thx::Floats_obj::roundTo(this1->__get((int)2),decimals);
HXDLIN(  67)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,u)->init(2,v);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Luv_Impl__obj,roundTo,return )

::Array< Float > Luv_Impl__obj::withY(::Array< Float > this1,Float newy){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","withY",0xff21b147,"thx.color._Luv.Luv_Impl_.withY","thx/color/Luv.hx",70,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newy,"newy")
HXLINE(  70)		return ::Array_obj< Float >::__new(3)->init(0,newy)->init(1,this1->__get((int)1))->init(2,this1->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Luv_Impl__obj,withY,return )

::Array< Float > Luv_Impl__obj::withU(::Array< Float > this1,Float newu){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","withU",0xff21b143,"thx.color._Luv.Luv_Impl_.withU","thx/color/Luv.hx",73,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newu,"newu")
HXLINE(  73)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,newu)->init(2,this1->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Luv_Impl__obj,withU,return )

::Array< Float > Luv_Impl__obj::withV(::Array< Float > this1,Float newv){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","withV",0xff21b144,"thx.color._Luv.Luv_Impl_.withV","thx/color/Luv.hx",76,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newv,"newv")
HXLINE(  76)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,newv);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Luv_Impl__obj,withV,return )

::String Luv_Impl__obj::toString(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toString",0xaef8f778,"thx.color._Luv.Luv_Impl_.toString","thx/color/Luv.hx",79,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  79)		return ((((((HX_("cieluv(",3a,a0,7a,7f) + this1->__get((int)0)) + HX_(",",2c,00,00,00)) + this1->__get((int)1)) + HX_(",",2c,00,00,00)) + this1->__get((int)2)) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toString,return )

Bool Luv_Impl__obj::equals(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","equals",0xa7c58a0b,"thx.color._Luv.Luv_Impl_.equals","thx/color/Luv.hx",82,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  82)		return ::thx::color::_Luv::Luv_Impl__obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Luv_Impl__obj,equals,return )

Bool Luv_Impl__obj::nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","nearEquals",0xc8ebe313,"thx.color._Luv.Luv_Impl_.nearEquals","thx/color/Luv.hx",85,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE(  85)		Bool _hx_tmp;
HXDLIN(  85)		Bool _hx_tmp1 = ::thx::Floats_obj::nearEquals(this1->__get((int)0),other->__get((int)0),tolerance);
HXDLIN(  85)		if (_hx_tmp1) {
HXLINE(  85)			_hx_tmp = ::thx::Floats_obj::nearEquals(this1->__get((int)1),other->__get((int)1),tolerance);
            		}
            		else {
HXLINE(  85)			_hx_tmp = false;
            		}
HXDLIN(  85)		if (_hx_tmp) {
HXLINE(  85)			return ::thx::Floats_obj::nearEquals(this1->__get((int)2),other->__get((int)2),tolerance);
            		}
            		else {
HXLINE(  85)			return false;
            		}
HXDLIN(  85)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Luv_Impl__obj,nearEquals,return )

::Array< Float > Luv_Impl__obj::toLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toLab",0x48c6db46,"thx.color._Luv.Luv_Impl_.toLab","thx/color/Luv.hx",88,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  88)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toXyz(this1);
HXDLIN(  88)		return ::thx::color::_Xyz::Xyz_Impl__obj::toLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toLab,return )

::Array< Float > Luv_Impl__obj::toLCh(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toLCh",0x48c6c12a,"thx.color._Luv.Luv_Impl_.toLCh","thx/color/Luv.hx",91,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  91)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toLab(this1);
HXDLIN(  91)		return ::thx::color::_Lab::Lab_Impl__obj::toLCh(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toLCh,return )

::Array< Float > Luv_Impl__obj::toCmy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toCmy",0x48c01188,"thx.color._Luv.Luv_Impl_.toCmy","thx/color/Luv.hx",94,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  94)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toRgbx(this1);
HXDLIN(  94)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toCmy,return )

::Array< Float > Luv_Impl__obj::toCmyk(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toCmyk",0x5f4f45e3,"thx.color._Luv.Luv_Impl_.toCmyk","thx/color/Luv.hx",97,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  97)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toRgbx(this1);
HXDLIN(  97)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmyk(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toCmyk,return )

::Array< Float > Luv_Impl__obj::toCubeHelix(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toCubeHelix",0x8429df02,"thx.color._Luv.Luv_Impl_.toCubeHelix","thx/color/Luv.hx",100,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 100)		HX_VARI_NAME( ::Array< Float >,this2,"this") = ::thx::color::_Luv::Luv_Impl__obj::toRgbx(this1);
HXDLIN( 100)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCubeHelixWithGamma(this2,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toCubeHelix,return )

Float Luv_Impl__obj::toGrey(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toGrey",0x61f7da46,"thx.color._Luv.Luv_Impl_.toGrey","thx/color/Luv.hx",103,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 103)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toRgbx(this1);
HXDLIN( 103)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toGrey(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toGrey,return )

::Array< Float > Luv_Impl__obj::toHsl(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toHsl",0x48c3e1fa,"thx.color._Luv.Luv_Impl_.toHsl","thx/color/Luv.hx",106,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 106)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toRgbx(this1);
HXDLIN( 106)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsl(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toHsl,return )

::Array< Float > Luv_Impl__obj::toHsv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toHsv",0x48c3e204,"thx.color._Luv.Luv_Impl_.toHsv","thx/color/Luv.hx",109,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 109)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toRgbx(this1);
HXDLIN( 109)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toHsv,return )

::Array< Float > Luv_Impl__obj::toHunterLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toHunterLab",0x505b3026,"thx.color._Luv.Luv_Impl_.toHunterLab","thx/color/Luv.hx",112,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 112)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toXyz(this1);
HXDLIN( 112)		return ::thx::color::_Xyz::Xyz_Impl__obj::toHunterLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toHunterLab,return )

Int Luv_Impl__obj::toRgb(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toRgb",0x48cb6e06,"thx.color._Luv.Luv_Impl_.toRgb","thx/color/Luv.hx",115,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 115)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toRgbx(this1);
HXDLIN( 115)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgb(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toRgb,return )

Int Luv_Impl__obj::toRgba(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toRgba",0x6934d79b,"thx.color._Luv.Luv_Impl_.toRgba","thx/color/Luv.hx",118,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 118)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toRgbxa(this1);
HXDLIN( 118)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toRgba,return )

::Array< Float > Luv_Impl__obj::toRgbx(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toRgbx",0x6934d7b2,"thx.color._Luv.Luv_Impl_.toRgbx","thx/color/Luv.hx",121,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 121)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toXyz(this1);
HXDLIN( 121)		return ::thx::color::_Xyz::Xyz_Impl__obj::toRgbx(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toRgbx,return )

::Array< Float > Luv_Impl__obj::toRgbxa(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toRgbxa",0xa507e46f,"thx.color._Luv.Luv_Impl_.toRgbxa","thx/color/Luv.hx",124,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 124)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toRgbx(this1);
HXDLIN( 124)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toRgbxa,return )

Float Luv_Impl__obj::toTemperature(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toTemperature",0xf3b6682d,"thx.color._Luv.Luv_Impl_.toTemperature","thx/color/Luv.hx",127,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 127)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toRgbx(this1);
HXDLIN( 127)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toTemperature(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toTemperature,return )

::Array< Float > Luv_Impl__obj::toYxy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toYxy",0x48d0ccb3,"thx.color._Luv.Luv_Impl_.toYxy","thx/color/Luv.hx",130,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 130)		::Array< Float > _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::toRgbx(this1);
HXDLIN( 130)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYxy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toYxy,return )

::Array< Float > Luv_Impl__obj::toXyz(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","toXyz",0x48d00b52,"thx.color._Luv.Luv_Impl_.toXyz","thx/color/Luv.hx",132,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 133)		HX_VARI( Float,l) = (this1->__get((int)0) * (int)100);
HXDLIN( 133)		HX_VARI( Float,u) = (this1->__get((int)1) * (int)100);
HXDLIN( 133)		HX_VARI( Float,v) = (this1->__get((int)2) * (int)100);
HXLINE( 138)		Float _hx_tmp;
HXDLIN( 138)		if ((l == (int)0)) {
HXLINE( 138)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 138)			_hx_tmp = ((Float)u / (Float)((int)13 * l));
            		}
HXLINE( 133)		HX_VARI( Float,uPrime) = (_hx_tmp + (::thx::color::_Xyz::Xyz_Impl__obj::get_u(::thx::color::_Xyz::Xyz_Impl__obj::whiteReference) * (int)100));
HXLINE( 139)		Float _hx_tmp1;
HXDLIN( 139)		if ((l == (int)0)) {
HXLINE( 139)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE( 139)			_hx_tmp1 = ((Float)v / (Float)((int)13 * l));
            		}
HXLINE( 133)		HX_VARI( Float,vPrime) = (_hx_tmp1 + (::thx::color::_Xyz::Xyz_Impl__obj::get_v(::thx::color::_Xyz::Xyz_Impl__obj::whiteReference) * (int)100));
HXDLIN( 133)		HX_VAR( Float,Y);
HXLINE( 140)		if ((l > (int)8)) {
HXLINE( 141)			Float _hx_tmp2 = (::thx::color::_Xyz::Xyz_Impl__obj::whiteReference->__get((int)1) * (int)100);
HXDLIN( 141)			Float _hx_tmp3 = ::Math_obj::pow(((Float)(l + (int)16) / (Float)(int)116),(int)3);
HXLINE( 133)			Y = (_hx_tmp2 * _hx_tmp3);
            		}
            		else {
HXLINE( 142)			Float _hx_tmp4 = ((::thx::color::_Xyz::Xyz_Impl__obj::whiteReference->__get((int)1) * (int)100) * l);
HXDLIN( 142)			Float _hx_tmp5 = ::Math_obj::pow(((Float)0.103448275862068964),(int)3);
HXLINE( 133)			Y = (_hx_tmp4 * _hx_tmp5);
            		}
HXLINE( 146)		return ::Array_obj< Float >::__new(3)->init(0,((Float)((Float)((Y * (int)9) * uPrime) / (Float)((int)4 * vPrime)) / (Float)(int)100))->init(1,((Float)Y / (Float)(int)100))->init(2,((Float)((Float)(Y * (((int)12 - ((int)3 * uPrime)) - ((int)20 * vPrime))) / (Float)((int)4 * vPrime)) / (Float)(int)100));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,toXyz,return )

Float Luv_Impl__obj::get_l(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","get_l",0xc61386f7,"thx.color._Luv.Luv_Impl_.get_l","thx/color/Luv.hx",150,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 150)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,get_l,return )

Float Luv_Impl__obj::get_u(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","get_u",0xc6138700,"thx.color._Luv.Luv_Impl_.get_u","thx/color/Luv.hx",152,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 152)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,get_u,return )

Float Luv_Impl__obj::get_v(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Luv.Luv_Impl_","get_v",0xc6138701,"thx.color._Luv.Luv_Impl_.get_v","thx/color/Luv.hx",154,0xe53c0148)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 154)		return this1->__get((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Luv_Impl__obj,get_v,return )


Luv_Impl__obj::Luv_Impl__obj()
{
}

bool Luv_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"withY") ) { outValue = withY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withU") ) { outValue = withU_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withV") ) { outValue = withV_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLab") ) { outValue = toLab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLCh") ) { outValue = toLCh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmy") ) { outValue = toCmy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsl") ) { outValue = toHsl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsv") ) { outValue = toHsv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYxy") ) { outValue = toYxy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toXyz") ) { outValue = toXyz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_l") ) { outValue = get_l_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_u") ) { outValue = get_u_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_v") ) { outValue = get_v_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmyk") ) { outValue = toCmyk_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toGrey") ) { outValue = toGrey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbx") ) { outValue = toRgbx_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCubeHelix") ) { outValue = toCubeHelix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHunterLab") ) { outValue = toHunterLab_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toTemperature") ) { outValue = toTemperature_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Luv_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Luv_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Luv_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Luv_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Luv_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Luv_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Luv_Impl__obj::__mClass;

static ::String Luv_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("withY","\x93","\xcf","\x6e","\xca"),
	HX_HCSTRING("withU","\x8f","\xcf","\x6e","\xca"),
	HX_HCSTRING("withV","\x90","\xcf","\x6e","\xca"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("toLab","\x92","\xf9","\x13","\x14"),
	HX_HCSTRING("toLCh","\x76","\xdf","\x13","\x14"),
	HX_HCSTRING("toCmy","\xd4","\x2f","\x0d","\x14"),
	HX_HCSTRING("toCmyk","\x17","\xaa","\x7c","\x77"),
	HX_HCSTRING("toCubeHelix","\x4e","\xbe","\x80","\x23"),
	HX_HCSTRING("toGrey","\x7a","\x3e","\x25","\x7a"),
	HX_HCSTRING("toHsl","\x46","\x00","\x11","\x14"),
	HX_HCSTRING("toHsv","\x50","\x00","\x11","\x14"),
	HX_HCSTRING("toHunterLab","\x72","\x0f","\xb2","\xef"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbx","\xe6","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("toTemperature","\x79","\xb2","\xfc","\x3d"),
	HX_HCSTRING("toYxy","\xff","\xea","\x1d","\x14"),
	HX_HCSTRING("toXyz","\x9e","\x29","\x1d","\x14"),
	HX_HCSTRING("get_l","\x43","\xa5","\x60","\x91"),
	HX_HCSTRING("get_u","\x4c","\xa5","\x60","\x91"),
	HX_HCSTRING("get_v","\x4d","\xa5","\x60","\x91"),
	::String(null())
};

void Luv_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Luv.Luv_Impl_","\x22","\x43","\xda","\x0c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Luv_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Luv_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Luv_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Luv_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Luv_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Luv_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Luv_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _Luv
