// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__Hsl_Hsl_Impl_
#include <thx/color/_Hsl/Hsl_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsla_Hsla_Impl_
#include <thx/color/_Hsla/Hsla_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _Hsla{

void Hsla_Impl__obj::__construct() { }

Dynamic Hsla_Impl__obj::__CreateEmpty() { return new Hsla_Impl__obj; }

hx::ObjectPtr< Hsla_Impl__obj > Hsla_Impl__obj::__new()
{
	hx::ObjectPtr< Hsla_Impl__obj > _hx_result = new Hsla_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Hsla_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Hsla_Impl__obj > _hx_result = new Hsla_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Hsla_Impl__obj::create(Float hue,Float saturation,Float lightness,Float alpha){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","create",0x08c5ab46,"thx.color._Hsla.Hsla_Impl_.create","thx/color/Hsla.hx",20,0x9bc08e67)
            	HX_STACK_ARG(hue,"hue")
            	HX_STACK_ARG(saturation,"saturation")
            	HX_STACK_ARG(lightness,"lightness")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE(  20)		return ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,saturation)->init(2,lightness)->init(3,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Hsla_Impl__obj,create,return )

::Array< Float > Hsla_Impl__obj::fromFloats(::Array< Float > arr){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","fromFloats",0x7f6959ab,"thx.color._Hsla.Hsla_Impl_.fromFloats","thx/color/Hsla.hx",22,0x9bc08e67)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  23)		::thx::ArrayFloats_obj::resize(arr,(int)4,null());
HXLINE(  24)		return ::Array_obj< Float >::__new(4)->init(0,arr->__get((int)0))->init(1,arr->__get((int)1))->init(2,arr->__get((int)2))->init(3,arr->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,fromFloats,return )

::Array< Float > Hsla_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","fromString",0x4f435f25,"thx.color._Hsla.Hsla_Impl_.fromString","thx/color/Hsla.hx",27,0x9bc08e67)
            	HX_STACK_ARG(color,"color")
HXLINE(  28)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseColor(color);
HXLINE(  29)		if (hx::IsNull( info )) {
HXLINE(  30)			return null();
            		}
HXLINE(  32)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  32)			::String _hx_switch_0 = info->name;
            			if (  (_hx_switch_0==HX_("hsl",01,4f,4f,00)) ){
HXLINE(  34)				HX_VARI( ::Array< Float >,channels) = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXLINE(  32)				return ::thx::color::_Hsl::Hsl_Impl__obj::toHsla(channels);
HXDLIN(  32)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("hsla",40,d2,15,45)) ){
HXLINE(  36)				HX_VARI_NAME( ::Array< Float >,channels1,"channels") = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)4,false);
HXLINE(  32)				return channels1;
HXLINE(  36)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  32)				return null();
            			}
            			_hx_goto_0:;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  32)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  32)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,fromString,return )

::Array< Float > Hsla_Impl__obj::_new(::Array< Float > channels){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","_new",0x9912d32b,"thx.color._Hsla.Hsla_Impl_._new","thx/color/Hsla.hx",42,0x9bc08e67)
            	HX_STACK_ARG(channels,"channels")
HXLINE(  42)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,_new,return )

 ::Dynamic Hsla_Impl__obj::analogous(::Array< Float > this1,hx::Null< Float >  __o_spread){
Float spread = __o_spread.Default(((Float)30.0));
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","analogous",0x8bacce53,"thx.color._Hsla.Hsla_Impl_.analogous","thx/color/Hsla.hx",46,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(spread,"spread")
HXLINE(  46)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsla::Hsla_Impl__obj::rotate(this1,-(spread)))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsla::Hsla_Impl__obj::rotate(this1,spread)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,analogous,return )

::Array< Float > Hsla_Impl__obj::complement(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","complement",0xf8837430,"thx.color._Hsla.Hsla_Impl_.complement","thx/color/Hsla.hx",52,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  52)		return ::thx::color::_Hsla::Hsla_Impl__obj::rotate(this1,(int)180);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,complement,return )

::Array< Float > Hsla_Impl__obj::darker(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","darker",0xadf07aad,"thx.color._Hsla.Hsla_Impl_.darker","thx/color/Hsla.hx",55,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  55)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),(int)0))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,darker,return )

::Array< Float > Hsla_Impl__obj::lighter(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","lighter",0xaca8c739,"thx.color._Hsla.Hsla_Impl_.lighter","thx/color/Hsla.hx",63,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  63)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),(int)1))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,lighter,return )

::Array< Float > Hsla_Impl__obj::normalize(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","normalize",0x98173d83,"thx.color._Hsla.Hsla_Impl_.normalize","thx/color/Hsla.hx",71,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  71)		HX_VARI( Float,hue) = ::thx::Floats_obj::wrapCircular(this1->__get((int)0),(int)360);
HXDLIN(  71)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXDLIN(  71)		HX_VARI( Float,v) = this1->__get((int)1);
HXDLIN(  71)		Float _hx_tmp;
HXDLIN(  71)		if ((v < (int)0)) {
HXLINE(  71)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  71)			if ((v > (int)1)) {
HXLINE(  71)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(  71)				_hx_tmp = v;
            			}
            		}
HXDLIN(  71)		HX_VARI_NAME( Float,v1,"v") = this1->__get((int)2);
HXDLIN(  71)		Float _hx_tmp1;
HXDLIN(  71)		if ((v1 < (int)0)) {
HXLINE(  71)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE(  71)			if ((v1 > (int)1)) {
HXLINE(  71)				_hx_tmp1 = (int)1;
            			}
            			else {
HXLINE(  71)				_hx_tmp1 = v1;
            			}
            		}
HXDLIN(  71)		HX_VARI_NAME( Float,v2,"v") = this1->__get((int)3);
HXDLIN(  71)		Float _hx_tmp2;
HXDLIN(  71)		if ((v2 < (int)0)) {
HXLINE(  71)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE(  71)			if ((v2 > (int)1)) {
HXLINE(  71)				_hx_tmp2 = (int)1;
            			}
            			else {
HXLINE(  71)				_hx_tmp2 = v2;
            			}
            		}
HXDLIN(  71)		this2 = ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,_hx_tmp)->init(2,_hx_tmp1)->init(3,_hx_tmp2);
HXDLIN(  71)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,normalize,return )

::Array< Float > Hsla_Impl__obj::roundTo(::Array< Float > this1,Int decimals){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","roundTo",0x1fd4eddf,"thx.color._Hsla.Hsla_Impl_.roundTo","thx/color/Hsla.hx",74,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE(  74)		HX_VARI( Float,hue) = ::thx::Floats_obj::roundTo(this1->__get((int)0),decimals);
HXDLIN(  74)		HX_VARI( Float,saturation) = ::thx::Floats_obj::roundTo(this1->__get((int)1),decimals);
HXDLIN(  74)		HX_VARI( Float,lightness) = ::thx::Floats_obj::roundTo(this1->__get((int)2),decimals);
HXDLIN(  74)		HX_VARI( Float,alpha) = ::thx::Floats_obj::roundTo(this1->__get((int)3),decimals);
HXDLIN(  74)		return ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,saturation)->init(2,lightness)->init(3,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,roundTo,return )

::Array< Float > Hsla_Impl__obj::transparent(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","transparent",0x9d361ac8,"thx.color._Hsla.Hsla_Impl_.transparent","thx/color/Hsla.hx",77,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  77)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,::thx::Floats_obj::interpolate(t,this1->__get((int)3),(int)0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,transparent,return )

::Array< Float > Hsla_Impl__obj::opaque(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","opaque",0xaba8212b,"thx.color._Hsla.Hsla_Impl_.opaque","thx/color/Hsla.hx",85,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  85)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,::thx::Floats_obj::interpolate(t,this1->__get((int)3),(int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,opaque,return )

::Array< Float > Hsla_Impl__obj::interpolate(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","interpolate",0x99aec437,"thx.color._Hsla.Hsla_Impl_.interpolate","thx/color/Hsla.hx",93,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  93)		return ::Array_obj< Float >::__new(4)->init(0,::thx::Floats_obj::interpolateAngle(t,this1->__get((int)0),other->__get((int)0),null()))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)))->init(3,::thx::Floats_obj::interpolate(t,this1->__get((int)3),other->__get((int)3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsla_Impl__obj,interpolate,return )

::Array< Float > Hsla_Impl__obj::rotate(::Array< Float > this1,Float angle){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","rotate",0x57d68aa5,"thx.color._Hsla.Hsla_Impl_.rotate","thx/color/Hsla.hx",101,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
HXLINE( 101)		return ::Array_obj< Float >::__new(4)->init(0,(this1->__get((int)0) + angle))->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,rotate,return )

 ::Dynamic Hsla_Impl__obj::split(::Array< Float > this1,hx::Null< Float >  __o_spread){
Float spread = __o_spread.Default(((Float)150.0));
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","split",0xdcc13dd0,"thx.color._Hsla.Hsla_Impl_.split","thx/color/Hsla.hx",104,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(spread,"spread")
HXLINE( 104)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsla::Hsla_Impl__obj::rotate(this1,-(spread)))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsla::Hsla_Impl__obj::rotate(this1,spread)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,split,return )

::Array< Float > Hsla_Impl__obj::withAlpha(::Array< Float > this1,Float newalpha){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","withAlpha",0x91fa116e,"thx.color._Hsla.Hsla_Impl_.withAlpha","thx/color/Hsla.hx",110,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newalpha,"newalpha")
HXLINE( 110)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,newalpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,withAlpha,return )

::Array< Float > Hsla_Impl__obj::withHue(::Array< Float > this1,Float newhue){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","withHue",0xf22916c8,"thx.color._Hsla.Hsla_Impl_.withHue","thx/color/Hsla.hx",113,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newhue,"newhue")
HXLINE( 113)		return ::Array_obj< Float >::__new(4)->init(0,newhue)->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,withHue,return )

::Array< Float > Hsla_Impl__obj::withLightness(::Array< Float > this1,Float newlightness){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","withLightness",0x6510e67d,"thx.color._Hsla.Hsla_Impl_.withLightness","thx/color/Hsla.hx",116,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newlightness,"newlightness")
HXLINE( 116)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,newlightness)->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,withLightness,return )

::Array< Float > Hsla_Impl__obj::withSaturation(::Array< Float > this1,Float newsaturation){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","withSaturation",0x7953efc2,"thx.color._Hsla.Hsla_Impl_.withSaturation","thx/color/Hsla.hx",119,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newsaturation,"newsaturation")
HXLINE( 119)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,newsaturation)->init(2,this1->__get((int)2))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,withSaturation,return )

::String Hsla_Impl__obj::toCss3(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","toCss3",0x04377675,"thx.color._Hsla.Hsla_Impl_.toCss3","thx/color/Hsla.hx",122,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 122)		return ::thx::color::_Hsla::Hsla_Impl__obj::toString(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,toCss3,return )

::String Hsla_Impl__obj::toString(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","toString",0x12763b76,"thx.color._Hsla.Hsla_Impl_.toString","thx/color/Hsla.hx",125,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 125)		return ((((((((HX_("hsla(",e8,25,02,2e) + this1->__get((int)0)) + HX_(",",2c,00,00,00)) + (this1->__get((int)1) * (int)100)) + HX_("%,",67,20,00,00)) + (this1->__get((int)2) * (int)100)) + HX_("%,",67,20,00,00)) + this1->__get((int)3)) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,toString,return )

Bool Hsla_Impl__obj::equals(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","equals",0x4ca93289,"thx.color._Hsla.Hsla_Impl_.equals","thx/color/Hsla.hx",128,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 128)		return ::thx::color::_Hsla::Hsla_Impl__obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsla_Impl__obj,equals,return )

Bool Hsla_Impl__obj::nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","nearEquals",0xf940a291,"thx.color._Hsla.Hsla_Impl_.nearEquals","thx/color/Hsla.hx",131,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE( 131)		Bool _hx_tmp;
HXDLIN( 131)		Bool _hx_tmp1;
HXDLIN( 131)		Float _hx_tmp2 = ::Math_obj::abs(::thx::Floats_obj::angleDifference(this1->__get((int)0),other->__get((int)0),((Float)360.0)));
HXDLIN( 131)		if (hx::IsLessEq( _hx_tmp2,tolerance )) {
HXLINE( 131)			_hx_tmp1 = ::thx::Floats_obj::nearEquals(this1->__get((int)1),other->__get((int)1),tolerance);
            		}
            		else {
HXLINE( 131)			_hx_tmp1 = false;
            		}
HXDLIN( 131)		if (_hx_tmp1) {
HXLINE( 131)			_hx_tmp = ::thx::Floats_obj::nearEquals(this1->__get((int)2),other->__get((int)2),tolerance);
            		}
            		else {
HXLINE( 131)			_hx_tmp = false;
            		}
HXDLIN( 131)		if (_hx_tmp) {
HXLINE( 131)			return ::thx::Floats_obj::nearEquals(this1->__get((int)3),other->__get((int)3),tolerance);
            		}
            		else {
HXLINE( 131)			return false;
            		}
HXDLIN( 131)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsla_Impl__obj,nearEquals,return )

::Array< Float > Hsla_Impl__obj::toHsl(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","toHsl",0x6f63533c,"thx.color._Hsla.Hsla_Impl_.toHsl","thx/color/Hsla.hx",134,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 134)		HX_VARI( ::Array< Float >,channels) = this1->slice((int)0,(int)3);
HXDLIN( 134)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,toHsl,return )

::Array< Float > Hsla_Impl__obj::toHsva(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","toHsva",0x07858a5b,"thx.color._Hsla.Hsla_Impl_.toHsva","thx/color/Hsla.hx",137,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 137)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toHsva(::thx::color::_Hsla::Hsla_Impl__obj::toRgbxa(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,toHsva,return )

Int Hsla_Impl__obj::toRgb(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","toRgb",0x6f6adf48,"thx.color._Hsla.Hsla_Impl_.toRgb","thx/color/Hsla.hx",140,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 140)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgb(::thx::color::_Hsla::Hsla_Impl__obj::toRgbxa(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,toRgb,return )

Int Hsla_Impl__obj::toRgba(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","toRgba",0x0e188019,"thx.color._Hsla.Hsla_Impl_.toRgba","thx/color/Hsla.hx",143,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 143)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(::thx::color::_Hsla::Hsla_Impl__obj::toRgbxa(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,toRgba,return )

::Array< Float > Hsla_Impl__obj::toRgbxa(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","toRgbxa",0x4757aa31,"thx.color._Hsla.Hsla_Impl_.toRgbxa","thx/color/Hsla.hx",147,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 147)		return ::Array_obj< Float >::__new(4)->init(0,::thx::color::_Hsl::Hsl_Impl__obj::_c((this1->__get((int)0) + (int)120),this1->__get((int)1),this1->__get((int)2)))->init(1,::thx::color::_Hsl::Hsl_Impl__obj::_c(this1->__get((int)0),this1->__get((int)1),this1->__get((int)2)))->init(2,::thx::color::_Hsl::Hsl_Impl__obj::_c((this1->__get((int)0) - (int)120),this1->__get((int)1),this1->__get((int)2)))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,toRgbxa,return )

Float Hsla_Impl__obj::get_hue(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","get_hue",0xb98995c5,"thx.color._Hsla.Hsla_Impl_.get_hue","thx/color/Hsla.hx",155,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 155)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,get_hue,return )

Float Hsla_Impl__obj::get_saturation(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","get_saturation",0xb8f9fa65,"thx.color._Hsla.Hsla_Impl_.get_saturation","thx/color/Hsla.hx",157,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 157)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,get_saturation,return )

Float Hsla_Impl__obj::get_lightness(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","get_lightness",0x9d9a413a,"thx.color._Hsla.Hsla_Impl_.get_lightness","thx/color/Hsla.hx",159,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 159)		return this1->__get((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,get_lightness,return )

Float Hsla_Impl__obj::get_alpha(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsla.Hsla_Impl_","get_alpha",0x51b609ab,"thx.color._Hsla.Hsla_Impl_.get_alpha","thx/color/Hsla.hx",161,0x9bc08e67)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 161)		return this1->__get((int)3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsla_Impl__obj,get_alpha,return )


Hsla_Impl__obj::Hsla_Impl__obj()
{
}

bool Hsla_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { outValue = split_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsl") ) { outValue = toHsl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"darker") ) { outValue = darker_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"opaque") ) { outValue = opaque_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCss3") ) { outValue = toCss3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsva") ) { outValue = toHsva_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lighter") ) { outValue = lighter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withHue") ) { outValue = withHue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hue") ) { outValue = get_hue_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"analogous") ) { outValue = analogous_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withAlpha") ) { outValue = withAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { outValue = get_alpha_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"complement") ) { outValue = complement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { outValue = transparent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"withLightness") ) { outValue = withLightness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lightness") ) { outValue = get_lightness_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"withSaturation") ) { outValue = withSaturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_saturation") ) { outValue = get_saturation_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Hsla_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Hsla_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Hsla_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Hsla_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Hsla_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Hsla_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Hsla_Impl__obj::__mClass;

static ::String Hsla_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("analogous","\x5d","\xc8","\x36","\x9f"),
	HX_HCSTRING("complement","\xe6","\x42","\xb4","\xfd"),
	HX_HCSTRING("darker","\x63","\x36","\x3a","\x21"),
	HX_HCSTRING("lighter","\xc3","\x4a","\xe3","\x19"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("opaque","\xe1","\xdc","\xf1","\x1e"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	HX_HCSTRING("withAlpha","\x78","\x0b","\x84","\xa5"),
	HX_HCSTRING("withHue","\x52","\x9a","\x63","\x5f"),
	HX_HCSTRING("withLightness","\x87","\xad","\x21","\x60"),
	HX_HCSTRING("withSaturation","\x78","\x51","\xf1","\x2c"),
	HX_HCSTRING("toCss3","\x2b","\x32","\x81","\x77"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("toHsl","\x46","\x00","\x11","\x14"),
	HX_HCSTRING("toHsva","\x11","\x46","\xcf","\x7a"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("get_hue","\x4f","\x19","\xc4","\x26"),
	HX_HCSTRING("get_saturation","\x1b","\x5c","\x97","\x6c"),
	HX_HCSTRING("get_lightness","\x44","\x08","\xab","\x98"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	::String(null())
};

void Hsla_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Hsla.Hsla_Impl_","\xe4","\x76","\x4d","\x91");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Hsla_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Hsla_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Hsla_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Hsla_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Hsla_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Hsla_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Hsla_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _Hsla
