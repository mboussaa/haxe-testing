// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_color__Rgba_Rgba_Impl_
#define INCLUDED_thx_color__Rgba_Rgba_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(thx,color,_Rgba,Rgba_Impl_)

namespace thx{
namespace color{
namespace _Rgba{


class HXCPP_CLASS_ATTRIBUTES Rgba_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Rgba_Impl__obj OBJ_;
		Rgba_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.color._Rgba.Rgba_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.color._Rgba.Rgba_Impl_"); }
		static hx::ObjectPtr< Rgba_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Rgba_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Rgba_Impl_","\x74","\x90","\x76","\x6a"); }

		static Int create(Int red,Int green,Int blue,Int alpha);
		static ::Dynamic create_dyn();

		static Int fromFloats(::Array< Float > arr);
		static ::Dynamic fromFloats_dyn();

		static Int fromInt(Int rgba);
		static ::Dynamic fromInt_dyn();

		static Int fromInts(::Array< Int > arr);
		static ::Dynamic fromInts_dyn();

		static  ::Dynamic fromString(::String color);
		static ::Dynamic fromString_dyn();

		static Int _new(Int rgba);
		static ::Dynamic _new_dyn();

		static Int combineColor(Int this1,Int other);
		static ::Dynamic combineColor_dyn();

		static Int darker(Int this1,Float t);
		static ::Dynamic darker_dyn();

		static Int lighter(Int this1,Float t);
		static ::Dynamic lighter_dyn();

		static Int transparent(Int this1,Float t);
		static ::Dynamic transparent_dyn();

		static Int opaque(Int this1,Float t);
		static ::Dynamic opaque_dyn();

		static Int interpolate(Int this1,Int other,Float t);
		static ::Dynamic interpolate_dyn();

		static Int withAlpha(Int this1,Int newalpha);
		static ::Dynamic withAlpha_dyn();

		static Int withAlphaf(Int this1,Float newalpha);
		static ::Dynamic withAlphaf_dyn();

		static Int withRed(Int this1,Int newred);
		static ::Dynamic withRed_dyn();

		static Int withGreen(Int this1,Int newgreen);
		static ::Dynamic withGreen_dyn();

		static Int withBlue(Int this1,Int newblue);
		static ::Dynamic withBlue_dyn();

		static ::Array< Float > toHsla(Int this1);
		static ::Dynamic toHsla_dyn();

		static ::Array< Float > toHsva(Int this1);
		static ::Dynamic toHsva_dyn();

		static Int toRgb(Int this1);
		static ::Dynamic toRgb_dyn();

		static ::Array< Float > toRgbx(Int this1);
		static ::Dynamic toRgbx_dyn();

		static ::Array< Float > toRgbxa(Int this1);
		static ::Dynamic toRgbxa_dyn();

		static ::String toCss3(Int this1);
		static ::Dynamic toCss3_dyn();

		static ::String toString(Int this1);
		static ::Dynamic toString_dyn();

		static ::String toHex(Int this1,::String prefix);
		static ::Dynamic toHex_dyn();

		static Bool equals(Int this1,Int other);
		static ::Dynamic equals_dyn();

		static Int get_alpha(Int this1);
		static ::Dynamic get_alpha_dyn();

		static Int get_red(Int this1);
		static ::Dynamic get_red_dyn();

		static Int get_green(Int this1);
		static ::Dynamic get_green_dyn();

		static Int get_blue(Int this1);
		static ::Dynamic get_blue_dyn();

};

} // end namespace thx
} // end namespace color
} // end namespace _Rgba

#endif /* INCLUDED_thx_color__Rgba_Rgba_Impl_ */ 
