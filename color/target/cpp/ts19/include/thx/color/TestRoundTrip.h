// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_color_TestRoundTrip
#define INCLUDED_thx_color_TestRoundTrip

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(thx,color,TestRoundTrip)

namespace thx{
namespace color{


class HXCPP_CLASS_ATTRIBUTES TestRoundTrip_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestRoundTrip_obj OBJ_;
		TestRoundTrip_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="thx.color.TestRoundTrip")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"thx.color.TestRoundTrip"); }
		static hx::ObjectPtr< TestRoundTrip_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestRoundTrip_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("TestRoundTrip","\x81","\xcd","\x0a","\x00"); }

		static void assertRgbx(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertRgbx_dyn();

		static void assertLab(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertLab_dyn();

		static void assertLCh(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertLCh_dyn();

		static void assertCmy(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertCmy_dyn();

		static void assertCmyk(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertCmyk_dyn();

		static void assertCubeHelix(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertCubeHelix_dyn();

		static void assertHsl(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertHsl_dyn();

		static void assertHsv(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertHsv_dyn();

		static void assertXyz(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertXyz_dyn();

		static void assertYuv(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertYuv_dyn();

		static void assertYxy(::Array< Float > e,::Array< Float > t,::String s, ::Dynamic pos);
		static ::Dynamic assertYxy_dyn();

		::Array< ::Dynamic> tests;
		void testRgbxRoundtrip();
		::Dynamic testRgbxRoundtrip_dyn();

		void testLabRoundtrip();
		::Dynamic testLabRoundtrip_dyn();

		void testLChRoundtrip();
		::Dynamic testLChRoundtrip_dyn();

		void testCmyRoundtrip();
		::Dynamic testCmyRoundtrip_dyn();

		void testCmykRoundtrip();
		::Dynamic testCmykRoundtrip_dyn();

		void testCubeHelixRoundtrip();
		::Dynamic testCubeHelixRoundtrip_dyn();

		void testHslRoundtrip();
		::Dynamic testHslRoundtrip_dyn();

		void testHsvRoundtrip();
		::Dynamic testHsvRoundtrip_dyn();

		void testXyzRoundtrip();
		::Dynamic testXyzRoundtrip_dyn();

		void testYuvRoundtrip();
		::Dynamic testYuvRoundtrip_dyn();

		void testYxyRoundtrip();
		::Dynamic testYxyRoundtrip_dyn();

		void testToStringRoundtrip();
		::Dynamic testToStringRoundtrip_dyn();

};

} // end namespace thx
} // end namespace color

#endif /* INCLUDED_thx_color_TestRoundTrip */ 
