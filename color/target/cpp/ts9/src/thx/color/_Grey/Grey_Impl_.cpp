// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__Grey_Grey_Impl_
#include <thx/color/_Grey/Grey_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _Grey{

void Grey_Impl__obj::__construct() { }

Dynamic Grey_Impl__obj::__CreateEmpty() { return new Grey_Impl__obj; }

hx::ObjectPtr< Grey_Impl__obj > Grey_Impl__obj::__new()
{
	hx::ObjectPtr< Grey_Impl__obj > _hx_result = new Grey_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Grey_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Grey_Impl__obj > _hx_result = new Grey_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Float Grey_Impl__obj::black;

Float Grey_Impl__obj::white;

Float Grey_Impl__obj::create(Float v){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","create",0x227fd7a6,"thx.color._Grey.Grey_Impl_.create","thx/color/Grey.hx",15,0x13decaa8)
            	HX_STACK_ARG(v,"v")
HXLINE(  15)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,create,return )

 ::Dynamic Grey_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","fromString",0xb5fb3b85,"thx.color._Grey.Grey_Impl_.fromString","thx/color/Grey.hx",17,0x13decaa8)
            	HX_STACK_ARG(color,"color")
HXLINE(  18)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseColor(color);
HXLINE(  19)		if (hx::IsNull( info )) {
HXLINE(  20)			return null();
            		}
HXLINE(  22)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  22)			::String _hx_switch_0 = info->name;
            			if (  (_hx_switch_0==HX_("gray",e3,cf,6b,44)) ||  (_hx_switch_0==HX_("grey",5f,d3,6b,44)) ){
HXLINE(  24)				::Array< Float > _hx_tmp = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)1,false);
HXLINE(  22)				return _hx_tmp->__get((int)0);
HXLINE(  24)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  22)				return null();
            			}
            			_hx_goto_0:;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  22)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  22)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,fromString,return )

Float Grey_Impl__obj::_new(Float grey){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","_new",0xddc7278b,"thx.color._Grey.Grey_Impl_._new","thx/color/Grey.hx",31,0x13decaa8)
            	HX_STACK_ARG(grey,"grey")
HXLINE(  31)		return grey;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,_new,return )

Float Grey_Impl__obj::contrast(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","contrast",0xaf9f5c2c,"thx.color._Grey.Grey_Impl_.contrast","thx/color/Grey.hx",35,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  35)		if ((this1 > ((Float)0.5))) {
HXLINE(  35)			return ::thx::color::_Grey::Grey_Impl__obj::black;
            		}
            		else {
HXLINE(  35)			return ::thx::color::_Grey::Grey_Impl__obj::white;
            		}
HXDLIN(  35)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,contrast,return )

Float Grey_Impl__obj::darker(Float this1,Float t){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","darker",0xc7aaa70d,"thx.color._Grey.Grey_Impl_.darker","thx/color/Grey.hx",38,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  38)		return ::thx::Floats_obj::interpolate(t,this1,(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Grey_Impl__obj,darker,return )

Float Grey_Impl__obj::lighter(Float this1,Float t){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","lighter",0x15d56ed9,"thx.color._Grey.Grey_Impl_.lighter","thx/color/Grey.hx",41,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  41)		return ::thx::Floats_obj::interpolate(t,this1,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Grey_Impl__obj,lighter,return )

Float Grey_Impl__obj::interpolate(Float this1,Float other,Float t){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","interpolate",0x13d7bbd7,"thx.color._Grey.Grey_Impl_.interpolate","thx/color/Grey.hx",44,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  44)		return ::thx::Floats_obj::interpolate(t,this1,other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Grey_Impl__obj,interpolate,return )

Float Grey_Impl__obj::min(Float this1,Float other){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","min",0xaaeff2a8,"thx.color._Grey.Grey_Impl_.min","thx/color/Grey.hx",47,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  47)		HX_VARI( Float,v) = ::Math_obj::min(this1,other);
HXDLIN(  47)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Grey_Impl__obj,min,return )

Float Grey_Impl__obj::max(Float this1,Float other){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","max",0xaaefebba,"thx.color._Grey.Grey_Impl_.max","thx/color/Grey.hx",50,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  50)		HX_VARI( Float,v) = ::Math_obj::max(this1,other);
HXDLIN(  50)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Grey_Impl__obj,max,return )

Float Grey_Impl__obj::normalize(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","normalize",0x23750d23,"thx.color._Grey.Grey_Impl_.normalize","thx/color/Grey.hx",53,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  53)		HX_VAR_NAME( Float,this2,"this");
HXDLIN(  53)		if ((this1 < (int)0)) {
HXLINE(  53)			this2 = (int)0;
            		}
            		else {
HXLINE(  53)			if ((this1 > (int)1)) {
HXLINE(  53)				this2 = (int)1;
            			}
            			else {
HXLINE(  53)				this2 = this1;
            			}
            		}
HXDLIN(  53)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,normalize,return )

Float Grey_Impl__obj::roundTo(Float this1,Int decimals){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","roundTo",0x8901957f,"thx.color._Grey.Grey_Impl_.roundTo","thx/color/Grey.hx",56,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE(  56)		HX_VARI( Float,v) = ::thx::Floats_obj::roundTo(this1,decimals);
HXDLIN(  56)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Grey_Impl__obj,roundTo,return )

::String Grey_Impl__obj::toString(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toString",0xb05c3fd6,"thx.color._Grey.Grey_Impl_.toString","thx/color/Grey.hx",59,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  59)		return ((HX_("grey(",e9,1f,ed,99) + (this1 * (int)100)) + HX_("%)",64,20,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toString,return )

Bool Grey_Impl__obj::equals(Float this1,Float other){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","equals",0x66635ee9,"thx.color._Grey.Grey_Impl_.equals","thx/color/Grey.hx",62,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  62)		return ::thx::Floats_obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Grey_Impl__obj,equals,return )

Bool Grey_Impl__obj::nearEquals(Float this1,Float other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","nearEquals",0x5ff87ef1,"thx.color._Grey.Grey_Impl_.nearEquals","thx/color/Grey.hx",65,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE(  65)		return ::thx::Floats_obj::nearEquals(this1,other,tolerance);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Grey_Impl__obj,nearEquals,return )

Float Grey_Impl__obj::get_grey(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","get_grey",0x3c13fe12,"thx.color._Grey.Grey_Impl_.get_grey","thx/color/Grey.hx",68,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  68)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,get_grey,return )

::Array< Float > Grey_Impl__obj::toLab(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toLab",0x487bcc28,"thx.color._Grey.Grey_Impl_.toLab","thx/color/Grey.hx",71,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  71)		::Array< Float > _hx_tmp = ::thx::color::_Grey::Grey_Impl__obj::toXyz(this1);
HXDLIN(  71)		return ::thx::color::_Xyz::Xyz_Impl__obj::toLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toLab,return )

::Array< Float > Grey_Impl__obj::toLCh(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toLCh",0x487bb20c,"thx.color._Grey.Grey_Impl_.toLCh","thx/color/Grey.hx",74,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  74)		::Array< Float > _hx_tmp = ::thx::color::_Grey::Grey_Impl__obj::toLab(this1);
HXDLIN(  74)		return ::thx::color::_Lab::Lab_Impl__obj::toLCh(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toLCh,return )

::Array< Float > Grey_Impl__obj::toLuv(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toLuv",0x487bdda8,"thx.color._Grey.Grey_Impl_.toLuv","thx/color/Grey.hx",77,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  77)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toLuv(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toLuv,return )

::Array< Float > Grey_Impl__obj::toCmy(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toCmy",0x4875026a,"thx.color._Grey.Grey_Impl_.toCmy","thx/color/Grey.hx",80,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  80)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmy(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toCmy,return )

::Array< Float > Grey_Impl__obj::toCmyk(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toCmyk",0x1ded1ac1,"thx.color._Grey.Grey_Impl_.toCmyk","thx/color/Grey.hx",83,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  83)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmyk(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toCmyk,return )

::Array< Float > Grey_Impl__obj::toCubeHelix(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toCubeHelix",0x1825a564,"thx.color._Grey.Grey_Impl_.toCubeHelix","thx/color/Grey.hx",86,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  86)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCubeHelixWithGamma(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toCubeHelix,return )

::Array< Float > Grey_Impl__obj::toHsl(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toHsl",0x4878d2dc,"thx.color._Grey.Grey_Impl_.toHsl","thx/color/Grey.hx",89,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  89)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsl(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toHsl,return )

::Array< Float > Grey_Impl__obj::toHsv(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toHsv",0x4878d2e6,"thx.color._Grey.Grey_Impl_.toHsv","thx/color/Grey.hx",92,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  92)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsv(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toHsv,return )

::Array< Float > Grey_Impl__obj::toHunterLab(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toHunterLab",0xe456f688,"thx.color._Grey.Grey_Impl_.toHunterLab","thx/color/Grey.hx",95,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  95)		::Array< Float > _hx_tmp = ::thx::color::_Grey::Grey_Impl__obj::toXyz(this1);
HXDLIN(  95)		return ::thx::color::_Xyz::Xyz_Impl__obj::toHunterLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toHunterLab,return )

Int Grey_Impl__obj::toRgb(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toRgb",0x48805ee8,"thx.color._Grey.Grey_Impl_.toRgb","thx/color/Grey.hx",98,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  98)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgb(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toRgb,return )

Int Grey_Impl__obj::toRgba(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toRgba",0x27d2ac79,"thx.color._Grey.Grey_Impl_.toRgba","thx/color/Grey.hx",101,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 101)		::Array< Float > _hx_tmp = ::thx::color::_Grey::Grey_Impl__obj::toRgbxa(this1);
HXDLIN( 101)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toRgba,return )

::Array< Float > Grey_Impl__obj::toRgbx(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toRgbx",0x27d2ac90,"thx.color._Grey.Grey_Impl_.toRgbx","thx/color/Grey.hx",104,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 104)		return ::Array_obj< Float >::__new(3)->init(0,this1)->init(1,this1)->init(2,this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toRgbx,return )

::Array< Float > Grey_Impl__obj::toRgbxa(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toRgbxa",0xb08451d1,"thx.color._Grey.Grey_Impl_.toRgbxa","thx/color/Grey.hx",107,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 107)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toRgbxa,return )

Float Grey_Impl__obj::toTemperature(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toTemperature",0x52fa0b0f,"thx.color._Grey.Grey_Impl_.toTemperature","thx/color/Grey.hx",110,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 110)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toTemperature(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toTemperature,return )

::Array< Float > Grey_Impl__obj::toYuv(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toYuv",0x4885baf5,"thx.color._Grey.Grey_Impl_.toYuv","thx/color/Grey.hx",113,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 113)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYuv(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toYuv,return )

::Array< Float > Grey_Impl__obj::toXyz(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toXyz",0x4884fc34,"thx.color._Grey.Grey_Impl_.toXyz","thx/color/Grey.hx",116,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 116)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toXyz(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toXyz,return )

::Array< Float > Grey_Impl__obj::toYxy(Float this1){
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","toYxy",0x4885bd95,"thx.color._Grey.Grey_Impl_.toYxy","thx/color/Grey.hx",119,0x13decaa8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 119)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYxy(::thx::color::_Grey::Grey_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Grey_Impl__obj,toYxy,return )


Grey_Impl__obj::Grey_Impl__obj()
{
}

bool Grey_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toLab") ) { outValue = toLab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLCh") ) { outValue = toLCh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLuv") ) { outValue = toLuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmy") ) { outValue = toCmy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsl") ) { outValue = toHsl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsv") ) { outValue = toHsv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYuv") ) { outValue = toYuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toXyz") ) { outValue = toXyz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYxy") ) { outValue = toYxy_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"darker") ) { outValue = darker_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmyk") ) { outValue = toCmyk_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbx") ) { outValue = toRgbx_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lighter") ) { outValue = lighter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contrast") ) { outValue = contrast_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_grey") ) { outValue = get_grey_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCubeHelix") ) { outValue = toCubeHelix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHunterLab") ) { outValue = toHunterLab_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toTemperature") ) { outValue = toTemperature_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Grey_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Grey_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Grey_Impl__obj::black,HX_HCSTRING("black","\xbf","\xd5","\xf1","\xb4")},
	{hx::fsFloat,(void *) &Grey_Impl__obj::white,HX_HCSTRING("white","\xa9","\x4a","\xbd","\xc9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Grey_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Grey_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Grey_Impl__obj::black,"black");
	HX_MARK_MEMBER_NAME(Grey_Impl__obj::white,"white");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Grey_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Grey_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Grey_Impl__obj::black,"black");
	HX_VISIT_MEMBER_NAME(Grey_Impl__obj::white,"white");
};

#endif

hx::Class Grey_Impl__obj::__mClass;

static ::String Grey_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("black","\xbf","\xd5","\xf1","\xb4"),
	HX_HCSTRING("white","\xa9","\x4a","\xbd","\xc9"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("contrast","\x02","\xed","\xb1","\x37"),
	HX_HCSTRING("darker","\x63","\x36","\x3a","\x21"),
	HX_HCSTRING("lighter","\xc3","\x4a","\xe3","\x19"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("get_grey","\xe8","\x8e","\x26","\xc4"),
	HX_HCSTRING("toLab","\x92","\xf9","\x13","\x14"),
	HX_HCSTRING("toLCh","\x76","\xdf","\x13","\x14"),
	HX_HCSTRING("toLuv","\x12","\x0b","\x14","\x14"),
	HX_HCSTRING("toCmy","\xd4","\x2f","\x0d","\x14"),
	HX_HCSTRING("toCmyk","\x17","\xaa","\x7c","\x77"),
	HX_HCSTRING("toCubeHelix","\x4e","\xbe","\x80","\x23"),
	HX_HCSTRING("toHsl","\x46","\x00","\x11","\x14"),
	HX_HCSTRING("toHsv","\x50","\x00","\x11","\x14"),
	HX_HCSTRING("toHunterLab","\x72","\x0f","\xb2","\xef"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbx","\xe6","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("toTemperature","\x79","\xb2","\xfc","\x3d"),
	HX_HCSTRING("toYuv","\x5f","\xe8","\x1d","\x14"),
	HX_HCSTRING("toXyz","\x9e","\x29","\x1d","\x14"),
	HX_HCSTRING("toYxy","\xff","\xea","\x1d","\x14"),
	::String(null())
};

void Grey_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Grey.Grey_Impl_","\x84","\x7e","\xb9","\x3d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Grey_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Grey_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Grey_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Grey_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Grey_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Grey_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Grey_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Grey_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","boot",0xdfc3965c,"thx.color._Grey.Grey_Impl_.boot","thx/color/Grey.hx",11,0x13decaa8)
HXLINE(  11)		HX_VARI_NAME( Float,this1,"this") = (int)0;
HXDLIN(  11)		black = this1;
            	}
{
            	HX_STACK_FRAME("thx.color._Grey.Grey_Impl_","boot",0xdfc3965c,"thx.color._Grey.Grey_Impl_.boot","thx/color/Grey.hx",12,0x13decaa8)
HXLINE(  12)		HX_VARI_NAME( Float,this1,"this") = (int)1;
HXDLIN(  12)		white = this1;
            	}
}

} // end namespace thx
} // end namespace color
} // end namespace _Grey
