// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_color_TestCubeHelix
#include <thx/color/TestCubeHelix.h>
#endif
#ifndef INCLUDED_thx_color__CubeHelix_CubeHelix_Impl_
#include <thx/color/_CubeHelix/CubeHelix_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestCubeHelix_obj::__construct(){
            	HX_STACK_FRAME("thx.color.TestCubeHelix","new",0x86904534,"thx.color.TestCubeHelix.new","thx/color/TestCubeHelix.hx",7,0x5d4bf77e)
            	HX_STACK_THIS(this)
            	}

Dynamic TestCubeHelix_obj::__CreateEmpty() { return new TestCubeHelix_obj; }

hx::ObjectPtr< TestCubeHelix_obj > TestCubeHelix_obj::__new()
{
	hx::ObjectPtr< TestCubeHelix_obj > _hx_result = new TestCubeHelix_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestCubeHelix_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestCubeHelix_obj > _hx_result = new TestCubeHelix_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestCubeHelix_obj::testBasics(){
            	HX_STACK_FRAME("thx.color.TestCubeHelix","testBasics",0xa0e001a3,"thx.color.TestCubeHelix.testBasics","thx/color/TestCubeHelix.hx",9,0x5d4bf77e)
            	HX_STACK_THIS(this)
HXLINE(  10)		HX_VARI( ::Array< Float >,cubeHelix) = ::Array_obj< Float >::__new(4)->init(0,(int)1)->init(1,(int)0)->init(2,(int)0)->init(3,((Float)1.0));
HXLINE(  11)		::utest::Assert_obj::equals((int)1,cubeHelix->__get((int)0),null(),hx::SourceInfo(HX_("TestCubeHelix.hx",a7,8e,e4,93),11,HX_("thx.color.TestCubeHelix",42,db,58,9a),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  12)		::utest::Assert_obj::equals((int)0,cubeHelix->__get((int)1),null(),hx::SourceInfo(HX_("TestCubeHelix.hx",a7,8e,e4,93),12,HX_("thx.color.TestCubeHelix",42,db,58,9a),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  13)		::utest::Assert_obj::equals((int)0,cubeHelix->__get((int)2),null(),hx::SourceInfo(HX_("TestCubeHelix.hx",a7,8e,e4,93),13,HX_("thx.color.TestCubeHelix",42,db,58,9a),HX_("testBasics",f7,73,1f,6e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCubeHelix_obj,testBasics,(void))

void TestCubeHelix_obj::testStrings(){
            	HX_STACK_FRAME("thx.color.TestCubeHelix","testStrings",0xeb77e524,"thx.color.TestCubeHelix.testStrings","thx/color/TestCubeHelix.hx",18,0x5d4bf77e)
            	HX_STACK_THIS(this)
HXLINE(  18)		::utest::Assert_obj::equals(HX_("cubehelix(0,0,1)",af,85,7d,51),::thx::color::_CubeHelix::CubeHelix_Impl__obj::toString(::Array_obj< Float >::__new(4)->init(0,(int)0)->init(1,(int)0)->init(2,(int)1)->init(3,((Float)1.0))),null(),hx::SourceInfo(HX_("TestCubeHelix.hx",a7,8e,e4,93),18,HX_("thx.color.TestCubeHelix",42,db,58,9a),HX_("testStrings",50,7c,bc,b5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCubeHelix_obj,testStrings,(void))

void TestCubeHelix_obj::testFromString(){
            	HX_STACK_FRAME("thx.color.TestCubeHelix","testFromString",0x0fde2879,"thx.color.TestCubeHelix.testFromString","thx/color/TestCubeHelix.hx",22,0x5d4bf77e)
            	HX_STACK_THIS(this)
HXLINE(  22)		Bool _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::equals(::Array_obj< Float >::__new(4)->init(0,((Float)0.5))->init(1,((Float)0.2))->init(2,((Float)0.1))->init(3,((Float)1.0)),::thx::color::_CubeHelix::CubeHelix_Impl__obj::fromString(HX_("cubehelix(50%,0.2,10%)",dc,8e,d9,34)));
HXDLIN(  22)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestCubeHelix.hx",a7,8e,e4,93),22,HX_("thx.color.TestCubeHelix",42,db,58,9a),HX_("testFromString",cd,54,67,f4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCubeHelix_obj,testFromString,(void))

void TestCubeHelix_obj::testNearEquals(){
            	HX_STACK_FRAME("thx.color.TestCubeHelix","testNearEquals",0xb9db6be5,"thx.color.TestCubeHelix.testNearEquals","thx/color/TestCubeHelix.hx",25,0x5d4bf77e)
            	HX_STACK_THIS(this)
HXLINE(  26)		HX_VARI( ::Array< Float >,c1) = ::Array_obj< Float >::__new(4)->init(0,((Float)206.182))->init(1,((Float)0.441))->init(2,((Float)0.090))->init(3,((Float)1.0));
HXDLIN(  26)		HX_VARI( ::Array< Float >,c2) = ::Array_obj< Float >::__new(4)->init(0,((Float)206.181))->init(1,((Float)0.440))->init(2,((Float)0.090))->init(3,((Float)1.0));
HXLINE(  28)		Bool _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::equals(c1,c2);
HXDLIN(  28)		::utest::Assert_obj::isFalse(_hx_tmp,null(),hx::SourceInfo(HX_("TestCubeHelix.hx",a7,8e,e4,93),28,HX_("thx.color.TestCubeHelix",42,db,58,9a),HX_("testNearEquals",39,98,64,9e)));
HXLINE(  29)		Bool _hx_tmp1 = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::nearEquals(c1,c2,((Float)0.01));
HXDLIN(  29)		::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestCubeHelix.hx",a7,8e,e4,93),29,HX_("thx.color.TestCubeHelix",42,db,58,9a),HX_("testNearEquals",39,98,64,9e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCubeHelix_obj,testNearEquals,(void))


TestCubeHelix_obj::TestCubeHelix_obj()
{
}

hx::Val TestCubeHelix_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testStrings") ) { return hx::Val( testStrings_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromString") ) { return hx::Val( testFromString_dyn()); }
		if (HX_FIELD_EQ(inName,"testNearEquals") ) { return hx::Val( testNearEquals_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestCubeHelix_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestCubeHelix_obj_sStaticStorageInfo = 0;
#endif

static ::String TestCubeHelix_obj_sMemberFields[] = {
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testStrings","\x50","\x7c","\xbc","\xb5"),
	HX_HCSTRING("testFromString","\xcd","\x54","\x67","\xf4"),
	HX_HCSTRING("testNearEquals","\x39","\x98","\x64","\x9e"),
	::String(null()) };

static void TestCubeHelix_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestCubeHelix_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestCubeHelix_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestCubeHelix_obj::__mClass,"__mClass");
};

#endif

hx::Class TestCubeHelix_obj::__mClass;

void TestCubeHelix_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestCubeHelix","\x42","\xdb","\x58","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestCubeHelix_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestCubeHelix_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestCubeHelix_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestCubeHelix_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestCubeHelix_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestCubeHelix_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
