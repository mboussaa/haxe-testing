// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_color_TestCmyk
#include <thx/color/TestCmyk.h>
#endif
#ifndef INCLUDED_thx_color__Cmyk_Cmyk_Impl_
#include <thx/color/_Cmyk/Cmyk_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgb_Rgb_Impl_
#include <thx/color/_Rgb/Rgb_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_palettes_Web
#include <thx/color/palettes/Web.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestCmyk_obj::__construct(){
            	HX_STACK_FRAME("thx.color.TestCmyk","new",0xf23a6015,"thx.color.TestCmyk.new","thx/color/TestCmyk.hx",7,0x7d675579)
            	HX_STACK_THIS(this)
            	}

Dynamic TestCmyk_obj::__CreateEmpty() { return new TestCmyk_obj; }

hx::ObjectPtr< TestCmyk_obj > TestCmyk_obj::__new()
{
	hx::ObjectPtr< TestCmyk_obj > _hx_result = new TestCmyk_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestCmyk_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestCmyk_obj > _hx_result = new TestCmyk_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestCmyk_obj::testBasics(){
            	HX_STACK_FRAME("thx.color.TestCmyk","testBasics",0xc36374e2,"thx.color.TestCmyk.testBasics","thx/color/TestCmyk.hx",9,0x7d675579)
            	HX_STACK_THIS(this)
HXLINE(  10)		HX_VARI( ::Array< Float >,cmyk) = ::Array_obj< Float >::__new(4)->init(0,((Float)0.1))->init(1,((Float)0.2))->init(2,((Float)0.3))->init(3,((Float)0.4));
HXLINE(  11)		::utest::Assert_obj::equals(((Float)0.1),cmyk->__get((int)0),null(),hx::SourceInfo(HX_("TestCmyk.hx",f0,0e,08,3d),11,HX_("thx.color.TestCmyk",a3,b1,01,78),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  12)		::utest::Assert_obj::equals(((Float)0.2),cmyk->__get((int)1),null(),hx::SourceInfo(HX_("TestCmyk.hx",f0,0e,08,3d),12,HX_("thx.color.TestCmyk",a3,b1,01,78),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  13)		::utest::Assert_obj::equals(((Float)0.3),cmyk->__get((int)2),null(),hx::SourceInfo(HX_("TestCmyk.hx",f0,0e,08,3d),13,HX_("thx.color.TestCmyk",a3,b1,01,78),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  14)		::utest::Assert_obj::equals(((Float)0.4),cmyk->__get((int)3),null(),hx::SourceInfo(HX_("TestCmyk.hx",f0,0e,08,3d),14,HX_("thx.color.TestCmyk",a3,b1,01,78),HX_("testBasics",f7,73,1f,6e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCmyk_obj,testBasics,(void))

void TestCmyk_obj::testStrings(){
            	HX_STACK_FRAME("thx.color.TestCmyk","testStrings",0xfbf94905,"thx.color.TestCmyk.testStrings","thx/color/TestCmyk.hx",19,0x7d675579)
            	HX_STACK_THIS(this)
HXLINE(  19)		::utest::Assert_obj::equals(HX_("cmyk(0,1,1,0)",97,6e,b4,22),::thx::color::_Cmyk::Cmyk_Impl__obj::toString(::Array_obj< Float >::__new(4)->init(0,(int)0)->init(1,(int)1)->init(2,(int)1)->init(3,(int)0)),null(),hx::SourceInfo(HX_("TestCmyk.hx",f0,0e,08,3d),19,HX_("thx.color.TestCmyk",a3,b1,01,78),HX_("testStrings",50,7c,bc,b5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCmyk_obj,testStrings,(void))

void TestCmyk_obj::testWhite(){
            	HX_STACK_FRAME("thx.color.TestCmyk","testWhite",0xd9284e6c,"thx.color.TestCmyk.testWhite","thx/color/TestCmyk.hx",23,0x7d675579)
            	HX_STACK_THIS(this)
HXLINE(  23)		::Array< Float > _hx_tmp = ::thx::color::_Rgb::Rgb_Impl__obj::toCmyk(::thx::color::palettes::Web_obj::white);
HXDLIN(  23)		Bool _hx_tmp1 = ::thx::color::_Cmyk::Cmyk_Impl__obj::equals(_hx_tmp,::Array_obj< Float >::__new(4)->init(0,(int)0)->init(1,(int)0)->init(2,(int)0)->init(3,(int)0));
HXDLIN(  23)		::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestCmyk.hx",f0,0e,08,3d),23,HX_("thx.color.TestCmyk",a3,b1,01,78),HX_("testWhite",f7,88,bf,92)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCmyk_obj,testWhite,(void))

void TestCmyk_obj::testFromString(){
            	HX_STACK_FRAME("thx.color.TestCmyk","testFromString",0x8ad5a738,"thx.color.TestCmyk.testFromString","thx/color/TestCmyk.hx",27,0x7d675579)
            	HX_STACK_THIS(this)
HXLINE(  27)		Bool _hx_tmp = ::thx::color::_Cmyk::Cmyk_Impl__obj::equals(::Array_obj< Float >::__new(4)->init(0,((Float)0.5))->init(1,((Float)0.2))->init(2,((Float)0.1))->init(3,((Float)0.3)),::thx::color::_Cmyk::Cmyk_Impl__obj::fromString(HX_("cmyk(50%,0.2,10%,0.3)",80,a3,be,ee)));
HXDLIN(  27)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestCmyk.hx",f0,0e,08,3d),27,HX_("thx.color.TestCmyk",a3,b1,01,78),HX_("testFromString",cd,54,67,f4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestCmyk_obj,testFromString,(void))


TestCmyk_obj::TestCmyk_obj()
{
}

hx::Val TestCmyk_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"testWhite") ) { return hx::Val( testWhite_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testStrings") ) { return hx::Val( testStrings_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromString") ) { return hx::Val( testFromString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestCmyk_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestCmyk_obj_sStaticStorageInfo = 0;
#endif

static ::String TestCmyk_obj_sMemberFields[] = {
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testStrings","\x50","\x7c","\xbc","\xb5"),
	HX_HCSTRING("testWhite","\xf7","\x88","\xbf","\x92"),
	HX_HCSTRING("testFromString","\xcd","\x54","\x67","\xf4"),
	::String(null()) };

static void TestCmyk_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestCmyk_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestCmyk_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestCmyk_obj::__mClass,"__mClass");
};

#endif

hx::Class TestCmyk_obj::__mClass;

void TestCmyk_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestCmyk","\xa3","\xb1","\x01","\x78");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestCmyk_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestCmyk_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestCmyk_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestCmyk_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestCmyk_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestCmyk_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
