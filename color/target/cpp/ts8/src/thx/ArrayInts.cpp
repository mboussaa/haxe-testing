// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_ArrayInts
#include <thx/ArrayInts.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_Options
#include <thx/Options.h>
#endif
#ifndef INCLUDED_thx_OrderingImpl
#include <thx/OrderingImpl.h>
#endif

namespace thx{

void ArrayInts_obj::__construct() { }

Dynamic ArrayInts_obj::__CreateEmpty() { return new ArrayInts_obj; }

hx::ObjectPtr< ArrayInts_obj > ArrayInts_obj::__new()
{
	hx::ObjectPtr< ArrayInts_obj > _hx_result = new ArrayInts_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ArrayInts_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayInts_obj > _hx_result = new ArrayInts_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic ArrayInts_obj::average(::Array< Int > arr){
            	HX_STACK_FRAME("thx.ArrayInts","average",0x7af83442,"thx.ArrayInts.average","thx/Arrays.hx",1229,0x537e0999)
            	HX_STACK_ARG(arr,"arr")
HXLINE(1229)		 ::Dynamic _hx_tmp = ::thx::ArrayInts_obj::sum(arr);
HXDLIN(1229)		return ((Float)_hx_tmp / (Float)arr->length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayInts_obj,average,return )

 ::Dynamic ArrayInts_obj::max(::Array< Int > arr){
            	HX_STACK_FRAME("thx.ArrayInts","max",0xe8713709,"thx.ArrayInts.max","thx/Arrays.hx",1235,0x537e0999)
            	HX_STACK_ARG(arr,"arr")
HXLINE(1235)		::hx::EnumBase _hx_tmp = ::thx::Arrays_obj::maxBy(arr,::thx::Ints_obj::order);
HXDLIN(1235)		return ::thx::Options_obj::get(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayInts_obj,max,return )

 ::Dynamic ArrayInts_obj::min(::Array< Int > arr){
            	HX_STACK_FRAME("thx.ArrayInts","min",0xe8713df7,"thx.ArrayInts.min","thx/Arrays.hx",1241,0x537e0999)
            	HX_STACK_ARG(arr,"arr")
HXLINE(1241)		::hx::EnumBase _hx_tmp = ::thx::Arrays_obj::minBy(arr,::thx::Ints_obj::order);
HXDLIN(1241)		return ::thx::Options_obj::get(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayInts_obj,min,return )

::Array< Int > ArrayInts_obj::resize(::Array< Int > array,Int length,hx::Null< Int >  __o_fill){
Int fill = __o_fill.Default(0);
            	HX_STACK_FRAME("thx.ArrayInts","resize",0xdf433aaf,"thx.ArrayInts.resize","thx/Arrays.hx",1249,0x537e0999)
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(length,"length")
            	HX_STACK_ARG(fill,"fill")
HXLINE(1250)		while((array->length < length)){
HXLINE(1251)			array->push(fill);
            		}
HXLINE(1252)		Int _hx_tmp = (array->length - length);
HXDLIN(1252)		array->removeRange(length,_hx_tmp);
HXLINE(1253)		return array;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ArrayInts_obj,resize,return )

 ::Dynamic ArrayInts_obj::sum(::Array< Int > arr){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run(Int tot,Int v){
            			HX_STACK_FRAME("thx.ArrayInts","sum",0xe875d5f0,"thx.ArrayInts.sum","thx/Arrays.hx",1260,0x537e0999)
            			HX_STACK_ARG(tot,"tot")
            			HX_STACK_ARG(v,"v")
HXLINE(1260)			return (tot + v);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx.ArrayInts","sum",0xe875d5f0,"thx.ArrayInts.sum","thx/Arrays.hx",1260,0x537e0999)
            	HX_STACK_ARG(arr,"arr")
HXLINE(1260)		return ( (Int)(::thx::Arrays_obj::reduce(arr, ::Dynamic(new _hx_Closure_0()),(int)0)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayInts_obj,sum,return )


ArrayInts_obj::ArrayInts_obj()
{
}

bool ArrayInts_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sum") ) { outValue = sum_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"average") ) { outValue = average_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ArrayInts_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ArrayInts_obj_sStaticStorageInfo = 0;
#endif

static void ArrayInts_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArrayInts_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArrayInts_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArrayInts_obj::__mClass,"__mClass");
};

#endif

hx::Class ArrayInts_obj::__mClass;

static ::String ArrayInts_obj_sStaticFields[] = {
	HX_HCSTRING("average","\x5d","\x71","\xdb","\x62"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("sum","\x8b","\xa9","\x57","\x00"),
	::String(null())
};

void ArrayInts_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.ArrayInts","\x53","\x36","\xa1","\x77");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ArrayInts_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArrayInts_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ArrayInts_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ArrayInts_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArrayInts_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayInts_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayInts_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
