// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__HunterLab_HunterLab_Impl_
#include <thx/color/_HunterLab/HunterLab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif
#ifndef INCLUDED_thx_error_NullArgument
#include <thx/error/NullArgument.h>
#endif

namespace thx{
namespace color{
namespace _HunterLab{

void HunterLab_Impl__obj::__construct() { }

Dynamic HunterLab_Impl__obj::__CreateEmpty() { return new HunterLab_Impl__obj; }

hx::ObjectPtr< HunterLab_Impl__obj > HunterLab_Impl__obj::__new()
{
	hx::ObjectPtr< HunterLab_Impl__obj > _hx_result = new HunterLab_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic HunterLab_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HunterLab_Impl__obj > _hx_result = new HunterLab_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > HunterLab_Impl__obj::create(Float l,Float a,Float b){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","create",0x5be8d348,"thx.color._HunterLab.HunterLab_Impl_.create","thx/color/HunterLab.hx",16,0x3f3d25e8)
            	HX_STACK_ARG(l,"l")
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  16)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,a)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HunterLab_Impl__obj,create,return )

::Array< Float > HunterLab_Impl__obj::fromFloats(::Array< Float > arr){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","fromFloats",0xce0daaad,"thx.color._HunterLab.HunterLab_Impl_.fromFloats","thx/color/HunterLab.hx",18,0x3f3d25e8)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  19)		::thx::ArrayFloats_obj::resize(arr,(int)3,null());
HXLINE(  20)		return ::Array_obj< Float >::__new(3)->init(0,arr->__get((int)0))->init(1,arr->__get((int)1))->init(2,arr->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,fromFloats,return )

::Array< Float > HunterLab_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","fromString",0x9de7b027,"thx.color._HunterLab.HunterLab_Impl_.fromString","thx/color/HunterLab.hx",23,0x3f3d25e8)
            	HX_STACK_ARG(color,"color")
HXLINE(  24)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseColor(color);
HXLINE(  25)		if (hx::IsNull( info )) {
HXLINE(  26)			return null();
            		}
HXLINE(  28)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  28)			if ((info->name == HX_("hunterlab",8d,e4,e4,88))) {
HXLINE(  30)				::Array< Float > _hx_tmp = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXLINE(  28)				return ::thx::color::_HunterLab::HunterLab_Impl__obj::fromFloats(_hx_tmp);
            			}
            			else {
HXLINE(  28)				return null();
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  28)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  28)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,fromString,return )

::Array< Float > HunterLab_Impl__obj::_new(::Array< Float > channels){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","_new",0xe39c96ad,"thx.color._HunterLab.HunterLab_Impl_._new","thx/color/HunterLab.hx",36,0x3f3d25e8)
            	HX_STACK_ARG(channels,"channels")
HXLINE(  36)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,_new,return )

Float HunterLab_Impl__obj::distance(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","distance",0x063faa81,"thx.color._HunterLab.HunterLab_Impl_.distance","thx/color/HunterLab.hx",44,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  44)		return ((((this1->__get((int)0) - other->__get((int)0)) * (this1->__get((int)0) - other->__get((int)0))) + ((this1->__get((int)1) - other->__get((int)1)) * (this1->__get((int)1) - other->__get((int)1)))) + ((this1->__get((int)2) - other->__get((int)2)) * (this1->__get((int)2) - other->__get((int)2))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HunterLab_Impl__obj,distance,return )

::Array< Float > HunterLab_Impl__obj::interpolate(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","interpolate",0x1ad154f5,"thx.color._HunterLab.HunterLab_Impl_.interpolate","thx/color/HunterLab.hx",49,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  49)		return ::Array_obj< Float >::__new(3)->init(0,::thx::Floats_obj::interpolate(t,this1->__get((int)0),other->__get((int)0)))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HunterLab_Impl__obj,interpolate,return )

::Array< Float > HunterLab_Impl__obj::match(::Array< Float > this1, ::Dynamic palette){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","match",0x4c76ea79,"thx.color._HunterLab.HunterLab_Impl_.match","thx/color/HunterLab.hx",55,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(palette,"palette")
HXLINE(  72)		if (hx::IsNull( palette )) {
HXLINE(  73)			HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("Iterable argument \"this\" cannot be null",50,67,e4,44),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),73,HX_("thx.color._HunterLab.HunterLab_Impl_",a2,62,5e,42),HX_("match",45,49,23,03))));
            		}
            		else {
HXLINE(  74)			Bool _hx_tmp = !(( (Bool)( ::Dynamic( ::Dynamic(palette->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))()->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  74)			if (_hx_tmp) {
HXLINE(  75)				HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("Iterable argument \"this\" cannot be empty",a4,21,14,cf),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),75,HX_("thx.color._HunterLab.HunterLab_Impl_",a2,62,5e,42),HX_("match",45,49,23,03))));
            			}
            		}
HXLINE(  57)		HX_VARI( Float,dist) = ::Math_obj::POSITIVE_INFINITY;
HXDLIN(  57)		HX_VARI( ::Array< Float >,closest) = null();
HXLINE(  59)		{
HXLINE(  59)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(palette->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN(  59)			while(true){
HXLINE(  59)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  59)				if (_hx_tmp1) {
HXLINE(  59)					goto _hx_goto_0;
            				}
HXDLIN(  59)				HX_VARI( ::Array< Float >,color) = ( (::Array< Float >)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  60)				HX_VARI( Float,ndist) = ::thx::color::_HunterLab::HunterLab_Impl__obj::distance(this1,color);
HXLINE(  61)				Bool _hx_tmp2 = (ndist < dist);
HXDLIN(  61)				if (_hx_tmp2) {
HXLINE(  62)					dist = ndist;
HXLINE(  63)					closest = color;
            				}
            			}
            			_hx_goto_0:;
            		}
HXLINE(  66)		return closest;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HunterLab_Impl__obj,match,return )

::Array< Float > HunterLab_Impl__obj::min(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","min",0x73dc3dc6,"thx.color._HunterLab.HunterLab_Impl_.min","thx/color/HunterLab.hx",70,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  70)		HX_VARI( Float,l) = ::Math_obj::min(this1->__get((int)0),other->__get((int)0));
HXDLIN(  70)		HX_VARI( Float,a) = ::Math_obj::min(this1->__get((int)1),other->__get((int)1));
HXDLIN(  70)		HX_VARI( Float,b) = ::Math_obj::min(this1->__get((int)2),other->__get((int)2));
HXDLIN(  70)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,a)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HunterLab_Impl__obj,min,return )

::Array< Float > HunterLab_Impl__obj::max(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","max",0x73dc36d8,"thx.color._HunterLab.HunterLab_Impl_.max","thx/color/HunterLab.hx",73,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  73)		HX_VARI( Float,l) = ::Math_obj::max(this1->__get((int)0),other->__get((int)0));
HXDLIN(  73)		HX_VARI( Float,a) = ::Math_obj::max(this1->__get((int)1),other->__get((int)1));
HXDLIN(  73)		HX_VARI( Float,b) = ::Math_obj::max(this1->__get((int)2),other->__get((int)2));
HXDLIN(  73)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,a)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HunterLab_Impl__obj,max,return )

::Array< Float > HunterLab_Impl__obj::roundTo(::Array< Float > this1,Int decimals){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","roundTo",0x8b74c79d,"thx.color._HunterLab.HunterLab_Impl_.roundTo","thx/color/HunterLab.hx",76,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE(  76)		HX_VARI( Float,l) = ::thx::Floats_obj::roundTo(this1->__get((int)0),decimals);
HXDLIN(  76)		HX_VARI( Float,a) = ::thx::Floats_obj::roundTo(this1->__get((int)1),decimals);
HXDLIN(  76)		HX_VARI( Float,b) = ::thx::Floats_obj::roundTo(this1->__get((int)2),decimals);
HXDLIN(  76)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,a)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HunterLab_Impl__obj,roundTo,return )

Bool HunterLab_Impl__obj::equals(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","equals",0x9fcc5a8b,"thx.color._HunterLab.HunterLab_Impl_.equals","thx/color/HunterLab.hx",79,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  79)		return ::thx::color::_HunterLab::HunterLab_Impl__obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HunterLab_Impl__obj,equals,return )

Bool HunterLab_Impl__obj::nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","nearEquals",0x47e4f393,"thx.color._HunterLab.HunterLab_Impl_.nearEquals","thx/color/HunterLab.hx",82,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE(  82)		Bool _hx_tmp;
HXDLIN(  82)		Bool _hx_tmp1 = ::thx::Floats_obj::nearEquals(this1->__get((int)0),other->__get((int)0),tolerance);
HXDLIN(  82)		if (_hx_tmp1) {
HXLINE(  82)			_hx_tmp = ::thx::Floats_obj::nearEquals(this1->__get((int)1),other->__get((int)1),tolerance);
            		}
            		else {
HXLINE(  82)			_hx_tmp = false;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  82)			return ::thx::Floats_obj::nearEquals(this1->__get((int)2),other->__get((int)2),tolerance);
            		}
            		else {
HXLINE(  82)			return false;
            		}
HXDLIN(  82)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HunterLab_Impl__obj,nearEquals,return )

::Array< Float > HunterLab_Impl__obj::withL(::Array< Float > this1,Float newl){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","withL",0x13c270ba,"thx.color._HunterLab.HunterLab_Impl_.withL","thx/color/HunterLab.hx",85,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newl,"newl")
HXLINE(  85)		return ::Array_obj< Float >::__new(3)->init(0,newl)->init(1,this1->__get((int)1))->init(2,this1->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HunterLab_Impl__obj,withL,return )

::Array< Float > HunterLab_Impl__obj::withA(::Array< Float > this1,Float newa){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","withA",0x13c270af,"thx.color._HunterLab.HunterLab_Impl_.withA","thx/color/HunterLab.hx",88,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newa,"newa")
HXLINE(  88)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,newa)->init(2,this1->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HunterLab_Impl__obj,withA,return )

::Array< Float > HunterLab_Impl__obj::withB(::Array< Float > this1,Float newb){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","withB",0x13c270b0,"thx.color._HunterLab.HunterLab_Impl_.withB","thx/color/HunterLab.hx",91,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newb,"newb")
HXLINE(  91)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,newb);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(HunterLab_Impl__obj,withB,return )

::String HunterLab_Impl__obj::toString(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toString",0xd2b4e7f8,"thx.color._HunterLab.HunterLab_Impl_.toString","thx/color/HunterLab.hx",94,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  94)		return ((((((HX_("hunterlab(",fb,16,63,3f) + this1->__get((int)0)) + HX_(",",2c,00,00,00)) + this1->__get((int)1)) + HX_(",",2c,00,00,00)) + this1->__get((int)2)) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toString,return )

::Array< Float > HunterLab_Impl__obj::toLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toLab",0x5d679ac6,"thx.color._HunterLab.HunterLab_Impl_.toLab","thx/color/HunterLab.hx",97,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  97)		return ::thx::color::_Xyz::Xyz_Impl__obj::toLab(::thx::color::_HunterLab::HunterLab_Impl__obj::toXyz(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toLab,return )

::Array< Float > HunterLab_Impl__obj::toLCh(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toLCh",0x5d6780aa,"thx.color._HunterLab.HunterLab_Impl_.toLCh","thx/color/HunterLab.hx",100,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 100)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toLab(this1);
HXDLIN( 100)		return ::thx::color::_Lab::Lab_Impl__obj::toLCh(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toLCh,return )

::Array< Float > HunterLab_Impl__obj::toLuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toLuv",0x5d67ac46,"thx.color._HunterLab.HunterLab_Impl_.toLuv","thx/color/HunterLab.hx",103,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 103)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 103)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toLuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toLuv,return )

::Array< Float > HunterLab_Impl__obj::toCmy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toCmy",0x5d60d108,"thx.color._HunterLab.HunterLab_Impl_.toCmy","thx/color/HunterLab.hx",106,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 106)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 106)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toCmy,return )

::Array< Float > HunterLab_Impl__obj::toCmyk(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toCmyk",0x57561663,"thx.color._HunterLab.HunterLab_Impl_.toCmyk","thx/color/HunterLab.hx",109,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 109)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 109)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmyk(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toCmyk,return )

::Array< Float > HunterLab_Impl__obj::toCubeHelix(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toCubeHelix",0x1f1f3e82,"thx.color._HunterLab.HunterLab_Impl_.toCubeHelix","thx/color/HunterLab.hx",112,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 112)		HX_VARI_NAME( ::Array< Float >,this2,"this") = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 112)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCubeHelixWithGamma(this2,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toCubeHelix,return )

Float HunterLab_Impl__obj::toGrey(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toGrey",0x59feaac6,"thx.color._HunterLab.HunterLab_Impl_.toGrey","thx/color/HunterLab.hx",115,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 115)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 115)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toGrey(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toGrey,return )

::Array< Float > HunterLab_Impl__obj::toHsl(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toHsl",0x5d64a17a,"thx.color._HunterLab.HunterLab_Impl_.toHsl","thx/color/HunterLab.hx",118,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 118)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 118)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsl(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toHsl,return )

::Array< Float > HunterLab_Impl__obj::toHsv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toHsv",0x5d64a184,"thx.color._HunterLab.HunterLab_Impl_.toHsv","thx/color/HunterLab.hx",121,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 121)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 121)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toHsv,return )

Int HunterLab_Impl__obj::toRgb(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toRgb",0x5d6c2d86,"thx.color._HunterLab.HunterLab_Impl_.toRgb","thx/color/HunterLab.hx",124,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 124)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 124)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgb(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toRgb,return )

Int HunterLab_Impl__obj::toRgba(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toRgba",0x613ba81b,"thx.color._HunterLab.HunterLab_Impl_.toRgba","thx/color/HunterLab.hx",127,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 127)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbxa(this1);
HXDLIN( 127)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toRgba,return )

::Array< Float > HunterLab_Impl__obj::toRgbx(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toRgbx",0x613ba832,"thx.color._HunterLab.HunterLab_Impl_.toRgbx","thx/color/HunterLab.hx",130,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 130)		return ::thx::color::_Xyz::Xyz_Impl__obj::toRgbx(::thx::color::_HunterLab::HunterLab_Impl__obj::toXyz(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toRgbx,return )

::Array< Float > HunterLab_Impl__obj::toRgbxa(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toRgbxa",0xb2f783ef,"thx.color._HunterLab.HunterLab_Impl_.toRgbxa","thx/color/HunterLab.hx",133,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 133)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 133)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toRgbxa,return )

Float HunterLab_Impl__obj::toTemperature(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toTemperature",0x3e62a7ad,"thx.color._HunterLab.HunterLab_Impl_.toTemperature","thx/color/HunterLab.hx",136,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 136)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 136)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toTemperature(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toTemperature,return )

::Array< Float > HunterLab_Impl__obj::toXyz(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toXyz",0x5d70cad2,"thx.color._HunterLab.HunterLab_Impl_.toXyz","thx/color/HunterLab.hx",138,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 139)		HX_VARI( Float,x) = (((Float)this1->__get((int)1) / (Float)((Float)17.5)) * ((Float)this1->__get((int)0) / (Float)((Float)10.0)));
HXDLIN( 139)		HX_VARI( Float,l10) = ((Float)this1->__get((int)0) / (Float)((Float)10.0));
HXDLIN( 139)		HX_VARI( Float,y) = (l10 * l10);
HXLINE( 144)		return ::Array_obj< Float >::__new(3)->init(0,((Float)(x + y) / (Float)((Float)1.02)))->init(1,y)->init(2,((Float)-(((((Float)this1->__get((int)2) / (Float)((Float)7.0)) * ((Float)this1->__get((int)0) / (Float)((Float)10.0))) - y)) / (Float)((Float)0.847)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toXyz,return )

::Array< Float > HunterLab_Impl__obj::toYuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toYuv",0x5d718993,"thx.color._HunterLab.HunterLab_Impl_.toYuv","thx/color/HunterLab.hx",148,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 148)		::Array< Float > _hx_tmp = ::thx::color::_HunterLab::HunterLab_Impl__obj::toRgbx(this1);
HXDLIN( 148)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toYuv,return )

::Array< Float > HunterLab_Impl__obj::toYxy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","toYxy",0x5d718c33,"thx.color._HunterLab.HunterLab_Impl_.toYxy","thx/color/HunterLab.hx",151,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 151)		return ::thx::color::_Xyz::Xyz_Impl__obj::toYxy(::thx::color::_HunterLab::HunterLab_Impl__obj::toXyz(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,toYxy,return )

Float HunterLab_Impl__obj::get_l(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","get_l",0xdab44677,"thx.color._HunterLab.HunterLab_Impl_.get_l","thx/color/HunterLab.hx",154,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 154)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,get_l,return )

Float HunterLab_Impl__obj::get_a(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","get_a",0xdab4466c,"thx.color._HunterLab.HunterLab_Impl_.get_a","thx/color/HunterLab.hx",156,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 156)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,get_a,return )

Float HunterLab_Impl__obj::get_b(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._HunterLab.HunterLab_Impl_","get_b",0xdab4466d,"thx.color._HunterLab.HunterLab_Impl_.get_b","thx/color/HunterLab.hx",158,0x3f3d25e8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 158)		return this1->__get((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HunterLab_Impl__obj,get_b,return )


HunterLab_Impl__obj::HunterLab_Impl__obj()
{
}

bool HunterLab_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"match") ) { outValue = match_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withL") ) { outValue = withL_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withA") ) { outValue = withA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withB") ) { outValue = withB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLab") ) { outValue = toLab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLCh") ) { outValue = toLCh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLuv") ) { outValue = toLuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmy") ) { outValue = toCmy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsl") ) { outValue = toHsl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsv") ) { outValue = toHsv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toXyz") ) { outValue = toXyz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYuv") ) { outValue = toYuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYxy") ) { outValue = toYxy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_l") ) { outValue = get_l_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_a") ) { outValue = get_a_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_b") ) { outValue = get_b_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmyk") ) { outValue = toCmyk_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toGrey") ) { outValue = toGrey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbx") ) { outValue = toRgbx_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCubeHelix") ) { outValue = toCubeHelix_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toTemperature") ) { outValue = toTemperature_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *HunterLab_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *HunterLab_Impl__obj_sStaticStorageInfo = 0;
#endif

static void HunterLab_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HunterLab_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HunterLab_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HunterLab_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class HunterLab_Impl__obj::__mClass;

static ::String HunterLab_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("withL","\x86","\xcf","\x6e","\xca"),
	HX_HCSTRING("withA","\x7b","\xcf","\x6e","\xca"),
	HX_HCSTRING("withB","\x7c","\xcf","\x6e","\xca"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toLab","\x92","\xf9","\x13","\x14"),
	HX_HCSTRING("toLCh","\x76","\xdf","\x13","\x14"),
	HX_HCSTRING("toLuv","\x12","\x0b","\x14","\x14"),
	HX_HCSTRING("toCmy","\xd4","\x2f","\x0d","\x14"),
	HX_HCSTRING("toCmyk","\x17","\xaa","\x7c","\x77"),
	HX_HCSTRING("toCubeHelix","\x4e","\xbe","\x80","\x23"),
	HX_HCSTRING("toGrey","\x7a","\x3e","\x25","\x7a"),
	HX_HCSTRING("toHsl","\x46","\x00","\x11","\x14"),
	HX_HCSTRING("toHsv","\x50","\x00","\x11","\x14"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbx","\xe6","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("toTemperature","\x79","\xb2","\xfc","\x3d"),
	HX_HCSTRING("toXyz","\x9e","\x29","\x1d","\x14"),
	HX_HCSTRING("toYuv","\x5f","\xe8","\x1d","\x14"),
	HX_HCSTRING("toYxy","\xff","\xea","\x1d","\x14"),
	HX_HCSTRING("get_l","\x43","\xa5","\x60","\x91"),
	HX_HCSTRING("get_a","\x38","\xa5","\x60","\x91"),
	HX_HCSTRING("get_b","\x39","\xa5","\x60","\x91"),
	::String(null())
};

void HunterLab_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._HunterLab.HunterLab_Impl_","\xa2","\x62","\x5e","\x42");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HunterLab_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HunterLab_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(HunterLab_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< HunterLab_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HunterLab_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HunterLab_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HunterLab_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _HunterLab
