// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Temperature_Temperature_Impl_
#include <thx/color/_Temperature/Temperature_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _Temperature{

void Temperature_Impl__obj::__construct() { }

Dynamic Temperature_Impl__obj::__CreateEmpty() { return new Temperature_Impl__obj; }

hx::ObjectPtr< Temperature_Impl__obj > Temperature_Impl__obj::__new()
{
	hx::ObjectPtr< Temperature_Impl__obj > _hx_result = new Temperature_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Temperature_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Temperature_Impl__obj > _hx_result = new Temperature_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Temperature_Impl__obj::temperatureToRgbx(Float kelvin){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","temperatureToRgbx",0xf27f733c,"thx.color._Temperature.Temperature_Impl_.temperatureToRgbx","thx/color/Temperature.hx",28,0x692e7041)
            	HX_STACK_ARG(kelvin,"kelvin")
HXLINE(  29)		HX_VARI( Float,t) = ((Float)kelvin / (Float)((Float)100.0));
HXLINE(  30)		HX_VAR( Float,r);
HXDLIN(  30)		HX_VAR( Float,g);
HXDLIN(  30)		HX_VAR( Float,b);
HXLINE(  33)		if ((t < ((Float)66.0))) {
HXLINE(  34)			r = (int)1;
            		}
            		else {
HXLINE(  36)			r = (t - ((Float)55.0));
HXLINE(  37)			Float _hx_tmp = (((Float)351.97690566805693) + (((Float)0.114206453784165) * r));
HXDLIN(  37)			Float _hx_tmp1 = ::Math_obj::log(r);
HXDLIN(  37)			r = ((Float)(_hx_tmp - (((Float)40.25366309332127) * _hx_tmp1)) / (Float)(int)255);
HXLINE(  38)			Bool _hx_tmp2 = (r < (int)0);
HXDLIN(  38)			if (_hx_tmp2) {
HXLINE(  38)				r = (int)0;
            			}
HXLINE(  39)			Bool _hx_tmp3 = (r > (int)1);
HXDLIN(  39)			if (_hx_tmp3) {
HXLINE(  39)				r = (int)1;
            			}
            		}
HXLINE(  43)		if ((t < ((Float)66.0))) {
HXLINE(  44)			g = (t - (int)2);
HXLINE(  45)			Float _hx_tmp4 = (((Float)-155.254855627091786) - (((Float)0.44596950469579133) * g));
HXDLIN(  45)			Float _hx_tmp5 = ::Math_obj::log(g);
HXDLIN(  45)			g = ((Float)(_hx_tmp4 + (((Float)104.49216199393888) * _hx_tmp5)) / (Float)(int)255);
HXLINE(  46)			Bool _hx_tmp6 = (g < (int)0);
HXDLIN(  46)			if (_hx_tmp6) {
HXLINE(  46)				g = (int)0;
            			}
HXLINE(  47)			Bool _hx_tmp7 = (g > (int)1);
HXDLIN(  47)			if (_hx_tmp7) {
HXLINE(  47)				g = (int)1;
            			}
            		}
            		else {
HXLINE(  49)			g = (t - (int)50);
HXLINE(  50)			Float _hx_tmp8 = (((Float)325.4494125711974) + (((Float)0.07943456536662342) * g));
HXDLIN(  50)			Float _hx_tmp9 = ::Math_obj::log(g);
HXDLIN(  50)			g = ((Float)(_hx_tmp8 - (((Float)28.0852963507957) * _hx_tmp9)) / (Float)(int)255);
HXLINE(  51)			Bool _hx_tmp10 = (g < (int)0);
HXDLIN(  51)			if (_hx_tmp10) {
HXLINE(  51)				g = (int)0;
            			}
HXLINE(  52)			Bool _hx_tmp11 = (g > (int)1);
HXDLIN(  52)			if (_hx_tmp11) {
HXLINE(  52)				g = (int)1;
            			}
            		}
HXLINE(  56)		if ((t >= ((Float)66.0))) {
HXLINE(  57)			b = (int)1;
            		}
            		else {
HXLINE(  58)			if ((t <= ((Float)20.0))) {
HXLINE(  59)				b = (int)0;
            			}
            			else {
HXLINE(  61)				b = (t - (int)10);
HXLINE(  62)				Float _hx_tmp12 = (((Float)-254.769351841209016) + (((Float)0.8274096064007395) * b));
HXDLIN(  62)				Float _hx_tmp13 = ::Math_obj::log(b);
HXDLIN(  62)				b = ((Float)(_hx_tmp12 + (((Float)115.67994401066147) * _hx_tmp13)) / (Float)(int)255);
HXLINE(  63)				Bool _hx_tmp14 = (b < (int)0);
HXDLIN(  63)				if (_hx_tmp14) {
HXLINE(  63)					b = (int)0;
            				}
HXLINE(  64)				Bool _hx_tmp15 = (b > (int)1);
HXDLIN(  64)				if (_hx_tmp15) {
HXLINE(  64)					b = (int)1;
            				}
            			}
            		}
HXLINE(  67)		return ::Array_obj< Float >::__new(3)->init(0,r)->init(1,g)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,temperatureToRgbx,return )

Float Temperature_Impl__obj::create(Float v){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","create",0xcf3553ba,"thx.color._Temperature.Temperature_Impl_.create","thx/color/Temperature.hx",71,0x692e7041)
            	HX_STACK_ARG(v,"v")
HXLINE(  71)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,create,return )

 ::Dynamic Temperature_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","fromString",0x95225199,"thx.color._Temperature.Temperature_Impl_.fromString","thx/color/Temperature.hx",73,0x692e7041)
            	HX_STACK_ARG(color,"color")
HXLINE(  74)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseColor(color);
HXLINE(  75)		if (hx::IsNull( info )) {
HXLINE(  76)			return null();
            		}
HXLINE(  78)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  78)			if ((info->name == HX_("temperature",34,b4,90,3c))) {
HXLINE(  80)				::Array< Float > _hx_tmp = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)1,false);
HXLINE(  78)				return _hx_tmp->__get((int)0);
            			}
            			else {
HXLINE(  78)				return null();
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  78)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  78)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,fromString,return )

Float Temperature_Impl__obj::_new(Float kelvin){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","_new",0x0cebb69f,"thx.color._Temperature.Temperature_Impl_._new","thx/color/Temperature.hx",87,0x692e7041)
            	HX_STACK_ARG(kelvin,"kelvin")
HXLINE(  87)		return kelvin;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,_new,return )

Float Temperature_Impl__obj::interpolate(Float this1,Float other,Float t){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","interpolate",0x76e3f743,"thx.color._Temperature.Temperature_Impl_.interpolate","thx/color/Temperature.hx",91,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  91)		return ::thx::Floats_obj::interpolate(t,this1,other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Temperature_Impl__obj,interpolate,return )

Float Temperature_Impl__obj::min(Float this1,Float other){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","min",0xa31ce214,"thx.color._Temperature.Temperature_Impl_.min","thx/color/Temperature.hx",94,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  94)		HX_VARI( Float,v) = ::Math_obj::min(this1,other);
HXDLIN(  94)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Temperature_Impl__obj,min,return )

Float Temperature_Impl__obj::max(Float this1,Float other){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","max",0xa31cdb26,"thx.color._Temperature.Temperature_Impl_.max","thx/color/Temperature.hx",97,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  97)		HX_VARI( Float,v) = ::Math_obj::max(this1,other);
HXDLIN(  97)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Temperature_Impl__obj,max,return )

Float Temperature_Impl__obj::roundTo(Float this1,Int decimals){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","roundTo",0xfb18aaeb,"thx.color._Temperature.Temperature_Impl_.roundTo","thx/color/Temperature.hx",100,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE( 100)		HX_VARI( Float,v) = ::thx::Floats_obj::roundTo(this1,decimals);
HXDLIN( 100)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Temperature_Impl__obj,roundTo,return )

::String Temperature_Impl__obj::toString(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toString",0x1277e8ea,"thx.color._Temperature.Temperature_Impl_.toString","thx/color/Temperature.hx",103,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 103)		return ((HX_("temperature(",74,f9,0c,c2) + this1) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toString,return )

Bool Temperature_Impl__obj::equals(Float this1,Float other){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","equals",0x1318dafd,"thx.color._Temperature.Temperature_Impl_.equals","thx/color/Temperature.hx",106,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 106)		return ::thx::Floats_obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Temperature_Impl__obj,equals,return )

Bool Temperature_Impl__obj::nearEquals(Float this1,Float other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","nearEquals",0x3f1f9505,"thx.color._Temperature.Temperature_Impl_.nearEquals","thx/color/Temperature.hx",109,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE( 109)		return ::thx::Floats_obj::nearEquals(this1,other,tolerance);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Temperature_Impl__obj,nearEquals,return )

Float Temperature_Impl__obj::get_kelvin(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","get_kelvin",0x689ab710,"thx.color._Temperature.Temperature_Impl_.get_kelvin","thx/color/Temperature.hx",112,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 112)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,get_kelvin,return )

::Array< Float > Temperature_Impl__obj::toLab(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toLab",0x59546e94,"thx.color._Temperature.Temperature_Impl_.toLab","thx/color/Temperature.hx",115,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 115)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toXyz(this1);
HXDLIN( 115)		return ::thx::color::_Xyz::Xyz_Impl__obj::toLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toLab,return )

::Array< Float > Temperature_Impl__obj::toLCh(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toLCh",0x59545478,"thx.color._Temperature.Temperature_Impl_.toLCh","thx/color/Temperature.hx",118,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 118)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toLab(this1);
HXDLIN( 118)		return ::thx::color::_Lab::Lab_Impl__obj::toLCh(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toLCh,return )

::Array< Float > Temperature_Impl__obj::toLuv(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toLuv",0x59548014,"thx.color._Temperature.Temperature_Impl_.toLuv","thx/color/Temperature.hx",121,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 121)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 121)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toLuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toLuv,return )

::Array< Float > Temperature_Impl__obj::toCmy(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toCmy",0x594da4d6,"thx.color._Temperature.Temperature_Impl_.toCmy","thx/color/Temperature.hx",124,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 124)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 124)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toCmy,return )

::Array< Float > Temperature_Impl__obj::toCmyk(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toCmyk",0xcaa296d5,"thx.color._Temperature.Temperature_Impl_.toCmyk","thx/color/Temperature.hx",127,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 127)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 127)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmyk(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toCmyk,return )

::Array< Float > Temperature_Impl__obj::toCubeHelix(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toCubeHelix",0x7b31e0d0,"thx.color._Temperature.Temperature_Impl_.toCubeHelix","thx/color/Temperature.hx",130,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 130)		HX_VARI_NAME( ::Array< Float >,this2,"this") = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 130)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCubeHelixWithGamma(this2,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toCubeHelix,return )

::Array< Float > Temperature_Impl__obj::toHsl(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toHsl",0x59517548,"thx.color._Temperature.Temperature_Impl_.toHsl","thx/color/Temperature.hx",133,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 133)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 133)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsl(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toHsl,return )

::Array< Float > Temperature_Impl__obj::toHsv(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toHsv",0x59517552,"thx.color._Temperature.Temperature_Impl_.toHsv","thx/color/Temperature.hx",136,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 136)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 136)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toHsv,return )

::Array< Float > Temperature_Impl__obj::toHunterLab(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toHunterLab",0x476331f4,"thx.color._Temperature.Temperature_Impl_.toHunterLab","thx/color/Temperature.hx",139,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 139)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toXyz(this1);
HXDLIN( 139)		return ::thx::color::_Xyz::Xyz_Impl__obj::toHunterLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toHunterLab,return )

Int Temperature_Impl__obj::toRgb(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toRgb",0x59590154,"thx.color._Temperature.Temperature_Impl_.toRgb","thx/color/Temperature.hx",142,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 142)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 142)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgb(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toRgb,return )

Int Temperature_Impl__obj::toRgba(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toRgba",0xd488288d,"thx.color._Temperature.Temperature_Impl_.toRgba","thx/color/Temperature.hx",145,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 145)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbxa(this1);
HXDLIN( 145)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toRgba,return )

::Array< Float > Temperature_Impl__obj::toRgbxTannerHelland(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toRgbxTannerHelland",0xcb89537c,"thx.color._Temperature.Temperature_Impl_.toRgbxTannerHelland","thx/color/Temperature.hx",147,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 148)		HX_VARI( Float,t) = ((Float)this1 / (Float)(int)100);
HXDLIN( 148)		HX_VAR( Float,r);
HXDLIN( 148)		HX_VAR( Float,g);
HXDLIN( 148)		HX_VAR( Float,b);
HXLINE( 152)		if ((t <= (int)66)) {
HXLINE( 153)			r = (int)1;
            		}
            		else {
HXLINE( 155)			r = (t - (int)60);
HXLINE( 156)			Float _hx_tmp = ::Math_obj::pow(r,((Float)-0.1332047592));
HXDLIN( 156)			r = ((Float)(((Float)329.698727446) * _hx_tmp) / (Float)(int)1);
HXLINE( 157)			Bool _hx_tmp1 = (r < (int)0);
HXDLIN( 157)			if (_hx_tmp1) {
HXLINE( 157)				r = (int)0;
            			}
HXLINE( 158)			Bool _hx_tmp2 = (r > (int)1);
HXDLIN( 158)			if (_hx_tmp2) {
HXLINE( 158)				r = (int)1;
            			}
            		}
HXLINE( 162)		if ((t <= ((Float)66.0))) {
HXLINE( 163)			g = t;
HXLINE( 164)			Float _hx_tmp3 = ::Math_obj::log(t);
HXDLIN( 164)			g = ((Float)((((Float)99.4708025861) * _hx_tmp3) - ((Float)161.1195681661)) / (Float)(int)1);
HXLINE( 165)			Bool _hx_tmp4 = (g < (int)0);
HXDLIN( 165)			if (_hx_tmp4) {
HXLINE( 165)				g = (int)0;
            			}
HXLINE( 166)			Bool _hx_tmp5 = (g > (int)1);
HXDLIN( 166)			if (_hx_tmp5) {
HXLINE( 166)				g = (int)1;
            			}
            		}
            		else {
HXLINE( 168)			g = (t - ((Float)60.0));
HXLINE( 169)			Float _hx_tmp6 = ::Math_obj::pow(g,((Float)-0.0755148492));
HXDLIN( 169)			g = ((Float)(((Float)288.1221695283) * _hx_tmp6) / (Float)(int)1);
HXLINE( 170)			Bool _hx_tmp7 = (g < (int)0);
HXDLIN( 170)			if (_hx_tmp7) {
HXLINE( 170)				g = (int)0;
            			}
HXLINE( 171)			Bool _hx_tmp8 = (g > (int)1);
HXDLIN( 171)			if (_hx_tmp8) {
HXLINE( 171)				g = (int)1;
            			}
            		}
HXLINE( 175)		if ((t >= ((Float)66.0))) {
HXLINE( 176)			b = (int)1;
            		}
            		else {
HXLINE( 177)			if ((t <= ((Float)19.0))) {
HXLINE( 178)				b = (int)0;
            			}
            			else {
HXLINE( 180)				b = (t - (int)10);
HXLINE( 181)				Float _hx_tmp9 = ::Math_obj::log(b);
HXDLIN( 181)				b = ((Float)((((Float)138.5177312231) * _hx_tmp9) - ((Float)305.0447927307)) / (Float)(int)1);
HXLINE( 182)				Bool _hx_tmp10 = (b < (int)0);
HXDLIN( 182)				if (_hx_tmp10) {
HXLINE( 182)					b = (int)0;
            				}
HXLINE( 183)				Bool _hx_tmp11 = (b > (int)1);
HXDLIN( 183)				if (_hx_tmp11) {
HXLINE( 183)					b = (int)1;
            				}
            			}
            		}
HXLINE( 185)		return ::Array_obj< Float >::__new(3)->init(0,r)->init(1,g)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toRgbxTannerHelland,return )

::Array< Float > Temperature_Impl__obj::toRgbx(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toRgbx",0xd48828a4,"thx.color._Temperature.Temperature_Impl_.toRgbx","thx/color/Temperature.hx",189,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 189)		return ::thx::color::_Temperature::Temperature_Impl__obj::temperatureToRgbx(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toRgbx,return )

::Array< Float > Temperature_Impl__obj::toRgbxa(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toRgbxa",0x229b673d,"thx.color._Temperature.Temperature_Impl_.toRgbxa","thx/color/Temperature.hx",192,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 192)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 192)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toRgbxa,return )

::Array< Float > Temperature_Impl__obj::toYuv(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toYuv",0x595e5d61,"thx.color._Temperature.Temperature_Impl_.toYuv","thx/color/Temperature.hx",195,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 195)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 195)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toYuv,return )

::Array< Float > Temperature_Impl__obj::toXyz(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toXyz",0x595d9ea0,"thx.color._Temperature.Temperature_Impl_.toXyz","thx/color/Temperature.hx",198,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 198)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 198)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toXyz(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toXyz,return )

::Array< Float > Temperature_Impl__obj::toYxy(Float this1){
            	HX_STACK_FRAME("thx.color._Temperature.Temperature_Impl_","toYxy",0x595e6001,"thx.color._Temperature.Temperature_Impl_.toYxy","thx/color/Temperature.hx",201,0x692e7041)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 201)		::Array< Float > _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::toRgbx(this1);
HXDLIN( 201)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYxy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Temperature_Impl__obj,toYxy,return )


Temperature_Impl__obj::Temperature_Impl__obj()
{
}

bool Temperature_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toLab") ) { outValue = toLab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLCh") ) { outValue = toLCh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLuv") ) { outValue = toLuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmy") ) { outValue = toCmy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsl") ) { outValue = toHsl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsv") ) { outValue = toHsv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYuv") ) { outValue = toYuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toXyz") ) { outValue = toXyz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYxy") ) { outValue = toYxy_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmyk") ) { outValue = toCmyk_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbx") ) { outValue = toRgbx_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_kelvin") ) { outValue = get_kelvin_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCubeHelix") ) { outValue = toCubeHelix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHunterLab") ) { outValue = toHunterLab_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"temperatureToRgbx") ) { outValue = temperatureToRgbx_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"toRgbxTannerHelland") ) { outValue = toRgbxTannerHelland_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Temperature_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Temperature_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Temperature_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Temperature_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Temperature_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Temperature_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Temperature_Impl__obj::__mClass;

static ::String Temperature_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("temperatureToRgbx","\x3a","\x83","\x62","\x48"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("get_kelvin","\x52","\x93","\xec","\x27"),
	HX_HCSTRING("toLab","\x92","\xf9","\x13","\x14"),
	HX_HCSTRING("toLCh","\x76","\xdf","\x13","\x14"),
	HX_HCSTRING("toLuv","\x12","\x0b","\x14","\x14"),
	HX_HCSTRING("toCmy","\xd4","\x2f","\x0d","\x14"),
	HX_HCSTRING("toCmyk","\x17","\xaa","\x7c","\x77"),
	HX_HCSTRING("toCubeHelix","\x4e","\xbe","\x80","\x23"),
	HX_HCSTRING("toHsl","\x46","\x00","\x11","\x14"),
	HX_HCSTRING("toHsv","\x50","\x00","\x11","\x14"),
	HX_HCSTRING("toHunterLab","\x72","\x0f","\xb2","\xef"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxTannerHelland","\xfa","\xde","\x4e","\xac"),
	HX_HCSTRING("toRgbx","\xe6","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("toYuv","\x5f","\xe8","\x1d","\x14"),
	HX_HCSTRING("toXyz","\x9e","\x29","\x1d","\x14"),
	HX_HCSTRING("toYxy","\xff","\xea","\x1d","\x14"),
	::String(null())
};

void Temperature_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Temperature.Temperature_Impl_","\xf0","\x47","\x87","\x11");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Temperature_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Temperature_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Temperature_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Temperature_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Temperature_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Temperature_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Temperature_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _Temperature
