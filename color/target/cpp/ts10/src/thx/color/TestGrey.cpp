// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_color_TestGrey
#include <thx/color/TestGrey.h>
#endif
#ifndef INCLUDED_thx_color__Grey_Grey_Impl_
#include <thx/color/_Grey/Grey_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestGrey_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.color.TestGrey","new",0xb76861f8,"thx.color.TestGrey.new","thx/color/TestGrey.hx",8,0xa8c360f6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   8)		this->x = i;
            	}

Dynamic TestGrey_obj::__CreateEmpty() { return new TestGrey_obj; }

hx::ObjectPtr< TestGrey_obj > TestGrey_obj::__new(Int i)
{
	hx::ObjectPtr< TestGrey_obj > _hx_result = new TestGrey_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestGrey_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestGrey_obj > _hx_result = new TestGrey_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestGrey_obj::testBasics(){
            	HX_STACK_FRAME("thx.color.TestGrey","testBasics",0x0a22c55f,"thx.color.TestGrey.testBasics","thx/color/TestGrey.hx",12,0xa8c360f6)
            	HX_STACK_THIS(this)
HXLINE(  12)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  12)		HX_VARI( Int,_g) = this->x;
HXDLIN(  12)		while((_g1 < _g)){
HXLINE(  12)			++_g1;
HXLINE(  14)			::utest::Assert_obj::equals(((Float)0.2),((Float)0.2),null(),hx::SourceInfo(HX_("TestGrey.hx",6d,1a,64,68),14,HX_("thx.color.TestGrey",06,46,aa,7a),HX_("testBasics",f7,73,1f,6e)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGrey_obj,testBasics,(void))

void TestGrey_obj::testStrings(){
            	HX_STACK_FRAME("thx.color.TestGrey","testStrings",0x9ca065e8,"thx.color.TestGrey.testStrings","thx/color/TestGrey.hx",18,0xa8c360f6)
            	HX_STACK_THIS(this)
HXLINE(  18)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  18)		HX_VARI( Int,_g) = this->x;
HXDLIN(  18)		while((_g1 < _g)){
HXLINE(  18)			++_g1;
HXLINE(  20)			::utest::Assert_obj::equals(HX_("grey(50%)",e8,a3,f2,4b),::thx::color::_Grey::Grey_Impl__obj::toString(((Float)0.5)),null(),hx::SourceInfo(HX_("TestGrey.hx",6d,1a,64,68),20,HX_("thx.color.TestGrey",06,46,aa,7a),HX_("testStrings",50,7c,bc,b5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGrey_obj,testStrings,(void))

void TestGrey_obj::testFromString(){
            	HX_STACK_FRAME("thx.color.TestGrey","testFromString",0xa4937a35,"thx.color.TestGrey.testFromString","thx/color/TestGrey.hx",24,0xa8c360f6)
            	HX_STACK_THIS(this)
HXLINE(  24)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  24)		HX_VARI( Int,_g) = this->x;
HXDLIN(  24)		while((_g1 < _g)){
HXLINE(  24)			++_g1;
HXLINE(  25)			Bool _hx_tmp = ::thx::color::_Grey::Grey_Impl__obj::equals(((Float)0.2),::thx::color::_Grey::Grey_Impl__obj::fromString(HX_("grey(20%)",0b,00,f7,49)));
HXDLIN(  25)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestGrey.hx",6d,1a,64,68),25,HX_("thx.color.TestGrey",06,46,aa,7a),HX_("testFromString",cd,54,67,f4)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestGrey_obj,testFromString,(void))


TestGrey_obj::TestGrey_obj()
{
}

hx::Val TestGrey_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testStrings") ) { return hx::Val( testStrings_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromString") ) { return hx::Val( testFromString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestGrey_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestGrey_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestGrey_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestGrey_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestGrey_obj_sStaticStorageInfo = 0;
#endif

static ::String TestGrey_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testStrings","\x50","\x7c","\xbc","\xb5"),
	HX_HCSTRING("testFromString","\xcd","\x54","\x67","\xf4"),
	::String(null()) };

static void TestGrey_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestGrey_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestGrey_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestGrey_obj::__mClass,"__mClass");
};

#endif

hx::Class TestGrey_obj::__mClass;

void TestGrey_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestGrey","\x06","\x46","\xaa","\x7a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestGrey_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestGrey_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestGrey_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestGrey_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestGrey_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestGrey_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
