// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_color_TestTemperature
#include <thx/color/TestTemperature.h>
#endif
#ifndef INCLUDED_thx_color__Temperature_Temperature_Impl_
#include <thx/color/_Temperature/Temperature_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestTemperature_obj::__construct(){
            	HX_STACK_FRAME("thx.color.TestTemperature","new",0x2dbfcfdf,"thx.color.TestTemperature.new","thx/color/TestTemperature.hx",6,0xf5075fb3)
            	HX_STACK_THIS(this)
            	}

Dynamic TestTemperature_obj::__CreateEmpty() { return new TestTemperature_obj; }

hx::ObjectPtr< TestTemperature_obj > TestTemperature_obj::__new()
{
	hx::ObjectPtr< TestTemperature_obj > _hx_result = new TestTemperature_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestTemperature_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestTemperature_obj > _hx_result = new TestTemperature_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestTemperature_obj::testBasics(){
            	HX_STACK_FRAME("thx.color.TestTemperature","testBasics",0x33c7f258,"thx.color.TestTemperature.testBasics","thx/color/TestTemperature.hx",8,0xf5075fb3)
            	HX_STACK_THIS(this)
HXLINE(   9)		HX_VARI_NAME( Float,this1,"this") = (int)5000;
HXLINE(  10)		::utest::Assert_obj::equals((int)5000,this1,null(),hx::SourceInfo(HX_("TestTemperature.hx",1c,d3,52,74),10,HX_("thx.color.TestTemperature",6d,f4,cc,30),HX_("testBasics",f7,73,1f,6e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTemperature_obj,testBasics,(void))

void TestTemperature_obj::testStrings(){
            	HX_STACK_FRAME("thx.color.TestTemperature","testStrings",0xe38292cf,"thx.color.TestTemperature.testStrings","thx/color/TestTemperature.hx",13,0xf5075fb3)
            	HX_STACK_THIS(this)
HXLINE(  14)		HX_VARI_NAME( Float,this1,"this") = (int)5000;
HXLINE(  15)		::utest::Assert_obj::equals(HX_("temperature(5000)",ba,d4,cd,34),::thx::color::_Temperature::Temperature_Impl__obj::toString(this1),null(),hx::SourceInfo(HX_("TestTemperature.hx",1c,d3,52,74),15,HX_("thx.color.TestTemperature",6d,f4,cc,30),HX_("testStrings",50,7c,bc,b5)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTemperature_obj,testStrings,(void))

void TestTemperature_obj::testFromString(){
            	HX_STACK_FRAME("thx.color.TestTemperature","testFromString",0x050517ae,"thx.color.TestTemperature.testFromString","thx/color/TestTemperature.hx",19,0xf5075fb3)
            	HX_STACK_THIS(this)
HXLINE(  19)		HX_VARI_NAME( Float,this1,"this") = (int)5000;
HXDLIN(  19)		Bool _hx_tmp = ::thx::color::_Temperature::Temperature_Impl__obj::equals(this1,::thx::color::_Temperature::Temperature_Impl__obj::fromString(HX_("temperature(5000)",ba,d4,cd,34)));
HXDLIN(  19)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestTemperature.hx",1c,d3,52,74),19,HX_("thx.color.TestTemperature",6d,f4,cc,30),HX_("testFromString",cd,54,67,f4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestTemperature_obj,testFromString,(void))


TestTemperature_obj::TestTemperature_obj()
{
}

hx::Val TestTemperature_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testStrings") ) { return hx::Val( testStrings_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromString") ) { return hx::Val( testFromString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestTemperature_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestTemperature_obj_sStaticStorageInfo = 0;
#endif

static ::String TestTemperature_obj_sMemberFields[] = {
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testStrings","\x50","\x7c","\xbc","\xb5"),
	HX_HCSTRING("testFromString","\xcd","\x54","\x67","\xf4"),
	::String(null()) };

static void TestTemperature_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestTemperature_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestTemperature_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestTemperature_obj::__mClass,"__mClass");
};

#endif

hx::Class TestTemperature_obj::__mClass;

void TestTemperature_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestTemperature","\x6d","\xf4","\xcc","\x30");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestTemperature_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestTemperature_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestTemperature_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestTemperature_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestTemperature_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestTemperature_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
