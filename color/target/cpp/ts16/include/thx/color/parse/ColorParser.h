// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_color_parse_ColorParser
#define INCLUDED_thx_color_parse_ColorParser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS3(thx,color,parse,ChannelInfo)
HX_DECLARE_CLASS3(thx,color,parse,ColorInfo)
HX_DECLARE_CLASS3(thx,color,parse,ColorParser)

namespace thx{
namespace color{
namespace parse{


class HXCPP_CLASS_ATTRIBUTES ColorParser_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ColorParser_obj OBJ_;
		ColorParser_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="thx.color.parse.ColorParser")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"thx.color.parse.ColorParser"); }
		static hx::ObjectPtr< ColorParser_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ColorParser_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("ColorParser","\x82","\xc6","\xe3","\x8b"); }

		static void __boot();
		static  ::thx::color::parse::ColorParser parser;
		static  ::thx::color::parse::ColorInfo parseColor(::String s);
		static ::Dynamic parseColor_dyn();

		static  ::thx::color::parse::ColorInfo parseHex(::String s);
		static ::Dynamic parseHex_dyn();

		static ::hx::EnumBase parseChannel(::String s);
		static ::Dynamic parseChannel_dyn();

		static  ::EReg isPureHex;
		static ::Array< Float > getFloatChannels(::Array< ::Dynamic> channels,Int length,Bool useInt8);
		static ::Dynamic getFloatChannels_dyn();

		static ::Array< Int > getInt8Channels(::Array< ::Dynamic> channels,Int length);
		static ::Dynamic getInt8Channels_dyn();

		static Float getFloatChannel(::hx::EnumBase channel,hx::Null< Bool >  useInt8);
		static ::Dynamic getFloatChannel_dyn();

		static Int getInt8Channel(::hx::EnumBase channel);
		static ::Dynamic getInt8Channel_dyn();

		 ::EReg pattern_color;
		 ::EReg pattern_channel;
		 ::thx::color::parse::ColorInfo processHex(::String s);
		::Dynamic processHex_dyn();

		 ::thx::color::parse::ColorInfo processColor(::String s);
		::Dynamic processColor_dyn();

		::hx::EnumBase processChannel(::String s);
		::Dynamic processChannel_dyn();

};

} // end namespace thx
} // end namespace color
} // end namespace parse

#endif /* INCLUDED_thx_color_parse_ColorParser */ 
