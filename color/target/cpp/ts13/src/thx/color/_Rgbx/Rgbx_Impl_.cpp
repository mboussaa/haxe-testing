// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_ArrayInts
#include <thx/ArrayInts.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgb_Rgb_Impl_
#include <thx/color/_Rgb/Rgb_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Temperature_Temperature_Impl_
#include <thx/color/_Temperature/Temperature_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _Rgbx{

void Rgbx_Impl__obj::__construct() { }

Dynamic Rgbx_Impl__obj::__CreateEmpty() { return new Rgbx_Impl__obj; }

hx::ObjectPtr< Rgbx_Impl__obj > Rgbx_Impl__obj::__new()
{
	hx::ObjectPtr< Rgbx_Impl__obj > _hx_result = new Rgbx_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Rgbx_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rgbx_Impl__obj > _hx_result = new Rgbx_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Rgbx_Impl__obj::create(Float red,Float green,Float blue){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","create",0x470caf26,"thx.color._Rgbx.Rgbx_Impl_.create","thx/color/Rgbx.hx",24,0xbc80f8bc)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
HXLINE(  24)		return ::Array_obj< Float >::__new(3)->init(0,red)->init(1,green)->init(2,blue);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Rgbx_Impl__obj,create,return )

::Array< Float > Rgbx_Impl__obj::fromFloats(::Array< Float > arr){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","fromFloats",0x1aafcd8b,"thx.color._Rgbx.Rgbx_Impl_.fromFloats","thx/color/Rgbx.hx",26,0xbc80f8bc)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  27)		::thx::ArrayFloats_obj::resize(arr,(int)3,null());
HXLINE(  28)		return ::Array_obj< Float >::__new(3)->init(0,arr->__get((int)0))->init(1,arr->__get((int)1))->init(2,arr->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,fromFloats,return )

::Array< Float > Rgbx_Impl__obj::fromInts(::Array< Int > arr){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","fromInts",0x1e8639d8,"thx.color._Rgbx.Rgbx_Impl_.fromInts","thx/color/Rgbx.hx",31,0xbc80f8bc)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  32)		::thx::ArrayInts_obj::resize(arr,(int)3,null());
HXLINE(  33)		return ::Array_obj< Float >::__new(3)->init(0,((Float)arr->__get((int)0) / (Float)((Float)255.0)))->init(1,((Float)arr->__get((int)1) / (Float)((Float)255.0)))->init(2,((Float)arr->__get((int)2) / (Float)((Float)255.0)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,fromInts,return )

::Array< Float > Rgbx_Impl__obj::fromInt(Int value){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","fromInt",0x2a9cba3b,"thx.color._Rgbx.Rgbx_Impl_.fromInt","thx/color/Rgbx.hx",36,0xbc80f8bc)
            	HX_STACK_ARG(value,"value")
HXLINE(  37)		HX_VARI( Int,rgb) = value;
HXLINE(  38)		return ::Array_obj< Float >::__new(3)->init(0,((Float)::thx::color::_Rgb::Rgb_Impl__obj::get_red(rgb) / (Float)(int)255))->init(1,((Float)::thx::color::_Rgb::Rgb_Impl__obj::get_green(rgb) / (Float)(int)255))->init(2,((Float)::thx::color::_Rgb::Rgb_Impl__obj::get_blue(rgb) / (Float)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,fromInt,return )

::Array< Float > Rgbx_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","fromString",0xea89d305,"thx.color._Rgbx.Rgbx_Impl_.fromString","thx/color/Rgbx.hx",41,0xbc80f8bc)
            	HX_STACK_ARG(color,"color")
HXLINE(  42)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseHex(color);
HXLINE(  43)		if (hx::IsNull( info )) {
HXLINE(  44)			info = ::thx::color::parse::ColorParser_obj::parseColor(color);
            		}
HXLINE(  45)		if (hx::IsNull( info )) {
HXLINE(  46)			return null();
            		}
HXLINE(  48)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  48)			if ((info->name == HX_("rgb",0d,db,56,00))) {
HXLINE(  50)				::Array< Float > _hx_tmp = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,true);
HXLINE(  48)				return ::thx::color::_Rgbx::Rgbx_Impl__obj::fromFloats(_hx_tmp);
            			}
            			else {
HXLINE(  48)				return null();
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  48)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  48)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,fromString,return )

::Array< Float > Rgbx_Impl__obj::_new(::Array< Float > channels){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","_new",0x48c71f0b,"thx.color._Rgbx.Rgbx_Impl_._new","thx/color/Rgbx.hx",56,0xbc80f8bc)
            	HX_STACK_ARG(channels,"channels")
HXLINE(  56)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,_new,return )

::Array< Float > Rgbx_Impl__obj::darker(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","darker",0xec377e8d,"thx.color._Rgbx.Rgbx_Impl_.darker","thx/color/Rgbx.hx",68,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  68)		return ::Array_obj< Float >::__new(3)->init(0,::thx::Floats_obj::interpolate(t,this1->__get((int)0),(int)0))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),(int)0))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),(int)0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,darker,return )

::Array< Float > Rgbx_Impl__obj::lighter(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","lighter",0xec852759,"thx.color._Rgbx.Rgbx_Impl_.lighter","thx/color/Rgbx.hx",75,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  75)		return ::Array_obj< Float >::__new(3)->init(0,::thx::Floats_obj::interpolate(t,this1->__get((int)0),(int)1))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),(int)1))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),(int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,lighter,return )

::Array< Float > Rgbx_Impl__obj::interpolate(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","interpolate",0xdc0db457,"thx.color._Rgbx.Rgbx_Impl_.interpolate","thx/color/Rgbx.hx",82,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  82)		return ::Array_obj< Float >::__new(3)->init(0,::thx::Floats_obj::interpolate(t,this1->__get((int)0),other->__get((int)0)))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Rgbx_Impl__obj,interpolate,return )

::Array< Float > Rgbx_Impl__obj::min(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","min",0xe0396b28,"thx.color._Rgbx.Rgbx_Impl_.min","thx/color/Rgbx.hx",89,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  89)		HX_VARI( Float,red) = ::Math_obj::min(this1->__get((int)0),other->__get((int)0));
HXDLIN(  89)		HX_VARI( Float,green) = ::Math_obj::min(this1->__get((int)1),other->__get((int)1));
HXDLIN(  89)		HX_VARI( Float,blue) = ::Math_obj::min(this1->__get((int)2),other->__get((int)2));
HXDLIN(  89)		return ::Array_obj< Float >::__new(3)->init(0,red)->init(1,green)->init(2,blue);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,min,return )

::Array< Float > Rgbx_Impl__obj::max(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","max",0xe039643a,"thx.color._Rgbx.Rgbx_Impl_.max","thx/color/Rgbx.hx",92,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  92)		HX_VARI( Float,red) = ::Math_obj::max(this1->__get((int)0),other->__get((int)0));
HXDLIN(  92)		HX_VARI( Float,green) = ::Math_obj::max(this1->__get((int)1),other->__get((int)1));
HXDLIN(  92)		HX_VARI( Float,blue) = ::Math_obj::max(this1->__get((int)2),other->__get((int)2));
HXDLIN(  92)		return ::Array_obj< Float >::__new(3)->init(0,red)->init(1,green)->init(2,blue);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,max,return )

::Array< Float > Rgbx_Impl__obj::normalize(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","normalize",0xcfe3e5a3,"thx.color._Rgbx.Rgbx_Impl_.normalize","thx/color/Rgbx.hx",95,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  95)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXLINE(  96)		HX_VARI( Float,v) = this1->__get((int)0);
HXDLIN(  96)		Float _hx_tmp;
HXDLIN(  96)		if ((v < (int)0)) {
HXLINE(  96)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  96)			if ((v > (int)1)) {
HXLINE(  96)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(  96)				_hx_tmp = v;
            			}
            		}
HXLINE(  97)		HX_VARI_NAME( Float,v1,"v") = this1->__get((int)1);
HXDLIN(  97)		Float _hx_tmp1;
HXDLIN(  97)		if ((v1 < (int)0)) {
HXLINE(  97)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE(  97)			if ((v1 > (int)1)) {
HXLINE(  97)				_hx_tmp1 = (int)1;
            			}
            			else {
HXLINE(  97)				_hx_tmp1 = v1;
            			}
            		}
HXLINE(  98)		HX_VARI_NAME( Float,v2,"v") = this1->__get((int)2);
HXDLIN(  98)		Float _hx_tmp2;
HXDLIN(  98)		if ((v2 < (int)0)) {
HXLINE(  98)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE(  98)			if ((v2 > (int)1)) {
HXLINE(  98)				_hx_tmp2 = (int)1;
            			}
            			else {
HXLINE(  98)				_hx_tmp2 = v2;
            			}
            		}
HXLINE(  95)		this2 = ::Array_obj< Float >::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2);
HXDLIN(  95)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,normalize,return )

::Array< Float > Rgbx_Impl__obj::roundTo(::Array< Float > this1,Int decimals){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","roundTo",0x5fb14dff,"thx.color._Rgbx.Rgbx_Impl_.roundTo","thx/color/Rgbx.hx",102,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE( 102)		HX_VARI( Float,red) = ::thx::Floats_obj::roundTo(this1->__get((int)0),decimals);
HXDLIN( 102)		HX_VARI( Float,green) = ::thx::Floats_obj::roundTo(this1->__get((int)1),decimals);
HXDLIN( 102)		HX_VARI( Float,blue) = ::thx::Floats_obj::roundTo(this1->__get((int)2),decimals);
HXDLIN( 102)		return ::Array_obj< Float >::__new(3)->init(0,red)->init(1,green)->init(2,blue);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,roundTo,return )

::String Rgbx_Impl__obj::toCss3(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toCss3",0x427e7a55,"thx.color._Rgbx.Rgbx_Impl_.toCss3","thx/color/Rgbx.hx",105,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 105)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toString(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toCss3,return )

::String Rgbx_Impl__obj::toString(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toString",0xb36df756,"thx.color._Rgbx.Rgbx_Impl_.toString","thx/color/Rgbx.hx",108,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 108)		return ((((((HX_("rgb(",7b,d0,a8,4b) + (this1->__get((int)0) * (int)100)) + HX_("%,",67,20,00,00)) + (this1->__get((int)1) * (int)100)) + HX_("%,",67,20,00,00)) + (this1->__get((int)2) * (int)100)) + HX_("%)",64,20,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toString,return )

::String Rgbx_Impl__obj::toHex(::Array< Float > this1,::String __o_prefix){
::String prefix = __o_prefix.Default(HX_HCSTRING("#","\x23","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toHex",0x7d715f36,"thx.color._Rgbx.Rgbx_Impl_.toHex","thx/color/Rgbx.hx",111,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(prefix,"prefix")
HXLINE( 111)		::String _hx_tmp = (HX_("",00,00,00,00) + prefix);
HXDLIN( 111)		Int _hx_tmp1 = ::thx::color::_Rgbx::Rgbx_Impl__obj::get_red(this1);
HXDLIN( 111)		::String _hx_tmp2 = ::StringTools_obj::hex(_hx_tmp1,(int)2);
HXDLIN( 111)		::String _hx_tmp3 = (_hx_tmp + _hx_tmp2);
HXDLIN( 111)		Int _hx_tmp4 = ::thx::color::_Rgbx::Rgbx_Impl__obj::get_green(this1);
HXDLIN( 111)		::String _hx_tmp5 = ::StringTools_obj::hex(_hx_tmp4,(int)2);
HXDLIN( 111)		::String _hx_tmp6 = (_hx_tmp3 + _hx_tmp5);
HXDLIN( 111)		Int _hx_tmp7 = ::thx::color::_Rgbx::Rgbx_Impl__obj::get_blue(this1);
HXDLIN( 111)		::String _hx_tmp8 = ::StringTools_obj::hex(_hx_tmp7,(int)2);
HXDLIN( 111)		return (_hx_tmp6 + _hx_tmp8);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,toHex,return )

Bool Rgbx_Impl__obj::equals(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","equals",0x8af03669,"thx.color._Rgbx.Rgbx_Impl_.equals","thx/color/Rgbx.hx",114,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 114)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,equals,return )

Bool Rgbx_Impl__obj::nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","nearEquals",0x94871671,"thx.color._Rgbx.Rgbx_Impl_.nearEquals","thx/color/Rgbx.hx",117,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE( 117)		Bool _hx_tmp;
HXDLIN( 117)		Bool _hx_tmp1 = ::thx::Floats_obj::nearEquals(this1->__get((int)0),other->__get((int)0),tolerance);
HXDLIN( 117)		if (_hx_tmp1) {
HXLINE( 117)			_hx_tmp = ::thx::Floats_obj::nearEquals(this1->__get((int)1),other->__get((int)1),tolerance);
            		}
            		else {
HXLINE( 117)			_hx_tmp = false;
            		}
HXDLIN( 117)		if (_hx_tmp) {
HXLINE( 117)			return ::thx::Floats_obj::nearEquals(this1->__get((int)2),other->__get((int)2),tolerance);
            		}
            		else {
HXLINE( 117)			return false;
            		}
HXDLIN( 117)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Rgbx_Impl__obj,nearEquals,return )

::Array< Float > Rgbx_Impl__obj::withAlpha(::Array< Float > this1,Float alpha){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","withAlpha",0xc9c6b98e,"thx.color._Rgbx.Rgbx_Impl_.withAlpha","thx/color/Rgbx.hx",120,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 120)		HX_VARI( ::Array< Float >,channels) = this1->concat(::Array_obj< Float >::__new(1)->init(0,alpha));
HXDLIN( 120)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,withAlpha,return )

::Array< Float > Rgbx_Impl__obj::withRed(::Array< Float > this1,Int newred){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","withRed",0x320cff81,"thx.color._Rgbx.Rgbx_Impl_.withRed","thx/color/Rgbx.hx",123,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newred,"newred")
HXLINE( 123)		Int _hx_tmp = ::thx::color::_Rgbx::Rgbx_Impl__obj::get_green(this1);
HXDLIN( 123)		Int _hx_tmp1 = ::thx::color::_Rgbx::Rgbx_Impl__obj::get_blue(this1);
HXDLIN( 123)		return ::Array_obj< Float >::__new(3)->init(0,newred)->init(1,_hx_tmp)->init(2,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,withRed,return )

::Array< Float > Rgbx_Impl__obj::withGreen(::Array< Float > this1,Int newgreen){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","withGreen",0x421d20f3,"thx.color._Rgbx.Rgbx_Impl_.withGreen","thx/color/Rgbx.hx",126,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newgreen,"newgreen")
HXLINE( 126)		Int _hx_tmp = ::thx::color::_Rgbx::Rgbx_Impl__obj::get_red(this1);
HXDLIN( 126)		Int _hx_tmp1 = ::thx::color::_Rgbx::Rgbx_Impl__obj::get_blue(this1);
HXDLIN( 126)		return ::Array_obj< Float >::__new(3)->init(0,_hx_tmp)->init(1,newgreen)->init(2,_hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,withGreen,return )

::Array< Float > Rgbx_Impl__obj::withBlue(::Array< Float > this1,Int newblue){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","withBlue",0x8ec4866a,"thx.color._Rgbx.Rgbx_Impl_.withBlue","thx/color/Rgbx.hx",129,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newblue,"newblue")
HXLINE( 129)		Int _hx_tmp = ::thx::color::_Rgbx::Rgbx_Impl__obj::get_red(this1);
HXDLIN( 129)		Int _hx_tmp1 = ::thx::color::_Rgbx::Rgbx_Impl__obj::get_green(this1);
HXDLIN( 129)		return ::Array_obj< Float >::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,newblue);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,withBlue,return )

::Array< Float > Rgbx_Impl__obj::toLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toLab",0x7d7464a8,"thx.color._Rgbx.Rgbx_Impl_.toLab","thx/color/Rgbx.hx",132,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 132)		::Array< Float > _hx_tmp = ::thx::color::_Rgbx::Rgbx_Impl__obj::toXyz(this1);
HXDLIN( 132)		return ::thx::color::_Xyz::Xyz_Impl__obj::toLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toLab,return )

::Array< Float > Rgbx_Impl__obj::toLCh(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toLCh",0x7d744a8c,"thx.color._Rgbx.Rgbx_Impl_.toLCh","thx/color/Rgbx.hx",135,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 135)		::Array< Float > _hx_tmp = ::thx::color::_Rgbx::Rgbx_Impl__obj::toLab(this1);
HXDLIN( 135)		return ::thx::color::_Lab::Lab_Impl__obj::toLCh(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toLCh,return )

::Array< Float > Rgbx_Impl__obj::toLuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toLuv",0x7d747628,"thx.color._Rgbx.Rgbx_Impl_.toLuv","thx/color/Rgbx.hx",138,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 138)		::Array< Float > _hx_tmp = ::thx::color::_Rgbx::Rgbx_Impl__obj::toXyz(this1);
HXDLIN( 138)		return ::thx::color::_Xyz::Xyz_Impl__obj::toLuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toLuv,return )

::Array< Float > Rgbx_Impl__obj::toCmy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toCmy",0x7d6d9aea,"thx.color._Rgbx.Rgbx_Impl_.toCmy","thx/color/Rgbx.hx",141,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 141)		return ::Array_obj< Float >::__new(3)->init(0,((int)1 - this1->__get((int)0)))->init(1,((int)1 - this1->__get((int)1)))->init(2,((int)1 - this1->__get((int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toCmy,return )

::Array< Float > Rgbx_Impl__obj::toCmyk(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toCmyk",0x4279f241,"thx.color._Rgbx.Rgbx_Impl_.toCmyk","thx/color/Rgbx.hx",147,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 148)		HX_VARI( Float,c) = ((Float)0.0);
HXDLIN( 148)		HX_VARI( Float,y) = ((Float)0.0);
HXDLIN( 148)		HX_VARI( Float,m) = ((Float)0.0);
HXDLIN( 148)		HX_VAR( Float,k);
HXLINE( 149)		if ((((this1->__get((int)0) + this1->__get((int)1)) + this1->__get((int)2)) == (int)0)) {
HXLINE( 150)			k = ((Float)1.0);
            		}
            		else {
HXLINE( 152)			Float _hx_tmp = ::Math_obj::max(this1->__get((int)0),this1->__get((int)1));
HXDLIN( 152)			Float _hx_tmp1 = ::Math_obj::max(_hx_tmp,this1->__get((int)2));
HXDLIN( 152)			k = ((int)1 - _hx_tmp1);
HXLINE( 153)			c = ((Float)(((int)1 - this1->__get((int)0)) - k) / (Float)((int)1 - k));
HXLINE( 154)			m = ((Float)(((int)1 - this1->__get((int)1)) - k) / (Float)((int)1 - k));
HXLINE( 155)			y = ((Float)(((int)1 - this1->__get((int)2)) - k) / (Float)((int)1 - k));
            		}
HXLINE( 157)		return ::Array_obj< Float >::__new(4)->init(0,c)->init(1,m)->init(2,y)->init(3,k);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toCmyk,return )

::Array< Float > Rgbx_Impl__obj::toCubeHelix(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toCubeHelix",0xe05b9de4,"thx.color._Rgbx.Rgbx_Impl_.toCubeHelix","thx/color/Rgbx.hx",161,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 161)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCubeHelixWithGamma(this1,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toCubeHelix,return )

::Array< Float > Rgbx_Impl__obj::toCubeHelixWithGamma(::Array< Float > this1,Float gamma){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toCubeHelixWithGamma",0x5e9250bd,"thx.color._Rgbx.Rgbx_Impl_.toCubeHelixWithGamma","thx/color/Rgbx.hx",163,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(gamma,"gamma")
HXLINE( 164)		HX_VARI( Float,l) = ((Float)(((((Float)-0.655763666799999867) * this1->__get((int)2)) + (((Float)-1.7884503806) * this1->__get((int)0))) - (((Float)3.5172982438) * this1->__get((int)1))) / (Float)((Float)-5.9615122912));
HXDLIN( 164)		HX_VARI( Float,bl) = (this1->__get((int)2) - l);
HXDLIN( 164)		HX_VARI( Float,k) = ((Float)((((Float)1.97294) * (this1->__get((int)1) - l)) - (((Float)-0.29227) * bl)) / (Float)((Float)-0.90649));
HXDLIN( 164)		HX_VARI( Float,lgamma) = ::Math_obj::pow(l,gamma);
HXDLIN( 164)		HX_VAR( Float,s);
HXLINE( 169)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 169)			Float _hx_tmp = ::Math_obj::sqrt(((k * k) + (bl * bl)));
HXLINE( 164)			s = ((Float)_hx_tmp / (Float)((((Float)1.97294) * lgamma) * ((int)1 - lgamma)));
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 164)				s = ((Float)0.0);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 164)		HX_VAR( Float,h);
HXLINE( 170)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 170)			if ((s != (int)0)) {
HXLINE( 170)				Float _hx_tmp1 = ::Math_obj::atan2(k,bl);
HXLINE( 164)				h = ((((Float)_hx_tmp1 / (Float)::Math_obj::PI) * (int)180) - (int)120);
            			}
            			else {
HXLINE( 164)				h = ::Math_obj::NaN;
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e1 = _hx_e;
HXLINE( 164)				h = ((Float)0.0);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 171)		Bool _hx_tmp2 = ::Math_obj::isNaN(s);
HXDLIN( 171)		if (_hx_tmp2) {
HXLINE( 171)			s = (int)0;
            		}
HXLINE( 172)		Bool _hx_tmp3 = ::Math_obj::isNaN(h);
HXDLIN( 172)		if (_hx_tmp3) {
HXLINE( 172)			h = (int)0;
            		}
HXLINE( 173)		Bool _hx_tmp4 = (h < (int)0);
HXDLIN( 173)		if (_hx_tmp4) {
HXLINE( 173)			hx::AddEq(h,(int)360);
            		}
HXLINE( 174)		return ::Array_obj< Float >::__new(4)->init(0,h)->init(1,s)->init(2,l)->init(3,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbx_Impl__obj,toCubeHelixWithGamma,return )

Float Rgbx_Impl__obj::toGrey(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toGrey",0x452286a4,"thx.color._Rgbx.Rgbx_Impl_.toGrey","thx/color/Rgbx.hx",178,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 178)		return (((this1->__get((int)0) * ((Float).2126)) + (this1->__get((int)1) * ((Float).7152))) + (this1->__get((int)2) * ((Float).0722)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toGrey,return )

Float Rgbx_Impl__obj::toPerceivedGrey(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toPerceivedGrey",0x5238eee5,"thx.color._Rgbx.Rgbx_Impl_.toPerceivedGrey","thx/color/Rgbx.hx",181,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 181)		return (((this1->__get((int)0) * ((Float).299)) + (this1->__get((int)1) * ((Float).587))) + (this1->__get((int)2) * ((Float).114)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toPerceivedGrey,return )

Float Rgbx_Impl__obj::toPerceivedAccurateGrey(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toPerceivedAccurateGrey",0x7a26aff9,"thx.color._Rgbx.Rgbx_Impl_.toPerceivedAccurateGrey","thx/color/Rgbx.hx",184,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 184)		Float _hx_tmp = ::Math_obj::pow(this1->__get((int)0),(int)2);
HXDLIN( 184)		Float _hx_tmp1 = (_hx_tmp * ((Float).241));
HXDLIN( 184)		Float _hx_tmp2 = ::Math_obj::pow(this1->__get((int)1),(int)2);
HXDLIN( 184)		Float _hx_tmp3 = (_hx_tmp1 + (_hx_tmp2 * ((Float).691)));
HXDLIN( 184)		Float _hx_tmp4 = ::Math_obj::pow(this1->__get((int)2),(int)2);
HXDLIN( 184)		return (_hx_tmp3 + (_hx_tmp4 * ((Float).068)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toPerceivedAccurateGrey,return )

::Array< Float > Rgbx_Impl__obj::toHsl(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toHsl",0x7d716b5c,"thx.color._Rgbx.Rgbx_Impl_.toHsl","thx/color/Rgbx.hx",186,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 187)		Float _hx_tmp = ::Math_obj::min(this1->__get((int)0),this1->__get((int)1));
HXDLIN( 187)		HX_VARI( Float,min) = ::Math_obj::min(_hx_tmp,this1->__get((int)2));
HXLINE( 188)		Float _hx_tmp1 = ::Math_obj::max(this1->__get((int)0),this1->__get((int)1));
HXLINE( 187)		HX_VARI( Float,max) = ::Math_obj::max(_hx_tmp1,this1->__get((int)2));
HXDLIN( 187)		HX_VARI( Float,delta) = (max - min);
HXDLIN( 187)		HX_VAR( Float,h);
HXDLIN( 187)		HX_VAR( Float,s);
HXDLIN( 187)		HX_VARI( Float,l) = ((Float)(max + min) / (Float)(int)2);
HXLINE( 196)		if ((delta == ((Float)0.0))) {
HXLINE( 198)			h = ((Float)0.0);
HXDLIN( 198)			s = ((Float)0.0);
            		}
            		else {
HXLINE( 200)			if ((l < ((Float)0.5))) {
HXLINE( 200)				s = ((Float)delta / (Float)(max + min));
            			}
            			else {
HXLINE( 200)				s = ((Float)delta / (Float)(((int)2 - max) - min));
            			}
HXLINE( 201)			if ((this1->__get((int)0) == max)) {
HXLINE( 202)				Float _hx_tmp2 = ((Float)(this1->__get((int)1) - this1->__get((int)2)) / (Float)delta);
HXDLIN( 202)				Int _hx_tmp3;
HXDLIN( 202)				Float _hx_tmp4 = this1->__get((int)1);
HXDLIN( 202)				Int _hx_tmp5 = ::thx::color::_Rgbx::Rgbx_Impl__obj::get_blue(this1);
HXDLIN( 202)				if ((_hx_tmp4 < _hx_tmp5)) {
HXLINE( 202)					_hx_tmp3 = (int)6;
            				}
            				else {
HXLINE( 202)					_hx_tmp3 = (int)0;
            				}
HXDLIN( 202)				h = (_hx_tmp2 + _hx_tmp3);
            			}
            			else {
HXLINE( 203)				if ((this1->__get((int)1) == max)) {
HXLINE( 204)					h = (((Float)(this1->__get((int)2) - this1->__get((int)0)) / (Float)delta) + (int)2);
            				}
            				else {
HXLINE( 206)					h = (((Float)(this1->__get((int)0) - this1->__get((int)1)) / (Float)delta) + (int)4);
            				}
            			}
HXLINE( 207)			hx::MultEq(h,(int)60);
            		}
HXLINE( 209)		return ::Array_obj< Float >::__new(3)->init(0,h)->init(1,s)->init(2,l);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toHsl,return )

::Array< Float > Rgbx_Impl__obj::toHsv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toHsv",0x7d716b66,"thx.color._Rgbx.Rgbx_Impl_.toHsv","thx/color/Rgbx.hx",212,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 213)		Float _hx_tmp = ::Math_obj::min(this1->__get((int)0),this1->__get((int)1));
HXDLIN( 213)		HX_VARI( Float,min) = ::Math_obj::min(_hx_tmp,this1->__get((int)2));
HXLINE( 214)		Float _hx_tmp1 = ::Math_obj::max(this1->__get((int)0),this1->__get((int)1));
HXLINE( 213)		HX_VARI( Float,max) = ::Math_obj::max(_hx_tmp1,this1->__get((int)2));
HXDLIN( 213)		HX_VARI( Float,delta) = (max - min);
HXDLIN( 213)		HX_VAR( Float,h);
HXDLIN( 213)		HX_VAR( Float,s);
HXLINE( 219)		if ((delta != (int)0)) {
HXLINE( 220)			s = ((Float)delta / (Float)max);
            		}
            		else {
HXLINE( 222)			s = (int)0;
HXLINE( 223)			h = (int)-1;
HXLINE( 224)			return ::Array_obj< Float >::__new(3)->init(0,h)->init(1,s)->init(2,max);
            		}
HXLINE( 227)		if ((this1->__get((int)0) == max)) {
HXLINE( 228)			h = ((Float)(this1->__get((int)1) - this1->__get((int)2)) / (Float)delta);
            		}
            		else {
HXLINE( 229)			if ((this1->__get((int)1) == max)) {
HXLINE( 230)				h = ((int)2 + ((Float)(this1->__get((int)2) - this1->__get((int)0)) / (Float)delta));
            			}
            			else {
HXLINE( 232)				h = ((int)4 + ((Float)(this1->__get((int)0) - this1->__get((int)1)) / (Float)delta));
            			}
            		}
HXLINE( 234)		hx::MultEq(h,(int)60);
HXLINE( 235)		Bool _hx_tmp2 = (h < (int)0);
HXDLIN( 235)		if (_hx_tmp2) {
HXLINE( 236)			hx::AddEq(h,(int)360);
            		}
HXLINE( 237)		return ::Array_obj< Float >::__new(3)->init(0,h)->init(1,s)->init(2,max);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toHsv,return )

::Array< Float > Rgbx_Impl__obj::toHunterLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toHunterLab",0xac8cef08,"thx.color._Rgbx.Rgbx_Impl_.toHunterLab","thx/color/Rgbx.hx",241,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 241)		::Array< Float > _hx_tmp = ::thx::color::_Rgbx::Rgbx_Impl__obj::toXyz(this1);
HXDLIN( 241)		return ::thx::color::_Xyz::Xyz_Impl__obj::toHunterLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toHunterLab,return )

Int Rgbx_Impl__obj::toRgb(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toRgb",0x7d78f768,"thx.color._Rgbx.Rgbx_Impl_.toRgb","thx/color/Rgbx.hx",244,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 244)		HX_VARI( Int,red) = ::Math_obj::round((this1->__get((int)0) * (int)255));
HXDLIN( 244)		HX_VARI( Int,green) = ::Math_obj::round((this1->__get((int)1) * (int)255));
HXDLIN( 244)		HX_VARI( Int,blue) = ::Math_obj::round((this1->__get((int)2) * (int)255));
HXDLIN( 244)		return ((int)((int)((int)((int)red & (int)(int)255) << (int)(int)16) | (int)((int)((int)green & (int)(int)255) << (int)(int)8)) | (int)((int)blue & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toRgb,return )

::Array< Float > Rgbx_Impl__obj::toRgbxa(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toRgbxa",0x87340a51,"thx.color._Rgbx.Rgbx_Impl_.toRgbxa","thx/color/Rgbx.hx",247,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 247)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::withAlpha(this1,((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toRgbxa,return )

Float Rgbx_Impl__obj::toTemperature(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toTemperature",0x0eff238f,"thx.color._Rgbx.Rgbx_Impl_.toTemperature","thx/color/Rgbx.hx",249,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 250)		HX_VARI( Float,t) = (int)0;
HXDLIN( 250)		HX_VAR( ::Array< Float >,rgb);
HXDLIN( 250)		HX_VARI( Float,minT) = (int)1000;
HXDLIN( 250)		HX_VARI( Float,maxT) = (int)40000;
HXLINE( 255)		while(((maxT - minT) > ((Float)0.4))){
HXLINE( 256)			t = ((Float)(maxT + minT) / (Float)(int)2);
HXLINE( 257)			rgb = ::thx::color::_Temperature::Temperature_Impl__obj::temperatureToRgbx(t);
HXLINE( 258)			if ((((Float)rgb->__get((int)2) / (Float)rgb->__get((int)0)) >= ((Float)this1->__get((int)2) / (Float)this1->__get((int)0)))) {
HXLINE( 259)				maxT = t;
            			}
            			else {
HXLINE( 261)				minT = t;
            			}
            		}
HXLINE( 264)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toTemperature,return )

::Array< Float > Rgbx_Impl__obj::toXyz(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toXyz",0x7d7d94b4,"thx.color._Rgbx.Rgbx_Impl_.toXyz","thx/color/Rgbx.hx",267,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 268)		HX_VARI( Float,r) = this1->__get((int)0);
HXDLIN( 268)		HX_VARI( Float,g) = this1->__get((int)1);
HXDLIN( 268)		HX_VARI( Float,b) = this1->__get((int)2);
HXLINE( 272)		if ((r > ((Float)0.04045))) {
HXLINE( 272)			r = ::Math_obj::pow(((Float)(r + ((Float)0.055)) / (Float)((Float)1.055)),((Float)2.4));
            		}
            		else {
HXLINE( 272)			hx::DivEq(r,((Float)12.92));
            		}
HXLINE( 273)		if ((g > ((Float)0.04045))) {
HXLINE( 273)			g = ::Math_obj::pow(((Float)(g + ((Float)0.055)) / (Float)((Float)1.055)),((Float)2.4));
            		}
            		else {
HXLINE( 273)			hx::DivEq(g,((Float)12.92));
            		}
HXLINE( 274)		if ((b > ((Float)0.04045))) {
HXLINE( 274)			b = ::Math_obj::pow(((Float)(b + ((Float)0.055)) / (Float)((Float)1.055)),((Float)2.4));
            		}
            		else {
HXLINE( 274)			hx::DivEq(b,((Float)12.92));
            		}
HXLINE( 276)		return ::Array_obj< Float >::__new(3)->init(0,(((r * ((Float)0.4124564)) + (g * ((Float)0.3575761))) + (b * ((Float)0.1804375))))->init(1,(((r * ((Float)0.2126729)) + (g * ((Float)0.7151522))) + (b * ((Float)0.0721750))))->init(2,(((r * ((Float)0.0193339)) + (g * ((Float)0.1191920))) + (b * ((Float)0.9503041))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toXyz,return )

::Array< Float > Rgbx_Impl__obj::toYuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toYuv",0x7d7e5375,"thx.color._Rgbx.Rgbx_Impl_.toYuv","thx/color/Rgbx.hx",283,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 284)		HX_VARI( Float,r) = this1->__get((int)0);
HXDLIN( 284)		HX_VARI( Float,g) = this1->__get((int)1);
HXDLIN( 284)		HX_VARI( Float,b) = this1->__get((int)2);
HXLINE( 290)		return ::Array_obj< Float >::__new(3)->init(0,(((((Float)0.299) * r) + (((Float)0.587) * g)) + (((Float)0.114) * b)))->init(1,(((((Float)-0.14713) * r) - (((Float)0.28886) * g)) + (((Float)0.436) * b)))->init(2,(((((Float)0.615) * r) - (((Float)0.51499) * g)) - (((Float)0.10001) * b)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toYuv,return )

::Array< Float > Rgbx_Impl__obj::toYxy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","toYxy",0x7d7e5615,"thx.color._Rgbx.Rgbx_Impl_.toYxy","thx/color/Rgbx.hx",294,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 294)		::Array< Float > _hx_tmp = ::thx::color::_Rgbx::Rgbx_Impl__obj::toXyz(this1);
HXDLIN( 294)		return ::thx::color::_Xyz::Xyz_Impl__obj::toYxy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,toYxy,return )

Int Rgbx_Impl__obj::get_red(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","get_red",0xf96d7e7e,"thx.color._Rgbx.Rgbx_Impl_.get_red","thx/color/Rgbx.hx",297,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 297)		return ::Math_obj::round((this1->__get((int)0) * (int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,get_red,return )

Int Rgbx_Impl__obj::get_green(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","get_green",0x01d91930,"thx.color._Rgbx.Rgbx_Impl_.get_green","thx/color/Rgbx.hx",299,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 299)		return ::Math_obj::round((this1->__get((int)1) * (int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,get_green,return )

Int Rgbx_Impl__obj::get_blue(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","get_blue",0x3bd324cd,"thx.color._Rgbx.Rgbx_Impl_.get_blue","thx/color/Rgbx.hx",301,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 301)		return ::Math_obj::round((this1->__get((int)2) * (int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,get_blue,return )

Float Rgbx_Impl__obj::get_redf(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","get_redf",0x46613028,"thx.color._Rgbx.Rgbx_Impl_.get_redf","thx/color/Rgbx.hx",304,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 304)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,get_redf,return )

Float Rgbx_Impl__obj::get_greenf(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","get_greenf",0x9c1cf136,"thx.color._Rgbx.Rgbx_Impl_.get_greenf","thx/color/Rgbx.hx",306,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 306)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,get_greenf,return )

Float Rgbx_Impl__obj::get_bluef(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","get_bluef",0x1ced0ef9,"thx.color._Rgbx.Rgbx_Impl_.get_bluef","thx/color/Rgbx.hx",308,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 308)		return this1->__get((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,get_bluef,return )

Bool Rgbx_Impl__obj::get_inSpace(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbx.Rgbx_Impl_","get_inSpace",0x60f8a24e,"thx.color._Rgbx.Rgbx_Impl_.get_inSpace","thx/color/Rgbx.hx",311,0xbc80f8bc)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 311)		Bool _hx_tmp;
HXDLIN( 311)		Bool _hx_tmp1;
HXDLIN( 311)		Bool _hx_tmp2;
HXDLIN( 311)		Bool _hx_tmp3;
HXDLIN( 311)		if ((this1->__get((int)0) >= (int)0)) {
HXLINE( 311)			_hx_tmp3 = (this1->__get((int)0) <= (int)1);
            		}
            		else {
HXLINE( 311)			_hx_tmp3 = false;
            		}
HXDLIN( 311)		if (_hx_tmp3) {
HXLINE( 311)			_hx_tmp2 = (this1->__get((int)1) >= (int)0);
            		}
            		else {
HXLINE( 311)			_hx_tmp2 = false;
            		}
HXDLIN( 311)		if (_hx_tmp2) {
HXLINE( 311)			_hx_tmp1 = (this1->__get((int)1) <= (int)1);
            		}
            		else {
HXLINE( 311)			_hx_tmp1 = false;
            		}
HXDLIN( 311)		if (_hx_tmp1) {
HXLINE( 311)			_hx_tmp = (this1->__get((int)2) >= (int)0);
            		}
            		else {
HXLINE( 311)			_hx_tmp = false;
            		}
HXDLIN( 311)		if (_hx_tmp) {
HXLINE( 311)			return (this1->__get((int)2) <= (int)1);
            		}
            		else {
HXLINE( 311)			return false;
            		}
HXDLIN( 311)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbx_Impl__obj,get_inSpace,return )


Rgbx_Impl__obj::Rgbx_Impl__obj()
{
}

bool Rgbx_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toHex") ) { outValue = toHex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLab") ) { outValue = toLab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLCh") ) { outValue = toLCh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLuv") ) { outValue = toLuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmy") ) { outValue = toCmy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsl") ) { outValue = toHsl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsv") ) { outValue = toHsv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toXyz") ) { outValue = toXyz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYuv") ) { outValue = toYuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYxy") ) { outValue = toYxy_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"darker") ) { outValue = darker_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCss3") ) { outValue = toCss3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmyk") ) { outValue = toCmyk_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toGrey") ) { outValue = toGrey_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lighter") ) { outValue = lighter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withRed") ) { outValue = withRed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_red") ) { outValue = get_red_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromInts") ) { outValue = fromInts_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withBlue") ) { outValue = withBlue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_blue") ) { outValue = get_blue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_redf") ) { outValue = get_redf_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withAlpha") ) { outValue = withAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withGreen") ) { outValue = withGreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_green") ) { outValue = get_green_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_bluef") ) { outValue = get_bluef_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_greenf") ) { outValue = get_greenf_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCubeHelix") ) { outValue = toCubeHelix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHunterLab") ) { outValue = toHunterLab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_inSpace") ) { outValue = get_inSpace_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toTemperature") ) { outValue = toTemperature_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"toPerceivedGrey") ) { outValue = toPerceivedGrey_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"toCubeHelixWithGamma") ) { outValue = toCubeHelixWithGamma_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"toPerceivedAccurateGrey") ) { outValue = toPerceivedAccurateGrey_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Rgbx_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Rgbx_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Rgbx_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rgbx_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rgbx_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rgbx_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Rgbx_Impl__obj::__mClass;

static ::String Rgbx_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromInts","\x2e","\x13","\x87","\xa3"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("darker","\x63","\x36","\x3a","\x21"),
	HX_HCSTRING("lighter","\xc3","\x4a","\xe3","\x19"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("toCss3","\x2b","\x32","\x81","\x77"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toHex","\x20","\xf4","\x10","\x14"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("withAlpha","\x78","\x0b","\x84","\xa5"),
	HX_HCSTRING("withRed","\xeb","\x22","\x6b","\x5f"),
	HX_HCSTRING("withGreen","\xdd","\x72","\xda","\x1d"),
	HX_HCSTRING("withBlue","\xc0","\x5f","\xc5","\x13"),
	HX_HCSTRING("toLab","\x92","\xf9","\x13","\x14"),
	HX_HCSTRING("toLCh","\x76","\xdf","\x13","\x14"),
	HX_HCSTRING("toLuv","\x12","\x0b","\x14","\x14"),
	HX_HCSTRING("toCmy","\xd4","\x2f","\x0d","\x14"),
	HX_HCSTRING("toCmyk","\x17","\xaa","\x7c","\x77"),
	HX_HCSTRING("toCubeHelix","\x4e","\xbe","\x80","\x23"),
	HX_HCSTRING("toCubeHelixWithGamma","\x13","\xd3","\x9e","\xfc"),
	HX_HCSTRING("toGrey","\x7a","\x3e","\x25","\x7a"),
	HX_HCSTRING("toPerceivedGrey","\x4f","\x8c","\xe7","\x66"),
	HX_HCSTRING("toPerceivedAccurateGrey","\x63","\xc7","\x2f","\x52"),
	HX_HCSTRING("toHsl","\x46","\x00","\x11","\x14"),
	HX_HCSTRING("toHsv","\x50","\x00","\x11","\x14"),
	HX_HCSTRING("toHunterLab","\x72","\x0f","\xb2","\xef"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("toTemperature","\x79","\xb2","\xfc","\x3d"),
	HX_HCSTRING("toXyz","\x9e","\x29","\x1d","\x14"),
	HX_HCSTRING("toYuv","\x5f","\xe8","\x1d","\x14"),
	HX_HCSTRING("toYxy","\xff","\xea","\x1d","\x14"),
	HX_HCSTRING("get_red","\xe8","\xa1","\xcb","\x26"),
	HX_HCSTRING("get_green","\x1a","\x6b","\x96","\xdd"),
	HX_HCSTRING("get_blue","\x23","\xfe","\xd3","\xc0"),
	HX_HCSTRING("get_redf","\x7e","\x09","\x62","\xcb"),
	HX_HCSTRING("get_greenf","\x0c","\x4c","\x07","\x06"),
	HX_HCSTRING("get_bluef","\xe3","\x60","\xaa","\xf8"),
	HX_HCSTRING("get_inSpace","\xb8","\xc2","\x1d","\xa4"),
	::String(null())
};

void Rgbx_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Rgbx.Rgbx_Impl_","\x04","\xb7","\xbc","\x91");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Rgbx_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rgbx_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Rgbx_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Rgbx_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rgbx_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rgbx_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rgbx_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _Rgbx
