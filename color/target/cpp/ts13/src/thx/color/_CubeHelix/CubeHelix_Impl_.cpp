// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__CubeHelix_CubeHelix_Impl_
#include <thx/color/_CubeHelix/CubeHelix_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _CubeHelix{

void CubeHelix_Impl__obj::__construct() { }

Dynamic CubeHelix_Impl__obj::__CreateEmpty() { return new CubeHelix_Impl__obj; }

hx::ObjectPtr< CubeHelix_Impl__obj > CubeHelix_Impl__obj::__new()
{
	hx::ObjectPtr< CubeHelix_Impl__obj > _hx_result = new CubeHelix_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CubeHelix_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CubeHelix_Impl__obj > _hx_result = new CubeHelix_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Float CubeHelix_Impl__obj::A;

Float CubeHelix_Impl__obj::B;

Float CubeHelix_Impl__obj::C;

Float CubeHelix_Impl__obj::D;

Float CubeHelix_Impl__obj::E;

Float CubeHelix_Impl__obj::ED;

Float CubeHelix_Impl__obj::EB;

Float CubeHelix_Impl__obj::BC_DA;

::Array< Float > CubeHelix_Impl__obj::create(Float hue,Float saturation,Float lightness, ::Dynamic gamma){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","create",0x6590b790,"thx.color._CubeHelix.CubeHelix_Impl_.create","thx/color/CubeHelix.hx",29,0x74ba288c)
            	HX_STACK_ARG(hue,"hue")
            	HX_STACK_ARG(saturation,"saturation")
            	HX_STACK_ARG(lightness,"lightness")
            	HX_STACK_ARG(gamma,"gamma")
HXLINE(  29)		HX_VAR_NAME( ::Array< Float >,this1,"this");
HXDLIN(  29)		Float _hx_tmp;
HXDLIN(  29)		if (hx::IsNull( gamma )) {
HXLINE(  29)			_hx_tmp = ((Float)1.0);
            		}
            		else {
HXLINE(  29)			_hx_tmp = gamma;
            		}
HXDLIN(  29)		this1 = ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,saturation)->init(2,lightness)->init(3,_hx_tmp);
HXDLIN(  29)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CubeHelix_Impl__obj,create,return )

::Array< Float > CubeHelix_Impl__obj::fromFloats(::Array< Float > arr){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","fromFloats",0x085152f5,"thx.color._CubeHelix.CubeHelix_Impl_.fromFloats","thx/color/CubeHelix.hx",31,0x74ba288c)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  32)		Bool _hx_tmp = (arr->length < (int)4);
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  33)			::thx::ArrayFloats_obj::resize(arr,(int)3,null());
HXLINE(  34)			arr->push((int)1);
            		}
HXLINE(  36)		HX_VARI(  ::Dynamic,gamma) = arr->__get((int)3);
HXDLIN(  36)		HX_VAR_NAME( ::Array< Float >,this1,"this");
HXDLIN(  36)		Float _hx_tmp1 = arr->__get((int)0);
HXDLIN(  36)		Float _hx_tmp2 = arr->__get((int)1);
HXDLIN(  36)		Float _hx_tmp3 = arr->__get((int)2);
HXDLIN(  36)		Float _hx_tmp4;
HXDLIN(  36)		if (hx::IsNull( gamma )) {
HXLINE(  36)			_hx_tmp4 = ((Float)1.0);
            		}
            		else {
HXLINE(  36)			_hx_tmp4 = gamma;
            		}
HXDLIN(  36)		this1 = ::Array_obj< Float >::__new(4)->init(0,_hx_tmp1)->init(1,_hx_tmp2)->init(2,_hx_tmp3)->init(3,_hx_tmp4);
HXDLIN(  36)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,fromFloats,return )

::Array< Float > CubeHelix_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","fromString",0xd82b586f,"thx.color._CubeHelix.CubeHelix_Impl_.fromString","thx/color/CubeHelix.hx",39,0x74ba288c)
            	HX_STACK_ARG(color,"color")
HXLINE(  40)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseColor(color);
HXLINE(  41)		if (hx::IsNull( info )) {
HXLINE(  42)			return null();
            		}
HXLINE(  44)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  44)			if ((info->name == HX_("cubehelix",69,db,6d,29))) {
HXLINE(  45)				Bool _hx_tmp = (info->channels->length >= (int)4);
HXDLIN(  45)				if (_hx_tmp) {
HXLINE(  46)					HX_VARI( ::Array< Float >,channels) = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)4,false);
HXLINE(  44)					return channels;
            				}
            				else {
HXLINE(  48)					HX_VARI_NAME( ::Array< Float >,channels1,"channels") = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false)->concat(::Array_obj< Float >::__new(1)->init(0,((Float)1.0)));
HXLINE(  44)					return channels1;
            				}
            			}
            			else {
HXLINE(  44)				return null();
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  44)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  44)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,fromString,return )

::Array< Float > CubeHelix_Impl__obj::_new(::Array< Float > channels){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","_new",0x12d958f5,"thx.color._CubeHelix.CubeHelix_Impl_._new","thx/color/CubeHelix.hx",54,0x74ba288c)
            	HX_STACK_ARG(channels,"channels")
HXLINE(  54)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,_new,return )

 ::Dynamic CubeHelix_Impl__obj::analogous(::Array< Float > this1,hx::Null< Float >  __o_spread){
Float spread = __o_spread.Default(((Float)30.0));
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","analogous",0x1f3b0c49,"thx.color._CubeHelix.CubeHelix_Impl_.analogous","thx/color/CubeHelix.hx",58,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(spread,"spread")
HXLINE(  58)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,-(spread)))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,spread)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,analogous,return )

::Array< Float > CubeHelix_Impl__obj::complement(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","complement",0x816b6d7a,"thx.color._CubeHelix.CubeHelix_Impl_.complement","thx/color/CubeHelix.hx",64,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  64)		return ::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,(int)180);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,complement,return )

::Array< Float > CubeHelix_Impl__obj::darker(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","darker",0x0abb86f7,"thx.color._CubeHelix.CubeHelix_Impl_.darker","thx/color/CubeHelix.hx",67,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  67)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),(int)0))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,darker,return )

::Array< Float > CubeHelix_Impl__obj::lighter(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","lighter",0x81887baf,"thx.color._CubeHelix.CubeHelix_Impl_.lighter","thx/color/CubeHelix.hx",75,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  75)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),(int)1))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,lighter,return )

::Array< Float > CubeHelix_Impl__obj::interpolate(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","interpolate",0xdbc0ebad,"thx.color._CubeHelix.CubeHelix_Impl_.interpolate","thx/color/CubeHelix.hx",83,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  83)		return ::Array_obj< Float >::__new(4)->init(0,::thx::Floats_obj::interpolateAngle(t,this1->__get((int)0),other->__get((int)0),(int)360))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)))->init(3,::thx::Floats_obj::interpolate(t,this1->__get((int)3),other->__get((int)3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CubeHelix_Impl__obj,interpolate,return )

::Array< Float > CubeHelix_Impl__obj::interpolateWidest(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","interpolateWidest",0xfa4a1701,"thx.color._CubeHelix.CubeHelix_Impl_.interpolateWidest","thx/color/CubeHelix.hx",91,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  91)		return ::Array_obj< Float >::__new(4)->init(0,::thx::Floats_obj::interpolateAngleWidest(t,this1->__get((int)0),other->__get((int)0),(int)360))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)))->init(3,::thx::Floats_obj::interpolate(t,this1->__get((int)3),other->__get((int)3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CubeHelix_Impl__obj,interpolateWidest,return )

::Array< Float > CubeHelix_Impl__obj::min(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","min",0xfefa5c7e,"thx.color._CubeHelix.CubeHelix_Impl_.min","thx/color/CubeHelix.hx",99,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  99)		HX_VARI( Float,hue) = ::Math_obj::min(this1->__get((int)0),other->__get((int)0));
HXDLIN(  99)		HX_VARI( Float,saturation) = ::Math_obj::min(this1->__get((int)1),other->__get((int)1));
HXDLIN(  99)		HX_VARI( Float,lightness) = ::Math_obj::min(this1->__get((int)2),other->__get((int)2));
HXDLIN(  99)		HX_VARI(  ::Dynamic,gamma) = ::Math_obj::min(this1->__get((int)3),other->__get((int)3));
HXDLIN(  99)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXDLIN(  99)		Float _hx_tmp;
HXDLIN(  99)		if (hx::IsNull( gamma )) {
HXLINE(  99)			_hx_tmp = ((Float)1.0);
            		}
            		else {
HXLINE(  99)			_hx_tmp = gamma;
            		}
HXDLIN(  99)		this2 = ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,saturation)->init(2,lightness)->init(3,_hx_tmp);
HXDLIN(  99)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,min,return )

::Array< Float > CubeHelix_Impl__obj::max(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","max",0xfefa5590,"thx.color._CubeHelix.CubeHelix_Impl_.max","thx/color/CubeHelix.hx",102,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 102)		HX_VARI( Float,hue) = ::Math_obj::max(this1->__get((int)0),other->__get((int)0));
HXDLIN( 102)		HX_VARI( Float,saturation) = ::Math_obj::max(this1->__get((int)1),other->__get((int)1));
HXDLIN( 102)		HX_VARI( Float,lightness) = ::Math_obj::max(this1->__get((int)2),other->__get((int)2));
HXDLIN( 102)		HX_VARI(  ::Dynamic,gamma) = ::Math_obj::max(this1->__get((int)3),other->__get((int)3));
HXDLIN( 102)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXDLIN( 102)		Float _hx_tmp;
HXDLIN( 102)		if (hx::IsNull( gamma )) {
HXLINE( 102)			_hx_tmp = ((Float)1.0);
            		}
            		else {
HXLINE( 102)			_hx_tmp = gamma;
            		}
HXDLIN( 102)		this2 = ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,saturation)->init(2,lightness)->init(3,_hx_tmp);
HXDLIN( 102)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,max,return )

::Array< Float > CubeHelix_Impl__obj::normalize(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","normalize",0x2ba57b79,"thx.color._CubeHelix.CubeHelix_Impl_.normalize","thx/color/CubeHelix.hx",105,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 105)		HX_VARI( Float,hue) = ::thx::Floats_obj::wrapCircular(this1->__get((int)0),(int)360);
HXDLIN( 105)		HX_VARI( Float,v) = this1->__get((int)3);
HXDLIN( 105)		HX_VAR(  ::Dynamic,gamma);
HXDLIN( 105)		if ((v < (int)0)) {
HXLINE( 105)			gamma = (int)0;
            		}
            		else {
HXLINE( 105)			if ((v > (int)1)) {
HXLINE( 105)				gamma = (int)1;
            			}
            			else {
HXLINE( 105)				gamma = v;
            			}
            		}
HXDLIN( 105)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXDLIN( 105)		HX_VARI_NAME( Float,v1,"v") = this1->__get((int)1);
HXDLIN( 105)		Float _hx_tmp;
HXDLIN( 105)		if ((v1 < (int)0)) {
HXLINE( 105)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 105)			if ((v1 > (int)1)) {
HXLINE( 105)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE( 105)				_hx_tmp = v1;
            			}
            		}
HXDLIN( 105)		HX_VARI_NAME( Float,v2,"v") = this1->__get((int)2);
HXDLIN( 105)		Float _hx_tmp1;
HXDLIN( 105)		if ((v2 < (int)0)) {
HXLINE( 105)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE( 105)			if ((v2 > (int)1)) {
HXLINE( 105)				_hx_tmp1 = (int)1;
            			}
            			else {
HXLINE( 105)				_hx_tmp1 = v2;
            			}
            		}
HXDLIN( 105)		Float _hx_tmp2;
HXDLIN( 105)		if (hx::IsNull( gamma )) {
HXLINE( 105)			_hx_tmp2 = ((Float)1.0);
            		}
            		else {
HXLINE( 105)			_hx_tmp2 = gamma;
            		}
HXDLIN( 105)		this2 = ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,_hx_tmp)->init(2,_hx_tmp1)->init(3,_hx_tmp2);
HXDLIN( 105)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,normalize,return )

::Array< Float > CubeHelix_Impl__obj::rotate(::Array< Float > this1,Float angle){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","rotate",0xb4a196ef,"thx.color._CubeHelix.CubeHelix_Impl_.rotate","thx/color/CubeHelix.hx",108,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
HXLINE( 108)		return ::thx::color::_CubeHelix::CubeHelix_Impl__obj::withHue(this1,(this1->__get((int)0) + angle));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,rotate,return )

::Array< Float > CubeHelix_Impl__obj::roundTo(::Array< Float > this1,Int decimals){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","roundTo",0xf4b4a255,"thx.color._CubeHelix.CubeHelix_Impl_.roundTo","thx/color/CubeHelix.hx",111,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE( 111)		HX_VARI( Float,hue) = ::thx::Floats_obj::roundTo(this1->__get((int)0),decimals);
HXDLIN( 111)		HX_VARI( Float,saturation) = ::thx::Floats_obj::roundTo(this1->__get((int)1),decimals);
HXDLIN( 111)		HX_VARI( Float,lightness) = ::thx::Floats_obj::roundTo(this1->__get((int)2),decimals);
HXDLIN( 111)		HX_VARI(  ::Dynamic,gamma) = ::thx::Floats_obj::roundTo(this1->__get((int)3),decimals);
HXDLIN( 111)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXDLIN( 111)		Float _hx_tmp;
HXDLIN( 111)		if (hx::IsNull( gamma )) {
HXLINE( 111)			_hx_tmp = ((Float)1.0);
            		}
            		else {
HXLINE( 111)			_hx_tmp = gamma;
            		}
HXDLIN( 111)		this2 = ::Array_obj< Float >::__new(4)->init(0,hue)->init(1,saturation)->init(2,lightness)->init(3,_hx_tmp);
HXDLIN( 111)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,roundTo,return )

 ::Dynamic CubeHelix_Impl__obj::split(::Array< Float > this1,hx::Null< Float >  __o_spread){
Float spread = __o_spread.Default(((Float)144.0));
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","split",0xf0afc8c6,"thx.color._CubeHelix.CubeHelix_Impl_.split","thx/color/CubeHelix.hx",114,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(spread,"spread")
HXLINE( 114)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,-(spread)))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,spread)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,split,return )

 ::Dynamic CubeHelix_Impl__obj::square(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","square",0x42735131,"thx.color._CubeHelix.CubeHelix_Impl_.square","thx/color/CubeHelix.hx",120,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 120)		return ::thx::color::_CubeHelix::CubeHelix_Impl__obj::tetrad(this1,(int)90);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,square,return )

 ::Dynamic CubeHelix_Impl__obj::tetrad(::Array< Float > this1,Float angle){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","tetrad",0xbf635866,"thx.color._CubeHelix.CubeHelix_Impl_.tetrad","thx/color/CubeHelix.hx",123,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
HXLINE( 123)		return  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,(int)0))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,angle))
            			->setFixed(2,HX_("_2",f3,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,(int)180))
            			->setFixed(3,HX_("_3",f4,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,((int)180 + angle))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,tetrad,return )

 ::Dynamic CubeHelix_Impl__obj::triad(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","triad",0x85667cba,"thx.color._CubeHelix.CubeHelix_Impl_.triad","thx/color/CubeHelix.hx",131,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 131)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,(int)-120))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,(int)0))
            			->setFixed(2,HX_("_2",f3,52,00,00),::thx::color::_CubeHelix::CubeHelix_Impl__obj::rotate(this1,(int)120)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,triad,return )

::Array< Float > CubeHelix_Impl__obj::withGamma(::Array< Float > this1,Float newgamma){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","withGamma",0x92a82f2d,"thx.color._CubeHelix.CubeHelix_Impl_.withGamma","thx/color/CubeHelix.hx",138,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newgamma,"newgamma")
HXLINE( 138)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,newgamma);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,withGamma,return )

::Array< Float > CubeHelix_Impl__obj::withHue(::Array< Float > this1,Float newhue){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","withHue",0xc708cb3e,"thx.color._CubeHelix.CubeHelix_Impl_.withHue","thx/color/CubeHelix.hx",141,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newhue,"newhue")
HXLINE( 141)		return ::Array_obj< Float >::__new(4)->init(0,newhue)->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,withHue,return )

::Array< Float > CubeHelix_Impl__obj::withLightness(::Array< Float > this1,Float newlightness){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","withLightness",0xed945773,"thx.color._CubeHelix.CubeHelix_Impl_.withLightness","thx/color/CubeHelix.hx",144,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newlightness,"newlightness")
HXLINE( 144)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,newlightness)->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,withLightness,return )

::Array< Float > CubeHelix_Impl__obj::withSaturation(::Array< Float > this1,Float newsaturation){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","withSaturation",0x63d3560c,"thx.color._CubeHelix.CubeHelix_Impl_.withSaturation","thx/color/CubeHelix.hx",147,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newsaturation,"newsaturation")
HXLINE( 147)		return ::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,newsaturation)->init(2,this1->__get((int)2))->init(3,this1->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,withSaturation,return )

::String CubeHelix_Impl__obj::toCss3(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toCss3",0x610282bf,"thx.color._CubeHelix.CubeHelix_Impl_.toCss3","thx/color/CubeHelix.hx",150,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 150)		return ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toString(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toCss3,return )

::String CubeHelix_Impl__obj::toString(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toString",0x81546e40,"thx.color._CubeHelix.CubeHelix_Impl_.toString","thx/color/CubeHelix.hx",152,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 152)		if ((this1->__get((int)3) != (int)1)) {
HXLINE( 153)			return ((((((((HX_("cubehelix(",9f,20,b2,16) + this1->__get((int)0)) + HX_(",",2c,00,00,00)) + this1->__get((int)1)) + HX_(",",2c,00,00,00)) + this1->__get((int)2)) + HX_(", ",74,26,00,00)) + this1->__get((int)3)) + HX_(")",29,00,00,00));
            		}
            		else {
HXLINE( 155)			return ((((((HX_("cubehelix(",9f,20,b2,16) + this1->__get((int)0)) + HX_(",",2c,00,00,00)) + this1->__get((int)1)) + HX_(",",2c,00,00,00)) + this1->__get((int)2)) + HX_(")",29,00,00,00));
            		}
HXLINE( 152)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toString,return )

Bool CubeHelix_Impl__obj::equals(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","equals",0xa9743ed3,"thx.color._CubeHelix.CubeHelix_Impl_.equals","thx/color/CubeHelix.hx",159,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 159)		return ::thx::color::_CubeHelix::CubeHelix_Impl__obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CubeHelix_Impl__obj,equals,return )

Bool CubeHelix_Impl__obj::nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","nearEquals",0x82289bdb,"thx.color._CubeHelix.CubeHelix_Impl_.nearEquals","thx/color/CubeHelix.hx",162,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE( 162)		Bool _hx_tmp;
HXDLIN( 162)		Bool _hx_tmp1;
HXDLIN( 162)		Float _hx_tmp2 = ::Math_obj::abs(::thx::Floats_obj::angleDifference(this1->__get((int)0),other->__get((int)0),((Float)360.0)));
HXDLIN( 162)		if (hx::IsLessEq( _hx_tmp2,tolerance )) {
HXLINE( 162)			_hx_tmp1 = ::thx::Floats_obj::nearEquals(this1->__get((int)1),other->__get((int)1),tolerance);
            		}
            		else {
HXLINE( 162)			_hx_tmp1 = false;
            		}
HXDLIN( 162)		if (_hx_tmp1) {
HXLINE( 162)			_hx_tmp = ::thx::Floats_obj::nearEquals(this1->__get((int)2),other->__get((int)2),tolerance);
            		}
            		else {
HXLINE( 162)			_hx_tmp = false;
            		}
HXDLIN( 162)		if (_hx_tmp) {
HXLINE( 162)			return ::thx::Floats_obj::nearEquals(this1->__get((int)3),other->__get((int)3),tolerance);
            		}
            		else {
HXLINE( 162)			return false;
            		}
HXDLIN( 162)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CubeHelix_Impl__obj,nearEquals,return )

::Array< Float > CubeHelix_Impl__obj::toLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toLab",0x8354d77e,"thx.color._CubeHelix.CubeHelix_Impl_.toLab","thx/color/CubeHelix.hx",166,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 166)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toXyz(this1);
HXDLIN( 166)		return ::thx::color::_Xyz::Xyz_Impl__obj::toLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toLab,return )

::Array< Float > CubeHelix_Impl__obj::toLCh(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toLCh",0x8354bd62,"thx.color._CubeHelix.CubeHelix_Impl_.toLCh","thx/color/CubeHelix.hx",169,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 169)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toLab(this1);
HXDLIN( 169)		return ::thx::color::_Lab::Lab_Impl__obj::toLCh(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toLCh,return )

::Array< Float > CubeHelix_Impl__obj::toLuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toLuv",0x8354e8fe,"thx.color._CubeHelix.CubeHelix_Impl_.toLuv","thx/color/CubeHelix.hx",172,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 172)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 172)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toLuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toLuv,return )

::Array< Float > CubeHelix_Impl__obj::toCmy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toCmy",0x834e0dc0,"thx.color._CubeHelix.CubeHelix_Impl_.toCmy","thx/color/CubeHelix.hx",175,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 175)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 175)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toCmy,return )

::Array< Float > CubeHelix_Impl__obj::toCmyk(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toCmyk",0x60fdfaab,"thx.color._CubeHelix.CubeHelix_Impl_.toCmyk","thx/color/CubeHelix.hx",178,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 178)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 178)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmyk(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toCmyk,return )

Float CubeHelix_Impl__obj::toGrey(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toGrey",0x63a68f0e,"thx.color._CubeHelix.CubeHelix_Impl_.toGrey","thx/color/CubeHelix.hx",181,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 181)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 181)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toGrey(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toGrey,return )

::Array< Float > CubeHelix_Impl__obj::toHsl(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toHsl",0x8351de32,"thx.color._CubeHelix.CubeHelix_Impl_.toHsl","thx/color/CubeHelix.hx",184,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 184)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 184)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsl(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toHsl,return )

::Array< Float > CubeHelix_Impl__obj::toHsv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toHsv",0x8351de3c,"thx.color._CubeHelix.CubeHelix_Impl_.toHsv","thx/color/CubeHelix.hx",187,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 187)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 187)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toHsv,return )

::Array< Float > CubeHelix_Impl__obj::toHunterLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toHunterLab",0xac40265e,"thx.color._CubeHelix.CubeHelix_Impl_.toHunterLab","thx/color/CubeHelix.hx",190,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 190)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toXyz(this1);
HXDLIN( 190)		return ::thx::color::_Xyz::Xyz_Impl__obj::toHunterLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toHunterLab,return )

Int CubeHelix_Impl__obj::toRgb(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toRgb",0x83596a3e,"thx.color._CubeHelix.CubeHelix_Impl_.toRgb","thx/color/CubeHelix.hx",193,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 193)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 193)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgb(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toRgb,return )

Int CubeHelix_Impl__obj::toRgba(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toRgba",0x6ae38c63,"thx.color._CubeHelix.CubeHelix_Impl_.toRgba","thx/color/CubeHelix.hx",196,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 196)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbxa(this1);
HXDLIN( 196)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toRgba,return )

::Array< Float > CubeHelix_Impl__obj::toRgbx(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toRgbx",0x6ae38c7a,"thx.color._CubeHelix.CubeHelix_Impl_.toRgbx","thx/color/CubeHelix.hx",198,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 199)		HX_VAR( Float,h);
HXDLIN( 199)		Bool _hx_tmp = ::Math_obj::isNaN(this1->__get((int)0));
HXDLIN( 199)		if (_hx_tmp) {
HXLINE( 199)			h = (int)0;
            		}
            		else {
HXLINE( 199)			h = (((Float)(this1->__get((int)0) + (int)120) / (Float)(int)180) * ::Math_obj::PI);
            		}
HXDLIN( 199)		HX_VARI( Float,l) = ::Math_obj::pow(this1->__get((int)2),this1->__get((int)3));
HXDLIN( 199)		HX_VAR( Float,a);
HXLINE( 201)		Bool _hx_tmp1 = ::Math_obj::isNaN(this1->__get((int)1));
HXDLIN( 201)		if (_hx_tmp1) {
HXLINE( 199)			a = (int)0;
            		}
            		else {
HXLINE( 199)			a = ((this1->__get((int)1) * l) * ((int)1 - l));
            		}
HXDLIN( 199)		HX_VARI( Float,cosh) = ::Math_obj::cos(h);
HXDLIN( 199)		HX_VARI( Float,sinh) = ::Math_obj::sin(h);
HXLINE( 204)		return ::Array_obj< Float >::__new(3)->init(0,(l + (a * ((((Float)-0.14861) * cosh) + (((Float)1.78277) * sinh)))))->init(1,(l + (a * ((((Float)-0.29227) * cosh) + (((Float)-0.90649) * sinh)))))->init(2,(l + (a * (((Float)1.97294) * cosh))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toRgbx,return )

::Array< Float > CubeHelix_Impl__obj::toRgbxa(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toRgbxa",0x1c375ea7,"thx.color._CubeHelix.CubeHelix_Impl_.toRgbxa","thx/color/CubeHelix.hx",212,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 212)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 212)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toRgbxa,return )

Float CubeHelix_Impl__obj::toTemperature(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toTemperature",0xcb6f5c65,"thx.color._CubeHelix.CubeHelix_Impl_.toTemperature","thx/color/CubeHelix.hx",215,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 215)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 215)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toTemperature(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toTemperature,return )

::Array< Float > CubeHelix_Impl__obj::toXyz(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toXyz",0x835e078a,"thx.color._CubeHelix.CubeHelix_Impl_.toXyz","thx/color/CubeHelix.hx",218,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 218)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 218)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toXyz(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toXyz,return )

::Array< Float > CubeHelix_Impl__obj::toYuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toYuv",0x835ec64b,"thx.color._CubeHelix.CubeHelix_Impl_.toYuv","thx/color/CubeHelix.hx",221,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 221)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 221)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toYuv,return )

::Array< Float > CubeHelix_Impl__obj::toYxy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","toYxy",0x835ec8eb,"thx.color._CubeHelix.CubeHelix_Impl_.toYxy","thx/color/CubeHelix.hx",224,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 224)		::Array< Float > _hx_tmp = ::thx::color::_CubeHelix::CubeHelix_Impl__obj::toRgbx(this1);
HXDLIN( 224)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYxy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,toYxy,return )

Float CubeHelix_Impl__obj::get_hue(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","get_hue",0x8e694a3b,"thx.color._CubeHelix.CubeHelix_Impl_.get_hue","thx/color/CubeHelix.hx",227,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 227)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,get_hue,return )

Float CubeHelix_Impl__obj::get_saturation(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","get_saturation",0xa37960af,"thx.color._CubeHelix.CubeHelix_Impl_.get_saturation","thx/color/CubeHelix.hx",229,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 229)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,get_saturation,return )

Float CubeHelix_Impl__obj::get_lightness(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","get_lightness",0x261db230,"thx.color._CubeHelix.CubeHelix_Impl_.get_lightness","thx/color/CubeHelix.hx",231,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 231)		return this1->__get((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,get_lightness,return )

Float CubeHelix_Impl__obj::get_gamma(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","get_gamma",0x5264276a,"thx.color._CubeHelix.CubeHelix_Impl_.get_gamma","thx/color/CubeHelix.hx",233,0x74ba288c)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 233)		return this1->__get((int)3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CubeHelix_Impl__obj,get_gamma,return )


CubeHelix_Impl__obj::CubeHelix_Impl__obj()
{
}

bool CubeHelix_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { outValue = split_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"triad") ) { outValue = triad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLab") ) { outValue = toLab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLCh") ) { outValue = toLCh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLuv") ) { outValue = toLuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmy") ) { outValue = toCmy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsl") ) { outValue = toHsl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsv") ) { outValue = toHsv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toXyz") ) { outValue = toXyz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYuv") ) { outValue = toYuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYxy") ) { outValue = toYxy_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"darker") ) { outValue = darker_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"square") ) { outValue = square_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tetrad") ) { outValue = tetrad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCss3") ) { outValue = toCss3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmyk") ) { outValue = toCmyk_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toGrey") ) { outValue = toGrey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbx") ) { outValue = toRgbx_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lighter") ) { outValue = lighter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withHue") ) { outValue = withHue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hue") ) { outValue = get_hue_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"analogous") ) { outValue = analogous_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withGamma") ) { outValue = withGamma_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_gamma") ) { outValue = get_gamma_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"complement") ) { outValue = complement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHunterLab") ) { outValue = toHunterLab_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"withLightness") ) { outValue = withLightness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toTemperature") ) { outValue = toTemperature_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lightness") ) { outValue = get_lightness_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"withSaturation") ) { outValue = withSaturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_saturation") ) { outValue = get_saturation_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"interpolateWidest") ) { outValue = interpolateWidest_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CubeHelix_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo CubeHelix_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &CubeHelix_Impl__obj::A,HX_HCSTRING("A","\x41","\x00","\x00","\x00")},
	{hx::fsFloat,(void *) &CubeHelix_Impl__obj::B,HX_HCSTRING("B","\x42","\x00","\x00","\x00")},
	{hx::fsFloat,(void *) &CubeHelix_Impl__obj::C,HX_HCSTRING("C","\x43","\x00","\x00","\x00")},
	{hx::fsFloat,(void *) &CubeHelix_Impl__obj::D,HX_HCSTRING("D","\x44","\x00","\x00","\x00")},
	{hx::fsFloat,(void *) &CubeHelix_Impl__obj::E,HX_HCSTRING("E","\x45","\x00","\x00","\x00")},
	{hx::fsFloat,(void *) &CubeHelix_Impl__obj::ED,HX_HCSTRING("ED","\x5f","\x3c","\x00","\x00")},
	{hx::fsFloat,(void *) &CubeHelix_Impl__obj::EB,HX_HCSTRING("EB","\x5d","\x3c","\x00","\x00")},
	{hx::fsFloat,(void *) &CubeHelix_Impl__obj::BC_DA,HX_HCSTRING("BC_DA","\x7b","\xe6","\x03","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void CubeHelix_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CubeHelix_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CubeHelix_Impl__obj::A,"A");
	HX_MARK_MEMBER_NAME(CubeHelix_Impl__obj::B,"B");
	HX_MARK_MEMBER_NAME(CubeHelix_Impl__obj::C,"C");
	HX_MARK_MEMBER_NAME(CubeHelix_Impl__obj::D,"D");
	HX_MARK_MEMBER_NAME(CubeHelix_Impl__obj::E,"E");
	HX_MARK_MEMBER_NAME(CubeHelix_Impl__obj::ED,"ED");
	HX_MARK_MEMBER_NAME(CubeHelix_Impl__obj::EB,"EB");
	HX_MARK_MEMBER_NAME(CubeHelix_Impl__obj::BC_DA,"BC_DA");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CubeHelix_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CubeHelix_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CubeHelix_Impl__obj::A,"A");
	HX_VISIT_MEMBER_NAME(CubeHelix_Impl__obj::B,"B");
	HX_VISIT_MEMBER_NAME(CubeHelix_Impl__obj::C,"C");
	HX_VISIT_MEMBER_NAME(CubeHelix_Impl__obj::D,"D");
	HX_VISIT_MEMBER_NAME(CubeHelix_Impl__obj::E,"E");
	HX_VISIT_MEMBER_NAME(CubeHelix_Impl__obj::ED,"ED");
	HX_VISIT_MEMBER_NAME(CubeHelix_Impl__obj::EB,"EB");
	HX_VISIT_MEMBER_NAME(CubeHelix_Impl__obj::BC_DA,"BC_DA");
};

#endif

hx::Class CubeHelix_Impl__obj::__mClass;

static ::String CubeHelix_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("A","\x41","\x00","\x00","\x00"),
	HX_HCSTRING("B","\x42","\x00","\x00","\x00"),
	HX_HCSTRING("C","\x43","\x00","\x00","\x00"),
	HX_HCSTRING("D","\x44","\x00","\x00","\x00"),
	HX_HCSTRING("E","\x45","\x00","\x00","\x00"),
	HX_HCSTRING("ED","\x5f","\x3c","\x00","\x00"),
	HX_HCSTRING("EB","\x5d","\x3c","\x00","\x00"),
	HX_HCSTRING("BC_DA","\x7b","\xe6","\x03","\x2d"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("analogous","\x5d","\xc8","\x36","\x9f"),
	HX_HCSTRING("complement","\xe6","\x42","\xb4","\xfd"),
	HX_HCSTRING("darker","\x63","\x36","\x3a","\x21"),
	HX_HCSTRING("lighter","\xc3","\x4a","\xe3","\x19"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("interpolateWidest","\x15","\x07","\x3e","\x31"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	HX_HCSTRING("square","\x9d","\x00","\xf2","\x58"),
	HX_HCSTRING("tetrad","\xd2","\x07","\xe2","\xd5"),
	HX_HCSTRING("triad","\xce","\x9e","\x25","\x16"),
	HX_HCSTRING("withGamma","\x41","\xeb","\xa3","\x12"),
	HX_HCSTRING("withHue","\x52","\x9a","\x63","\x5f"),
	HX_HCSTRING("withLightness","\x87","\xad","\x21","\x60"),
	HX_HCSTRING("withSaturation","\x78","\x51","\xf1","\x2c"),
	HX_HCSTRING("toCss3","\x2b","\x32","\x81","\x77"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("toLab","\x92","\xf9","\x13","\x14"),
	HX_HCSTRING("toLCh","\x76","\xdf","\x13","\x14"),
	HX_HCSTRING("toLuv","\x12","\x0b","\x14","\x14"),
	HX_HCSTRING("toCmy","\xd4","\x2f","\x0d","\x14"),
	HX_HCSTRING("toCmyk","\x17","\xaa","\x7c","\x77"),
	HX_HCSTRING("toGrey","\x7a","\x3e","\x25","\x7a"),
	HX_HCSTRING("toHsl","\x46","\x00","\x11","\x14"),
	HX_HCSTRING("toHsv","\x50","\x00","\x11","\x14"),
	HX_HCSTRING("toHunterLab","\x72","\x0f","\xb2","\xef"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbx","\xe6","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("toTemperature","\x79","\xb2","\xfc","\x3d"),
	HX_HCSTRING("toXyz","\x9e","\x29","\x1d","\x14"),
	HX_HCSTRING("toYuv","\x5f","\xe8","\x1d","\x14"),
	HX_HCSTRING("toYxy","\xff","\xea","\x1d","\x14"),
	HX_HCSTRING("get_hue","\x4f","\x19","\xc4","\x26"),
	HX_HCSTRING("get_saturation","\x1b","\x5c","\x97","\x6c"),
	HX_HCSTRING("get_lightness","\x44","\x08","\xab","\x98"),
	HX_HCSTRING("get_gamma","\x7e","\xe3","\x5f","\xd2"),
	::String(null())
};

void CubeHelix_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._CubeHelix.CubeHelix_Impl_","\x5a","\xc5","\xe8","\x09");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CubeHelix_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CubeHelix_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CubeHelix_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CubeHelix_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CubeHelix_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CubeHelix_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CubeHelix_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CubeHelix_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","boot",0x14d5c7c6,"thx.color._CubeHelix.CubeHelix_Impl_.boot","thx/color/CubeHelix.hx",14,0x74ba288c)
HXLINE(  14)		A = ((Float)-0.14861);
            	}
{
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","boot",0x14d5c7c6,"thx.color._CubeHelix.CubeHelix_Impl_.boot","thx/color/CubeHelix.hx",15,0x74ba288c)
HXLINE(  15)		B = ((Float)1.78277);
            	}
{
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","boot",0x14d5c7c6,"thx.color._CubeHelix.CubeHelix_Impl_.boot","thx/color/CubeHelix.hx",16,0x74ba288c)
HXLINE(  16)		C = ((Float)-0.29227);
            	}
{
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","boot",0x14d5c7c6,"thx.color._CubeHelix.CubeHelix_Impl_.boot","thx/color/CubeHelix.hx",17,0x74ba288c)
HXLINE(  17)		D = ((Float)-0.90649);
            	}
{
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","boot",0x14d5c7c6,"thx.color._CubeHelix.CubeHelix_Impl_.boot","thx/color/CubeHelix.hx",18,0x74ba288c)
HXLINE(  18)		E = ((Float)1.97294);
            	}
{
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","boot",0x14d5c7c6,"thx.color._CubeHelix.CubeHelix_Impl_.boot","thx/color/CubeHelix.hx",19,0x74ba288c)
HXLINE(  19)		ED = ((Float)-1.7884503806);
            	}
{
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","boot",0x14d5c7c6,"thx.color._CubeHelix.CubeHelix_Impl_.boot","thx/color/CubeHelix.hx",20,0x74ba288c)
HXLINE(  20)		EB = ((Float)3.5172982438);
            	}
{
            	HX_STACK_FRAME("thx.color._CubeHelix.CubeHelix_Impl_","boot",0x14d5c7c6,"thx.color._CubeHelix.CubeHelix_Impl_.boot","thx/color/CubeHelix.hx",21,0x74ba288c)
HXLINE(  21)		BC_DA = ((Float)-0.655763666799999867);
            	}
}

} // end namespace thx
} // end namespace color
} // end namespace _CubeHelix
