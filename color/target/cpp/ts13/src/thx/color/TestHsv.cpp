// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_color_TestHsv
#include <thx/color/TestHsv.h>
#endif
#ifndef INCLUDED_thx_color__Hsv_Hsv_Impl_
#include <thx/color/_Hsv/Hsv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsva_Hsva_Impl_
#include <thx/color/_Hsva/Hsva_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestHsv_obj::__construct(Int i){
            	HX_STACK_FRAME("thx.color.TestHsv","new",0x7cfe4136,"thx.color.TestHsv.new","thx/color/TestHsv.hx",9,0x36e4943c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(   9)		this->x = i;
            	}

Dynamic TestHsv_obj::__CreateEmpty() { return new TestHsv_obj; }

hx::ObjectPtr< TestHsv_obj > TestHsv_obj::__new(Int i)
{
	hx::ObjectPtr< TestHsv_obj > _hx_result = new TestHsv_obj();
	_hx_result->__construct(i);
	return _hx_result;
}

Dynamic TestHsv_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestHsv_obj > _hx_result = new TestHsv_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TestHsv_obj::testBasics(){
            	HX_STACK_FRAME("thx.color.TestHsv","testBasics",0x1cce69e1,"thx.color.TestHsv.testBasics","thx/color/TestHsv.hx",13,0x36e4943c)
            	HX_STACK_THIS(this)
HXLINE(  13)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  13)		HX_VARI( Int,_g) = this->x;
HXDLIN(  13)		while((_g1 < _g)){
HXLINE(  13)			++_g1;
HXLINE(  14)			HX_VARI( ::Array< Float >,hsv) = ::Array_obj< Float >::__new(3)->init(0,(int)1)->init(1,(int)0)->init(2,(int)0);
HXLINE(  15)			::utest::Assert_obj::equals((int)1,hsv->__get((int)0),null(),hx::SourceInfo(HX_("TestHsv.hx",a5,f6,f9,29),15,HX_("thx.color.TestHsv",44,2e,54,0e),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  16)			::utest::Assert_obj::equals((int)0,hsv->__get((int)1),null(),hx::SourceInfo(HX_("TestHsv.hx",a5,f6,f9,29),16,HX_("thx.color.TestHsv",44,2e,54,0e),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  17)			::utest::Assert_obj::equals((int)0,hsv->__get((int)2),null(),hx::SourceInfo(HX_("TestHsv.hx",a5,f6,f9,29),17,HX_("thx.color.TestHsv",44,2e,54,0e),HX_("testBasics",f7,73,1f,6e)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHsv_obj,testBasics,(void))

void TestHsv_obj::testHsb(){
            	HX_STACK_FRAME("thx.color.TestHsv","testHsb",0xf020519b,"thx.color.TestHsv.testHsb","thx/color/TestHsv.hx",21,0x36e4943c)
            	HX_STACK_THIS(this)
HXLINE(  21)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  21)		HX_VARI( Int,_g) = this->x;
HXDLIN(  21)		while((_g1 < _g)){
HXLINE(  21)			++_g1;
HXLINE(  22)			HX_VARI( ::Array< Float >,hsb) = ::Array_obj< Float >::__new(3)->init(0,(int)1)->init(1,(int)0)->init(2,(int)0);
HXLINE(  23)			::utest::Assert_obj::equals((int)1,hsb->__get((int)0),null(),hx::SourceInfo(HX_("TestHsv.hx",a5,f6,f9,29),23,HX_("thx.color.TestHsv",44,2e,54,0e),HX_("testHsb",c5,bd,bd,bd)));
HXLINE(  24)			::utest::Assert_obj::equals((int)0,hsb->__get((int)1),null(),hx::SourceInfo(HX_("TestHsv.hx",a5,f6,f9,29),24,HX_("thx.color.TestHsv",44,2e,54,0e),HX_("testHsb",c5,bd,bd,bd)));
HXLINE(  25)			::utest::Assert_obj::equals((int)0,hsb->__get((int)2),null(),hx::SourceInfo(HX_("TestHsv.hx",a5,f6,f9,29),25,HX_("thx.color.TestHsv",44,2e,54,0e),HX_("testHsb",c5,bd,bd,bd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHsv_obj,testHsb,(void))

void TestHsv_obj::testStrings(){
            	HX_STACK_FRAME("thx.color.TestHsv","testStrings",0xe024b326,"thx.color.TestHsv.testStrings","thx/color/TestHsv.hx",29,0x36e4943c)
            	HX_STACK_THIS(this)
HXLINE(  29)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  29)		HX_VARI( Int,_g) = this->x;
HXDLIN(  29)		while((_g1 < _g)){
HXLINE(  29)			++_g1;
HXLINE(  31)			::utest::Assert_obj::equals(HX_("hsv(0,0%,100%)",17,b6,98,d6),::thx::color::_Hsv::Hsv_Impl__obj::toString(::Array_obj< Float >::__new(3)->init(0,(int)0)->init(1,(int)0)->init(2,(int)1)),null(),hx::SourceInfo(HX_("TestHsv.hx",a5,f6,f9,29),31,HX_("thx.color.TestHsv",44,2e,54,0e),HX_("testStrings",50,7c,bc,b5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHsv_obj,testStrings,(void))

void TestHsv_obj::testFromString(){
            	HX_STACK_FRAME("thx.color.TestHsv","testFromString",0x79f887b7,"thx.color.TestHsv.testFromString","thx/color/TestHsv.hx",35,0x36e4943c)
            	HX_STACK_THIS(this)
HXLINE(  35)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  35)		HX_VARI( Int,_g) = this->x;
HXDLIN(  35)		while((_g1 < _g)){
HXLINE(  35)			++_g1;
HXLINE(  36)			Bool _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::equals(::Array_obj< Float >::__new(3)->init(0,((Float)0.5))->init(1,((Float)0.2))->init(2,((Float)0.1)),::thx::color::_Hsv::Hsv_Impl__obj::fromString(HX_("hsv(50%,0.2,10%)",fa,fd,7a,f3)));
HXDLIN(  36)			::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestHsv.hx",a5,f6,f9,29),36,HX_("thx.color.TestHsv",44,2e,54,0e),HX_("testFromString",cd,54,67,f4)));
HXLINE(  37)			Bool _hx_tmp1 = ::thx::color::_Hsva::Hsva_Impl__obj::equals(::Array_obj< Float >::__new(4)->init(0,((Float)0.5))->init(1,((Float)0.2))->init(2,((Float)0.1))->init(3,((Float)0.3)),::thx::color::_Hsva::Hsva_Impl__obj::fromString(HX_("hsva(50%,0.2,10%,0.3)",46,ee,64,86)));
HXDLIN(  37)			::utest::Assert_obj::isTrue(_hx_tmp1,null(),hx::SourceInfo(HX_("TestHsv.hx",a5,f6,f9,29),37,HX_("thx.color.TestHsv",44,2e,54,0e),HX_("testFromString",cd,54,67,f4)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestHsv_obj,testFromString,(void))


TestHsv_obj::TestHsv_obj()
{
}

hx::Val TestHsv_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testHsb") ) { return hx::Val( testHsb_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testStrings") ) { return hx::Val( testStrings_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromString") ) { return hx::Val( testFromString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestHsv_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestHsv_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestHsv_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TestHsv_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestHsv_obj_sStaticStorageInfo = 0;
#endif

static ::String TestHsv_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testHsb","\xc5","\xbd","\xbd","\xbd"),
	HX_HCSTRING("testStrings","\x50","\x7c","\xbc","\xb5"),
	HX_HCSTRING("testFromString","\xcd","\x54","\x67","\xf4"),
	::String(null()) };

static void TestHsv_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestHsv_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestHsv_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestHsv_obj::__mClass,"__mClass");
};

#endif

hx::Class TestHsv_obj::__mClass;

void TestHsv_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestHsv","\x44","\x2e","\x54","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestHsv_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestHsv_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestHsv_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestHsv_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestHsv_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestHsv_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
