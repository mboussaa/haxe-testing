// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__Hsl_Hsl_Impl_
#include <thx/color/_Hsl/Hsl_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _Hsl{

void Hsl_Impl__obj::__construct() { }

Dynamic Hsl_Impl__obj::__CreateEmpty() { return new Hsl_Impl__obj; }

hx::ObjectPtr< Hsl_Impl__obj > Hsl_Impl__obj::__new()
{
	hx::ObjectPtr< Hsl_Impl__obj > _hx_result = new Hsl_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Hsl_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Hsl_Impl__obj > _hx_result = new Hsl_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Hsl_Impl__obj::create(Float hue,Float saturation,Float lightness){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","create",0x26d0cd60,"thx.color._Hsl.Hsl_Impl_.create","thx/color/Hsl.hx",31,0x1e654494)
            	HX_STACK_ARG(hue,"hue")
            	HX_STACK_ARG(saturation,"saturation")
            	HX_STACK_ARG(lightness,"lightness")
HXLINE(  31)		return ::Array_obj< Float >::__new(3)->init(0,hue)->init(1,saturation)->init(2,lightness);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsl_Impl__obj,create,return )

::Array< Float > Hsl_Impl__obj::fromFloats(::Array< Float > arr){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","fromFloats",0x971890c5,"thx.color._Hsl.Hsl_Impl_.fromFloats","thx/color/Hsl.hx",33,0x1e654494)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  34)		::thx::ArrayFloats_obj::resize(arr,(int)3,null());
HXLINE(  35)		return ::Array_obj< Float >::__new(3)->init(0,arr->__get((int)0))->init(1,arr->__get((int)1))->init(2,arr->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,fromFloats,return )

::Array< Float > Hsl_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","fromString",0x66f2963f,"thx.color._Hsl.Hsl_Impl_.fromString","thx/color/Hsl.hx",38,0x1e654494)
            	HX_STACK_ARG(color,"color")
HXLINE(  39)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseColor(color);
HXLINE(  40)		if (hx::IsNull( info )) {
HXLINE(  41)			return null();
            		}
HXLINE(  43)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  43)			if ((info->name == HX_("hsl",01,4f,4f,00))) {
HXLINE(  45)				HX_VARI( ::Array< Float >,channels) = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXLINE(  43)				return channels;
            			}
            			else {
HXLINE(  43)				return null();
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  43)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  43)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,fromString,return )

::Array< Float > Hsl_Impl__obj::_new(::Array< Float > channels){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","_new",0x1ab95ac5,"thx.color._Hsl.Hsl_Impl_._new","thx/color/Hsl.hx",51,0x1e654494)
            	HX_STACK_ARG(channels,"channels")
HXLINE(  51)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,_new,return )

 ::Dynamic Hsl_Impl__obj::analogous(::Array< Float > this1,hx::Null< Float >  __o_spread){
Float spread = __o_spread.Default(((Float)30.0));
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","analogous",0x10f27879,"thx.color._Hsl.Hsl_Impl_.analogous","thx/color/Hsl.hx",55,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(spread,"spread")
HXLINE(  55)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,-(spread)))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,spread)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,analogous,return )

::Array< Float > Hsl_Impl__obj::complement(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","complement",0x1032ab4a,"thx.color._Hsl.Hsl_Impl_.complement","thx/color/Hsl.hx",61,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  61)		return ::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,(int)180);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,complement,return )

::Array< Float > Hsl_Impl__obj::darker(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","darker",0xcbfb9cc7,"thx.color._Hsl.Hsl_Impl_.darker","thx/color/Hsl.hx",64,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  64)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),(int)0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,darker,return )

::Array< Float > Hsl_Impl__obj::lighter(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","lighter",0xd85b7bdf,"thx.color._Hsl.Hsl_Impl_.lighter","thx/color/Hsl.hx",71,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  71)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),(int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,lighter,return )

::Array< Float > Hsl_Impl__obj::interpolate(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","interpolate",0x3b4fc3dd,"thx.color._Hsl.Hsl_Impl_.interpolate","thx/color/Hsl.hx",78,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  78)		return ::Array_obj< Float >::__new(3)->init(0,::thx::Floats_obj::interpolateAngle(t,this1->__get((int)0),other->__get((int)0),(int)360))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsl_Impl__obj,interpolate,return )

::Array< Float > Hsl_Impl__obj::interpolateWidest(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","interpolateWidest",0x60913331,"thx.color._Hsl.Hsl_Impl_.interpolateWidest","thx/color/Hsl.hx",85,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  85)		return ::Array_obj< Float >::__new(3)->init(0,::thx::Floats_obj::interpolateAngleWidest(t,this1->__get((int)0),other->__get((int)0),(int)360))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsl_Impl__obj,interpolateWidest,return )

::Array< Float > Hsl_Impl__obj::min(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","min",0xfddd84ae,"thx.color._Hsl.Hsl_Impl_.min","thx/color/Hsl.hx",92,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  92)		HX_VARI( Float,hue) = ::Math_obj::min(this1->__get((int)0),other->__get((int)0));
HXDLIN(  92)		HX_VARI( Float,saturation) = ::Math_obj::min(this1->__get((int)1),other->__get((int)1));
HXDLIN(  92)		HX_VARI( Float,lightness) = ::Math_obj::min(this1->__get((int)2),other->__get((int)2));
HXDLIN(  92)		return ::Array_obj< Float >::__new(3)->init(0,hue)->init(1,saturation)->init(2,lightness);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,min,return )

::Array< Float > Hsl_Impl__obj::max(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","max",0xfddd7dc0,"thx.color._Hsl.Hsl_Impl_.max","thx/color/Hsl.hx",95,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  95)		HX_VARI( Float,hue) = ::Math_obj::max(this1->__get((int)0),other->__get((int)0));
HXDLIN(  95)		HX_VARI( Float,saturation) = ::Math_obj::max(this1->__get((int)1),other->__get((int)1));
HXDLIN(  95)		HX_VARI( Float,lightness) = ::Math_obj::max(this1->__get((int)2),other->__get((int)2));
HXDLIN(  95)		return ::Array_obj< Float >::__new(3)->init(0,hue)->init(1,saturation)->init(2,lightness);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,max,return )

::Array< Float > Hsl_Impl__obj::normalize(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","normalize",0x1d5ce7a9,"thx.color._Hsl.Hsl_Impl_.normalize","thx/color/Hsl.hx",98,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  98)		HX_VARI( Float,hue) = ::thx::Floats_obj::wrapCircular(this1->__get((int)0),(int)360);
HXDLIN(  98)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXDLIN(  98)		HX_VARI( Float,v) = this1->__get((int)1);
HXDLIN(  98)		Float _hx_tmp;
HXDLIN(  98)		if ((v < (int)0)) {
HXLINE(  98)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  98)			if ((v > (int)1)) {
HXLINE(  98)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(  98)				_hx_tmp = v;
            			}
            		}
HXDLIN(  98)		HX_VARI_NAME( Float,v1,"v") = this1->__get((int)2);
HXDLIN(  98)		Float _hx_tmp1;
HXDLIN(  98)		if ((v1 < (int)0)) {
HXLINE(  98)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE(  98)			if ((v1 > (int)1)) {
HXLINE(  98)				_hx_tmp1 = (int)1;
            			}
            			else {
HXLINE(  98)				_hx_tmp1 = v1;
            			}
            		}
HXDLIN(  98)		this2 = ::Array_obj< Float >::__new(3)->init(0,hue)->init(1,_hx_tmp)->init(2,_hx_tmp1);
HXDLIN(  98)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,normalize,return )

::Array< Float > Hsl_Impl__obj::rotate(::Array< Float > this1,Float angle){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","rotate",0x75e1acbf,"thx.color._Hsl.Hsl_Impl_.rotate","thx/color/Hsl.hx",101,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
HXLINE( 101)		return ::thx::color::_Hsl::Hsl_Impl__obj::withHue(this1,(this1->__get((int)0) + angle));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,rotate,return )

::Array< Float > Hsl_Impl__obj::roundTo(::Array< Float > this1,Int decimals){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","roundTo",0x4b87a285,"thx.color._Hsl.Hsl_Impl_.roundTo","thx/color/Hsl.hx",104,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE( 104)		HX_VARI( Float,hue) = ::thx::Floats_obj::roundTo(this1->__get((int)0),decimals);
HXDLIN( 104)		HX_VARI( Float,saturation) = ::thx::Floats_obj::roundTo(this1->__get((int)1),decimals);
HXDLIN( 104)		HX_VARI( Float,lightness) = ::thx::Floats_obj::roundTo(this1->__get((int)2),decimals);
HXDLIN( 104)		return ::Array_obj< Float >::__new(3)->init(0,hue)->init(1,saturation)->init(2,lightness);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,roundTo,return )

 ::Dynamic Hsl_Impl__obj::split(::Array< Float > this1,hx::Null< Float >  __o_spread){
Float spread = __o_spread.Default(((Float)144.0));
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","split",0xccd15cf6,"thx.color._Hsl.Hsl_Impl_.split","thx/color/Hsl.hx",107,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(spread,"spread")
HXLINE( 107)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,-(spread)))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,spread)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,split,return )

 ::Dynamic Hsl_Impl__obj::square(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","square",0x03b36701,"thx.color._Hsl.Hsl_Impl_.square","thx/color/Hsl.hx",113,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 113)		return ::thx::color::_Hsl::Hsl_Impl__obj::tetrad(this1,(int)90);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,square,return )

 ::Dynamic Hsl_Impl__obj::tetrad(::Array< Float > this1,Float angle){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","tetrad",0x80a36e36,"thx.color._Hsl.Hsl_Impl_.tetrad","thx/color/Hsl.hx",116,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
HXLINE( 116)		return  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,(int)0))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,angle))
            			->setFixed(2,HX_("_2",f3,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,(int)180))
            			->setFixed(3,HX_("_3",f4,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,((int)180 + angle))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,tetrad,return )

 ::Dynamic Hsl_Impl__obj::triad(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","triad",0x618810ea,"thx.color._Hsl.Hsl_Impl_.triad","thx/color/Hsl.hx",124,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 124)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,(int)-120))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,(int)0))
            			->setFixed(2,HX_("_2",f3,52,00,00),::thx::color::_Hsl::Hsl_Impl__obj::rotate(this1,(int)120)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,triad,return )

::Array< Float > Hsl_Impl__obj::withAlpha(::Array< Float > this1,Float alpha){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","withAlpha",0x173fbb94,"thx.color._Hsl.Hsl_Impl_.withAlpha","thx/color/Hsl.hx",131,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 131)		HX_VARI( ::Array< Float >,channels) = this1->concat(::Array_obj< Float >::__new(1)->init(0,alpha));
HXDLIN( 131)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,withAlpha,return )

::Array< Float > Hsl_Impl__obj::withHue(::Array< Float > this1,Float newhue){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","withHue",0x1ddbcb6e,"thx.color._Hsl.Hsl_Impl_.withHue","thx/color/Hsl.hx",134,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newhue,"newhue")
HXLINE( 134)		return ::Array_obj< Float >::__new(3)->init(0,newhue)->init(1,this1->__get((int)1))->init(2,this1->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,withHue,return )

::Array< Float > Hsl_Impl__obj::withLightness(::Array< Float > this1,Float newlightness){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","withLightness",0x70ad9ba3,"thx.color._Hsl.Hsl_Impl_.withLightness","thx/color/Hsl.hx",137,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newlightness,"newlightness")
HXLINE( 137)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,newlightness);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,withLightness,return )

::Array< Float > Hsl_Impl__obj::withSaturation(::Array< Float > this1,Float newsaturation){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","withSaturation",0x96d5bbdc,"thx.color._Hsl.Hsl_Impl_.withSaturation","thx/color/Hsl.hx",140,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newsaturation,"newsaturation")
HXLINE( 140)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,newsaturation)->init(2,this1->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,withSaturation,return )

::String Hsl_Impl__obj::toCss3(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toCss3",0x2242988f,"thx.color._Hsl.Hsl_Impl_.toCss3","thx/color/Hsl.hx",143,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 143)		return ::thx::color::_Hsl::Hsl_Impl__obj::toString(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toCss3,return )

::String Hsl_Impl__obj::toString(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toString",0x23219810,"thx.color._Hsl.Hsl_Impl_.toString","thx/color/Hsl.hx",145,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 145)		return ((((((HX_("hsl(",07,d2,15,45) + this1->__get((int)0)) + HX_(",",2c,00,00,00)) + (this1->__get((int)1) * (int)100)) + HX_("%,",67,20,00,00)) + (this1->__get((int)2) * (int)100)) + HX_("%)",64,20,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toString,return )

Bool Hsl_Impl__obj::equals(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","equals",0x6ab454a3,"thx.color._Hsl.Hsl_Impl_.equals","thx/color/Hsl.hx",148,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 148)		return ::thx::color::_Hsl::Hsl_Impl__obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsl_Impl__obj,equals,return )

Bool Hsl_Impl__obj::nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","nearEquals",0x10efd9ab,"thx.color._Hsl.Hsl_Impl_.nearEquals","thx/color/Hsl.hx",151,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE( 151)		Bool _hx_tmp;
HXDLIN( 151)		Float _hx_tmp1 = ::Math_obj::abs(::thx::Floats_obj::angleDifference(this1->__get((int)0),other->__get((int)0),((Float)360.0)));
HXDLIN( 151)		if (hx::IsLessEq( _hx_tmp1,tolerance )) {
HXLINE( 151)			_hx_tmp = ::thx::Floats_obj::nearEquals(this1->__get((int)1),other->__get((int)1),tolerance);
            		}
            		else {
HXLINE( 151)			_hx_tmp = false;
            		}
HXDLIN( 151)		if (_hx_tmp) {
HXLINE( 151)			return ::thx::Floats_obj::nearEquals(this1->__get((int)2),other->__get((int)2),tolerance);
            		}
            		else {
HXLINE( 151)			return false;
            		}
HXDLIN( 151)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsl_Impl__obj,nearEquals,return )

::Array< Float > Hsl_Impl__obj::toLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toLab",0x5f766bae,"thx.color._Hsl.Hsl_Impl_.toLab","thx/color/Hsl.hx",154,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 154)		::Array< Float > _hx_tmp = ::thx::color::_Hsl::Hsl_Impl__obj::toXyz(this1);
HXDLIN( 154)		return ::thx::color::_Xyz::Xyz_Impl__obj::toLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toLab,return )

::Array< Float > Hsl_Impl__obj::toLCh(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toLCh",0x5f765192,"thx.color._Hsl.Hsl_Impl_.toLCh","thx/color/Hsl.hx",157,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 157)		::Array< Float > _hx_tmp = ::thx::color::_Hsl::Hsl_Impl__obj::toLab(this1);
HXDLIN( 157)		return ::thx::color::_Lab::Lab_Impl__obj::toLCh(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toLCh,return )

::Array< Float > Hsl_Impl__obj::toLuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toLuv",0x5f767d2e,"thx.color._Hsl.Hsl_Impl_.toLuv","thx/color/Hsl.hx",160,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 160)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toLuv(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toLuv,return )

::Array< Float > Hsl_Impl__obj::toCmy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toCmy",0x5f6fa1f0,"thx.color._Hsl.Hsl_Impl_.toCmy","thx/color/Hsl.hx",163,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 163)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmy(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toCmy,return )

::Array< Float > Hsl_Impl__obj::toCmyk(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toCmyk",0x223e107b,"thx.color._Hsl.Hsl_Impl_.toCmyk","thx/color/Hsl.hx",166,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 166)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmyk(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toCmyk,return )

::Array< Float > Hsl_Impl__obj::toCubeHelix(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toCubeHelix",0x3f9dad6a,"thx.color._Hsl.Hsl_Impl_.toCubeHelix","thx/color/Hsl.hx",169,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 169)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCubeHelixWithGamma(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toCubeHelix,return )

Float Hsl_Impl__obj::toGrey(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toGrey",0x24e6a4de,"thx.color._Hsl.Hsl_Impl_.toGrey","thx/color/Hsl.hx",172,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 172)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toGrey(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toGrey,return )

::Array< Float > Hsl_Impl__obj::toHsv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toHsv",0x5f73726c,"thx.color._Hsl.Hsl_Impl_.toHsv","thx/color/Hsl.hx",175,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 175)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsv(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toHsv,return )

Int Hsl_Impl__obj::toRgb(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toRgb",0x5f7afe6e,"thx.color._Hsl.Hsl_Impl_.toRgb","thx/color/Hsl.hx",178,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 178)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgb(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toRgb,return )

Int Hsl_Impl__obj::toRgba(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toRgba",0x2c23a233,"thx.color._Hsl.Hsl_Impl_.toRgba","thx/color/Hsl.hx",181,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 181)		::Array< Float > _hx_tmp = ::thx::color::_Hsl::Hsl_Impl__obj::toRgbxa(this1);
HXDLIN( 181)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toRgba,return )

::Array< Float > Hsl_Impl__obj::toRgbx(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toRgbx",0x2c23a24a,"thx.color._Hsl.Hsl_Impl_.toRgbx","thx/color/Hsl.hx",184,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 184)		return ::Array_obj< Float >::__new(3)->init(0,::thx::color::_Hsl::Hsl_Impl__obj::_c((this1->__get((int)0) + (int)120),this1->__get((int)1),this1->__get((int)2)))->init(1,::thx::color::_Hsl::Hsl_Impl__obj::_c(this1->__get((int)0),this1->__get((int)1),this1->__get((int)2)))->init(2,::thx::color::_Hsl::Hsl_Impl__obj::_c((this1->__get((int)0) - (int)120),this1->__get((int)1),this1->__get((int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toRgbx,return )

::Array< Float > Hsl_Impl__obj::toRgbxa(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toRgbxa",0x730a5ed7,"thx.color._Hsl.Hsl_Impl_.toRgbxa","thx/color/Hsl.hx",191,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 191)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toRgbxa,return )

::Array< Float > Hsl_Impl__obj::toHsla(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toHsla",0x2590a3bf,"thx.color._Hsl.Hsl_Impl_.toHsla","thx/color/Hsl.hx",194,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 194)		return ::thx::color::_Hsl::Hsl_Impl__obj::withAlpha(this1,((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toHsla,return )

::Array< Float > Hsl_Impl__obj::toHunterLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toHunterLab",0x0bcefe8e,"thx.color._Hsl.Hsl_Impl_.toHunterLab","thx/color/Hsl.hx",197,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 197)		::Array< Float > _hx_tmp = ::thx::color::_Hsl::Hsl_Impl__obj::toXyz(this1);
HXDLIN( 197)		return ::thx::color::_Xyz::Xyz_Impl__obj::toHunterLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toHunterLab,return )

Float Hsl_Impl__obj::toTemperature(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toTemperature",0x4e88a095,"thx.color._Hsl.Hsl_Impl_.toTemperature","thx/color/Hsl.hx",200,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 200)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toTemperature(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toTemperature,return )

::Array< Float > Hsl_Impl__obj::toXyz(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toXyz",0x5f7f9bba,"thx.color._Hsl.Hsl_Impl_.toXyz","thx/color/Hsl.hx",203,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 203)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toXyz(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toXyz,return )

::Array< Float > Hsl_Impl__obj::toYuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toYuv",0x5f805a7b,"thx.color._Hsl.Hsl_Impl_.toYuv","thx/color/Hsl.hx",206,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 206)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYuv(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toYuv,return )

::Array< Float > Hsl_Impl__obj::toYxy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","toYxy",0x5f805d1b,"thx.color._Hsl.Hsl_Impl_.toYxy","thx/color/Hsl.hx",209,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 209)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYxy(::thx::color::_Hsl::Hsl_Impl__obj::toRgbx(this1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,toYxy,return )

Float Hsl_Impl__obj::get_hue(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","get_hue",0xe53c4a6b,"thx.color._Hsl.Hsl_Impl_.get_hue","thx/color/Hsl.hx",212,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 212)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,get_hue,return )

Float Hsl_Impl__obj::get_saturation(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","get_saturation",0xd67bc67f,"thx.color._Hsl.Hsl_Impl_.get_saturation","thx/color/Hsl.hx",214,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 214)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,get_saturation,return )

Float Hsl_Impl__obj::get_lightness(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","get_lightness",0xa936f660,"thx.color._Hsl.Hsl_Impl_.get_lightness","thx/color/Hsl.hx",216,0x1e654494)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 216)		return this1->__get((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsl_Impl__obj,get_lightness,return )

Float Hsl_Impl__obj::_c(Float d,Float s,Float l){
            	HX_STACK_FRAME("thx.color._Hsl.Hsl_Impl_","_c",0xea2db788,"thx.color._Hsl.Hsl_Impl_._c","thx/color/Hsl.hx",219,0x1e654494)
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(l,"l")
HXLINE( 220)		HX_VAR( Float,m2);
HXDLIN( 220)		if ((l <= ((Float)0.5))) {
HXLINE( 220)			m2 = (l * ((int)1 + s));
            		}
            		else {
HXLINE( 220)			m2 = ((l + s) - (l * s));
            		}
HXDLIN( 220)		HX_VARI( Float,m1) = (((int)2 * l) - m2);
HXLINE( 223)		d = ::thx::Floats_obj::wrapCircular(d,(int)360);
HXLINE( 224)		if ((d < (int)60)) {
HXLINE( 225)			return (m1 + ((Float)((m2 - m1) * d) / (Float)(int)60));
            		}
            		else {
HXLINE( 226)			if ((d < (int)180)) {
HXLINE( 227)				return m2;
            			}
            			else {
HXLINE( 228)				if ((d < (int)240)) {
HXLINE( 229)					return (m1 + ((Float)((m2 - m1) * ((int)240 - d)) / (Float)(int)60));
            				}
            				else {
HXLINE( 231)					return m1;
            				}
            			}
            		}
HXLINE( 224)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsl_Impl__obj,_c,return )


Hsl_Impl__obj::Hsl_Impl__obj()
{
}

bool Hsl_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"_c") ) { outValue = _c_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { outValue = split_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"triad") ) { outValue = triad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLab") ) { outValue = toLab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLCh") ) { outValue = toLCh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLuv") ) { outValue = toLuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmy") ) { outValue = toCmy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsv") ) { outValue = toHsv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toXyz") ) { outValue = toXyz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYuv") ) { outValue = toYuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYxy") ) { outValue = toYxy_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"darker") ) { outValue = darker_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"square") ) { outValue = square_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tetrad") ) { outValue = tetrad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCss3") ) { outValue = toCss3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmyk") ) { outValue = toCmyk_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toGrey") ) { outValue = toGrey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbx") ) { outValue = toRgbx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsla") ) { outValue = toHsla_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lighter") ) { outValue = lighter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withHue") ) { outValue = withHue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hue") ) { outValue = get_hue_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"analogous") ) { outValue = analogous_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withAlpha") ) { outValue = withAlpha_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"complement") ) { outValue = complement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCubeHelix") ) { outValue = toCubeHelix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHunterLab") ) { outValue = toHunterLab_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"withLightness") ) { outValue = withLightness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toTemperature") ) { outValue = toTemperature_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_lightness") ) { outValue = get_lightness_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"withSaturation") ) { outValue = withSaturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_saturation") ) { outValue = get_saturation_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"interpolateWidest") ) { outValue = interpolateWidest_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Hsl_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Hsl_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Hsl_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Hsl_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Hsl_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Hsl_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Hsl_Impl__obj::__mClass;

static ::String Hsl_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("analogous","\x5d","\xc8","\x36","\x9f"),
	HX_HCSTRING("complement","\xe6","\x42","\xb4","\xfd"),
	HX_HCSTRING("darker","\x63","\x36","\x3a","\x21"),
	HX_HCSTRING("lighter","\xc3","\x4a","\xe3","\x19"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("interpolateWidest","\x15","\x07","\x3e","\x31"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	HX_HCSTRING("square","\x9d","\x00","\xf2","\x58"),
	HX_HCSTRING("tetrad","\xd2","\x07","\xe2","\xd5"),
	HX_HCSTRING("triad","\xce","\x9e","\x25","\x16"),
	HX_HCSTRING("withAlpha","\x78","\x0b","\x84","\xa5"),
	HX_HCSTRING("withHue","\x52","\x9a","\x63","\x5f"),
	HX_HCSTRING("withLightness","\x87","\xad","\x21","\x60"),
	HX_HCSTRING("withSaturation","\x78","\x51","\xf1","\x2c"),
	HX_HCSTRING("toCss3","\x2b","\x32","\x81","\x77"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("toLab","\x92","\xf9","\x13","\x14"),
	HX_HCSTRING("toLCh","\x76","\xdf","\x13","\x14"),
	HX_HCSTRING("toLuv","\x12","\x0b","\x14","\x14"),
	HX_HCSTRING("toCmy","\xd4","\x2f","\x0d","\x14"),
	HX_HCSTRING("toCmyk","\x17","\xaa","\x7c","\x77"),
	HX_HCSTRING("toCubeHelix","\x4e","\xbe","\x80","\x23"),
	HX_HCSTRING("toGrey","\x7a","\x3e","\x25","\x7a"),
	HX_HCSTRING("toHsv","\x50","\x00","\x11","\x14"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbx","\xe6","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("toHsla","\x5b","\x3d","\xcf","\x7a"),
	HX_HCSTRING("toHunterLab","\x72","\x0f","\xb2","\xef"),
	HX_HCSTRING("toTemperature","\x79","\xb2","\xfc","\x3d"),
	HX_HCSTRING("toXyz","\x9e","\x29","\x1d","\x14"),
	HX_HCSTRING("toYuv","\x5f","\xe8","\x1d","\x14"),
	HX_HCSTRING("toYxy","\xff","\xea","\x1d","\x14"),
	HX_HCSTRING("get_hue","\x4f","\x19","\xc4","\x26"),
	HX_HCSTRING("get_saturation","\x1b","\x5c","\x97","\x6c"),
	HX_HCSTRING("get_lightness","\x44","\x08","\xab","\x98"),
	HX_HCSTRING("_c","\x24","\x53","\x00","\x00"),
	::String(null())
};

void Hsl_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Hsl.Hsl_Impl_","\x8a","\x15","\xa8","\x0b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Hsl_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Hsl_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Hsl_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Hsl_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Hsl_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Hsl_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Hsl_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _Hsl
