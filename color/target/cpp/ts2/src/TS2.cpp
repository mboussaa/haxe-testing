// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_TS2
#include <TS2.h>
#endif
#ifndef INCLUDED_thx_color_TestLCh
#include <thx/color/TestLCh.h>
#endif
#ifndef INCLUDED_utest_Runner
#include <utest/Runner.h>
#endif
#ifndef INCLUDED_utest_ui_Report
#include <utest/ui/Report.h>
#endif
#ifndef INCLUDED_utest_ui_common_HeaderDisplayMode
#include <utest/ui/common/HeaderDisplayMode.h>
#endif
#ifndef INCLUDED_utest_ui_common_IReport
#include <utest/ui/common/IReport.h>
#endif
#ifndef INCLUDED_utest_ui_common_SuccessResultsDisplayMode
#include <utest/ui/common/SuccessResultsDisplayMode.h>
#endif


void TS2_obj::__construct() { }

Dynamic TS2_obj::__CreateEmpty() { return new TS2_obj; }

hx::ObjectPtr< TS2_obj > TS2_obj::__new()
{
	hx::ObjectPtr< TS2_obj > _hx_result = new TS2_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TS2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TS2_obj > _hx_result = new TS2_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TS2_obj::addTests( ::utest::Runner runner){
            	HX_STACK_FRAME("TS2","addTests",0x57cbabfb,"TS2.addTests","TS2.hx",7,0x816c62cb)
            	HX_STACK_ARG(runner,"runner")
HXLINE(   7)		runner->addCase( ::thx::color::TestLCh_obj::__new(),null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TS2_obj,addTests,(void))

void TS2_obj::main(){
            	HX_STACK_FRAME("TS2","main",0x029fe4b4,"TS2.main","TS2.hx",10,0x816c62cb)
HXLINE(  11)		HX_VARI(  ::utest::Runner,runner) =  ::utest::Runner_obj::__new();
HXLINE(  12)		::TS2_obj::addTests(runner);
HXLINE(  13)		::utest::ui::Report_obj::create(runner,null(),null());
HXLINE(  14)		runner->run();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TS2_obj,main,(void))


TS2_obj::TS2_obj()
{
}

bool TS2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addTests") ) { outValue = addTests_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TS2_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TS2_obj_sStaticStorageInfo = 0;
#endif

static void TS2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TS2_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TS2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TS2_obj::__mClass,"__mClass");
};

#endif

hx::Class TS2_obj::__mClass;

static ::String TS2_obj_sStaticFields[] = {
	HX_HCSTRING("addTests","\x00","\xa6","\xf2","\x86"),
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	::String(null())
};

void TS2_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("TS2","\xd3","\x05","\x40","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TS2_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TS2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TS2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TS2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TS2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TS2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TS2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

