// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif

namespace thx{
namespace color{
namespace parse{

void ColorInfo_obj::__construct(::String name,::Array< ::Dynamic> channels){
            	HX_STACK_FRAME("thx.color.parse.ColorInfo","new",0x04068c53,"thx.color.parse.ColorInfo.new","thx/color/parse/ColorParser.hx",136,0x24e60f6f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(channels,"channels")
HXLINE( 137)		this->name = name;
HXLINE( 138)		this->channels = channels;
            	}

Dynamic ColorInfo_obj::__CreateEmpty() { return new ColorInfo_obj; }

hx::ObjectPtr< ColorInfo_obj > ColorInfo_obj::__new(::String name,::Array< ::Dynamic> channels)
{
	hx::ObjectPtr< ColorInfo_obj > _hx_result = new ColorInfo_obj();
	_hx_result->__construct(name,channels);
	return _hx_result;
}

Dynamic ColorInfo_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColorInfo_obj > _hx_result = new ColorInfo_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

::String ColorInfo_obj::toString(){
            	HX_STACK_FRAME("thx.color.parse.ColorInfo","toString",0x74aee3d9,"thx.color.parse.ColorInfo.toString","thx/color/parse/ColorParser.hx",142,0x24e60f6f)
            	HX_STACK_THIS(this)
HXLINE( 142)		::String _hx_tmp = ((HX_("",00,00,00,00) + this->name) + HX_(", channels: ",6a,50,5e,6c));
HXDLIN( 142)		::String _hx_tmp1 = ::Std_obj::string(this->channels);
HXDLIN( 142)		return (_hx_tmp + _hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorInfo_obj,toString,return )


ColorInfo_obj::ColorInfo_obj()
{
}

void ColorInfo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColorInfo);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(channels,"channels");
	HX_MARK_END_CLASS();
}

void ColorInfo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(channels,"channels");
}

hx::Val ColorInfo_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"channels") ) { return hx::Val( channels); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ColorInfo_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"channels") ) { channels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ColorInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ColorInfo_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(ColorInfo_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(ColorInfo_obj,channels),HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ColorInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorInfo_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void ColorInfo_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColorInfo_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColorInfo_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColorInfo_obj::__mClass,"__mClass");
};

#endif

hx::Class ColorInfo_obj::__mClass;

void ColorInfo_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.parse.ColorInfo","\xe1","\x66","\x77","\xf1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ColorInfo_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColorInfo_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColorInfo_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColorInfo_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorInfo_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace parse
