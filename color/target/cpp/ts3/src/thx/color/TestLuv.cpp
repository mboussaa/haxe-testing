// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_color_TestLuv
#include <thx/color/TestLuv.h>
#endif
#ifndef INCLUDED_thx_color__Luv_Luv_Impl_
#include <thx/color/_Luv/Luv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestLuv_obj::__construct(){
            	HX_STACK_FRAME("thx.color.TestLuv","new",0xf00ad4f8,"thx.color.TestLuv.new","thx/color/TestLuv.hx",6,0xf71f2eba)
            	HX_STACK_THIS(this)
            	}

Dynamic TestLuv_obj::__CreateEmpty() { return new TestLuv_obj; }

hx::ObjectPtr< TestLuv_obj > TestLuv_obj::__new()
{
	hx::ObjectPtr< TestLuv_obj > _hx_result = new TestLuv_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestLuv_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestLuv_obj > _hx_result = new TestLuv_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestLuv_obj::testBasics(){
            	HX_STACK_FRAME("thx.color.TestLuv","testBasics",0xb304b25f,"thx.color.TestLuv.testBasics","thx/color/TestLuv.hx",8,0xf71f2eba)
            	HX_STACK_THIS(this)
HXLINE(   9)		HX_VARI( ::Array< Float >,color) = ::thx::color::_Luv::Luv_Impl__obj::normalize(::Array_obj< Float >::__new(3)->init(0,((Float)0.5))->init(1,((Float)0.4))->init(2,((Float)0.6)));
HXLINE(  10)		::utest::Assert_obj::equals(((Float)0.5),color->__get((int)0),null(),hx::SourceInfo(HX_("TestLuv.hx",23,91,34,ea),10,HX_("thx.color.TestLuv",06,39,57,0e),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  11)		::utest::Assert_obj::equals(((Float)0.4),color->__get((int)1),null(),hx::SourceInfo(HX_("TestLuv.hx",23,91,34,ea),11,HX_("thx.color.TestLuv",06,39,57,0e),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  12)		::utest::Assert_obj::equals(((Float)0.6),color->__get((int)2),null(),hx::SourceInfo(HX_("TestLuv.hx",23,91,34,ea),12,HX_("thx.color.TestLuv",06,39,57,0e),HX_("testBasics",f7,73,1f,6e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLuv_obj,testBasics,(void))

void TestLuv_obj::testString(){
            	HX_STACK_FRAME("thx.color.TestLuv","testString",0x6f09ad2b,"thx.color.TestLuv.testString","thx/color/TestLuv.hx",17,0xf71f2eba)
            	HX_STACK_THIS(this)
HXLINE(  17)		::utest::Assert_obj::equals(HX_("cieluv(0.5,0.4,0.6)",b6,1a,aa,e9),::thx::color::_Luv::Luv_Impl__obj::toString(::thx::color::_Luv::Luv_Impl__obj::normalize(::Array_obj< Float >::__new(3)->init(0,((Float)0.5))->init(1,((Float)0.4))->init(2,((Float)0.6)))),null(),hx::SourceInfo(HX_("TestLuv.hx",23,91,34,ea),17,HX_("thx.color.TestLuv",06,39,57,0e),HX_("testString",c3,6e,24,2a)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLuv_obj,testString,(void))

void TestLuv_obj::testParse(){
            	HX_STACK_FRAME("thx.color.TestLuv","testParse",0x9fe85519,"thx.color.TestLuv.testParse","thx/color/TestLuv.hx",20,0xf71f2eba)
            	HX_STACK_THIS(this)
HXLINE(  21)		HX_VARI( ::Array< Float >,color) = ::thx::color::_Luv::Luv_Impl__obj::fromString(HX_("cieluv(0.5,0.4,0.6)",b6,1a,aa,e9));
HXLINE(  22)		::utest::Assert_obj::equals(HX_("cieluv(0.5,0.4,0.6)",b6,1a,aa,e9),::thx::color::_Luv::Luv_Impl__obj::toString(color),null(),hx::SourceInfo(HX_("TestLuv.hx",23,91,34,ea),22,HX_("thx.color.TestLuv",06,39,57,0e),HX_("testParse",81,ce,57,86)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLuv_obj,testParse,(void))

void TestLuv_obj::testFromFloat(){
            	HX_STACK_FRAME("thx.color.TestLuv","testFromFloat",0x428ddfb8,"thx.color.TestLuv.testFromFloat","thx/color/TestLuv.hx",25,0xf71f2eba)
            	HX_STACK_THIS(this)
HXLINE(  26)		HX_VARI( ::Array< Float >,s) = ::thx::color::_Luv::Luv_Impl__obj::fromString(HX_("cieluv(0.5,0.4,0.6)",b6,1a,aa,e9));
HXDLIN(  26)		HX_VARI( ::Array< Float >,f) = ::thx::color::_Luv::Luv_Impl__obj::fromFloats(::Array_obj< Float >::__new(3)->init(0,((Float)0.5))->init(1,((Float)0.4))->init(2,((Float)0.6)));
HXLINE(  28)		Bool _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::equals(s,f);
HXDLIN(  28)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestLuv.hx",23,91,34,ea),28,HX_("thx.color.TestLuv",06,39,57,0e),HX_("testFromFloat",20,2d,5a,ea)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLuv_obj,testFromFloat,(void))

void TestLuv_obj::testXyz(){
            	HX_STACK_FRAME("thx.color.TestLuv","testXyz",0x743b17bf,"thx.color.TestLuv.testXyz","thx/color/TestLuv.hx",31,0xf71f2eba)
            	HX_STACK_THIS(this)
HXLINE(  32)		HX_VARI( ::Array< Float >,luv) = ::Array_obj< Float >::__new(3)->init(0,((Float)0.5))->init(1,((Float)0.4))->init(2,((Float)0.6));
HXDLIN(  32)		HX_VARI( ::Array< Float >,xyz) = ::thx::color::_Luv::Luv_Impl__obj::toXyz(luv);
HXLINE(  34)		::thx::color::_Xyz::Xyz_Impl__obj::toLuv(xyz);
HXLINE(  35)		Bool _hx_tmp = ::thx::color::_Luv::Luv_Impl__obj::nearEquals(luv,::thx::color::_Xyz::Xyz_Impl__obj::toLuv(xyz),null());
HXDLIN(  35)		::utest::Assert_obj::isTrue(_hx_tmp,null(),hx::SourceInfo(HX_("TestLuv.hx",23,91,34,ea),35,HX_("thx.color.TestLuv",06,39,57,0e),HX_("testXyz",27,e7,c9,bd)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLuv_obj,testXyz,(void))


TestLuv_obj::TestLuv_obj()
{
}

hx::Val TestLuv_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"testXyz") ) { return hx::Val( testXyz_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testParse") ) { return hx::Val( testParse_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		if (HX_FIELD_EQ(inName,"testString") ) { return hx::Val( testString_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testFromFloat") ) { return hx::Val( testFromFloat_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestLuv_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestLuv_obj_sStaticStorageInfo = 0;
#endif

static ::String TestLuv_obj_sMemberFields[] = {
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testString","\xc3","\x6e","\x24","\x2a"),
	HX_HCSTRING("testParse","\x81","\xce","\x57","\x86"),
	HX_HCSTRING("testFromFloat","\x20","\x2d","\x5a","\xea"),
	HX_HCSTRING("testXyz","\x27","\xe7","\xc9","\xbd"),
	::String(null()) };

static void TestLuv_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestLuv_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestLuv_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestLuv_obj::__mClass,"__mClass");
};

#endif

hx::Class TestLuv_obj::__mClass;

void TestLuv_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestLuv","\x06","\x39","\x57","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestLuv_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestLuv_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestLuv_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestLuv_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestLuv_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestLuv_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
