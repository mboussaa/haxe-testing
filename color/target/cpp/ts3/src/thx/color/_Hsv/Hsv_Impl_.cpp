// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__Hsv_Hsv_Impl_
#include <thx/color/_Hsv/Hsv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _Hsv{

void Hsv_Impl__obj::__construct() { }

Dynamic Hsv_Impl__obj::__CreateEmpty() { return new Hsv_Impl__obj; }

hx::ObjectPtr< Hsv_Impl__obj > Hsv_Impl__obj::__new()
{
	hx::ObjectPtr< Hsv_Impl__obj > _hx_result = new Hsv_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Hsv_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Hsv_Impl__obj > _hx_result = new Hsv_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Hsv_Impl__obj::create(Float hue,Float saturation,Float value){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","create",0x797d63cc,"thx.color._Hsv.Hsv_Impl_.create","thx/color/Hsv.hx",31,0x250166ca)
            	HX_STACK_ARG(hue,"hue")
            	HX_STACK_ARG(saturation,"saturation")
            	HX_STACK_ARG(value,"value")
HXLINE(  31)		return ::Array_obj< Float >::__new(3)->init(0,hue)->init(1,saturation)->init(2,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsv_Impl__obj,create,return )

::Array< Float > Hsv_Impl__obj::fromFloats(::Array< Float > arr){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","fromFloats",0xfa0ecd31,"thx.color._Hsv.Hsv_Impl_.fromFloats","thx/color/Hsv.hx",33,0x250166ca)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  34)		::thx::ArrayFloats_obj::resize(arr,(int)3,null());
HXLINE(  35)		return ::Array_obj< Float >::__new(3)->init(0,arr->__get((int)0))->init(1,arr->__get((int)1))->init(2,arr->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,fromFloats,return )

::Array< Float > Hsv_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","fromString",0xc9e8d2ab,"thx.color._Hsv.Hsv_Impl_.fromString","thx/color/Hsv.hx",38,0x250166ca)
            	HX_STACK_ARG(color,"color")
HXLINE(  39)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseColor(color);
HXLINE(  40)		if (hx::IsNull( info )) {
HXLINE(  41)			return null();
            		}
HXLINE(  43)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  43)			if ((info->name == HX_("hsv",0b,4f,4f,00))) {
HXLINE(  45)				HX_VARI( ::Array< Float >,channels) = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXLINE(  43)				return channels;
            			}
            			else {
HXLINE(  43)				return null();
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  43)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  43)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,fromString,return )

::Array< Float > Hsv_Impl__obj::_new(::Array< Float > channels){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","_new",0x74153e31,"thx.color._Hsv.Hsv_Impl_._new","thx/color/Hsv.hx",51,0x250166ca)
            	HX_STACK_ARG(channels,"channels")
HXLINE(  51)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,_new,return )

 ::Dynamic Hsv_Impl__obj::analogous(::Array< Float > this1,hx::Null< Float >  __o_spread){
Float spread = __o_spread.Default(((Float)30.0));
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","analogous",0x1f2aad8d,"thx.color._Hsv.Hsv_Impl_.analogous","thx/color/Hsv.hx",55,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(spread,"spread")
HXLINE(  55)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,-(spread)))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,spread)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,analogous,return )

::Array< Float > Hsv_Impl__obj::complement(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","complement",0x7328e7b6,"thx.color._Hsv.Hsv_Impl_.complement","thx/color/Hsv.hx",61,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  61)		return ::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,(int)180);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,complement,return )

::Array< Float > Hsv_Impl__obj::interpolate(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","interpolate",0x6fce65f1,"thx.color._Hsv.Hsv_Impl_.interpolate","thx/color/Hsv.hx",64,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  64)		return ::Array_obj< Float >::__new(3)->init(0,::thx::Floats_obj::interpolateAngle(t,this1->__get((int)0),other->__get((int)0),null()))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsv_Impl__obj,interpolate,return )

::Array< Float > Hsv_Impl__obj::interpolateWidest(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","interpolateWidest",0xdc629c45,"thx.color._Hsv.Hsv_Impl_.interpolateWidest","thx/color/Hsv.hx",71,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  71)		return ::Array_obj< Float >::__new(3)->init(0,::thx::Floats_obj::interpolateAngleWidest(t,this1->__get((int)0),other->__get((int)0),null()))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsv_Impl__obj,interpolateWidest,return )

::Array< Float > Hsv_Impl__obj::min(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","min",0xd861f2c2,"thx.color._Hsv.Hsv_Impl_.min","thx/color/Hsv.hx",78,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  78)		HX_VARI( Float,hue) = ::Math_obj::min(this1->__get((int)0),other->__get((int)0));
HXDLIN(  78)		HX_VARI( Float,saturation) = ::Math_obj::min(this1->__get((int)1),other->__get((int)1));
HXDLIN(  78)		HX_VARI( Float,value) = ::Math_obj::min(this1->__get((int)2),other->__get((int)2));
HXDLIN(  78)		return ::Array_obj< Float >::__new(3)->init(0,hue)->init(1,saturation)->init(2,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,min,return )

::Array< Float > Hsv_Impl__obj::max(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","max",0xd861ebd4,"thx.color._Hsv.Hsv_Impl_.max","thx/color/Hsv.hx",81,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  81)		HX_VARI( Float,hue) = ::Math_obj::max(this1->__get((int)0),other->__get((int)0));
HXDLIN(  81)		HX_VARI( Float,saturation) = ::Math_obj::max(this1->__get((int)1),other->__get((int)1));
HXDLIN(  81)		HX_VARI( Float,value) = ::Math_obj::max(this1->__get((int)2),other->__get((int)2));
HXDLIN(  81)		return ::Array_obj< Float >::__new(3)->init(0,hue)->init(1,saturation)->init(2,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,max,return )

::Array< Float > Hsv_Impl__obj::normalize(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","normalize",0x2b951cbd,"thx.color._Hsv.Hsv_Impl_.normalize","thx/color/Hsv.hx",84,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  84)		HX_VARI( Float,hue) = ::thx::Floats_obj::wrapCircular(this1->__get((int)0),(int)360);
HXDLIN(  84)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXDLIN(  84)		HX_VARI( Float,v) = this1->__get((int)1);
HXDLIN(  84)		Float _hx_tmp;
HXDLIN(  84)		if ((v < (int)0)) {
HXLINE(  84)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  84)			if ((v > (int)1)) {
HXLINE(  84)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(  84)				_hx_tmp = v;
            			}
            		}
HXDLIN(  84)		HX_VARI_NAME( Float,v1,"v") = this1->__get((int)2);
HXDLIN(  84)		Float _hx_tmp1;
HXDLIN(  84)		if ((v1 < (int)0)) {
HXLINE(  84)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE(  84)			if ((v1 > (int)1)) {
HXLINE(  84)				_hx_tmp1 = (int)1;
            			}
            			else {
HXLINE(  84)				_hx_tmp1 = v1;
            			}
            		}
HXDLIN(  84)		this2 = ::Array_obj< Float >::__new(3)->init(0,hue)->init(1,_hx_tmp)->init(2,_hx_tmp1);
HXDLIN(  84)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,normalize,return )

::Array< Float > Hsv_Impl__obj::rotate(::Array< Float > this1,Float angle){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","rotate",0xc88e432b,"thx.color._Hsv.Hsv_Impl_.rotate","thx/color/Hsv.hx",87,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
HXLINE(  87)		return ::thx::color::_Hsv::Hsv_Impl__obj::normalize(::thx::color::_Hsv::Hsv_Impl__obj::withHue(this1,(this1->__get((int)0) + angle)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,rotate,return )

::Array< Float > Hsv_Impl__obj::roundTo(::Array< Float > this1,Int decimals){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","roundTo",0x4fdeaa99,"thx.color._Hsv.Hsv_Impl_.roundTo","thx/color/Hsv.hx",90,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE(  90)		HX_VARI( Float,hue) = ::thx::Floats_obj::roundTo(this1->__get((int)0),decimals);
HXDLIN(  90)		HX_VARI( Float,saturation) = ::thx::Floats_obj::roundTo(this1->__get((int)1),decimals);
HXDLIN(  90)		HX_VARI( Float,value) = ::thx::Floats_obj::roundTo(this1->__get((int)2),decimals);
HXDLIN(  90)		return ::Array_obj< Float >::__new(3)->init(0,hue)->init(1,saturation)->init(2,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,roundTo,return )

 ::Dynamic Hsv_Impl__obj::split(::Array< Float > this1,hx::Null< Float >  __o_spread){
Float spread = __o_spread.Default(((Float)144.0));
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","split",0xa3dc780a,"thx.color._Hsv.Hsv_Impl_.split","thx/color/Hsv.hx",93,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(spread,"spread")
HXLINE(  93)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,-(spread)))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,spread)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,split,return )

 ::Dynamic Hsv_Impl__obj::square(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","square",0x565ffd6d,"thx.color._Hsv.Hsv_Impl_.square","thx/color/Hsv.hx",99,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  99)		return ::thx::color::_Hsv::Hsv_Impl__obj::tetrad(this1,(int)90);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,square,return )

 ::Dynamic Hsv_Impl__obj::tetrad(::Array< Float > this1,Float angle){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","tetrad",0xd35004a2,"thx.color._Hsv.Hsv_Impl_.tetrad","thx/color/Hsv.hx",102,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(angle,"angle")
HXLINE( 102)		return  ::Dynamic(hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,(int)0))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,angle))
            			->setFixed(2,HX_("_2",f3,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,(int)180))
            			->setFixed(3,HX_("_3",f4,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,((int)180 + angle))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,tetrad,return )

 ::Dynamic Hsv_Impl__obj::triad(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","triad",0x38932bfe,"thx.color._Hsv.Hsv_Impl_.triad","thx/color/Hsv.hx",110,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 110)		return  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("_0",f1,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,(int)-120))
            			->setFixed(1,HX_("_1",f2,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,(int)0))
            			->setFixed(2,HX_("_2",f3,52,00,00),::thx::color::_Hsv::Hsv_Impl__obj::rotate(this1,(int)120)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,triad,return )

::Array< Float > Hsv_Impl__obj::withAlpha(::Array< Float > this1,Float alpha){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","withAlpha",0x2577f0a8,"thx.color._Hsv.Hsv_Impl_.withAlpha","thx/color/Hsv.hx",117,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 117)		HX_VARI( ::Array< Float >,channels) = this1->concat(::Array_obj< Float >::__new(1)->init(0,alpha));
HXDLIN( 117)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,withAlpha,return )

::Array< Float > Hsv_Impl__obj::withHue(::Array< Float > this1,Float newhue){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","withHue",0x2232d382,"thx.color._Hsv.Hsv_Impl_.withHue","thx/color/Hsv.hx",120,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newhue,"newhue")
HXLINE( 120)		return ::Array_obj< Float >::__new(3)->init(0,newhue)->init(1,this1->__get((int)1))->init(2,this1->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,withHue,return )

::Array< Float > Hsv_Impl__obj::withValue(::Array< Float > this1,Float newvalue){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","withValue",0x3599c8bb,"thx.color._Hsv.Hsv_Impl_.withValue","thx/color/Hsv.hx",123,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newvalue,"newvalue")
HXLINE( 123)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,newvalue);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,withValue,return )

::Array< Float > Hsv_Impl__obj::withSaturation(::Array< Float > this1,Float newsaturation){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","withSaturation",0xe6e09e48,"thx.color._Hsv.Hsv_Impl_.withSaturation","thx/color/Hsv.hx",126,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newsaturation,"newsaturation")
HXLINE( 126)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,newsaturation)->init(2,this1->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,withSaturation,return )

::String Hsv_Impl__obj::toString(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toString",0xeaf1a17c,"thx.color._Hsv.Hsv_Impl_.toString","thx/color/Hsv.hx",129,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 129)		return ((((((HX_("hsv(",bd,da,15,45) + this1->__get((int)0)) + HX_(",",2c,00,00,00)) + (this1->__get((int)1) * (int)100)) + HX_("%,",67,20,00,00)) + (this1->__get((int)2) * (int)100)) + HX_("%)",64,20,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toString,return )

Bool Hsv_Impl__obj::equals(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","equals",0xbd60eb0f,"thx.color._Hsv.Hsv_Impl_.equals","thx/color/Hsv.hx",132,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 132)		return ::thx::color::_Hsv::Hsv_Impl__obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Hsv_Impl__obj,equals,return )

Bool Hsv_Impl__obj::nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","nearEquals",0x73e61617,"thx.color._Hsv.Hsv_Impl_.nearEquals","thx/color/Hsv.hx",135,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE( 135)		Bool _hx_tmp;
HXDLIN( 135)		Float _hx_tmp1 = ::Math_obj::abs(::thx::Floats_obj::angleDifference(this1->__get((int)0),other->__get((int)0),((Float)360.0)));
HXDLIN( 135)		if (hx::IsLessEq( _hx_tmp1,tolerance )) {
HXLINE( 135)			_hx_tmp = ::thx::Floats_obj::nearEquals(this1->__get((int)1),other->__get((int)1),tolerance);
            		}
            		else {
HXLINE( 135)			_hx_tmp = false;
            		}
HXDLIN( 135)		if (_hx_tmp) {
HXLINE( 135)			return ::thx::Floats_obj::nearEquals(this1->__get((int)2),other->__get((int)2),tolerance);
            		}
            		else {
HXLINE( 135)			return false;
            		}
HXDLIN( 135)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Hsv_Impl__obj,nearEquals,return )

::Array< Float > Hsv_Impl__obj::toLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toLab",0x368186c2,"thx.color._Hsv.Hsv_Impl_.toLab","thx/color/Hsv.hx",138,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 138)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toXyz(this1);
HXDLIN( 138)		return ::thx::color::_Xyz::Xyz_Impl__obj::toLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toLab,return )

::Array< Float > Hsv_Impl__obj::toLCh(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toLCh",0x36816ca6,"thx.color._Hsv.Hsv_Impl_.toLCh","thx/color/Hsv.hx",141,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 141)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toLab(this1);
HXDLIN( 141)		return ::thx::color::_Lab::Lab_Impl__obj::toLCh(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toLCh,return )

::Array< Float > Hsv_Impl__obj::toLuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toLuv",0x36819842,"thx.color._Hsv.Hsv_Impl_.toLuv","thx/color/Hsv.hx",144,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 144)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 144)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toLuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toLuv,return )

::Array< Float > Hsv_Impl__obj::toCmy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toCmy",0x367abd04,"thx.color._Hsv.Hsv_Impl_.toCmy","thx/color/Hsv.hx",147,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 147)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 147)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toCmy,return )

::Array< Float > Hsv_Impl__obj::toCmyk(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toCmyk",0x74eaa6e7,"thx.color._Hsv.Hsv_Impl_.toCmyk","thx/color/Hsv.hx",150,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 150)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 150)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmyk(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toCmyk,return )

::Array< Float > Hsv_Impl__obj::toCubeHelix(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toCubeHelix",0x741c4f7e,"thx.color._Hsv.Hsv_Impl_.toCubeHelix","thx/color/Hsv.hx",153,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 153)		HX_VARI_NAME( ::Array< Float >,this2,"this") = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 153)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCubeHelixWithGamma(this2,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toCubeHelix,return )

Float Hsv_Impl__obj::toGrey(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toGrey",0x77933b4a,"thx.color._Hsv.Hsv_Impl_.toGrey","thx/color/Hsv.hx",156,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 156)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 156)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toGrey(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toGrey,return )

::Array< Float > Hsv_Impl__obj::toHsl(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toHsl",0x367e8d76,"thx.color._Hsv.Hsv_Impl_.toHsl","thx/color/Hsv.hx",159,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 159)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 159)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsl(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toHsl,return )

::Array< Float > Hsv_Impl__obj::toHsva(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toHsva",0x783d42e1,"thx.color._Hsv.Hsv_Impl_.toHsva","thx/color/Hsv.hx",162,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 162)		return ::thx::color::_Hsv::Hsv_Impl__obj::withAlpha(this1,((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toHsva,return )

::Array< Float > Hsv_Impl__obj::toHunterLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toHunterLab",0x404da0a2,"thx.color._Hsv.Hsv_Impl_.toHunterLab","thx/color/Hsv.hx",165,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 165)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toXyz(this1);
HXDLIN( 165)		return ::thx::color::_Xyz::Xyz_Impl__obj::toHunterLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toHunterLab,return )

Int Hsv_Impl__obj::toRgb(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toRgb",0x36861982,"thx.color._Hsv.Hsv_Impl_.toRgb","thx/color/Hsv.hx",168,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 168)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 168)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgb(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toRgb,return )

Int Hsv_Impl__obj::toRgba(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toRgba",0x7ed0389f,"thx.color._Hsv.Hsv_Impl_.toRgba","thx/color/Hsv.hx",171,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 171)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbxa(this1);
HXDLIN( 171)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toRgba,return )

::Array< Float > Hsv_Impl__obj::toRgbx(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toRgbx",0x7ed038b6,"thx.color._Hsv.Hsv_Impl_.toRgbx","thx/color/Hsv.hx",173,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 174)		if ((this1->__get((int)1) == (int)0)) {
HXLINE( 175)			return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)2))->init(1,this1->__get((int)2))->init(2,this1->__get((int)2));
            		}
HXLINE( 177)		HX_VAR( Float,r);
HXDLIN( 177)		HX_VAR( Float,g);
HXDLIN( 177)		HX_VAR( Float,b);
HXDLIN( 177)		HX_VAR( Int,i);
HXDLIN( 177)		HX_VAR( Float,f);
HXDLIN( 177)		HX_VAR( Float,p);
HXDLIN( 177)		HX_VAR( Float,q);
HXDLIN( 177)		HX_VAR( Float,t);
HXLINE( 178)		HX_VARI( Float,h) = ((Float)this1->__get((int)0) / (Float)(int)60);
HXLINE( 180)		i = ::Math_obj::floor(h);
HXLINE( 181)		f = (h - i);
HXLINE( 182)		p = (this1->__get((int)2) * ((int)1 - this1->__get((int)1)));
HXLINE( 183)		q = (this1->__get((int)2) * ((int)1 - (f * this1->__get((int)1))));
HXLINE( 184)		t = (this1->__get((int)2) * ((int)1 - (((int)1 - f) * this1->__get((int)1))));
HXLINE( 186)		switch((int)(i)){
            			case (int)0: {
HXLINE( 187)				r = this1->__get((int)2);
HXDLIN( 187)				g = t;
HXDLIN( 187)				b = p;
            			}
            			break;
            			case (int)1: {
HXLINE( 188)				r = q;
HXDLIN( 188)				g = this1->__get((int)2);
HXDLIN( 188)				b = p;
            			}
            			break;
            			case (int)2: {
HXLINE( 189)				r = p;
HXDLIN( 189)				g = this1->__get((int)2);
HXDLIN( 189)				b = t;
            			}
            			break;
            			case (int)3: {
HXLINE( 190)				r = p;
HXDLIN( 190)				g = q;
HXDLIN( 190)				b = this1->__get((int)2);
            			}
            			break;
            			case (int)4: {
HXLINE( 191)				r = t;
HXDLIN( 191)				g = p;
HXDLIN( 191)				b = this1->__get((int)2);
            			}
            			break;
            			default:{
HXLINE( 192)				r = this1->__get((int)2);
HXDLIN( 192)				g = p;
HXDLIN( 192)				b = q;
            			}
            		}
HXLINE( 195)		return ::Array_obj< Float >::__new(3)->init(0,r)->init(1,g)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toRgbx,return )

::Array< Float > Hsv_Impl__obj::toRgbxa(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toRgbxa",0x776166eb,"thx.color._Hsv.Hsv_Impl_.toRgbxa","thx/color/Hsv.hx",199,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 199)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 199)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toRgbxa,return )

Float Hsv_Impl__obj::toTemperature(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toTemperature",0x9982efa9,"thx.color._Hsv.Hsv_Impl_.toTemperature","thx/color/Hsv.hx",202,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 202)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 202)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toTemperature(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toTemperature,return )

::Array< Float > Hsv_Impl__obj::toXyz(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toXyz",0x368ab6ce,"thx.color._Hsv.Hsv_Impl_.toXyz","thx/color/Hsv.hx",205,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 205)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 205)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toXyz(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toXyz,return )

::Array< Float > Hsv_Impl__obj::toYuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toYuv",0x368b758f,"thx.color._Hsv.Hsv_Impl_.toYuv","thx/color/Hsv.hx",208,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 208)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 208)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toYuv,return )

::Array< Float > Hsv_Impl__obj::toYxy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","toYxy",0x368b782f,"thx.color._Hsv.Hsv_Impl_.toYxy","thx/color/Hsv.hx",211,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 211)		::Array< Float > _hx_tmp = ::thx::color::_Hsv::Hsv_Impl__obj::toRgbx(this1);
HXDLIN( 211)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYxy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,toYxy,return )

Float Hsv_Impl__obj::get_hue(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","get_hue",0xe993527f,"thx.color._Hsv.Hsv_Impl_.get_hue","thx/color/Hsv.hx",214,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 214)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,get_hue,return )

Float Hsv_Impl__obj::get_saturation(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","get_saturation",0x2686a8eb,"thx.color._Hsv.Hsv_Impl_.get_saturation","thx/color/Hsv.hx",216,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 216)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,get_saturation,return )

Float Hsv_Impl__obj::get_value(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Hsv.Hsv_Impl_","get_value",0xf555c0f8,"thx.color._Hsv.Hsv_Impl_.get_value","thx/color/Hsv.hx",218,0x250166ca)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 218)		return this1->__get((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Hsv_Impl__obj,get_value,return )


Hsv_Impl__obj::Hsv_Impl__obj()
{
}

bool Hsv_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { outValue = split_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"triad") ) { outValue = triad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLab") ) { outValue = toLab_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLCh") ) { outValue = toLCh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLuv") ) { outValue = toLuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmy") ) { outValue = toCmy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsl") ) { outValue = toHsl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toXyz") ) { outValue = toXyz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYuv") ) { outValue = toYuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYxy") ) { outValue = toYxy_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"square") ) { outValue = square_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tetrad") ) { outValue = tetrad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmyk") ) { outValue = toCmyk_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toGrey") ) { outValue = toGrey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsva") ) { outValue = toHsva_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbx") ) { outValue = toRgbx_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withHue") ) { outValue = withHue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_hue") ) { outValue = get_hue_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"analogous") ) { outValue = analogous_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withAlpha") ) { outValue = withAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withValue") ) { outValue = withValue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_value") ) { outValue = get_value_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"complement") ) { outValue = complement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCubeHelix") ) { outValue = toCubeHelix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHunterLab") ) { outValue = toHunterLab_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toTemperature") ) { outValue = toTemperature_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"withSaturation") ) { outValue = withSaturation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_saturation") ) { outValue = get_saturation_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"interpolateWidest") ) { outValue = interpolateWidest_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Hsv_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Hsv_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Hsv_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Hsv_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Hsv_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Hsv_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Hsv_Impl__obj::__mClass;

static ::String Hsv_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("analogous","\x5d","\xc8","\x36","\x9f"),
	HX_HCSTRING("complement","\xe6","\x42","\xb4","\xfd"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("interpolateWidest","\x15","\x07","\x3e","\x31"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	HX_HCSTRING("square","\x9d","\x00","\xf2","\x58"),
	HX_HCSTRING("tetrad","\xd2","\x07","\xe2","\xd5"),
	HX_HCSTRING("triad","\xce","\x9e","\x25","\x16"),
	HX_HCSTRING("withAlpha","\x78","\x0b","\x84","\xa5"),
	HX_HCSTRING("withHue","\x52","\x9a","\x63","\x5f"),
	HX_HCSTRING("withValue","\x8b","\xe3","\xa5","\xb5"),
	HX_HCSTRING("withSaturation","\x78","\x51","\xf1","\x2c"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("toLab","\x92","\xf9","\x13","\x14"),
	HX_HCSTRING("toLCh","\x76","\xdf","\x13","\x14"),
	HX_HCSTRING("toLuv","\x12","\x0b","\x14","\x14"),
	HX_HCSTRING("toCmy","\xd4","\x2f","\x0d","\x14"),
	HX_HCSTRING("toCmyk","\x17","\xaa","\x7c","\x77"),
	HX_HCSTRING("toCubeHelix","\x4e","\xbe","\x80","\x23"),
	HX_HCSTRING("toGrey","\x7a","\x3e","\x25","\x7a"),
	HX_HCSTRING("toHsl","\x46","\x00","\x11","\x14"),
	HX_HCSTRING("toHsva","\x11","\x46","\xcf","\x7a"),
	HX_HCSTRING("toHunterLab","\x72","\x0f","\xb2","\xef"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbx","\xe6","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("toTemperature","\x79","\xb2","\xfc","\x3d"),
	HX_HCSTRING("toXyz","\x9e","\x29","\x1d","\x14"),
	HX_HCSTRING("toYuv","\x5f","\xe8","\x1d","\x14"),
	HX_HCSTRING("toYxy","\xff","\xea","\x1d","\x14"),
	HX_HCSTRING("get_hue","\x4f","\x19","\xc4","\x26"),
	HX_HCSTRING("get_saturation","\x1b","\x5c","\x97","\x6c"),
	HX_HCSTRING("get_value","\xc8","\xdb","\x61","\x75"),
	::String(null())
};

void Hsv_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Hsv.Hsv_Impl_","\x9e","\xe9","\x2e","\xb4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Hsv_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Hsv_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Hsv_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Hsv_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Hsv_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Hsv_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Hsv_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _Hsv
