// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_ArrayInts
#include <thx/ArrayInts.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_color__Hsl_Hsl_Impl_
#include <thx/color/_Hsl/Hsl_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Hsv_Hsv_Impl_
#include <thx/color/_Hsv/Hsv_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgba_Rgba_Impl_
#include <thx/color/_Rgba/Rgba_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif

namespace thx{
namespace color{
namespace _Rgbxa{

void Rgbxa_Impl__obj::__construct() { }

Dynamic Rgbxa_Impl__obj::__CreateEmpty() { return new Rgbxa_Impl__obj; }

hx::ObjectPtr< Rgbxa_Impl__obj > Rgbxa_Impl__obj::__new()
{
	hx::ObjectPtr< Rgbxa_Impl__obj > _hx_result = new Rgbxa_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Rgbxa_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rgbxa_Impl__obj > _hx_result = new Rgbxa_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Rgbxa_Impl__obj::create(Float red,Float green,Float blue,Float alpha){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","create",0x9caed336,"thx.color._Rgbxa.Rgbxa_Impl_.create","thx/color/Rgbxa.hx",15,0x55e27d3f)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE(  15)		return ::Array_obj< Float >::__new(4)->init(0,red)->init(1,green)->init(2,blue)->init(3,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Rgbxa_Impl__obj,create,return )

::Array< Float > Rgbxa_Impl__obj::fromFloats(::Array< Float > arr){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","fromFloats",0x8c9d399b,"thx.color._Rgbxa.Rgbxa_Impl_.fromFloats","thx/color/Rgbxa.hx",17,0x55e27d3f)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  18)		::thx::ArrayFloats_obj::resize(arr,(int)4,null());
HXLINE(  19)		return ::Array_obj< Float >::__new(4)->init(0,arr->__get((int)0))->init(1,arr->__get((int)1))->init(2,arr->__get((int)2))->init(3,arr->__get((int)3));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,fromFloats,return )

::Array< Float > Rgbxa_Impl__obj::fromInts(::Array< Int > arr){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","fromInts",0xbc0581e8,"thx.color._Rgbxa.Rgbxa_Impl_.fromInts","thx/color/Rgbxa.hx",22,0x55e27d3f)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  23)		::thx::ArrayInts_obj::resize(arr,(int)4,null());
HXLINE(  24)		return ::Array_obj< Float >::__new(4)->init(0,((Float)arr->__get((int)0) / (Float)((Float)255.0)))->init(1,((Float)arr->__get((int)1) / (Float)((Float)255.0)))->init(2,((Float)arr->__get((int)2) / (Float)((Float)255.0)))->init(3,((Float)arr->__get((int)3) / (Float)((Float)255.0)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,fromInts,return )

::Array< Float > Rgbxa_Impl__obj::fromInt(Int value){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","fromInt",0xc2da242b,"thx.color._Rgbxa.Rgbxa_Impl_.fromInt","thx/color/Rgbxa.hx",27,0x55e27d3f)
            	HX_STACK_ARG(value,"value")
HXLINE(  28)		HX_VARI( Int,rgba) = value;
HXLINE(  29)		return ::Array_obj< Float >::__new(4)->init(0,((Float)((int)((int)rgba >> (int)(int)24) & (int)(int)255) / (Float)(int)255))->init(1,((Float)((int)((int)rgba >> (int)(int)16) & (int)(int)255) / (Float)(int)255))->init(2,((Float)((int)((int)rgba >> (int)(int)8) & (int)(int)255) / (Float)(int)255))->init(3,((Float)((int)rgba & (int)(int)255) / (Float)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,fromInt,return )

::Array< Float > Rgbxa_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","fromString",0x5c773f15,"thx.color._Rgbxa.Rgbxa_Impl_.fromString","thx/color/Rgbxa.hx",32,0x55e27d3f)
            	HX_STACK_ARG(color,"color")
HXLINE(  33)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseHex(color);
HXLINE(  34)		if (hx::IsNull( info )) {
HXLINE(  35)			info = ::thx::color::parse::ColorParser_obj::parseColor(color);
            		}
HXLINE(  36)		if (hx::IsNull( info )) {
HXLINE(  37)			return null();
            		}
HXLINE(  39)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  39)			::String _hx_switch_0 = info->name;
            			if (  (_hx_switch_0==HX_("rgb",0d,db,56,00)) ){
HXLINE(  41)				::Array< Float > _hx_tmp = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,true);
HXDLIN(  41)				::Array< Float > _hx_tmp1 = ::thx::color::_Rgbx::Rgbx_Impl__obj::fromFloats(_hx_tmp);
HXLINE(  39)				return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(_hx_tmp1);
HXDLIN(  39)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("rgba",b4,d0,a8,4b)) ){
HXLINE(  43)				::Array< Float > _hx_tmp2 = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)4,true);
HXLINE(  39)				return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::fromFloats(_hx_tmp2);
HXDLIN(  39)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  39)				return null();
            			}
            			_hx_goto_0:;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  39)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  39)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,fromString,return )

::Array< Float > Rgbxa_Impl__obj::_new(::Array< Float > channels){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","_new",0xecdd1f1b,"thx.color._Rgbxa.Rgbxa_Impl_._new","thx/color/Rgbxa.hx",49,0x55e27d3f)
            	HX_STACK_ARG(channels,"channels")
HXLINE(  49)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,_new,return )

::Array< Float > Rgbxa_Impl__obj::combineColor(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","combineColor",0xdceb9e1e,"thx.color._Rgbxa.Rgbxa_Impl_.combineColor","thx/color/Rgbxa.hx",63,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  63)		return ::Array_obj< Float >::__new(3)->init(0,((((int)1 - this1->__get((int)3)) * other->__get((int)0)) + (this1->__get((int)3) * this1->__get((int)0))))->init(1,((((int)1 - this1->__get((int)3)) * other->__get((int)1)) + (this1->__get((int)3) * this1->__get((int)1))))->init(2,((((int)1 - this1->__get((int)3)) * other->__get((int)2)) + (this1->__get((int)3) * this1->__get((int)2))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,combineColor,return )

::Array< Float > Rgbxa_Impl__obj::darker(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","darker",0x41d9a29d,"thx.color._Rgbxa.Rgbxa_Impl_.darker","thx/color/Rgbxa.hx",70,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  70)		::Array< Float > _hx_tmp = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgbx(this1);
HXDLIN(  70)		::Array< Float > _hx_tmp1 = ::thx::color::_Rgbx::Rgbx_Impl__obj::darker(_hx_tmp,t);
HXDLIN(  70)		Int _hx_tmp2 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_alpha(this1);
HXDLIN(  70)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::withAlpha(_hx_tmp1,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,darker,return )

::Array< Float > Rgbxa_Impl__obj::lighter(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","lighter",0x84c29149,"thx.color._Rgbxa.Rgbxa_Impl_.lighter","thx/color/Rgbxa.hx",73,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  73)		::Array< Float > _hx_tmp = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgbx(this1);
HXDLIN(  73)		::Array< Float > _hx_tmp1 = ::thx::color::_Rgbx::Rgbx_Impl__obj::lighter(_hx_tmp,t);
HXDLIN(  73)		Int _hx_tmp2 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_alpha(this1);
HXDLIN(  73)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::withAlpha(_hx_tmp1,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,lighter,return )

::Array< Float > Rgbxa_Impl__obj::transparent(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","transparent",0x1d662cd8,"thx.color._Rgbxa.Rgbxa_Impl_.transparent","thx/color/Rgbxa.hx",76,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  77)		Float _hx_tmp = this1->__get((int)0);
HXLINE(  78)		Float _hx_tmp1 = this1->__get((int)1);
HXLINE(  79)		Float _hx_tmp2 = this1->__get((int)2);
HXLINE(  80)		Int _hx_tmp3 = ::thx::Ints_obj::interpolate(t,this1->__get((int)3),(int)0);
HXLINE(  76)		return ::Array_obj< Float >::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,transparent,return )

::Array< Float > Rgbxa_Impl__obj::opaque(::Array< Float > this1,Float t){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","opaque",0x3f91491b,"thx.color._Rgbxa.Rgbxa_Impl_.opaque","thx/color/Rgbxa.hx",84,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(t,"t")
HXLINE(  85)		Float _hx_tmp = this1->__get((int)0);
HXLINE(  86)		Float _hx_tmp1 = this1->__get((int)1);
HXLINE(  87)		Float _hx_tmp2 = this1->__get((int)2);
HXLINE(  88)		Int _hx_tmp3 = ::thx::Ints_obj::interpolate(t,this1->__get((int)3),(int)1);
HXLINE(  84)		return ::Array_obj< Float >::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,opaque,return )

::Array< Float > Rgbxa_Impl__obj::interpolate(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","interpolate",0x19ded647,"thx.color._Rgbxa.Rgbxa_Impl_.interpolate","thx/color/Rgbxa.hx",92,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  93)		Int _hx_tmp = ::thx::Ints_obj::interpolate(t,this1->__get((int)0),other->__get((int)0));
HXLINE(  94)		Int _hx_tmp1 = ::thx::Ints_obj::interpolate(t,this1->__get((int)1),other->__get((int)1));
HXLINE(  95)		Int _hx_tmp2 = ::thx::Ints_obj::interpolate(t,this1->__get((int)2),other->__get((int)2));
HXLINE(  96)		Int _hx_tmp3 = ::thx::Ints_obj::interpolate(t,this1->__get((int)3),other->__get((int)3));
HXLINE(  92)		return ::Array_obj< Float >::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Rgbxa_Impl__obj,interpolate,return )

::Array< Float > Rgbxa_Impl__obj::normalize(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","normalize",0x01c3ab93,"thx.color._Rgbxa.Rgbxa_Impl_.normalize","thx/color/Rgbxa.hx",100,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 100)		HX_VAR_NAME( ::Array< Float >,this2,"this");
HXLINE( 101)		HX_VARI( Float,v) = this1->__get((int)0);
HXDLIN( 101)		Float _hx_tmp;
HXDLIN( 101)		if ((v < (int)0)) {
HXLINE( 101)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 101)			if ((v > (int)1)) {
HXLINE( 101)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE( 101)				_hx_tmp = v;
            			}
            		}
HXLINE( 102)		HX_VARI_NAME( Float,v1,"v") = this1->__get((int)1);
HXDLIN( 102)		Float _hx_tmp1;
HXDLIN( 102)		if ((v1 < (int)0)) {
HXLINE( 102)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE( 102)			if ((v1 > (int)1)) {
HXLINE( 102)				_hx_tmp1 = (int)1;
            			}
            			else {
HXLINE( 102)				_hx_tmp1 = v1;
            			}
            		}
HXLINE( 103)		HX_VARI_NAME( Float,v2,"v") = this1->__get((int)2);
HXDLIN( 103)		Float _hx_tmp2;
HXDLIN( 103)		if ((v2 < (int)0)) {
HXLINE( 103)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE( 103)			if ((v2 > (int)1)) {
HXLINE( 103)				_hx_tmp2 = (int)1;
            			}
            			else {
HXLINE( 103)				_hx_tmp2 = v2;
            			}
            		}
HXLINE( 104)		HX_VARI_NAME( Float,v3,"v") = this1->__get((int)3);
HXDLIN( 104)		Float _hx_tmp3;
HXDLIN( 104)		if ((v3 < (int)0)) {
HXLINE( 104)			_hx_tmp3 = (int)0;
            		}
            		else {
HXLINE( 104)			if ((v3 > (int)1)) {
HXLINE( 104)				_hx_tmp3 = (int)1;
            			}
            			else {
HXLINE( 104)				_hx_tmp3 = v3;
            			}
            		}
HXLINE( 100)		this2 = ::Array_obj< Float >::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3);
HXDLIN( 100)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,normalize,return )

::Array< Float > Rgbxa_Impl__obj::roundTo(::Array< Float > this1,Int decimals){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","roundTo",0xf7eeb7ef,"thx.color._Rgbxa.Rgbxa_Impl_.roundTo","thx/color/Rgbxa.hx",108,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE( 108)		HX_VARI( Float,red) = ::thx::Floats_obj::roundTo(this1->__get((int)0),decimals);
HXDLIN( 108)		HX_VARI( Float,green) = ::thx::Floats_obj::roundTo(this1->__get((int)1),decimals);
HXDLIN( 108)		HX_VARI( Float,blue) = ::thx::Floats_obj::roundTo(this1->__get((int)2),decimals);
HXDLIN( 108)		HX_VARI( Float,alpha) = ::thx::Floats_obj::roundTo(this1->__get((int)3),decimals);
HXDLIN( 108)		return ::Array_obj< Float >::__new(4)->init(0,red)->init(1,green)->init(2,blue)->init(3,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,roundTo,return )

::Array< Float > Rgbxa_Impl__obj::withAlpha(::Array< Float > this1,Float newalpha){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","withAlpha",0xfba67f7e,"thx.color._Rgbxa.Rgbxa_Impl_.withAlpha","thx/color/Rgbxa.hx",111,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newalpha,"newalpha")
HXLINE( 111)		Int _hx_tmp = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_red(this1);
HXDLIN( 111)		Int _hx_tmp1 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_green(this1);
HXDLIN( 111)		Int _hx_tmp2 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_blue(this1);
HXDLIN( 111)		return ::Array_obj< Float >::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,newalpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,withAlpha,return )

::Array< Float > Rgbxa_Impl__obj::withRed(::Array< Float > this1,Int newred){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","withRed",0xca4a6971,"thx.color._Rgbxa.Rgbxa_Impl_.withRed","thx/color/Rgbxa.hx",114,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newred,"newred")
HXLINE( 114)		Int _hx_tmp = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_green(this1);
HXDLIN( 114)		Int _hx_tmp1 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_blue(this1);
HXDLIN( 114)		Int _hx_tmp2 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_alpha(this1);
HXDLIN( 114)		return ::Array_obj< Float >::__new(4)->init(0,newred)->init(1,_hx_tmp)->init(2,_hx_tmp1)->init(3,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,withRed,return )

::Array< Float > Rgbxa_Impl__obj::withGreen(::Array< Float > this1,Int newgreen){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","withGreen",0x73fce6e3,"thx.color._Rgbxa.Rgbxa_Impl_.withGreen","thx/color/Rgbxa.hx",117,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newgreen,"newgreen")
HXLINE( 117)		Int _hx_tmp = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_red(this1);
HXDLIN( 117)		Int _hx_tmp1 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_blue(this1);
HXDLIN( 117)		Int _hx_tmp2 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_alpha(this1);
HXDLIN( 117)		return ::Array_obj< Float >::__new(4)->init(0,_hx_tmp)->init(1,newgreen)->init(2,_hx_tmp1)->init(3,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,withGreen,return )

::Array< Float > Rgbxa_Impl__obj::withBlue(::Array< Float > this1,Int newblue){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","withBlue",0x2c43ce7a,"thx.color._Rgbxa.Rgbxa_Impl_.withBlue","thx/color/Rgbxa.hx",120,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newblue,"newblue")
HXLINE( 120)		Int _hx_tmp = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_red(this1);
HXDLIN( 120)		Int _hx_tmp1 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_green(this1);
HXDLIN( 120)		Int _hx_tmp2 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_alpha(this1);
HXDLIN( 120)		return ::Array_obj< Float >::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,newblue)->init(3,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,withBlue,return )

::String Rgbxa_Impl__obj::toCss3(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","toCss3",0x98209e65,"thx.color._Rgbxa.Rgbxa_Impl_.toCss3","thx/color/Rgbxa.hx",123,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 123)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toString(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,toCss3,return )

::String Rgbxa_Impl__obj::toString(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","toString",0x50ed3f66,"thx.color._Rgbxa.Rgbxa_Impl_.toString","thx/color/Rgbxa.hx",126,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 126)		return ((((((((HX_("rgba(",f4,cc,0d,e8) + (this1->__get((int)0) * (int)100)) + HX_("%,",67,20,00,00)) + (this1->__get((int)1) * (int)100)) + HX_("%,",67,20,00,00)) + (this1->__get((int)2) * (int)100)) + HX_("%,",67,20,00,00)) + this1->__get((int)3)) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,toString,return )

::String Rgbxa_Impl__obj::toHex(::Array< Float > this1,::String __o_prefix){
::String prefix = __o_prefix.Default(HX_HCSTRING("#","\x23","\x00","\x00","\x00"));
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","toHex",0x6c9b6d26,"thx.color._Rgbxa.Rgbxa_Impl_.toHex","thx/color/Rgbxa.hx",129,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(prefix,"prefix")
HXLINE( 129)		::String _hx_tmp = (HX_("",00,00,00,00) + prefix);
HXDLIN( 129)		Int _hx_tmp1 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_alpha(this1);
HXDLIN( 129)		::String _hx_tmp2 = ::StringTools_obj::hex(_hx_tmp1,(int)2);
HXDLIN( 129)		::String _hx_tmp3 = (_hx_tmp + _hx_tmp2);
HXDLIN( 129)		Int _hx_tmp4 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_red(this1);
HXDLIN( 129)		::String _hx_tmp5 = ::StringTools_obj::hex(_hx_tmp4,(int)2);
HXDLIN( 129)		::String _hx_tmp6 = (_hx_tmp3 + _hx_tmp5);
HXDLIN( 129)		Int _hx_tmp7 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_green(this1);
HXDLIN( 129)		::String _hx_tmp8 = ::StringTools_obj::hex(_hx_tmp7,(int)2);
HXDLIN( 129)		::String _hx_tmp9 = (_hx_tmp6 + _hx_tmp8);
HXDLIN( 129)		Int _hx_tmp10 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_blue(this1);
HXDLIN( 129)		::String _hx_tmp11 = ::StringTools_obj::hex(_hx_tmp10,(int)2);
HXDLIN( 129)		return (_hx_tmp9 + _hx_tmp11);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,toHex,return )

Bool Rgbxa_Impl__obj::equals(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","equals",0xe0925a79,"thx.color._Rgbxa.Rgbxa_Impl_.equals","thx/color/Rgbxa.hx",132,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 132)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Rgbxa_Impl__obj,equals,return )

Bool Rgbxa_Impl__obj::nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","nearEquals",0x06748281,"thx.color._Rgbxa.Rgbxa_Impl_.nearEquals","thx/color/Rgbxa.hx",135,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE( 135)		Bool _hx_tmp;
HXDLIN( 135)		Bool _hx_tmp1;
HXDLIN( 135)		Bool _hx_tmp2 = ::thx::Floats_obj::nearEquals(this1->__get((int)0),other->__get((int)0),tolerance);
HXDLIN( 135)		if (_hx_tmp2) {
HXLINE( 135)			_hx_tmp1 = ::thx::Floats_obj::nearEquals(this1->__get((int)1),other->__get((int)1),tolerance);
            		}
            		else {
HXLINE( 135)			_hx_tmp1 = false;
            		}
HXDLIN( 135)		if (_hx_tmp1) {
HXLINE( 135)			_hx_tmp = ::thx::Floats_obj::nearEquals(this1->__get((int)2),other->__get((int)2),tolerance);
            		}
            		else {
HXLINE( 135)			_hx_tmp = false;
            		}
HXDLIN( 135)		if (_hx_tmp) {
HXLINE( 135)			return ::thx::Floats_obj::nearEquals(this1->__get((int)3),other->__get((int)3),tolerance);
            		}
            		else {
HXLINE( 135)			return false;
            		}
HXDLIN( 135)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Rgbxa_Impl__obj,nearEquals,return )

::Array< Float > Rgbxa_Impl__obj::toHsla(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","toHsla",0x9b6ea995,"thx.color._Rgbxa.Rgbxa_Impl_.toHsla","thx/color/Rgbxa.hx",138,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 138)		::Array< Float > _hx_tmp = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgbx(this1);
HXDLIN( 138)		::Array< Float > _hx_tmp1 = ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsl(_hx_tmp);
HXDLIN( 138)		Int _hx_tmp2 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_alpha(this1);
HXDLIN( 138)		return ::thx::color::_Hsl::Hsl_Impl__obj::withAlpha(_hx_tmp1,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,toHsla,return )

::Array< Float > Rgbxa_Impl__obj::toHsva(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","toHsva",0x9b6eb24b,"thx.color._Rgbxa.Rgbxa_Impl_.toHsva","thx/color/Rgbxa.hx",141,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 141)		::Array< Float > _hx_tmp = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgbx(this1);
HXDLIN( 141)		::Array< Float > _hx_tmp1 = ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsv(_hx_tmp);
HXDLIN( 141)		Int _hx_tmp2 = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::get_alpha(this1);
HXDLIN( 141)		return ::thx::color::_Hsv::Hsv_Impl__obj::withAlpha(_hx_tmp1,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,toHsva,return )

Int Rgbxa_Impl__obj::toRgb(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","toRgb",0x6ca30558,"thx.color._Rgbxa.Rgbxa_Impl_.toRgb","thx/color/Rgbxa.hx",144,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 144)		::Array< Float > _hx_tmp = ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgbx(this1);
HXDLIN( 144)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgb(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,toRgb,return )

::Array< Float > Rgbxa_Impl__obj::toRgbx(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","toRgbx",0xa201a820,"thx.color._Rgbxa.Rgbxa_Impl_.toRgbx","thx/color/Rgbxa.hx",147,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 147)		HX_VARI( ::Array< Float >,channels) = this1->slice((int)0,(int)3);
HXDLIN( 147)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,toRgbx,return )

Int Rgbxa_Impl__obj::toRgba(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","toRgba",0xa201a809,"thx.color._Rgbxa.Rgbxa_Impl_.toRgba","thx/color/Rgbxa.hx",150,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 150)		return ::thx::color::_Rgba::Rgba_Impl__obj::fromFloats(::Array_obj< Float >::__new(4)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,this1->__get((int)2))->init(3,this1->__get((int)3)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,toRgba,return )

Int Rgbxa_Impl__obj::get_red(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","get_red",0x91aae86e,"thx.color._Rgbxa.Rgbxa_Impl_.get_red","thx/color/Rgbxa.hx",153,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 153)		return ::Math_obj::round((this1->__get((int)0) * (int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,get_red,return )

Int Rgbxa_Impl__obj::get_green(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","get_green",0x33b8df20,"thx.color._Rgbxa.Rgbxa_Impl_.get_green","thx/color/Rgbxa.hx",155,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 155)		return ::Math_obj::round((this1->__get((int)1) * (int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,get_green,return )

Int Rgbxa_Impl__obj::get_blue(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","get_blue",0xd9526cdd,"thx.color._Rgbxa.Rgbxa_Impl_.get_blue","thx/color/Rgbxa.hx",157,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 157)		return ::Math_obj::round((this1->__get((int)2) * (int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,get_blue,return )

Int Rgbxa_Impl__obj::get_alpha(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","get_alpha",0xbb6277bb,"thx.color._Rgbxa.Rgbxa_Impl_.get_alpha","thx/color/Rgbxa.hx",159,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 159)		return ::Math_obj::round((this1->__get((int)3) * (int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,get_alpha,return )

Float Rgbxa_Impl__obj::get_redf(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","get_redf",0xe3e07838,"thx.color._Rgbxa.Rgbxa_Impl_.get_redf","thx/color/Rgbxa.hx",162,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 162)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,get_redf,return )

Float Rgbxa_Impl__obj::get_greenf(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","get_greenf",0x0e0a5d46,"thx.color._Rgbxa.Rgbxa_Impl_.get_greenf","thx/color/Rgbxa.hx",164,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 164)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,get_greenf,return )

Float Rgbxa_Impl__obj::get_bluef(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","get_bluef",0x4eccd4e9,"thx.color._Rgbxa.Rgbxa_Impl_.get_bluef","thx/color/Rgbxa.hx",166,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 166)		return this1->__get((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,get_bluef,return )

Float Rgbxa_Impl__obj::get_alphaf(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","get_alphaf",0x3ac64c4b,"thx.color._Rgbxa.Rgbxa_Impl_.get_alphaf","thx/color/Rgbxa.hx",168,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 168)		return this1->__get((int)3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,get_alphaf,return )

Bool Rgbxa_Impl__obj::get_inSpace(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Rgbxa.Rgbxa_Impl_","get_inSpace",0x9ec9c43e,"thx.color._Rgbxa.Rgbxa_Impl_.get_inSpace","thx/color/Rgbxa.hx",171,0x55e27d3f)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 171)		Bool _hx_tmp;
HXDLIN( 171)		Bool _hx_tmp1;
HXDLIN( 171)		Bool _hx_tmp2;
HXDLIN( 171)		Bool _hx_tmp3;
HXDLIN( 171)		Bool _hx_tmp4;
HXDLIN( 171)		Bool _hx_tmp5;
HXDLIN( 171)		if ((this1->__get((int)0) >= (int)0)) {
HXLINE( 171)			_hx_tmp5 = (this1->__get((int)0) <= (int)1);
            		}
            		else {
HXLINE( 171)			_hx_tmp5 = false;
            		}
HXDLIN( 171)		if (_hx_tmp5) {
HXLINE( 171)			_hx_tmp4 = (this1->__get((int)1) >= (int)0);
            		}
            		else {
HXLINE( 171)			_hx_tmp4 = false;
            		}
HXDLIN( 171)		if (_hx_tmp4) {
HXLINE( 171)			_hx_tmp3 = (this1->__get((int)1) <= (int)1);
            		}
            		else {
HXLINE( 171)			_hx_tmp3 = false;
            		}
HXDLIN( 171)		if (_hx_tmp3) {
HXLINE( 171)			_hx_tmp2 = (this1->__get((int)2) >= (int)0);
            		}
            		else {
HXLINE( 171)			_hx_tmp2 = false;
            		}
HXDLIN( 171)		if (_hx_tmp2) {
HXLINE( 171)			_hx_tmp1 = (this1->__get((int)2) <= (int)1);
            		}
            		else {
HXLINE( 171)			_hx_tmp1 = false;
            		}
HXDLIN( 171)		if (_hx_tmp1) {
HXLINE( 171)			_hx_tmp = (this1->__get((int)3) >= (int)0);
            		}
            		else {
HXLINE( 171)			_hx_tmp = false;
            		}
HXDLIN( 171)		if (_hx_tmp) {
HXLINE( 171)			return (this1->__get((int)3) <= (int)1);
            		}
            		else {
HXLINE( 171)			return false;
            		}
HXDLIN( 171)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Rgbxa_Impl__obj,get_inSpace,return )


Rgbxa_Impl__obj::Rgbxa_Impl__obj()
{
}

bool Rgbxa_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toHex") ) { outValue = toHex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"darker") ) { outValue = darker_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"opaque") ) { outValue = opaque_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCss3") ) { outValue = toCss3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsla") ) { outValue = toHsla_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsva") ) { outValue = toHsva_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbx") ) { outValue = toRgbx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lighter") ) { outValue = lighter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withRed") ) { outValue = withRed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_red") ) { outValue = get_red_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromInts") ) { outValue = fromInts_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withBlue") ) { outValue = withBlue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_blue") ) { outValue = get_blue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_redf") ) { outValue = get_redf_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withAlpha") ) { outValue = withAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withGreen") ) { outValue = withGreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_green") ) { outValue = get_green_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { outValue = get_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_bluef") ) { outValue = get_bluef_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_greenf") ) { outValue = get_greenf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_alphaf") ) { outValue = get_alphaf_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { outValue = transparent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_inSpace") ) { outValue = get_inSpace_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"combineColor") ) { outValue = combineColor_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Rgbxa_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Rgbxa_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Rgbxa_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rgbxa_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rgbxa_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rgbxa_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Rgbxa_Impl__obj::__mClass;

static ::String Rgbxa_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromInts","\x2e","\x13","\x87","\xa3"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("combineColor","\x64","\x4a","\x16","\x81"),
	HX_HCSTRING("darker","\x63","\x36","\x3a","\x21"),
	HX_HCSTRING("lighter","\xc3","\x4a","\xe3","\x19"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("opaque","\xe1","\xdc","\xf1","\x1e"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("withAlpha","\x78","\x0b","\x84","\xa5"),
	HX_HCSTRING("withRed","\xeb","\x22","\x6b","\x5f"),
	HX_HCSTRING("withGreen","\xdd","\x72","\xda","\x1d"),
	HX_HCSTRING("withBlue","\xc0","\x5f","\xc5","\x13"),
	HX_HCSTRING("toCss3","\x2b","\x32","\x81","\x77"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toHex","\x20","\xf4","\x10","\x14"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("toHsla","\x5b","\x3d","\xcf","\x7a"),
	HX_HCSTRING("toHsva","\x11","\x46","\xcf","\x7a"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgbx","\xe6","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("get_red","\xe8","\xa1","\xcb","\x26"),
	HX_HCSTRING("get_green","\x1a","\x6b","\x96","\xdd"),
	HX_HCSTRING("get_blue","\x23","\xfe","\xd3","\xc0"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("get_redf","\x7e","\x09","\x62","\xcb"),
	HX_HCSTRING("get_greenf","\x0c","\x4c","\x07","\x06"),
	HX_HCSTRING("get_bluef","\xe3","\x60","\xaa","\xf8"),
	HX_HCSTRING("get_alphaf","\x11","\x3b","\xc3","\x32"),
	HX_HCSTRING("get_inSpace","\xb8","\xc2","\x1d","\xa4"),
	::String(null())
};

void Rgbxa_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Rgbxa.Rgbxa_Impl_","\xf4","\xb0","\x86","\x27");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Rgbxa_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rgbxa_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Rgbxa_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Rgbxa_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rgbxa_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rgbxa_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rgbxa_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _Rgbxa
