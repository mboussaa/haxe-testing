// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_Option
#include <haxe/ds/Option.h>
#endif
#ifndef INCLUDED_thx_Arrays
#include <thx/Arrays.h>
#endif
#ifndef INCLUDED_thx_Ints
#include <thx/Ints.h>
#endif
#ifndef INCLUDED_thx_NonEmptyList
#include <thx/NonEmptyList.h>
#endif
#ifndef INCLUDED_thx__Nel_Nel_Impl_
#include <thx/_Nel/Nel_Impl_.h>
#endif
#ifndef INCLUDED_thx__Semigroup_Semigroup_Impl_
#include <thx/_Semigroup/Semigroup_Impl_.h>
#endif

namespace thx{
namespace _Nel{

void Nel_Impl__obj::__construct() { }

Dynamic Nel_Impl__obj::__CreateEmpty() { return new Nel_Impl__obj; }

hx::ObjectPtr< Nel_Impl__obj > Nel_Impl__obj::__new()
{
	hx::ObjectPtr< Nel_Impl__obj > _hx_result = new Nel_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Nel_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Nel_Impl__obj > _hx_result = new Nel_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::hx::EnumBase Nel_Impl__obj::nel( ::Dynamic hd,::cpp::VirtualArray tl){
            	HX_STACK_FRAME("thx._Nel.Nel_Impl_","nel",0xcaffca6e,"thx._Nel.Nel_Impl_.nel","thx/Nel.hx",9,0xe4bc4f14)
            	HX_STACK_ARG(hd,"hd")
            	HX_STACK_ARG(tl,"tl")
HXLINE(   9)		HX_VARI( ::hx::EnumBase,_g) = ::thx::_Nel::Nel_Impl__obj::fromArray(tl);
HXDLIN(   9)		Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(   9)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(   9)				return ::thx::_Nel::Nel_Impl__obj::cons(hd,_g->_hx_getObject(0));
            			}
            			break;
            			case (int)1: {
HXLINE(   9)				return ::thx::_Nel::Nel_Impl__obj::pure(hd);
            			}
            			break;
            		}
HXDLIN(   9)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Nel_Impl__obj,nel,return )

::hx::EnumBase Nel_Impl__obj::pure( ::Dynamic a){
            	HX_STACK_FRAME("thx._Nel.Nel_Impl_","pure",0xd62fecbf,"thx._Nel.Nel_Impl_.pure","thx/Nel.hx",16,0xe4bc4f14)
            	HX_STACK_ARG(a,"a")
HXLINE(  16)		return ::thx::NonEmptyList_obj::Single(a);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Nel_Impl__obj,pure,return )

::hx::EnumBase Nel_Impl__obj::cons( ::Dynamic a,::hx::EnumBase nl){
            	HX_STACK_FRAME("thx._Nel.Nel_Impl_","cons",0xcd9395b8,"thx._Nel.Nel_Impl_.cons","thx/Nel.hx",19,0xe4bc4f14)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(nl,"nl")
HXLINE(  19)		return ::thx::NonEmptyList_obj::ConsNel(a,nl);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Nel_Impl__obj,cons,return )

::hx::EnumBase Nel_Impl__obj::fromArray(::cpp::VirtualArray arr){
            	HX_STACK_FRAME("thx._Nel.Nel_Impl_","fromArray",0x7c946aa8,"thx._Nel.Nel_Impl_.fromArray","thx/Nel.hx",22,0xe4bc4f14)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  23)		Bool _hx_tmp = (arr->get_length() == (int)0);
HXDLIN(  23)		if (_hx_tmp) {
HXLINE(  22)			return ::haxe::ds::Option_obj::None_dyn();
            		}
            		else {
HXLINE(  24)			 ::Dynamic _hx_tmp1 = arr->__get((arr->get_length() - (int)1));
HXDLIN(  24)			HX_VARI( ::hx::EnumBase,res) = ::thx::NonEmptyList_obj::Single(_hx_tmp1);
HXLINE(  25)			{
HXLINE(  25)				HX_VARI(  ::Dynamic,tmp) = ::thx::Ints_obj::rangeIter((arr->get_length() - (int)2),(int)-1,(int)-1);
HXDLIN(  25)				while(true){
HXLINE(  25)					Bool _hx_tmp2 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  25)					if (_hx_tmp2) {
HXLINE(  25)						goto _hx_goto_0;
            					}
HXDLIN(  25)					HX_VARI( Int,i) = ( (Int)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  26)					res = ::thx::NonEmptyList_obj::ConsNel(arr->__get(i),res);
            				}
            				_hx_goto_0:;
            			}
HXLINE(  22)			return ::haxe::ds::Option_obj::Some(res);
            		}
HXLINE(  23)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Nel_Impl__obj,fromArray,return )

::hx::EnumBase Nel_Impl__obj::map(::hx::EnumBase this1, ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,fb) HXARGC(1)
            		::hx::EnumBase _hx_run( ::Dynamic v){
            			HX_STACK_FRAME("thx._Nel.Nel_Impl_","map",0xcaff04b5,"thx._Nel.Nel_Impl_.map","thx/Nel.hx",33,0xe4bc4f14)
            			HX_STACK_ARG(v,"v")
HXLINE(  33)			 ::Dynamic _hx_tmp1 = fb(v);
HXDLIN(  33)			return ::thx::_Nel::Nel_Impl__obj::pure(_hx_tmp1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx._Nel.Nel_Impl_","map",0xcaff04b5,"thx._Nel.Nel_Impl_.map","thx/Nel.hx",33,0xe4bc4f14)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(f,"f")
HXLINE(  33)		HX_VARI(  ::Dynamic,fb) = f;
HXDLIN(  33)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(fb));
HXDLIN(  33)		return ::thx::_Nel::Nel_Impl__obj::flatMap(this1,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Nel_Impl__obj,map,return )

::hx::EnumBase Nel_Impl__obj::flatMap(::hx::EnumBase this1, ::Dynamic f){
            	HX_STACK_FRAME("thx._Nel.Nel_Impl_","flatMap",0x75138afc,"thx._Nel.Nel_Impl_.flatMap","thx/Nel.hx",36,0xe4bc4f14)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(f,"f")
HXLINE(  36)		Int _hx_tmp = ( ( ::hx::EnumBase)(this1) )->_hx_getIndex();
HXDLIN(  36)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  36)				return f(this1->_hx_getObject(0));
            			}
            			break;
            			case (int)1: {
HXLINE(  38)				HX_VARI( ::hx::EnumBase,xs) = this1->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN(  38)				::hx::EnumBase _hx_tmp1 = f(this1->_hx_getObject(0));
HXDLIN(  38)				::hx::EnumBase _hx_tmp2 = ::thx::_Nel::Nel_Impl__obj::flatMap(xs,f);
HXLINE(  36)				return ::thx::_Nel::Nel_Impl__obj::append(_hx_tmp1,_hx_tmp2);
            			}
            			break;
            		}
HXDLIN(  36)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Nel_Impl__obj,flatMap,return )

 ::Dynamic Nel_Impl__obj::fold(::hx::EnumBase this1, ::Dynamic s){
            	HX_STACK_FRAME("thx._Nel.Nel_Impl_","fold",0xcf8f37c8,"thx._Nel.Nel_Impl_.fold","thx/Nel.hx",42,0xe4bc4f14)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(s,"s")
HXLINE(  42)		Int _hx_tmp = ( ( ::hx::EnumBase)(this1) )->_hx_getIndex();
HXDLIN(  42)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  42)				return this1->_hx_getObject(0);
            			}
            			break;
            			case (int)1: {
HXLINE(  44)				HX_VARI( ::hx::EnumBase,xs) = this1->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN(  44)				HX_VARI(  ::Dynamic,x) = this1->_hx_getObject(0);
HXDLIN(  44)				 ::Dynamic _hx_tmp1 = ::thx::_Semigroup::Semigroup_Impl__obj::get_append(s);
HXDLIN(  44)				 ::Dynamic _hx_tmp2 = ::thx::_Nel::Nel_Impl__obj::fold(xs,s);
HXLINE(  42)				return _hx_tmp1(x,_hx_tmp2);
            			}
            			break;
            		}
HXDLIN(  42)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Nel_Impl__obj,fold,return )

::hx::EnumBase Nel_Impl__obj::append(::hx::EnumBase this1,::hx::EnumBase nel){
            	HX_STACK_FRAME("thx._Nel.Nel_Impl_","append",0xd1e67d61,"thx._Nel.Nel_Impl_.append","thx/Nel.hx",50,0xe4bc4f14)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(nel,"nel")
HXLINE(  50)		Int _hx_tmp = ( ( ::hx::EnumBase)(this1) )->_hx_getIndex();
HXDLIN(  50)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  50)				return ::thx::NonEmptyList_obj::ConsNel(this1->_hx_getObject(0),nel);
            			}
            			break;
            			case (int)1: {
HXLINE(  52)				HX_VARI( ::hx::EnumBase,xs) = this1->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN(  52)				HX_VARI(  ::Dynamic,x) = this1->_hx_getObject(0);
HXDLIN(  52)				::hx::EnumBase _hx_tmp1 = ::thx::_Nel::Nel_Impl__obj::append(xs,nel);
HXLINE(  50)				return ::thx::NonEmptyList_obj::ConsNel(x,_hx_tmp1);
            			}
            			break;
            		}
HXDLIN(  50)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Nel_Impl__obj,append,return )

::cpp::VirtualArray Nel_Impl__obj::toArray(::hx::EnumBase this1){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,go) HXARGC(2)
            		::cpp::VirtualArray _hx_run(::cpp::VirtualArray acc,::hx::EnumBase xs){
            			HX_STACK_FRAME("thx._Nel.Nel_Impl_","toArray",0x804934b7,"thx._Nel.Nel_Impl_.toArray","thx/Nel.hx",57,0xe4bc4f14)
            			HX_STACK_ARG(acc,"acc")
            			HX_STACK_ARG(xs,"xs")
HXLINE(  57)			Int _hx_tmp = ( ( ::hx::EnumBase)(xs) )->_hx_getIndex();
HXDLIN(  57)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE(  57)					return ::thx::Arrays_obj::append(acc,xs->_hx_getObject(0));
            				}
            				break;
            				case (int)1: {
HXLINE(  59)					HX_VARI_NAME( ::hx::EnumBase,xs1,"xs") = xs->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN(  59)					HX_VARI(  ::Dynamic,x) = xs->_hx_getObject(0);
HXDLIN(  59)					 ::Dynamic _hx_tmp1 = go->__get((int)0);
HXDLIN(  59)					::cpp::VirtualArray _hx_tmp2 = ::thx::Arrays_obj::append(acc,x);
HXLINE(  57)					return ( (::cpp::VirtualArray)(_hx_tmp1(_hx_tmp2,xs1)) );
            				}
            				break;
            			}
HXDLIN(  57)			return null();
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx._Nel.Nel_Impl_","toArray",0x804934b7,"thx._Nel.Nel_Impl_.toArray","thx/Nel.hx",55,0xe4bc4f14)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  56)		HX_VARI( ::Array< ::Dynamic>,go) = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(  56)		go[(int)0] =  ::Dynamic(new _hx_Closure_0(go));
HXLINE(  63)		HX_VARI( ::cpp::VirtualArray,array) = ( (::cpp::VirtualArray)(go->__get((int)0)(::cpp::VirtualArray_obj::__new(0),this1)) );
HXDLIN(  63)		HX_VARI( ::cpp::VirtualArray,result) = array->copy();
HXDLIN(  63)		result->reverse();
HXDLIN(  63)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Nel_Impl__obj,toArray,return )

 ::Dynamic Nel_Impl__obj::semigroup(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::hx::EnumBase _hx_run(::hx::EnumBase nl,::hx::EnumBase nr){
            			HX_STACK_FRAME("thx._Nel.Nel_Impl_","semigroup",0x3fe66aea,"thx._Nel.Nel_Impl_.semigroup","thx/Nel.hx",67,0xe4bc4f14)
            			HX_STACK_ARG(nl,"nl")
            			HX_STACK_ARG(nr,"nr")
HXLINE(  67)			return ::thx::_Nel::Nel_Impl__obj::append(nl,nr);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("thx._Nel.Nel_Impl_","semigroup",0x3fe66aea,"thx._Nel.Nel_Impl_.semigroup","thx/Nel.hx",67,0xe4bc4f14)
HXLINE(  67)		return  ::Dynamic(new _hx_Closure_0());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Nel_Impl__obj,semigroup,return )


Nel_Impl__obj::Nel_Impl__obj()
{
}

bool Nel_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"nel") ) { outValue = nel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pure") ) { outValue = pure_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cons") ) { outValue = cons_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fold") ) { outValue = fold_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"append") ) { outValue = append_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"flatMap") ) { outValue = flatMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"semigroup") ) { outValue = semigroup_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Nel_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Nel_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Nel_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Nel_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Nel_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Nel_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Nel_Impl__obj::__mClass;

static ::String Nel_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("nel","\x55","\xd0","\x53","\x00"),
	HX_HCSTRING("pure","\xf8","\x10","\x61","\x4a"),
	HX_HCSTRING("cons","\xf1","\xb9","\xc4","\x41"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("flatMap","\x63","\x10","\xde","\xe6"),
	HX_HCSTRING("fold","\x01","\x5c","\xc0","\x43"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("semigroup","\x11","\x58","\x6a","\x9d"),
	::String(null())
};

void Nel_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx._Nel.Nel_Impl_","\x07","\x1a","\xe1","\xb4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Nel_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Nel_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Nel_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Nel_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Nel_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Nel_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Nel_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace _Nel
