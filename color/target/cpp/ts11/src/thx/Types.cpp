// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_thx_Types
#include <thx/Types.h>
#endif

namespace thx{

void Types_obj::__construct() { }

Dynamic Types_obj::__CreateEmpty() { return new Types_obj; }

hx::ObjectPtr< Types_obj > Types_obj::__new()
{
	hx::ObjectPtr< Types_obj > _hx_result = new Types_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Types_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Types_obj > _hx_result = new Types_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool Types_obj::isAnonymousObject( ::Dynamic v){
            	HX_STACK_FRAME("thx.Types","isAnonymousObject",0x2b962303,"thx.Types.isAnonymousObject","thx/Types.hx",11,0xaa1e1630)
            	HX_STACK_ARG(v,"v")
HXLINE(  11)		Bool _hx_tmp = ::Reflect_obj::isObject(v);
HXDLIN(  11)		if (_hx_tmp) {
HXLINE(  11)			hx::Class _hx_tmp1 = ::Type_obj::getClass(v);
HXDLIN(  11)			return hx::IsNull( _hx_tmp1 );
            		}
            		else {
HXLINE(  11)			return false;
            		}
HXDLIN(  11)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Types_obj,isAnonymousObject,return )

Bool Types_obj::isPrimitive( ::Dynamic v){
            	HX_STACK_FRAME("thx.Types","isPrimitive",0x0c97315e,"thx.Types.isPrimitive","thx/Types.hx",17,0xaa1e1630)
            	HX_STACK_ARG(v,"v")
HXLINE(  17)		HX_VARI( ::hx::EnumBase,_g) = ::Type_obj::_hx_typeof(v);
HXDLIN(  17)		Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(  17)		switch((int)(_hx_tmp)){
            			case (int)1: case (int)2: case (int)3: {
HXLINE(  17)				return true;
            			}
            			break;
            			case (int)6: {
HXLINE(  17)				return (::Type_obj::getClassName(_g->_hx_getObject(0).StaticCast< hx::Class >()) == HX_("String",f1,9c,c4,45));
            			}
            			break;
            			case (int)0: case (int)4: case (int)5: case (int)7: case (int)8: {
HXLINE(  17)				return false;
            			}
            			break;
            		}
HXDLIN(  17)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Types_obj,isPrimitive,return )

Bool Types_obj::isEnumValue( ::Dynamic v){
            	HX_STACK_FRAME("thx.Types","isEnumValue",0x0d45a967,"thx.Types.isEnumValue","thx/Types.hx",27,0xaa1e1630)
            	HX_STACK_ARG(v,"v")
HXLINE(  27)		HX_VARI( ::hx::EnumBase,_g) = ::Type_obj::_hx_typeof(v);
HXDLIN(  27)		Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(  27)		if ((_hx_tmp == (int)7)) {
HXLINE(  27)			return true;
            		}
            		else {
HXLINE(  27)			return false;
            		}
HXDLIN(  27)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Types_obj,isEnumValue,return )

Bool Types_obj::hasSuperClass(hx::Class cls,hx::Class sup){
            	HX_STACK_FRAME("thx.Types","hasSuperClass",0x69fd94f8,"thx.Types.hasSuperClass","thx/Types.hx",37,0xaa1e1630)
            	HX_STACK_ARG(cls,"cls")
            	HX_STACK_ARG(sup,"sup")
HXLINE(  38)		while(hx::IsNotNull( cls )){
HXLINE(  39)			if (hx::IsEq( cls,sup )) {
HXLINE(  40)				return true;
            			}
HXLINE(  41)			cls = ::Type_obj::getSuperClass(cls);
            		}
HXLINE(  43)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Types_obj,hasSuperClass,return )

Bool Types_obj::sameType( ::Dynamic a, ::Dynamic b){
            	HX_STACK_FRAME("thx.Types","sameType",0xd0db809f,"thx.Types.sameType","thx/Types.hx",50,0xaa1e1630)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  50)		::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(a);
HXDLIN(  50)		::String _hx_tmp1 = ::thx::Types_obj::toString(_hx_tmp);
HXDLIN(  50)		::hx::EnumBase _hx_tmp2 = ::Type_obj::_hx_typeof(b);
HXDLIN(  50)		::String _hx_tmp3 = ::thx::Types_obj::toString(_hx_tmp2);
HXDLIN(  50)		return (_hx_tmp1 == _hx_tmp3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Types_obj,sameType,return )

::Array< ::String > Types_obj::typeInheritance(::hx::EnumBase type){
            	HX_STACK_FRAME("thx.Types","typeInheritance",0x5d0dd031,"thx.Types.typeInheritance","thx/Types.hx",57,0xaa1e1630)
            	HX_STACK_ARG(type,"type")
HXLINE(  57)		Int _hx_tmp = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(  57)		switch((int)(_hx_tmp)){
            			case (int)1: {
HXLINE(  57)				return ::Array_obj< ::String >::__new(1)->init(0,HX_("Int",cf,c4,37,00));
            			}
            			break;
            			case (int)2: {
HXLINE(  57)				return ::Array_obj< ::String >::__new(1)->init(0,HX_("Float",7c,35,c4,95));
            			}
            			break;
            			case (int)3: {
HXLINE(  57)				return ::Array_obj< ::String >::__new(1)->init(0,HX_("Bool",4a,b0,f4,2b));
            			}
            			break;
            			case (int)4: {
HXLINE(  57)				return ::Array_obj< ::String >::__new(1)->init(0,HX_("{}",a2,6b,00,00));
            			}
            			break;
            			case (int)5: {
HXLINE(  57)				return ::Array_obj< ::String >::__new(1)->init(0,HX_("Function",38,67,04,ee));
            			}
            			break;
            			case (int)6: {
HXLINE(  63)				HX_VARI( hx::Class,c) = type->_hx_getObject(0).StaticCast< hx::Class >();
HXLINE(  64)				HX_VARI( ::Array< ::Dynamic>,classes) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  65)				while(hx::IsNotNull( c )){
HXLINE(  66)					classes->push(c);
HXLINE(  67)					c = ::Type_obj::getSuperClass(c);
            				}
HXLINE(  57)				return classes->map(::Type_obj::getClassName_dyn());
            			}
            			break;
            			case (int)7: {
HXLINE(  70)				::String _hx_tmp1 = ::Type_obj::getEnumName(type->_hx_getObject(0).StaticCast< hx::Class >());
HXLINE(  57)				return ::Array_obj< ::String >::__new(1)->init(0,_hx_tmp1);
            			}
            			break;
            			default:{
HXLINE(  71)				::String _hx_tmp2 = ::Std_obj::string(type);
HXDLIN(  71)				HX_STACK_DO_THROW((HX_("invalid type ",3d,ea,13,b7) + _hx_tmp2));
            			}
            		}
HXLINE(  57)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Types_obj,typeInheritance,return )

::String Types_obj::toString(::hx::EnumBase type){
            	HX_STACK_FRAME("thx.Types","toString",0xa1be040b,"thx.Types.toString","thx/Types.hx",79,0xaa1e1630)
            	HX_STACK_ARG(type,"type")
HXLINE(  79)		Int _hx_tmp = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(  79)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  79)				return HX_("Null",a7,ca,e7,33);
            			}
            			break;
            			case (int)1: {
HXLINE(  79)				return HX_("Int",cf,c4,37,00);
            			}
            			break;
            			case (int)2: {
HXLINE(  79)				return HX_("Float",7c,35,c4,95);
            			}
            			break;
            			case (int)3: {
HXLINE(  79)				return HX_("Bool",4a,b0,f4,2b);
            			}
            			break;
            			case (int)4: {
HXLINE(  79)				return HX_("{}",a2,6b,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE(  79)				return HX_("Function",38,67,04,ee);
            			}
            			break;
            			case (int)6: {
HXLINE(  79)				return ::Type_obj::getClassName(type->_hx_getObject(0).StaticCast< hx::Class >());
            			}
            			break;
            			case (int)7: {
HXLINE(  79)				return ::Type_obj::getEnumName(type->_hx_getObject(0).StaticCast< hx::Class >());
            			}
            			break;
            			default:{
HXLINE(  88)				::String _hx_tmp1 = ::Std_obj::string(type);
HXDLIN(  88)				HX_STACK_DO_THROW((HX_("invalid type ",3d,ea,13,b7) + _hx_tmp1));
            			}
            		}
HXLINE(  79)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Types_obj,toString,return )

::Array< ::String > Types_obj::valueTypeInheritance( ::Dynamic value){
            	HX_STACK_FRAME("thx.Types","valueTypeInheritance",0xb5c31f1e,"thx.Types.valueTypeInheritance","thx/Types.hx",97,0xaa1e1630)
            	HX_STACK_ARG(value,"value")
HXLINE(  97)		::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(value);
HXDLIN(  97)		return ::thx::Types_obj::typeInheritance(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Types_obj,valueTypeInheritance,return )

::String Types_obj::valueTypeToString( ::Dynamic value){
            	HX_STACK_FRAME("thx.Types","valueTypeToString",0xbc2b6358,"thx.Types.valueTypeToString","thx/Types.hx",103,0xaa1e1630)
            	HX_STACK_ARG(value,"value")
HXLINE( 103)		::hx::EnumBase _hx_tmp = ::Type_obj::_hx_typeof(value);
HXDLIN( 103)		return ::thx::Types_obj::toString(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Types_obj,valueTypeToString,return )

::String Types_obj::anyValueToString( ::Dynamic value){
            	HX_STACK_FRAME("thx.Types","anyValueToString",0x948a8110,"thx.Types.anyValueToString","thx/Types.hx",108,0xaa1e1630)
            	HX_STACK_ARG(value,"value")
HXLINE( 109)		Bool _hx_tmp = ::Std_obj::is(value,hx::ClassOf< ::ValueType >());
HXDLIN( 109)		if (_hx_tmp) {
HXLINE( 110)			return ::thx::Types_obj::toString(value);
            		}
HXLINE( 111)		Bool _hx_tmp1 = ::Std_obj::is(value,hx::ClassOf< ::hx::Class >());
HXDLIN( 111)		if (_hx_tmp1) {
HXLINE( 112)			return ::Type_obj::getClassName(value);
            		}
HXLINE( 113)		Bool _hx_tmp2 = ::Std_obj::is(value,hx::ClassOf< ::Enum >());
HXDLIN( 113)		if (_hx_tmp2) {
HXLINE( 114)			return ::Type_obj::getEnumName(value);
            		}
HXLINE( 115)		::hx::EnumBase _hx_tmp3 = ::Type_obj::_hx_typeof(value);
HXDLIN( 115)		return ::thx::Types_obj::toString(_hx_tmp3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Types_obj,anyValueToString,return )


Types_obj::Types_obj()
{
}

bool Types_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"sameType") ) { outValue = sameType_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isPrimitive") ) { outValue = isPrimitive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isEnumValue") ) { outValue = isEnumValue_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"hasSuperClass") ) { outValue = hasSuperClass_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"typeInheritance") ) { outValue = typeInheritance_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"anyValueToString") ) { outValue = anyValueToString_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"isAnonymousObject") ) { outValue = isAnonymousObject_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"valueTypeToString") ) { outValue = valueTypeToString_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"valueTypeInheritance") ) { outValue = valueTypeInheritance_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Types_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Types_obj_sStaticStorageInfo = 0;
#endif

static void Types_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Types_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Types_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Types_obj::__mClass,"__mClass");
};

#endif

hx::Class Types_obj::__mClass;

static ::String Types_obj_sStaticFields[] = {
	HX_HCSTRING("isAnonymousObject","\x42","\x3a","\x41","\x85"),
	HX_HCSTRING("isPrimitive","\x5d","\x3f","\xd9","\x05"),
	HX_HCSTRING("isEnumValue","\x66","\xb7","\x87","\x06"),
	HX_HCSTRING("hasSuperClass","\xb7","\x60","\x5e","\xc2"),
	HX_HCSTRING("sameType","\x40","\x4d","\x8c","\x67"),
	HX_HCSTRING("typeInheritance","\xb0","\x49","\x08","\x28"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("valueTypeInheritance","\x3f","\xd9","\x84","\xd6"),
	HX_HCSTRING("valueTypeToString","\x97","\x7a","\xd6","\x15"),
	HX_HCSTRING("anyValueToString","\xb1","\x56","\xba","\x64"),
	::String(null())
};

void Types_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Types","\xef","\x14","\x55","\x62");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Types_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Types_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Types_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Types_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Types_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Types_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Types_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
