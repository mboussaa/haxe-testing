// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_Functions9
#include <thx/Functions9.h>
#endif

namespace thx{

void Functions9_obj::__construct() { }

Dynamic Functions9_obj::__CreateEmpty() { return new Functions9_obj; }

hx::ObjectPtr< Functions9_obj > Functions9_obj::__new()
{
	hx::ObjectPtr< Functions9_obj > _hx_result = new Functions9_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Functions9_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Functions9_obj > _hx_result = new Functions9_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic Functions9_obj::curry( ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,f) HXARGC(8)
            		 ::Dynamic _hx_run( ::Dynamic a, ::Dynamic b, ::Dynamic c, ::Dynamic d, ::Dynamic e, ::Dynamic f0, ::Dynamic g, ::Dynamic h){
            			HX_BEGIN_LOCAL_FUNC_S9(hx::LocalFunc,_hx_Closure_0, ::Dynamic,h, ::Dynamic,f0, ::Dynamic,a, ::Dynamic,d, ::Dynamic,f, ::Dynamic,e, ::Dynamic,b, ::Dynamic,g, ::Dynamic,c) HXARGC(1)
            			 ::Dynamic _hx_run( ::Dynamic i){
            				HX_STACK_FRAME("thx.Functions9","curry",0x18587da1,"thx.Functions9.curry","thx/Functions.hx",269,0xe7fcd70e)
            				HX_STACK_ARG(i,"i")
HXLINE( 269)				return f(a,b,c,d,e,f0,g,h,i);
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_STACK_FRAME("thx.Functions9","curry",0x18587da1,"thx.Functions9.curry","thx/Functions.hx",269,0xe7fcd70e)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
            			HX_STACK_ARG(c,"c")
            			HX_STACK_ARG(d,"d")
            			HX_STACK_ARG(e,"e")
            			HX_STACK_ARG(f0,"f0")
            			HX_STACK_ARG(g,"g")
            			HX_STACK_ARG(h,"h")
HXLINE( 269)			return  ::Dynamic(new _hx_Closure_0(h,f0,a,d,f,e,b,g,c));
            		}
            		HX_END_LOCAL_FUNC8(return)

            	HX_STACK_FRAME("thx.Functions9","curry",0x18587da1,"thx.Functions9.curry","thx/Functions.hx",269,0xe7fcd70e)
            	HX_STACK_ARG(f,"f")
HXLINE( 269)		return  ::Dynamic(new _hx_Closure_1(f));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Functions9_obj,curry,return )


Functions9_obj::Functions9_obj()
{
}

bool Functions9_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"curry") ) { outValue = curry_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Functions9_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Functions9_obj_sStaticStorageInfo = 0;
#endif

static void Functions9_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Functions9_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Functions9_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Functions9_obj::__mClass,"__mClass");
};

#endif

hx::Class Functions9_obj::__mClass;

static ::String Functions9_obj_sStaticFields[] = {
	HX_HCSTRING("curry","\x47","\x49","\x58","\x4e"),
	::String(null())
};

void Functions9_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.Functions9","\x48","\x75","\xc6","\x4b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Functions9_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Functions9_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Functions9_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Functions9_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Functions9_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Functions9_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Functions9_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
