// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_thx_ArrayFloats
#include <thx/ArrayFloats.h>
#endif
#ifndef INCLUDED_thx_Error
#include <thx/Error.h>
#endif
#ifndef INCLUDED_thx_Floats
#include <thx/Floats.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbx_Rgbx_Impl_
#include <thx/color/_Rgbx/Rgbx_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgbxa_Rgbxa_Impl_
#include <thx/color/_Rgbxa/Rgbxa_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Xyz_Xyz_Impl_
#include <thx/color/_Xyz/Xyz_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_parse_ChannelInfo
#include <thx/color/parse/ChannelInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorInfo
#include <thx/color/parse/ColorInfo.h>
#endif
#ifndef INCLUDED_thx_color_parse_ColorParser
#include <thx/color/parse/ColorParser.h>
#endif
#ifndef INCLUDED_thx_error_NullArgument
#include <thx/error/NullArgument.h>
#endif

namespace thx{
namespace color{
namespace _Lab{

void Lab_Impl__obj::__construct() { }

Dynamic Lab_Impl__obj::__CreateEmpty() { return new Lab_Impl__obj; }

hx::ObjectPtr< Lab_Impl__obj > Lab_Impl__obj::__new()
{
	hx::ObjectPtr< Lab_Impl__obj > _hx_result = new Lab_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Lab_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Lab_Impl__obj > _hx_result = new Lab_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Lab_Impl__obj::create(Float l,Float a,Float b){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","create",0xb5dac5c8,"thx.color._Lab.Lab_Impl_.create","thx/color/Lab.hx",42,0x540022c8)
            	HX_STACK_ARG(l,"l")
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  42)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,a)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Lab_Impl__obj,create,return )

::Array< Float > Lab_Impl__obj::fromFloats(::Array< Float > arr){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","fromFloats",0x202add2d,"thx.color._Lab.Lab_Impl_.fromFloats","thx/color/Lab.hx",44,0x540022c8)
            	HX_STACK_ARG(arr,"arr")
HXLINE(  45)		::thx::ArrayFloats_obj::resize(arr,(int)3,null());
HXLINE(  46)		return ::Array_obj< Float >::__new(3)->init(0,arr->__get((int)0))->init(1,arr->__get((int)1))->init(2,arr->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,fromFloats,return )

::Array< Float > Lab_Impl__obj::fromString(::String color){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","fromString",0xf004e2a7,"thx.color._Lab.Lab_Impl_.fromString","thx/color/Lab.hx",49,0x540022c8)
            	HX_STACK_ARG(color,"color")
HXLINE(  50)		HX_VARI(  ::thx::color::parse::ColorInfo,info) = ::thx::color::parse::ColorParser_obj::parseColor(color);
HXLINE(  51)		if (hx::IsNull( info )) {
HXLINE(  52)			return null();
            		}
HXLINE(  54)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  54)			::String _hx_switch_0 = info->name;
            			if (  (_hx_switch_0==HX_("cielab",ae,76,7c,4d)) ||  (_hx_switch_0==HX_("l*a*b*",af,3b,9d,9d)) ||  (_hx_switch_0==HX_("lab",4d,48,52,00)) ){
HXLINE(  56)				::Array< Float > _hx_tmp = ::thx::color::parse::ColorParser_obj::getFloatChannels(info->channels,(int)3,false);
HXLINE(  54)				return ::thx::color::_Lab::Lab_Impl__obj::fromFloats(_hx_tmp);
HXDLIN(  54)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  54)				return null();
            			}
            			_hx_goto_0:;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  54)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN(  54)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,fromString,return )

::Array< Float > Lab_Impl__obj::_new(::Array< Float > channels){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","_new",0xf8f4e92d,"thx.color._Lab.Lab_Impl_._new","thx/color/Lab.hx",62,0x540022c8)
            	HX_STACK_ARG(channels,"channels")
HXLINE(  62)		return channels;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,_new,return )

Float Lab_Impl__obj::distance(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","distance",0x36733d01,"thx.color._Lab.Lab_Impl_.distance","thx/color/Lab.hx",70,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  70)		return ((((this1->__get((int)0) - other->__get((int)0)) * (this1->__get((int)0) - other->__get((int)0))) + ((this1->__get((int)1) - other->__get((int)1)) * (this1->__get((int)1) - other->__get((int)1)))) + ((this1->__get((int)2) - other->__get((int)2)) * (this1->__get((int)2) - other->__get((int)2))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lab_Impl__obj,distance,return )

::Array< Float > Lab_Impl__obj::interpolate(::Array< Float > this1,::Array< Float > other,Float t){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","interpolate",0xa2405275,"thx.color._Lab.Lab_Impl_.interpolate","thx/color/Lab.hx",75,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(t,"t")
HXLINE(  75)		return ::Array_obj< Float >::__new(3)->init(0,::thx::Floats_obj::interpolate(t,this1->__get((int)0),other->__get((int)0)))->init(1,::thx::Floats_obj::interpolate(t,this1->__get((int)1),other->__get((int)1)))->init(2,::thx::Floats_obj::interpolate(t,this1->__get((int)2),other->__get((int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Lab_Impl__obj,interpolate,return )

::Array< Float > Lab_Impl__obj::match(::Array< Float > this1, ::Dynamic palette){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","match",0xe466c7f9,"thx.color._Lab.Lab_Impl_.match","thx/color/Lab.hx",81,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(palette,"palette")
HXLINE(  72)		if (hx::IsNull( palette )) {
HXLINE(  73)			HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("Iterable argument \"this\" cannot be null",50,67,e4,44),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),73,HX_("thx.color._Lab.Lab_Impl_",22,20,e7,20),HX_("match",45,49,23,03))));
            		}
            		else {
HXLINE(  74)			Bool _hx_tmp = !(( (Bool)( ::Dynamic( ::Dynamic(palette->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))()->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  74)			if (_hx_tmp) {
HXLINE(  75)				HX_STACK_DO_THROW( ::thx::error::NullArgument_obj::__new(HX_("Iterable argument \"this\" cannot be empty",a4,21,14,cf),hx::SourceInfo(HX_("NullArgument.hx",fa,d0,3d,9e),75,HX_("thx.color._Lab.Lab_Impl_",22,20,e7,20),HX_("match",45,49,23,03))));
            			}
            		}
HXLINE(  83)		HX_VARI( Float,dist) = ::Math_obj::POSITIVE_INFINITY;
HXDLIN(  83)		HX_VARI( ::Array< Float >,closest) = null();
HXLINE(  85)		{
HXLINE(  85)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(palette->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN(  85)			while(true){
HXLINE(  85)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  85)				if (_hx_tmp1) {
HXLINE(  85)					goto _hx_goto_1;
            				}
HXDLIN(  85)				HX_VARI( ::Array< Float >,color) = ( (::Array< Float >)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  86)				HX_VARI( Float,ndist) = ::thx::color::_Lab::Lab_Impl__obj::distance(this1,color);
HXLINE(  87)				Bool _hx_tmp2 = (ndist < dist);
HXDLIN(  87)				if (_hx_tmp2) {
HXLINE(  88)					dist = ndist;
HXLINE(  89)					closest = color;
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE(  92)		return closest;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lab_Impl__obj,match,return )

::Array< Float > Lab_Impl__obj::min(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","min",0xa551bb46,"thx.color._Lab.Lab_Impl_.min","thx/color/Lab.hx",96,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  96)		HX_VARI( Float,l) = ::Math_obj::min(this1->__get((int)0),other->__get((int)0));
HXDLIN(  96)		HX_VARI( Float,a) = ::Math_obj::min(this1->__get((int)1),other->__get((int)1));
HXDLIN(  96)		HX_VARI( Float,b) = ::Math_obj::min(this1->__get((int)2),other->__get((int)2));
HXDLIN(  96)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,a)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lab_Impl__obj,min,return )

::Array< Float > Lab_Impl__obj::max(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","max",0xa551b458,"thx.color._Lab.Lab_Impl_.max","thx/color/Lab.hx",99,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  99)		HX_VARI( Float,l) = ::Math_obj::max(this1->__get((int)0),other->__get((int)0));
HXDLIN(  99)		HX_VARI( Float,a) = ::Math_obj::max(this1->__get((int)1),other->__get((int)1));
HXDLIN(  99)		HX_VARI( Float,b) = ::Math_obj::max(this1->__get((int)2),other->__get((int)2));
HXDLIN(  99)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,a)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lab_Impl__obj,max,return )

::Array< Float > Lab_Impl__obj::roundTo(::Array< Float > this1,Int decimals){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","roundTo",0xe537051d,"thx.color._Lab.Lab_Impl_.roundTo","thx/color/Lab.hx",102,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(decimals,"decimals")
HXLINE( 102)		HX_VARI( Float,l) = ::thx::Floats_obj::roundTo(this1->__get((int)0),decimals);
HXDLIN( 102)		HX_VARI( Float,a) = ::thx::Floats_obj::roundTo(this1->__get((int)1),decimals);
HXDLIN( 102)		HX_VARI( Float,b) = ::thx::Floats_obj::roundTo(this1->__get((int)2),decimals);
HXDLIN( 102)		return ::Array_obj< Float >::__new(3)->init(0,l)->init(1,a)->init(2,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lab_Impl__obj,roundTo,return )

Bool Lab_Impl__obj::equals(::Array< Float > this1,::Array< Float > other){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","equals",0xf9be4d0b,"thx.color._Lab.Lab_Impl_.equals","thx/color/Lab.hx",105,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 105)		return ::thx::color::_Lab::Lab_Impl__obj::nearEquals(this1,other,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lab_Impl__obj,equals,return )

Bool Lab_Impl__obj::nearEquals(::Array< Float > this1,::Array< Float > other, ::Dynamic __o_tolerance){
 ::Dynamic tolerance = __o_tolerance.Default(((Float)1e-9));
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","nearEquals",0x9a022613,"thx.color._Lab.Lab_Impl_.nearEquals","thx/color/Lab.hx",108,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
            	HX_STACK_ARG(tolerance,"tolerance")
HXLINE( 108)		Bool _hx_tmp;
HXDLIN( 108)		Bool _hx_tmp1 = ::thx::Floats_obj::nearEquals(this1->__get((int)0),other->__get((int)0),tolerance);
HXDLIN( 108)		if (_hx_tmp1) {
HXLINE( 108)			_hx_tmp = ::thx::Floats_obj::nearEquals(this1->__get((int)1),other->__get((int)1),tolerance);
            		}
            		else {
HXLINE( 108)			_hx_tmp = false;
            		}
HXDLIN( 108)		if (_hx_tmp) {
HXLINE( 108)			return ::thx::Floats_obj::nearEquals(this1->__get((int)2),other->__get((int)2),tolerance);
            		}
            		else {
HXLINE( 108)			return false;
            		}
HXDLIN( 108)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Lab_Impl__obj,nearEquals,return )

::Array< Float > Lab_Impl__obj::withL(::Array< Float > this1,Float newl){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","withL",0xabb24e3a,"thx.color._Lab.Lab_Impl_.withL","thx/color/Lab.hx",111,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newl,"newl")
HXLINE( 111)		return ::Array_obj< Float >::__new(3)->init(0,newl)->init(1,this1->__get((int)1))->init(2,this1->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lab_Impl__obj,withL,return )

::Array< Float > Lab_Impl__obj::withA(::Array< Float > this1,Float newa){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","withA",0xabb24e2f,"thx.color._Lab.Lab_Impl_.withA","thx/color/Lab.hx",114,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newa,"newa")
HXLINE( 114)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,newa)->init(2,this1->__get((int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lab_Impl__obj,withA,return )

::Array< Float > Lab_Impl__obj::withB(::Array< Float > this1,Float newb){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","withB",0xabb24e30,"thx.color._Lab.Lab_Impl_.withB","thx/color/Lab.hx",117,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(newb,"newb")
HXLINE( 117)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,this1->__get((int)1))->init(2,newb);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lab_Impl__obj,withB,return )

::String Lab_Impl__obj::toString(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toString",0x02e87a78,"thx.color._Lab.Lab_Impl_.toString","thx/color/Lab.hx",120,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 120)		return ((((((HX_("lab(",3b,fb,ac,47) + this1->__get((int)0)) + HX_(",",2c,00,00,00)) + this1->__get((int)1)) + HX_(",",2c,00,00,00)) + this1->__get((int)2)) + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toString,return )

::Array< Float > Lab_Impl__obj::toLCh(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toLCh",0xf5575e2a,"thx.color._Lab.Lab_Impl_.toLCh","thx/color/Lab.hx",122,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 123)		Float _hx_tmp = ::Math_obj::atan2(this1->__get((int)2),this1->__get((int)1));
HXDLIN( 123)		HX_VARI( Float,h) = ((Float)(_hx_tmp * (int)180) / (Float)::Math_obj::PI);
HXDLIN( 123)		HX_VARI( Float,c) = ::Math_obj::sqrt(((this1->__get((int)1) * this1->__get((int)1)) + (this1->__get((int)2) * this1->__get((int)2))));
HXLINE( 125)		return ::Array_obj< Float >::__new(3)->init(0,this1->__get((int)0))->init(1,c)->init(2,h);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toLCh,return )

::Array< Float > Lab_Impl__obj::toLuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toLuv",0xf55789c6,"thx.color._Lab.Lab_Impl_.toLuv","thx/color/Lab.hx",129,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 129)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 129)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toLuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toLuv,return )

::Array< Float > Lab_Impl__obj::toCmy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toCmy",0xf550ae88,"thx.color._Lab.Lab_Impl_.toCmy","thx/color/Lab.hx",132,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 132)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 132)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toCmy,return )

::Array< Float > Lab_Impl__obj::toCmyk(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toCmyk",0xb14808e3,"thx.color._Lab.Lab_Impl_.toCmyk","thx/color/Lab.hx",135,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 135)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 135)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCmyk(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toCmyk,return )

::Array< Float > Lab_Impl__obj::toCubeHelix(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toCubeHelix",0xa68e3c02,"thx.color._Lab.Lab_Impl_.toCubeHelix","thx/color/Lab.hx",138,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 138)		HX_VARI_NAME( ::Array< Float >,this2,"this") = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 138)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toCubeHelixWithGamma(this2,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toCubeHelix,return )

Float Lab_Impl__obj::toGrey(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toGrey",0xb3f09d46,"thx.color._Lab.Lab_Impl_.toGrey","thx/color/Lab.hx",141,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 141)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 141)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toGrey(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toGrey,return )

::Array< Float > Lab_Impl__obj::toHsl(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toHsl",0xf5547efa,"thx.color._Lab.Lab_Impl_.toHsl","thx/color/Lab.hx",144,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 144)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 144)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsl(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toHsl,return )

::Array< Float > Lab_Impl__obj::toHsv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toHsv",0xf5547f04,"thx.color._Lab.Lab_Impl_.toHsv","thx/color/Lab.hx",147,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 147)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 147)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toHsv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toHsv,return )

::Array< Float > Lab_Impl__obj::toHunterLab(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toHunterLab",0x72bf8d26,"thx.color._Lab.Lab_Impl_.toHunterLab","thx/color/Lab.hx",150,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 150)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toXyz(this1);
HXDLIN( 150)		return ::thx::color::_Xyz::Xyz_Impl__obj::toHunterLab(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toHunterLab,return )

Int Lab_Impl__obj::toRgb(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toRgb",0xf55c0b06,"thx.color._Lab.Lab_Impl_.toRgb","thx/color/Lab.hx",153,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 153)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 153)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgb(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toRgb,return )

Int Lab_Impl__obj::toRgba(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toRgba",0xbb2d9a9b,"thx.color._Lab.Lab_Impl_.toRgba","thx/color/Lab.hx",156,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 156)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbxa(this1);
HXDLIN( 156)		return ::thx::color::_Rgbxa::Rgbxa_Impl__obj::toRgba(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toRgba,return )

::Array< Float > Lab_Impl__obj::toRgbx(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toRgbx",0xbb2d9ab2,"thx.color._Lab.Lab_Impl_.toRgbx","thx/color/Lab.hx",159,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 159)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toXyz(this1);
HXDLIN( 159)		return ::thx::color::_Xyz::Xyz_Impl__obj::toRgbx(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toRgbx,return )

::Array< Float > Lab_Impl__obj::toRgbxa(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toRgbxa",0x0cb9c16f,"thx.color._Lab.Lab_Impl_.toRgbxa","thx/color/Lab.hx",162,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 162)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 162)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toRgbxa(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toRgbxa,return )

Float Lab_Impl__obj::toTemperature(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toTemperature",0xbdac052d,"thx.color._Lab.Lab_Impl_.toTemperature","thx/color/Lab.hx",165,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 165)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 165)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toTemperature(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toTemperature,return )

::Array< Float > Lab_Impl__obj::toXyz(::Array< Float > this1){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Float _hx_run(Float t){
            			HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toXyz",0xf560a852,"thx.color._Lab.Lab_Impl_.toXyz","thx/color/Lab.hx",169,0x540022c8)
            			HX_STACK_ARG(t,"t")
HXLINE( 169)			if ((t > ((Float)0.206896551724137928))) {
HXLINE( 170)				return ::Math_obj::pow(t,(int)3);
            			}
            			else {
HXLINE( 172)				return (((Float)0.128418549346016653) * (t - ((Float)0.137931034482758619)));
            			}
HXLINE( 169)			return ((Float)0.);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toXyz",0xf560a852,"thx.color._Lab.Lab_Impl_.toXyz","thx/color/Lab.hx",167,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 168)		HX_VARI(  ::Dynamic,f) =  ::Dynamic(new _hx_Closure_0());
HXLINE( 175)		Float _hx_tmp = ::thx::color::_Xyz::Xyz_Impl__obj::whiteReference->__get((int)0);
HXDLIN( 175)		Float _hx_tmp1 = ( (Float)(f(((((Float)0.00862068965517241367) * (this1->__get((int)0) + (int)16)) + (((Float)0.002) * this1->__get((int)1))))) );
HXDLIN( 175)		HX_VARI( Float,x) = (_hx_tmp * _hx_tmp1);
HXLINE( 176)		Float _hx_tmp2 = ::thx::color::_Xyz::Xyz_Impl__obj::whiteReference->__get((int)1);
HXDLIN( 176)		Float _hx_tmp3 = ( (Float)(f((((Float)0.00862068965517241367) * (this1->__get((int)0) + (int)16)))) );
HXLINE( 175)		HX_VARI( Float,y) = (_hx_tmp2 * _hx_tmp3);
HXLINE( 177)		Float _hx_tmp4 = ::thx::color::_Xyz::Xyz_Impl__obj::whiteReference->__get((int)2);
HXDLIN( 177)		Float _hx_tmp5 = ( (Float)(f(((((Float)0.00862068965517241367) * (this1->__get((int)0) + (int)16)) - (((Float)0.005) * this1->__get((int)2))))) );
HXLINE( 179)		return ::Array_obj< Float >::__new(3)->init(0,x)->init(1,y)->init(2,(_hx_tmp4 * _hx_tmp5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toXyz,return )

::Array< Float > Lab_Impl__obj::toYuv(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toYuv",0xf5616713,"thx.color._Lab.Lab_Impl_.toYuv","thx/color/Lab.hx",183,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 183)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toRgbx(this1);
HXDLIN( 183)		return ::thx::color::_Rgbx::Rgbx_Impl__obj::toYuv(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toYuv,return )

::Array< Float > Lab_Impl__obj::toYxy(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","toYxy",0xf56169b3,"thx.color._Lab.Lab_Impl_.toYxy","thx/color/Lab.hx",186,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 186)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::toXyz(this1);
HXDLIN( 186)		return ::thx::color::_Xyz::Xyz_Impl__obj::toYxy(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,toYxy,return )

Float Lab_Impl__obj::get_l(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","get_l",0x72a423f7,"thx.color._Lab.Lab_Impl_.get_l","thx/color/Lab.hx",189,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 189)		return this1->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,get_l,return )

Float Lab_Impl__obj::get_a(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","get_a",0x72a423ec,"thx.color._Lab.Lab_Impl_.get_a","thx/color/Lab.hx",191,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 191)		return this1->__get((int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,get_a,return )

Float Lab_Impl__obj::get_b(::Array< Float > this1){
            	HX_STACK_FRAME("thx.color._Lab.Lab_Impl_","get_b",0x72a423ed,"thx.color._Lab.Lab_Impl_.get_b","thx/color/Lab.hx",193,0x540022c8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 193)		return this1->__get((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Lab_Impl__obj,get_b,return )


Lab_Impl__obj::Lab_Impl__obj()
{
}

bool Lab_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"match") ) { outValue = match_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withL") ) { outValue = withL_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withA") ) { outValue = withA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withB") ) { outValue = withB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLCh") ) { outValue = toLCh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLuv") ) { outValue = toLuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmy") ) { outValue = toCmy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsl") ) { outValue = toHsl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHsv") ) { outValue = toHsv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgb") ) { outValue = toRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toXyz") ) { outValue = toXyz_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYuv") ) { outValue = toYuv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toYxy") ) { outValue = toYxy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_l") ) { outValue = get_l_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_a") ) { outValue = get_a_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_b") ) { outValue = get_b_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCmyk") ) { outValue = toCmyk_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toGrey") ) { outValue = toGrey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgba") ) { outValue = toRgba_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbx") ) { outValue = toRgbx_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toRgbxa") ) { outValue = toRgbxa_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFloats") ) { outValue = fromFloats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { outValue = nearEquals_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCubeHelix") ) { outValue = toCubeHelix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHunterLab") ) { outValue = toHunterLab_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"toTemperature") ) { outValue = toTemperature_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Lab_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Lab_Impl__obj_sStaticStorageInfo = 0;
#endif

static void Lab_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Lab_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Lab_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Lab_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class Lab_Impl__obj::__mClass;

static ::String Lab_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("fromFloats","\x61","\x28","\x9a","\x84"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("withL","\x86","\xcf","\x6e","\xca"),
	HX_HCSTRING("withA","\x7b","\xcf","\x6e","\xca"),
	HX_HCSTRING("withB","\x7c","\xcf","\x6e","\xca"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toLCh","\x76","\xdf","\x13","\x14"),
	HX_HCSTRING("toLuv","\x12","\x0b","\x14","\x14"),
	HX_HCSTRING("toCmy","\xd4","\x2f","\x0d","\x14"),
	HX_HCSTRING("toCmyk","\x17","\xaa","\x7c","\x77"),
	HX_HCSTRING("toCubeHelix","\x4e","\xbe","\x80","\x23"),
	HX_HCSTRING("toGrey","\x7a","\x3e","\x25","\x7a"),
	HX_HCSTRING("toHsl","\x46","\x00","\x11","\x14"),
	HX_HCSTRING("toHsv","\x50","\x00","\x11","\x14"),
	HX_HCSTRING("toHunterLab","\x72","\x0f","\xb2","\xef"),
	HX_HCSTRING("toRgb","\x52","\x8c","\x18","\x14"),
	HX_HCSTRING("toRgba","\xcf","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbx","\xe6","\x3b","\x62","\x81"),
	HX_HCSTRING("toRgbxa","\xbb","\x2d","\x92","\xb4"),
	HX_HCSTRING("toTemperature","\x79","\xb2","\xfc","\x3d"),
	HX_HCSTRING("toXyz","\x9e","\x29","\x1d","\x14"),
	HX_HCSTRING("toYuv","\x5f","\xe8","\x1d","\x14"),
	HX_HCSTRING("toYxy","\xff","\xea","\x1d","\x14"),
	HX_HCSTRING("get_l","\x43","\xa5","\x60","\x91"),
	HX_HCSTRING("get_a","\x38","\xa5","\x60","\x91"),
	HX_HCSTRING("get_b","\x39","\xa5","\x60","\x91"),
	::String(null())
};

void Lab_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color._Lab.Lab_Impl_","\x22","\x20","\xe7","\x20");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Lab_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Lab_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Lab_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Lab_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Lab_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Lab_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Lab_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
} // end namespace _Lab
