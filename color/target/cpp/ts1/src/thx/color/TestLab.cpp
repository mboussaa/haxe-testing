// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_thx_color_TestLab
#include <thx/color/TestLab.h>
#endif
#ifndef INCLUDED_thx_color__Lab_Lab_Impl_
#include <thx/color/_Lab/Lab_Impl_.h>
#endif
#ifndef INCLUDED_thx_color__Rgb_Rgb_Impl_
#include <thx/color/_Rgb/Rgb_Impl_.h>
#endif
#ifndef INCLUDED_thx_color_palettes_Web
#include <thx/color/palettes/Web.h>
#endif
#ifndef INCLUDED_utest_Assert
#include <utest/Assert.h>
#endif

namespace thx{
namespace color{

void TestLab_obj::__construct(){
            	HX_STACK_FRAME("thx.color.TestLab","new",0x6ce40378,"thx.color.TestLab.new","thx/color/TestLab.hx",7,0x65e3503a)
            	HX_STACK_THIS(this)
            	}

Dynamic TestLab_obj::__CreateEmpty() { return new TestLab_obj; }

hx::ObjectPtr< TestLab_obj > TestLab_obj::__new()
{
	hx::ObjectPtr< TestLab_obj > _hx_result = new TestLab_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestLab_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestLab_obj > _hx_result = new TestLab_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestLab_obj::testBasics(){
            	HX_STACK_FRAME("thx.color.TestLab","testBasics",0x1d0653df,"thx.color.TestLab.testBasics","thx/color/TestLab.hx",9,0x65e3503a)
            	HX_STACK_THIS(this)
HXLINE(  10)		HX_VARI( ::Array< Float >,color) = ::Array_obj< Float >::__new(3)->init(0,(int)100)->init(1,(int)10)->init(2,(int)-10);
HXLINE(  11)		::utest::Assert_obj::equals((int)100,color->__get((int)0),null(),hx::SourceInfo(HX_("TestLab.hx",a3,b2,f8,58),11,HX_("thx.color.TestLab",86,27,57,0e),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  12)		::utest::Assert_obj::equals((int)10,color->__get((int)1),null(),hx::SourceInfo(HX_("TestLab.hx",a3,b2,f8,58),12,HX_("thx.color.TestLab",86,27,57,0e),HX_("testBasics",f7,73,1f,6e)));
HXLINE(  13)		::utest::Assert_obj::equals((int)-10,color->__get((int)2),null(),hx::SourceInfo(HX_("TestLab.hx",a3,b2,f8,58),13,HX_("thx.color.TestLab",86,27,57,0e),HX_("testBasics",f7,73,1f,6e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLab_obj,testBasics,(void))

void TestLab_obj::testString(){
            	HX_STACK_FRAME("thx.color.TestLab","testString",0xd90b4eab,"thx.color.TestLab.testString","thx/color/TestLab.hx",18,0x65e3503a)
            	HX_STACK_THIS(this)
HXLINE(  18)		::utest::Assert_obj::equals(HX_("lab(100,10,-10)",b4,fc,27,4c),::thx::color::_Lab::Lab_Impl__obj::toString(::Array_obj< Float >::__new(3)->init(0,(int)100)->init(1,(int)10)->init(2,(int)-10)),null(),hx::SourceInfo(HX_("TestLab.hx",a3,b2,f8,58),18,HX_("thx.color.TestLab",86,27,57,0e),HX_("testString",c3,6e,24,2a)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLab_obj,testString,(void))

void TestLab_obj::testParse(){
            	HX_STACK_FRAME("thx.color.TestLab","testParse",0x6b936399,"thx.color.TestLab.testParse","thx/color/TestLab.hx",21,0x65e3503a)
            	HX_STACK_THIS(this)
HXLINE(  22)		HX_VARI( ::Array< Float >,color) = ::thx::color::_Lab::Lab_Impl__obj::fromString(HX_("lab(100,10,-10)",b4,fc,27,4c));
HXLINE(  23)		::utest::Assert_obj::equals(HX_("lab(100,10,-10)",b4,fc,27,4c),::thx::color::_Lab::Lab_Impl__obj::toString(color),null(),hx::SourceInfo(HX_("TestLab.hx",a3,b2,f8,58),23,HX_("thx.color.TestLab",86,27,57,0e),HX_("testParse",81,ce,57,86)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLab_obj,testParse,(void))

void TestLab_obj::testFromFloat(){
            	HX_STACK_FRAME("thx.color.TestLab","testFromFloat",0x0f222e38,"thx.color.TestLab.testFromFloat","thx/color/TestLab.hx",26,0x65e3503a)
            	HX_STACK_THIS(this)
HXLINE(  27)		HX_VARI( ::Array< Float >,s) = ::thx::color::_Lab::Lab_Impl__obj::fromString(HX_("lab(50,10,-10)",f4,16,b4,a8));
HXDLIN(  27)		HX_VARI( ::Array< Float >,f) = ::thx::color::_Lab::Lab_Impl__obj::fromFloats(::Array_obj< Float >::__new(3)->init(0,((Float)50.0))->init(1,((Float)10.0))->init(2,((Float)-10.0)));
HXLINE(  29)		::utest::Assert_obj::same(s,f,null(),null(),null(),hx::SourceInfo(HX_("TestLab.hx",a3,b2,f8,58),29,HX_("thx.color.TestLab",86,27,57,0e),HX_("testFromFloat",20,2d,5a,ea)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLab_obj,testFromFloat,(void))

void TestLab_obj::testFromString(){
            	HX_STACK_FRAME("thx.color.TestLab","testFromString",0xfea048b5,"thx.color.TestLab.testFromString","thx/color/TestLab.hx",32,0x65e3503a)
            	HX_STACK_THIS(this)
HXLINE(  34)		HX_VARI( ::Array< Float >,color) = ::Array_obj< Float >::__new(3)->init(0,(int)50)->init(1,(int)10)->init(2,(int)-10);
HXLINE(  35)		::Array< Float > _hx_tmp = ::thx::color::_Lab::Lab_Impl__obj::fromString(HX_("lab(50,10,-10)",f4,16,b4,a8));
HXDLIN(  35)		::utest::Assert_obj::same(color,_hx_tmp,null(),null(),null(),hx::SourceInfo(HX_("TestLab.hx",a3,b2,f8,58),35,HX_("thx.color.TestLab",86,27,57,0e),HX_("testFromString",cd,54,67,f4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLab_obj,testFromString,(void))

void TestLab_obj::testDistance(){
            	HX_STACK_FRAME("thx.color.TestLab","testDistance",0x3d4d638f,"thx.color.TestLab.testDistance","thx/color/TestLab.hx",38,0x65e3503a)
            	HX_STACK_THIS(this)
HXLINE(  39)		HX_VARI( ::Array< Float >,orange) = ::thx::color::_Rgb::Rgb_Impl__obj::toLab(::thx::color::palettes::Web_obj::orange);
HXDLIN(  39)		HX_VARI( ::Array< Float >,red) = ::thx::color::_Rgb::Rgb_Impl__obj::toLab(::thx::color::palettes::Web_obj::red);
HXDLIN(  39)		HX_VARI( ::Array< Float >,blue) = ::thx::color::_Rgb::Rgb_Impl__obj::toLab(::thx::color::palettes::Web_obj::blue);
HXLINE(  44)		::utest::Assert_obj::isTrue((::thx::color::_Lab::Lab_Impl__obj::distance(orange,red) < ::thx::color::_Lab::Lab_Impl__obj::distance(orange,blue)),null(),hx::SourceInfo(HX_("TestLab.hx",a3,b2,f8,58),44,HX_("thx.color.TestLab",86,27,57,0e),HX_("testDistance",a7,b9,00,df)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLab_obj,testDistance,(void))

void TestLab_obj::testMatch(){
            	HX_STACK_FRAME("thx.color.TestLab","testMatch",0xb1611cab,"thx.color.TestLab.testMatch","thx/color/TestLab.hx",47,0x65e3503a)
            	HX_STACK_THIS(this)
HXLINE(  48)		::Array< Float > _hx_tmp = ::thx::color::_Rgb::Rgb_Impl__obj::toLab(::thx::color::palettes::Web_obj::red);
HXDLIN(  48)		HX_VARI( ::Array< ::Dynamic>,arr) = ::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,::thx::color::_Rgb::Rgb_Impl__obj::toLab(::thx::color::palettes::Web_obj::blue));
HXLINE(  49)		::Array< Float > _hx_tmp1 = ::thx::color::_Lab::Lab_Impl__obj::match(::thx::color::_Rgb::Rgb_Impl__obj::toLab(::thx::color::palettes::Web_obj::orange),arr);
HXDLIN(  49)		Bool _hx_tmp2 = ::thx::color::_Lab::Lab_Impl__obj::equals(_hx_tmp1,::thx::color::_Rgb::Rgb_Impl__obj::toLab(::thx::color::palettes::Web_obj::red));
HXDLIN(  49)		::utest::Assert_obj::isTrue(_hx_tmp2,null(),hx::SourceInfo(HX_("TestLab.hx",a3,b2,f8,58),49,HX_("thx.color.TestLab",86,27,57,0e),HX_("testMatch",93,87,25,cc)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestLab_obj,testMatch,(void))


TestLab_obj::TestLab_obj()
{
}

hx::Val TestLab_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"testParse") ) { return hx::Val( testParse_dyn()); }
		if (HX_FIELD_EQ(inName,"testMatch") ) { return hx::Val( testMatch_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"testBasics") ) { return hx::Val( testBasics_dyn()); }
		if (HX_FIELD_EQ(inName,"testString") ) { return hx::Val( testString_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testDistance") ) { return hx::Val( testDistance_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"testFromFloat") ) { return hx::Val( testFromFloat_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"testFromString") ) { return hx::Val( testFromString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestLab_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestLab_obj_sStaticStorageInfo = 0;
#endif

static ::String TestLab_obj_sMemberFields[] = {
	HX_HCSTRING("testBasics","\xf7","\x73","\x1f","\x6e"),
	HX_HCSTRING("testString","\xc3","\x6e","\x24","\x2a"),
	HX_HCSTRING("testParse","\x81","\xce","\x57","\x86"),
	HX_HCSTRING("testFromFloat","\x20","\x2d","\x5a","\xea"),
	HX_HCSTRING("testFromString","\xcd","\x54","\x67","\xf4"),
	HX_HCSTRING("testDistance","\xa7","\xb9","\x00","\xdf"),
	HX_HCSTRING("testMatch","\x93","\x87","\x25","\xcc"),
	::String(null()) };

static void TestLab_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestLab_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestLab_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestLab_obj::__mClass,"__mClass");
};

#endif

hx::Class TestLab_obj::__mClass;

void TestLab_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("thx.color.TestLab","\x86","\x27","\x57","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestLab_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestLab_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestLab_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestLab_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestLab_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestLab_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace thx
} // end namespace color
