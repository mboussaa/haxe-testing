// Generated by Haxe 3.3.0
#ifndef INCLUDED_thx_Enums
#define INCLUDED_thx_Enums

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(thx,Enums)

namespace thx{


class HXCPP_CLASS_ATTRIBUTES Enums_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Enums_obj OBJ_;
		Enums_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="thx.Enums")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"thx.Enums"); }
		static hx::ObjectPtr< Enums_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Enums_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Enums","\x32","\xa6","\xb4","\x03"); }

		static ::String string( ::Dynamic e);
		static ::Dynamic string_dyn();

		static Int compare( ::Dynamic a, ::Dynamic b);
		static ::Dynamic compare_dyn();

		static Bool sameConstructor( ::Dynamic a, ::Dynamic b);
		static ::Dynamic sameConstructor_dyn();

		static  ::Dynamic min( ::Dynamic a, ::Dynamic b);
		static ::Dynamic min_dyn();

		static  ::Dynamic max( ::Dynamic a, ::Dynamic b);
		static ::Dynamic max_dyn();

};

} // end namespace thx

#endif /* INCLUDED_thx_Enums */ 
